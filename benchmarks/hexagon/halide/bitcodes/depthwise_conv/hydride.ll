; ModuleID = 'depthwise_conv_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i32, i32 }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.107 = private constant [9 x i8] c"stride_x\00", align 32
@str.108 = private constant [9 x i8] c"stride_y\00", align 32
@str.109 = private constant [11 x i8] c"dilation_x\00", align 32
@str.110 = private constant [11 x i8] c"dilation_y\00", align 32
@str.111 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.112 = private constant [13 x i8] c"output_shift\00", align 32
@str.113 = private constant [12 x i8] c"output_zero\00", align 32
@str.114 = private constant [11 x i8] c"output_min\00", align 32
@str.115 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.116 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.115, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.116, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.117 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.118 = private constant [22 x i8] c"depthwise_conv_hvx128\00", align 32
@depthwise_conv_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.117, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.118, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #15
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #16
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #16
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #16
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #16
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #16
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #16
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #16
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #16
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #16
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #16
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #16
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #16
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #16
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #15
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #15
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #15
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #16
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #16
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #16
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #15
  %call.i = call i8* @malloc(i32 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #15
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #15
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a553, i32 %a548, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c1815 = alloca [512 x i32], align 128
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep1778 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep1778, align 4
  %.fca.1.gep1779 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep1779, align 4
  %.fca.2.gep1780 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep1780, align 4
  %sum_filter1817 = alloca [128 x i32], align 128
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep, align 4
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep, align 4
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep, align 4
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !43
  %host.i1870 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %1 = load i8*, i8** %host.i1870, align 4, !tbaa !43
  %dim.i1871 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i1871, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !49
  %extent.i1879 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 1
  %4 = load i32, i32* %extent.i1879, align 4, !tbaa !49
  %stride.i1881 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 2
  %5 = load i32, i32* %stride.i1881, align 4, !tbaa !50
  %extent.i1885 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 1
  %6 = load i32, i32* %extent.i1885, align 4, !tbaa !49
  %stride.i1887 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 2
  %7 = load i32, i32* %stride.i1887, align 4, !tbaa !50
  %host.i1888 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %8 = load i8*, i8** %host.i1888, align 4, !tbaa !43
  %dim.i1889 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i1889, align 8, !tbaa !46
  %min.i1894 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 0
  %10 = load i32, i32* %min.i1894, align 4, !tbaa !47
  %stride.i1896 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 2
  %11 = load i32, i32* %stride.i1896, align 4, !tbaa !50
  %min.i1898 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 0
  %12 = load i32, i32* %min.i1898, align 4, !tbaa !47
  %stride.i1900 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 2
  %13 = load i32, i32* %stride.i1900, align 4, !tbaa !50
  %min.i1902 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 0
  %14 = load i32, i32* %min.i1902, align 4, !tbaa !47
  %extent.i1904 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 1
  %15 = load i32, i32* %extent.i1904, align 4, !tbaa !49
  %stride.i1906 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 2
  %16 = load i32, i32* %stride.i1906, align 4, !tbaa !50
  %host.i1907 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %17 = load i8*, i8** %host.i1907, align 4, !tbaa !43
  %dim.i1908 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %18 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i1908, align 8, !tbaa !46
  %min.i1915 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 0
  %19 = load i32, i32* %min.i1915, align 4, !tbaa !47
  %extent.i1917 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 1
  %20 = load i32, i32* %extent.i1917, align 4, !tbaa !49
  %stride.i1919 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 2
  %21 = load i32, i32* %stride.i1919, align 4, !tbaa !50
  %min.i1921 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 0
  %22 = load i32, i32* %min.i1921, align 4, !tbaa !47
  %extent.i1923 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 1
  %23 = load i32, i32* %extent.i1923, align 4, !tbaa !49
  %stride.i1925 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 2
  %24 = load i32, i32* %stride.i1925, align 4, !tbaa !50
  %stride.i1931 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 3, i32 2
  %25 = load i32, i32* %stride.i1931, align 4, !tbaa !50
  %26 = icmp sgt i32 %20, 7
  %27 = and i32 %20, 1
  %28 = icmp eq i32 %27, 0
  %29 = or i1 %26, %28
  %30 = icmp sgt i32 %23, 7
  %31 = and i32 %23, 1
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %30, %32
  %34 = and i1 %29, %33
  %35 = icmp sgt i32 %3, 127
  %36 = and i1 %35, %34
  br i1 %36, label %then_bb, label %next_bb

after_bb:                                         ; preds = %"end for output.s0.b.rebased58", %"end for output.s0.b.rebased"
  %.02096 = phi i8* [ %.2, %"end for output.s0.b.rebased" ], [ %.4, %"end for output.s0.b.rebased58" ]
  %.0 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %tobool.not.i.not = icmp eq i8* %.02096, null
  br i1 %tobool.not.i.not, label %if.then.i1933, label %if.then.i

if.then.i.loopexit:                               ; preds = %"end for output.s0.y.yo1762"
  %37 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i

if.then.i:                                        ; preds = %if.then.i.loopexit, %after_bb
  %.02108 = phi i8* [ %.0, %after_bb ], [ %4743, %if.then.i.loopexit ]
  %.020962107 = phi i8* [ %.02096, %after_bb ], [ %37, %if.then.i.loopexit ]
  %ptr1.i = bitcast i8* %.020962107 to i8**
  %38 = load i8*, i8** %ptr1.i, align 4, !tbaa !95
  %tobool.not.i2029 = icmp eq i8* %38, null
  br i1 %tobool.not.i2029, label %pseudostack_free.exit, label %land.lhs.true.i2032

land.lhs.true.i2032:                              ; preds = %if.then.i
  %cumulative_size.i2030 = getelementptr inbounds i8, i8* %.020962107, i32 8
  %39 = bitcast i8* %cumulative_size.i2030 to i32*
  %40 = load i32, i32* %39, align 4, !tbaa !97
  %cmp.i2031 = icmp ugt i32 %40, 16384
  br i1 %cmp.i2031, label %if.then.i2033, label %pseudostack_free.exit

if.then.i2033:                                    ; preds = %land.lhs.true.i2032
  call void @halide_free(i8* null, i8* nonnull %38) #15
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i, %land.lhs.true.i2032, %if.then.i2033
  store i8* null, i8** %ptr1.i, align 4, !tbaa !95
  %size.i2034 = getelementptr inbounds i8, i8* %.020962107, i32 4
  %41 = bitcast i8* %size.i2034 to i32*
  store i32 0, i32* %41, align 4, !tbaa !98
  %cumulative_size4.i = getelementptr inbounds i8, i8* %.020962107, i32 8
  %42 = bitcast i8* %cumulative_size4.i to i32*
  store i32 0, i32* %42, align 4, !tbaa !97
  br label %if.then.i1933

if.then.i1933:                                    ; preds = %pseudostack_free.exit, %after_bb, %after_bb199
  %.021012111 = phi i8* [ %4743, %after_bb199 ], [ %.02108, %pseudostack_free.exit ], [ %.0, %after_bb ]
  %ptr1.i2036 = bitcast i8* %.021012111 to i8**
  %43 = load i8*, i8** %ptr1.i2036, align 4, !tbaa !95
  %tobool.not.i2037 = icmp eq i8* %43, null
  br i1 %tobool.not.i2037, label %pseudostack_free.exit2045, label %land.lhs.true.i2040

land.lhs.true.i2040:                              ; preds = %if.then.i1933
  %cumulative_size.i2038 = getelementptr inbounds i8, i8* %.021012111, i32 8
  %44 = bitcast i8* %cumulative_size.i2038 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !97
  %cmp.i2039 = icmp ugt i32 %45, 16384
  br i1 %cmp.i2039, label %if.then.i2041, label %pseudostack_free.exit2045

if.then.i2041:                                    ; preds = %land.lhs.true.i2040
  call void @halide_free(i8* null, i8* nonnull %43) #15
  br label %pseudostack_free.exit2045

pseudostack_free.exit2045:                        ; preds = %if.then.i1933, %land.lhs.true.i2040, %if.then.i2041
  store i8* null, i8** %ptr1.i2036, align 4, !tbaa !95
  %size.i2042 = getelementptr inbounds i8, i8* %.021012111, i32 4
  %46 = bitcast i8* %size.i2042 to i32*
  store i32 0, i32* %46, align 4, !tbaa !98
  %cumulative_size4.i2043 = getelementptr inbounds i8, i8* %.021012111, i32 8
  %47 = bitcast i8* %cumulative_size4.i2043 to i32*
  store i32 0, i32* %47, align 4, !tbaa !97
  br label %call_destructor.exit1937

call_destructor.exit1937:                         ; preds = %next_bb29, %pseudostack_free.exit2045
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #15
  ret i32 0

then_bb:                                          ; preds = %entry
  %t2201 = icmp slt i32 %a553, 0
  %t2203 = icmp slt i32 %stride_x, 0
  %48 = add nsw i32 %4, -1
  %49 = mul nsw i32 %48, %a553
  %t2207 = select i1 %t2201, i32 %49, i32 0
  %50 = add nsw i32 %20, -1
  %51 = icmp slt i32 %20, 2
  %52 = select i1 %51, i32 %20, i32 2
  %53 = add nsw i32 %52, -2
  %t2208.s = select i1 %t2203, i32 %50, i32 %53
  %t2209 = icmp slt i32 %a548, 0
  %t2211 = icmp slt i32 %stride_y, 0
  %54 = add nsw i32 %6, -1
  %55 = mul nsw i32 %54, %a548
  %t2215 = select i1 %t2209, i32 %55, i32 0
  %56 = add nsw i32 %23, -1
  %57 = icmp slt i32 %23, 2
  %58 = select i1 %57, i32 %23, i32 2
  %59 = add nsw i32 %58, -2
  %t2216.s = select i1 %t2211, i32 %56, i32 %59
  %60 = icmp eq i32 %4, 3
  %61 = icmp eq i32 %6, 3
  %t2217 = and i1 %60, %61
  %t2194 = icmp eq i32 %depth_multiplier, 1
  %a548.op1850 = shl i32 %a548, 1
  %62 = select i1 %t2209, i32 %a548.op1850, i32 0
  %63 = select i1 %t2217, i32 %62, i32 %t2215
  %64 = add nsw i32 %t2216.s, %22
  %65 = mul nsw i32 %64, %stride_y
  %b16 = add nsw i32 %65, %63
  %a553.op1851 = shl i32 %a553, 1
  %66 = select i1 %t2201, i32 %a553.op1851, i32 0
  %67 = select i1 %t2217, i32 %66, i32 %t2207
  %68 = add nsw i32 %t2208.s, %19
  %69 = mul nsw i32 %68, %stride_x
  %b15 = add nsw i32 %69, %67
  %70 = select i1 %t2209, i32 0, i32 %55
  %71 = select i1 %t2211, i32 %59, i32 %56
  %72 = add nsw i32 %71, %22
  %73 = mul nsw i32 %72, %stride_y
  %b23 = add nsw i32 %73, %70
  %74 = select i1 %t2201, i32 0, i32 %49
  %75 = select i1 %t2203, i32 %53, i32 %50
  %76 = add nsw i32 %75, %19
  %77 = mul nsw i32 %76, %stride_x
  %b17 = add nsw i32 %77, %74
  %78 = mul nsw i32 %13, %12
  %79 = mul nsw i32 %16, %14
  %80 = mul nsw i32 %11, %10
  %81 = add i32 %78, %80
  %t2195 = add i32 %81, %79
  %82 = add nuw nsw i32 %3, 127
  %83 = ashr i32 %82, 7
  %b10 = add nsw i32 %3, -128
  %84 = icmp sgt i32 %4, 0
  %85 = icmp sgt i32 %6, 0
  %86 = select i1 %85, i32 %6, i32 0
  %.op2277 = shl i32 %4, 8
  %87 = select i1 %84, i32 %.op2277, i32 0
  %88 = mul i32 %87, %86
  %89 = or i32 %88, 134
  %90 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %91 = zext i8 %filter_zero to i16
  %92 = insertelement <64 x i16> undef, i16 %91, i32 0
  %93 = shufflevector <64 x i16> %92, <64 x i16> undef, <64 x i32> zeroinitializer
  %94 = bitcast <64 x i16> %93 to <32 x i32>
  %95 = bitcast i8* %0 to i32*
  %96 = zext i8 %input_zero to i32
  %97 = insertelement <32 x i32> undef, i32 %96, i32 0
  %98 = shufflevector <32 x i32> %97, <32 x i32> undef, <32 x i32> zeroinitializer
  %99 = bitcast [128 x i32]* %sum_filter1817 to <32 x i32>*
  %100 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 32
  %101 = bitcast i32* %100 to <32 x i32>*
  %102 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 64
  %103 = bitcast i32* %102 to <32 x i32>*
  %104 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 96
  %105 = bitcast i32* %104 to <32 x i32>*
  %a13 = add nsw i32 %69, %t2207
  %106 = icmp slt i32 %t2207, %67
  %t2225 = select i1 %106, i32 %a13, i32 %b15
  %a14 = add nsw i32 %65, %t2215
  %107 = icmp slt i32 %t2215, %63
  %t2223 = select i1 %107, i32 %a14, i32 %b16
  %108 = icmp sgt i32 %a553, 0
  %109 = select i1 %108, i32 %a553, i32 0
  %110 = shl nuw nsw i32 %109, 1
  %111 = select i1 %t2217, i32 %110, i32 %74
  %a15 = add nsw i32 %77, %111
  %112 = icmp sgt i32 %111, %74
  %113 = select i1 %112, i32 %a15, i32 %b17
  %a29 = sub nsw i32 %113, %t2225
  %114 = icmp sgt i32 %a548, 0
  %115 = select i1 %114, i32 %a548, i32 0
  %116 = shl nuw nsw i32 %115, 1
  %117 = select i1 %t2217, i32 %116, i32 %70
  %a21 = add nsw i32 %73, %117
  %118 = icmp sgt i32 %117, %70
  %119 = select i1 %118, i32 %a21, i32 %b23
  %a30 = sub nsw i32 %119, %t2223
  %t2228 = sub nsw i32 %b17, %a13
  %t2227 = sub nsw i32 %b23, %a14
  %120 = icmp sgt i32 %15, 0
  %121 = icmp sgt i32 %a29, -1
  %t2543 = select i1 %121, i32 %a29, i32 -1
  %122 = icmp sgt i32 %a30, -1
  %t2544 = select i1 %122, i32 %a30, i32 -1
  %123 = add nsw i32 %t2544, 1
  %124 = shl i32 %t2543, 7
  %t2545 = add i32 %124, 128
  %125 = mul i32 %t2545, %123
  %126 = add i32 %125, 131
  %127 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %128 = icmp sgt i32 %t2227, -1
  %129 = sub i32 %a14, %t2223
  %130 = add nsw i32 %a29, 1
  %131 = sub i32 %a13, %t2225
  %132 = icmp sgt i32 %t2228, -1
  %133 = icmp eq i32 %depth_multiplier, 0
  %134 = select i1 %133, <64 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <64 x i32> zeroinitializer
  %depth_multiplier.lobit1861 = ashr i32 %depth_multiplier, 31
  %135 = xor i32 %depth_multiplier.lobit1861, -1
  %136 = sub nsw i32 %135, %depth_multiplier.lobit1861
  %.neg2131 = mul i32 %24, %22
  %.neg2132 = mul i32 %21, %19
  %.neg2133 = mul i32 %25, %14
  %reass.add2135 = add i32 %.neg2131, %.neg2132
  %reass.add2136 = add i32 %reass.add2135, %.neg2133
  %137 = add nuw nsw i32 %23, 1
  %138 = ashr i32 %137, 1
  %139 = icmp sgt i32 %23, 0
  %b33 = add nsw i32 %23, -2
  %140 = sub nsw i32 %a548.op1850, %t2223
  %141 = sub nsw i32 %a548, %t2223
  %142 = add nuw nsw i32 %20, 1
  %143 = ashr i32 %142, 1
  %144 = icmp sgt i32 %20, 0
  %b34 = add nsw i32 %20, -2
  %145 = bitcast [512 x i32]* %offset_c1815 to <32 x i32>*
  %146 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 32
  %147 = bitcast i32* %146 to <32 x i32>*
  %148 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 64
  %149 = bitcast i32* %148 to <32 x i32>*
  %150 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 96
  %151 = bitcast i32* %150 to <32 x i32>*
  %152 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 128
  %153 = bitcast i32* %152 to <32 x i32>*
  %154 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 160
  %155 = bitcast i32* %154 to <32 x i32>*
  %156 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 192
  %157 = bitcast i32* %156 to <32 x i32>*
  %158 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 224
  %159 = bitcast i32* %158 to <32 x i32>*
  %160 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 256
  %161 = bitcast i32* %160 to <32 x i32>*
  %162 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 288
  %163 = bitcast i32* %162 to <32 x i32>*
  %164 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 320
  %165 = bitcast i32* %164 to <32 x i32>*
  %166 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 352
  %167 = bitcast i32* %166 to <32 x i32>*
  %168 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 384
  %169 = bitcast i32* %168 to <32 x i32>*
  %170 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 416
  %171 = bitcast i32* %170 to <32 x i32>*
  %172 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 448
  %173 = bitcast i32* %172 to <32 x i32>*
  %174 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 480
  %175 = bitcast i32* %174 to <32 x i32>*
  %176 = sub nsw i32 %a553.op1851, %t2225
  %177 = sub nsw i32 %a553, %t2225
  %178 = sext i32 %output_multiplier to i64
  %179 = insertelement <32 x i64> undef, i64 %178, i32 0
  %180 = shufflevector <32 x i64> %179, <32 x i64> undef, <32 x i32> zeroinitializer
  %181 = shl nuw i32 1, %output_shift
  %182 = ashr i32 %181, 1
  %183 = zext i8 %output_zero to i16
  %184 = insertelement <64 x i16> undef, i16 %183, i32 0
  %185 = shufflevector <64 x i16> %184, <64 x i16> undef, <64 x i32> zeroinitializer
  %186 = bitcast <64 x i16> %185 to <32 x i32>
  %187 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %188 = shufflevector <32 x i8> %187, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = bitcast <128 x i8> %188 to <32 x i32>
  %190 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %191 = shufflevector <32 x i8> %190, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <128 x i8> %191 to <32 x i32>
  %193 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %194 = add i32 %4, -1
  %xtraiter2539 = and i32 %4, 3
  %195 = icmp ult i32 %194, 3
  %unroll_iter2542 = and i32 %4, -4
  %lcmp.mod2541.not = icmp eq i32 %xtraiter2539, 0
  %xtraiter2544 = and i32 %4, 3
  %196 = icmp ult i32 %194, 3
  %unroll_iter2551 = and i32 %4, -4
  %lcmp.mod2546.not = icmp eq i32 %xtraiter2544, 0
  %197 = or i32 %t2227, %t2228
  %198 = icmp slt i32 %197, 0
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %35, label %then_bb28, label %next_bb29

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.1 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %526, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 7
  %199 = icmp slt i32 %a8, %b10
  %output.s0.c.c.base = select i1 %199, i32 %a8, i32 %b10
  %200 = load i32, i32* %.fca.1.gep, align 4, !tbaa !98
  %cmp.i = icmp ult i32 %200, %89
  %201 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !95
  br i1 %cmp.i, label %if.then.i1938, label %pseudostack_alloc.exit, !prof !99

if.then.i1938:                                    ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %201, null
  %202 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i = icmp ugt i32 %202, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i1938
  call void @halide_free(i8* null, i8* nonnull %201) #15
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i1938
  %add.i = add i32 %202, %89
  store i32 %add.i, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i = icmp ugt i32 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i32 %89) #15
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %89, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %203 = phi i8* [ %storemerge.i, %if.end11.i ], [ %201, %"for output.s0.c.co" ]
  %204 = bitcast i8* %203 to i16*
  %.not1852 = icmp eq i8* %203, null
  br i1 %.not1852, label %then_bb2, label %"produce filter_zeroed", !prof !100

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %205 = alloca i8*, i32 %89, align 128
  %206 = bitcast i8** %205 to i16*
  store i8** %205, i8*** %90, align 4
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %206, %then_bb2 ], [ %204, %pseudostack_alloc.exit ]
  br i1 %85, label %"for filter_zeroed.s0.y.preheader", label %"produce sum_filter.thread", !prof !101

"for filter_zeroed.s0.y.preheader":               ; preds = %"produce filter_zeroed"
  br i1 %84, label %"for filter_zeroed.s0.y.us", label %"for sum_filter.s1.r19$y.preheader", !prof !101

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %filter_zeroed.s0.y.us = phi i32 [ %315, %"end for filter_zeroed.s0.x.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y.preheader" ]
  %207 = mul nsw i32 %filter_zeroed.s0.y.us, %7
  %208 = add nsw i32 %207, %output.s0.c.c.base
  %209 = mul nsw i32 %filter_zeroed.s0.y.us, %4
  br i1 %195, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %filter_zeroed.s0.x.us = phi i32 [ %293, %"for filter_zeroed.s0.x.us" ], [ 0, %"for filter_zeroed.s0.y.us" ]
  %niter2543 = phi i32 [ %niter2543.nsub.3, %"for filter_zeroed.s0.x.us" ], [ %unroll_iter2542, %"for filter_zeroed.s0.y.us" ]
  %210 = mul nsw i32 %filter_zeroed.s0.x.us, %5
  %211 = add nsw i32 %208, %210
  %212 = getelementptr inbounds i8, i8* %1, i32 %211
  %213 = bitcast i8* %212 to <64 x i8>*
  %214 = load <64 x i8>, <64 x i8>* %213, align 1, !tbaa !102
  %215 = zext <64 x i8> %214 to <64 x i16>
  %216 = bitcast <64 x i16> %215 to <32 x i32>
  %217 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %216, <32 x i32> %94) #11
  %218 = add nsw i32 %filter_zeroed.s0.x.us, %209
  %219 = shl nsw i32 %218, 7
  %220 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %219
  %221 = bitcast i16* %220 to <32 x i32>*
  store <32 x i32> %217, <32 x i32>* %221, align 128, !tbaa !105
  %222 = getelementptr inbounds i8, i8* %212, i32 64
  %223 = bitcast i8* %222 to <64 x i8>*
  %224 = load <64 x i8>, <64 x i8>* %223, align 1, !tbaa !102
  %225 = zext <64 x i8> %224 to <64 x i16>
  %226 = bitcast <64 x i16> %225 to <32 x i32>
  %227 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %226, <32 x i32> %94) #11
  %228 = getelementptr inbounds i16, i16* %220, i32 64
  %229 = bitcast i16* %228 to <32 x i32>*
  store <32 x i32> %227, <32 x i32>* %229, align 128, !tbaa !105
  %230 = or i32 %filter_zeroed.s0.x.us, 1
  %231 = mul nsw i32 %230, %5
  %232 = add nsw i32 %208, %231
  %233 = getelementptr inbounds i8, i8* %1, i32 %232
  %234 = bitcast i8* %233 to <64 x i8>*
  %235 = load <64 x i8>, <64 x i8>* %234, align 1, !tbaa !102
  %236 = zext <64 x i8> %235 to <64 x i16>
  %237 = bitcast <64 x i16> %236 to <32 x i32>
  %238 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %237, <32 x i32> %94) #11
  %239 = add nsw i32 %230, %209
  %240 = shl nsw i32 %239, 7
  %241 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %240
  %242 = bitcast i16* %241 to <32 x i32>*
  store <32 x i32> %238, <32 x i32>* %242, align 128, !tbaa !105
  %243 = getelementptr inbounds i8, i8* %233, i32 64
  %244 = bitcast i8* %243 to <64 x i8>*
  %245 = load <64 x i8>, <64 x i8>* %244, align 1, !tbaa !102
  %246 = zext <64 x i8> %245 to <64 x i16>
  %247 = bitcast <64 x i16> %246 to <32 x i32>
  %248 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %247, <32 x i32> %94) #11
  %249 = getelementptr inbounds i16, i16* %241, i32 64
  %250 = bitcast i16* %249 to <32 x i32>*
  store <32 x i32> %248, <32 x i32>* %250, align 128, !tbaa !105
  %251 = or i32 %filter_zeroed.s0.x.us, 2
  %252 = mul nsw i32 %251, %5
  %253 = add nsw i32 %208, %252
  %254 = getelementptr inbounds i8, i8* %1, i32 %253
  %255 = bitcast i8* %254 to <64 x i8>*
  %256 = load <64 x i8>, <64 x i8>* %255, align 1, !tbaa !102
  %257 = zext <64 x i8> %256 to <64 x i16>
  %258 = bitcast <64 x i16> %257 to <32 x i32>
  %259 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %258, <32 x i32> %94) #11
  %260 = add nsw i32 %251, %209
  %261 = shl nsw i32 %260, 7
  %262 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %261
  %263 = bitcast i16* %262 to <32 x i32>*
  store <32 x i32> %259, <32 x i32>* %263, align 128, !tbaa !105
  %264 = getelementptr inbounds i8, i8* %254, i32 64
  %265 = bitcast i8* %264 to <64 x i8>*
  %266 = load <64 x i8>, <64 x i8>* %265, align 1, !tbaa !102
  %267 = zext <64 x i8> %266 to <64 x i16>
  %268 = bitcast <64 x i16> %267 to <32 x i32>
  %269 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %268, <32 x i32> %94) #11
  %270 = getelementptr inbounds i16, i16* %262, i32 64
  %271 = bitcast i16* %270 to <32 x i32>*
  store <32 x i32> %269, <32 x i32>* %271, align 128, !tbaa !105
  %272 = or i32 %filter_zeroed.s0.x.us, 3
  %273 = mul nsw i32 %272, %5
  %274 = add nsw i32 %208, %273
  %275 = getelementptr inbounds i8, i8* %1, i32 %274
  %276 = bitcast i8* %275 to <64 x i8>*
  %277 = load <64 x i8>, <64 x i8>* %276, align 1, !tbaa !102
  %278 = zext <64 x i8> %277 to <64 x i16>
  %279 = bitcast <64 x i16> %278 to <32 x i32>
  %280 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %279, <32 x i32> %94) #11
  %281 = add nsw i32 %272, %209
  %282 = shl nsw i32 %281, 7
  %283 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %282
  %284 = bitcast i16* %283 to <32 x i32>*
  store <32 x i32> %280, <32 x i32>* %284, align 128, !tbaa !105
  %285 = getelementptr inbounds i8, i8* %275, i32 64
  %286 = bitcast i8* %285 to <64 x i8>*
  %287 = load <64 x i8>, <64 x i8>* %286, align 1, !tbaa !102
  %288 = zext <64 x i8> %287 to <64 x i16>
  %289 = bitcast <64 x i16> %288 to <32 x i32>
  %290 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %289, <32 x i32> %94) #11
  %291 = getelementptr inbounds i16, i16* %283, i32 64
  %292 = bitcast i16* %291 to <32 x i32>*
  store <32 x i32> %290, <32 x i32>* %292, align 128, !tbaa !105
  %293 = add nuw nsw i32 %filter_zeroed.s0.x.us, 4
  %niter2543.nsub.3 = add i32 %niter2543, -4
  %niter2543.ncmp.3 = icmp eq i32 %niter2543.nsub.3, 0
  br i1 %niter2543.ncmp.3, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x.us", %"for filter_zeroed.s0.y.us"
  %filter_zeroed.s0.x.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y.us" ], [ %293, %"for filter_zeroed.s0.x.us" ]
  br i1 %lcmp.mod2541.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil"

"for filter_zeroed.s0.x.us.epil":                 ; preds = %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x.us.epil"
  %filter_zeroed.s0.x.us.epil = phi i32 [ %314, %"for filter_zeroed.s0.x.us.epil" ], [ %filter_zeroed.s0.x.us.unr, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %epil.iter2540 = phi i32 [ %epil.iter2540.sub, %"for filter_zeroed.s0.x.us.epil" ], [ %xtraiter2539, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %294 = mul nsw i32 %filter_zeroed.s0.x.us.epil, %5
  %295 = add nsw i32 %208, %294
  %296 = getelementptr inbounds i8, i8* %1, i32 %295
  %297 = bitcast i8* %296 to <64 x i8>*
  %298 = load <64 x i8>, <64 x i8>* %297, align 1, !tbaa !102
  %299 = zext <64 x i8> %298 to <64 x i16>
  %300 = bitcast <64 x i16> %299 to <32 x i32>
  %301 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %300, <32 x i32> %94) #11
  %302 = add nsw i32 %filter_zeroed.s0.x.us.epil, %209
  %303 = shl nsw i32 %302, 7
  %304 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %303
  %305 = bitcast i16* %304 to <32 x i32>*
  store <32 x i32> %301, <32 x i32>* %305, align 128, !tbaa !105
  %306 = getelementptr inbounds i8, i8* %296, i32 64
  %307 = bitcast i8* %306 to <64 x i8>*
  %308 = load <64 x i8>, <64 x i8>* %307, align 1, !tbaa !102
  %309 = zext <64 x i8> %308 to <64 x i16>
  %310 = bitcast <64 x i16> %309 to <32 x i32>
  %311 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %310, <32 x i32> %94) #11
  %312 = getelementptr inbounds i16, i16* %304, i32 64
  %313 = bitcast i16* %312 to <32 x i32>*
  store <32 x i32> %311, <32 x i32>* %313, align 128, !tbaa !105
  %314 = add nuw nsw i32 %filter_zeroed.s0.x.us.epil, 1
  %epil.iter2540.sub = add i32 %epil.iter2540, -1
  %epil.iter2540.cmp.not = icmp eq i32 %epil.iter2540.sub, 0
  br i1 %epil.iter2540.cmp.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil", !llvm.loop !107

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us.epil", %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa"
  %315 = add nuw nsw i32 %filter_zeroed.s0.y.us, 1
  %.not1867.us = icmp eq i32 %315, %6
  br i1 %.not1867.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"produce sum_filter.thread":                      ; preds = %"produce filter_zeroed"
  %316 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %317 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"consume sum_filter"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us", %"for filter_zeroed.s0.y.preheader"
  %318 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %319 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"for sum_filter.s1.r19$y"

"for sum_filter.s1.r19$y":                        ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x"
  %convolved1816.sroa.57.0 = phi <32 x i32> [ %convolved1816.sroa.57.2, %"end for sum_filter.s1.r19$x" ], [ %319, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved1816.sroa.38.0 = phi <32 x i32> [ %convolved1816.sroa.38.2, %"end for sum_filter.s1.r19$x" ], [ %318, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved1816.sroa.19.0 = phi <32 x i32> [ %convolved1816.sroa.19.2, %"end for sum_filter.s1.r19$x" ], [ %319, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved1816.sroa.0.0 = phi <32 x i32> [ %convolved1816.sroa.0.2, %"end for sum_filter.s1.r19$x" ], [ %318, %"for sum_filter.s1.r19$y.preheader" ]
  %"sum_filter.s1.r19$y" = phi i32 [ %416, %"end for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  br i1 %84, label %"for sum_filter.s1.r19$x.preheader", label %"end for sum_filter.s1.r19$x", !prof !101

"for sum_filter.s1.r19$x.preheader":              ; preds = %"for sum_filter.s1.r19$y"
  %320 = mul nsw i32 %"sum_filter.s1.r19$y", %4
  br i1 %196, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"for sum_filter.s1.r19$x":                        ; preds = %"for sum_filter.s1.r19$x.preheader", %"for sum_filter.s1.r19$x"
  %convolved1816.sroa.57.1 = phi <32 x i32> [ %395, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.57.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved1816.sroa.38.1 = phi <32 x i32> [ %394, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.38.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved1816.sroa.19.1 = phi <32 x i32> [ %387, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.19.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved1816.sroa.0.1 = phi <32 x i32> [ %386, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ]
  %"sum_filter.s1.r19$x" = phi i32 [ %396, %"for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$x.preheader" ]
  %niter2552 = phi i32 [ %niter2552.nsub.3, %"for sum_filter.s1.r19$x" ], [ %unroll_iter2551, %"for sum_filter.s1.r19$x.preheader" ]
  %321 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.19.1, <32 x i32> %convolved1816.sroa.0.1)
  %322 = add nsw i32 %"sum_filter.s1.r19$x", %320
  %323 = shl nsw i32 %322, 7
  %324 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %323
  %325 = bitcast i16* %324 to <32 x i32>*
  %326 = load <32 x i32>, <32 x i32>* %325, align 128, !tbaa !105
  %327 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %326) #11
  %328 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %327, <64 x i32> %321) #11
  %329 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %328)
  %330 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %328)
  %331 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.57.1, <32 x i32> %convolved1816.sroa.38.1)
  %332 = getelementptr inbounds i16, i16* %324, i32 64
  %333 = bitcast i16* %332 to <32 x i32>*
  %334 = load <32 x i32>, <32 x i32>* %333, align 128, !tbaa !105
  %335 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %334) #11
  %336 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %335, <64 x i32> %331) #11
  %337 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %336)
  %338 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %336)
  %339 = or i32 %"sum_filter.s1.r19$x", 1
  %340 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %330, <32 x i32> %329)
  %341 = add nsw i32 %339, %320
  %342 = shl nsw i32 %341, 7
  %343 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %342
  %344 = bitcast i16* %343 to <32 x i32>*
  %345 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !105
  %346 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %345) #11
  %347 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %346, <64 x i32> %340) #11
  %348 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %347)
  %349 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %347)
  %350 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %338, <32 x i32> %337)
  %351 = getelementptr inbounds i16, i16* %343, i32 64
  %352 = bitcast i16* %351 to <32 x i32>*
  %353 = load <32 x i32>, <32 x i32>* %352, align 128, !tbaa !105
  %354 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %353) #11
  %355 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %354, <64 x i32> %350) #11
  %356 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %355)
  %357 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %355)
  %358 = or i32 %"sum_filter.s1.r19$x", 2
  %359 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %349, <32 x i32> %348)
  %360 = add nsw i32 %358, %320
  %361 = shl nsw i32 %360, 7
  %362 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %361
  %363 = bitcast i16* %362 to <32 x i32>*
  %364 = load <32 x i32>, <32 x i32>* %363, align 128, !tbaa !105
  %365 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %364) #11
  %366 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %365, <64 x i32> %359) #11
  %367 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %366)
  %368 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %366)
  %369 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %357, <32 x i32> %356)
  %370 = getelementptr inbounds i16, i16* %362, i32 64
  %371 = bitcast i16* %370 to <32 x i32>*
  %372 = load <32 x i32>, <32 x i32>* %371, align 128, !tbaa !105
  %373 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %372) #11
  %374 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %373, <64 x i32> %369) #11
  %375 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %374)
  %376 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %374)
  %377 = or i32 %"sum_filter.s1.r19$x", 3
  %378 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %368, <32 x i32> %367)
  %379 = add nsw i32 %377, %320
  %380 = shl nsw i32 %379, 7
  %381 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %380
  %382 = bitcast i16* %381 to <32 x i32>*
  %383 = load <32 x i32>, <32 x i32>* %382, align 128, !tbaa !105
  %384 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %383) #11
  %385 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %384, <64 x i32> %378) #11
  %386 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %385)
  %387 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %385)
  %388 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %376, <32 x i32> %375)
  %389 = getelementptr inbounds i16, i16* %381, i32 64
  %390 = bitcast i16* %389 to <32 x i32>*
  %391 = load <32 x i32>, <32 x i32>* %390, align 128, !tbaa !105
  %392 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %391) #11
  %393 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %392, <64 x i32> %388) #11
  %394 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %393)
  %395 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %393)
  %396 = add nuw nsw i32 %"sum_filter.s1.r19$x", 4
  %niter2552.nsub.3 = add i32 %niter2552, -4
  %niter2552.ncmp.3 = icmp eq i32 %niter2552.nsub.3, 0
  br i1 %niter2552.ncmp.3, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"end for sum_filter.s1.r19$x.loopexit.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x", %"for sum_filter.s1.r19$x.preheader"
  %.lcssa2456.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %386, %"for sum_filter.s1.r19$x" ]
  %.lcssa2455.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %387, %"for sum_filter.s1.r19$x" ]
  %.lcssa2454.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %394, %"for sum_filter.s1.r19$x" ]
  %.lcssa.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %395, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.57.1.unr = phi <32 x i32> [ %convolved1816.sroa.57.0, %"for sum_filter.s1.r19$x.preheader" ], [ %395, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.38.1.unr = phi <32 x i32> [ %convolved1816.sroa.38.0, %"for sum_filter.s1.r19$x.preheader" ], [ %394, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.19.1.unr = phi <32 x i32> [ %convolved1816.sroa.19.0, %"for sum_filter.s1.r19$x.preheader" ], [ %387, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.0.1.unr = phi <32 x i32> [ %convolved1816.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ], [ %386, %"for sum_filter.s1.r19$x" ]
  %"sum_filter.s1.r19$x.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$x.preheader" ], [ %396, %"for sum_filter.s1.r19$x" ]
  br i1 %lcmp.mod2546.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil"

"for sum_filter.s1.r19$x.epil":                   ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil"
  %convolved1816.sroa.57.1.epil = phi <32 x i32> [ %414, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.57.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved1816.sroa.38.1.epil = phi <32 x i32> [ %413, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.38.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved1816.sroa.19.1.epil = phi <32 x i32> [ %406, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.19.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved1816.sroa.0.1.epil = phi <32 x i32> [ %405, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.0.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %"sum_filter.s1.r19$x.epil" = phi i32 [ %415, %"for sum_filter.s1.r19$x.epil" ], [ %"sum_filter.s1.r19$x.unr", %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %epil.iter2545 = phi i32 [ %epil.iter2545.sub, %"for sum_filter.s1.r19$x.epil" ], [ %xtraiter2544, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %397 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.19.1.epil, <32 x i32> %convolved1816.sroa.0.1.epil)
  %398 = add nsw i32 %"sum_filter.s1.r19$x.epil", %320
  %399 = shl nsw i32 %398, 7
  %400 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %399
  %401 = bitcast i16* %400 to <32 x i32>*
  %402 = load <32 x i32>, <32 x i32>* %401, align 128, !tbaa !105
  %403 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %402) #11
  %404 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %403, <64 x i32> %397) #11
  %405 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %404)
  %406 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %404)
  %407 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.57.1.epil, <32 x i32> %convolved1816.sroa.38.1.epil)
  %408 = getelementptr inbounds i16, i16* %400, i32 64
  %409 = bitcast i16* %408 to <32 x i32>*
  %410 = load <32 x i32>, <32 x i32>* %409, align 128, !tbaa !105
  %411 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %410) #11
  %412 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %411, <64 x i32> %407) #11
  %413 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %412)
  %414 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %412)
  %415 = add nuw nsw i32 %"sum_filter.s1.r19$x.epil", 1
  %epil.iter2545.sub = add i32 %epil.iter2545, -1
  %epil.iter2545.cmp.not = icmp eq i32 %epil.iter2545.sub, 0
  br i1 %epil.iter2545.cmp.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil", !llvm.loop !108

"end for sum_filter.s1.r19$x":                    ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil", %"for sum_filter.s1.r19$y"
  %convolved1816.sroa.57.2 = phi <32 x i32> [ %convolved1816.sroa.57.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %414, %"for sum_filter.s1.r19$x.epil" ]
  %convolved1816.sroa.38.2 = phi <32 x i32> [ %convolved1816.sroa.38.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa2454.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %413, %"for sum_filter.s1.r19$x.epil" ]
  %convolved1816.sroa.19.2 = phi <32 x i32> [ %convolved1816.sroa.19.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa2455.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %406, %"for sum_filter.s1.r19$x.epil" ]
  %convolved1816.sroa.0.2 = phi <32 x i32> [ %convolved1816.sroa.0.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa2456.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %405, %"for sum_filter.s1.r19$x.epil" ]
  %416 = add nuw nsw i32 %"sum_filter.s1.r19$y", 1
  %.not1865 = icmp eq i32 %416, %6
  br i1 %.not1865, label %"consume sum_filter", label %"for sum_filter.s1.r19$y"

"consume sum_filter":                             ; preds = %"end for sum_filter.s1.r19$x", %"produce sum_filter.thread"
  %convolved1816.sroa.57.3 = phi <32 x i32> [ %317, %"produce sum_filter.thread" ], [ %convolved1816.sroa.57.2, %"end for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.38.3 = phi <32 x i32> [ %316, %"produce sum_filter.thread" ], [ %convolved1816.sroa.38.2, %"end for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.19.3 = phi <32 x i32> [ %317, %"produce sum_filter.thread" ], [ %convolved1816.sroa.19.2, %"end for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.0.3 = phi <32 x i32> [ %316, %"produce sum_filter.thread" ], [ %convolved1816.sroa.0.2, %"end for sum_filter.s1.r19$x" ]
  %417 = getelementptr inbounds i32, i32* %95, i32 %output.s0.c.c.base
  %418 = bitcast i32* %417 to <32 x i32>*
  %419 = load <32 x i32>, <32 x i32>* %418, align 4, !tbaa !109
  %420 = getelementptr inbounds i32, i32* %417, i32 32
  %421 = bitcast i32* %420 to <32 x i32>*
  %422 = load <32 x i32>, <32 x i32>* %421, align 4, !tbaa !109
  %423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %422, <32 x i32> %419)
  %424 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.0.3) #11
  %425 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %424, <32 x i32> %98, <32 x i32> %convolved1816.sroa.0.3) #11
  %426 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.19.3) #11
  %427 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %426, <32 x i32> %98, <32 x i32> %convolved1816.sroa.19.3) #11
  %428 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %425, <32 x i32> %427) #11
  %429 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %423, <64 x i32> %428) #11
  %430 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %429)
  store <32 x i32> %430, <32 x i32>* %99, align 128, !tbaa !111
  %431 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %429)
  store <32 x i32> %431, <32 x i32>* %101, align 128, !tbaa !119
  %432 = getelementptr inbounds i32, i32* %417, i32 64
  %433 = bitcast i32* %432 to <32 x i32>*
  %434 = load <32 x i32>, <32 x i32>* %433, align 4, !tbaa !109
  %435 = getelementptr inbounds i32, i32* %417, i32 96
  %436 = bitcast i32* %435 to <32 x i32>*
  %437 = load <32 x i32>, <32 x i32>* %436, align 4, !tbaa !109
  %438 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %437, <32 x i32> %434)
  %439 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.38.3) #11
  %440 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %439, <32 x i32> %98, <32 x i32> %convolved1816.sroa.38.3) #11
  %441 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.57.3) #11
  %442 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %441, <32 x i32> %98, <32 x i32> %convolved1816.sroa.57.3) #11
  %443 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %440, <32 x i32> %442) #11
  %444 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %438, <64 x i32> %443) #11
  %445 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %444)
  store <32 x i32> %445, <32 x i32>* %103, align 128, !tbaa !121
  %446 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %444)
  store <32 x i32> %446, <32 x i32>* %105, align 128, !tbaa !124
  br i1 %120, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !101

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %447 = add nsw i32 %output.s0.c.c.base, 64
  %448 = sub i32 %output.s0.c.c.base, %t2195
  %449 = sub i32 %output.s0.c.c.base, %reass.add2136
  %450 = getelementptr inbounds i16, i16* %filter_zeroed, i32 768
  %451 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1024
  %452 = bitcast i16* %451 to <32 x i16>*
  %453 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1056
  %454 = bitcast i16* %453 to <32 x i16>*
  %455 = getelementptr inbounds i16, i16* %filter_zeroed, i32 896
  %456 = bitcast i16* %455 to <32 x i16>*
  %457 = getelementptr inbounds i16, i16* %filter_zeroed, i32 928
  %458 = bitcast i16* %457 to <32 x i16>*
  %459 = bitcast i16* %450 to <32 x i16>*
  %460 = getelementptr inbounds i16, i16* %filter_zeroed, i32 800
  %461 = bitcast i16* %460 to <32 x i16>*
  %462 = getelementptr inbounds i16, i16* %filter_zeroed, i32 384
  %463 = getelementptr inbounds i16, i16* %filter_zeroed, i32 640
  %464 = bitcast i16* %463 to <32 x i16>*
  %465 = getelementptr inbounds i16, i16* %filter_zeroed, i32 672
  %466 = bitcast i16* %465 to <32 x i16>*
  %467 = getelementptr inbounds i16, i16* %filter_zeroed, i32 512
  %468 = bitcast i16* %467 to <32 x i16>*
  %469 = getelementptr inbounds i16, i16* %filter_zeroed, i32 544
  %470 = bitcast i16* %469 to <32 x i16>*
  %471 = bitcast i16* %462 to <32 x i16>*
  %472 = getelementptr inbounds i16, i16* %filter_zeroed, i32 416
  %473 = bitcast i16* %472 to <32 x i16>*
  %474 = getelementptr inbounds i16, i16* %filter_zeroed, i32 256
  %475 = bitcast i16* %474 to <32 x i16>*
  %476 = getelementptr inbounds i16, i16* %filter_zeroed, i32 288
  %477 = bitcast i16* %476 to <32 x i16>*
  %478 = getelementptr inbounds i16, i16* %filter_zeroed, i32 128
  %479 = bitcast i16* %478 to <32 x i16>*
  %480 = getelementptr inbounds i16, i16* %filter_zeroed, i32 160
  %481 = bitcast i16* %480 to <32 x i16>*
  %482 = bitcast i16* %filter_zeroed to <32 x i16>*
  %483 = getelementptr inbounds i16, i16* %filter_zeroed, i32 32
  %484 = bitcast i16* %483 to <32 x i16>*
  %485 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1088
  %486 = bitcast i16* %485 to <32 x i16>*
  %487 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1120
  %488 = bitcast i16* %487 to <32 x i16>*
  %489 = getelementptr inbounds i16, i16* %filter_zeroed, i32 960
  %490 = bitcast i16* %489 to <32 x i16>*
  %491 = getelementptr inbounds i16, i16* %filter_zeroed, i32 992
  %492 = bitcast i16* %491 to <32 x i16>*
  %493 = getelementptr inbounds i16, i16* %filter_zeroed, i32 832
  %494 = bitcast i16* %493 to <32 x i16>*
  %495 = getelementptr inbounds i16, i16* %filter_zeroed, i32 864
  %496 = bitcast i16* %495 to <32 x i16>*
  %497 = getelementptr inbounds i16, i16* %filter_zeroed, i32 704
  %498 = bitcast i16* %497 to <32 x i16>*
  %499 = getelementptr inbounds i16, i16* %filter_zeroed, i32 736
  %500 = bitcast i16* %499 to <32 x i16>*
  %501 = getelementptr inbounds i16, i16* %filter_zeroed, i32 576
  %502 = bitcast i16* %501 to <32 x i16>*
  %503 = getelementptr inbounds i16, i16* %filter_zeroed, i32 608
  %504 = bitcast i16* %503 to <32 x i16>*
  %505 = getelementptr inbounds i16, i16* %filter_zeroed, i32 448
  %506 = bitcast i16* %505 to <32 x i16>*
  %507 = getelementptr inbounds i16, i16* %filter_zeroed, i32 480
  %508 = bitcast i16* %507 to <32 x i16>*
  %509 = getelementptr inbounds i16, i16* %filter_zeroed, i32 320
  %510 = bitcast i16* %509 to <32 x i16>*
  %511 = getelementptr inbounds i16, i16* %filter_zeroed, i32 352
  %512 = bitcast i16* %511 to <32 x i16>*
  %513 = getelementptr inbounds i16, i16* %filter_zeroed, i32 192
  %514 = bitcast i16* %513 to <32 x i16>*
  %515 = getelementptr inbounds i16, i16* %filter_zeroed, i32 224
  %516 = bitcast i16* %515 to <32 x i16>*
  %517 = getelementptr inbounds i16, i16* %filter_zeroed, i32 64
  %518 = bitcast i16* %517 to <32 x i16>*
  %519 = getelementptr inbounds i16, i16* %filter_zeroed, i32 96
  %520 = bitcast i16* %519 to <32 x i16>*
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %output.s0.b.rebased = phi i32 [ %1162, %"end for output.s0.y.yo" ], [ 0, %"for output.s0.b.rebased.preheader" ]
  %521 = load i32, i32* %.fca.1.gep1779, align 4, !tbaa !98
  %cmp.i1940 = icmp ult i32 %521, %126
  %522 = load i8*, i8** %.fca.0.gep1778, align 4, !tbaa !95
  br i1 %cmp.i1940, label %if.then.i1943, label %pseudostack_alloc.exit1956, !prof !99

if.then.i1943:                                    ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i1942 = icmp ne i8* %522, null
  %523 = load i32, i32* %.fca.2.gep1780, align 4
  %cmp2.i1945 = icmp ugt i32 %523, 16384
  %or.cond2115 = and i1 %tobool1.not.i1942, %cmp2.i1945
  br i1 %or.cond2115, label %if.then3.i1947, label %if.end.i1951

if.then3.i1947:                                   ; preds = %if.then.i1943
  call void @halide_free(i8* null, i8* nonnull %522) #15
  %.pre2343 = load i32, i32* %.fca.2.gep1780, align 4, !tbaa !97
  br label %if.end.i1951

if.end.i1951:                                     ; preds = %if.then3.i1947, %if.then.i1943
  %524 = phi i32 [ %.pre2343, %if.then3.i1947 ], [ %523, %if.then.i1943 ]
  %add.i1949 = add i32 %524, %126
  store i32 %add.i1949, i32* %.fca.2.gep1780, align 4, !tbaa !97
  %cmp7.i1950 = icmp ugt i32 %add.i1949, 16384
  br i1 %cmp7.i1950, label %if.then8.i1953, label %if.end11.i1955

if.then8.i1953:                                   ; preds = %if.end.i1951
  %call.i1952 = call i8* @halide_malloc(i8* null, i32 %126) #15
  br label %if.end11.i1955

if.end11.i1955:                                   ; preds = %if.then8.i1953, %if.end.i1951
  %storemerge.i1954 = phi i8* [ %call.i1952, %if.then8.i1953 ], [ null, %if.end.i1951 ]
  store i8* %storemerge.i1954, i8** %.fca.0.gep1778, align 4, !tbaa !95
  store i32 %126, i32* %.fca.1.gep1779, align 4, !tbaa !98
  br label %pseudostack_alloc.exit1956

pseudostack_alloc.exit1956:                       ; preds = %"for output.s0.b.rebased", %if.end11.i1955
  %525 = phi i8* [ %storemerge.i1954, %if.end11.i1955 ], [ %522, %"for output.s0.b.rebased" ]
  %.not1854 = icmp eq i8* %525, null
  br i1 %.not1854, label %then_bb5, label %"produce resampled_input", !prof !100

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.1, %"consume sum_filter" ], [ %193, %"end for output.s0.y.yo" ]
  %526 = add nuw nsw i32 %output.s0.c.co, 1
  %.not1853 = icmp eq i32 %526, %83
  br i1 %.not1853, label %after_bb, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit1956
  %527 = alloca i8*, i32 %126, align 128
  %528 = bitcast i8** %527 to i8*
  store i8** %527, i8*** %127, align 4
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit1956, %then_bb5
  %resampled_input = phi i8* [ %528, %then_bb5 ], [ %525, %pseudostack_alloc.exit1956 ]
  %529 = add nsw i32 %output.s0.b.rebased, %14
  br i1 %t2194, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %530 = mul nsw i32 %529, %16
  %t2239 = add nsw i32 %448, %530
  br i1 %198, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us", !prof !126

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %resampled_input.s0.y.rebased.us = phi i32 [ %547, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %531 = add nsw i32 %129, %resampled_input.s0.y.rebased.us
  %532 = mul nsw i32 %531, %130
  %t2243.us = add nsw i32 %131, %532
  %533 = add nsw i32 %resampled_input.s0.y.rebased.us, %a14
  %534 = mul nsw i32 %533, %13
  %535 = add nsw i32 %t2239, %534
  br label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %resampled_input.s0.x.rebased.us = phi i32 [ %546, %"for resampled_input.s0.x.rebased.us" ], [ 0, %"for resampled_input.s0.y.rebased.us" ]
  %536 = add nsw i32 %resampled_input.s0.x.rebased.us, %a13
  %537 = mul nsw i32 %536, %11
  %538 = add nsw i32 %535, %537
  %539 = getelementptr inbounds i8, i8* %8, i32 %538
  %540 = bitcast i8* %539 to <128 x i8>*
  %541 = load <128 x i8>, <128 x i8>* %540, align 1, !tbaa !127
  %542 = add nsw i32 %t2243.us, %resampled_input.s0.x.rebased.us
  %543 = shl nsw i32 %542, 7
  %544 = getelementptr inbounds i8, i8* %resampled_input, i32 %543
  %545 = bitcast i8* %544 to <128 x i8>*
  store <128 x i8> %541, <128 x i8>* %545, align 128, !tbaa !129
  %546 = add nuw nsw i32 %resampled_input.s0.x.rebased.us, 1
  %.not1864.us = icmp eq i32 %resampled_input.s0.x.rebased.us, %t2228
  br i1 %.not1864.us, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us"
  %547 = add nuw nsw i32 %resampled_input.s0.y.rebased.us, 1
  %.not1863.us = icmp eq i32 %resampled_input.s0.y.rebased.us, %t2227
  br i1 %.not1863.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  br i1 %128, label %"for resampled_input.s0.y.rebased9.preheader", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader":    ; preds = %next_bb8
  %548 = mul nsw i32 %529, %16
  %549 = sub i32 %548, %t2195
  br i1 %132, label %"for resampled_input.s0.y.rebased9.preheader.split.us", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased9.preheader"
  %550 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output.s0.c.c.base) #11
  %551 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %550, <32 x i32> %550) #11
  %552 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> zeroinitializer, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>) #11
  %553 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %551, <64 x i32> %552) #11
  %554 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %depth_multiplier) #11
  %555 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %554, <32 x i32> %554) #11
  %556 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %555, <64 x i32> %134) #11
  %557 = sdiv <64 x i32> %553, %556
  %558 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %559 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %136) #11
  %560 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %558, <32 x i32> %559) #11
  %561 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %562 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %561, <32 x i32> %559) #11
  %563 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %560, <32 x i32> %562) #11
  %564 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %563, <64 x i32> %557) #11
  %565 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %564) #11
  %566 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %134) #11
  %567 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %566) #11
  %568 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %134) #11
  %569 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %568) #11
  %570 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %567, <32 x i32> %569) #11
  %571 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %570) #11
  %572 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %565, <32 x i32> %571) #11
  %573 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %564) #11
  %574 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %570) #11
  %575 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %573, <32 x i32> %574) #11
  %576 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %572, <32 x i32> %575) #11
  %577 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %447) #11
  %578 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %577, <32 x i32> %577) #11
  %579 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %578, <64 x i32> %552) #11
  %580 = sdiv <64 x i32> %579, %556
  %581 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %563, <64 x i32> %580) #11
  %582 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %581) #11
  %583 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %582, <32 x i32> %571) #11
  %584 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %581) #11
  %585 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %584, <32 x i32> %574) #11
  %586 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %583, <32 x i32> %585) #11
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %resampled_input.s0.y.rebased11.us = phi i32 [ %1117, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %587 = add nsw i32 %129, %resampled_input.s0.y.rebased11.us
  %588 = mul nsw i32 %587, %130
  %t2248.us = add nsw i32 %131, %588
  %589 = add nsw i32 %resampled_input.s0.y.rebased11.us, %a14
  %590 = mul nsw i32 %589, %13
  %t2247.us = add nsw i32 %549, %590
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %resampled_input.s0.x.rebased14.us = phi i32 [ %1116, %"for resampled_input.s0.x.rebased12.us" ], [ 0, %"for resampled_input.s0.y.rebased9.us" ]
  %591 = add nsw i32 %resampled_input.s0.x.rebased14.us, %a13
  %592 = mul nsw i32 %591, %11
  %593 = add nsw i32 %t2247.us, %592
  %594 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %593) #11
  %595 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %594, <32 x i32> %594) #11
  %596 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %595, <64 x i32> %576) #11
  %597 = extractelement <64 x i32> %596, i32 0
  %598 = getelementptr inbounds i8, i8* %8, i32 %597
  %599 = load i8, i8* %598, align 1, !tbaa !127
  %600 = insertelement <64 x i8> undef, i8 %599, i32 0
  %601 = extractelement <64 x i32> %596, i32 1
  %602 = getelementptr inbounds i8, i8* %8, i32 %601
  %603 = load i8, i8* %602, align 1, !tbaa !127
  %604 = insertelement <64 x i8> %600, i8 %603, i32 1
  %605 = extractelement <64 x i32> %596, i32 2
  %606 = getelementptr inbounds i8, i8* %8, i32 %605
  %607 = load i8, i8* %606, align 1, !tbaa !127
  %608 = insertelement <64 x i8> %604, i8 %607, i32 2
  %609 = extractelement <64 x i32> %596, i32 3
  %610 = getelementptr inbounds i8, i8* %8, i32 %609
  %611 = load i8, i8* %610, align 1, !tbaa !127
  %612 = insertelement <64 x i8> %608, i8 %611, i32 3
  %613 = extractelement <64 x i32> %596, i32 4
  %614 = getelementptr inbounds i8, i8* %8, i32 %613
  %615 = load i8, i8* %614, align 1, !tbaa !127
  %616 = insertelement <64 x i8> %612, i8 %615, i32 4
  %617 = extractelement <64 x i32> %596, i32 5
  %618 = getelementptr inbounds i8, i8* %8, i32 %617
  %619 = load i8, i8* %618, align 1, !tbaa !127
  %620 = insertelement <64 x i8> %616, i8 %619, i32 5
  %621 = extractelement <64 x i32> %596, i32 6
  %622 = getelementptr inbounds i8, i8* %8, i32 %621
  %623 = load i8, i8* %622, align 1, !tbaa !127
  %624 = insertelement <64 x i8> %620, i8 %623, i32 6
  %625 = extractelement <64 x i32> %596, i32 7
  %626 = getelementptr inbounds i8, i8* %8, i32 %625
  %627 = load i8, i8* %626, align 1, !tbaa !127
  %628 = insertelement <64 x i8> %624, i8 %627, i32 7
  %629 = extractelement <64 x i32> %596, i32 8
  %630 = getelementptr inbounds i8, i8* %8, i32 %629
  %631 = load i8, i8* %630, align 1, !tbaa !127
  %632 = insertelement <64 x i8> %628, i8 %631, i32 8
  %633 = extractelement <64 x i32> %596, i32 9
  %634 = getelementptr inbounds i8, i8* %8, i32 %633
  %635 = load i8, i8* %634, align 1, !tbaa !127
  %636 = insertelement <64 x i8> %632, i8 %635, i32 9
  %637 = extractelement <64 x i32> %596, i32 10
  %638 = getelementptr inbounds i8, i8* %8, i32 %637
  %639 = load i8, i8* %638, align 1, !tbaa !127
  %640 = insertelement <64 x i8> %636, i8 %639, i32 10
  %641 = extractelement <64 x i32> %596, i32 11
  %642 = getelementptr inbounds i8, i8* %8, i32 %641
  %643 = load i8, i8* %642, align 1, !tbaa !127
  %644 = insertelement <64 x i8> %640, i8 %643, i32 11
  %645 = extractelement <64 x i32> %596, i32 12
  %646 = getelementptr inbounds i8, i8* %8, i32 %645
  %647 = load i8, i8* %646, align 1, !tbaa !127
  %648 = insertelement <64 x i8> %644, i8 %647, i32 12
  %649 = extractelement <64 x i32> %596, i32 13
  %650 = getelementptr inbounds i8, i8* %8, i32 %649
  %651 = load i8, i8* %650, align 1, !tbaa !127
  %652 = insertelement <64 x i8> %648, i8 %651, i32 13
  %653 = extractelement <64 x i32> %596, i32 14
  %654 = getelementptr inbounds i8, i8* %8, i32 %653
  %655 = load i8, i8* %654, align 1, !tbaa !127
  %656 = insertelement <64 x i8> %652, i8 %655, i32 14
  %657 = extractelement <64 x i32> %596, i32 15
  %658 = getelementptr inbounds i8, i8* %8, i32 %657
  %659 = load i8, i8* %658, align 1, !tbaa !127
  %660 = insertelement <64 x i8> %656, i8 %659, i32 15
  %661 = extractelement <64 x i32> %596, i32 16
  %662 = getelementptr inbounds i8, i8* %8, i32 %661
  %663 = load i8, i8* %662, align 1, !tbaa !127
  %664 = insertelement <64 x i8> %660, i8 %663, i32 16
  %665 = extractelement <64 x i32> %596, i32 17
  %666 = getelementptr inbounds i8, i8* %8, i32 %665
  %667 = load i8, i8* %666, align 1, !tbaa !127
  %668 = insertelement <64 x i8> %664, i8 %667, i32 17
  %669 = extractelement <64 x i32> %596, i32 18
  %670 = getelementptr inbounds i8, i8* %8, i32 %669
  %671 = load i8, i8* %670, align 1, !tbaa !127
  %672 = insertelement <64 x i8> %668, i8 %671, i32 18
  %673 = extractelement <64 x i32> %596, i32 19
  %674 = getelementptr inbounds i8, i8* %8, i32 %673
  %675 = load i8, i8* %674, align 1, !tbaa !127
  %676 = insertelement <64 x i8> %672, i8 %675, i32 19
  %677 = extractelement <64 x i32> %596, i32 20
  %678 = getelementptr inbounds i8, i8* %8, i32 %677
  %679 = load i8, i8* %678, align 1, !tbaa !127
  %680 = insertelement <64 x i8> %676, i8 %679, i32 20
  %681 = extractelement <64 x i32> %596, i32 21
  %682 = getelementptr inbounds i8, i8* %8, i32 %681
  %683 = load i8, i8* %682, align 1, !tbaa !127
  %684 = insertelement <64 x i8> %680, i8 %683, i32 21
  %685 = extractelement <64 x i32> %596, i32 22
  %686 = getelementptr inbounds i8, i8* %8, i32 %685
  %687 = load i8, i8* %686, align 1, !tbaa !127
  %688 = insertelement <64 x i8> %684, i8 %687, i32 22
  %689 = extractelement <64 x i32> %596, i32 23
  %690 = getelementptr inbounds i8, i8* %8, i32 %689
  %691 = load i8, i8* %690, align 1, !tbaa !127
  %692 = insertelement <64 x i8> %688, i8 %691, i32 23
  %693 = extractelement <64 x i32> %596, i32 24
  %694 = getelementptr inbounds i8, i8* %8, i32 %693
  %695 = load i8, i8* %694, align 1, !tbaa !127
  %696 = insertelement <64 x i8> %692, i8 %695, i32 24
  %697 = extractelement <64 x i32> %596, i32 25
  %698 = getelementptr inbounds i8, i8* %8, i32 %697
  %699 = load i8, i8* %698, align 1, !tbaa !127
  %700 = insertelement <64 x i8> %696, i8 %699, i32 25
  %701 = extractelement <64 x i32> %596, i32 26
  %702 = getelementptr inbounds i8, i8* %8, i32 %701
  %703 = load i8, i8* %702, align 1, !tbaa !127
  %704 = insertelement <64 x i8> %700, i8 %703, i32 26
  %705 = extractelement <64 x i32> %596, i32 27
  %706 = getelementptr inbounds i8, i8* %8, i32 %705
  %707 = load i8, i8* %706, align 1, !tbaa !127
  %708 = insertelement <64 x i8> %704, i8 %707, i32 27
  %709 = extractelement <64 x i32> %596, i32 28
  %710 = getelementptr inbounds i8, i8* %8, i32 %709
  %711 = load i8, i8* %710, align 1, !tbaa !127
  %712 = insertelement <64 x i8> %708, i8 %711, i32 28
  %713 = extractelement <64 x i32> %596, i32 29
  %714 = getelementptr inbounds i8, i8* %8, i32 %713
  %715 = load i8, i8* %714, align 1, !tbaa !127
  %716 = insertelement <64 x i8> %712, i8 %715, i32 29
  %717 = extractelement <64 x i32> %596, i32 30
  %718 = getelementptr inbounds i8, i8* %8, i32 %717
  %719 = load i8, i8* %718, align 1, !tbaa !127
  %720 = insertelement <64 x i8> %716, i8 %719, i32 30
  %721 = extractelement <64 x i32> %596, i32 31
  %722 = getelementptr inbounds i8, i8* %8, i32 %721
  %723 = load i8, i8* %722, align 1, !tbaa !127
  %724 = insertelement <64 x i8> %720, i8 %723, i32 31
  %725 = extractelement <64 x i32> %596, i32 32
  %726 = getelementptr inbounds i8, i8* %8, i32 %725
  %727 = load i8, i8* %726, align 1, !tbaa !127
  %728 = insertelement <64 x i8> %724, i8 %727, i32 32
  %729 = extractelement <64 x i32> %596, i32 33
  %730 = getelementptr inbounds i8, i8* %8, i32 %729
  %731 = load i8, i8* %730, align 1, !tbaa !127
  %732 = insertelement <64 x i8> %728, i8 %731, i32 33
  %733 = extractelement <64 x i32> %596, i32 34
  %734 = getelementptr inbounds i8, i8* %8, i32 %733
  %735 = load i8, i8* %734, align 1, !tbaa !127
  %736 = insertelement <64 x i8> %732, i8 %735, i32 34
  %737 = extractelement <64 x i32> %596, i32 35
  %738 = getelementptr inbounds i8, i8* %8, i32 %737
  %739 = load i8, i8* %738, align 1, !tbaa !127
  %740 = insertelement <64 x i8> %736, i8 %739, i32 35
  %741 = extractelement <64 x i32> %596, i32 36
  %742 = getelementptr inbounds i8, i8* %8, i32 %741
  %743 = load i8, i8* %742, align 1, !tbaa !127
  %744 = insertelement <64 x i8> %740, i8 %743, i32 36
  %745 = extractelement <64 x i32> %596, i32 37
  %746 = getelementptr inbounds i8, i8* %8, i32 %745
  %747 = load i8, i8* %746, align 1, !tbaa !127
  %748 = insertelement <64 x i8> %744, i8 %747, i32 37
  %749 = extractelement <64 x i32> %596, i32 38
  %750 = getelementptr inbounds i8, i8* %8, i32 %749
  %751 = load i8, i8* %750, align 1, !tbaa !127
  %752 = insertelement <64 x i8> %748, i8 %751, i32 38
  %753 = extractelement <64 x i32> %596, i32 39
  %754 = getelementptr inbounds i8, i8* %8, i32 %753
  %755 = load i8, i8* %754, align 1, !tbaa !127
  %756 = insertelement <64 x i8> %752, i8 %755, i32 39
  %757 = extractelement <64 x i32> %596, i32 40
  %758 = getelementptr inbounds i8, i8* %8, i32 %757
  %759 = load i8, i8* %758, align 1, !tbaa !127
  %760 = insertelement <64 x i8> %756, i8 %759, i32 40
  %761 = extractelement <64 x i32> %596, i32 41
  %762 = getelementptr inbounds i8, i8* %8, i32 %761
  %763 = load i8, i8* %762, align 1, !tbaa !127
  %764 = insertelement <64 x i8> %760, i8 %763, i32 41
  %765 = extractelement <64 x i32> %596, i32 42
  %766 = getelementptr inbounds i8, i8* %8, i32 %765
  %767 = load i8, i8* %766, align 1, !tbaa !127
  %768 = insertelement <64 x i8> %764, i8 %767, i32 42
  %769 = extractelement <64 x i32> %596, i32 43
  %770 = getelementptr inbounds i8, i8* %8, i32 %769
  %771 = load i8, i8* %770, align 1, !tbaa !127
  %772 = insertelement <64 x i8> %768, i8 %771, i32 43
  %773 = extractelement <64 x i32> %596, i32 44
  %774 = getelementptr inbounds i8, i8* %8, i32 %773
  %775 = load i8, i8* %774, align 1, !tbaa !127
  %776 = insertelement <64 x i8> %772, i8 %775, i32 44
  %777 = extractelement <64 x i32> %596, i32 45
  %778 = getelementptr inbounds i8, i8* %8, i32 %777
  %779 = load i8, i8* %778, align 1, !tbaa !127
  %780 = insertelement <64 x i8> %776, i8 %779, i32 45
  %781 = extractelement <64 x i32> %596, i32 46
  %782 = getelementptr inbounds i8, i8* %8, i32 %781
  %783 = load i8, i8* %782, align 1, !tbaa !127
  %784 = insertelement <64 x i8> %780, i8 %783, i32 46
  %785 = extractelement <64 x i32> %596, i32 47
  %786 = getelementptr inbounds i8, i8* %8, i32 %785
  %787 = load i8, i8* %786, align 1, !tbaa !127
  %788 = insertelement <64 x i8> %784, i8 %787, i32 47
  %789 = extractelement <64 x i32> %596, i32 48
  %790 = getelementptr inbounds i8, i8* %8, i32 %789
  %791 = load i8, i8* %790, align 1, !tbaa !127
  %792 = insertelement <64 x i8> %788, i8 %791, i32 48
  %793 = extractelement <64 x i32> %596, i32 49
  %794 = getelementptr inbounds i8, i8* %8, i32 %793
  %795 = load i8, i8* %794, align 1, !tbaa !127
  %796 = insertelement <64 x i8> %792, i8 %795, i32 49
  %797 = extractelement <64 x i32> %596, i32 50
  %798 = getelementptr inbounds i8, i8* %8, i32 %797
  %799 = load i8, i8* %798, align 1, !tbaa !127
  %800 = insertelement <64 x i8> %796, i8 %799, i32 50
  %801 = extractelement <64 x i32> %596, i32 51
  %802 = getelementptr inbounds i8, i8* %8, i32 %801
  %803 = load i8, i8* %802, align 1, !tbaa !127
  %804 = insertelement <64 x i8> %800, i8 %803, i32 51
  %805 = extractelement <64 x i32> %596, i32 52
  %806 = getelementptr inbounds i8, i8* %8, i32 %805
  %807 = load i8, i8* %806, align 1, !tbaa !127
  %808 = insertelement <64 x i8> %804, i8 %807, i32 52
  %809 = extractelement <64 x i32> %596, i32 53
  %810 = getelementptr inbounds i8, i8* %8, i32 %809
  %811 = load i8, i8* %810, align 1, !tbaa !127
  %812 = insertelement <64 x i8> %808, i8 %811, i32 53
  %813 = extractelement <64 x i32> %596, i32 54
  %814 = getelementptr inbounds i8, i8* %8, i32 %813
  %815 = load i8, i8* %814, align 1, !tbaa !127
  %816 = insertelement <64 x i8> %812, i8 %815, i32 54
  %817 = extractelement <64 x i32> %596, i32 55
  %818 = getelementptr inbounds i8, i8* %8, i32 %817
  %819 = load i8, i8* %818, align 1, !tbaa !127
  %820 = insertelement <64 x i8> %816, i8 %819, i32 55
  %821 = extractelement <64 x i32> %596, i32 56
  %822 = getelementptr inbounds i8, i8* %8, i32 %821
  %823 = load i8, i8* %822, align 1, !tbaa !127
  %824 = insertelement <64 x i8> %820, i8 %823, i32 56
  %825 = extractelement <64 x i32> %596, i32 57
  %826 = getelementptr inbounds i8, i8* %8, i32 %825
  %827 = load i8, i8* %826, align 1, !tbaa !127
  %828 = insertelement <64 x i8> %824, i8 %827, i32 57
  %829 = extractelement <64 x i32> %596, i32 58
  %830 = getelementptr inbounds i8, i8* %8, i32 %829
  %831 = load i8, i8* %830, align 1, !tbaa !127
  %832 = insertelement <64 x i8> %828, i8 %831, i32 58
  %833 = extractelement <64 x i32> %596, i32 59
  %834 = getelementptr inbounds i8, i8* %8, i32 %833
  %835 = load i8, i8* %834, align 1, !tbaa !127
  %836 = insertelement <64 x i8> %832, i8 %835, i32 59
  %837 = extractelement <64 x i32> %596, i32 60
  %838 = getelementptr inbounds i8, i8* %8, i32 %837
  %839 = load i8, i8* %838, align 1, !tbaa !127
  %840 = insertelement <64 x i8> %836, i8 %839, i32 60
  %841 = extractelement <64 x i32> %596, i32 61
  %842 = getelementptr inbounds i8, i8* %8, i32 %841
  %843 = load i8, i8* %842, align 1, !tbaa !127
  %844 = insertelement <64 x i8> %840, i8 %843, i32 61
  %845 = extractelement <64 x i32> %596, i32 62
  %846 = getelementptr inbounds i8, i8* %8, i32 %845
  %847 = load i8, i8* %846, align 1, !tbaa !127
  %848 = insertelement <64 x i8> %844, i8 %847, i32 62
  %849 = extractelement <64 x i32> %596, i32 63
  %850 = getelementptr inbounds i8, i8* %8, i32 %849
  %851 = load i8, i8* %850, align 1, !tbaa !127
  %852 = insertelement <64 x i8> %848, i8 %851, i32 63
  %853 = add nsw i32 %t2248.us, %resampled_input.s0.x.rebased14.us
  %854 = shl nsw i32 %853, 7
  %855 = getelementptr inbounds i8, i8* %resampled_input, i32 %854
  %856 = bitcast i8* %855 to <64 x i8>*
  store <64 x i8> %852, <64 x i8>* %856, align 128, !tbaa !129
  %857 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %595, <64 x i32> %586) #11
  %858 = extractelement <64 x i32> %857, i32 0
  %859 = getelementptr inbounds i8, i8* %8, i32 %858
  %860 = load i8, i8* %859, align 1, !tbaa !127
  %861 = insertelement <64 x i8> undef, i8 %860, i32 0
  %862 = extractelement <64 x i32> %857, i32 1
  %863 = getelementptr inbounds i8, i8* %8, i32 %862
  %864 = load i8, i8* %863, align 1, !tbaa !127
  %865 = insertelement <64 x i8> %861, i8 %864, i32 1
  %866 = extractelement <64 x i32> %857, i32 2
  %867 = getelementptr inbounds i8, i8* %8, i32 %866
  %868 = load i8, i8* %867, align 1, !tbaa !127
  %869 = insertelement <64 x i8> %865, i8 %868, i32 2
  %870 = extractelement <64 x i32> %857, i32 3
  %871 = getelementptr inbounds i8, i8* %8, i32 %870
  %872 = load i8, i8* %871, align 1, !tbaa !127
  %873 = insertelement <64 x i8> %869, i8 %872, i32 3
  %874 = extractelement <64 x i32> %857, i32 4
  %875 = getelementptr inbounds i8, i8* %8, i32 %874
  %876 = load i8, i8* %875, align 1, !tbaa !127
  %877 = insertelement <64 x i8> %873, i8 %876, i32 4
  %878 = extractelement <64 x i32> %857, i32 5
  %879 = getelementptr inbounds i8, i8* %8, i32 %878
  %880 = load i8, i8* %879, align 1, !tbaa !127
  %881 = insertelement <64 x i8> %877, i8 %880, i32 5
  %882 = extractelement <64 x i32> %857, i32 6
  %883 = getelementptr inbounds i8, i8* %8, i32 %882
  %884 = load i8, i8* %883, align 1, !tbaa !127
  %885 = insertelement <64 x i8> %881, i8 %884, i32 6
  %886 = extractelement <64 x i32> %857, i32 7
  %887 = getelementptr inbounds i8, i8* %8, i32 %886
  %888 = load i8, i8* %887, align 1, !tbaa !127
  %889 = insertelement <64 x i8> %885, i8 %888, i32 7
  %890 = extractelement <64 x i32> %857, i32 8
  %891 = getelementptr inbounds i8, i8* %8, i32 %890
  %892 = load i8, i8* %891, align 1, !tbaa !127
  %893 = insertelement <64 x i8> %889, i8 %892, i32 8
  %894 = extractelement <64 x i32> %857, i32 9
  %895 = getelementptr inbounds i8, i8* %8, i32 %894
  %896 = load i8, i8* %895, align 1, !tbaa !127
  %897 = insertelement <64 x i8> %893, i8 %896, i32 9
  %898 = extractelement <64 x i32> %857, i32 10
  %899 = getelementptr inbounds i8, i8* %8, i32 %898
  %900 = load i8, i8* %899, align 1, !tbaa !127
  %901 = insertelement <64 x i8> %897, i8 %900, i32 10
  %902 = extractelement <64 x i32> %857, i32 11
  %903 = getelementptr inbounds i8, i8* %8, i32 %902
  %904 = load i8, i8* %903, align 1, !tbaa !127
  %905 = insertelement <64 x i8> %901, i8 %904, i32 11
  %906 = extractelement <64 x i32> %857, i32 12
  %907 = getelementptr inbounds i8, i8* %8, i32 %906
  %908 = load i8, i8* %907, align 1, !tbaa !127
  %909 = insertelement <64 x i8> %905, i8 %908, i32 12
  %910 = extractelement <64 x i32> %857, i32 13
  %911 = getelementptr inbounds i8, i8* %8, i32 %910
  %912 = load i8, i8* %911, align 1, !tbaa !127
  %913 = insertelement <64 x i8> %909, i8 %912, i32 13
  %914 = extractelement <64 x i32> %857, i32 14
  %915 = getelementptr inbounds i8, i8* %8, i32 %914
  %916 = load i8, i8* %915, align 1, !tbaa !127
  %917 = insertelement <64 x i8> %913, i8 %916, i32 14
  %918 = extractelement <64 x i32> %857, i32 15
  %919 = getelementptr inbounds i8, i8* %8, i32 %918
  %920 = load i8, i8* %919, align 1, !tbaa !127
  %921 = insertelement <64 x i8> %917, i8 %920, i32 15
  %922 = extractelement <64 x i32> %857, i32 16
  %923 = getelementptr inbounds i8, i8* %8, i32 %922
  %924 = load i8, i8* %923, align 1, !tbaa !127
  %925 = insertelement <64 x i8> %921, i8 %924, i32 16
  %926 = extractelement <64 x i32> %857, i32 17
  %927 = getelementptr inbounds i8, i8* %8, i32 %926
  %928 = load i8, i8* %927, align 1, !tbaa !127
  %929 = insertelement <64 x i8> %925, i8 %928, i32 17
  %930 = extractelement <64 x i32> %857, i32 18
  %931 = getelementptr inbounds i8, i8* %8, i32 %930
  %932 = load i8, i8* %931, align 1, !tbaa !127
  %933 = insertelement <64 x i8> %929, i8 %932, i32 18
  %934 = extractelement <64 x i32> %857, i32 19
  %935 = getelementptr inbounds i8, i8* %8, i32 %934
  %936 = load i8, i8* %935, align 1, !tbaa !127
  %937 = insertelement <64 x i8> %933, i8 %936, i32 19
  %938 = extractelement <64 x i32> %857, i32 20
  %939 = getelementptr inbounds i8, i8* %8, i32 %938
  %940 = load i8, i8* %939, align 1, !tbaa !127
  %941 = insertelement <64 x i8> %937, i8 %940, i32 20
  %942 = extractelement <64 x i32> %857, i32 21
  %943 = getelementptr inbounds i8, i8* %8, i32 %942
  %944 = load i8, i8* %943, align 1, !tbaa !127
  %945 = insertelement <64 x i8> %941, i8 %944, i32 21
  %946 = extractelement <64 x i32> %857, i32 22
  %947 = getelementptr inbounds i8, i8* %8, i32 %946
  %948 = load i8, i8* %947, align 1, !tbaa !127
  %949 = insertelement <64 x i8> %945, i8 %948, i32 22
  %950 = extractelement <64 x i32> %857, i32 23
  %951 = getelementptr inbounds i8, i8* %8, i32 %950
  %952 = load i8, i8* %951, align 1, !tbaa !127
  %953 = insertelement <64 x i8> %949, i8 %952, i32 23
  %954 = extractelement <64 x i32> %857, i32 24
  %955 = getelementptr inbounds i8, i8* %8, i32 %954
  %956 = load i8, i8* %955, align 1, !tbaa !127
  %957 = insertelement <64 x i8> %953, i8 %956, i32 24
  %958 = extractelement <64 x i32> %857, i32 25
  %959 = getelementptr inbounds i8, i8* %8, i32 %958
  %960 = load i8, i8* %959, align 1, !tbaa !127
  %961 = insertelement <64 x i8> %957, i8 %960, i32 25
  %962 = extractelement <64 x i32> %857, i32 26
  %963 = getelementptr inbounds i8, i8* %8, i32 %962
  %964 = load i8, i8* %963, align 1, !tbaa !127
  %965 = insertelement <64 x i8> %961, i8 %964, i32 26
  %966 = extractelement <64 x i32> %857, i32 27
  %967 = getelementptr inbounds i8, i8* %8, i32 %966
  %968 = load i8, i8* %967, align 1, !tbaa !127
  %969 = insertelement <64 x i8> %965, i8 %968, i32 27
  %970 = extractelement <64 x i32> %857, i32 28
  %971 = getelementptr inbounds i8, i8* %8, i32 %970
  %972 = load i8, i8* %971, align 1, !tbaa !127
  %973 = insertelement <64 x i8> %969, i8 %972, i32 28
  %974 = extractelement <64 x i32> %857, i32 29
  %975 = getelementptr inbounds i8, i8* %8, i32 %974
  %976 = load i8, i8* %975, align 1, !tbaa !127
  %977 = insertelement <64 x i8> %973, i8 %976, i32 29
  %978 = extractelement <64 x i32> %857, i32 30
  %979 = getelementptr inbounds i8, i8* %8, i32 %978
  %980 = load i8, i8* %979, align 1, !tbaa !127
  %981 = insertelement <64 x i8> %977, i8 %980, i32 30
  %982 = extractelement <64 x i32> %857, i32 31
  %983 = getelementptr inbounds i8, i8* %8, i32 %982
  %984 = load i8, i8* %983, align 1, !tbaa !127
  %985 = insertelement <64 x i8> %981, i8 %984, i32 31
  %986 = extractelement <64 x i32> %857, i32 32
  %987 = getelementptr inbounds i8, i8* %8, i32 %986
  %988 = load i8, i8* %987, align 1, !tbaa !127
  %989 = insertelement <64 x i8> %985, i8 %988, i32 32
  %990 = extractelement <64 x i32> %857, i32 33
  %991 = getelementptr inbounds i8, i8* %8, i32 %990
  %992 = load i8, i8* %991, align 1, !tbaa !127
  %993 = insertelement <64 x i8> %989, i8 %992, i32 33
  %994 = extractelement <64 x i32> %857, i32 34
  %995 = getelementptr inbounds i8, i8* %8, i32 %994
  %996 = load i8, i8* %995, align 1, !tbaa !127
  %997 = insertelement <64 x i8> %993, i8 %996, i32 34
  %998 = extractelement <64 x i32> %857, i32 35
  %999 = getelementptr inbounds i8, i8* %8, i32 %998
  %1000 = load i8, i8* %999, align 1, !tbaa !127
  %1001 = insertelement <64 x i8> %997, i8 %1000, i32 35
  %1002 = extractelement <64 x i32> %857, i32 36
  %1003 = getelementptr inbounds i8, i8* %8, i32 %1002
  %1004 = load i8, i8* %1003, align 1, !tbaa !127
  %1005 = insertelement <64 x i8> %1001, i8 %1004, i32 36
  %1006 = extractelement <64 x i32> %857, i32 37
  %1007 = getelementptr inbounds i8, i8* %8, i32 %1006
  %1008 = load i8, i8* %1007, align 1, !tbaa !127
  %1009 = insertelement <64 x i8> %1005, i8 %1008, i32 37
  %1010 = extractelement <64 x i32> %857, i32 38
  %1011 = getelementptr inbounds i8, i8* %8, i32 %1010
  %1012 = load i8, i8* %1011, align 1, !tbaa !127
  %1013 = insertelement <64 x i8> %1009, i8 %1012, i32 38
  %1014 = extractelement <64 x i32> %857, i32 39
  %1015 = getelementptr inbounds i8, i8* %8, i32 %1014
  %1016 = load i8, i8* %1015, align 1, !tbaa !127
  %1017 = insertelement <64 x i8> %1013, i8 %1016, i32 39
  %1018 = extractelement <64 x i32> %857, i32 40
  %1019 = getelementptr inbounds i8, i8* %8, i32 %1018
  %1020 = load i8, i8* %1019, align 1, !tbaa !127
  %1021 = insertelement <64 x i8> %1017, i8 %1020, i32 40
  %1022 = extractelement <64 x i32> %857, i32 41
  %1023 = getelementptr inbounds i8, i8* %8, i32 %1022
  %1024 = load i8, i8* %1023, align 1, !tbaa !127
  %1025 = insertelement <64 x i8> %1021, i8 %1024, i32 41
  %1026 = extractelement <64 x i32> %857, i32 42
  %1027 = getelementptr inbounds i8, i8* %8, i32 %1026
  %1028 = load i8, i8* %1027, align 1, !tbaa !127
  %1029 = insertelement <64 x i8> %1025, i8 %1028, i32 42
  %1030 = extractelement <64 x i32> %857, i32 43
  %1031 = getelementptr inbounds i8, i8* %8, i32 %1030
  %1032 = load i8, i8* %1031, align 1, !tbaa !127
  %1033 = insertelement <64 x i8> %1029, i8 %1032, i32 43
  %1034 = extractelement <64 x i32> %857, i32 44
  %1035 = getelementptr inbounds i8, i8* %8, i32 %1034
  %1036 = load i8, i8* %1035, align 1, !tbaa !127
  %1037 = insertelement <64 x i8> %1033, i8 %1036, i32 44
  %1038 = extractelement <64 x i32> %857, i32 45
  %1039 = getelementptr inbounds i8, i8* %8, i32 %1038
  %1040 = load i8, i8* %1039, align 1, !tbaa !127
  %1041 = insertelement <64 x i8> %1037, i8 %1040, i32 45
  %1042 = extractelement <64 x i32> %857, i32 46
  %1043 = getelementptr inbounds i8, i8* %8, i32 %1042
  %1044 = load i8, i8* %1043, align 1, !tbaa !127
  %1045 = insertelement <64 x i8> %1041, i8 %1044, i32 46
  %1046 = extractelement <64 x i32> %857, i32 47
  %1047 = getelementptr inbounds i8, i8* %8, i32 %1046
  %1048 = load i8, i8* %1047, align 1, !tbaa !127
  %1049 = insertelement <64 x i8> %1045, i8 %1048, i32 47
  %1050 = extractelement <64 x i32> %857, i32 48
  %1051 = getelementptr inbounds i8, i8* %8, i32 %1050
  %1052 = load i8, i8* %1051, align 1, !tbaa !127
  %1053 = insertelement <64 x i8> %1049, i8 %1052, i32 48
  %1054 = extractelement <64 x i32> %857, i32 49
  %1055 = getelementptr inbounds i8, i8* %8, i32 %1054
  %1056 = load i8, i8* %1055, align 1, !tbaa !127
  %1057 = insertelement <64 x i8> %1053, i8 %1056, i32 49
  %1058 = extractelement <64 x i32> %857, i32 50
  %1059 = getelementptr inbounds i8, i8* %8, i32 %1058
  %1060 = load i8, i8* %1059, align 1, !tbaa !127
  %1061 = insertelement <64 x i8> %1057, i8 %1060, i32 50
  %1062 = extractelement <64 x i32> %857, i32 51
  %1063 = getelementptr inbounds i8, i8* %8, i32 %1062
  %1064 = load i8, i8* %1063, align 1, !tbaa !127
  %1065 = insertelement <64 x i8> %1061, i8 %1064, i32 51
  %1066 = extractelement <64 x i32> %857, i32 52
  %1067 = getelementptr inbounds i8, i8* %8, i32 %1066
  %1068 = load i8, i8* %1067, align 1, !tbaa !127
  %1069 = insertelement <64 x i8> %1065, i8 %1068, i32 52
  %1070 = extractelement <64 x i32> %857, i32 53
  %1071 = getelementptr inbounds i8, i8* %8, i32 %1070
  %1072 = load i8, i8* %1071, align 1, !tbaa !127
  %1073 = insertelement <64 x i8> %1069, i8 %1072, i32 53
  %1074 = extractelement <64 x i32> %857, i32 54
  %1075 = getelementptr inbounds i8, i8* %8, i32 %1074
  %1076 = load i8, i8* %1075, align 1, !tbaa !127
  %1077 = insertelement <64 x i8> %1073, i8 %1076, i32 54
  %1078 = extractelement <64 x i32> %857, i32 55
  %1079 = getelementptr inbounds i8, i8* %8, i32 %1078
  %1080 = load i8, i8* %1079, align 1, !tbaa !127
  %1081 = insertelement <64 x i8> %1077, i8 %1080, i32 55
  %1082 = extractelement <64 x i32> %857, i32 56
  %1083 = getelementptr inbounds i8, i8* %8, i32 %1082
  %1084 = load i8, i8* %1083, align 1, !tbaa !127
  %1085 = insertelement <64 x i8> %1081, i8 %1084, i32 56
  %1086 = extractelement <64 x i32> %857, i32 57
  %1087 = getelementptr inbounds i8, i8* %8, i32 %1086
  %1088 = load i8, i8* %1087, align 1, !tbaa !127
  %1089 = insertelement <64 x i8> %1085, i8 %1088, i32 57
  %1090 = extractelement <64 x i32> %857, i32 58
  %1091 = getelementptr inbounds i8, i8* %8, i32 %1090
  %1092 = load i8, i8* %1091, align 1, !tbaa !127
  %1093 = insertelement <64 x i8> %1089, i8 %1092, i32 58
  %1094 = extractelement <64 x i32> %857, i32 59
  %1095 = getelementptr inbounds i8, i8* %8, i32 %1094
  %1096 = load i8, i8* %1095, align 1, !tbaa !127
  %1097 = insertelement <64 x i8> %1093, i8 %1096, i32 59
  %1098 = extractelement <64 x i32> %857, i32 60
  %1099 = getelementptr inbounds i8, i8* %8, i32 %1098
  %1100 = load i8, i8* %1099, align 1, !tbaa !127
  %1101 = insertelement <64 x i8> %1097, i8 %1100, i32 60
  %1102 = extractelement <64 x i32> %857, i32 61
  %1103 = getelementptr inbounds i8, i8* %8, i32 %1102
  %1104 = load i8, i8* %1103, align 1, !tbaa !127
  %1105 = insertelement <64 x i8> %1101, i8 %1104, i32 61
  %1106 = extractelement <64 x i32> %857, i32 62
  %1107 = getelementptr inbounds i8, i8* %8, i32 %1106
  %1108 = load i8, i8* %1107, align 1, !tbaa !127
  %1109 = insertelement <64 x i8> %1105, i8 %1108, i32 62
  %1110 = extractelement <64 x i32> %857, i32 63
  %1111 = getelementptr inbounds i8, i8* %8, i32 %1110
  %1112 = load i8, i8* %1111, align 1, !tbaa !127
  %1113 = insertelement <64 x i8> %1109, i8 %1112, i32 63
  %1114 = getelementptr inbounds i8, i8* %855, i32 64
  %1115 = bitcast i8* %1114 to <64 x i8>*
  store <64 x i8> %1113, <64 x i8>* %1115, align 64, !tbaa !129
  %1116 = add nuw nsw i32 %resampled_input.s0.x.rebased14.us, 1
  %.not1862.us = icmp eq i32 %resampled_input.s0.x.rebased14.us, %t2228
  br i1 %.not1862.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %1117 = add nuw nsw i32 %resampled_input.s0.y.rebased11.us, 1
  %.not1860.us = icmp eq i32 %resampled_input.s0.y.rebased11.us, %t2227
  br i1 %.not1860.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7, %"for resampled_input.s0.y.rebased9.preheader"
  %1118 = mul nsw i32 %529, %25
  %t2255 = add i32 %449, %1118
  br i1 %139, label %"for output.s0.y.yo.preheader", label %"end for output.s0.y.yo", !prof !101

"for output.s0.y.yo.preheader":                   ; preds = %"consume resampled_input"
  %1119 = load <32 x i32>, <32 x i32>* %99, align 128
  %1120 = load <32 x i32>, <32 x i32>* %101, align 128
  %1121 = load <32 x i32>, <32 x i32>* %103, align 128
  %1122 = load <32 x i32>, <32 x i32>* %105, align 128
  br label %"for output.s0.y.yo"

"for output.s0.y.yo":                             ; preds = %"for output.s0.y.yo.preheader", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %1164, %"end for output.s0.x.xo" ], [ 0, %"for output.s0.y.yo.preheader" ]
  %a31 = shl nuw nsw i32 %output.s0.y.yo, 1
  %1123 = icmp slt i32 %a31, %b33
  %output.s0.y.y.base.s = select i1 %1123, i32 %a31, i32 %b33
  %1124 = add nsw i32 %output.s0.y.y.base.s, %22
  %1125 = mul nsw i32 %1124, %stride_y
  %1126 = add nsw i32 %1125, %140
  %t2283 = mul nsw i32 %1126, %130
  %1127 = add nsw i32 %1125, %141
  %t2286 = mul nsw i32 %1127, %130
  %1128 = add nsw i32 %1124, 1
  %1129 = mul nsw i32 %1128, %stride_y
  %1130 = add nsw i32 %1129, %140
  %t2288 = mul nsw i32 %1130, %130
  %1131 = add nsw i32 %1129, %141
  %t2289 = mul nsw i32 %1131, %130
  %1132 = sub nsw i32 %1125, %t2223
  %t2291 = mul nsw i32 %1132, %130
  %1133 = sub nsw i32 %1129, %t2223
  %t2293 = mul nsw i32 %1133, %130
  br i1 %144, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !101

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %1134 = add nsw i32 %t2283, %176
  %1135 = add nsw i32 %t2283, %177
  %1136 = sub nsw i32 %t2283, %t2225
  %1137 = add nsw i32 %t2286, %176
  %1138 = add nsw i32 %t2286, %177
  %1139 = sub nsw i32 %t2286, %t2225
  %1140 = add nsw i32 %t2291, %176
  %1141 = add nsw i32 %t2291, %177
  %1142 = sub nsw i32 %t2291, %t2225
  %1143 = add nsw i32 %t2288, %176
  %1144 = add nsw i32 %t2288, %177
  %1145 = sub nsw i32 %t2288, %t2225
  %1146 = add nsw i32 %t2289, %176
  %1147 = add nsw i32 %t2289, %177
  %1148 = sub nsw i32 %t2289, %t2225
  %1149 = add nsw i32 %t2293, %176
  %1150 = add nsw i32 %t2293, %177
  %1151 = sub nsw i32 %t2293, %t2225
  %1152 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %1153 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %1154 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %182) #11
  %1155 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1156 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %1157 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1158 = mul nsw i32 %1124, %24
  %1159 = add nsw i32 %1158, %t2255
  %1160 = mul nsw i32 %1128, %24
  %1161 = add nsw i32 %1160, %t2255
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %1162 = add nuw nsw i32 %output.s0.b.rebased, 1
  %.not1855 = icmp eq i32 %1162, %15
  br i1 %.not1855, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %3010, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a32 = shl nuw nsw i32 %output.s0.x.xo, 1
  %1163 = icmp slt i32 %a32, %b34
  %output.s0.x.x.base.s = select i1 %1163, i32 %a32, i32 %b34
  store <32 x i32> %1119, <32 x i32>* %145, align 128, !tbaa !131
  store <32 x i32> %1120, <32 x i32>* %147, align 128, !tbaa !139
  store <32 x i32> %1121, <32 x i32>* %149, align 128, !tbaa !141
  store <32 x i32> %1122, <32 x i32>* %151, align 128, !tbaa !144
  store <32 x i32> %1119, <32 x i32>* %153, align 128, !tbaa !146
  store <32 x i32> %1120, <32 x i32>* %155, align 128, !tbaa !150
  store <32 x i32> %1121, <32 x i32>* %157, align 128, !tbaa !152
  store <32 x i32> %1122, <32 x i32>* %159, align 128, !tbaa !155
  store <32 x i32> %1119, <32 x i32>* %161, align 128, !tbaa !157
  store <32 x i32> %1120, <32 x i32>* %163, align 128, !tbaa !162
  store <32 x i32> %1121, <32 x i32>* %165, align 128, !tbaa !164
  store <32 x i32> %1122, <32 x i32>* %167, align 128, !tbaa !167
  store <32 x i32> %1119, <32 x i32>* %169, align 128, !tbaa !169
  store <32 x i32> %1120, <32 x i32>* %171, align 128, !tbaa !173
  store <32 x i32> %1121, <32 x i32>* %173, align 128, !tbaa !175
  store <32 x i32> %1122, <32 x i32>* %175, align 128, !tbaa !178
  br i1 %t2217, label %then_bb26, label %next_bb27

"end for output.s0.x.xo":                         ; preds = %"consume convolved", %"for output.s0.y.yo"
  %1164 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not1856 = icmp eq i32 %1164, %138
  br i1 %.not1856, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb26:                                        ; preds = %"for output.s0.x.xo"
  %1165 = load <32 x i16>, <32 x i16>* %452, align 128, !tbaa !105
  %1166 = sext <32 x i16> %1165 to <32 x i32>
  %1167 = add nsw i32 %output.s0.x.x.base.s, %19
  %1168 = mul nsw i32 %1167, %stride_x
  %1169 = add nsw i32 %1168, %1134
  %1170 = shl nsw i32 %1169, 7
  %1171 = getelementptr inbounds i8, i8* %resampled_input, i32 %1170
  %1172 = bitcast i8* %1171 to <32 x i8>*
  %1173 = load <32 x i8>, <32 x i8>* %1172, align 128, !tbaa !129
  %1174 = zext <32 x i8> %1173 to <32 x i32>
  %1175 = load <32 x i16>, <32 x i16>* %454, align 64, !tbaa !105
  %1176 = sext <32 x i16> %1175 to <32 x i32>
  %1177 = getelementptr inbounds i8, i8* %1171, i32 32
  %1178 = bitcast i8* %1177 to <32 x i8>*
  %1179 = load <32 x i8>, <32 x i8>* %1178, align 32, !tbaa !129
  %1180 = zext <32 x i8> %1179 to <32 x i32>
  %1181 = load <32 x i16>, <32 x i16>* %456, align 128, !tbaa !105
  %1182 = sext <32 x i16> %1181 to <32 x i32>
  %1183 = add nsw i32 %1168, %1135
  %1184 = shl nsw i32 %1183, 7
  %1185 = getelementptr inbounds i8, i8* %resampled_input, i32 %1184
  %1186 = bitcast i8* %1185 to <32 x i8>*
  %1187 = load <32 x i8>, <32 x i8>* %1186, align 128, !tbaa !129
  %1188 = zext <32 x i8> %1187 to <32 x i32>
  %1189 = load <32 x i16>, <32 x i16>* %458, align 64, !tbaa !105
  %1190 = sext <32 x i16> %1189 to <32 x i32>
  %1191 = getelementptr inbounds i8, i8* %1185, i32 32
  %1192 = bitcast i8* %1191 to <32 x i8>*
  %1193 = load <32 x i8>, <32 x i8>* %1192, align 32, !tbaa !129
  %1194 = zext <32 x i8> %1193 to <32 x i32>
  %1195 = load <32 x i16>, <32 x i16>* %459, align 128, !tbaa !105
  %1196 = sext <32 x i16> %1195 to <32 x i32>
  %1197 = add nsw i32 %1168, %1136
  %1198 = shl nsw i32 %1197, 7
  %1199 = getelementptr inbounds i8, i8* %resampled_input, i32 %1198
  %1200 = bitcast i8* %1199 to <32 x i8>*
  %1201 = load <32 x i8>, <32 x i8>* %1200, align 128, !tbaa !129
  %1202 = zext <32 x i8> %1201 to <32 x i32>
  %1203 = load <32 x i16>, <32 x i16>* %461, align 64, !tbaa !105
  %1204 = sext <32 x i16> %1203 to <32 x i32>
  %1205 = getelementptr inbounds i8, i8* %1199, i32 32
  %1206 = bitcast i8* %1205 to <32 x i8>*
  %1207 = load <32 x i8>, <32 x i8>* %1206, align 32, !tbaa !129
  %1208 = zext <32 x i8> %1207 to <32 x i32>
  %1209 = load <32 x i16>, <32 x i16>* %464, align 128, !tbaa !105
  %1210 = sext <32 x i16> %1209 to <32 x i32>
  %1211 = add nsw i32 %1168, %1137
  %1212 = shl nsw i32 %1211, 7
  %1213 = getelementptr inbounds i8, i8* %resampled_input, i32 %1212
  %1214 = bitcast i8* %1213 to <32 x i8>*
  %1215 = load <32 x i8>, <32 x i8>* %1214, align 128, !tbaa !129
  %1216 = zext <32 x i8> %1215 to <32 x i32>
  %1217 = load <32 x i16>, <32 x i16>* %466, align 64, !tbaa !105
  %1218 = sext <32 x i16> %1217 to <32 x i32>
  %1219 = getelementptr inbounds i8, i8* %1213, i32 32
  %1220 = bitcast i8* %1219 to <32 x i8>*
  %1221 = load <32 x i8>, <32 x i8>* %1220, align 32, !tbaa !129
  %1222 = zext <32 x i8> %1221 to <32 x i32>
  %1223 = load <32 x i16>, <32 x i16>* %468, align 128, !tbaa !105
  %1224 = sext <32 x i16> %1223 to <32 x i32>
  %1225 = add nsw i32 %1168, %1138
  %1226 = shl nsw i32 %1225, 7
  %1227 = getelementptr inbounds i8, i8* %resampled_input, i32 %1226
  %1228 = bitcast i8* %1227 to <32 x i8>*
  %1229 = load <32 x i8>, <32 x i8>* %1228, align 128, !tbaa !129
  %1230 = zext <32 x i8> %1229 to <32 x i32>
  %1231 = load <32 x i16>, <32 x i16>* %470, align 64, !tbaa !105
  %1232 = sext <32 x i16> %1231 to <32 x i32>
  %1233 = getelementptr inbounds i8, i8* %1227, i32 32
  %1234 = bitcast i8* %1233 to <32 x i8>*
  %1235 = load <32 x i8>, <32 x i8>* %1234, align 32, !tbaa !129
  %1236 = zext <32 x i8> %1235 to <32 x i32>
  %1237 = load <32 x i16>, <32 x i16>* %471, align 128, !tbaa !105
  %1238 = sext <32 x i16> %1237 to <32 x i32>
  %1239 = add nsw i32 %1168, %1139
  %1240 = shl nsw i32 %1239, 7
  %1241 = getelementptr inbounds i8, i8* %resampled_input, i32 %1240
  %1242 = bitcast i8* %1241 to <32 x i8>*
  %1243 = load <32 x i8>, <32 x i8>* %1242, align 128, !tbaa !129
  %1244 = zext <32 x i8> %1243 to <32 x i32>
  %1245 = load <32 x i16>, <32 x i16>* %473, align 64, !tbaa !105
  %1246 = sext <32 x i16> %1245 to <32 x i32>
  %1247 = getelementptr inbounds i8, i8* %1241, i32 32
  %1248 = bitcast i8* %1247 to <32 x i8>*
  %1249 = load <32 x i8>, <32 x i8>* %1248, align 32, !tbaa !129
  %1250 = zext <32 x i8> %1249 to <32 x i32>
  %1251 = load <32 x i16>, <32 x i16>* %475, align 128, !tbaa !180
  %1252 = sext <32 x i16> %1251 to <32 x i32>
  %1253 = add nsw i32 %1168, %1140
  %1254 = shl nsw i32 %1253, 7
  %1255 = getelementptr inbounds i8, i8* %resampled_input, i32 %1254
  %1256 = bitcast i8* %1255 to <32 x i8>*
  %1257 = load <32 x i8>, <32 x i8>* %1256, align 128, !tbaa !129
  %1258 = zext <32 x i8> %1257 to <32 x i32>
  %1259 = load <32 x i16>, <32 x i16>* %477, align 128, !tbaa !187
  %1260 = sext <32 x i16> %1259 to <32 x i32>
  %1261 = getelementptr inbounds i8, i8* %1255, i32 32
  %1262 = bitcast i8* %1261 to <32 x i8>*
  %1263 = load <32 x i8>, <32 x i8>* %1262, align 32, !tbaa !129
  %1264 = zext <32 x i8> %1263 to <32 x i32>
  %1265 = load <32 x i16>, <32 x i16>* %479, align 128, !tbaa !189
  %1266 = sext <32 x i16> %1265 to <32 x i32>
  %1267 = add nsw i32 %1168, %1141
  %1268 = shl nsw i32 %1267, 7
  %1269 = getelementptr inbounds i8, i8* %resampled_input, i32 %1268
  %1270 = bitcast i8* %1269 to <32 x i8>*
  %1271 = load <32 x i8>, <32 x i8>* %1270, align 128, !tbaa !129
  %1272 = zext <32 x i8> %1271 to <32 x i32>
  %1273 = load <32 x i16>, <32 x i16>* %481, align 128, !tbaa !194
  %1274 = sext <32 x i16> %1273 to <32 x i32>
  %1275 = getelementptr inbounds i8, i8* %1269, i32 32
  %1276 = bitcast i8* %1275 to <32 x i8>*
  %1277 = load <32 x i8>, <32 x i8>* %1276, align 32, !tbaa !129
  %1278 = zext <32 x i8> %1277 to <32 x i32>
  %1279 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1120, <32 x i32> %1119)
  %1280 = load <32 x i16>, <32 x i16>* %482, align 128, !tbaa !196
  %1281 = sext <32 x i16> %1280 to <32 x i32>
  %1282 = add nsw i32 %1168, %1142
  %1283 = shl nsw i32 %1282, 7
  %1284 = getelementptr inbounds i8, i8* %resampled_input, i32 %1283
  %1285 = bitcast i8* %1284 to <32 x i8>*
  %1286 = load <32 x i8>, <32 x i8>* %1285, align 128, !tbaa !129
  %1287 = zext <32 x i8> %1286 to <32 x i32>
  %1288 = load <32 x i16>, <32 x i16>* %484, align 128, !tbaa !200
  %1289 = sext <32 x i16> %1288 to <32 x i32>
  %1290 = getelementptr inbounds i8, i8* %1284, i32 32
  %1291 = bitcast i8* %1290 to <32 x i8>*
  %1292 = load <32 x i8>, <32 x i8>* %1291, align 32, !tbaa !129
  %1293 = zext <32 x i8> %1292 to <32 x i32>
  %1294 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1174, <32 x i32> %1166) #11
  %1295 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1294, <32 x i32> %1174, <32 x i32> %1166) #11
  %1296 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1180, <32 x i32> %1176) #11
  %1297 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1296, <32 x i32> %1180, <32 x i32> %1176) #11
  %1298 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1295, <32 x i32> %1297) #11
  %1299 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1216, <32 x i32> %1210) #11
  %1300 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1299, <32 x i32> %1216, <32 x i32> %1210) #11
  %1301 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1222, <32 x i32> %1218) #11
  %1302 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1301, <32 x i32> %1222, <32 x i32> %1218) #11
  %1303 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1300, <32 x i32> %1302) #11
  %1304 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1258, <32 x i32> %1252) #11
  %1305 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1304, <32 x i32> %1258, <32 x i32> %1252) #11
  %1306 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1264, <32 x i32> %1260) #11
  %1307 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1306, <32 x i32> %1264, <32 x i32> %1260) #11
  %1308 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1305, <32 x i32> %1307) #11
  %1309 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1287, <32 x i32> %1281) #11
  %1310 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1309, <32 x i32> %1287, <32 x i32> %1281) #11
  %1311 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1293, <32 x i32> %1289) #11
  %1312 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1311, <32 x i32> %1293, <32 x i32> %1289) #11
  %1313 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1310, <32 x i32> %1312) #11
  %1314 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1313, <64 x i32> %1279) #11
  %1315 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1272, <32 x i32> %1266) #11
  %1316 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1315, <32 x i32> %1272, <32 x i32> %1266) #11
  %1317 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1278, <32 x i32> %1274) #11
  %1318 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1317, <32 x i32> %1278, <32 x i32> %1274) #11
  %1319 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1316, <32 x i32> %1318) #11
  %1320 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1314, <64 x i32> %1319) #11
  %1321 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1308, <64 x i32> %1320) #11
  %1322 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1244, <32 x i32> %1238) #11
  %1323 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1322, <32 x i32> %1244, <32 x i32> %1238) #11
  %1324 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1250, <32 x i32> %1246) #11
  %1325 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1324, <32 x i32> %1250, <32 x i32> %1246) #11
  %1326 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1323, <32 x i32> %1325) #11
  %1327 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1321, <64 x i32> %1326) #11
  %1328 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1230, <32 x i32> %1224) #11
  %1329 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1328, <32 x i32> %1230, <32 x i32> %1224) #11
  %1330 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1236, <32 x i32> %1232) #11
  %1331 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1330, <32 x i32> %1236, <32 x i32> %1232) #11
  %1332 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1329, <32 x i32> %1331) #11
  %1333 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1327, <64 x i32> %1332) #11
  %1334 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1303, <64 x i32> %1333) #11
  %1335 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1202, <32 x i32> %1196) #11
  %1336 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1335, <32 x i32> %1202, <32 x i32> %1196) #11
  %1337 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1208, <32 x i32> %1204) #11
  %1338 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1337, <32 x i32> %1208, <32 x i32> %1204) #11
  %1339 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1336, <32 x i32> %1338) #11
  %1340 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1334, <64 x i32> %1339) #11
  %1341 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1188, <32 x i32> %1182) #11
  %1342 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1341, <32 x i32> %1188, <32 x i32> %1182) #11
  %1343 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1194, <32 x i32> %1190) #11
  %1344 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1343, <32 x i32> %1194, <32 x i32> %1190) #11
  %1345 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1342, <32 x i32> %1344) #11
  %1346 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1340, <64 x i32> %1345) #11
  %1347 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1298, <64 x i32> %1346) #11
  %1348 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1347)
  store <32 x i32> %1348, <32 x i32>* %145, align 128, !tbaa !131
  %1349 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1347)
  store <32 x i32> %1349, <32 x i32>* %147, align 128, !tbaa !139
  %1350 = load <32 x i16>, <32 x i16>* %486, align 128, !tbaa !105
  %1351 = sext <32 x i16> %1350 to <32 x i32>
  %1352 = getelementptr inbounds i8, i8* %1171, i32 64
  %1353 = bitcast i8* %1352 to <32 x i8>*
  %1354 = load <32 x i8>, <32 x i8>* %1353, align 64, !tbaa !129
  %1355 = zext <32 x i8> %1354 to <32 x i32>
  %1356 = load <32 x i16>, <32 x i16>* %488, align 64, !tbaa !105
  %1357 = sext <32 x i16> %1356 to <32 x i32>
  %1358 = getelementptr inbounds i8, i8* %1171, i32 96
  %1359 = bitcast i8* %1358 to <32 x i8>*
  %1360 = load <32 x i8>, <32 x i8>* %1359, align 32, !tbaa !129
  %1361 = zext <32 x i8> %1360 to <32 x i32>
  %1362 = load <32 x i16>, <32 x i16>* %490, align 128, !tbaa !105
  %1363 = sext <32 x i16> %1362 to <32 x i32>
  %1364 = getelementptr inbounds i8, i8* %1185, i32 64
  %1365 = bitcast i8* %1364 to <32 x i8>*
  %1366 = load <32 x i8>, <32 x i8>* %1365, align 64, !tbaa !129
  %1367 = zext <32 x i8> %1366 to <32 x i32>
  %1368 = load <32 x i16>, <32 x i16>* %492, align 64, !tbaa !105
  %1369 = sext <32 x i16> %1368 to <32 x i32>
  %1370 = getelementptr inbounds i8, i8* %1185, i32 96
  %1371 = bitcast i8* %1370 to <32 x i8>*
  %1372 = load <32 x i8>, <32 x i8>* %1371, align 32, !tbaa !129
  %1373 = zext <32 x i8> %1372 to <32 x i32>
  %1374 = load <32 x i16>, <32 x i16>* %494, align 128, !tbaa !105
  %1375 = sext <32 x i16> %1374 to <32 x i32>
  %1376 = getelementptr inbounds i8, i8* %1199, i32 64
  %1377 = bitcast i8* %1376 to <32 x i8>*
  %1378 = load <32 x i8>, <32 x i8>* %1377, align 64, !tbaa !129
  %1379 = zext <32 x i8> %1378 to <32 x i32>
  %1380 = load <32 x i16>, <32 x i16>* %496, align 64, !tbaa !105
  %1381 = sext <32 x i16> %1380 to <32 x i32>
  %1382 = getelementptr inbounds i8, i8* %1199, i32 96
  %1383 = bitcast i8* %1382 to <32 x i8>*
  %1384 = load <32 x i8>, <32 x i8>* %1383, align 32, !tbaa !129
  %1385 = zext <32 x i8> %1384 to <32 x i32>
  %1386 = load <32 x i16>, <32 x i16>* %498, align 128, !tbaa !105
  %1387 = sext <32 x i16> %1386 to <32 x i32>
  %1388 = getelementptr inbounds i8, i8* %1213, i32 64
  %1389 = bitcast i8* %1388 to <32 x i8>*
  %1390 = load <32 x i8>, <32 x i8>* %1389, align 64, !tbaa !129
  %1391 = zext <32 x i8> %1390 to <32 x i32>
  %1392 = load <32 x i16>, <32 x i16>* %500, align 64, !tbaa !105
  %1393 = sext <32 x i16> %1392 to <32 x i32>
  %1394 = getelementptr inbounds i8, i8* %1213, i32 96
  %1395 = bitcast i8* %1394 to <32 x i8>*
  %1396 = load <32 x i8>, <32 x i8>* %1395, align 32, !tbaa !129
  %1397 = zext <32 x i8> %1396 to <32 x i32>
  %1398 = load <32 x i16>, <32 x i16>* %502, align 128, !tbaa !105
  %1399 = sext <32 x i16> %1398 to <32 x i32>
  %1400 = getelementptr inbounds i8, i8* %1227, i32 64
  %1401 = bitcast i8* %1400 to <32 x i8>*
  %1402 = load <32 x i8>, <32 x i8>* %1401, align 64, !tbaa !129
  %1403 = zext <32 x i8> %1402 to <32 x i32>
  %1404 = load <32 x i16>, <32 x i16>* %504, align 64, !tbaa !105
  %1405 = sext <32 x i16> %1404 to <32 x i32>
  %1406 = getelementptr inbounds i8, i8* %1227, i32 96
  %1407 = bitcast i8* %1406 to <32 x i8>*
  %1408 = load <32 x i8>, <32 x i8>* %1407, align 32, !tbaa !129
  %1409 = zext <32 x i8> %1408 to <32 x i32>
  %1410 = load <32 x i16>, <32 x i16>* %506, align 128, !tbaa !105
  %1411 = sext <32 x i16> %1410 to <32 x i32>
  %1412 = getelementptr inbounds i8, i8* %1241, i32 64
  %1413 = bitcast i8* %1412 to <32 x i8>*
  %1414 = load <32 x i8>, <32 x i8>* %1413, align 64, !tbaa !129
  %1415 = zext <32 x i8> %1414 to <32 x i32>
  %1416 = load <32 x i16>, <32 x i16>* %508, align 64, !tbaa !105
  %1417 = sext <32 x i16> %1416 to <32 x i32>
  %1418 = getelementptr inbounds i8, i8* %1241, i32 96
  %1419 = bitcast i8* %1418 to <32 x i8>*
  %1420 = load <32 x i8>, <32 x i8>* %1419, align 32, !tbaa !129
  %1421 = zext <32 x i8> %1420 to <32 x i32>
  %1422 = load <32 x i16>, <32 x i16>* %510, align 128, !tbaa !202
  %1423 = sext <32 x i16> %1422 to <32 x i32>
  %1424 = getelementptr inbounds i8, i8* %1255, i32 64
  %1425 = bitcast i8* %1424 to <32 x i8>*
  %1426 = load <32 x i8>, <32 x i8>* %1425, align 64, !tbaa !129
  %1427 = zext <32 x i8> %1426 to <32 x i32>
  %1428 = load <32 x i16>, <32 x i16>* %512, align 128, !tbaa !205
  %1429 = sext <32 x i16> %1428 to <32 x i32>
  %1430 = getelementptr inbounds i8, i8* %1255, i32 96
  %1431 = bitcast i8* %1430 to <32 x i8>*
  %1432 = load <32 x i8>, <32 x i8>* %1431, align 32, !tbaa !129
  %1433 = zext <32 x i8> %1432 to <32 x i32>
  %1434 = load <32 x i16>, <32 x i16>* %514, align 128, !tbaa !207
  %1435 = sext <32 x i16> %1434 to <32 x i32>
  %1436 = getelementptr inbounds i8, i8* %1269, i32 64
  %1437 = bitcast i8* %1436 to <32 x i8>*
  %1438 = load <32 x i8>, <32 x i8>* %1437, align 64, !tbaa !129
  %1439 = zext <32 x i8> %1438 to <32 x i32>
  %1440 = load <32 x i16>, <32 x i16>* %516, align 128, !tbaa !210
  %1441 = sext <32 x i16> %1440 to <32 x i32>
  %1442 = getelementptr inbounds i8, i8* %1269, i32 96
  %1443 = bitcast i8* %1442 to <32 x i8>*
  %1444 = load <32 x i8>, <32 x i8>* %1443, align 32, !tbaa !129
  %1445 = zext <32 x i8> %1444 to <32 x i32>
  %1446 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1122, <32 x i32> %1121)
  %1447 = load <32 x i16>, <32 x i16>* %518, align 128, !tbaa !212
  %1448 = sext <32 x i16> %1447 to <32 x i32>
  %1449 = getelementptr inbounds i8, i8* %1284, i32 64
  %1450 = bitcast i8* %1449 to <32 x i8>*
  %1451 = load <32 x i8>, <32 x i8>* %1450, align 64, !tbaa !129
  %1452 = zext <32 x i8> %1451 to <32 x i32>
  %1453 = load <32 x i16>, <32 x i16>* %520, align 128, !tbaa !215
  %1454 = sext <32 x i16> %1453 to <32 x i32>
  %1455 = getelementptr inbounds i8, i8* %1284, i32 96
  %1456 = bitcast i8* %1455 to <32 x i8>*
  %1457 = load <32 x i8>, <32 x i8>* %1456, align 32, !tbaa !129
  %1458 = zext <32 x i8> %1457 to <32 x i32>
  %1459 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1355, <32 x i32> %1351) #11
  %1460 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1459, <32 x i32> %1355, <32 x i32> %1351) #11
  %1461 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1361, <32 x i32> %1357) #11
  %1462 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1461, <32 x i32> %1361, <32 x i32> %1357) #11
  %1463 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1460, <32 x i32> %1462) #11
  %1464 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1391, <32 x i32> %1387) #11
  %1465 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1464, <32 x i32> %1391, <32 x i32> %1387) #11
  %1466 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1397, <32 x i32> %1393) #11
  %1467 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1466, <32 x i32> %1397, <32 x i32> %1393) #11
  %1468 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1465, <32 x i32> %1467) #11
  %1469 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1427, <32 x i32> %1423) #11
  %1470 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1469, <32 x i32> %1427, <32 x i32> %1423) #11
  %1471 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1433, <32 x i32> %1429) #11
  %1472 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1471, <32 x i32> %1433, <32 x i32> %1429) #11
  %1473 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1470, <32 x i32> %1472) #11
  %1474 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1452, <32 x i32> %1448) #11
  %1475 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1474, <32 x i32> %1452, <32 x i32> %1448) #11
  %1476 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1458, <32 x i32> %1454) #11
  %1477 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1476, <32 x i32> %1458, <32 x i32> %1454) #11
  %1478 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1475, <32 x i32> %1477) #11
  %1479 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1478, <64 x i32> %1446) #11
  %1480 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1439, <32 x i32> %1435) #11
  %1481 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1480, <32 x i32> %1439, <32 x i32> %1435) #11
  %1482 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1445, <32 x i32> %1441) #11
  %1483 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1482, <32 x i32> %1445, <32 x i32> %1441) #11
  %1484 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1481, <32 x i32> %1483) #11
  %1485 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1479, <64 x i32> %1484) #11
  %1486 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1473, <64 x i32> %1485) #11
  %1487 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1415, <32 x i32> %1411) #11
  %1488 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1487, <32 x i32> %1415, <32 x i32> %1411) #11
  %1489 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1421, <32 x i32> %1417) #11
  %1490 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1489, <32 x i32> %1421, <32 x i32> %1417) #11
  %1491 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1488, <32 x i32> %1490) #11
  %1492 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1486, <64 x i32> %1491) #11
  %1493 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1403, <32 x i32> %1399) #11
  %1494 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1493, <32 x i32> %1403, <32 x i32> %1399) #11
  %1495 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1409, <32 x i32> %1405) #11
  %1496 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1495, <32 x i32> %1409, <32 x i32> %1405) #11
  %1497 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1494, <32 x i32> %1496) #11
  %1498 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1492, <64 x i32> %1497) #11
  %1499 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1468, <64 x i32> %1498) #11
  %1500 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1379, <32 x i32> %1375) #11
  %1501 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1500, <32 x i32> %1379, <32 x i32> %1375) #11
  %1502 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1385, <32 x i32> %1381) #11
  %1503 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1502, <32 x i32> %1385, <32 x i32> %1381) #11
  %1504 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1501, <32 x i32> %1503) #11
  %1505 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1499, <64 x i32> %1504) #11
  %1506 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1367, <32 x i32> %1363) #11
  %1507 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1506, <32 x i32> %1367, <32 x i32> %1363) #11
  %1508 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1373, <32 x i32> %1369) #11
  %1509 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1508, <32 x i32> %1373, <32 x i32> %1369) #11
  %1510 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1507, <32 x i32> %1509) #11
  %1511 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1505, <64 x i32> %1510) #11
  %1512 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1463, <64 x i32> %1511) #11
  %1513 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1512)
  store <32 x i32> %1513, <32 x i32>* %149, align 128, !tbaa !141
  %1514 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1512)
  store <32 x i32> %1514, <32 x i32>* %151, align 128, !tbaa !144
  %1515 = add nsw i32 %1167, 1
  %1516 = mul nsw i32 %1515, %stride_x
  %1517 = add nsw i32 %1516, %1134
  %1518 = shl nsw i32 %1517, 7
  %1519 = getelementptr inbounds i8, i8* %resampled_input, i32 %1518
  %1520 = bitcast i8* %1519 to <32 x i8>*
  %1521 = load <32 x i8>, <32 x i8>* %1520, align 128, !tbaa !129
  %1522 = zext <32 x i8> %1521 to <32 x i32>
  %1523 = getelementptr inbounds i8, i8* %1519, i32 32
  %1524 = bitcast i8* %1523 to <32 x i8>*
  %1525 = load <32 x i8>, <32 x i8>* %1524, align 32, !tbaa !129
  %1526 = zext <32 x i8> %1525 to <32 x i32>
  %1527 = add nsw i32 %1516, %1135
  %1528 = shl nsw i32 %1527, 7
  %1529 = getelementptr inbounds i8, i8* %resampled_input, i32 %1528
  %1530 = bitcast i8* %1529 to <32 x i8>*
  %1531 = load <32 x i8>, <32 x i8>* %1530, align 128, !tbaa !129
  %1532 = zext <32 x i8> %1531 to <32 x i32>
  %1533 = getelementptr inbounds i8, i8* %1529, i32 32
  %1534 = bitcast i8* %1533 to <32 x i8>*
  %1535 = load <32 x i8>, <32 x i8>* %1534, align 32, !tbaa !129
  %1536 = zext <32 x i8> %1535 to <32 x i32>
  %1537 = add nsw i32 %1516, %1136
  %1538 = shl nsw i32 %1537, 7
  %1539 = getelementptr inbounds i8, i8* %resampled_input, i32 %1538
  %1540 = bitcast i8* %1539 to <32 x i8>*
  %1541 = load <32 x i8>, <32 x i8>* %1540, align 128, !tbaa !129
  %1542 = zext <32 x i8> %1541 to <32 x i32>
  %1543 = getelementptr inbounds i8, i8* %1539, i32 32
  %1544 = bitcast i8* %1543 to <32 x i8>*
  %1545 = load <32 x i8>, <32 x i8>* %1544, align 32, !tbaa !129
  %1546 = zext <32 x i8> %1545 to <32 x i32>
  %1547 = add nsw i32 %1516, %1137
  %1548 = shl nsw i32 %1547, 7
  %1549 = getelementptr inbounds i8, i8* %resampled_input, i32 %1548
  %1550 = bitcast i8* %1549 to <32 x i8>*
  %1551 = load <32 x i8>, <32 x i8>* %1550, align 128, !tbaa !129
  %1552 = zext <32 x i8> %1551 to <32 x i32>
  %1553 = getelementptr inbounds i8, i8* %1549, i32 32
  %1554 = bitcast i8* %1553 to <32 x i8>*
  %1555 = load <32 x i8>, <32 x i8>* %1554, align 32, !tbaa !129
  %1556 = zext <32 x i8> %1555 to <32 x i32>
  %1557 = add nsw i32 %1516, %1138
  %1558 = shl nsw i32 %1557, 7
  %1559 = getelementptr inbounds i8, i8* %resampled_input, i32 %1558
  %1560 = bitcast i8* %1559 to <32 x i8>*
  %1561 = load <32 x i8>, <32 x i8>* %1560, align 128, !tbaa !129
  %1562 = zext <32 x i8> %1561 to <32 x i32>
  %1563 = getelementptr inbounds i8, i8* %1559, i32 32
  %1564 = bitcast i8* %1563 to <32 x i8>*
  %1565 = load <32 x i8>, <32 x i8>* %1564, align 32, !tbaa !129
  %1566 = zext <32 x i8> %1565 to <32 x i32>
  %1567 = add nsw i32 %1516, %1139
  %1568 = shl nsw i32 %1567, 7
  %1569 = getelementptr inbounds i8, i8* %resampled_input, i32 %1568
  %1570 = bitcast i8* %1569 to <32 x i8>*
  %1571 = load <32 x i8>, <32 x i8>* %1570, align 128, !tbaa !129
  %1572 = zext <32 x i8> %1571 to <32 x i32>
  %1573 = getelementptr inbounds i8, i8* %1569, i32 32
  %1574 = bitcast i8* %1573 to <32 x i8>*
  %1575 = load <32 x i8>, <32 x i8>* %1574, align 32, !tbaa !129
  %1576 = zext <32 x i8> %1575 to <32 x i32>
  %1577 = add nsw i32 %1516, %1140
  %1578 = shl nsw i32 %1577, 7
  %1579 = getelementptr inbounds i8, i8* %resampled_input, i32 %1578
  %1580 = bitcast i8* %1579 to <32 x i8>*
  %1581 = load <32 x i8>, <32 x i8>* %1580, align 128, !tbaa !129
  %1582 = zext <32 x i8> %1581 to <32 x i32>
  %1583 = getelementptr inbounds i8, i8* %1579, i32 32
  %1584 = bitcast i8* %1583 to <32 x i8>*
  %1585 = load <32 x i8>, <32 x i8>* %1584, align 32, !tbaa !129
  %1586 = zext <32 x i8> %1585 to <32 x i32>
  %1587 = add nsw i32 %1516, %1141
  %1588 = shl nsw i32 %1587, 7
  %1589 = getelementptr inbounds i8, i8* %resampled_input, i32 %1588
  %1590 = bitcast i8* %1589 to <32 x i8>*
  %1591 = load <32 x i8>, <32 x i8>* %1590, align 128, !tbaa !129
  %1592 = zext <32 x i8> %1591 to <32 x i32>
  %1593 = getelementptr inbounds i8, i8* %1589, i32 32
  %1594 = bitcast i8* %1593 to <32 x i8>*
  %1595 = load <32 x i8>, <32 x i8>* %1594, align 32, !tbaa !129
  %1596 = zext <32 x i8> %1595 to <32 x i32>
  %1597 = add nsw i32 %1516, %1142
  %1598 = shl nsw i32 %1597, 7
  %1599 = getelementptr inbounds i8, i8* %resampled_input, i32 %1598
  %1600 = bitcast i8* %1599 to <32 x i8>*
  %1601 = load <32 x i8>, <32 x i8>* %1600, align 128, !tbaa !129
  %1602 = zext <32 x i8> %1601 to <32 x i32>
  %1603 = getelementptr inbounds i8, i8* %1599, i32 32
  %1604 = bitcast i8* %1603 to <32 x i8>*
  %1605 = load <32 x i8>, <32 x i8>* %1604, align 32, !tbaa !129
  %1606 = zext <32 x i8> %1605 to <32 x i32>
  %1607 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1522, <32 x i32> %1166) #11
  %1608 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1607, <32 x i32> %1522, <32 x i32> %1166) #11
  %1609 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1526, <32 x i32> %1176) #11
  %1610 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1609, <32 x i32> %1526, <32 x i32> %1176) #11
  %1611 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1608, <32 x i32> %1610) #11
  %1612 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1552, <32 x i32> %1210) #11
  %1613 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1612, <32 x i32> %1552, <32 x i32> %1210) #11
  %1614 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1556, <32 x i32> %1218) #11
  %1615 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1614, <32 x i32> %1556, <32 x i32> %1218) #11
  %1616 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1613, <32 x i32> %1615) #11
  %1617 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1582, <32 x i32> %1252) #11
  %1618 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1617, <32 x i32> %1582, <32 x i32> %1252) #11
  %1619 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1586, <32 x i32> %1260) #11
  %1620 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1619, <32 x i32> %1586, <32 x i32> %1260) #11
  %1621 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1618, <32 x i32> %1620) #11
  %1622 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1602, <32 x i32> %1281) #11
  %1623 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1622, <32 x i32> %1602, <32 x i32> %1281) #11
  %1624 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1606, <32 x i32> %1289) #11
  %1625 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1624, <32 x i32> %1606, <32 x i32> %1289) #11
  %1626 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1623, <32 x i32> %1625) #11
  %1627 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1626, <64 x i32> %1279) #11
  %1628 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1592, <32 x i32> %1266) #11
  %1629 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1628, <32 x i32> %1592, <32 x i32> %1266) #11
  %1630 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1596, <32 x i32> %1274) #11
  %1631 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1630, <32 x i32> %1596, <32 x i32> %1274) #11
  %1632 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1629, <32 x i32> %1631) #11
  %1633 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1627, <64 x i32> %1632) #11
  %1634 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1621, <64 x i32> %1633) #11
  %1635 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1572, <32 x i32> %1238) #11
  %1636 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1635, <32 x i32> %1572, <32 x i32> %1238) #11
  %1637 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1576, <32 x i32> %1246) #11
  %1638 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1637, <32 x i32> %1576, <32 x i32> %1246) #11
  %1639 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1636, <32 x i32> %1638) #11
  %1640 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1634, <64 x i32> %1639) #11
  %1641 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1562, <32 x i32> %1224) #11
  %1642 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1641, <32 x i32> %1562, <32 x i32> %1224) #11
  %1643 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1566, <32 x i32> %1232) #11
  %1644 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1643, <32 x i32> %1566, <32 x i32> %1232) #11
  %1645 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1642, <32 x i32> %1644) #11
  %1646 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1640, <64 x i32> %1645) #11
  %1647 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1616, <64 x i32> %1646) #11
  %1648 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1542, <32 x i32> %1196) #11
  %1649 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1648, <32 x i32> %1542, <32 x i32> %1196) #11
  %1650 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1546, <32 x i32> %1204) #11
  %1651 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1650, <32 x i32> %1546, <32 x i32> %1204) #11
  %1652 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1649, <32 x i32> %1651) #11
  %1653 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1647, <64 x i32> %1652) #11
  %1654 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1532, <32 x i32> %1182) #11
  %1655 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1654, <32 x i32> %1532, <32 x i32> %1182) #11
  %1656 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1536, <32 x i32> %1190) #11
  %1657 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1656, <32 x i32> %1536, <32 x i32> %1190) #11
  %1658 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1655, <32 x i32> %1657) #11
  %1659 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1653, <64 x i32> %1658) #11
  %1660 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1611, <64 x i32> %1659) #11
  %1661 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1660)
  store <32 x i32> %1661, <32 x i32>* %153, align 128, !tbaa !146
  %1662 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1660)
  store <32 x i32> %1662, <32 x i32>* %155, align 128, !tbaa !150
  %1663 = getelementptr inbounds i8, i8* %1519, i32 64
  %1664 = bitcast i8* %1663 to <32 x i8>*
  %1665 = load <32 x i8>, <32 x i8>* %1664, align 64, !tbaa !129
  %1666 = zext <32 x i8> %1665 to <32 x i32>
  %1667 = getelementptr inbounds i8, i8* %1519, i32 96
  %1668 = bitcast i8* %1667 to <32 x i8>*
  %1669 = load <32 x i8>, <32 x i8>* %1668, align 32, !tbaa !129
  %1670 = zext <32 x i8> %1669 to <32 x i32>
  %1671 = getelementptr inbounds i8, i8* %1529, i32 64
  %1672 = bitcast i8* %1671 to <32 x i8>*
  %1673 = load <32 x i8>, <32 x i8>* %1672, align 64, !tbaa !129
  %1674 = zext <32 x i8> %1673 to <32 x i32>
  %1675 = getelementptr inbounds i8, i8* %1529, i32 96
  %1676 = bitcast i8* %1675 to <32 x i8>*
  %1677 = load <32 x i8>, <32 x i8>* %1676, align 32, !tbaa !129
  %1678 = zext <32 x i8> %1677 to <32 x i32>
  %1679 = getelementptr inbounds i8, i8* %1539, i32 64
  %1680 = bitcast i8* %1679 to <32 x i8>*
  %1681 = load <32 x i8>, <32 x i8>* %1680, align 64, !tbaa !129
  %1682 = zext <32 x i8> %1681 to <32 x i32>
  %1683 = getelementptr inbounds i8, i8* %1539, i32 96
  %1684 = bitcast i8* %1683 to <32 x i8>*
  %1685 = load <32 x i8>, <32 x i8>* %1684, align 32, !tbaa !129
  %1686 = zext <32 x i8> %1685 to <32 x i32>
  %1687 = getelementptr inbounds i8, i8* %1549, i32 64
  %1688 = bitcast i8* %1687 to <32 x i8>*
  %1689 = load <32 x i8>, <32 x i8>* %1688, align 64, !tbaa !129
  %1690 = zext <32 x i8> %1689 to <32 x i32>
  %1691 = getelementptr inbounds i8, i8* %1549, i32 96
  %1692 = bitcast i8* %1691 to <32 x i8>*
  %1693 = load <32 x i8>, <32 x i8>* %1692, align 32, !tbaa !129
  %1694 = zext <32 x i8> %1693 to <32 x i32>
  %1695 = getelementptr inbounds i8, i8* %1559, i32 64
  %1696 = bitcast i8* %1695 to <32 x i8>*
  %1697 = load <32 x i8>, <32 x i8>* %1696, align 64, !tbaa !129
  %1698 = zext <32 x i8> %1697 to <32 x i32>
  %1699 = getelementptr inbounds i8, i8* %1559, i32 96
  %1700 = bitcast i8* %1699 to <32 x i8>*
  %1701 = load <32 x i8>, <32 x i8>* %1700, align 32, !tbaa !129
  %1702 = zext <32 x i8> %1701 to <32 x i32>
  %1703 = getelementptr inbounds i8, i8* %1569, i32 64
  %1704 = bitcast i8* %1703 to <32 x i8>*
  %1705 = load <32 x i8>, <32 x i8>* %1704, align 64, !tbaa !129
  %1706 = zext <32 x i8> %1705 to <32 x i32>
  %1707 = getelementptr inbounds i8, i8* %1569, i32 96
  %1708 = bitcast i8* %1707 to <32 x i8>*
  %1709 = load <32 x i8>, <32 x i8>* %1708, align 32, !tbaa !129
  %1710 = zext <32 x i8> %1709 to <32 x i32>
  %1711 = getelementptr inbounds i8, i8* %1579, i32 64
  %1712 = bitcast i8* %1711 to <32 x i8>*
  %1713 = load <32 x i8>, <32 x i8>* %1712, align 64, !tbaa !129
  %1714 = zext <32 x i8> %1713 to <32 x i32>
  %1715 = getelementptr inbounds i8, i8* %1579, i32 96
  %1716 = bitcast i8* %1715 to <32 x i8>*
  %1717 = load <32 x i8>, <32 x i8>* %1716, align 32, !tbaa !129
  %1718 = zext <32 x i8> %1717 to <32 x i32>
  %1719 = getelementptr inbounds i8, i8* %1589, i32 64
  %1720 = bitcast i8* %1719 to <32 x i8>*
  %1721 = load <32 x i8>, <32 x i8>* %1720, align 64, !tbaa !129
  %1722 = zext <32 x i8> %1721 to <32 x i32>
  %1723 = getelementptr inbounds i8, i8* %1589, i32 96
  %1724 = bitcast i8* %1723 to <32 x i8>*
  %1725 = load <32 x i8>, <32 x i8>* %1724, align 32, !tbaa !129
  %1726 = zext <32 x i8> %1725 to <32 x i32>
  %1727 = getelementptr inbounds i8, i8* %1599, i32 64
  %1728 = bitcast i8* %1727 to <32 x i8>*
  %1729 = load <32 x i8>, <32 x i8>* %1728, align 64, !tbaa !129
  %1730 = zext <32 x i8> %1729 to <32 x i32>
  %1731 = getelementptr inbounds i8, i8* %1599, i32 96
  %1732 = bitcast i8* %1731 to <32 x i8>*
  %1733 = load <32 x i8>, <32 x i8>* %1732, align 32, !tbaa !129
  %1734 = zext <32 x i8> %1733 to <32 x i32>
  %1735 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1666, <32 x i32> %1351) #11
  %1736 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1735, <32 x i32> %1666, <32 x i32> %1351) #11
  %1737 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1670, <32 x i32> %1357) #11
  %1738 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1737, <32 x i32> %1670, <32 x i32> %1357) #11
  %1739 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1736, <32 x i32> %1738) #11
  %1740 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1690, <32 x i32> %1387) #11
  %1741 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1740, <32 x i32> %1690, <32 x i32> %1387) #11
  %1742 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1694, <32 x i32> %1393) #11
  %1743 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1742, <32 x i32> %1694, <32 x i32> %1393) #11
  %1744 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1741, <32 x i32> %1743) #11
  %1745 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1714, <32 x i32> %1423) #11
  %1746 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1745, <32 x i32> %1714, <32 x i32> %1423) #11
  %1747 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1718, <32 x i32> %1429) #11
  %1748 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1747, <32 x i32> %1718, <32 x i32> %1429) #11
  %1749 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1746, <32 x i32> %1748) #11
  %1750 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1730, <32 x i32> %1448) #11
  %1751 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1750, <32 x i32> %1730, <32 x i32> %1448) #11
  %1752 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1734, <32 x i32> %1454) #11
  %1753 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1752, <32 x i32> %1734, <32 x i32> %1454) #11
  %1754 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1751, <32 x i32> %1753) #11
  %1755 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1754, <64 x i32> %1446) #11
  %1756 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1722, <32 x i32> %1435) #11
  %1757 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1756, <32 x i32> %1722, <32 x i32> %1435) #11
  %1758 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1726, <32 x i32> %1441) #11
  %1759 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1758, <32 x i32> %1726, <32 x i32> %1441) #11
  %1760 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1757, <32 x i32> %1759) #11
  %1761 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1755, <64 x i32> %1760) #11
  %1762 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1749, <64 x i32> %1761) #11
  %1763 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1706, <32 x i32> %1411) #11
  %1764 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1763, <32 x i32> %1706, <32 x i32> %1411) #11
  %1765 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1710, <32 x i32> %1417) #11
  %1766 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1765, <32 x i32> %1710, <32 x i32> %1417) #11
  %1767 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1764, <32 x i32> %1766) #11
  %1768 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1762, <64 x i32> %1767) #11
  %1769 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1698, <32 x i32> %1399) #11
  %1770 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1769, <32 x i32> %1698, <32 x i32> %1399) #11
  %1771 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1702, <32 x i32> %1405) #11
  %1772 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1771, <32 x i32> %1702, <32 x i32> %1405) #11
  %1773 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1770, <32 x i32> %1772) #11
  %1774 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1768, <64 x i32> %1773) #11
  %1775 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1744, <64 x i32> %1774) #11
  %1776 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1682, <32 x i32> %1375) #11
  %1777 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1776, <32 x i32> %1682, <32 x i32> %1375) #11
  %1778 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1686, <32 x i32> %1381) #11
  %1779 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1778, <32 x i32> %1686, <32 x i32> %1381) #11
  %1780 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1777, <32 x i32> %1779) #11
  %1781 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1775, <64 x i32> %1780) #11
  %1782 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1674, <32 x i32> %1363) #11
  %1783 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1782, <32 x i32> %1674, <32 x i32> %1363) #11
  %1784 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1678, <32 x i32> %1369) #11
  %1785 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1784, <32 x i32> %1678, <32 x i32> %1369) #11
  %1786 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1783, <32 x i32> %1785) #11
  %1787 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1781, <64 x i32> %1786) #11
  %1788 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1739, <64 x i32> %1787) #11
  %1789 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1788)
  store <32 x i32> %1789, <32 x i32>* %157, align 128, !tbaa !152
  %1790 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1788)
  store <32 x i32> %1790, <32 x i32>* %159, align 128, !tbaa !155
  %1791 = add nsw i32 %1168, %1143
  %1792 = shl nsw i32 %1791, 7
  %1793 = getelementptr inbounds i8, i8* %resampled_input, i32 %1792
  %1794 = bitcast i8* %1793 to <32 x i8>*
  %1795 = load <32 x i8>, <32 x i8>* %1794, align 128, !tbaa !129
  %1796 = zext <32 x i8> %1795 to <32 x i32>
  %1797 = getelementptr inbounds i8, i8* %1793, i32 32
  %1798 = bitcast i8* %1797 to <32 x i8>*
  %1799 = load <32 x i8>, <32 x i8>* %1798, align 32, !tbaa !129
  %1800 = zext <32 x i8> %1799 to <32 x i32>
  %1801 = add nsw i32 %1168, %1144
  %1802 = shl nsw i32 %1801, 7
  %1803 = getelementptr inbounds i8, i8* %resampled_input, i32 %1802
  %1804 = bitcast i8* %1803 to <32 x i8>*
  %1805 = load <32 x i8>, <32 x i8>* %1804, align 128, !tbaa !129
  %1806 = zext <32 x i8> %1805 to <32 x i32>
  %1807 = getelementptr inbounds i8, i8* %1803, i32 32
  %1808 = bitcast i8* %1807 to <32 x i8>*
  %1809 = load <32 x i8>, <32 x i8>* %1808, align 32, !tbaa !129
  %1810 = zext <32 x i8> %1809 to <32 x i32>
  %1811 = add nsw i32 %1168, %1145
  %1812 = shl nsw i32 %1811, 7
  %1813 = getelementptr inbounds i8, i8* %resampled_input, i32 %1812
  %1814 = bitcast i8* %1813 to <32 x i8>*
  %1815 = load <32 x i8>, <32 x i8>* %1814, align 128, !tbaa !129
  %1816 = zext <32 x i8> %1815 to <32 x i32>
  %1817 = getelementptr inbounds i8, i8* %1813, i32 32
  %1818 = bitcast i8* %1817 to <32 x i8>*
  %1819 = load <32 x i8>, <32 x i8>* %1818, align 32, !tbaa !129
  %1820 = zext <32 x i8> %1819 to <32 x i32>
  %1821 = add nsw i32 %1168, %1146
  %1822 = shl nsw i32 %1821, 7
  %1823 = getelementptr inbounds i8, i8* %resampled_input, i32 %1822
  %1824 = bitcast i8* %1823 to <32 x i8>*
  %1825 = load <32 x i8>, <32 x i8>* %1824, align 128, !tbaa !129
  %1826 = zext <32 x i8> %1825 to <32 x i32>
  %1827 = getelementptr inbounds i8, i8* %1823, i32 32
  %1828 = bitcast i8* %1827 to <32 x i8>*
  %1829 = load <32 x i8>, <32 x i8>* %1828, align 32, !tbaa !129
  %1830 = zext <32 x i8> %1829 to <32 x i32>
  %1831 = add nsw i32 %1168, %1147
  %1832 = shl nsw i32 %1831, 7
  %1833 = getelementptr inbounds i8, i8* %resampled_input, i32 %1832
  %1834 = bitcast i8* %1833 to <32 x i8>*
  %1835 = load <32 x i8>, <32 x i8>* %1834, align 128, !tbaa !129
  %1836 = zext <32 x i8> %1835 to <32 x i32>
  %1837 = getelementptr inbounds i8, i8* %1833, i32 32
  %1838 = bitcast i8* %1837 to <32 x i8>*
  %1839 = load <32 x i8>, <32 x i8>* %1838, align 32, !tbaa !129
  %1840 = zext <32 x i8> %1839 to <32 x i32>
  %1841 = add nsw i32 %1168, %1148
  %1842 = shl nsw i32 %1841, 7
  %1843 = getelementptr inbounds i8, i8* %resampled_input, i32 %1842
  %1844 = bitcast i8* %1843 to <32 x i8>*
  %1845 = load <32 x i8>, <32 x i8>* %1844, align 128, !tbaa !129
  %1846 = zext <32 x i8> %1845 to <32 x i32>
  %1847 = getelementptr inbounds i8, i8* %1843, i32 32
  %1848 = bitcast i8* %1847 to <32 x i8>*
  %1849 = load <32 x i8>, <32 x i8>* %1848, align 32, !tbaa !129
  %1850 = zext <32 x i8> %1849 to <32 x i32>
  %1851 = add nsw i32 %1168, %1149
  %1852 = shl nsw i32 %1851, 7
  %1853 = getelementptr inbounds i8, i8* %resampled_input, i32 %1852
  %1854 = bitcast i8* %1853 to <32 x i8>*
  %1855 = load <32 x i8>, <32 x i8>* %1854, align 128, !tbaa !129
  %1856 = zext <32 x i8> %1855 to <32 x i32>
  %1857 = getelementptr inbounds i8, i8* %1853, i32 32
  %1858 = bitcast i8* %1857 to <32 x i8>*
  %1859 = load <32 x i8>, <32 x i8>* %1858, align 32, !tbaa !129
  %1860 = zext <32 x i8> %1859 to <32 x i32>
  %1861 = add nsw i32 %1168, %1150
  %1862 = shl nsw i32 %1861, 7
  %1863 = getelementptr inbounds i8, i8* %resampled_input, i32 %1862
  %1864 = bitcast i8* %1863 to <32 x i8>*
  %1865 = load <32 x i8>, <32 x i8>* %1864, align 128, !tbaa !129
  %1866 = zext <32 x i8> %1865 to <32 x i32>
  %1867 = getelementptr inbounds i8, i8* %1863, i32 32
  %1868 = bitcast i8* %1867 to <32 x i8>*
  %1869 = load <32 x i8>, <32 x i8>* %1868, align 32, !tbaa !129
  %1870 = zext <32 x i8> %1869 to <32 x i32>
  %1871 = add nsw i32 %1168, %1151
  %1872 = shl nsw i32 %1871, 7
  %1873 = getelementptr inbounds i8, i8* %resampled_input, i32 %1872
  %1874 = bitcast i8* %1873 to <32 x i8>*
  %1875 = load <32 x i8>, <32 x i8>* %1874, align 128, !tbaa !129
  %1876 = zext <32 x i8> %1875 to <32 x i32>
  %1877 = getelementptr inbounds i8, i8* %1873, i32 32
  %1878 = bitcast i8* %1877 to <32 x i8>*
  %1879 = load <32 x i8>, <32 x i8>* %1878, align 32, !tbaa !129
  %1880 = zext <32 x i8> %1879 to <32 x i32>
  %1881 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1796, <32 x i32> %1166) #11
  %1882 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1881, <32 x i32> %1796, <32 x i32> %1166) #11
  %1883 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1800, <32 x i32> %1176) #11
  %1884 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1883, <32 x i32> %1800, <32 x i32> %1176) #11
  %1885 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1882, <32 x i32> %1884) #11
  %1886 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1826, <32 x i32> %1210) #11
  %1887 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1886, <32 x i32> %1826, <32 x i32> %1210) #11
  %1888 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1830, <32 x i32> %1218) #11
  %1889 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1888, <32 x i32> %1830, <32 x i32> %1218) #11
  %1890 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1887, <32 x i32> %1889) #11
  %1891 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1856, <32 x i32> %1252) #11
  %1892 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1891, <32 x i32> %1856, <32 x i32> %1252) #11
  %1893 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1860, <32 x i32> %1260) #11
  %1894 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1893, <32 x i32> %1860, <32 x i32> %1260) #11
  %1895 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1892, <32 x i32> %1894) #11
  %1896 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1876, <32 x i32> %1281) #11
  %1897 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1896, <32 x i32> %1876, <32 x i32> %1281) #11
  %1898 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1880, <32 x i32> %1289) #11
  %1899 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1898, <32 x i32> %1880, <32 x i32> %1289) #11
  %1900 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1897, <32 x i32> %1899) #11
  %1901 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1900, <64 x i32> %1279) #11
  %1902 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1866, <32 x i32> %1266) #11
  %1903 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1902, <32 x i32> %1866, <32 x i32> %1266) #11
  %1904 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1870, <32 x i32> %1274) #11
  %1905 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1904, <32 x i32> %1870, <32 x i32> %1274) #11
  %1906 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1903, <32 x i32> %1905) #11
  %1907 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1901, <64 x i32> %1906) #11
  %1908 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1895, <64 x i32> %1907) #11
  %1909 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1846, <32 x i32> %1238) #11
  %1910 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1909, <32 x i32> %1846, <32 x i32> %1238) #11
  %1911 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1850, <32 x i32> %1246) #11
  %1912 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1911, <32 x i32> %1850, <32 x i32> %1246) #11
  %1913 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1910, <32 x i32> %1912) #11
  %1914 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1908, <64 x i32> %1913) #11
  %1915 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1836, <32 x i32> %1224) #11
  %1916 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1915, <32 x i32> %1836, <32 x i32> %1224) #11
  %1917 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1840, <32 x i32> %1232) #11
  %1918 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1917, <32 x i32> %1840, <32 x i32> %1232) #11
  %1919 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1916, <32 x i32> %1918) #11
  %1920 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1914, <64 x i32> %1919) #11
  %1921 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1890, <64 x i32> %1920) #11
  %1922 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1816, <32 x i32> %1196) #11
  %1923 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1922, <32 x i32> %1816, <32 x i32> %1196) #11
  %1924 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1820, <32 x i32> %1204) #11
  %1925 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1924, <32 x i32> %1820, <32 x i32> %1204) #11
  %1926 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1923, <32 x i32> %1925) #11
  %1927 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1921, <64 x i32> %1926) #11
  %1928 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1806, <32 x i32> %1182) #11
  %1929 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1928, <32 x i32> %1806, <32 x i32> %1182) #11
  %1930 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1810, <32 x i32> %1190) #11
  %1931 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1930, <32 x i32> %1810, <32 x i32> %1190) #11
  %1932 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1929, <32 x i32> %1931) #11
  %1933 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1927, <64 x i32> %1932) #11
  %1934 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1885, <64 x i32> %1933) #11
  %1935 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1934)
  store <32 x i32> %1935, <32 x i32>* %161, align 128, !tbaa !157
  %1936 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1934)
  store <32 x i32> %1936, <32 x i32>* %163, align 128, !tbaa !162
  %1937 = getelementptr inbounds i8, i8* %1793, i32 64
  %1938 = bitcast i8* %1937 to <32 x i8>*
  %1939 = load <32 x i8>, <32 x i8>* %1938, align 64, !tbaa !129
  %1940 = zext <32 x i8> %1939 to <32 x i32>
  %1941 = getelementptr inbounds i8, i8* %1793, i32 96
  %1942 = bitcast i8* %1941 to <32 x i8>*
  %1943 = load <32 x i8>, <32 x i8>* %1942, align 32, !tbaa !129
  %1944 = zext <32 x i8> %1943 to <32 x i32>
  %1945 = getelementptr inbounds i8, i8* %1803, i32 64
  %1946 = bitcast i8* %1945 to <32 x i8>*
  %1947 = load <32 x i8>, <32 x i8>* %1946, align 64, !tbaa !129
  %1948 = zext <32 x i8> %1947 to <32 x i32>
  %1949 = getelementptr inbounds i8, i8* %1803, i32 96
  %1950 = bitcast i8* %1949 to <32 x i8>*
  %1951 = load <32 x i8>, <32 x i8>* %1950, align 32, !tbaa !129
  %1952 = zext <32 x i8> %1951 to <32 x i32>
  %1953 = getelementptr inbounds i8, i8* %1813, i32 64
  %1954 = bitcast i8* %1953 to <32 x i8>*
  %1955 = load <32 x i8>, <32 x i8>* %1954, align 64, !tbaa !129
  %1956 = zext <32 x i8> %1955 to <32 x i32>
  %1957 = getelementptr inbounds i8, i8* %1813, i32 96
  %1958 = bitcast i8* %1957 to <32 x i8>*
  %1959 = load <32 x i8>, <32 x i8>* %1958, align 32, !tbaa !129
  %1960 = zext <32 x i8> %1959 to <32 x i32>
  %1961 = getelementptr inbounds i8, i8* %1823, i32 64
  %1962 = bitcast i8* %1961 to <32 x i8>*
  %1963 = load <32 x i8>, <32 x i8>* %1962, align 64, !tbaa !129
  %1964 = zext <32 x i8> %1963 to <32 x i32>
  %1965 = getelementptr inbounds i8, i8* %1823, i32 96
  %1966 = bitcast i8* %1965 to <32 x i8>*
  %1967 = load <32 x i8>, <32 x i8>* %1966, align 32, !tbaa !129
  %1968 = zext <32 x i8> %1967 to <32 x i32>
  %1969 = getelementptr inbounds i8, i8* %1833, i32 64
  %1970 = bitcast i8* %1969 to <32 x i8>*
  %1971 = load <32 x i8>, <32 x i8>* %1970, align 64, !tbaa !129
  %1972 = zext <32 x i8> %1971 to <32 x i32>
  %1973 = getelementptr inbounds i8, i8* %1833, i32 96
  %1974 = bitcast i8* %1973 to <32 x i8>*
  %1975 = load <32 x i8>, <32 x i8>* %1974, align 32, !tbaa !129
  %1976 = zext <32 x i8> %1975 to <32 x i32>
  %1977 = getelementptr inbounds i8, i8* %1843, i32 64
  %1978 = bitcast i8* %1977 to <32 x i8>*
  %1979 = load <32 x i8>, <32 x i8>* %1978, align 64, !tbaa !129
  %1980 = zext <32 x i8> %1979 to <32 x i32>
  %1981 = getelementptr inbounds i8, i8* %1843, i32 96
  %1982 = bitcast i8* %1981 to <32 x i8>*
  %1983 = load <32 x i8>, <32 x i8>* %1982, align 32, !tbaa !129
  %1984 = zext <32 x i8> %1983 to <32 x i32>
  %1985 = getelementptr inbounds i8, i8* %1853, i32 64
  %1986 = bitcast i8* %1985 to <32 x i8>*
  %1987 = load <32 x i8>, <32 x i8>* %1986, align 64, !tbaa !129
  %1988 = zext <32 x i8> %1987 to <32 x i32>
  %1989 = getelementptr inbounds i8, i8* %1853, i32 96
  %1990 = bitcast i8* %1989 to <32 x i8>*
  %1991 = load <32 x i8>, <32 x i8>* %1990, align 32, !tbaa !129
  %1992 = zext <32 x i8> %1991 to <32 x i32>
  %1993 = getelementptr inbounds i8, i8* %1863, i32 64
  %1994 = bitcast i8* %1993 to <32 x i8>*
  %1995 = load <32 x i8>, <32 x i8>* %1994, align 64, !tbaa !129
  %1996 = zext <32 x i8> %1995 to <32 x i32>
  %1997 = getelementptr inbounds i8, i8* %1863, i32 96
  %1998 = bitcast i8* %1997 to <32 x i8>*
  %1999 = load <32 x i8>, <32 x i8>* %1998, align 32, !tbaa !129
  %2000 = zext <32 x i8> %1999 to <32 x i32>
  %2001 = getelementptr inbounds i8, i8* %1873, i32 64
  %2002 = bitcast i8* %2001 to <32 x i8>*
  %2003 = load <32 x i8>, <32 x i8>* %2002, align 64, !tbaa !129
  %2004 = zext <32 x i8> %2003 to <32 x i32>
  %2005 = getelementptr inbounds i8, i8* %1873, i32 96
  %2006 = bitcast i8* %2005 to <32 x i8>*
  %2007 = load <32 x i8>, <32 x i8>* %2006, align 32, !tbaa !129
  %2008 = zext <32 x i8> %2007 to <32 x i32>
  %2009 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1940, <32 x i32> %1351) #11
  %2010 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2009, <32 x i32> %1940, <32 x i32> %1351) #11
  %2011 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1944, <32 x i32> %1357) #11
  %2012 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2011, <32 x i32> %1944, <32 x i32> %1357) #11
  %2013 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2010, <32 x i32> %2012) #11
  %2014 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1964, <32 x i32> %1387) #11
  %2015 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2014, <32 x i32> %1964, <32 x i32> %1387) #11
  %2016 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1968, <32 x i32> %1393) #11
  %2017 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2016, <32 x i32> %1968, <32 x i32> %1393) #11
  %2018 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2015, <32 x i32> %2017) #11
  %2019 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1988, <32 x i32> %1423) #11
  %2020 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2019, <32 x i32> %1988, <32 x i32> %1423) #11
  %2021 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1992, <32 x i32> %1429) #11
  %2022 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2021, <32 x i32> %1992, <32 x i32> %1429) #11
  %2023 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2020, <32 x i32> %2022) #11
  %2024 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2004, <32 x i32> %1448) #11
  %2025 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2024, <32 x i32> %2004, <32 x i32> %1448) #11
  %2026 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2008, <32 x i32> %1454) #11
  %2027 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2026, <32 x i32> %2008, <32 x i32> %1454) #11
  %2028 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2025, <32 x i32> %2027) #11
  %2029 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2028, <64 x i32> %1446) #11
  %2030 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1996, <32 x i32> %1435) #11
  %2031 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2030, <32 x i32> %1996, <32 x i32> %1435) #11
  %2032 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2000, <32 x i32> %1441) #11
  %2033 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2032, <32 x i32> %2000, <32 x i32> %1441) #11
  %2034 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2031, <32 x i32> %2033) #11
  %2035 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2029, <64 x i32> %2034) #11
  %2036 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2023, <64 x i32> %2035) #11
  %2037 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1980, <32 x i32> %1411) #11
  %2038 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2037, <32 x i32> %1980, <32 x i32> %1411) #11
  %2039 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1984, <32 x i32> %1417) #11
  %2040 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2039, <32 x i32> %1984, <32 x i32> %1417) #11
  %2041 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2038, <32 x i32> %2040) #11
  %2042 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2036, <64 x i32> %2041) #11
  %2043 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1972, <32 x i32> %1399) #11
  %2044 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2043, <32 x i32> %1972, <32 x i32> %1399) #11
  %2045 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1976, <32 x i32> %1405) #11
  %2046 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2045, <32 x i32> %1976, <32 x i32> %1405) #11
  %2047 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2044, <32 x i32> %2046) #11
  %2048 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2042, <64 x i32> %2047) #11
  %2049 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2018, <64 x i32> %2048) #11
  %2050 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1956, <32 x i32> %1375) #11
  %2051 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2050, <32 x i32> %1956, <32 x i32> %1375) #11
  %2052 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1960, <32 x i32> %1381) #11
  %2053 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2052, <32 x i32> %1960, <32 x i32> %1381) #11
  %2054 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2051, <32 x i32> %2053) #11
  %2055 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2049, <64 x i32> %2054) #11
  %2056 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1948, <32 x i32> %1363) #11
  %2057 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2056, <32 x i32> %1948, <32 x i32> %1363) #11
  %2058 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1952, <32 x i32> %1369) #11
  %2059 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2058, <32 x i32> %1952, <32 x i32> %1369) #11
  %2060 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2057, <32 x i32> %2059) #11
  %2061 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2055, <64 x i32> %2060) #11
  %2062 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2013, <64 x i32> %2061) #11
  %2063 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2062)
  store <32 x i32> %2063, <32 x i32>* %165, align 128, !tbaa !164
  %2064 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2062)
  store <32 x i32> %2064, <32 x i32>* %167, align 128, !tbaa !167
  %2065 = add nsw i32 %1516, %1143
  %2066 = shl nsw i32 %2065, 7
  %2067 = getelementptr inbounds i8, i8* %resampled_input, i32 %2066
  %2068 = bitcast i8* %2067 to <32 x i8>*
  %2069 = load <32 x i8>, <32 x i8>* %2068, align 128, !tbaa !129
  %2070 = zext <32 x i8> %2069 to <32 x i32>
  %2071 = getelementptr inbounds i8, i8* %2067, i32 32
  %2072 = bitcast i8* %2071 to <32 x i8>*
  %2073 = load <32 x i8>, <32 x i8>* %2072, align 32, !tbaa !129
  %2074 = zext <32 x i8> %2073 to <32 x i32>
  %2075 = add nsw i32 %1516, %1144
  %2076 = shl nsw i32 %2075, 7
  %2077 = getelementptr inbounds i8, i8* %resampled_input, i32 %2076
  %2078 = bitcast i8* %2077 to <32 x i8>*
  %2079 = load <32 x i8>, <32 x i8>* %2078, align 128, !tbaa !129
  %2080 = zext <32 x i8> %2079 to <32 x i32>
  %2081 = getelementptr inbounds i8, i8* %2077, i32 32
  %2082 = bitcast i8* %2081 to <32 x i8>*
  %2083 = load <32 x i8>, <32 x i8>* %2082, align 32, !tbaa !129
  %2084 = zext <32 x i8> %2083 to <32 x i32>
  %2085 = add nsw i32 %1516, %1145
  %2086 = shl nsw i32 %2085, 7
  %2087 = getelementptr inbounds i8, i8* %resampled_input, i32 %2086
  %2088 = bitcast i8* %2087 to <32 x i8>*
  %2089 = load <32 x i8>, <32 x i8>* %2088, align 128, !tbaa !129
  %2090 = zext <32 x i8> %2089 to <32 x i32>
  %2091 = getelementptr inbounds i8, i8* %2087, i32 32
  %2092 = bitcast i8* %2091 to <32 x i8>*
  %2093 = load <32 x i8>, <32 x i8>* %2092, align 32, !tbaa !129
  %2094 = zext <32 x i8> %2093 to <32 x i32>
  %2095 = add nsw i32 %1516, %1146
  %2096 = shl nsw i32 %2095, 7
  %2097 = getelementptr inbounds i8, i8* %resampled_input, i32 %2096
  %2098 = bitcast i8* %2097 to <32 x i8>*
  %2099 = load <32 x i8>, <32 x i8>* %2098, align 128, !tbaa !129
  %2100 = zext <32 x i8> %2099 to <32 x i32>
  %2101 = getelementptr inbounds i8, i8* %2097, i32 32
  %2102 = bitcast i8* %2101 to <32 x i8>*
  %2103 = load <32 x i8>, <32 x i8>* %2102, align 32, !tbaa !129
  %2104 = zext <32 x i8> %2103 to <32 x i32>
  %2105 = add nsw i32 %1516, %1147
  %2106 = shl nsw i32 %2105, 7
  %2107 = getelementptr inbounds i8, i8* %resampled_input, i32 %2106
  %2108 = bitcast i8* %2107 to <32 x i8>*
  %2109 = load <32 x i8>, <32 x i8>* %2108, align 128, !tbaa !129
  %2110 = zext <32 x i8> %2109 to <32 x i32>
  %2111 = getelementptr inbounds i8, i8* %2107, i32 32
  %2112 = bitcast i8* %2111 to <32 x i8>*
  %2113 = load <32 x i8>, <32 x i8>* %2112, align 32, !tbaa !129
  %2114 = zext <32 x i8> %2113 to <32 x i32>
  %2115 = add nsw i32 %1516, %1148
  %2116 = shl nsw i32 %2115, 7
  %2117 = getelementptr inbounds i8, i8* %resampled_input, i32 %2116
  %2118 = bitcast i8* %2117 to <32 x i8>*
  %2119 = load <32 x i8>, <32 x i8>* %2118, align 128, !tbaa !129
  %2120 = zext <32 x i8> %2119 to <32 x i32>
  %2121 = getelementptr inbounds i8, i8* %2117, i32 32
  %2122 = bitcast i8* %2121 to <32 x i8>*
  %2123 = load <32 x i8>, <32 x i8>* %2122, align 32, !tbaa !129
  %2124 = zext <32 x i8> %2123 to <32 x i32>
  %2125 = add nsw i32 %1516, %1149
  %2126 = shl nsw i32 %2125, 7
  %2127 = getelementptr inbounds i8, i8* %resampled_input, i32 %2126
  %2128 = bitcast i8* %2127 to <32 x i8>*
  %2129 = load <32 x i8>, <32 x i8>* %2128, align 128, !tbaa !129
  %2130 = zext <32 x i8> %2129 to <32 x i32>
  %2131 = getelementptr inbounds i8, i8* %2127, i32 32
  %2132 = bitcast i8* %2131 to <32 x i8>*
  %2133 = load <32 x i8>, <32 x i8>* %2132, align 32, !tbaa !129
  %2134 = zext <32 x i8> %2133 to <32 x i32>
  %2135 = add nsw i32 %1516, %1150
  %2136 = shl nsw i32 %2135, 7
  %2137 = getelementptr inbounds i8, i8* %resampled_input, i32 %2136
  %2138 = bitcast i8* %2137 to <32 x i8>*
  %2139 = load <32 x i8>, <32 x i8>* %2138, align 128, !tbaa !129
  %2140 = zext <32 x i8> %2139 to <32 x i32>
  %2141 = getelementptr inbounds i8, i8* %2137, i32 32
  %2142 = bitcast i8* %2141 to <32 x i8>*
  %2143 = load <32 x i8>, <32 x i8>* %2142, align 32, !tbaa !129
  %2144 = zext <32 x i8> %2143 to <32 x i32>
  %2145 = add nsw i32 %1516, %1151
  %2146 = shl nsw i32 %2145, 7
  %2147 = getelementptr inbounds i8, i8* %resampled_input, i32 %2146
  %2148 = bitcast i8* %2147 to <32 x i8>*
  %2149 = load <32 x i8>, <32 x i8>* %2148, align 128, !tbaa !129
  %2150 = zext <32 x i8> %2149 to <32 x i32>
  %2151 = getelementptr inbounds i8, i8* %2147, i32 32
  %2152 = bitcast i8* %2151 to <32 x i8>*
  %2153 = load <32 x i8>, <32 x i8>* %2152, align 32, !tbaa !129
  %2154 = zext <32 x i8> %2153 to <32 x i32>
  %2155 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2070, <32 x i32> %1166) #11
  %2156 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2155, <32 x i32> %2070, <32 x i32> %1166) #11
  %2157 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2074, <32 x i32> %1176) #11
  %2158 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2157, <32 x i32> %2074, <32 x i32> %1176) #11
  %2159 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2156, <32 x i32> %2158) #11
  %2160 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2100, <32 x i32> %1210) #11
  %2161 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2160, <32 x i32> %2100, <32 x i32> %1210) #11
  %2162 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2104, <32 x i32> %1218) #11
  %2163 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2162, <32 x i32> %2104, <32 x i32> %1218) #11
  %2164 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2161, <32 x i32> %2163) #11
  %2165 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2130, <32 x i32> %1252) #11
  %2166 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2165, <32 x i32> %2130, <32 x i32> %1252) #11
  %2167 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2134, <32 x i32> %1260) #11
  %2168 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2167, <32 x i32> %2134, <32 x i32> %1260) #11
  %2169 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2166, <32 x i32> %2168) #11
  %2170 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2150, <32 x i32> %1281) #11
  %2171 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2170, <32 x i32> %2150, <32 x i32> %1281) #11
  %2172 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2154, <32 x i32> %1289) #11
  %2173 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2172, <32 x i32> %2154, <32 x i32> %1289) #11
  %2174 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2171, <32 x i32> %2173) #11
  %2175 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2174, <64 x i32> %1279) #11
  %2176 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2140, <32 x i32> %1266) #11
  %2177 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2176, <32 x i32> %2140, <32 x i32> %1266) #11
  %2178 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2144, <32 x i32> %1274) #11
  %2179 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2178, <32 x i32> %2144, <32 x i32> %1274) #11
  %2180 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2177, <32 x i32> %2179) #11
  %2181 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2175, <64 x i32> %2180) #11
  %2182 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2169, <64 x i32> %2181) #11
  %2183 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2120, <32 x i32> %1238) #11
  %2184 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2183, <32 x i32> %2120, <32 x i32> %1238) #11
  %2185 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2124, <32 x i32> %1246) #11
  %2186 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2185, <32 x i32> %2124, <32 x i32> %1246) #11
  %2187 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2184, <32 x i32> %2186) #11
  %2188 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2182, <64 x i32> %2187) #11
  %2189 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2110, <32 x i32> %1224) #11
  %2190 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2189, <32 x i32> %2110, <32 x i32> %1224) #11
  %2191 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2114, <32 x i32> %1232) #11
  %2192 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2191, <32 x i32> %2114, <32 x i32> %1232) #11
  %2193 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2190, <32 x i32> %2192) #11
  %2194 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2188, <64 x i32> %2193) #11
  %2195 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2164, <64 x i32> %2194) #11
  %2196 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2090, <32 x i32> %1196) #11
  %2197 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2196, <32 x i32> %2090, <32 x i32> %1196) #11
  %2198 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2094, <32 x i32> %1204) #11
  %2199 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2198, <32 x i32> %2094, <32 x i32> %1204) #11
  %2200 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2197, <32 x i32> %2199) #11
  %2201 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2195, <64 x i32> %2200) #11
  %2202 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2080, <32 x i32> %1182) #11
  %2203 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2202, <32 x i32> %2080, <32 x i32> %1182) #11
  %2204 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2084, <32 x i32> %1190) #11
  %2205 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2204, <32 x i32> %2084, <32 x i32> %1190) #11
  %2206 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2203, <32 x i32> %2205) #11
  %2207 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2201, <64 x i32> %2206) #11
  %2208 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2159, <64 x i32> %2207) #11
  %2209 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2208)
  store <32 x i32> %2209, <32 x i32>* %169, align 128, !tbaa !169
  %2210 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2208)
  store <32 x i32> %2210, <32 x i32>* %171, align 128, !tbaa !173
  %2211 = getelementptr inbounds i8, i8* %2067, i32 64
  %2212 = bitcast i8* %2211 to <32 x i8>*
  %2213 = load <32 x i8>, <32 x i8>* %2212, align 64, !tbaa !129
  %2214 = zext <32 x i8> %2213 to <32 x i32>
  %2215 = getelementptr inbounds i8, i8* %2067, i32 96
  %2216 = bitcast i8* %2215 to <32 x i8>*
  %2217 = load <32 x i8>, <32 x i8>* %2216, align 32, !tbaa !129
  %2218 = zext <32 x i8> %2217 to <32 x i32>
  %2219 = getelementptr inbounds i8, i8* %2077, i32 64
  %2220 = bitcast i8* %2219 to <32 x i8>*
  %2221 = load <32 x i8>, <32 x i8>* %2220, align 64, !tbaa !129
  %2222 = zext <32 x i8> %2221 to <32 x i32>
  %2223 = getelementptr inbounds i8, i8* %2077, i32 96
  %2224 = bitcast i8* %2223 to <32 x i8>*
  %2225 = load <32 x i8>, <32 x i8>* %2224, align 32, !tbaa !129
  %2226 = zext <32 x i8> %2225 to <32 x i32>
  %2227 = getelementptr inbounds i8, i8* %2087, i32 64
  %2228 = bitcast i8* %2227 to <32 x i8>*
  %2229 = load <32 x i8>, <32 x i8>* %2228, align 64, !tbaa !129
  %2230 = zext <32 x i8> %2229 to <32 x i32>
  %2231 = getelementptr inbounds i8, i8* %2087, i32 96
  %2232 = bitcast i8* %2231 to <32 x i8>*
  %2233 = load <32 x i8>, <32 x i8>* %2232, align 32, !tbaa !129
  %2234 = zext <32 x i8> %2233 to <32 x i32>
  %2235 = getelementptr inbounds i8, i8* %2097, i32 64
  %2236 = bitcast i8* %2235 to <32 x i8>*
  %2237 = load <32 x i8>, <32 x i8>* %2236, align 64, !tbaa !129
  %2238 = zext <32 x i8> %2237 to <32 x i32>
  %2239 = getelementptr inbounds i8, i8* %2097, i32 96
  %2240 = bitcast i8* %2239 to <32 x i8>*
  %2241 = load <32 x i8>, <32 x i8>* %2240, align 32, !tbaa !129
  %2242 = zext <32 x i8> %2241 to <32 x i32>
  %2243 = getelementptr inbounds i8, i8* %2107, i32 64
  %2244 = bitcast i8* %2243 to <32 x i8>*
  %2245 = load <32 x i8>, <32 x i8>* %2244, align 64, !tbaa !129
  %2246 = zext <32 x i8> %2245 to <32 x i32>
  %2247 = getelementptr inbounds i8, i8* %2107, i32 96
  %2248 = bitcast i8* %2247 to <32 x i8>*
  %2249 = load <32 x i8>, <32 x i8>* %2248, align 32, !tbaa !129
  %2250 = zext <32 x i8> %2249 to <32 x i32>
  %2251 = getelementptr inbounds i8, i8* %2117, i32 64
  %2252 = bitcast i8* %2251 to <32 x i8>*
  %2253 = load <32 x i8>, <32 x i8>* %2252, align 64, !tbaa !129
  %2254 = zext <32 x i8> %2253 to <32 x i32>
  %2255 = getelementptr inbounds i8, i8* %2117, i32 96
  %2256 = bitcast i8* %2255 to <32 x i8>*
  %2257 = load <32 x i8>, <32 x i8>* %2256, align 32, !tbaa !129
  %2258 = zext <32 x i8> %2257 to <32 x i32>
  %2259 = getelementptr inbounds i8, i8* %2127, i32 64
  %2260 = bitcast i8* %2259 to <32 x i8>*
  %2261 = load <32 x i8>, <32 x i8>* %2260, align 64, !tbaa !129
  %2262 = zext <32 x i8> %2261 to <32 x i32>
  %2263 = getelementptr inbounds i8, i8* %2127, i32 96
  %2264 = bitcast i8* %2263 to <32 x i8>*
  %2265 = load <32 x i8>, <32 x i8>* %2264, align 32, !tbaa !129
  %2266 = zext <32 x i8> %2265 to <32 x i32>
  %2267 = getelementptr inbounds i8, i8* %2137, i32 64
  %2268 = bitcast i8* %2267 to <32 x i8>*
  %2269 = load <32 x i8>, <32 x i8>* %2268, align 64, !tbaa !129
  %2270 = zext <32 x i8> %2269 to <32 x i32>
  %2271 = getelementptr inbounds i8, i8* %2137, i32 96
  %2272 = bitcast i8* %2271 to <32 x i8>*
  %2273 = load <32 x i8>, <32 x i8>* %2272, align 32, !tbaa !129
  %2274 = zext <32 x i8> %2273 to <32 x i32>
  %2275 = getelementptr inbounds i8, i8* %2147, i32 64
  %2276 = bitcast i8* %2275 to <32 x i8>*
  %2277 = load <32 x i8>, <32 x i8>* %2276, align 64, !tbaa !129
  %2278 = zext <32 x i8> %2277 to <32 x i32>
  %2279 = getelementptr inbounds i8, i8* %2147, i32 96
  %2280 = bitcast i8* %2279 to <32 x i8>*
  %2281 = load <32 x i8>, <32 x i8>* %2280, align 32, !tbaa !129
  %2282 = zext <32 x i8> %2281 to <32 x i32>
  %2283 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2214, <32 x i32> %1351) #11
  %2284 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2283, <32 x i32> %2214, <32 x i32> %1351) #11
  %2285 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2218, <32 x i32> %1357) #11
  %2286 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2285, <32 x i32> %2218, <32 x i32> %1357) #11
  %2287 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2284, <32 x i32> %2286) #11
  %2288 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2238, <32 x i32> %1387) #11
  %2289 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2288, <32 x i32> %2238, <32 x i32> %1387) #11
  %2290 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2242, <32 x i32> %1393) #11
  %2291 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2290, <32 x i32> %2242, <32 x i32> %1393) #11
  %2292 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2289, <32 x i32> %2291) #11
  %2293 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2262, <32 x i32> %1423) #11
  %2294 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2293, <32 x i32> %2262, <32 x i32> %1423) #11
  %2295 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2266, <32 x i32> %1429) #11
  %2296 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2295, <32 x i32> %2266, <32 x i32> %1429) #11
  %2297 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2294, <32 x i32> %2296) #11
  %2298 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2278, <32 x i32> %1448) #11
  %2299 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2298, <32 x i32> %2278, <32 x i32> %1448) #11
  %2300 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2282, <32 x i32> %1454) #11
  %2301 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2300, <32 x i32> %2282, <32 x i32> %1454) #11
  %2302 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2299, <32 x i32> %2301) #11
  %2303 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2302, <64 x i32> %1446) #11
  %2304 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2270, <32 x i32> %1435) #11
  %2305 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2304, <32 x i32> %2270, <32 x i32> %1435) #11
  %2306 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2274, <32 x i32> %1441) #11
  %2307 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2306, <32 x i32> %2274, <32 x i32> %1441) #11
  %2308 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2305, <32 x i32> %2307) #11
  %2309 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2303, <64 x i32> %2308) #11
  %2310 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2297, <64 x i32> %2309) #11
  %2311 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2254, <32 x i32> %1411) #11
  %2312 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2311, <32 x i32> %2254, <32 x i32> %1411) #11
  %2313 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2258, <32 x i32> %1417) #11
  %2314 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2313, <32 x i32> %2258, <32 x i32> %1417) #11
  %2315 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2312, <32 x i32> %2314) #11
  %2316 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2310, <64 x i32> %2315) #11
  %2317 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2246, <32 x i32> %1399) #11
  %2318 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2317, <32 x i32> %2246, <32 x i32> %1399) #11
  %2319 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2250, <32 x i32> %1405) #11
  %2320 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2319, <32 x i32> %2250, <32 x i32> %1405) #11
  %2321 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2318, <32 x i32> %2320) #11
  %2322 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2316, <64 x i32> %2321) #11
  %2323 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2292, <64 x i32> %2322) #11
  %2324 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2230, <32 x i32> %1375) #11
  %2325 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2324, <32 x i32> %2230, <32 x i32> %1375) #11
  %2326 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2234, <32 x i32> %1381) #11
  %2327 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2326, <32 x i32> %2234, <32 x i32> %1381) #11
  %2328 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2325, <32 x i32> %2327) #11
  %2329 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2323, <64 x i32> %2328) #11
  %2330 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2222, <32 x i32> %1363) #11
  %2331 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2330, <32 x i32> %2222, <32 x i32> %1363) #11
  %2332 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2226, <32 x i32> %1369) #11
  %2333 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2332, <32 x i32> %2226, <32 x i32> %1369) #11
  %2334 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2331, <32 x i32> %2333) #11
  %2335 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2329, <64 x i32> %2334) #11
  %2336 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2287, <64 x i32> %2335) #11
  %2337 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2336)
  store <32 x i32> %2337, <32 x i32>* %173, align 128, !tbaa !175
  %2338 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2336)
  store <32 x i32> %2338, <32 x i32>* %175, align 128, !tbaa !178
  %.pre2344 = load <32 x i32>, <32 x i32>* %145, align 128, !tbaa !131
  %.pre2345 = load <32 x i32>, <32 x i32>* %147, align 128, !tbaa !139
  %.pre2346 = load <32 x i32>, <32 x i32>* %149, align 128, !tbaa !141
  %.pre2347 = load <32 x i32>, <32 x i32>* %151, align 128, !tbaa !144
  br label %"consume convolved"

next_bb27:                                        ; preds = %"for output.s0.x.xo"
  %2339 = add nsw i32 %output.s0.x.x.base.s, %19
  br i1 %85, label %"for convolved.s1.r19$y.preheader", label %"next_bb27.consume convolved_crit_edge", !prof !101

"next_bb27.consume convolved_crit_edge":          ; preds = %next_bb27
  %.pre2351 = add nsw i32 %2339, 1
  br label %"consume convolved"

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb27
  %2340 = mul nsw i32 %2339, %stride_x
  %2341 = sub nsw i32 %2340, %t2225
  %2342 = add nsw i32 %2339, 1
  %2343 = mul nsw i32 %2342, %stride_x
  %2344 = sub nsw i32 %2343, %t2225
  br i1 %84, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !101

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %.lcssa2243.us2275 = phi <32 x i32> [ %2529, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2241.us2273 = phi <32 x i32> [ %2528, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2239.us2271 = phi <32 x i32> [ %2512, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2237.us2269 = phi <32 x i32> [ %2511, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2235.us2267 = phi <32 x i32> [ %2493, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2233.us2265 = phi <32 x i32> [ %2492, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2231.us2263 = phi <32 x i32> [ %2476, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2229.us2261 = phi <32 x i32> [ %2475, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2227.us2259 = phi <32 x i32> [ %2456, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2225.us2257 = phi <32 x i32> [ %2455, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2223.us2255 = phi <32 x i32> [ %2439, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2221.us2253 = phi <32 x i32> [ %2438, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2219.us2251 = phi <32 x i32> [ %2420, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2217.us2249 = phi <32 x i32> [ %2419, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2215.us2247 = phi <32 x i32> [ %2395, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2213.us2245 = phi <32 x i32> [ %2394, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %"convolved.s1.r19$y.us" = phi i32 [ %2531, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %2345 = mul nsw i32 %"convolved.s1.r19$y.us", %a548
  %2346 = add nsw i32 %2345, %1132
  %t2303.us = mul nsw i32 %2346, %130
  %2347 = add nsw i32 %2345, %1133
  %t2304.us = mul nsw i32 %2347, %130
  %2348 = mul nsw i32 %"convolved.s1.r19$y.us", %4
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %2349 = phi <32 x i32> [ %2529, %"for convolved.s1.r19$x.us" ], [ %.lcssa2243.us2275, %"for convolved.s1.r19$y.us" ]
  %2350 = phi <32 x i32> [ %2528, %"for convolved.s1.r19$x.us" ], [ %.lcssa2241.us2273, %"for convolved.s1.r19$y.us" ]
  %2351 = phi <32 x i32> [ %2512, %"for convolved.s1.r19$x.us" ], [ %.lcssa2239.us2271, %"for convolved.s1.r19$y.us" ]
  %2352 = phi <32 x i32> [ %2511, %"for convolved.s1.r19$x.us" ], [ %.lcssa2237.us2269, %"for convolved.s1.r19$y.us" ]
  %2353 = phi <32 x i32> [ %2493, %"for convolved.s1.r19$x.us" ], [ %.lcssa2235.us2267, %"for convolved.s1.r19$y.us" ]
  %2354 = phi <32 x i32> [ %2492, %"for convolved.s1.r19$x.us" ], [ %.lcssa2233.us2265, %"for convolved.s1.r19$y.us" ]
  %2355 = phi <32 x i32> [ %2476, %"for convolved.s1.r19$x.us" ], [ %.lcssa2231.us2263, %"for convolved.s1.r19$y.us" ]
  %2356 = phi <32 x i32> [ %2475, %"for convolved.s1.r19$x.us" ], [ %.lcssa2229.us2261, %"for convolved.s1.r19$y.us" ]
  %2357 = phi <32 x i32> [ %2456, %"for convolved.s1.r19$x.us" ], [ %.lcssa2227.us2259, %"for convolved.s1.r19$y.us" ]
  %2358 = phi <32 x i32> [ %2455, %"for convolved.s1.r19$x.us" ], [ %.lcssa2225.us2257, %"for convolved.s1.r19$y.us" ]
  %2359 = phi <32 x i32> [ %2439, %"for convolved.s1.r19$x.us" ], [ %.lcssa2223.us2255, %"for convolved.s1.r19$y.us" ]
  %2360 = phi <32 x i32> [ %2438, %"for convolved.s1.r19$x.us" ], [ %.lcssa2221.us2253, %"for convolved.s1.r19$y.us" ]
  %2361 = phi <32 x i32> [ %2420, %"for convolved.s1.r19$x.us" ], [ %.lcssa2219.us2251, %"for convolved.s1.r19$y.us" ]
  %2362 = phi <32 x i32> [ %2419, %"for convolved.s1.r19$x.us" ], [ %.lcssa2217.us2249, %"for convolved.s1.r19$y.us" ]
  %2363 = phi <32 x i32> [ %2395, %"for convolved.s1.r19$x.us" ], [ %.lcssa2215.us2247, %"for convolved.s1.r19$y.us" ]
  %2364 = phi <32 x i32> [ %2394, %"for convolved.s1.r19$x.us" ], [ %.lcssa2213.us2245, %"for convolved.s1.r19$y.us" ]
  %"convolved.s1.r19$x.us" = phi i32 [ %2530, %"for convolved.s1.r19$x.us" ], [ 0, %"for convolved.s1.r19$y.us" ]
  %2365 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2363, <32 x i32> %2364)
  %2366 = add nsw i32 %"convolved.s1.r19$x.us", %2348
  %2367 = shl nsw i32 %2366, 7
  %2368 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %2367
  %2369 = bitcast i16* %2368 to <32 x i16>*
  %2370 = load <32 x i16>, <32 x i16>* %2369, align 128, !tbaa !105
  %2371 = sext <32 x i16> %2370 to <32 x i32>
  %2372 = mul nsw i32 %"convolved.s1.r19$x.us", %a553
  %2373 = add i32 %2372, %t2303.us
  %2374 = add i32 %2373, %2341
  %2375 = shl nsw i32 %2374, 7
  %2376 = getelementptr inbounds i8, i8* %resampled_input, i32 %2375
  %2377 = bitcast i8* %2376 to <32 x i8>*
  %2378 = load <32 x i8>, <32 x i8>* %2377, align 128, !tbaa !129
  %2379 = zext <32 x i8> %2378 to <32 x i32>
  %2380 = getelementptr inbounds i16, i16* %2368, i32 32
  %2381 = bitcast i16* %2380 to <32 x i16>*
  %2382 = load <32 x i16>, <32 x i16>* %2381, align 64, !tbaa !105
  %2383 = sext <32 x i16> %2382 to <32 x i32>
  %2384 = getelementptr inbounds i8, i8* %2376, i32 32
  %2385 = bitcast i8* %2384 to <32 x i8>*
  %2386 = load <32 x i8>, <32 x i8>* %2385, align 32, !tbaa !129
  %2387 = zext <32 x i8> %2386 to <32 x i32>
  %2388 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2379, <32 x i32> %2371) #11
  %2389 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2388, <32 x i32> %2379, <32 x i32> %2371) #11
  %2390 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2387, <32 x i32> %2383) #11
  %2391 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2390, <32 x i32> %2387, <32 x i32> %2383) #11
  %2392 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2389, <32 x i32> %2391) #11
  %2393 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2392, <64 x i32> %2365) #11
  %2394 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2393)
  %2395 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2393)
  %2396 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2361, <32 x i32> %2362)
  %2397 = getelementptr inbounds i16, i16* %2368, i32 64
  %2398 = bitcast i16* %2397 to <32 x i16>*
  %2399 = load <32 x i16>, <32 x i16>* %2398, align 128, !tbaa !105
  %2400 = sext <32 x i16> %2399 to <32 x i32>
  %2401 = getelementptr inbounds i8, i8* %2376, i32 64
  %2402 = bitcast i8* %2401 to <32 x i8>*
  %2403 = load <32 x i8>, <32 x i8>* %2402, align 64, !tbaa !129
  %2404 = zext <32 x i8> %2403 to <32 x i32>
  %2405 = getelementptr inbounds i16, i16* %2368, i32 96
  %2406 = bitcast i16* %2405 to <32 x i16>*
  %2407 = load <32 x i16>, <32 x i16>* %2406, align 64, !tbaa !105
  %2408 = sext <32 x i16> %2407 to <32 x i32>
  %2409 = getelementptr inbounds i8, i8* %2376, i32 96
  %2410 = bitcast i8* %2409 to <32 x i8>*
  %2411 = load <32 x i8>, <32 x i8>* %2410, align 32, !tbaa !129
  %2412 = zext <32 x i8> %2411 to <32 x i32>
  %2413 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2404, <32 x i32> %2400) #11
  %2414 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2413, <32 x i32> %2404, <32 x i32> %2400) #11
  %2415 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2412, <32 x i32> %2408) #11
  %2416 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2415, <32 x i32> %2412, <32 x i32> %2408) #11
  %2417 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2414, <32 x i32> %2416) #11
  %2418 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2417, <64 x i32> %2396) #11
  %2419 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2418)
  %2420 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2418)
  %2421 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2359, <32 x i32> %2360)
  %2422 = add i32 %2373, %2344
  %2423 = shl nsw i32 %2422, 7
  %2424 = getelementptr inbounds i8, i8* %resampled_input, i32 %2423
  %2425 = bitcast i8* %2424 to <32 x i8>*
  %2426 = load <32 x i8>, <32 x i8>* %2425, align 128, !tbaa !129
  %2427 = zext <32 x i8> %2426 to <32 x i32>
  %2428 = getelementptr inbounds i8, i8* %2424, i32 32
  %2429 = bitcast i8* %2428 to <32 x i8>*
  %2430 = load <32 x i8>, <32 x i8>* %2429, align 32, !tbaa !129
  %2431 = zext <32 x i8> %2430 to <32 x i32>
  %2432 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2427, <32 x i32> %2371) #11
  %2433 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2432, <32 x i32> %2427, <32 x i32> %2371) #11
  %2434 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2431, <32 x i32> %2383) #11
  %2435 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2434, <32 x i32> %2431, <32 x i32> %2383) #11
  %2436 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2433, <32 x i32> %2435) #11
  %2437 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2436, <64 x i32> %2421) #11
  %2438 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2437)
  %2439 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2437)
  %2440 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2357, <32 x i32> %2358)
  %2441 = getelementptr inbounds i8, i8* %2424, i32 64
  %2442 = bitcast i8* %2441 to <32 x i8>*
  %2443 = load <32 x i8>, <32 x i8>* %2442, align 64, !tbaa !129
  %2444 = zext <32 x i8> %2443 to <32 x i32>
  %2445 = getelementptr inbounds i8, i8* %2424, i32 96
  %2446 = bitcast i8* %2445 to <32 x i8>*
  %2447 = load <32 x i8>, <32 x i8>* %2446, align 32, !tbaa !129
  %2448 = zext <32 x i8> %2447 to <32 x i32>
  %2449 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2444, <32 x i32> %2400) #11
  %2450 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2449, <32 x i32> %2444, <32 x i32> %2400) #11
  %2451 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2448, <32 x i32> %2408) #11
  %2452 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2451, <32 x i32> %2448, <32 x i32> %2408) #11
  %2453 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2450, <32 x i32> %2452) #11
  %2454 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2453, <64 x i32> %2440) #11
  %2455 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2454)
  %2456 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2454)
  %2457 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2355, <32 x i32> %2356)
  %2458 = add i32 %2372, %t2304.us
  %2459 = add i32 %2458, %2341
  %2460 = shl nsw i32 %2459, 7
  %2461 = getelementptr inbounds i8, i8* %resampled_input, i32 %2460
  %2462 = bitcast i8* %2461 to <32 x i8>*
  %2463 = load <32 x i8>, <32 x i8>* %2462, align 128, !tbaa !129
  %2464 = zext <32 x i8> %2463 to <32 x i32>
  %2465 = getelementptr inbounds i8, i8* %2461, i32 32
  %2466 = bitcast i8* %2465 to <32 x i8>*
  %2467 = load <32 x i8>, <32 x i8>* %2466, align 32, !tbaa !129
  %2468 = zext <32 x i8> %2467 to <32 x i32>
  %2469 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2464, <32 x i32> %2371) #11
  %2470 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2469, <32 x i32> %2464, <32 x i32> %2371) #11
  %2471 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2468, <32 x i32> %2383) #11
  %2472 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2471, <32 x i32> %2468, <32 x i32> %2383) #11
  %2473 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2470, <32 x i32> %2472) #11
  %2474 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2473, <64 x i32> %2457) #11
  %2475 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2474)
  %2476 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2474)
  %2477 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2353, <32 x i32> %2354)
  %2478 = getelementptr inbounds i8, i8* %2461, i32 64
  %2479 = bitcast i8* %2478 to <32 x i8>*
  %2480 = load <32 x i8>, <32 x i8>* %2479, align 64, !tbaa !129
  %2481 = zext <32 x i8> %2480 to <32 x i32>
  %2482 = getelementptr inbounds i8, i8* %2461, i32 96
  %2483 = bitcast i8* %2482 to <32 x i8>*
  %2484 = load <32 x i8>, <32 x i8>* %2483, align 32, !tbaa !129
  %2485 = zext <32 x i8> %2484 to <32 x i32>
  %2486 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2481, <32 x i32> %2400) #11
  %2487 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2486, <32 x i32> %2481, <32 x i32> %2400) #11
  %2488 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2485, <32 x i32> %2408) #11
  %2489 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2488, <32 x i32> %2485, <32 x i32> %2408) #11
  %2490 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2487, <32 x i32> %2489) #11
  %2491 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2490, <64 x i32> %2477) #11
  %2492 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2491)
  %2493 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2491)
  %2494 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2351, <32 x i32> %2352)
  %2495 = add i32 %2458, %2344
  %2496 = shl nsw i32 %2495, 7
  %2497 = getelementptr inbounds i8, i8* %resampled_input, i32 %2496
  %2498 = bitcast i8* %2497 to <32 x i8>*
  %2499 = load <32 x i8>, <32 x i8>* %2498, align 128, !tbaa !129
  %2500 = zext <32 x i8> %2499 to <32 x i32>
  %2501 = getelementptr inbounds i8, i8* %2497, i32 32
  %2502 = bitcast i8* %2501 to <32 x i8>*
  %2503 = load <32 x i8>, <32 x i8>* %2502, align 32, !tbaa !129
  %2504 = zext <32 x i8> %2503 to <32 x i32>
  %2505 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2500, <32 x i32> %2371) #11
  %2506 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2505, <32 x i32> %2500, <32 x i32> %2371) #11
  %2507 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2504, <32 x i32> %2383) #11
  %2508 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2507, <32 x i32> %2504, <32 x i32> %2383) #11
  %2509 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2506, <32 x i32> %2508) #11
  %2510 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2509, <64 x i32> %2494) #11
  %2511 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2510)
  %2512 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2510)
  %2513 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2349, <32 x i32> %2350)
  %2514 = getelementptr inbounds i8, i8* %2497, i32 64
  %2515 = bitcast i8* %2514 to <32 x i8>*
  %2516 = load <32 x i8>, <32 x i8>* %2515, align 64, !tbaa !129
  %2517 = zext <32 x i8> %2516 to <32 x i32>
  %2518 = getelementptr inbounds i8, i8* %2497, i32 96
  %2519 = bitcast i8* %2518 to <32 x i8>*
  %2520 = load <32 x i8>, <32 x i8>* %2519, align 32, !tbaa !129
  %2521 = zext <32 x i8> %2520 to <32 x i32>
  %2522 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2517, <32 x i32> %2400) #11
  %2523 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2522, <32 x i32> %2517, <32 x i32> %2400) #11
  %2524 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2521, <32 x i32> %2408) #11
  %2525 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2524, <32 x i32> %2521, <32 x i32> %2408) #11
  %2526 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2523, <32 x i32> %2525) #11
  %2527 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2526, <64 x i32> %2513) #11
  %2528 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2527)
  %2529 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2527)
  %2530 = add nuw nsw i32 %"convolved.s1.r19$x.us", 1
  %.not1859.us = icmp eq i32 %2530, %4
  br i1 %.not1859.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %2531 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not1858.us = icmp eq i32 %2531, %6
  br i1 %.not1858.us, label %"consume convolved.loopexit.split.us", label %"for convolved.s1.r19$y.us"

"consume convolved.loopexit.split.us":            ; preds = %"end for convolved.s1.r19$x.loopexit.us"
  store <32 x i32> %2394, <32 x i32>* %145, align 128, !tbaa !131
  store <32 x i32> %2395, <32 x i32>* %147, align 128, !tbaa !139
  store <32 x i32> %2419, <32 x i32>* %149, align 128, !tbaa !141
  store <32 x i32> %2420, <32 x i32>* %151, align 128, !tbaa !144
  store <32 x i32> %2438, <32 x i32>* %153, align 128, !tbaa !146
  store <32 x i32> %2439, <32 x i32>* %155, align 128, !tbaa !150
  store <32 x i32> %2455, <32 x i32>* %157, align 128, !tbaa !152
  store <32 x i32> %2456, <32 x i32>* %159, align 128, !tbaa !155
  store <32 x i32> %2475, <32 x i32>* %161, align 128, !tbaa !157
  store <32 x i32> %2476, <32 x i32>* %163, align 128, !tbaa !162
  store <32 x i32> %2492, <32 x i32>* %165, align 128, !tbaa !164
  store <32 x i32> %2493, <32 x i32>* %167, align 128, !tbaa !167
  store <32 x i32> %2511, <32 x i32>* %169, align 128, !tbaa !169
  store <32 x i32> %2512, <32 x i32>* %171, align 128, !tbaa !173
  store <32 x i32> %2528, <32 x i32>* %173, align 128, !tbaa !175
  store <32 x i32> %2529, <32 x i32>* %175, align 128, !tbaa !178
  br label %"consume convolved"

"consume convolved":                              ; preds = %"for convolved.s1.r19$y.preheader", %"next_bb27.consume convolved_crit_edge", %"consume convolved.loopexit.split.us", %then_bb26
  %.pre-phi2352 = phi i32 [ %.pre2351, %"next_bb27.consume convolved_crit_edge" ], [ %2342, %"consume convolved.loopexit.split.us" ], [ %1515, %then_bb26 ], [ %2342, %"for convolved.s1.r19$y.preheader" ]
  %.pre-phi2350 = phi i32 [ %2339, %"next_bb27.consume convolved_crit_edge" ], [ %2339, %"consume convolved.loopexit.split.us" ], [ %1167, %then_bb26 ], [ %2339, %"for convolved.s1.r19$y.preheader" ]
  %2532 = phi <32 x i32> [ %1122, %"next_bb27.consume convolved_crit_edge" ], [ %2420, %"consume convolved.loopexit.split.us" ], [ %.pre2347, %then_bb26 ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %2533 = phi <32 x i32> [ %1121, %"next_bb27.consume convolved_crit_edge" ], [ %2419, %"consume convolved.loopexit.split.us" ], [ %.pre2346, %then_bb26 ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %2534 = phi <32 x i32> [ %1120, %"next_bb27.consume convolved_crit_edge" ], [ %2395, %"consume convolved.loopexit.split.us" ], [ %.pre2345, %then_bb26 ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %2535 = phi <32 x i32> [ %1119, %"next_bb27.consume convolved_crit_edge" ], [ %2394, %"consume convolved.loopexit.split.us" ], [ %.pre2344, %then_bb26 ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %2536 = sext <32 x i32> %2535 to <32 x i64>
  %a35 = mul nsw <32 x i64> %180, %2536
  %2537 = icmp slt <32 x i64> %a35, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2538 = select <32 x i1> %2537, <32 x i64> %a35, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2539 = add nsw <32 x i64> %2538, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a34 = ashr <32 x i64> %2539, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2540 = icmp slt <32 x i64> %a34, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a33 = select <32 x i1> %2540, <32 x i64> %a34, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2541 = icmp sgt <32 x i64> %a33, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2542 = select <32 x i1> %2541, <32 x i64> %a33, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2543 = trunc <32 x i64> %2542 to <32 x i32>
  %2544 = sext <32 x i32> %2534 to <32 x i64>
  %a38 = mul nsw <32 x i64> %180, %2544
  %2545 = icmp slt <32 x i64> %a38, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2546 = select <32 x i1> %2545, <32 x i64> %a38, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2547 = add nsw <32 x i64> %2546, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a37 = ashr <32 x i64> %2547, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2548 = icmp slt <32 x i64> %a37, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a36 = select <32 x i1> %2548, <32 x i64> %a37, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2549 = icmp sgt <32 x i64> %a36, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2550 = select <32 x i1> %2549, <32 x i64> %a36, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2551 = trunc <32 x i64> %2550 to <32 x i32>
  %2552 = sext <32 x i32> %2533 to <32 x i64>
  %a41 = mul nsw <32 x i64> %180, %2552
  %2553 = icmp slt <32 x i64> %a41, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2554 = select <32 x i1> %2553, <32 x i64> %a41, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2555 = add nsw <32 x i64> %2554, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a40 = ashr <32 x i64> %2555, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2556 = icmp slt <32 x i64> %a40, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a39 = select <32 x i1> %2556, <32 x i64> %a40, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2557 = icmp sgt <32 x i64> %a39, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2558 = select <32 x i1> %2557, <32 x i64> %a39, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2559 = trunc <32 x i64> %2558 to <32 x i32>
  %2560 = sext <32 x i32> %2532 to <32 x i64>
  %a44 = mul nsw <32 x i64> %180, %2560
  %2561 = icmp slt <32 x i64> %a44, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2562 = select <32 x i1> %2561, <32 x i64> %a44, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2563 = add nsw <32 x i64> %2562, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a43 = ashr <32 x i64> %2563, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2564 = icmp slt <32 x i64> %a43, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a42 = select <32 x i1> %2564, <32 x i64> %a43, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2565 = icmp sgt <32 x i64> %a42, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2566 = select <32 x i1> %2565, <32 x i64> %a42, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2567 = trunc <32 x i64> %2566 to <32 x i32>
  %2568 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2543, <32 x i32> %1154) #11
  %2569 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2568, <32 x i32> %1153) #11
  %2570 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2569) #11
  %2571 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2551, <32 x i32> %1154) #11
  %2572 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2571, <32 x i32> %1153) #11
  %2573 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2572, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2574 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2570, <32 x i32> %2573) #11
  %2575 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2574) #11
  %2576 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2575) #11
  %2577 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2574) #11
  %2578 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2577) #11
  %2579 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2576, <32 x i32> %2578) #11
  %2580 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2579) #11
  %2581 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2579) #11
  %2582 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2580, <32 x i32> %2581) #11
  %2583 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2582) #11
  %2584 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2583, <32 x i32> %1155) #11
  %2585 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1152, <32 x i32> %2584) #11
  %2586 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2559, <32 x i32> %1154) #11
  %2587 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2586, <32 x i32> %1153) #11
  %2588 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2587) #11
  %2589 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2567, <32 x i32> %1154) #11
  %2590 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2589, <32 x i32> %1153) #11
  %2591 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2590, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2592 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2588, <32 x i32> %2591) #11
  %2593 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2592) #11
  %2594 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2593) #11
  %2595 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2592) #11
  %2596 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2595) #11
  %2597 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2594, <32 x i32> %2596) #11
  %2598 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2597) #11
  %2599 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2597) #11
  %2600 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2598, <32 x i32> %2599) #11
  %2601 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2600) #11
  %2602 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1157, <32 x i32> %2601) #11
  %2603 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1156, <32 x i32> %2602) #11
  %2604 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2585, <32 x i32> %2603) #11
  %2605 = bitcast <64 x i32> %2604 to <32 x i64>
  %2606 = shufflevector <32 x i64> %2605, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2607 = bitcast <8 x i64> %2606 to <32 x i16>
  %2608 = trunc <32 x i16> %2607 to <32 x i8>
  %2609 = shufflevector <32 x i8> %2608, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2610 = bitcast <128 x i8> %2609 to <32 x i32>
  %2611 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2610, <32 x i32> %189) #11
  %2612 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2611, <32 x i32> %192) #11
  %2613 = bitcast <32 x i32> %2612 to <128 x i8>
  %2614 = shufflevector <128 x i8> %2613, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2615 = mul nsw i32 %.pre-phi2350, %21
  %2616 = add nsw i32 %2615, %1159
  %2617 = getelementptr inbounds i8, i8* %17, i32 %2616
  %2618 = bitcast i8* %2617 to <32 x i8>*
  store <32 x i8> %2614, <32 x i8>* %2618, align 1, !tbaa !217
  %2619 = shufflevector <32 x i64> %2605, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2620 = bitcast <8 x i64> %2619 to <32 x i16>
  %2621 = trunc <32 x i16> %2620 to <32 x i8>
  %2622 = shufflevector <32 x i8> %2621, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2623 = bitcast <128 x i8> %2622 to <32 x i32>
  %2624 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2623, <32 x i32> %189) #11
  %2625 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2624, <32 x i32> %192) #11
  %2626 = bitcast <32 x i32> %2625 to <128 x i8>
  %2627 = shufflevector <128 x i8> %2626, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2628 = getelementptr inbounds i8, i8* %2617, i32 32
  %2629 = bitcast i8* %2628 to <32 x i8>*
  store <32 x i8> %2627, <32 x i8>* %2629, align 1, !tbaa !217
  %2630 = shufflevector <32 x i64> %2605, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2631 = bitcast <8 x i64> %2630 to <32 x i16>
  %2632 = trunc <32 x i16> %2631 to <32 x i8>
  %2633 = shufflevector <32 x i8> %2632, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2634 = bitcast <128 x i8> %2633 to <32 x i32>
  %2635 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2634, <32 x i32> %189) #11
  %2636 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2635, <32 x i32> %192) #11
  %2637 = bitcast <32 x i32> %2636 to <128 x i8>
  %2638 = shufflevector <128 x i8> %2637, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2639 = getelementptr inbounds i8, i8* %2617, i32 64
  %2640 = bitcast i8* %2639 to <32 x i8>*
  store <32 x i8> %2638, <32 x i8>* %2640, align 1, !tbaa !217
  %2641 = shufflevector <32 x i64> %2605, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2642 = bitcast <8 x i64> %2641 to <32 x i16>
  %2643 = trunc <32 x i16> %2642 to <32 x i8>
  %2644 = shufflevector <32 x i8> %2643, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2645 = bitcast <128 x i8> %2644 to <32 x i32>
  %2646 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2645, <32 x i32> %189) #11
  %2647 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2646, <32 x i32> %192) #11
  %2648 = bitcast <32 x i32> %2647 to <128 x i8>
  %2649 = shufflevector <128 x i8> %2648, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2650 = getelementptr inbounds i8, i8* %2617, i32 96
  %2651 = bitcast i8* %2650 to <32 x i8>*
  store <32 x i8> %2649, <32 x i8>* %2651, align 1, !tbaa !217
  %2652 = load <32 x i32>, <32 x i32>* %153, align 128, !tbaa !146
  %2653 = sext <32 x i32> %2652 to <32 x i64>
  %a131 = mul nsw <32 x i64> %180, %2653
  %2654 = icmp slt <32 x i64> %a131, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2655 = select <32 x i1> %2654, <32 x i64> %a131, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2656 = add nsw <32 x i64> %2655, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a130 = ashr <32 x i64> %2656, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2657 = icmp slt <32 x i64> %a130, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a129 = select <32 x i1> %2657, <32 x i64> %a130, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2658 = icmp sgt <32 x i64> %a129, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2659 = select <32 x i1> %2658, <32 x i64> %a129, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2660 = trunc <32 x i64> %2659 to <32 x i32>
  %2661 = load <32 x i32>, <32 x i32>* %155, align 128, !tbaa !150
  %2662 = sext <32 x i32> %2661 to <32 x i64>
  %a134 = mul nsw <32 x i64> %180, %2662
  %2663 = icmp slt <32 x i64> %a134, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2664 = select <32 x i1> %2663, <32 x i64> %a134, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2665 = add nsw <32 x i64> %2664, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a133 = ashr <32 x i64> %2665, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2666 = icmp slt <32 x i64> %a133, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a132 = select <32 x i1> %2666, <32 x i64> %a133, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2667 = icmp sgt <32 x i64> %a132, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2668 = select <32 x i1> %2667, <32 x i64> %a132, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2669 = trunc <32 x i64> %2668 to <32 x i32>
  %2670 = load <32 x i32>, <32 x i32>* %157, align 128, !tbaa !152
  %2671 = sext <32 x i32> %2670 to <32 x i64>
  %a137 = mul nsw <32 x i64> %180, %2671
  %2672 = icmp slt <32 x i64> %a137, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2673 = select <32 x i1> %2672, <32 x i64> %a137, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2674 = add nsw <32 x i64> %2673, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a136 = ashr <32 x i64> %2674, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2675 = icmp slt <32 x i64> %a136, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a135 = select <32 x i1> %2675, <32 x i64> %a136, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2676 = icmp sgt <32 x i64> %a135, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2677 = select <32 x i1> %2676, <32 x i64> %a135, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2678 = trunc <32 x i64> %2677 to <32 x i32>
  %2679 = load <32 x i32>, <32 x i32>* %159, align 128, !tbaa !155
  %2680 = sext <32 x i32> %2679 to <32 x i64>
  %a140 = mul nsw <32 x i64> %180, %2680
  %2681 = icmp slt <32 x i64> %a140, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2682 = select <32 x i1> %2681, <32 x i64> %a140, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2683 = add nsw <32 x i64> %2682, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a139 = ashr <32 x i64> %2683, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2684 = icmp slt <32 x i64> %a139, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a138 = select <32 x i1> %2684, <32 x i64> %a139, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2685 = icmp sgt <32 x i64> %a138, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2686 = select <32 x i1> %2685, <32 x i64> %a138, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2687 = trunc <32 x i64> %2686 to <32 x i32>
  %2688 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2660, <32 x i32> %1154) #11
  %2689 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2688, <32 x i32> %1153) #11
  %2690 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2689) #11
  %2691 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2669, <32 x i32> %1154) #11
  %2692 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2691, <32 x i32> %1153) #11
  %2693 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2692, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2694 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2690, <32 x i32> %2693) #11
  %2695 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2694) #11
  %2696 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2695) #11
  %2697 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2694) #11
  %2698 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2697) #11
  %2699 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2696, <32 x i32> %2698) #11
  %2700 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2699) #11
  %2701 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2699) #11
  %2702 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2700, <32 x i32> %2701) #11
  %2703 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2702) #11
  %2704 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2703, <32 x i32> %1155) #11
  %2705 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1152, <32 x i32> %2704) #11
  %2706 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2678, <32 x i32> %1154) #11
  %2707 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2706, <32 x i32> %1153) #11
  %2708 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2707) #11
  %2709 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2687, <32 x i32> %1154) #11
  %2710 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2709, <32 x i32> %1153) #11
  %2711 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2710, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2712 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2708, <32 x i32> %2711) #11
  %2713 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2712) #11
  %2714 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2713) #11
  %2715 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2712) #11
  %2716 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2715) #11
  %2717 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2714, <32 x i32> %2716) #11
  %2718 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2717) #11
  %2719 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2717) #11
  %2720 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2718, <32 x i32> %2719) #11
  %2721 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2720) #11
  %2722 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1157, <32 x i32> %2721) #11
  %2723 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1156, <32 x i32> %2722) #11
  %2724 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2705, <32 x i32> %2723) #11
  %2725 = bitcast <64 x i32> %2724 to <32 x i64>
  %2726 = shufflevector <32 x i64> %2725, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2727 = bitcast <8 x i64> %2726 to <32 x i16>
  %2728 = trunc <32 x i16> %2727 to <32 x i8>
  %2729 = shufflevector <32 x i8> %2728, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2730 = bitcast <128 x i8> %2729 to <32 x i32>
  %2731 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2730, <32 x i32> %189) #11
  %2732 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2731, <32 x i32> %192) #11
  %2733 = bitcast <32 x i32> %2732 to <128 x i8>
  %2734 = shufflevector <128 x i8> %2733, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2735 = mul nsw i32 %.pre-phi2352, %21
  %2736 = add nsw i32 %2735, %1159
  %2737 = getelementptr inbounds i8, i8* %17, i32 %2736
  %2738 = bitcast i8* %2737 to <32 x i8>*
  store <32 x i8> %2734, <32 x i8>* %2738, align 1, !tbaa !217
  %2739 = shufflevector <32 x i64> %2725, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2740 = bitcast <8 x i64> %2739 to <32 x i16>
  %2741 = trunc <32 x i16> %2740 to <32 x i8>
  %2742 = shufflevector <32 x i8> %2741, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2743 = bitcast <128 x i8> %2742 to <32 x i32>
  %2744 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2743, <32 x i32> %189) #11
  %2745 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2744, <32 x i32> %192) #11
  %2746 = bitcast <32 x i32> %2745 to <128 x i8>
  %2747 = shufflevector <128 x i8> %2746, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2748 = getelementptr inbounds i8, i8* %2737, i32 32
  %2749 = bitcast i8* %2748 to <32 x i8>*
  store <32 x i8> %2747, <32 x i8>* %2749, align 1, !tbaa !217
  %2750 = shufflevector <32 x i64> %2725, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2751 = bitcast <8 x i64> %2750 to <32 x i16>
  %2752 = trunc <32 x i16> %2751 to <32 x i8>
  %2753 = shufflevector <32 x i8> %2752, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2754 = bitcast <128 x i8> %2753 to <32 x i32>
  %2755 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2754, <32 x i32> %189) #11
  %2756 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2755, <32 x i32> %192) #11
  %2757 = bitcast <32 x i32> %2756 to <128 x i8>
  %2758 = shufflevector <128 x i8> %2757, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2759 = getelementptr inbounds i8, i8* %2737, i32 64
  %2760 = bitcast i8* %2759 to <32 x i8>*
  store <32 x i8> %2758, <32 x i8>* %2760, align 1, !tbaa !217
  %2761 = shufflevector <32 x i64> %2725, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2762 = bitcast <8 x i64> %2761 to <32 x i16>
  %2763 = trunc <32 x i16> %2762 to <32 x i8>
  %2764 = shufflevector <32 x i8> %2763, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2765 = bitcast <128 x i8> %2764 to <32 x i32>
  %2766 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2765, <32 x i32> %189) #11
  %2767 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2766, <32 x i32> %192) #11
  %2768 = bitcast <32 x i32> %2767 to <128 x i8>
  %2769 = shufflevector <128 x i8> %2768, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2770 = getelementptr inbounds i8, i8* %2737, i32 96
  %2771 = bitcast i8* %2770 to <32 x i8>*
  store <32 x i8> %2769, <32 x i8>* %2771, align 1, !tbaa !217
  %2772 = load <32 x i32>, <32 x i32>* %161, align 128, !tbaa !157
  %2773 = sext <32 x i32> %2772 to <32 x i64>
  %a227 = mul nsw <32 x i64> %180, %2773
  %2774 = icmp slt <32 x i64> %a227, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2775 = select <32 x i1> %2774, <32 x i64> %a227, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2776 = add nsw <32 x i64> %2775, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a226 = ashr <32 x i64> %2776, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2777 = icmp slt <32 x i64> %a226, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a225 = select <32 x i1> %2777, <32 x i64> %a226, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2778 = icmp sgt <32 x i64> %a225, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2779 = select <32 x i1> %2778, <32 x i64> %a225, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2780 = trunc <32 x i64> %2779 to <32 x i32>
  %2781 = load <32 x i32>, <32 x i32>* %163, align 128, !tbaa !162
  %2782 = sext <32 x i32> %2781 to <32 x i64>
  %a230 = mul nsw <32 x i64> %180, %2782
  %2783 = icmp slt <32 x i64> %a230, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2784 = select <32 x i1> %2783, <32 x i64> %a230, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2785 = add nsw <32 x i64> %2784, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a229 = ashr <32 x i64> %2785, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2786 = icmp slt <32 x i64> %a229, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a228 = select <32 x i1> %2786, <32 x i64> %a229, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2787 = icmp sgt <32 x i64> %a228, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2788 = select <32 x i1> %2787, <32 x i64> %a228, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2789 = trunc <32 x i64> %2788 to <32 x i32>
  %2790 = load <32 x i32>, <32 x i32>* %165, align 128, !tbaa !164
  %2791 = sext <32 x i32> %2790 to <32 x i64>
  %a233 = mul nsw <32 x i64> %180, %2791
  %2792 = icmp slt <32 x i64> %a233, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2793 = select <32 x i1> %2792, <32 x i64> %a233, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2794 = add nsw <32 x i64> %2793, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a232 = ashr <32 x i64> %2794, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2795 = icmp slt <32 x i64> %a232, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a231 = select <32 x i1> %2795, <32 x i64> %a232, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2796 = icmp sgt <32 x i64> %a231, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2797 = select <32 x i1> %2796, <32 x i64> %a231, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2798 = trunc <32 x i64> %2797 to <32 x i32>
  %2799 = load <32 x i32>, <32 x i32>* %167, align 128, !tbaa !167
  %2800 = sext <32 x i32> %2799 to <32 x i64>
  %a236 = mul nsw <32 x i64> %180, %2800
  %2801 = icmp slt <32 x i64> %a236, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2802 = select <32 x i1> %2801, <32 x i64> %a236, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2803 = add nsw <32 x i64> %2802, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a235 = ashr <32 x i64> %2803, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2804 = icmp slt <32 x i64> %a235, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a234 = select <32 x i1> %2804, <32 x i64> %a235, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2805 = icmp sgt <32 x i64> %a234, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2806 = select <32 x i1> %2805, <32 x i64> %a234, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2807 = trunc <32 x i64> %2806 to <32 x i32>
  %2808 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2780, <32 x i32> %1154) #11
  %2809 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2808, <32 x i32> %1153) #11
  %2810 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2809) #11
  %2811 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2789, <32 x i32> %1154) #11
  %2812 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2811, <32 x i32> %1153) #11
  %2813 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2812, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2814 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2810, <32 x i32> %2813) #11
  %2815 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2814) #11
  %2816 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2815) #11
  %2817 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2814) #11
  %2818 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2817) #11
  %2819 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2816, <32 x i32> %2818) #11
  %2820 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2819) #11
  %2821 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2819) #11
  %2822 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2820, <32 x i32> %2821) #11
  %2823 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2822) #11
  %2824 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2823, <32 x i32> %1155) #11
  %2825 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1152, <32 x i32> %2824) #11
  %2826 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2798, <32 x i32> %1154) #11
  %2827 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2826, <32 x i32> %1153) #11
  %2828 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2827) #11
  %2829 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2807, <32 x i32> %1154) #11
  %2830 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2829, <32 x i32> %1153) #11
  %2831 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2830, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2832 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2828, <32 x i32> %2831) #11
  %2833 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2832) #11
  %2834 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2833) #11
  %2835 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2832) #11
  %2836 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2835) #11
  %2837 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2834, <32 x i32> %2836) #11
  %2838 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2837) #11
  %2839 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2837) #11
  %2840 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2838, <32 x i32> %2839) #11
  %2841 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2840) #11
  %2842 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1157, <32 x i32> %2841) #11
  %2843 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1156, <32 x i32> %2842) #11
  %2844 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2825, <32 x i32> %2843) #11
  %2845 = bitcast <64 x i32> %2844 to <32 x i64>
  %2846 = shufflevector <32 x i64> %2845, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2847 = bitcast <8 x i64> %2846 to <32 x i16>
  %2848 = trunc <32 x i16> %2847 to <32 x i8>
  %2849 = shufflevector <32 x i8> %2848, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2850 = bitcast <128 x i8> %2849 to <32 x i32>
  %2851 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2850, <32 x i32> %189) #11
  %2852 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2851, <32 x i32> %192) #11
  %2853 = bitcast <32 x i32> %2852 to <128 x i8>
  %2854 = shufflevector <128 x i8> %2853, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2855 = add nsw i32 %2615, %1161
  %2856 = getelementptr inbounds i8, i8* %17, i32 %2855
  %2857 = bitcast i8* %2856 to <32 x i8>*
  store <32 x i8> %2854, <32 x i8>* %2857, align 1, !tbaa !217
  %2858 = shufflevector <32 x i64> %2845, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2859 = bitcast <8 x i64> %2858 to <32 x i16>
  %2860 = trunc <32 x i16> %2859 to <32 x i8>
  %2861 = shufflevector <32 x i8> %2860, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2862 = bitcast <128 x i8> %2861 to <32 x i32>
  %2863 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2862, <32 x i32> %189) #11
  %2864 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2863, <32 x i32> %192) #11
  %2865 = bitcast <32 x i32> %2864 to <128 x i8>
  %2866 = shufflevector <128 x i8> %2865, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2867 = getelementptr inbounds i8, i8* %2856, i32 32
  %2868 = bitcast i8* %2867 to <32 x i8>*
  store <32 x i8> %2866, <32 x i8>* %2868, align 1, !tbaa !217
  %2869 = shufflevector <32 x i64> %2845, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2870 = bitcast <8 x i64> %2869 to <32 x i16>
  %2871 = trunc <32 x i16> %2870 to <32 x i8>
  %2872 = shufflevector <32 x i8> %2871, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2873 = bitcast <128 x i8> %2872 to <32 x i32>
  %2874 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2873, <32 x i32> %189) #11
  %2875 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2874, <32 x i32> %192) #11
  %2876 = bitcast <32 x i32> %2875 to <128 x i8>
  %2877 = shufflevector <128 x i8> %2876, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2878 = getelementptr inbounds i8, i8* %2856, i32 64
  %2879 = bitcast i8* %2878 to <32 x i8>*
  store <32 x i8> %2877, <32 x i8>* %2879, align 1, !tbaa !217
  %2880 = shufflevector <32 x i64> %2845, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2881 = bitcast <8 x i64> %2880 to <32 x i16>
  %2882 = trunc <32 x i16> %2881 to <32 x i8>
  %2883 = shufflevector <32 x i8> %2882, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2884 = bitcast <128 x i8> %2883 to <32 x i32>
  %2885 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2884, <32 x i32> %189) #11
  %2886 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2885, <32 x i32> %192) #11
  %2887 = bitcast <32 x i32> %2886 to <128 x i8>
  %2888 = shufflevector <128 x i8> %2887, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2889 = getelementptr inbounds i8, i8* %2856, i32 96
  %2890 = bitcast i8* %2889 to <32 x i8>*
  store <32 x i8> %2888, <32 x i8>* %2890, align 1, !tbaa !217
  %2891 = load <32 x i32>, <32 x i32>* %169, align 128, !tbaa !169
  %2892 = sext <32 x i32> %2891 to <32 x i64>
  %a323 = mul nsw <32 x i64> %180, %2892
  %2893 = icmp slt <32 x i64> %a323, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2894 = select <32 x i1> %2893, <32 x i64> %a323, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2895 = add nsw <32 x i64> %2894, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a322 = ashr <32 x i64> %2895, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2896 = icmp slt <32 x i64> %a322, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a321 = select <32 x i1> %2896, <32 x i64> %a322, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2897 = icmp sgt <32 x i64> %a321, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2898 = select <32 x i1> %2897, <32 x i64> %a321, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2899 = trunc <32 x i64> %2898 to <32 x i32>
  %2900 = load <32 x i32>, <32 x i32>* %171, align 128, !tbaa !173
  %2901 = sext <32 x i32> %2900 to <32 x i64>
  %a326 = mul nsw <32 x i64> %180, %2901
  %2902 = icmp slt <32 x i64> %a326, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2903 = select <32 x i1> %2902, <32 x i64> %a326, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2904 = add nsw <32 x i64> %2903, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a325 = ashr <32 x i64> %2904, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2905 = icmp slt <32 x i64> %a325, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a324 = select <32 x i1> %2905, <32 x i64> %a325, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2906 = icmp sgt <32 x i64> %a324, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2907 = select <32 x i1> %2906, <32 x i64> %a324, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2908 = trunc <32 x i64> %2907 to <32 x i32>
  %2909 = load <32 x i32>, <32 x i32>* %173, align 128, !tbaa !175
  %2910 = sext <32 x i32> %2909 to <32 x i64>
  %a329 = mul nsw <32 x i64> %180, %2910
  %2911 = icmp slt <32 x i64> %a329, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2912 = select <32 x i1> %2911, <32 x i64> %a329, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2913 = add nsw <32 x i64> %2912, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a328 = ashr <32 x i64> %2913, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2914 = icmp slt <32 x i64> %a328, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a327 = select <32 x i1> %2914, <32 x i64> %a328, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2915 = icmp sgt <32 x i64> %a327, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2916 = select <32 x i1> %2915, <32 x i64> %a327, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2917 = trunc <32 x i64> %2916 to <32 x i32>
  %2918 = load <32 x i32>, <32 x i32>* %175, align 128, !tbaa !178
  %2919 = sext <32 x i32> %2918 to <32 x i64>
  %a332 = mul nsw <32 x i64> %180, %2919
  %2920 = icmp slt <32 x i64> %a332, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2921 = select <32 x i1> %2920, <32 x i64> %a332, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2922 = add nsw <32 x i64> %2921, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a331 = ashr <32 x i64> %2922, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2923 = icmp slt <32 x i64> %a331, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a330 = select <32 x i1> %2923, <32 x i64> %a331, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2924 = icmp sgt <32 x i64> %a330, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2925 = select <32 x i1> %2924, <32 x i64> %a330, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2926 = trunc <32 x i64> %2925 to <32 x i32>
  %2927 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2899, <32 x i32> %1154) #11
  %2928 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2927, <32 x i32> %1153) #11
  %2929 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2928) #11
  %2930 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2908, <32 x i32> %1154) #11
  %2931 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2930, <32 x i32> %1153) #11
  %2932 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2931, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2933 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2929, <32 x i32> %2932) #11
  %2934 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2933) #11
  %2935 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2934) #11
  %2936 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2933) #11
  %2937 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2936) #11
  %2938 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2935, <32 x i32> %2937) #11
  %2939 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2938) #11
  %2940 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2938) #11
  %2941 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2939, <32 x i32> %2940) #11
  %2942 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2941) #11
  %2943 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2942, <32 x i32> %1155) #11
  %2944 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1152, <32 x i32> %2943) #11
  %2945 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2917, <32 x i32> %1154) #11
  %2946 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2945, <32 x i32> %1153) #11
  %2947 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2946) #11
  %2948 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2926, <32 x i32> %1154) #11
  %2949 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2948, <32 x i32> %1153) #11
  %2950 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2949, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2951 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2947, <32 x i32> %2950) #11
  %2952 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2951) #11
  %2953 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2952) #11
  %2954 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2951) #11
  %2955 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2954) #11
  %2956 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2953, <32 x i32> %2955) #11
  %2957 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2956) #11
  %2958 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2956) #11
  %2959 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2957, <32 x i32> %2958) #11
  %2960 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %2959) #11
  %2961 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1157, <32 x i32> %2960) #11
  %2962 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1156, <32 x i32> %2961) #11
  %2963 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2944, <32 x i32> %2962) #11
  %2964 = bitcast <64 x i32> %2963 to <32 x i64>
  %2965 = shufflevector <32 x i64> %2964, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2966 = bitcast <8 x i64> %2965 to <32 x i16>
  %2967 = trunc <32 x i16> %2966 to <32 x i8>
  %2968 = shufflevector <32 x i8> %2967, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2969 = bitcast <128 x i8> %2968 to <32 x i32>
  %2970 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2969, <32 x i32> %189) #11
  %2971 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2970, <32 x i32> %192) #11
  %2972 = bitcast <32 x i32> %2971 to <128 x i8>
  %2973 = shufflevector <128 x i8> %2972, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2974 = add nsw i32 %2735, %1161
  %2975 = getelementptr inbounds i8, i8* %17, i32 %2974
  %2976 = bitcast i8* %2975 to <32 x i8>*
  store <32 x i8> %2973, <32 x i8>* %2976, align 1, !tbaa !217
  %2977 = shufflevector <32 x i64> %2964, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2978 = bitcast <8 x i64> %2977 to <32 x i16>
  %2979 = trunc <32 x i16> %2978 to <32 x i8>
  %2980 = shufflevector <32 x i8> %2979, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2981 = bitcast <128 x i8> %2980 to <32 x i32>
  %2982 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2981, <32 x i32> %189) #11
  %2983 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2982, <32 x i32> %192) #11
  %2984 = bitcast <32 x i32> %2983 to <128 x i8>
  %2985 = shufflevector <128 x i8> %2984, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2986 = getelementptr inbounds i8, i8* %2975, i32 32
  %2987 = bitcast i8* %2986 to <32 x i8>*
  store <32 x i8> %2985, <32 x i8>* %2987, align 1, !tbaa !217
  %2988 = shufflevector <32 x i64> %2964, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2989 = bitcast <8 x i64> %2988 to <32 x i16>
  %2990 = trunc <32 x i16> %2989 to <32 x i8>
  %2991 = shufflevector <32 x i8> %2990, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2992 = bitcast <128 x i8> %2991 to <32 x i32>
  %2993 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2992, <32 x i32> %189) #11
  %2994 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2993, <32 x i32> %192) #11
  %2995 = bitcast <32 x i32> %2994 to <128 x i8>
  %2996 = shufflevector <128 x i8> %2995, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2997 = getelementptr inbounds i8, i8* %2975, i32 64
  %2998 = bitcast i8* %2997 to <32 x i8>*
  store <32 x i8> %2996, <32 x i8>* %2998, align 1, !tbaa !217
  %2999 = shufflevector <32 x i64> %2964, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3000 = bitcast <8 x i64> %2999 to <32 x i16>
  %3001 = trunc <32 x i16> %3000 to <32 x i8>
  %3002 = shufflevector <32 x i8> %3001, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3003 = bitcast <128 x i8> %3002 to <32 x i32>
  %3004 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3003, <32 x i32> %189) #11
  %3005 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3004, <32 x i32> %192) #11
  %3006 = bitcast <32 x i32> %3005 to <128 x i8>
  %3007 = shufflevector <128 x i8> %3006, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3008 = getelementptr inbounds i8, i8* %2975, i32 96
  %3009 = bitcast i8* %3008 to <32 x i8>*
  store <32 x i8> %3007, <32 x i8>* %3009, align 1, !tbaa !217
  %3010 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not1857 = icmp eq i32 %3010, %143
  br i1 %.not1857, label %"end for output.s0.x.xo", label %"for output.s0.x.xo"

then_bb28:                                        ; preds = %next_bb
  %t2330 = icmp slt i32 %a553, 0
  %t2332 = icmp slt i32 %stride_x, 0
  %3011 = add nsw i32 %4, -1
  %3012 = mul nsw i32 %3011, %a553
  %t2333 = select i1 %t2330, i32 %3012, i32 0
  %t2334.s = select i1 %t2332, i32 %20, i32 1
  %t2335 = icmp slt i32 %a548, 0
  %t2337 = icmp slt i32 %stride_y, 0
  %3013 = add nsw i32 %6, -1
  %3014 = mul nsw i32 %3013, %a548
  %t2338 = select i1 %t2335, i32 %3014, i32 0
  %t2339.s = select i1 %t2337, i32 %23, i32 1
  %3015 = icmp eq i32 %4, 3
  %3016 = icmp eq i32 %6, 3
  %t2340 = and i1 %3015, %3016
  %t2325 = icmp eq i32 %depth_multiplier, 1
  %a548.op1832 = shl i32 %a548, 1
  %3017 = select i1 %t2335, i32 %a548.op1832, i32 0
  %3018 = select i1 %t2340, i32 %3017, i32 %t2338
  %3019 = add i32 %22, -1
  %3020 = add i32 %3019, %t2339.s
  %3021 = mul nsw i32 %3020, %stride_y
  %b429 = add nsw i32 %3021, %3018
  %a553.op1833 = shl i32 %a553, 1
  %3022 = select i1 %t2330, i32 %a553.op1833, i32 0
  %3023 = select i1 %t2340, i32 %3022, i32 %t2333
  %3024 = add i32 %19, -1
  %3025 = add i32 %3024, %t2334.s
  %3026 = mul nsw i32 %3025, %stride_x
  %b428 = add nsw i32 %3026, %3023
  %3027 = select i1 %t2335, i32 0, i32 %3014
  %3028 = add nsw i32 %23, -1
  %3029 = select i1 %t2337, i32 0, i32 %3028
  %3030 = add nsw i32 %3029, %22
  %3031 = mul nsw i32 %3030, %stride_y
  %b434 = add nsw i32 %3031, %3027
  %3032 = select i1 %t2330, i32 0, i32 %3012
  %3033 = add nsw i32 %20, -1
  %3034 = select i1 %t2332, i32 0, i32 %3033
  %3035 = add nsw i32 %3034, %19
  %3036 = mul nsw i32 %3035, %stride_x
  %b430 = add nsw i32 %3036, %3032
  %3037 = mul nsw i32 %13, %12
  %3038 = mul nsw i32 %16, %14
  %3039 = mul nsw i32 %11, %10
  %3040 = add i32 %3037, %3039
  %t2326 = add i32 %3040, %3038
  %3041 = add nuw nsw i32 %3, 127
  %3042 = ashr i32 %3041, 7
  %b423 = add nsw i32 %3, -128
  %3043 = icmp sgt i32 %4, 0
  %3044 = icmp sgt i32 %6, 0
  %3045 = select i1 %3044, i32 %6, i32 0
  %.op2276 = shl i32 %4, 8
  %3046 = select i1 %3043, i32 %.op2276, i32 0
  %3047 = mul i32 %3046, %3045
  %3048 = or i32 %3047, 134
  %3049 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %3050 = zext i8 %filter_zero to i16
  %3051 = insertelement <64 x i16> undef, i16 %3050, i32 0
  %3052 = shufflevector <64 x i16> %3051, <64 x i16> undef, <64 x i32> zeroinitializer
  %3053 = bitcast <64 x i16> %3052 to <32 x i32>
  %3054 = bitcast [512 x i32]* %offset_c1815 to <32 x i32>*
  %3055 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 32
  %3056 = bitcast i32* %3055 to <32 x i32>*
  %3057 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 64
  %3058 = bitcast i32* %3057 to <32 x i32>*
  %3059 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 96
  %3060 = bitcast i32* %3059 to <32 x i32>*
  %3061 = bitcast i8* %0 to i32*
  %3062 = zext i8 %input_zero to i32
  %3063 = insertelement <32 x i32> undef, i32 %3062, i32 0
  %3064 = shufflevector <32 x i32> %3063, <32 x i32> undef, <32 x i32> zeroinitializer
  %a426 = add nsw i32 %3026, %t2333
  %3065 = icmp slt i32 %t2333, %3023
  %t2348 = select i1 %3065, i32 %a426, i32 %b428
  %a427 = add nsw i32 %3021, %t2338
  %3066 = icmp slt i32 %t2338, %3018
  %t2346 = select i1 %3066, i32 %a427, i32 %b429
  %3067 = icmp sgt i32 %a553, 0
  %3068 = select i1 %3067, i32 %a553, i32 0
  %3069 = shl nuw nsw i32 %3068, 1
  %3070 = select i1 %t2340, i32 %3069, i32 %3032
  %a428 = add nsw i32 %3036, %3070
  %3071 = icmp sgt i32 %3070, %3032
  %3072 = select i1 %3071, i32 %a428, i32 %b430
  %a438 = sub nsw i32 %3072, %t2348
  %3073 = icmp sgt i32 %a548, 0
  %3074 = select i1 %3073, i32 %a548, i32 0
  %3075 = shl nuw nsw i32 %3074, 1
  %3076 = select i1 %t2340, i32 %3075, i32 %3027
  %a432 = add nsw i32 %3031, %3076
  %3077 = icmp sgt i32 %3076, %3027
  %3078 = select i1 %3077, i32 %a432, i32 %b434
  %a439 = sub nsw i32 %3078, %t2346
  %t2351 = sub nsw i32 %b430, %a426
  %t2350 = sub nsw i32 %b434, %a427
  %3079 = icmp sgt i32 %15, 0
  %3080 = icmp sgt i32 %a438, -1
  %t2549 = select i1 %3080, i32 %a438, i32 -1
  %3081 = icmp sgt i32 %a439, -1
  %t2550 = select i1 %3081, i32 %a439, i32 -1
  %3082 = add nsw i32 %t2550, 1
  %3083 = shl i32 %t2549, 7
  %t2551 = add i32 %3083, 128
  %3084 = mul i32 %t2551, %3082
  %3085 = add i32 %3084, 131
  %3086 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %3087 = icmp sgt i32 %t2350, -1
  %3088 = sub i32 %a427, %t2346
  %3089 = add nsw i32 %a438, 1
  %3090 = sub i32 %a426, %t2348
  %3091 = icmp sgt i32 %t2351, -1
  %3092 = icmp eq i32 %depth_multiplier, 0
  %3093 = select i1 %3092, <64 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <64 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %3094 = xor i32 %depth_multiplier.lobit, -1
  %3095 = sub nsw i32 %3094, %depth_multiplier.lobit
  %.neg2124 = mul i32 %24, %22
  %.neg2125 = mul i32 %21, %19
  %.neg2126 = mul i32 %25, %14
  %3096 = icmp sgt i32 %23, 0
  %3097 = sub i32 %a548.op1832, %t2346
  %3098 = sub i32 %a548, %t2346
  %3099 = icmp sgt i32 %20, 0
  %3100 = bitcast [128 x i32]* %sum_filter1817 to <32 x i32>*
  %3101 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 32
  %3102 = bitcast i32* %3101 to <32 x i32>*
  %3103 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 64
  %3104 = bitcast i32* %3103 to <32 x i32>*
  %3105 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 96
  %3106 = bitcast i32* %3105 to <32 x i32>*
  %3107 = sub nsw i32 %a553.op1833, %t2348
  %3108 = sub nsw i32 %a553, %t2348
  %3109 = sext i32 %output_multiplier to i64
  %3110 = insertelement <32 x i64> undef, i64 %3109, i32 0
  %3111 = shufflevector <32 x i64> %3110, <32 x i64> undef, <32 x i32> zeroinitializer
  %3112 = shl nuw i32 1, %output_shift
  %3113 = ashr i32 %3112, 1
  %3114 = zext i8 %output_zero to i16
  %3115 = insertelement <64 x i16> undef, i16 %3114, i32 0
  %3116 = shufflevector <64 x i16> %3115, <64 x i16> undef, <64 x i32> zeroinitializer
  %3117 = bitcast <64 x i16> %3116 to <32 x i32>
  %3118 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %3119 = shufflevector <32 x i8> %3118, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3120 = bitcast <128 x i8> %3119 to <32 x i32>
  %3121 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %3122 = shufflevector <32 x i8> %3121, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3123 = bitcast <128 x i8> %3122 to <32 x i32>
  %reass.add2128 = add i32 %.neg2124, %.neg2125
  %reass.add2129 = add i32 %reass.add2128, %.neg2126
  %3124 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %3125 = add i32 %4, -1
  %xtraiter2514 = and i32 %4, 3
  %3126 = icmp ult i32 %3125, 3
  %unroll_iter2517 = and i32 %4, -4
  %lcmp.mod2516.not = icmp eq i32 %xtraiter2514, 0
  %xtraiter2519 = and i32 %4, 3
  %3127 = icmp ult i32 %3125, 3
  %unroll_iter2529 = and i32 %4, -4
  %lcmp.mod2524.not = icmp eq i32 %xtraiter2519, 0
  %3128 = or i32 %t2350, %t2351
  %3129 = icmp slt i32 %3128, 0
  %xtraiter2531 = and i32 %4, 1
  %3130 = icmp eq i32 %3125, 0
  %unroll_iter2537 = and i32 %4, -2
  %lcmp.mod2536.not = icmp eq i32 %xtraiter2531, 0
  br label %"for output.s0.c.co30"

next_bb29:                                        ; preds = %next_bb
  %3131 = icmp sgt i32 %3, 0
  br i1 %3131, label %if.end.i2005, label %call_destructor.exit1937

"for output.s0.c.co30":                           ; preds = %then_bb28, %"end for output.s0.b.rebased58"
  %.3 = phi i8* [ null, %then_bb28 ], [ %.4, %"end for output.s0.b.rebased58" ]
  %output.s0.c.co32 = phi i32 [ 0, %then_bb28 ], [ %3473, %"end for output.s0.b.rebased58" ]
  %a421 = shl nsw i32 %output.s0.c.co32, 7
  %3132 = icmp slt i32 %a421, %b423
  %output.s0.c.c.base33 = select i1 %3132, i32 %a421, i32 %b423
  %3133 = load i32, i32* %.fca.1.gep, align 4, !tbaa !98
  %cmp.i1958 = icmp ult i32 %3133, %3048
  %3134 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !95
  br i1 %cmp.i1958, label %if.then.i1961, label %pseudostack_alloc.exit1974, !prof !99

if.then.i1961:                                    ; preds = %"for output.s0.c.co30"
  %tobool1.not.i1960 = icmp ne i8* %3134, null
  %3135 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i1963 = icmp ugt i32 %3135, 16384
  %or.cond2116 = and i1 %tobool1.not.i1960, %cmp2.i1963
  br i1 %or.cond2116, label %if.then3.i1965, label %if.end.i1969

if.then3.i1965:                                   ; preds = %if.then.i1961
  call void @halide_free(i8* null, i8* nonnull %3134) #15
  br label %if.end.i1969

if.end.i1969:                                     ; preds = %if.then3.i1965, %if.then.i1961
  %add.i1967 = add i32 %3135, %3048
  store i32 %add.i1967, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i1968 = icmp ugt i32 %add.i1967, 16384
  br i1 %cmp7.i1968, label %if.then8.i1971, label %if.end11.i1973

if.then8.i1971:                                   ; preds = %if.end.i1969
  %call.i1970 = call i8* @halide_malloc(i8* null, i32 %3048) #15
  br label %if.end11.i1973

if.end11.i1973:                                   ; preds = %if.then8.i1971, %if.end.i1969
  %storemerge.i1972 = phi i8* [ %call.i1970, %if.then8.i1971 ], [ null, %if.end.i1969 ]
  store i8* %storemerge.i1972, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %3048, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %pseudostack_alloc.exit1974

pseudostack_alloc.exit1974:                       ; preds = %"for output.s0.c.co30", %if.end11.i1973
  %3136 = phi i8* [ %storemerge.i1972, %if.end11.i1973 ], [ %3134, %"for output.s0.c.co30" ]
  %3137 = bitcast i8* %3136 to i16*
  %.not1834 = icmp eq i8* %3136, null
  br i1 %.not1834, label %then_bb35, label %"produce filter_zeroed37", !prof !100

then_bb35:                                        ; preds = %pseudostack_alloc.exit1974
  %3138 = alloca i8*, i32 %3048, align 128
  %3139 = bitcast i8** %3138 to i16*
  store i8** %3138, i8*** %3049, align 4
  br label %"produce filter_zeroed37"

"produce filter_zeroed37":                        ; preds = %pseudostack_alloc.exit1974, %then_bb35
  %filter_zeroed36 = phi i16* [ %3139, %then_bb35 ], [ %3137, %pseudostack_alloc.exit1974 ]
  br i1 %3044, label %"for filter_zeroed.s0.y38.preheader", label %"consume sum_filter54.critedge", !prof !101

"for filter_zeroed.s0.y38.preheader":             ; preds = %"produce filter_zeroed37"
  br i1 %3043, label %"for filter_zeroed.s0.y38.us", label %"for sum_filter.s1.r19$y48.preheader.thread", !prof !101

"for sum_filter.s1.r19$y48.preheader.thread":     ; preds = %"for filter_zeroed.s0.y38.preheader"
  %3140 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %3140, <32 x i32>* %3054, align 128, !tbaa !131
  %3141 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"consume sum_filter54.sink.split"

"for filter_zeroed.s0.y38.us":                    ; preds = %"for filter_zeroed.s0.y38.preheader", %"end for filter_zeroed.s0.x42.loopexit.us"
  %filter_zeroed.s0.y40.us = phi i32 [ %3250, %"end for filter_zeroed.s0.x42.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y38.preheader" ]
  %3142 = mul nsw i32 %filter_zeroed.s0.y40.us, %7
  %3143 = add nsw i32 %3142, %output.s0.c.c.base33
  %3144 = mul nsw i32 %filter_zeroed.s0.y40.us, %4
  br i1 %3126, label %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x41.us"

"for filter_zeroed.s0.x41.us":                    ; preds = %"for filter_zeroed.s0.y38.us", %"for filter_zeroed.s0.x41.us"
  %filter_zeroed.s0.x43.us = phi i32 [ %3228, %"for filter_zeroed.s0.x41.us" ], [ 0, %"for filter_zeroed.s0.y38.us" ]
  %niter2518 = phi i32 [ %niter2518.nsub.3, %"for filter_zeroed.s0.x41.us" ], [ %unroll_iter2517, %"for filter_zeroed.s0.y38.us" ]
  %3145 = mul nsw i32 %filter_zeroed.s0.x43.us, %5
  %3146 = add nsw i32 %3143, %3145
  %3147 = getelementptr inbounds i8, i8* %1, i32 %3146
  %3148 = bitcast i8* %3147 to <64 x i8>*
  %3149 = load <64 x i8>, <64 x i8>* %3148, align 1, !tbaa !102
  %3150 = zext <64 x i8> %3149 to <64 x i16>
  %3151 = bitcast <64 x i16> %3150 to <32 x i32>
  %3152 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3151, <32 x i32> %3053) #11
  %3153 = add nsw i32 %filter_zeroed.s0.x43.us, %3144
  %3154 = shl nsw i32 %3153, 7
  %3155 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3154
  %3156 = bitcast i16* %3155 to <32 x i32>*
  store <32 x i32> %3152, <32 x i32>* %3156, align 128, !tbaa !105
  %3157 = getelementptr inbounds i8, i8* %3147, i32 64
  %3158 = bitcast i8* %3157 to <64 x i8>*
  %3159 = load <64 x i8>, <64 x i8>* %3158, align 1, !tbaa !102
  %3160 = zext <64 x i8> %3159 to <64 x i16>
  %3161 = bitcast <64 x i16> %3160 to <32 x i32>
  %3162 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3161, <32 x i32> %3053) #11
  %3163 = getelementptr inbounds i16, i16* %3155, i32 64
  %3164 = bitcast i16* %3163 to <32 x i32>*
  store <32 x i32> %3162, <32 x i32>* %3164, align 128, !tbaa !105
  %3165 = or i32 %filter_zeroed.s0.x43.us, 1
  %3166 = mul nsw i32 %3165, %5
  %3167 = add nsw i32 %3143, %3166
  %3168 = getelementptr inbounds i8, i8* %1, i32 %3167
  %3169 = bitcast i8* %3168 to <64 x i8>*
  %3170 = load <64 x i8>, <64 x i8>* %3169, align 1, !tbaa !102
  %3171 = zext <64 x i8> %3170 to <64 x i16>
  %3172 = bitcast <64 x i16> %3171 to <32 x i32>
  %3173 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3172, <32 x i32> %3053) #11
  %3174 = add nsw i32 %3165, %3144
  %3175 = shl nsw i32 %3174, 7
  %3176 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3175
  %3177 = bitcast i16* %3176 to <32 x i32>*
  store <32 x i32> %3173, <32 x i32>* %3177, align 128, !tbaa !105
  %3178 = getelementptr inbounds i8, i8* %3168, i32 64
  %3179 = bitcast i8* %3178 to <64 x i8>*
  %3180 = load <64 x i8>, <64 x i8>* %3179, align 1, !tbaa !102
  %3181 = zext <64 x i8> %3180 to <64 x i16>
  %3182 = bitcast <64 x i16> %3181 to <32 x i32>
  %3183 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3182, <32 x i32> %3053) #11
  %3184 = getelementptr inbounds i16, i16* %3176, i32 64
  %3185 = bitcast i16* %3184 to <32 x i32>*
  store <32 x i32> %3183, <32 x i32>* %3185, align 128, !tbaa !105
  %3186 = or i32 %filter_zeroed.s0.x43.us, 2
  %3187 = mul nsw i32 %3186, %5
  %3188 = add nsw i32 %3143, %3187
  %3189 = getelementptr inbounds i8, i8* %1, i32 %3188
  %3190 = bitcast i8* %3189 to <64 x i8>*
  %3191 = load <64 x i8>, <64 x i8>* %3190, align 1, !tbaa !102
  %3192 = zext <64 x i8> %3191 to <64 x i16>
  %3193 = bitcast <64 x i16> %3192 to <32 x i32>
  %3194 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3193, <32 x i32> %3053) #11
  %3195 = add nsw i32 %3186, %3144
  %3196 = shl nsw i32 %3195, 7
  %3197 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3196
  %3198 = bitcast i16* %3197 to <32 x i32>*
  store <32 x i32> %3194, <32 x i32>* %3198, align 128, !tbaa !105
  %3199 = getelementptr inbounds i8, i8* %3189, i32 64
  %3200 = bitcast i8* %3199 to <64 x i8>*
  %3201 = load <64 x i8>, <64 x i8>* %3200, align 1, !tbaa !102
  %3202 = zext <64 x i8> %3201 to <64 x i16>
  %3203 = bitcast <64 x i16> %3202 to <32 x i32>
  %3204 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3203, <32 x i32> %3053) #11
  %3205 = getelementptr inbounds i16, i16* %3197, i32 64
  %3206 = bitcast i16* %3205 to <32 x i32>*
  store <32 x i32> %3204, <32 x i32>* %3206, align 128, !tbaa !105
  %3207 = or i32 %filter_zeroed.s0.x43.us, 3
  %3208 = mul nsw i32 %3207, %5
  %3209 = add nsw i32 %3143, %3208
  %3210 = getelementptr inbounds i8, i8* %1, i32 %3209
  %3211 = bitcast i8* %3210 to <64 x i8>*
  %3212 = load <64 x i8>, <64 x i8>* %3211, align 1, !tbaa !102
  %3213 = zext <64 x i8> %3212 to <64 x i16>
  %3214 = bitcast <64 x i16> %3213 to <32 x i32>
  %3215 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3214, <32 x i32> %3053) #11
  %3216 = add nsw i32 %3207, %3144
  %3217 = shl nsw i32 %3216, 7
  %3218 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3217
  %3219 = bitcast i16* %3218 to <32 x i32>*
  store <32 x i32> %3215, <32 x i32>* %3219, align 128, !tbaa !105
  %3220 = getelementptr inbounds i8, i8* %3210, i32 64
  %3221 = bitcast i8* %3220 to <64 x i8>*
  %3222 = load <64 x i8>, <64 x i8>* %3221, align 1, !tbaa !102
  %3223 = zext <64 x i8> %3222 to <64 x i16>
  %3224 = bitcast <64 x i16> %3223 to <32 x i32>
  %3225 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3224, <32 x i32> %3053) #11
  %3226 = getelementptr inbounds i16, i16* %3218, i32 64
  %3227 = bitcast i16* %3226 to <32 x i32>*
  store <32 x i32> %3225, <32 x i32>* %3227, align 128, !tbaa !105
  %3228 = add nuw nsw i32 %filter_zeroed.s0.x43.us, 4
  %niter2518.nsub.3 = add i32 %niter2518, -4
  %niter2518.ncmp.3 = icmp eq i32 %niter2518.nsub.3, 0
  br i1 %niter2518.ncmp.3, label %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x41.us"

"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x41.us", %"for filter_zeroed.s0.y38.us"
  %filter_zeroed.s0.x43.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y38.us" ], [ %3228, %"for filter_zeroed.s0.x41.us" ]
  br i1 %lcmp.mod2516.not, label %"end for filter_zeroed.s0.x42.loopexit.us", label %"for filter_zeroed.s0.x41.us.epil"

"for filter_zeroed.s0.x41.us.epil":               ; preds = %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x41.us.epil"
  %filter_zeroed.s0.x43.us.epil = phi i32 [ %3249, %"for filter_zeroed.s0.x41.us.epil" ], [ %filter_zeroed.s0.x43.us.unr, %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa" ]
  %epil.iter2515 = phi i32 [ %epil.iter2515.sub, %"for filter_zeroed.s0.x41.us.epil" ], [ %xtraiter2514, %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa" ]
  %3229 = mul nsw i32 %filter_zeroed.s0.x43.us.epil, %5
  %3230 = add nsw i32 %3143, %3229
  %3231 = getelementptr inbounds i8, i8* %1, i32 %3230
  %3232 = bitcast i8* %3231 to <64 x i8>*
  %3233 = load <64 x i8>, <64 x i8>* %3232, align 1, !tbaa !102
  %3234 = zext <64 x i8> %3233 to <64 x i16>
  %3235 = bitcast <64 x i16> %3234 to <32 x i32>
  %3236 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3235, <32 x i32> %3053) #11
  %3237 = add nsw i32 %filter_zeroed.s0.x43.us.epil, %3144
  %3238 = shl nsw i32 %3237, 7
  %3239 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3238
  %3240 = bitcast i16* %3239 to <32 x i32>*
  store <32 x i32> %3236, <32 x i32>* %3240, align 128, !tbaa !105
  %3241 = getelementptr inbounds i8, i8* %3231, i32 64
  %3242 = bitcast i8* %3241 to <64 x i8>*
  %3243 = load <64 x i8>, <64 x i8>* %3242, align 1, !tbaa !102
  %3244 = zext <64 x i8> %3243 to <64 x i16>
  %3245 = bitcast <64 x i16> %3244 to <32 x i32>
  %3246 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3245, <32 x i32> %3053) #11
  %3247 = getelementptr inbounds i16, i16* %3239, i32 64
  %3248 = bitcast i16* %3247 to <32 x i32>*
  store <32 x i32> %3246, <32 x i32>* %3248, align 128, !tbaa !105
  %3249 = add nuw nsw i32 %filter_zeroed.s0.x43.us.epil, 1
  %epil.iter2515.sub = add i32 %epil.iter2515, -1
  %epil.iter2515.cmp.not = icmp eq i32 %epil.iter2515.sub, 0
  br i1 %epil.iter2515.cmp.not, label %"end for filter_zeroed.s0.x42.loopexit.us", label %"for filter_zeroed.s0.x41.us.epil", !llvm.loop !219

"end for filter_zeroed.s0.x42.loopexit.us":       ; preds = %"for filter_zeroed.s0.x41.us.epil", %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa"
  %3250 = add nuw nsw i32 %filter_zeroed.s0.y40.us, 1
  %.not1848.us = icmp eq i32 %3250, %6
  br i1 %.not1848.us, label %"for sum_filter.s1.r19$y48.preheader", label %"for filter_zeroed.s0.y38.us"

"for sum_filter.s1.r19$y48.preheader":            ; preds = %"end for filter_zeroed.s0.x42.loopexit.us"
  %3251 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %3251, <32 x i32>* %3054, align 128, !tbaa !131
  %3252 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %3252, <32 x i32>* %3056, align 128, !tbaa !139
  store <32 x i32> %3251, <32 x i32>* %3058, align 128, !tbaa !141
  store <32 x i32> %3252, <32 x i32>* %3060, align 128, !tbaa !144
  br i1 %3043, label %"for sum_filter.s1.r19$y48.us", label %"consume sum_filter54", !prof !101

"for sum_filter.s1.r19$y48.us":                   ; preds = %"for sum_filter.s1.r19$y48.preheader", %"end for sum_filter.s1.r19$x52.loopexit.us"
  %.lcssa2176.us2183 = phi <32 x i32> [ %.lcssa2475, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %3252, %"for sum_filter.s1.r19$y48.preheader" ]
  %.lcssa2174.us2181 = phi <32 x i32> [ %.lcssa2476, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %3251, %"for sum_filter.s1.r19$y48.preheader" ]
  %.lcssa2172.us2179 = phi <32 x i32> [ %.lcssa2477, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %3252, %"for sum_filter.s1.r19$y48.preheader" ]
  %.lcssa2170.us2177 = phi <32 x i32> [ %.lcssa2478, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %3251, %"for sum_filter.s1.r19$y48.preheader" ]
  %"sum_filter.s1.r19$y50.us" = phi i32 [ %3357, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y48.preheader" ]
  %3253 = mul nsw i32 %"sum_filter.s1.r19$y50.us", %4
  br i1 %3127, label %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x51.us"

"for sum_filter.s1.r19$x51.us":                   ; preds = %"for sum_filter.s1.r19$y48.us", %"for sum_filter.s1.r19$x51.us"
  %3254 = phi <32 x i32> [ %3332, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2176.us2183, %"for sum_filter.s1.r19$y48.us" ]
  %3255 = phi <32 x i32> [ %3331, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2174.us2181, %"for sum_filter.s1.r19$y48.us" ]
  %3256 = phi <32 x i32> [ %3324, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2172.us2179, %"for sum_filter.s1.r19$y48.us" ]
  %3257 = phi <32 x i32> [ %3323, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2170.us2177, %"for sum_filter.s1.r19$y48.us" ]
  %"sum_filter.s1.r19$x53.us" = phi i32 [ %3333, %"for sum_filter.s1.r19$x51.us" ], [ 0, %"for sum_filter.s1.r19$y48.us" ]
  %niter2530 = phi i32 [ %niter2530.nsub.3, %"for sum_filter.s1.r19$x51.us" ], [ %unroll_iter2529, %"for sum_filter.s1.r19$y48.us" ]
  %3258 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3256, <32 x i32> %3257)
  %3259 = add nsw i32 %"sum_filter.s1.r19$x53.us", %3253
  %3260 = shl nsw i32 %3259, 7
  %3261 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3260
  %3262 = bitcast i16* %3261 to <32 x i32>*
  %3263 = load <32 x i32>, <32 x i32>* %3262, align 128, !tbaa !105
  %3264 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3263) #11
  %3265 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3264, <64 x i32> %3258) #11
  %3266 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3265)
  %3267 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3265)
  %3268 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3254, <32 x i32> %3255)
  %3269 = getelementptr inbounds i16, i16* %3261, i32 64
  %3270 = bitcast i16* %3269 to <32 x i32>*
  %3271 = load <32 x i32>, <32 x i32>* %3270, align 128, !tbaa !105
  %3272 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3271) #11
  %3273 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3272, <64 x i32> %3268) #11
  %3274 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3273)
  %3275 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3273)
  %3276 = or i32 %"sum_filter.s1.r19$x53.us", 1
  %3277 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3267, <32 x i32> %3266)
  %3278 = add nsw i32 %3276, %3253
  %3279 = shl nsw i32 %3278, 7
  %3280 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3279
  %3281 = bitcast i16* %3280 to <32 x i32>*
  %3282 = load <32 x i32>, <32 x i32>* %3281, align 128, !tbaa !105
  %3283 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3282) #11
  %3284 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3283, <64 x i32> %3277) #11
  %3285 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3284)
  %3286 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3284)
  %3287 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3275, <32 x i32> %3274)
  %3288 = getelementptr inbounds i16, i16* %3280, i32 64
  %3289 = bitcast i16* %3288 to <32 x i32>*
  %3290 = load <32 x i32>, <32 x i32>* %3289, align 128, !tbaa !105
  %3291 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3290) #11
  %3292 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3291, <64 x i32> %3287) #11
  %3293 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3292)
  %3294 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3292)
  %3295 = or i32 %"sum_filter.s1.r19$x53.us", 2
  %3296 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3286, <32 x i32> %3285)
  %3297 = add nsw i32 %3295, %3253
  %3298 = shl nsw i32 %3297, 7
  %3299 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3298
  %3300 = bitcast i16* %3299 to <32 x i32>*
  %3301 = load <32 x i32>, <32 x i32>* %3300, align 128, !tbaa !105
  %3302 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3301) #11
  %3303 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3302, <64 x i32> %3296) #11
  %3304 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3303)
  %3305 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3303)
  %3306 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3294, <32 x i32> %3293)
  %3307 = getelementptr inbounds i16, i16* %3299, i32 64
  %3308 = bitcast i16* %3307 to <32 x i32>*
  %3309 = load <32 x i32>, <32 x i32>* %3308, align 128, !tbaa !105
  %3310 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3309) #11
  %3311 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3310, <64 x i32> %3306) #11
  %3312 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3311)
  %3313 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3311)
  %3314 = or i32 %"sum_filter.s1.r19$x53.us", 3
  %3315 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3305, <32 x i32> %3304)
  %3316 = add nsw i32 %3314, %3253
  %3317 = shl nsw i32 %3316, 7
  %3318 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3317
  %3319 = bitcast i16* %3318 to <32 x i32>*
  %3320 = load <32 x i32>, <32 x i32>* %3319, align 128, !tbaa !105
  %3321 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3320) #11
  %3322 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3321, <64 x i32> %3315) #11
  %3323 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3322)
  %3324 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3322)
  %3325 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3313, <32 x i32> %3312)
  %3326 = getelementptr inbounds i16, i16* %3318, i32 64
  %3327 = bitcast i16* %3326 to <32 x i32>*
  %3328 = load <32 x i32>, <32 x i32>* %3327, align 128, !tbaa !105
  %3329 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3328) #11
  %3330 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3329, <64 x i32> %3325) #11
  %3331 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3330)
  %3332 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3330)
  %3333 = add nuw nsw i32 %"sum_filter.s1.r19$x53.us", 4
  %niter2530.nsub.3 = add i32 %niter2530, -4
  %niter2530.ncmp.3 = icmp eq i32 %niter2530.nsub.3, 0
  br i1 %niter2530.ncmp.3, label %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x51.us"

"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x51.us", %"for sum_filter.s1.r19$y48.us"
  %.lcssa2478.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %3323, %"for sum_filter.s1.r19$x51.us" ]
  %.lcssa2477.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %3324, %"for sum_filter.s1.r19$x51.us" ]
  %.lcssa2476.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %3331, %"for sum_filter.s1.r19$x51.us" ]
  %.lcssa2475.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %3332, %"for sum_filter.s1.r19$x51.us" ]
  %.unr = phi <32 x i32> [ %.lcssa2176.us2183, %"for sum_filter.s1.r19$y48.us" ], [ %3332, %"for sum_filter.s1.r19$x51.us" ]
  %.unr2521 = phi <32 x i32> [ %.lcssa2174.us2181, %"for sum_filter.s1.r19$y48.us" ], [ %3331, %"for sum_filter.s1.r19$x51.us" ]
  %.unr2522 = phi <32 x i32> [ %.lcssa2172.us2179, %"for sum_filter.s1.r19$y48.us" ], [ %3324, %"for sum_filter.s1.r19$x51.us" ]
  %.unr2523 = phi <32 x i32> [ %.lcssa2170.us2177, %"for sum_filter.s1.r19$y48.us" ], [ %3323, %"for sum_filter.s1.r19$x51.us" ]
  %"sum_filter.s1.r19$x53.us.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y48.us" ], [ %3333, %"for sum_filter.s1.r19$x51.us" ]
  br i1 %lcmp.mod2524.not, label %"end for sum_filter.s1.r19$x52.loopexit.us", label %"for sum_filter.s1.r19$x51.us.epil"

"for sum_filter.s1.r19$x51.us.epil":              ; preds = %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x51.us.epil"
  %3334 = phi <32 x i32> [ %3355, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3335 = phi <32 x i32> [ %3354, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr2521, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3336 = phi <32 x i32> [ %3347, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr2522, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3337 = phi <32 x i32> [ %3346, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr2523, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %"sum_filter.s1.r19$x53.us.epil" = phi i32 [ %3356, %"for sum_filter.s1.r19$x51.us.epil" ], [ %"sum_filter.s1.r19$x53.us.unr", %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %epil.iter2520 = phi i32 [ %epil.iter2520.sub, %"for sum_filter.s1.r19$x51.us.epil" ], [ %xtraiter2519, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3338 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3336, <32 x i32> %3337)
  %3339 = add nsw i32 %"sum_filter.s1.r19$x53.us.epil", %3253
  %3340 = shl nsw i32 %3339, 7
  %3341 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3340
  %3342 = bitcast i16* %3341 to <32 x i32>*
  %3343 = load <32 x i32>, <32 x i32>* %3342, align 128, !tbaa !105
  %3344 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3343) #11
  %3345 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3344, <64 x i32> %3338) #11
  %3346 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3345)
  %3347 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3345)
  %3348 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3334, <32 x i32> %3335)
  %3349 = getelementptr inbounds i16, i16* %3341, i32 64
  %3350 = bitcast i16* %3349 to <32 x i32>*
  %3351 = load <32 x i32>, <32 x i32>* %3350, align 128, !tbaa !105
  %3352 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3351) #11
  %3353 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3352, <64 x i32> %3348) #11
  %3354 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3353)
  %3355 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3353)
  %3356 = add nuw nsw i32 %"sum_filter.s1.r19$x53.us.epil", 1
  %epil.iter2520.sub = add i32 %epil.iter2520, -1
  %epil.iter2520.cmp.not = icmp eq i32 %epil.iter2520.sub, 0
  br i1 %epil.iter2520.cmp.not, label %"end for sum_filter.s1.r19$x52.loopexit.us", label %"for sum_filter.s1.r19$x51.us.epil", !llvm.loop !220

"end for sum_filter.s1.r19$x52.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x51.us.epil", %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa"
  %.lcssa2478 = phi <32 x i32> [ %.lcssa2478.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3346, %"for sum_filter.s1.r19$x51.us.epil" ]
  %.lcssa2477 = phi <32 x i32> [ %.lcssa2477.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3347, %"for sum_filter.s1.r19$x51.us.epil" ]
  %.lcssa2476 = phi <32 x i32> [ %.lcssa2476.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3354, %"for sum_filter.s1.r19$x51.us.epil" ]
  %.lcssa2475 = phi <32 x i32> [ %.lcssa2475.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3355, %"for sum_filter.s1.r19$x51.us.epil" ]
  %3357 = add nuw nsw i32 %"sum_filter.s1.r19$y50.us", 1
  %.not1846.us = icmp eq i32 %3357, %6
  br i1 %.not1846.us, label %"consume sum_filter54.loopexit.split.us", label %"for sum_filter.s1.r19$y48.us"

"consume sum_filter54.loopexit.split.us":         ; preds = %"end for sum_filter.s1.r19$x52.loopexit.us"
  store <32 x i32> %.lcssa2478, <32 x i32>* %3054, align 128, !tbaa !131
  br label %"consume sum_filter54.sink.split"

"consume sum_filter54.critedge":                  ; preds = %"produce filter_zeroed37"
  %3358 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %3358, <32 x i32>* %3054, align 128, !tbaa !131
  %3359 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"consume sum_filter54.sink.split"

"consume sum_filter54.sink.split":                ; preds = %"consume sum_filter54.critedge", %"consume sum_filter54.loopexit.split.us", %"for sum_filter.s1.r19$y48.preheader.thread"
  %.sink2452 = phi <32 x i32> [ %3141, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2477, %"consume sum_filter54.loopexit.split.us" ], [ %3359, %"consume sum_filter54.critedge" ]
  %.sink2451 = phi <32 x i32> [ %3140, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2476, %"consume sum_filter54.loopexit.split.us" ], [ %3358, %"consume sum_filter54.critedge" ]
  %.sink = phi <32 x i32> [ %3141, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2475, %"consume sum_filter54.loopexit.split.us" ], [ %3359, %"consume sum_filter54.critedge" ]
  %.ph2450 = phi <32 x i32> [ %3140, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2478, %"consume sum_filter54.loopexit.split.us" ], [ %3358, %"consume sum_filter54.critedge" ]
  store <32 x i32> %.sink2452, <32 x i32>* %3056, align 128, !tbaa !139
  store <32 x i32> %.sink2451, <32 x i32>* %3058, align 128, !tbaa !141
  store <32 x i32> %.sink, <32 x i32>* %3060, align 128, !tbaa !144
  br label %"consume sum_filter54"

"consume sum_filter54":                           ; preds = %"consume sum_filter54.sink.split", %"for sum_filter.s1.r19$y48.preheader"
  %3360 = phi <32 x i32> [ %3252, %"for sum_filter.s1.r19$y48.preheader" ], [ %.sink, %"consume sum_filter54.sink.split" ]
  %3361 = phi <32 x i32> [ %3251, %"for sum_filter.s1.r19$y48.preheader" ], [ %.sink2451, %"consume sum_filter54.sink.split" ]
  %3362 = phi <32 x i32> [ %3252, %"for sum_filter.s1.r19$y48.preheader" ], [ %.sink2452, %"consume sum_filter54.sink.split" ]
  %3363 = phi <32 x i32> [ %3251, %"for sum_filter.s1.r19$y48.preheader" ], [ %.ph2450, %"consume sum_filter54.sink.split" ]
  %3364 = getelementptr inbounds i32, i32* %3061, i32 %output.s0.c.c.base33
  %3365 = bitcast i32* %3364 to <32 x i32>*
  %3366 = load <32 x i32>, <32 x i32>* %3365, align 4, !tbaa !109
  %3367 = getelementptr inbounds i32, i32* %3364, i32 32
  %3368 = bitcast i32* %3367 to <32 x i32>*
  %3369 = load <32 x i32>, <32 x i32>* %3368, align 4, !tbaa !109
  %3370 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3369, <32 x i32> %3366)
  %3371 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3064, <32 x i32> %3363) #11
  %3372 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3371, <32 x i32> %3064, <32 x i32> %3363) #11
  %3373 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3064, <32 x i32> %3362) #11
  %3374 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3373, <32 x i32> %3064, <32 x i32> %3362) #11
  %3375 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3372, <32 x i32> %3374) #11
  %3376 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3370, <64 x i32> %3375) #11
  %3377 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3376)
  %3378 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3376)
  %3379 = getelementptr inbounds i32, i32* %3364, i32 64
  %3380 = bitcast i32* %3379 to <32 x i32>*
  %3381 = load <32 x i32>, <32 x i32>* %3380, align 4, !tbaa !109
  %3382 = getelementptr inbounds i32, i32* %3364, i32 96
  %3383 = bitcast i32* %3382 to <32 x i32>*
  %3384 = load <32 x i32>, <32 x i32>* %3383, align 4, !tbaa !109
  %3385 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3384, <32 x i32> %3381)
  %3386 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3064, <32 x i32> %3361) #11
  %3387 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3386, <32 x i32> %3064, <32 x i32> %3361) #11
  %3388 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3064, <32 x i32> %3360) #11
  %3389 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3388, <32 x i32> %3064, <32 x i32> %3360) #11
  %3390 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3387, <32 x i32> %3389) #11
  %3391 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3385, <64 x i32> %3390) #11
  %3392 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3391)
  %3393 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3391)
  br i1 %3079, label %"for output.s0.b.rebased57.preheader", label %"end for output.s0.b.rebased58", !prof !101

"for output.s0.b.rebased57.preheader":            ; preds = %"consume sum_filter54"
  %3394 = add nsw i32 %output.s0.c.c.base33, 64
  %3395 = sub i32 %output.s0.c.c.base33, %t2326
  %3396 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 768
  %3397 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1024
  %3398 = bitcast i16* %3397 to <32 x i16>*
  %3399 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1056
  %3400 = bitcast i16* %3399 to <32 x i16>*
  %3401 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 896
  %3402 = bitcast i16* %3401 to <32 x i16>*
  %3403 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 928
  %3404 = bitcast i16* %3403 to <32 x i16>*
  %3405 = bitcast i16* %3396 to <32 x i16>*
  %3406 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 800
  %3407 = bitcast i16* %3406 to <32 x i16>*
  %3408 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 384
  %3409 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 640
  %3410 = bitcast i16* %3409 to <32 x i16>*
  %3411 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 672
  %3412 = bitcast i16* %3411 to <32 x i16>*
  %3413 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 512
  %3414 = bitcast i16* %3413 to <32 x i16>*
  %3415 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 544
  %3416 = bitcast i16* %3415 to <32 x i16>*
  %3417 = bitcast i16* %3408 to <32 x i16>*
  %3418 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 416
  %3419 = bitcast i16* %3418 to <32 x i16>*
  %3420 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 256
  %3421 = bitcast i16* %3420 to <32 x i16>*
  %3422 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 288
  %3423 = bitcast i16* %3422 to <32 x i16>*
  %3424 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 128
  %3425 = bitcast i16* %3424 to <32 x i16>*
  %3426 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 160
  %3427 = bitcast i16* %3426 to <32 x i16>*
  %3428 = bitcast i16* %filter_zeroed36 to <32 x i16>*
  %3429 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 32
  %3430 = bitcast i16* %3429 to <32 x i16>*
  %3431 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1088
  %3432 = bitcast i16* %3431 to <32 x i16>*
  %3433 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1120
  %3434 = bitcast i16* %3433 to <32 x i16>*
  %3435 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 960
  %3436 = bitcast i16* %3435 to <32 x i16>*
  %3437 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 992
  %3438 = bitcast i16* %3437 to <32 x i16>*
  %3439 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 832
  %3440 = bitcast i16* %3439 to <32 x i16>*
  %3441 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 864
  %3442 = bitcast i16* %3441 to <32 x i16>*
  %3443 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 704
  %3444 = bitcast i16* %3443 to <32 x i16>*
  %3445 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 736
  %3446 = bitcast i16* %3445 to <32 x i16>*
  %3447 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 576
  %3448 = bitcast i16* %3447 to <32 x i16>*
  %3449 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 608
  %3450 = bitcast i16* %3449 to <32 x i16>*
  %3451 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 448
  %3452 = bitcast i16* %3451 to <32 x i16>*
  %3453 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 480
  %3454 = bitcast i16* %3453 to <32 x i16>*
  %3455 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 320
  %3456 = bitcast i16* %3455 to <32 x i16>*
  %3457 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 352
  %3458 = bitcast i16* %3457 to <32 x i16>*
  %3459 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 192
  %3460 = bitcast i16* %3459 to <32 x i16>*
  %3461 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 224
  %3462 = bitcast i16* %3461 to <32 x i16>*
  %3463 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 64
  %3464 = bitcast i16* %3463 to <32 x i16>*
  %3465 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 96
  %3466 = bitcast i16* %3465 to <32 x i16>*
  %3467 = sub i32 %output.s0.c.c.base33, %reass.add2129
  br label %"for output.s0.b.rebased57"

"for output.s0.b.rebased57":                      ; preds = %"for output.s0.b.rebased57.preheader", %"end for output.s0.y.yo93"
  %output.s0.b.rebased59 = phi i32 [ %4081, %"end for output.s0.y.yo93" ], [ 0, %"for output.s0.b.rebased57.preheader" ]
  %3468 = load i32, i32* %.fca.1.gep1779, align 4, !tbaa !98
  %cmp.i1976 = icmp ult i32 %3468, %3085
  %3469 = load i8*, i8** %.fca.0.gep1778, align 4, !tbaa !95
  br i1 %cmp.i1976, label %if.then.i1979, label %pseudostack_alloc.exit1992, !prof !99

if.then.i1979:                                    ; preds = %"for output.s0.b.rebased57"
  %tobool1.not.i1978 = icmp ne i8* %3469, null
  %3470 = load i32, i32* %.fca.2.gep1780, align 4
  %cmp2.i1981 = icmp ugt i32 %3470, 16384
  %or.cond2117 = and i1 %tobool1.not.i1978, %cmp2.i1981
  br i1 %or.cond2117, label %if.then3.i1983, label %if.end.i1987

if.then3.i1983:                                   ; preds = %if.then.i1979
  call void @halide_free(i8* null, i8* nonnull %3469) #15
  %.pre2342 = load i32, i32* %.fca.2.gep1780, align 4, !tbaa !97
  br label %if.end.i1987

if.end.i1987:                                     ; preds = %if.then3.i1983, %if.then.i1979
  %3471 = phi i32 [ %.pre2342, %if.then3.i1983 ], [ %3470, %if.then.i1979 ]
  %add.i1985 = add i32 %3471, %3085
  store i32 %add.i1985, i32* %.fca.2.gep1780, align 4, !tbaa !97
  %cmp7.i1986 = icmp ugt i32 %add.i1985, 16384
  br i1 %cmp7.i1986, label %if.then8.i1989, label %if.end11.i1991

if.then8.i1989:                                   ; preds = %if.end.i1987
  %call.i1988 = call i8* @halide_malloc(i8* null, i32 %3085) #15
  br label %if.end11.i1991

if.end11.i1991:                                   ; preds = %if.then8.i1989, %if.end.i1987
  %storemerge.i1990 = phi i8* [ %call.i1988, %if.then8.i1989 ], [ null, %if.end.i1987 ]
  store i8* %storemerge.i1990, i8** %.fca.0.gep1778, align 4, !tbaa !95
  store i32 %3085, i32* %.fca.1.gep1779, align 4, !tbaa !98
  br label %pseudostack_alloc.exit1992

pseudostack_alloc.exit1992:                       ; preds = %"for output.s0.b.rebased57", %if.end11.i1991
  %3472 = phi i8* [ %storemerge.i1990, %if.end11.i1991 ], [ %3469, %"for output.s0.b.rebased57" ]
  %.not1836 = icmp eq i8* %3472, null
  br i1 %.not1836, label %then_bb61, label %"produce resampled_input63", !prof !100

"end for output.s0.b.rebased58":                  ; preds = %"end for output.s0.y.yo93", %"consume sum_filter54"
  %.4 = phi i8* [ %.3, %"consume sum_filter54" ], [ %3124, %"end for output.s0.y.yo93" ]
  %3473 = add nuw nsw i32 %output.s0.c.co32, 1
  %.not1835 = icmp eq i32 %3473, %3042
  br i1 %.not1835, label %after_bb, label %"for output.s0.c.co30"

then_bb61:                                        ; preds = %pseudostack_alloc.exit1992
  %3474 = alloca i8*, i32 %3085, align 128
  %3475 = bitcast i8** %3474 to i8*
  store i8** %3474, i8*** %3086, align 4
  br label %"produce resampled_input63"

"produce resampled_input63":                      ; preds = %pseudostack_alloc.exit1992, %then_bb61
  %resampled_input62 = phi i8* [ %3475, %then_bb61 ], [ %3472, %pseudostack_alloc.exit1992 ]
  br i1 %t2325, label %then_bb65, label %next_bb66

then_bb65:                                        ; preds = %"produce resampled_input63"
  %3476 = add nsw i32 %output.s0.b.rebased59, %14
  %3477 = mul nsw i32 %3476, %16
  %t2358 = add nsw i32 %3395, %3477
  br i1 %3129, label %"consume resampled_input91", label %"for resampled_input.s0.y.rebased67.us", !prof !126

"for resampled_input.s0.y.rebased67.us":          ; preds = %then_bb65, %"end for resampled_input.s0.x.rebased71.loopexit.us"
  %resampled_input.s0.y.rebased69.us = phi i32 [ %3494, %"end for resampled_input.s0.x.rebased71.loopexit.us" ], [ 0, %then_bb65 ]
  %3478 = add nsw i32 %3088, %resampled_input.s0.y.rebased69.us
  %3479 = mul nsw i32 %3478, %3089
  %t2362.us = add nsw i32 %3090, %3479
  %3480 = add nsw i32 %resampled_input.s0.y.rebased69.us, %a427
  %3481 = mul nsw i32 %3480, %13
  %3482 = add nsw i32 %t2358, %3481
  br label %"for resampled_input.s0.x.rebased70.us"

"for resampled_input.s0.x.rebased70.us":          ; preds = %"for resampled_input.s0.y.rebased67.us", %"for resampled_input.s0.x.rebased70.us"
  %resampled_input.s0.x.rebased72.us = phi i32 [ %3493, %"for resampled_input.s0.x.rebased70.us" ], [ 0, %"for resampled_input.s0.y.rebased67.us" ]
  %3483 = add nsw i32 %resampled_input.s0.x.rebased72.us, %a426
  %3484 = mul nsw i32 %3483, %11
  %3485 = add nsw i32 %3482, %3484
  %3486 = getelementptr inbounds i8, i8* %8, i32 %3485
  %3487 = bitcast i8* %3486 to <128 x i8>*
  %3488 = load <128 x i8>, <128 x i8>* %3487, align 1, !tbaa !127
  %3489 = add nsw i32 %t2362.us, %resampled_input.s0.x.rebased72.us
  %3490 = shl nsw i32 %3489, 7
  %3491 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3490
  %3492 = bitcast i8* %3491 to <128 x i8>*
  store <128 x i8> %3488, <128 x i8>* %3492, align 128, !tbaa !129
  %3493 = add nuw nsw i32 %resampled_input.s0.x.rebased72.us, 1
  %.not1845.us = icmp eq i32 %resampled_input.s0.x.rebased72.us, %t2351
  br i1 %.not1845.us, label %"end for resampled_input.s0.x.rebased71.loopexit.us", label %"for resampled_input.s0.x.rebased70.us"

"end for resampled_input.s0.x.rebased71.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased70.us"
  %3494 = add nuw nsw i32 %resampled_input.s0.y.rebased69.us, 1
  %.not1844.us = icmp eq i32 %resampled_input.s0.y.rebased69.us, %t2350
  br i1 %.not1844.us, label %"consume resampled_input91", label %"for resampled_input.s0.y.rebased67.us"

next_bb66:                                        ; preds = %"produce resampled_input63"
  br i1 %3087, label %"for resampled_input.s0.y.rebased73.preheader", label %"consume resampled_input91", !prof !101

"for resampled_input.s0.y.rebased73.preheader":   ; preds = %next_bb66
  %3495 = add nsw i32 %output.s0.b.rebased59, %14
  %3496 = mul nsw i32 %3495, %16
  %3497 = sub i32 %3496, %t2326
  br i1 %3091, label %"for resampled_input.s0.y.rebased73.preheader.split.us", label %"consume resampled_input91", !prof !101

"for resampled_input.s0.y.rebased73.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased73.preheader"
  %3498 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output.s0.c.c.base33) #11
  %3499 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3498, <32 x i32> %3498) #11
  %3500 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> zeroinitializer, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>) #11
  %3501 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3499, <64 x i32> %3500) #11
  %3502 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %depth_multiplier) #11
  %3503 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3502, <32 x i32> %3502) #11
  %3504 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3503, <64 x i32> %3093) #11
  %3505 = sdiv <64 x i32> %3501, %3504
  %3506 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %3507 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3095) #11
  %3508 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3506, <32 x i32> %3507) #11
  %3509 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %3510 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3509, <32 x i32> %3507) #11
  %3511 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3508, <32 x i32> %3510) #11
  %3512 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3511, <64 x i32> %3505) #11
  %3513 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3512) #11
  %3514 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3093) #11
  %3515 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %3514) #11
  %3516 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3093) #11
  %3517 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %3516) #11
  %3518 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3515, <32 x i32> %3517) #11
  %3519 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3518) #11
  %3520 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3513, <32 x i32> %3519) #11
  %3521 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3512) #11
  %3522 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3518) #11
  %3523 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3521, <32 x i32> %3522) #11
  %3524 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3520, <32 x i32> %3523) #11
  %3525 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3394) #11
  %3526 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3525, <32 x i32> %3525) #11
  %3527 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3526, <64 x i32> %3500) #11
  %3528 = sdiv <64 x i32> %3527, %3504
  %3529 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3511, <64 x i32> %3528) #11
  %3530 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3529) #11
  %3531 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3530, <32 x i32> %3519) #11
  %3532 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3529) #11
  %3533 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3532, <32 x i32> %3522) #11
  %3534 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3531, <32 x i32> %3533) #11
  br label %"for resampled_input.s0.y.rebased73.us"

"for resampled_input.s0.y.rebased73.us":          ; preds = %"end for resampled_input.s0.x.rebased77.loopexit.us", %"for resampled_input.s0.y.rebased73.preheader.split.us"
  %resampled_input.s0.y.rebased75.us = phi i32 [ %4065, %"end for resampled_input.s0.x.rebased77.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased73.preheader.split.us" ]
  %3535 = add nsw i32 %3088, %resampled_input.s0.y.rebased75.us
  %3536 = mul nsw i32 %3535, %3089
  %t2367.us = add nsw i32 %3090, %3536
  %3537 = add nsw i32 %resampled_input.s0.y.rebased75.us, %a427
  %3538 = mul nsw i32 %3537, %13
  %t2366.us = add nsw i32 %3497, %3538
  br label %"for resampled_input.s0.x.rebased76.us"

"for resampled_input.s0.x.rebased76.us":          ; preds = %"for resampled_input.s0.y.rebased73.us", %"for resampled_input.s0.x.rebased76.us"
  %resampled_input.s0.x.rebased78.us = phi i32 [ %4064, %"for resampled_input.s0.x.rebased76.us" ], [ 0, %"for resampled_input.s0.y.rebased73.us" ]
  %3539 = add nsw i32 %resampled_input.s0.x.rebased78.us, %a426
  %3540 = mul nsw i32 %3539, %11
  %3541 = add nsw i32 %t2366.us, %3540
  %3542 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3541) #11
  %3543 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3542, <32 x i32> %3542) #11
  %3544 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3543, <64 x i32> %3524) #11
  %3545 = extractelement <64 x i32> %3544, i32 0
  %3546 = getelementptr inbounds i8, i8* %8, i32 %3545
  %3547 = load i8, i8* %3546, align 1, !tbaa !127
  %3548 = insertelement <64 x i8> undef, i8 %3547, i32 0
  %3549 = extractelement <64 x i32> %3544, i32 1
  %3550 = getelementptr inbounds i8, i8* %8, i32 %3549
  %3551 = load i8, i8* %3550, align 1, !tbaa !127
  %3552 = insertelement <64 x i8> %3548, i8 %3551, i32 1
  %3553 = extractelement <64 x i32> %3544, i32 2
  %3554 = getelementptr inbounds i8, i8* %8, i32 %3553
  %3555 = load i8, i8* %3554, align 1, !tbaa !127
  %3556 = insertelement <64 x i8> %3552, i8 %3555, i32 2
  %3557 = extractelement <64 x i32> %3544, i32 3
  %3558 = getelementptr inbounds i8, i8* %8, i32 %3557
  %3559 = load i8, i8* %3558, align 1, !tbaa !127
  %3560 = insertelement <64 x i8> %3556, i8 %3559, i32 3
  %3561 = extractelement <64 x i32> %3544, i32 4
  %3562 = getelementptr inbounds i8, i8* %8, i32 %3561
  %3563 = load i8, i8* %3562, align 1, !tbaa !127
  %3564 = insertelement <64 x i8> %3560, i8 %3563, i32 4
  %3565 = extractelement <64 x i32> %3544, i32 5
  %3566 = getelementptr inbounds i8, i8* %8, i32 %3565
  %3567 = load i8, i8* %3566, align 1, !tbaa !127
  %3568 = insertelement <64 x i8> %3564, i8 %3567, i32 5
  %3569 = extractelement <64 x i32> %3544, i32 6
  %3570 = getelementptr inbounds i8, i8* %8, i32 %3569
  %3571 = load i8, i8* %3570, align 1, !tbaa !127
  %3572 = insertelement <64 x i8> %3568, i8 %3571, i32 6
  %3573 = extractelement <64 x i32> %3544, i32 7
  %3574 = getelementptr inbounds i8, i8* %8, i32 %3573
  %3575 = load i8, i8* %3574, align 1, !tbaa !127
  %3576 = insertelement <64 x i8> %3572, i8 %3575, i32 7
  %3577 = extractelement <64 x i32> %3544, i32 8
  %3578 = getelementptr inbounds i8, i8* %8, i32 %3577
  %3579 = load i8, i8* %3578, align 1, !tbaa !127
  %3580 = insertelement <64 x i8> %3576, i8 %3579, i32 8
  %3581 = extractelement <64 x i32> %3544, i32 9
  %3582 = getelementptr inbounds i8, i8* %8, i32 %3581
  %3583 = load i8, i8* %3582, align 1, !tbaa !127
  %3584 = insertelement <64 x i8> %3580, i8 %3583, i32 9
  %3585 = extractelement <64 x i32> %3544, i32 10
  %3586 = getelementptr inbounds i8, i8* %8, i32 %3585
  %3587 = load i8, i8* %3586, align 1, !tbaa !127
  %3588 = insertelement <64 x i8> %3584, i8 %3587, i32 10
  %3589 = extractelement <64 x i32> %3544, i32 11
  %3590 = getelementptr inbounds i8, i8* %8, i32 %3589
  %3591 = load i8, i8* %3590, align 1, !tbaa !127
  %3592 = insertelement <64 x i8> %3588, i8 %3591, i32 11
  %3593 = extractelement <64 x i32> %3544, i32 12
  %3594 = getelementptr inbounds i8, i8* %8, i32 %3593
  %3595 = load i8, i8* %3594, align 1, !tbaa !127
  %3596 = insertelement <64 x i8> %3592, i8 %3595, i32 12
  %3597 = extractelement <64 x i32> %3544, i32 13
  %3598 = getelementptr inbounds i8, i8* %8, i32 %3597
  %3599 = load i8, i8* %3598, align 1, !tbaa !127
  %3600 = insertelement <64 x i8> %3596, i8 %3599, i32 13
  %3601 = extractelement <64 x i32> %3544, i32 14
  %3602 = getelementptr inbounds i8, i8* %8, i32 %3601
  %3603 = load i8, i8* %3602, align 1, !tbaa !127
  %3604 = insertelement <64 x i8> %3600, i8 %3603, i32 14
  %3605 = extractelement <64 x i32> %3544, i32 15
  %3606 = getelementptr inbounds i8, i8* %8, i32 %3605
  %3607 = load i8, i8* %3606, align 1, !tbaa !127
  %3608 = insertelement <64 x i8> %3604, i8 %3607, i32 15
  %3609 = extractelement <64 x i32> %3544, i32 16
  %3610 = getelementptr inbounds i8, i8* %8, i32 %3609
  %3611 = load i8, i8* %3610, align 1, !tbaa !127
  %3612 = insertelement <64 x i8> %3608, i8 %3611, i32 16
  %3613 = extractelement <64 x i32> %3544, i32 17
  %3614 = getelementptr inbounds i8, i8* %8, i32 %3613
  %3615 = load i8, i8* %3614, align 1, !tbaa !127
  %3616 = insertelement <64 x i8> %3612, i8 %3615, i32 17
  %3617 = extractelement <64 x i32> %3544, i32 18
  %3618 = getelementptr inbounds i8, i8* %8, i32 %3617
  %3619 = load i8, i8* %3618, align 1, !tbaa !127
  %3620 = insertelement <64 x i8> %3616, i8 %3619, i32 18
  %3621 = extractelement <64 x i32> %3544, i32 19
  %3622 = getelementptr inbounds i8, i8* %8, i32 %3621
  %3623 = load i8, i8* %3622, align 1, !tbaa !127
  %3624 = insertelement <64 x i8> %3620, i8 %3623, i32 19
  %3625 = extractelement <64 x i32> %3544, i32 20
  %3626 = getelementptr inbounds i8, i8* %8, i32 %3625
  %3627 = load i8, i8* %3626, align 1, !tbaa !127
  %3628 = insertelement <64 x i8> %3624, i8 %3627, i32 20
  %3629 = extractelement <64 x i32> %3544, i32 21
  %3630 = getelementptr inbounds i8, i8* %8, i32 %3629
  %3631 = load i8, i8* %3630, align 1, !tbaa !127
  %3632 = insertelement <64 x i8> %3628, i8 %3631, i32 21
  %3633 = extractelement <64 x i32> %3544, i32 22
  %3634 = getelementptr inbounds i8, i8* %8, i32 %3633
  %3635 = load i8, i8* %3634, align 1, !tbaa !127
  %3636 = insertelement <64 x i8> %3632, i8 %3635, i32 22
  %3637 = extractelement <64 x i32> %3544, i32 23
  %3638 = getelementptr inbounds i8, i8* %8, i32 %3637
  %3639 = load i8, i8* %3638, align 1, !tbaa !127
  %3640 = insertelement <64 x i8> %3636, i8 %3639, i32 23
  %3641 = extractelement <64 x i32> %3544, i32 24
  %3642 = getelementptr inbounds i8, i8* %8, i32 %3641
  %3643 = load i8, i8* %3642, align 1, !tbaa !127
  %3644 = insertelement <64 x i8> %3640, i8 %3643, i32 24
  %3645 = extractelement <64 x i32> %3544, i32 25
  %3646 = getelementptr inbounds i8, i8* %8, i32 %3645
  %3647 = load i8, i8* %3646, align 1, !tbaa !127
  %3648 = insertelement <64 x i8> %3644, i8 %3647, i32 25
  %3649 = extractelement <64 x i32> %3544, i32 26
  %3650 = getelementptr inbounds i8, i8* %8, i32 %3649
  %3651 = load i8, i8* %3650, align 1, !tbaa !127
  %3652 = insertelement <64 x i8> %3648, i8 %3651, i32 26
  %3653 = extractelement <64 x i32> %3544, i32 27
  %3654 = getelementptr inbounds i8, i8* %8, i32 %3653
  %3655 = load i8, i8* %3654, align 1, !tbaa !127
  %3656 = insertelement <64 x i8> %3652, i8 %3655, i32 27
  %3657 = extractelement <64 x i32> %3544, i32 28
  %3658 = getelementptr inbounds i8, i8* %8, i32 %3657
  %3659 = load i8, i8* %3658, align 1, !tbaa !127
  %3660 = insertelement <64 x i8> %3656, i8 %3659, i32 28
  %3661 = extractelement <64 x i32> %3544, i32 29
  %3662 = getelementptr inbounds i8, i8* %8, i32 %3661
  %3663 = load i8, i8* %3662, align 1, !tbaa !127
  %3664 = insertelement <64 x i8> %3660, i8 %3663, i32 29
  %3665 = extractelement <64 x i32> %3544, i32 30
  %3666 = getelementptr inbounds i8, i8* %8, i32 %3665
  %3667 = load i8, i8* %3666, align 1, !tbaa !127
  %3668 = insertelement <64 x i8> %3664, i8 %3667, i32 30
  %3669 = extractelement <64 x i32> %3544, i32 31
  %3670 = getelementptr inbounds i8, i8* %8, i32 %3669
  %3671 = load i8, i8* %3670, align 1, !tbaa !127
  %3672 = insertelement <64 x i8> %3668, i8 %3671, i32 31
  %3673 = extractelement <64 x i32> %3544, i32 32
  %3674 = getelementptr inbounds i8, i8* %8, i32 %3673
  %3675 = load i8, i8* %3674, align 1, !tbaa !127
  %3676 = insertelement <64 x i8> %3672, i8 %3675, i32 32
  %3677 = extractelement <64 x i32> %3544, i32 33
  %3678 = getelementptr inbounds i8, i8* %8, i32 %3677
  %3679 = load i8, i8* %3678, align 1, !tbaa !127
  %3680 = insertelement <64 x i8> %3676, i8 %3679, i32 33
  %3681 = extractelement <64 x i32> %3544, i32 34
  %3682 = getelementptr inbounds i8, i8* %8, i32 %3681
  %3683 = load i8, i8* %3682, align 1, !tbaa !127
  %3684 = insertelement <64 x i8> %3680, i8 %3683, i32 34
  %3685 = extractelement <64 x i32> %3544, i32 35
  %3686 = getelementptr inbounds i8, i8* %8, i32 %3685
  %3687 = load i8, i8* %3686, align 1, !tbaa !127
  %3688 = insertelement <64 x i8> %3684, i8 %3687, i32 35
  %3689 = extractelement <64 x i32> %3544, i32 36
  %3690 = getelementptr inbounds i8, i8* %8, i32 %3689
  %3691 = load i8, i8* %3690, align 1, !tbaa !127
  %3692 = insertelement <64 x i8> %3688, i8 %3691, i32 36
  %3693 = extractelement <64 x i32> %3544, i32 37
  %3694 = getelementptr inbounds i8, i8* %8, i32 %3693
  %3695 = load i8, i8* %3694, align 1, !tbaa !127
  %3696 = insertelement <64 x i8> %3692, i8 %3695, i32 37
  %3697 = extractelement <64 x i32> %3544, i32 38
  %3698 = getelementptr inbounds i8, i8* %8, i32 %3697
  %3699 = load i8, i8* %3698, align 1, !tbaa !127
  %3700 = insertelement <64 x i8> %3696, i8 %3699, i32 38
  %3701 = extractelement <64 x i32> %3544, i32 39
  %3702 = getelementptr inbounds i8, i8* %8, i32 %3701
  %3703 = load i8, i8* %3702, align 1, !tbaa !127
  %3704 = insertelement <64 x i8> %3700, i8 %3703, i32 39
  %3705 = extractelement <64 x i32> %3544, i32 40
  %3706 = getelementptr inbounds i8, i8* %8, i32 %3705
  %3707 = load i8, i8* %3706, align 1, !tbaa !127
  %3708 = insertelement <64 x i8> %3704, i8 %3707, i32 40
  %3709 = extractelement <64 x i32> %3544, i32 41
  %3710 = getelementptr inbounds i8, i8* %8, i32 %3709
  %3711 = load i8, i8* %3710, align 1, !tbaa !127
  %3712 = insertelement <64 x i8> %3708, i8 %3711, i32 41
  %3713 = extractelement <64 x i32> %3544, i32 42
  %3714 = getelementptr inbounds i8, i8* %8, i32 %3713
  %3715 = load i8, i8* %3714, align 1, !tbaa !127
  %3716 = insertelement <64 x i8> %3712, i8 %3715, i32 42
  %3717 = extractelement <64 x i32> %3544, i32 43
  %3718 = getelementptr inbounds i8, i8* %8, i32 %3717
  %3719 = load i8, i8* %3718, align 1, !tbaa !127
  %3720 = insertelement <64 x i8> %3716, i8 %3719, i32 43
  %3721 = extractelement <64 x i32> %3544, i32 44
  %3722 = getelementptr inbounds i8, i8* %8, i32 %3721
  %3723 = load i8, i8* %3722, align 1, !tbaa !127
  %3724 = insertelement <64 x i8> %3720, i8 %3723, i32 44
  %3725 = extractelement <64 x i32> %3544, i32 45
  %3726 = getelementptr inbounds i8, i8* %8, i32 %3725
  %3727 = load i8, i8* %3726, align 1, !tbaa !127
  %3728 = insertelement <64 x i8> %3724, i8 %3727, i32 45
  %3729 = extractelement <64 x i32> %3544, i32 46
  %3730 = getelementptr inbounds i8, i8* %8, i32 %3729
  %3731 = load i8, i8* %3730, align 1, !tbaa !127
  %3732 = insertelement <64 x i8> %3728, i8 %3731, i32 46
  %3733 = extractelement <64 x i32> %3544, i32 47
  %3734 = getelementptr inbounds i8, i8* %8, i32 %3733
  %3735 = load i8, i8* %3734, align 1, !tbaa !127
  %3736 = insertelement <64 x i8> %3732, i8 %3735, i32 47
  %3737 = extractelement <64 x i32> %3544, i32 48
  %3738 = getelementptr inbounds i8, i8* %8, i32 %3737
  %3739 = load i8, i8* %3738, align 1, !tbaa !127
  %3740 = insertelement <64 x i8> %3736, i8 %3739, i32 48
  %3741 = extractelement <64 x i32> %3544, i32 49
  %3742 = getelementptr inbounds i8, i8* %8, i32 %3741
  %3743 = load i8, i8* %3742, align 1, !tbaa !127
  %3744 = insertelement <64 x i8> %3740, i8 %3743, i32 49
  %3745 = extractelement <64 x i32> %3544, i32 50
  %3746 = getelementptr inbounds i8, i8* %8, i32 %3745
  %3747 = load i8, i8* %3746, align 1, !tbaa !127
  %3748 = insertelement <64 x i8> %3744, i8 %3747, i32 50
  %3749 = extractelement <64 x i32> %3544, i32 51
  %3750 = getelementptr inbounds i8, i8* %8, i32 %3749
  %3751 = load i8, i8* %3750, align 1, !tbaa !127
  %3752 = insertelement <64 x i8> %3748, i8 %3751, i32 51
  %3753 = extractelement <64 x i32> %3544, i32 52
  %3754 = getelementptr inbounds i8, i8* %8, i32 %3753
  %3755 = load i8, i8* %3754, align 1, !tbaa !127
  %3756 = insertelement <64 x i8> %3752, i8 %3755, i32 52
  %3757 = extractelement <64 x i32> %3544, i32 53
  %3758 = getelementptr inbounds i8, i8* %8, i32 %3757
  %3759 = load i8, i8* %3758, align 1, !tbaa !127
  %3760 = insertelement <64 x i8> %3756, i8 %3759, i32 53
  %3761 = extractelement <64 x i32> %3544, i32 54
  %3762 = getelementptr inbounds i8, i8* %8, i32 %3761
  %3763 = load i8, i8* %3762, align 1, !tbaa !127
  %3764 = insertelement <64 x i8> %3760, i8 %3763, i32 54
  %3765 = extractelement <64 x i32> %3544, i32 55
  %3766 = getelementptr inbounds i8, i8* %8, i32 %3765
  %3767 = load i8, i8* %3766, align 1, !tbaa !127
  %3768 = insertelement <64 x i8> %3764, i8 %3767, i32 55
  %3769 = extractelement <64 x i32> %3544, i32 56
  %3770 = getelementptr inbounds i8, i8* %8, i32 %3769
  %3771 = load i8, i8* %3770, align 1, !tbaa !127
  %3772 = insertelement <64 x i8> %3768, i8 %3771, i32 56
  %3773 = extractelement <64 x i32> %3544, i32 57
  %3774 = getelementptr inbounds i8, i8* %8, i32 %3773
  %3775 = load i8, i8* %3774, align 1, !tbaa !127
  %3776 = insertelement <64 x i8> %3772, i8 %3775, i32 57
  %3777 = extractelement <64 x i32> %3544, i32 58
  %3778 = getelementptr inbounds i8, i8* %8, i32 %3777
  %3779 = load i8, i8* %3778, align 1, !tbaa !127
  %3780 = insertelement <64 x i8> %3776, i8 %3779, i32 58
  %3781 = extractelement <64 x i32> %3544, i32 59
  %3782 = getelementptr inbounds i8, i8* %8, i32 %3781
  %3783 = load i8, i8* %3782, align 1, !tbaa !127
  %3784 = insertelement <64 x i8> %3780, i8 %3783, i32 59
  %3785 = extractelement <64 x i32> %3544, i32 60
  %3786 = getelementptr inbounds i8, i8* %8, i32 %3785
  %3787 = load i8, i8* %3786, align 1, !tbaa !127
  %3788 = insertelement <64 x i8> %3784, i8 %3787, i32 60
  %3789 = extractelement <64 x i32> %3544, i32 61
  %3790 = getelementptr inbounds i8, i8* %8, i32 %3789
  %3791 = load i8, i8* %3790, align 1, !tbaa !127
  %3792 = insertelement <64 x i8> %3788, i8 %3791, i32 61
  %3793 = extractelement <64 x i32> %3544, i32 62
  %3794 = getelementptr inbounds i8, i8* %8, i32 %3793
  %3795 = load i8, i8* %3794, align 1, !tbaa !127
  %3796 = insertelement <64 x i8> %3792, i8 %3795, i32 62
  %3797 = extractelement <64 x i32> %3544, i32 63
  %3798 = getelementptr inbounds i8, i8* %8, i32 %3797
  %3799 = load i8, i8* %3798, align 1, !tbaa !127
  %3800 = insertelement <64 x i8> %3796, i8 %3799, i32 63
  %3801 = add nsw i32 %t2367.us, %resampled_input.s0.x.rebased78.us
  %3802 = shl nsw i32 %3801, 7
  %3803 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3802
  %3804 = bitcast i8* %3803 to <64 x i8>*
  store <64 x i8> %3800, <64 x i8>* %3804, align 128, !tbaa !129
  %3805 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3543, <64 x i32> %3534) #11
  %3806 = extractelement <64 x i32> %3805, i32 0
  %3807 = getelementptr inbounds i8, i8* %8, i32 %3806
  %3808 = load i8, i8* %3807, align 1, !tbaa !127
  %3809 = insertelement <64 x i8> undef, i8 %3808, i32 0
  %3810 = extractelement <64 x i32> %3805, i32 1
  %3811 = getelementptr inbounds i8, i8* %8, i32 %3810
  %3812 = load i8, i8* %3811, align 1, !tbaa !127
  %3813 = insertelement <64 x i8> %3809, i8 %3812, i32 1
  %3814 = extractelement <64 x i32> %3805, i32 2
  %3815 = getelementptr inbounds i8, i8* %8, i32 %3814
  %3816 = load i8, i8* %3815, align 1, !tbaa !127
  %3817 = insertelement <64 x i8> %3813, i8 %3816, i32 2
  %3818 = extractelement <64 x i32> %3805, i32 3
  %3819 = getelementptr inbounds i8, i8* %8, i32 %3818
  %3820 = load i8, i8* %3819, align 1, !tbaa !127
  %3821 = insertelement <64 x i8> %3817, i8 %3820, i32 3
  %3822 = extractelement <64 x i32> %3805, i32 4
  %3823 = getelementptr inbounds i8, i8* %8, i32 %3822
  %3824 = load i8, i8* %3823, align 1, !tbaa !127
  %3825 = insertelement <64 x i8> %3821, i8 %3824, i32 4
  %3826 = extractelement <64 x i32> %3805, i32 5
  %3827 = getelementptr inbounds i8, i8* %8, i32 %3826
  %3828 = load i8, i8* %3827, align 1, !tbaa !127
  %3829 = insertelement <64 x i8> %3825, i8 %3828, i32 5
  %3830 = extractelement <64 x i32> %3805, i32 6
  %3831 = getelementptr inbounds i8, i8* %8, i32 %3830
  %3832 = load i8, i8* %3831, align 1, !tbaa !127
  %3833 = insertelement <64 x i8> %3829, i8 %3832, i32 6
  %3834 = extractelement <64 x i32> %3805, i32 7
  %3835 = getelementptr inbounds i8, i8* %8, i32 %3834
  %3836 = load i8, i8* %3835, align 1, !tbaa !127
  %3837 = insertelement <64 x i8> %3833, i8 %3836, i32 7
  %3838 = extractelement <64 x i32> %3805, i32 8
  %3839 = getelementptr inbounds i8, i8* %8, i32 %3838
  %3840 = load i8, i8* %3839, align 1, !tbaa !127
  %3841 = insertelement <64 x i8> %3837, i8 %3840, i32 8
  %3842 = extractelement <64 x i32> %3805, i32 9
  %3843 = getelementptr inbounds i8, i8* %8, i32 %3842
  %3844 = load i8, i8* %3843, align 1, !tbaa !127
  %3845 = insertelement <64 x i8> %3841, i8 %3844, i32 9
  %3846 = extractelement <64 x i32> %3805, i32 10
  %3847 = getelementptr inbounds i8, i8* %8, i32 %3846
  %3848 = load i8, i8* %3847, align 1, !tbaa !127
  %3849 = insertelement <64 x i8> %3845, i8 %3848, i32 10
  %3850 = extractelement <64 x i32> %3805, i32 11
  %3851 = getelementptr inbounds i8, i8* %8, i32 %3850
  %3852 = load i8, i8* %3851, align 1, !tbaa !127
  %3853 = insertelement <64 x i8> %3849, i8 %3852, i32 11
  %3854 = extractelement <64 x i32> %3805, i32 12
  %3855 = getelementptr inbounds i8, i8* %8, i32 %3854
  %3856 = load i8, i8* %3855, align 1, !tbaa !127
  %3857 = insertelement <64 x i8> %3853, i8 %3856, i32 12
  %3858 = extractelement <64 x i32> %3805, i32 13
  %3859 = getelementptr inbounds i8, i8* %8, i32 %3858
  %3860 = load i8, i8* %3859, align 1, !tbaa !127
  %3861 = insertelement <64 x i8> %3857, i8 %3860, i32 13
  %3862 = extractelement <64 x i32> %3805, i32 14
  %3863 = getelementptr inbounds i8, i8* %8, i32 %3862
  %3864 = load i8, i8* %3863, align 1, !tbaa !127
  %3865 = insertelement <64 x i8> %3861, i8 %3864, i32 14
  %3866 = extractelement <64 x i32> %3805, i32 15
  %3867 = getelementptr inbounds i8, i8* %8, i32 %3866
  %3868 = load i8, i8* %3867, align 1, !tbaa !127
  %3869 = insertelement <64 x i8> %3865, i8 %3868, i32 15
  %3870 = extractelement <64 x i32> %3805, i32 16
  %3871 = getelementptr inbounds i8, i8* %8, i32 %3870
  %3872 = load i8, i8* %3871, align 1, !tbaa !127
  %3873 = insertelement <64 x i8> %3869, i8 %3872, i32 16
  %3874 = extractelement <64 x i32> %3805, i32 17
  %3875 = getelementptr inbounds i8, i8* %8, i32 %3874
  %3876 = load i8, i8* %3875, align 1, !tbaa !127
  %3877 = insertelement <64 x i8> %3873, i8 %3876, i32 17
  %3878 = extractelement <64 x i32> %3805, i32 18
  %3879 = getelementptr inbounds i8, i8* %8, i32 %3878
  %3880 = load i8, i8* %3879, align 1, !tbaa !127
  %3881 = insertelement <64 x i8> %3877, i8 %3880, i32 18
  %3882 = extractelement <64 x i32> %3805, i32 19
  %3883 = getelementptr inbounds i8, i8* %8, i32 %3882
  %3884 = load i8, i8* %3883, align 1, !tbaa !127
  %3885 = insertelement <64 x i8> %3881, i8 %3884, i32 19
  %3886 = extractelement <64 x i32> %3805, i32 20
  %3887 = getelementptr inbounds i8, i8* %8, i32 %3886
  %3888 = load i8, i8* %3887, align 1, !tbaa !127
  %3889 = insertelement <64 x i8> %3885, i8 %3888, i32 20
  %3890 = extractelement <64 x i32> %3805, i32 21
  %3891 = getelementptr inbounds i8, i8* %8, i32 %3890
  %3892 = load i8, i8* %3891, align 1, !tbaa !127
  %3893 = insertelement <64 x i8> %3889, i8 %3892, i32 21
  %3894 = extractelement <64 x i32> %3805, i32 22
  %3895 = getelementptr inbounds i8, i8* %8, i32 %3894
  %3896 = load i8, i8* %3895, align 1, !tbaa !127
  %3897 = insertelement <64 x i8> %3893, i8 %3896, i32 22
  %3898 = extractelement <64 x i32> %3805, i32 23
  %3899 = getelementptr inbounds i8, i8* %8, i32 %3898
  %3900 = load i8, i8* %3899, align 1, !tbaa !127
  %3901 = insertelement <64 x i8> %3897, i8 %3900, i32 23
  %3902 = extractelement <64 x i32> %3805, i32 24
  %3903 = getelementptr inbounds i8, i8* %8, i32 %3902
  %3904 = load i8, i8* %3903, align 1, !tbaa !127
  %3905 = insertelement <64 x i8> %3901, i8 %3904, i32 24
  %3906 = extractelement <64 x i32> %3805, i32 25
  %3907 = getelementptr inbounds i8, i8* %8, i32 %3906
  %3908 = load i8, i8* %3907, align 1, !tbaa !127
  %3909 = insertelement <64 x i8> %3905, i8 %3908, i32 25
  %3910 = extractelement <64 x i32> %3805, i32 26
  %3911 = getelementptr inbounds i8, i8* %8, i32 %3910
  %3912 = load i8, i8* %3911, align 1, !tbaa !127
  %3913 = insertelement <64 x i8> %3909, i8 %3912, i32 26
  %3914 = extractelement <64 x i32> %3805, i32 27
  %3915 = getelementptr inbounds i8, i8* %8, i32 %3914
  %3916 = load i8, i8* %3915, align 1, !tbaa !127
  %3917 = insertelement <64 x i8> %3913, i8 %3916, i32 27
  %3918 = extractelement <64 x i32> %3805, i32 28
  %3919 = getelementptr inbounds i8, i8* %8, i32 %3918
  %3920 = load i8, i8* %3919, align 1, !tbaa !127
  %3921 = insertelement <64 x i8> %3917, i8 %3920, i32 28
  %3922 = extractelement <64 x i32> %3805, i32 29
  %3923 = getelementptr inbounds i8, i8* %8, i32 %3922
  %3924 = load i8, i8* %3923, align 1, !tbaa !127
  %3925 = insertelement <64 x i8> %3921, i8 %3924, i32 29
  %3926 = extractelement <64 x i32> %3805, i32 30
  %3927 = getelementptr inbounds i8, i8* %8, i32 %3926
  %3928 = load i8, i8* %3927, align 1, !tbaa !127
  %3929 = insertelement <64 x i8> %3925, i8 %3928, i32 30
  %3930 = extractelement <64 x i32> %3805, i32 31
  %3931 = getelementptr inbounds i8, i8* %8, i32 %3930
  %3932 = load i8, i8* %3931, align 1, !tbaa !127
  %3933 = insertelement <64 x i8> %3929, i8 %3932, i32 31
  %3934 = extractelement <64 x i32> %3805, i32 32
  %3935 = getelementptr inbounds i8, i8* %8, i32 %3934
  %3936 = load i8, i8* %3935, align 1, !tbaa !127
  %3937 = insertelement <64 x i8> %3933, i8 %3936, i32 32
  %3938 = extractelement <64 x i32> %3805, i32 33
  %3939 = getelementptr inbounds i8, i8* %8, i32 %3938
  %3940 = load i8, i8* %3939, align 1, !tbaa !127
  %3941 = insertelement <64 x i8> %3937, i8 %3940, i32 33
  %3942 = extractelement <64 x i32> %3805, i32 34
  %3943 = getelementptr inbounds i8, i8* %8, i32 %3942
  %3944 = load i8, i8* %3943, align 1, !tbaa !127
  %3945 = insertelement <64 x i8> %3941, i8 %3944, i32 34
  %3946 = extractelement <64 x i32> %3805, i32 35
  %3947 = getelementptr inbounds i8, i8* %8, i32 %3946
  %3948 = load i8, i8* %3947, align 1, !tbaa !127
  %3949 = insertelement <64 x i8> %3945, i8 %3948, i32 35
  %3950 = extractelement <64 x i32> %3805, i32 36
  %3951 = getelementptr inbounds i8, i8* %8, i32 %3950
  %3952 = load i8, i8* %3951, align 1, !tbaa !127
  %3953 = insertelement <64 x i8> %3949, i8 %3952, i32 36
  %3954 = extractelement <64 x i32> %3805, i32 37
  %3955 = getelementptr inbounds i8, i8* %8, i32 %3954
  %3956 = load i8, i8* %3955, align 1, !tbaa !127
  %3957 = insertelement <64 x i8> %3953, i8 %3956, i32 37
  %3958 = extractelement <64 x i32> %3805, i32 38
  %3959 = getelementptr inbounds i8, i8* %8, i32 %3958
  %3960 = load i8, i8* %3959, align 1, !tbaa !127
  %3961 = insertelement <64 x i8> %3957, i8 %3960, i32 38
  %3962 = extractelement <64 x i32> %3805, i32 39
  %3963 = getelementptr inbounds i8, i8* %8, i32 %3962
  %3964 = load i8, i8* %3963, align 1, !tbaa !127
  %3965 = insertelement <64 x i8> %3961, i8 %3964, i32 39
  %3966 = extractelement <64 x i32> %3805, i32 40
  %3967 = getelementptr inbounds i8, i8* %8, i32 %3966
  %3968 = load i8, i8* %3967, align 1, !tbaa !127
  %3969 = insertelement <64 x i8> %3965, i8 %3968, i32 40
  %3970 = extractelement <64 x i32> %3805, i32 41
  %3971 = getelementptr inbounds i8, i8* %8, i32 %3970
  %3972 = load i8, i8* %3971, align 1, !tbaa !127
  %3973 = insertelement <64 x i8> %3969, i8 %3972, i32 41
  %3974 = extractelement <64 x i32> %3805, i32 42
  %3975 = getelementptr inbounds i8, i8* %8, i32 %3974
  %3976 = load i8, i8* %3975, align 1, !tbaa !127
  %3977 = insertelement <64 x i8> %3973, i8 %3976, i32 42
  %3978 = extractelement <64 x i32> %3805, i32 43
  %3979 = getelementptr inbounds i8, i8* %8, i32 %3978
  %3980 = load i8, i8* %3979, align 1, !tbaa !127
  %3981 = insertelement <64 x i8> %3977, i8 %3980, i32 43
  %3982 = extractelement <64 x i32> %3805, i32 44
  %3983 = getelementptr inbounds i8, i8* %8, i32 %3982
  %3984 = load i8, i8* %3983, align 1, !tbaa !127
  %3985 = insertelement <64 x i8> %3981, i8 %3984, i32 44
  %3986 = extractelement <64 x i32> %3805, i32 45
  %3987 = getelementptr inbounds i8, i8* %8, i32 %3986
  %3988 = load i8, i8* %3987, align 1, !tbaa !127
  %3989 = insertelement <64 x i8> %3985, i8 %3988, i32 45
  %3990 = extractelement <64 x i32> %3805, i32 46
  %3991 = getelementptr inbounds i8, i8* %8, i32 %3990
  %3992 = load i8, i8* %3991, align 1, !tbaa !127
  %3993 = insertelement <64 x i8> %3989, i8 %3992, i32 46
  %3994 = extractelement <64 x i32> %3805, i32 47
  %3995 = getelementptr inbounds i8, i8* %8, i32 %3994
  %3996 = load i8, i8* %3995, align 1, !tbaa !127
  %3997 = insertelement <64 x i8> %3993, i8 %3996, i32 47
  %3998 = extractelement <64 x i32> %3805, i32 48
  %3999 = getelementptr inbounds i8, i8* %8, i32 %3998
  %4000 = load i8, i8* %3999, align 1, !tbaa !127
  %4001 = insertelement <64 x i8> %3997, i8 %4000, i32 48
  %4002 = extractelement <64 x i32> %3805, i32 49
  %4003 = getelementptr inbounds i8, i8* %8, i32 %4002
  %4004 = load i8, i8* %4003, align 1, !tbaa !127
  %4005 = insertelement <64 x i8> %4001, i8 %4004, i32 49
  %4006 = extractelement <64 x i32> %3805, i32 50
  %4007 = getelementptr inbounds i8, i8* %8, i32 %4006
  %4008 = load i8, i8* %4007, align 1, !tbaa !127
  %4009 = insertelement <64 x i8> %4005, i8 %4008, i32 50
  %4010 = extractelement <64 x i32> %3805, i32 51
  %4011 = getelementptr inbounds i8, i8* %8, i32 %4010
  %4012 = load i8, i8* %4011, align 1, !tbaa !127
  %4013 = insertelement <64 x i8> %4009, i8 %4012, i32 51
  %4014 = extractelement <64 x i32> %3805, i32 52
  %4015 = getelementptr inbounds i8, i8* %8, i32 %4014
  %4016 = load i8, i8* %4015, align 1, !tbaa !127
  %4017 = insertelement <64 x i8> %4013, i8 %4016, i32 52
  %4018 = extractelement <64 x i32> %3805, i32 53
  %4019 = getelementptr inbounds i8, i8* %8, i32 %4018
  %4020 = load i8, i8* %4019, align 1, !tbaa !127
  %4021 = insertelement <64 x i8> %4017, i8 %4020, i32 53
  %4022 = extractelement <64 x i32> %3805, i32 54
  %4023 = getelementptr inbounds i8, i8* %8, i32 %4022
  %4024 = load i8, i8* %4023, align 1, !tbaa !127
  %4025 = insertelement <64 x i8> %4021, i8 %4024, i32 54
  %4026 = extractelement <64 x i32> %3805, i32 55
  %4027 = getelementptr inbounds i8, i8* %8, i32 %4026
  %4028 = load i8, i8* %4027, align 1, !tbaa !127
  %4029 = insertelement <64 x i8> %4025, i8 %4028, i32 55
  %4030 = extractelement <64 x i32> %3805, i32 56
  %4031 = getelementptr inbounds i8, i8* %8, i32 %4030
  %4032 = load i8, i8* %4031, align 1, !tbaa !127
  %4033 = insertelement <64 x i8> %4029, i8 %4032, i32 56
  %4034 = extractelement <64 x i32> %3805, i32 57
  %4035 = getelementptr inbounds i8, i8* %8, i32 %4034
  %4036 = load i8, i8* %4035, align 1, !tbaa !127
  %4037 = insertelement <64 x i8> %4033, i8 %4036, i32 57
  %4038 = extractelement <64 x i32> %3805, i32 58
  %4039 = getelementptr inbounds i8, i8* %8, i32 %4038
  %4040 = load i8, i8* %4039, align 1, !tbaa !127
  %4041 = insertelement <64 x i8> %4037, i8 %4040, i32 58
  %4042 = extractelement <64 x i32> %3805, i32 59
  %4043 = getelementptr inbounds i8, i8* %8, i32 %4042
  %4044 = load i8, i8* %4043, align 1, !tbaa !127
  %4045 = insertelement <64 x i8> %4041, i8 %4044, i32 59
  %4046 = extractelement <64 x i32> %3805, i32 60
  %4047 = getelementptr inbounds i8, i8* %8, i32 %4046
  %4048 = load i8, i8* %4047, align 1, !tbaa !127
  %4049 = insertelement <64 x i8> %4045, i8 %4048, i32 60
  %4050 = extractelement <64 x i32> %3805, i32 61
  %4051 = getelementptr inbounds i8, i8* %8, i32 %4050
  %4052 = load i8, i8* %4051, align 1, !tbaa !127
  %4053 = insertelement <64 x i8> %4049, i8 %4052, i32 61
  %4054 = extractelement <64 x i32> %3805, i32 62
  %4055 = getelementptr inbounds i8, i8* %8, i32 %4054
  %4056 = load i8, i8* %4055, align 1, !tbaa !127
  %4057 = insertelement <64 x i8> %4053, i8 %4056, i32 62
  %4058 = extractelement <64 x i32> %3805, i32 63
  %4059 = getelementptr inbounds i8, i8* %8, i32 %4058
  %4060 = load i8, i8* %4059, align 1, !tbaa !127
  %4061 = insertelement <64 x i8> %4057, i8 %4060, i32 63
  %4062 = getelementptr inbounds i8, i8* %3803, i32 64
  %4063 = bitcast i8* %4062 to <64 x i8>*
  store <64 x i8> %4061, <64 x i8>* %4063, align 64, !tbaa !129
  %4064 = add nuw nsw i32 %resampled_input.s0.x.rebased78.us, 1
  %.not1843.us = icmp eq i32 %resampled_input.s0.x.rebased78.us, %t2351
  br i1 %.not1843.us, label %"end for resampled_input.s0.x.rebased77.loopexit.us", label %"for resampled_input.s0.x.rebased76.us"

"end for resampled_input.s0.x.rebased77.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased76.us"
  %4065 = add nuw nsw i32 %resampled_input.s0.y.rebased75.us, 1
  %.not1842.us = icmp eq i32 %resampled_input.s0.y.rebased75.us, %t2350
  br i1 %.not1842.us, label %"consume resampled_input91", label %"for resampled_input.s0.y.rebased73.us"

"consume resampled_input91":                      ; preds = %"end for resampled_input.s0.x.rebased77.loopexit.us", %"end for resampled_input.s0.x.rebased71.loopexit.us", %then_bb65, %"for resampled_input.s0.y.rebased73.preheader", %next_bb66
  br i1 %3096, label %"for output.s0.y.yo92.preheader", label %"end for output.s0.y.yo93", !prof !101

"for output.s0.y.yo92.preheader":                 ; preds = %"consume resampled_input91"
  %4066 = add nsw i32 %output.s0.b.rebased59, %14
  %4067 = mul nsw i32 %4066, %25
  %t2374 = add i32 %3467, %4067
  br label %"for output.s0.y.yo92"

"for output.s0.y.yo92":                           ; preds = %"for output.s0.y.yo92.preheader", %"end for output.s0.x.xo96"
  %output.s0.y.yo94 = phi i32 [ %4082, %"end for output.s0.x.xo96" ], [ 0, %"for output.s0.y.yo92.preheader" ]
  %4068 = add nsw i32 %output.s0.y.yo94, %22
  %4069 = mul nsw i32 %4068, %stride_y
  %4070 = add nsw i32 %3097, %4069
  %t2390 = mul nsw i32 %4070, %3089
  %4071 = add nsw i32 %3098, %4069
  %t2392 = mul nsw i32 %4071, %3089
  %4072 = sub nsw i32 %4069, %t2346
  %t2394 = mul nsw i32 %4072, %3089
  br i1 %3099, label %"for output.s0.x.xo95.preheader", label %"end for output.s0.x.xo96", !prof !101

"for output.s0.x.xo95.preheader":                 ; preds = %"for output.s0.y.yo92"
  %4073 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %4074 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %4075 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3113) #11
  %4076 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %4077 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %4078 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %4079 = mul nsw i32 %4068, %24
  %4080 = add i32 %t2374, %4079
  br label %"for output.s0.x.xo95"

"end for output.s0.y.yo93":                       ; preds = %"end for output.s0.x.xo96", %"consume resampled_input91"
  %4081 = add nuw nsw i32 %output.s0.b.rebased59, 1
  %.not1837 = icmp eq i32 %4081, %15
  br i1 %.not1837, label %"end for output.s0.b.rebased58", label %"for output.s0.b.rebased57"

"for output.s0.x.xo95":                           ; preds = %"for output.s0.x.xo95.preheader", %"consume convolved108"
  %output.s0.x.xo97 = phi i32 [ %4733, %"consume convolved108" ], [ 0, %"for output.s0.x.xo95.preheader" ]
  br i1 %t2340, label %then_bb100, label %next_bb101

"end for output.s0.x.xo96.loopexit":              ; preds = %"consume convolved108"
  store <32 x i32> %.lcssa2185.us.lcssa2201, <32 x i32>* %3100, align 128, !tbaa !111
  store <32 x i32> %.lcssa2187.us.lcssa2204, <32 x i32>* %3102, align 128, !tbaa !119
  store <32 x i32> %.lcssa2189.us.lcssa2207, <32 x i32>* %3104, align 128, !tbaa !121
  store <32 x i32> %.lcssa2191.us.lcssa2210, <32 x i32>* %3106, align 128, !tbaa !124
  br label %"end for output.s0.x.xo96"

"end for output.s0.x.xo96":                       ; preds = %"end for output.s0.x.xo96.loopexit", %"for output.s0.y.yo92"
  %4082 = add nuw nsw i32 %output.s0.y.yo94, 1
  %.not1838 = icmp eq i32 %4082, %23
  br i1 %.not1838, label %"end for output.s0.y.yo93", label %"for output.s0.y.yo92"

then_bb100:                                       ; preds = %"for output.s0.x.xo95"
  %4083 = load <32 x i16>, <32 x i16>* %3398, align 128, !tbaa !105
  %4084 = sext <32 x i16> %4083 to <32 x i32>
  %4085 = add nsw i32 %output.s0.x.xo97, %19
  %4086 = mul nsw i32 %4085, %stride_x
  %4087 = add i32 %4086, %3107
  %4088 = add i32 %4087, %t2390
  %4089 = shl nsw i32 %4088, 7
  %4090 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4089
  %4091 = bitcast i8* %4090 to <32 x i8>*
  %4092 = load <32 x i8>, <32 x i8>* %4091, align 128, !tbaa !129
  %4093 = zext <32 x i8> %4092 to <32 x i32>
  %4094 = load <32 x i16>, <32 x i16>* %3400, align 64, !tbaa !105
  %4095 = sext <32 x i16> %4094 to <32 x i32>
  %4096 = getelementptr inbounds i8, i8* %4090, i32 32
  %4097 = bitcast i8* %4096 to <32 x i8>*
  %4098 = load <32 x i8>, <32 x i8>* %4097, align 32, !tbaa !129
  %4099 = zext <32 x i8> %4098 to <32 x i32>
  %4100 = load <32 x i16>, <32 x i16>* %3402, align 128, !tbaa !105
  %4101 = sext <32 x i16> %4100 to <32 x i32>
  %4102 = add i32 %4086, %3108
  %4103 = add i32 %4102, %t2390
  %4104 = shl nsw i32 %4103, 7
  %4105 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4104
  %4106 = bitcast i8* %4105 to <32 x i8>*
  %4107 = load <32 x i8>, <32 x i8>* %4106, align 128, !tbaa !129
  %4108 = zext <32 x i8> %4107 to <32 x i32>
  %4109 = load <32 x i16>, <32 x i16>* %3404, align 64, !tbaa !105
  %4110 = sext <32 x i16> %4109 to <32 x i32>
  %4111 = getelementptr inbounds i8, i8* %4105, i32 32
  %4112 = bitcast i8* %4111 to <32 x i8>*
  %4113 = load <32 x i8>, <32 x i8>* %4112, align 32, !tbaa !129
  %4114 = zext <32 x i8> %4113 to <32 x i32>
  %4115 = load <32 x i16>, <32 x i16>* %3405, align 128, !tbaa !105
  %4116 = sext <32 x i16> %4115 to <32 x i32>
  %4117 = add i32 %4086, %t2390
  %4118 = sub i32 %4117, %t2348
  %4119 = shl nsw i32 %4118, 7
  %4120 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4119
  %4121 = bitcast i8* %4120 to <32 x i8>*
  %4122 = load <32 x i8>, <32 x i8>* %4121, align 128, !tbaa !129
  %4123 = zext <32 x i8> %4122 to <32 x i32>
  %4124 = load <32 x i16>, <32 x i16>* %3407, align 64, !tbaa !105
  %4125 = sext <32 x i16> %4124 to <32 x i32>
  %4126 = getelementptr inbounds i8, i8* %4120, i32 32
  %4127 = bitcast i8* %4126 to <32 x i8>*
  %4128 = load <32 x i8>, <32 x i8>* %4127, align 32, !tbaa !129
  %4129 = zext <32 x i8> %4128 to <32 x i32>
  %4130 = load <32 x i16>, <32 x i16>* %3410, align 128, !tbaa !105
  %4131 = sext <32 x i16> %4130 to <32 x i32>
  %4132 = add i32 %4087, %t2392
  %4133 = shl nsw i32 %4132, 7
  %4134 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4133
  %4135 = bitcast i8* %4134 to <32 x i8>*
  %4136 = load <32 x i8>, <32 x i8>* %4135, align 128, !tbaa !129
  %4137 = zext <32 x i8> %4136 to <32 x i32>
  %4138 = load <32 x i16>, <32 x i16>* %3412, align 64, !tbaa !105
  %4139 = sext <32 x i16> %4138 to <32 x i32>
  %4140 = getelementptr inbounds i8, i8* %4134, i32 32
  %4141 = bitcast i8* %4140 to <32 x i8>*
  %4142 = load <32 x i8>, <32 x i8>* %4141, align 32, !tbaa !129
  %4143 = zext <32 x i8> %4142 to <32 x i32>
  %4144 = load <32 x i16>, <32 x i16>* %3414, align 128, !tbaa !105
  %4145 = sext <32 x i16> %4144 to <32 x i32>
  %4146 = add i32 %4102, %t2392
  %4147 = shl nsw i32 %4146, 7
  %4148 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4147
  %4149 = bitcast i8* %4148 to <32 x i8>*
  %4150 = load <32 x i8>, <32 x i8>* %4149, align 128, !tbaa !129
  %4151 = zext <32 x i8> %4150 to <32 x i32>
  %4152 = load <32 x i16>, <32 x i16>* %3416, align 64, !tbaa !105
  %4153 = sext <32 x i16> %4152 to <32 x i32>
  %4154 = getelementptr inbounds i8, i8* %4148, i32 32
  %4155 = bitcast i8* %4154 to <32 x i8>*
  %4156 = load <32 x i8>, <32 x i8>* %4155, align 32, !tbaa !129
  %4157 = zext <32 x i8> %4156 to <32 x i32>
  %4158 = load <32 x i16>, <32 x i16>* %3417, align 128, !tbaa !105
  %4159 = sext <32 x i16> %4158 to <32 x i32>
  %4160 = add i32 %4086, %t2392
  %4161 = sub i32 %4160, %t2348
  %4162 = shl nsw i32 %4161, 7
  %4163 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4162
  %4164 = bitcast i8* %4163 to <32 x i8>*
  %4165 = load <32 x i8>, <32 x i8>* %4164, align 128, !tbaa !129
  %4166 = zext <32 x i8> %4165 to <32 x i32>
  %4167 = load <32 x i16>, <32 x i16>* %3419, align 64, !tbaa !105
  %4168 = sext <32 x i16> %4167 to <32 x i32>
  %4169 = getelementptr inbounds i8, i8* %4163, i32 32
  %4170 = bitcast i8* %4169 to <32 x i8>*
  %4171 = load <32 x i8>, <32 x i8>* %4170, align 32, !tbaa !129
  %4172 = zext <32 x i8> %4171 to <32 x i32>
  %4173 = load <32 x i16>, <32 x i16>* %3421, align 128, !tbaa !180
  %4174 = sext <32 x i16> %4173 to <32 x i32>
  %4175 = add i32 %4087, %t2394
  %4176 = shl nsw i32 %4175, 7
  %4177 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4176
  %4178 = bitcast i8* %4177 to <32 x i8>*
  %4179 = load <32 x i8>, <32 x i8>* %4178, align 128, !tbaa !129
  %4180 = zext <32 x i8> %4179 to <32 x i32>
  %4181 = load <32 x i16>, <32 x i16>* %3423, align 128, !tbaa !187
  %4182 = sext <32 x i16> %4181 to <32 x i32>
  %4183 = getelementptr inbounds i8, i8* %4177, i32 32
  %4184 = bitcast i8* %4183 to <32 x i8>*
  %4185 = load <32 x i8>, <32 x i8>* %4184, align 32, !tbaa !129
  %4186 = zext <32 x i8> %4185 to <32 x i32>
  %4187 = load <32 x i16>, <32 x i16>* %3425, align 128, !tbaa !189
  %4188 = sext <32 x i16> %4187 to <32 x i32>
  %4189 = add i32 %4102, %t2394
  %4190 = shl nsw i32 %4189, 7
  %4191 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4190
  %4192 = bitcast i8* %4191 to <32 x i8>*
  %4193 = load <32 x i8>, <32 x i8>* %4192, align 128, !tbaa !129
  %4194 = zext <32 x i8> %4193 to <32 x i32>
  %4195 = load <32 x i16>, <32 x i16>* %3427, align 128, !tbaa !194
  %4196 = sext <32 x i16> %4195 to <32 x i32>
  %4197 = getelementptr inbounds i8, i8* %4191, i32 32
  %4198 = bitcast i8* %4197 to <32 x i8>*
  %4199 = load <32 x i8>, <32 x i8>* %4198, align 32, !tbaa !129
  %4200 = zext <32 x i8> %4199 to <32 x i32>
  %4201 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3378, <32 x i32> %3377)
  %4202 = load <32 x i16>, <32 x i16>* %3428, align 128, !tbaa !196
  %4203 = sext <32 x i16> %4202 to <32 x i32>
  %4204 = add i32 %4086, %t2394
  %4205 = sub i32 %4204, %t2348
  %4206 = shl nsw i32 %4205, 7
  %4207 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4206
  %4208 = bitcast i8* %4207 to <32 x i8>*
  %4209 = load <32 x i8>, <32 x i8>* %4208, align 128, !tbaa !129
  %4210 = zext <32 x i8> %4209 to <32 x i32>
  %4211 = load <32 x i16>, <32 x i16>* %3430, align 128, !tbaa !200
  %4212 = sext <32 x i16> %4211 to <32 x i32>
  %4213 = getelementptr inbounds i8, i8* %4207, i32 32
  %4214 = bitcast i8* %4213 to <32 x i8>*
  %4215 = load <32 x i8>, <32 x i8>* %4214, align 32, !tbaa !129
  %4216 = zext <32 x i8> %4215 to <32 x i32>
  %4217 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4093, <32 x i32> %4084) #11
  %4218 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4217, <32 x i32> %4093, <32 x i32> %4084) #11
  %4219 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4099, <32 x i32> %4095) #11
  %4220 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4219, <32 x i32> %4099, <32 x i32> %4095) #11
  %4221 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4218, <32 x i32> %4220) #11
  %4222 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4137, <32 x i32> %4131) #11
  %4223 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4222, <32 x i32> %4137, <32 x i32> %4131) #11
  %4224 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4143, <32 x i32> %4139) #11
  %4225 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4224, <32 x i32> %4143, <32 x i32> %4139) #11
  %4226 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4223, <32 x i32> %4225) #11
  %4227 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4180, <32 x i32> %4174) #11
  %4228 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4227, <32 x i32> %4180, <32 x i32> %4174) #11
  %4229 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4186, <32 x i32> %4182) #11
  %4230 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4229, <32 x i32> %4186, <32 x i32> %4182) #11
  %4231 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4228, <32 x i32> %4230) #11
  %4232 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4210, <32 x i32> %4203) #11
  %4233 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4232, <32 x i32> %4210, <32 x i32> %4203) #11
  %4234 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4216, <32 x i32> %4212) #11
  %4235 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4234, <32 x i32> %4216, <32 x i32> %4212) #11
  %4236 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4233, <32 x i32> %4235) #11
  %4237 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4236, <64 x i32> %4201) #11
  %4238 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4194, <32 x i32> %4188) #11
  %4239 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4238, <32 x i32> %4194, <32 x i32> %4188) #11
  %4240 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4200, <32 x i32> %4196) #11
  %4241 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4240, <32 x i32> %4200, <32 x i32> %4196) #11
  %4242 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4239, <32 x i32> %4241) #11
  %4243 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4237, <64 x i32> %4242) #11
  %4244 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4231, <64 x i32> %4243) #11
  %4245 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4166, <32 x i32> %4159) #11
  %4246 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4245, <32 x i32> %4166, <32 x i32> %4159) #11
  %4247 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4172, <32 x i32> %4168) #11
  %4248 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4247, <32 x i32> %4172, <32 x i32> %4168) #11
  %4249 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4246, <32 x i32> %4248) #11
  %4250 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4244, <64 x i32> %4249) #11
  %4251 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4151, <32 x i32> %4145) #11
  %4252 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4251, <32 x i32> %4151, <32 x i32> %4145) #11
  %4253 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4157, <32 x i32> %4153) #11
  %4254 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4253, <32 x i32> %4157, <32 x i32> %4153) #11
  %4255 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4252, <32 x i32> %4254) #11
  %4256 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4250, <64 x i32> %4255) #11
  %4257 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4226, <64 x i32> %4256) #11
  %4258 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4123, <32 x i32> %4116) #11
  %4259 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4258, <32 x i32> %4123, <32 x i32> %4116) #11
  %4260 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4129, <32 x i32> %4125) #11
  %4261 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4260, <32 x i32> %4129, <32 x i32> %4125) #11
  %4262 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4259, <32 x i32> %4261) #11
  %4263 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4257, <64 x i32> %4262) #11
  %4264 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4108, <32 x i32> %4101) #11
  %4265 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4264, <32 x i32> %4108, <32 x i32> %4101) #11
  %4266 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4114, <32 x i32> %4110) #11
  %4267 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4266, <32 x i32> %4114, <32 x i32> %4110) #11
  %4268 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4265, <32 x i32> %4267) #11
  %4269 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4263, <64 x i32> %4268) #11
  %4270 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4221, <64 x i32> %4269) #11
  %4271 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4270)
  %4272 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4270)
  %4273 = load <32 x i16>, <32 x i16>* %3432, align 128, !tbaa !105
  %4274 = sext <32 x i16> %4273 to <32 x i32>
  %4275 = getelementptr inbounds i8, i8* %4090, i32 64
  %4276 = bitcast i8* %4275 to <32 x i8>*
  %4277 = load <32 x i8>, <32 x i8>* %4276, align 64, !tbaa !129
  %4278 = zext <32 x i8> %4277 to <32 x i32>
  %4279 = load <32 x i16>, <32 x i16>* %3434, align 64, !tbaa !105
  %4280 = sext <32 x i16> %4279 to <32 x i32>
  %4281 = getelementptr inbounds i8, i8* %4090, i32 96
  %4282 = bitcast i8* %4281 to <32 x i8>*
  %4283 = load <32 x i8>, <32 x i8>* %4282, align 32, !tbaa !129
  %4284 = zext <32 x i8> %4283 to <32 x i32>
  %4285 = load <32 x i16>, <32 x i16>* %3436, align 128, !tbaa !105
  %4286 = sext <32 x i16> %4285 to <32 x i32>
  %4287 = getelementptr inbounds i8, i8* %4105, i32 64
  %4288 = bitcast i8* %4287 to <32 x i8>*
  %4289 = load <32 x i8>, <32 x i8>* %4288, align 64, !tbaa !129
  %4290 = zext <32 x i8> %4289 to <32 x i32>
  %4291 = load <32 x i16>, <32 x i16>* %3438, align 64, !tbaa !105
  %4292 = sext <32 x i16> %4291 to <32 x i32>
  %4293 = getelementptr inbounds i8, i8* %4105, i32 96
  %4294 = bitcast i8* %4293 to <32 x i8>*
  %4295 = load <32 x i8>, <32 x i8>* %4294, align 32, !tbaa !129
  %4296 = zext <32 x i8> %4295 to <32 x i32>
  %4297 = load <32 x i16>, <32 x i16>* %3440, align 128, !tbaa !105
  %4298 = sext <32 x i16> %4297 to <32 x i32>
  %4299 = getelementptr inbounds i8, i8* %4120, i32 64
  %4300 = bitcast i8* %4299 to <32 x i8>*
  %4301 = load <32 x i8>, <32 x i8>* %4300, align 64, !tbaa !129
  %4302 = zext <32 x i8> %4301 to <32 x i32>
  %4303 = load <32 x i16>, <32 x i16>* %3442, align 64, !tbaa !105
  %4304 = sext <32 x i16> %4303 to <32 x i32>
  %4305 = getelementptr inbounds i8, i8* %4120, i32 96
  %4306 = bitcast i8* %4305 to <32 x i8>*
  %4307 = load <32 x i8>, <32 x i8>* %4306, align 32, !tbaa !129
  %4308 = zext <32 x i8> %4307 to <32 x i32>
  %4309 = load <32 x i16>, <32 x i16>* %3444, align 128, !tbaa !105
  %4310 = sext <32 x i16> %4309 to <32 x i32>
  %4311 = getelementptr inbounds i8, i8* %4134, i32 64
  %4312 = bitcast i8* %4311 to <32 x i8>*
  %4313 = load <32 x i8>, <32 x i8>* %4312, align 64, !tbaa !129
  %4314 = zext <32 x i8> %4313 to <32 x i32>
  %4315 = load <32 x i16>, <32 x i16>* %3446, align 64, !tbaa !105
  %4316 = sext <32 x i16> %4315 to <32 x i32>
  %4317 = getelementptr inbounds i8, i8* %4134, i32 96
  %4318 = bitcast i8* %4317 to <32 x i8>*
  %4319 = load <32 x i8>, <32 x i8>* %4318, align 32, !tbaa !129
  %4320 = zext <32 x i8> %4319 to <32 x i32>
  %4321 = load <32 x i16>, <32 x i16>* %3448, align 128, !tbaa !105
  %4322 = sext <32 x i16> %4321 to <32 x i32>
  %4323 = getelementptr inbounds i8, i8* %4148, i32 64
  %4324 = bitcast i8* %4323 to <32 x i8>*
  %4325 = load <32 x i8>, <32 x i8>* %4324, align 64, !tbaa !129
  %4326 = zext <32 x i8> %4325 to <32 x i32>
  %4327 = load <32 x i16>, <32 x i16>* %3450, align 64, !tbaa !105
  %4328 = sext <32 x i16> %4327 to <32 x i32>
  %4329 = getelementptr inbounds i8, i8* %4148, i32 96
  %4330 = bitcast i8* %4329 to <32 x i8>*
  %4331 = load <32 x i8>, <32 x i8>* %4330, align 32, !tbaa !129
  %4332 = zext <32 x i8> %4331 to <32 x i32>
  %4333 = load <32 x i16>, <32 x i16>* %3452, align 128, !tbaa !105
  %4334 = sext <32 x i16> %4333 to <32 x i32>
  %4335 = getelementptr inbounds i8, i8* %4163, i32 64
  %4336 = bitcast i8* %4335 to <32 x i8>*
  %4337 = load <32 x i8>, <32 x i8>* %4336, align 64, !tbaa !129
  %4338 = zext <32 x i8> %4337 to <32 x i32>
  %4339 = load <32 x i16>, <32 x i16>* %3454, align 64, !tbaa !105
  %4340 = sext <32 x i16> %4339 to <32 x i32>
  %4341 = getelementptr inbounds i8, i8* %4163, i32 96
  %4342 = bitcast i8* %4341 to <32 x i8>*
  %4343 = load <32 x i8>, <32 x i8>* %4342, align 32, !tbaa !129
  %4344 = zext <32 x i8> %4343 to <32 x i32>
  %4345 = load <32 x i16>, <32 x i16>* %3456, align 128, !tbaa !202
  %4346 = sext <32 x i16> %4345 to <32 x i32>
  %4347 = getelementptr inbounds i8, i8* %4177, i32 64
  %4348 = bitcast i8* %4347 to <32 x i8>*
  %4349 = load <32 x i8>, <32 x i8>* %4348, align 64, !tbaa !129
  %4350 = zext <32 x i8> %4349 to <32 x i32>
  %4351 = load <32 x i16>, <32 x i16>* %3458, align 128, !tbaa !205
  %4352 = sext <32 x i16> %4351 to <32 x i32>
  %4353 = getelementptr inbounds i8, i8* %4177, i32 96
  %4354 = bitcast i8* %4353 to <32 x i8>*
  %4355 = load <32 x i8>, <32 x i8>* %4354, align 32, !tbaa !129
  %4356 = zext <32 x i8> %4355 to <32 x i32>
  %4357 = load <32 x i16>, <32 x i16>* %3460, align 128, !tbaa !207
  %4358 = sext <32 x i16> %4357 to <32 x i32>
  %4359 = getelementptr inbounds i8, i8* %4191, i32 64
  %4360 = bitcast i8* %4359 to <32 x i8>*
  %4361 = load <32 x i8>, <32 x i8>* %4360, align 64, !tbaa !129
  %4362 = zext <32 x i8> %4361 to <32 x i32>
  %4363 = load <32 x i16>, <32 x i16>* %3462, align 128, !tbaa !210
  %4364 = sext <32 x i16> %4363 to <32 x i32>
  %4365 = getelementptr inbounds i8, i8* %4191, i32 96
  %4366 = bitcast i8* %4365 to <32 x i8>*
  %4367 = load <32 x i8>, <32 x i8>* %4366, align 32, !tbaa !129
  %4368 = zext <32 x i8> %4367 to <32 x i32>
  %4369 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3393, <32 x i32> %3392)
  %4370 = load <32 x i16>, <32 x i16>* %3464, align 128, !tbaa !212
  %4371 = sext <32 x i16> %4370 to <32 x i32>
  %4372 = getelementptr inbounds i8, i8* %4207, i32 64
  %4373 = bitcast i8* %4372 to <32 x i8>*
  %4374 = load <32 x i8>, <32 x i8>* %4373, align 64, !tbaa !129
  %4375 = zext <32 x i8> %4374 to <32 x i32>
  %4376 = load <32 x i16>, <32 x i16>* %3466, align 128, !tbaa !215
  %4377 = sext <32 x i16> %4376 to <32 x i32>
  %4378 = getelementptr inbounds i8, i8* %4207, i32 96
  %4379 = bitcast i8* %4378 to <32 x i8>*
  %4380 = load <32 x i8>, <32 x i8>* %4379, align 32, !tbaa !129
  %4381 = zext <32 x i8> %4380 to <32 x i32>
  %4382 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4278, <32 x i32> %4274) #11
  %4383 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4382, <32 x i32> %4278, <32 x i32> %4274) #11
  %4384 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4284, <32 x i32> %4280) #11
  %4385 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4384, <32 x i32> %4284, <32 x i32> %4280) #11
  %4386 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4383, <32 x i32> %4385) #11
  %4387 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4314, <32 x i32> %4310) #11
  %4388 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4387, <32 x i32> %4314, <32 x i32> %4310) #11
  %4389 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4320, <32 x i32> %4316) #11
  %4390 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4389, <32 x i32> %4320, <32 x i32> %4316) #11
  %4391 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4388, <32 x i32> %4390) #11
  %4392 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4350, <32 x i32> %4346) #11
  %4393 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4392, <32 x i32> %4350, <32 x i32> %4346) #11
  %4394 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4356, <32 x i32> %4352) #11
  %4395 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4394, <32 x i32> %4356, <32 x i32> %4352) #11
  %4396 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4393, <32 x i32> %4395) #11
  %4397 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4375, <32 x i32> %4371) #11
  %4398 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4397, <32 x i32> %4375, <32 x i32> %4371) #11
  %4399 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4381, <32 x i32> %4377) #11
  %4400 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4399, <32 x i32> %4381, <32 x i32> %4377) #11
  %4401 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4398, <32 x i32> %4400) #11
  %4402 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4401, <64 x i32> %4369) #11
  %4403 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4362, <32 x i32> %4358) #11
  %4404 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4403, <32 x i32> %4362, <32 x i32> %4358) #11
  %4405 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4368, <32 x i32> %4364) #11
  %4406 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4405, <32 x i32> %4368, <32 x i32> %4364) #11
  %4407 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4404, <32 x i32> %4406) #11
  %4408 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4402, <64 x i32> %4407) #11
  %4409 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4396, <64 x i32> %4408) #11
  %4410 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4338, <32 x i32> %4334) #11
  %4411 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4410, <32 x i32> %4338, <32 x i32> %4334) #11
  %4412 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4344, <32 x i32> %4340) #11
  %4413 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4412, <32 x i32> %4344, <32 x i32> %4340) #11
  %4414 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4411, <32 x i32> %4413) #11
  %4415 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4409, <64 x i32> %4414) #11
  %4416 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4326, <32 x i32> %4322) #11
  %4417 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4416, <32 x i32> %4326, <32 x i32> %4322) #11
  %4418 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4332, <32 x i32> %4328) #11
  %4419 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4418, <32 x i32> %4332, <32 x i32> %4328) #11
  %4420 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4417, <32 x i32> %4419) #11
  %4421 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4415, <64 x i32> %4420) #11
  %4422 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4391, <64 x i32> %4421) #11
  %4423 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4302, <32 x i32> %4298) #11
  %4424 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4423, <32 x i32> %4302, <32 x i32> %4298) #11
  %4425 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4308, <32 x i32> %4304) #11
  %4426 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4425, <32 x i32> %4308, <32 x i32> %4304) #11
  %4427 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4424, <32 x i32> %4426) #11
  %4428 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4422, <64 x i32> %4427) #11
  %4429 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4290, <32 x i32> %4286) #11
  %4430 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4429, <32 x i32> %4290, <32 x i32> %4286) #11
  %4431 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4296, <32 x i32> %4292) #11
  %4432 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4431, <32 x i32> %4296, <32 x i32> %4292) #11
  %4433 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4430, <32 x i32> %4432) #11
  %4434 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4428, <64 x i32> %4433) #11
  %4435 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4386, <64 x i32> %4434) #11
  %4436 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4435)
  %4437 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4435)
  br label %"consume convolved108"

next_bb101:                                       ; preds = %"for output.s0.x.xo95"
  %4438 = add nsw i32 %output.s0.x.xo97, %19
  br i1 %3044, label %"for convolved.s1.r19$y102.preheader", label %"consume convolved108", !prof !101

"for convolved.s1.r19$y102.preheader":            ; preds = %next_bb101
  %4439 = mul nsw i32 %4438, %stride_x
  %4440 = sub i32 %4439, %t2348
  br i1 %3043, label %"for convolved.s1.r19$y102.us", label %"consume convolved108", !prof !101

"for convolved.s1.r19$y102.us":                   ; preds = %"for convolved.s1.r19$y102.preheader", %"end for convolved.s1.r19$x106.loopexit.us"
  %.lcssa2191.us2199 = phi <32 x i32> [ %.lcssa2479, %"end for convolved.s1.r19$x106.loopexit.us" ], [ %3393, %"for convolved.s1.r19$y102.preheader" ]
  %.lcssa2189.us2197 = phi <32 x i32> [ %.lcssa2480, %"end for convolved.s1.r19$x106.loopexit.us" ], [ %3392, %"for convolved.s1.r19$y102.preheader" ]
  %.lcssa2187.us2195 = phi <32 x i32> [ %.lcssa2481, %"end for convolved.s1.r19$x106.loopexit.us" ], [ %3378, %"for convolved.s1.r19$y102.preheader" ]
  %.lcssa2185.us2193 = phi <32 x i32> [ %.lcssa2482, %"end for convolved.s1.r19$x106.loopexit.us" ], [ %3377, %"for convolved.s1.r19$y102.preheader" ]
  %"convolved.s1.r19$y104.us" = phi i32 [ %4616, %"end for convolved.s1.r19$x106.loopexit.us" ], [ 0, %"for convolved.s1.r19$y102.preheader" ]
  %4441 = mul nsw i32 %"convolved.s1.r19$y104.us", %a548
  %4442 = add nsw i32 %4441, %4072
  %4443 = mul nsw i32 %4442, %3089
  %t2397.us = add nsw i32 %4440, %4443
  %4444 = mul nsw i32 %"convolved.s1.r19$y104.us", %4
  br i1 %3130, label %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x105.us"

"for convolved.s1.r19$x105.us":                   ; preds = %"for convolved.s1.r19$y102.us", %"for convolved.s1.r19$x105.us"
  %4445 = phi <32 x i32> [ %4559, %"for convolved.s1.r19$x105.us" ], [ %.lcssa2191.us2199, %"for convolved.s1.r19$y102.us" ]
  %4446 = phi <32 x i32> [ %4558, %"for convolved.s1.r19$x105.us" ], [ %.lcssa2189.us2197, %"for convolved.s1.r19$y102.us" ]
  %4447 = phi <32 x i32> [ %4534, %"for convolved.s1.r19$x105.us" ], [ %.lcssa2187.us2195, %"for convolved.s1.r19$y102.us" ]
  %4448 = phi <32 x i32> [ %4533, %"for convolved.s1.r19$x105.us" ], [ %.lcssa2185.us2193, %"for convolved.s1.r19$y102.us" ]
  %"convolved.s1.r19$x107.us" = phi i32 [ %4560, %"for convolved.s1.r19$x105.us" ], [ 0, %"for convolved.s1.r19$y102.us" ]
  %niter2538 = phi i32 [ %niter2538.nsub.1, %"for convolved.s1.r19$x105.us" ], [ %unroll_iter2537, %"for convolved.s1.r19$y102.us" ]
  %4449 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4447, <32 x i32> %4448)
  %4450 = add nsw i32 %"convolved.s1.r19$x107.us", %4444
  %4451 = shl nsw i32 %4450, 7
  %4452 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %4451
  %4453 = bitcast i16* %4452 to <32 x i16>*
  %4454 = load <32 x i16>, <32 x i16>* %4453, align 128, !tbaa !105
  %4455 = sext <32 x i16> %4454 to <32 x i32>
  %4456 = mul nsw i32 %"convolved.s1.r19$x107.us", %a553
  %4457 = add nsw i32 %t2397.us, %4456
  %4458 = shl nsw i32 %4457, 7
  %4459 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4458
  %4460 = bitcast i8* %4459 to <32 x i8>*
  %4461 = load <32 x i8>, <32 x i8>* %4460, align 128, !tbaa !129
  %4462 = zext <32 x i8> %4461 to <32 x i32>
  %4463 = getelementptr inbounds i16, i16* %4452, i32 32
  %4464 = bitcast i16* %4463 to <32 x i16>*
  %4465 = load <32 x i16>, <32 x i16>* %4464, align 64, !tbaa !105
  %4466 = sext <32 x i16> %4465 to <32 x i32>
  %4467 = getelementptr inbounds i8, i8* %4459, i32 32
  %4468 = bitcast i8* %4467 to <32 x i8>*
  %4469 = load <32 x i8>, <32 x i8>* %4468, align 32, !tbaa !129
  %4470 = zext <32 x i8> %4469 to <32 x i32>
  %4471 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4462, <32 x i32> %4455) #11
  %4472 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4471, <32 x i32> %4462, <32 x i32> %4455) #11
  %4473 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4470, <32 x i32> %4466) #11
  %4474 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4473, <32 x i32> %4470, <32 x i32> %4466) #11
  %4475 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4472, <32 x i32> %4474) #11
  %4476 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4475, <64 x i32> %4449) #11
  %4477 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4476)
  %4478 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4476)
  %4479 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4445, <32 x i32> %4446)
  %4480 = getelementptr inbounds i16, i16* %4452, i32 64
  %4481 = bitcast i16* %4480 to <32 x i16>*
  %4482 = load <32 x i16>, <32 x i16>* %4481, align 128, !tbaa !105
  %4483 = sext <32 x i16> %4482 to <32 x i32>
  %4484 = getelementptr inbounds i8, i8* %4459, i32 64
  %4485 = bitcast i8* %4484 to <32 x i8>*
  %4486 = load <32 x i8>, <32 x i8>* %4485, align 64, !tbaa !129
  %4487 = zext <32 x i8> %4486 to <32 x i32>
  %4488 = getelementptr inbounds i16, i16* %4452, i32 96
  %4489 = bitcast i16* %4488 to <32 x i16>*
  %4490 = load <32 x i16>, <32 x i16>* %4489, align 64, !tbaa !105
  %4491 = sext <32 x i16> %4490 to <32 x i32>
  %4492 = getelementptr inbounds i8, i8* %4459, i32 96
  %4493 = bitcast i8* %4492 to <32 x i8>*
  %4494 = load <32 x i8>, <32 x i8>* %4493, align 32, !tbaa !129
  %4495 = zext <32 x i8> %4494 to <32 x i32>
  %4496 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4487, <32 x i32> %4483) #11
  %4497 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4496, <32 x i32> %4487, <32 x i32> %4483) #11
  %4498 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4495, <32 x i32> %4491) #11
  %4499 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4498, <32 x i32> %4495, <32 x i32> %4491) #11
  %4500 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4497, <32 x i32> %4499) #11
  %4501 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4500, <64 x i32> %4479) #11
  %4502 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4501)
  %4503 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4501)
  %4504 = or i32 %"convolved.s1.r19$x107.us", 1
  %4505 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4478, <32 x i32> %4477)
  %4506 = add nsw i32 %4504, %4444
  %4507 = shl nsw i32 %4506, 7
  %4508 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %4507
  %4509 = bitcast i16* %4508 to <32 x i16>*
  %4510 = load <32 x i16>, <32 x i16>* %4509, align 128, !tbaa !105
  %4511 = sext <32 x i16> %4510 to <32 x i32>
  %4512 = mul nsw i32 %4504, %a553
  %4513 = add nsw i32 %t2397.us, %4512
  %4514 = shl nsw i32 %4513, 7
  %4515 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4514
  %4516 = bitcast i8* %4515 to <32 x i8>*
  %4517 = load <32 x i8>, <32 x i8>* %4516, align 128, !tbaa !129
  %4518 = zext <32 x i8> %4517 to <32 x i32>
  %4519 = getelementptr inbounds i16, i16* %4508, i32 32
  %4520 = bitcast i16* %4519 to <32 x i16>*
  %4521 = load <32 x i16>, <32 x i16>* %4520, align 64, !tbaa !105
  %4522 = sext <32 x i16> %4521 to <32 x i32>
  %4523 = getelementptr inbounds i8, i8* %4515, i32 32
  %4524 = bitcast i8* %4523 to <32 x i8>*
  %4525 = load <32 x i8>, <32 x i8>* %4524, align 32, !tbaa !129
  %4526 = zext <32 x i8> %4525 to <32 x i32>
  %4527 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4518, <32 x i32> %4511) #11
  %4528 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4527, <32 x i32> %4518, <32 x i32> %4511) #11
  %4529 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4526, <32 x i32> %4522) #11
  %4530 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4529, <32 x i32> %4526, <32 x i32> %4522) #11
  %4531 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4528, <32 x i32> %4530) #11
  %4532 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4531, <64 x i32> %4505) #11
  %4533 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4532)
  %4534 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4532)
  %4535 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4503, <32 x i32> %4502)
  %4536 = getelementptr inbounds i16, i16* %4508, i32 64
  %4537 = bitcast i16* %4536 to <32 x i16>*
  %4538 = load <32 x i16>, <32 x i16>* %4537, align 128, !tbaa !105
  %4539 = sext <32 x i16> %4538 to <32 x i32>
  %4540 = getelementptr inbounds i8, i8* %4515, i32 64
  %4541 = bitcast i8* %4540 to <32 x i8>*
  %4542 = load <32 x i8>, <32 x i8>* %4541, align 64, !tbaa !129
  %4543 = zext <32 x i8> %4542 to <32 x i32>
  %4544 = getelementptr inbounds i16, i16* %4508, i32 96
  %4545 = bitcast i16* %4544 to <32 x i16>*
  %4546 = load <32 x i16>, <32 x i16>* %4545, align 64, !tbaa !105
  %4547 = sext <32 x i16> %4546 to <32 x i32>
  %4548 = getelementptr inbounds i8, i8* %4515, i32 96
  %4549 = bitcast i8* %4548 to <32 x i8>*
  %4550 = load <32 x i8>, <32 x i8>* %4549, align 32, !tbaa !129
  %4551 = zext <32 x i8> %4550 to <32 x i32>
  %4552 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4543, <32 x i32> %4539) #11
  %4553 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4552, <32 x i32> %4543, <32 x i32> %4539) #11
  %4554 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4551, <32 x i32> %4547) #11
  %4555 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4554, <32 x i32> %4551, <32 x i32> %4547) #11
  %4556 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4553, <32 x i32> %4555) #11
  %4557 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4556, <64 x i32> %4535) #11
  %4558 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4557)
  %4559 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4557)
  %4560 = add nuw nsw i32 %"convolved.s1.r19$x107.us", 2
  %niter2538.nsub.1 = add i32 %niter2538, -2
  %niter2538.ncmp.1 = icmp eq i32 %niter2538.nsub.1, 0
  br i1 %niter2538.ncmp.1, label %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x105.us"

"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x105.us", %"for convolved.s1.r19$y102.us"
  %.lcssa2482.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us" ], [ %4533, %"for convolved.s1.r19$x105.us" ]
  %.lcssa2481.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us" ], [ %4534, %"for convolved.s1.r19$x105.us" ]
  %.lcssa2480.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us" ], [ %4558, %"for convolved.s1.r19$x105.us" ]
  %.lcssa2479.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us" ], [ %4559, %"for convolved.s1.r19$x105.us" ]
  %.unr2532 = phi <32 x i32> [ %.lcssa2191.us2199, %"for convolved.s1.r19$y102.us" ], [ %4559, %"for convolved.s1.r19$x105.us" ]
  %.unr2533 = phi <32 x i32> [ %.lcssa2189.us2197, %"for convolved.s1.r19$y102.us" ], [ %4558, %"for convolved.s1.r19$x105.us" ]
  %.unr2534 = phi <32 x i32> [ %.lcssa2187.us2195, %"for convolved.s1.r19$y102.us" ], [ %4534, %"for convolved.s1.r19$x105.us" ]
  %.unr2535 = phi <32 x i32> [ %.lcssa2185.us2193, %"for convolved.s1.r19$y102.us" ], [ %4533, %"for convolved.s1.r19$x105.us" ]
  %"convolved.s1.r19$x107.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y102.us" ], [ %4560, %"for convolved.s1.r19$x105.us" ]
  br i1 %lcmp.mod2536.not, label %"end for convolved.s1.r19$x106.loopexit.us", label %"for convolved.s1.r19$x105.us.epil"

"for convolved.s1.r19$x105.us.epil":              ; preds = %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa"
  %4561 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr2534, <32 x i32> %.unr2535)
  %4562 = add nsw i32 %"convolved.s1.r19$x107.us.unr", %4444
  %4563 = shl nsw i32 %4562, 7
  %4564 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %4563
  %4565 = bitcast i16* %4564 to <32 x i16>*
  %4566 = load <32 x i16>, <32 x i16>* %4565, align 128, !tbaa !105
  %4567 = sext <32 x i16> %4566 to <32 x i32>
  %4568 = mul nsw i32 %"convolved.s1.r19$x107.us.unr", %a553
  %4569 = add nsw i32 %t2397.us, %4568
  %4570 = shl nsw i32 %4569, 7
  %4571 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4570
  %4572 = bitcast i8* %4571 to <32 x i8>*
  %4573 = load <32 x i8>, <32 x i8>* %4572, align 128, !tbaa !129
  %4574 = zext <32 x i8> %4573 to <32 x i32>
  %4575 = getelementptr inbounds i16, i16* %4564, i32 32
  %4576 = bitcast i16* %4575 to <32 x i16>*
  %4577 = load <32 x i16>, <32 x i16>* %4576, align 64, !tbaa !105
  %4578 = sext <32 x i16> %4577 to <32 x i32>
  %4579 = getelementptr inbounds i8, i8* %4571, i32 32
  %4580 = bitcast i8* %4579 to <32 x i8>*
  %4581 = load <32 x i8>, <32 x i8>* %4580, align 32, !tbaa !129
  %4582 = zext <32 x i8> %4581 to <32 x i32>
  %4583 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4574, <32 x i32> %4567) #11
  %4584 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4583, <32 x i32> %4574, <32 x i32> %4567) #11
  %4585 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4582, <32 x i32> %4578) #11
  %4586 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4585, <32 x i32> %4582, <32 x i32> %4578) #11
  %4587 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4584, <32 x i32> %4586) #11
  %4588 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4587, <64 x i32> %4561) #11
  %4589 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr2532, <32 x i32> %.unr2533)
  %4590 = getelementptr inbounds i16, i16* %4564, i32 64
  %4591 = bitcast i16* %4590 to <32 x i16>*
  %4592 = load <32 x i16>, <32 x i16>* %4591, align 128, !tbaa !105
  %4593 = sext <32 x i16> %4592 to <32 x i32>
  %4594 = getelementptr inbounds i8, i8* %4571, i32 64
  %4595 = bitcast i8* %4594 to <32 x i8>*
  %4596 = load <32 x i8>, <32 x i8>* %4595, align 64, !tbaa !129
  %4597 = zext <32 x i8> %4596 to <32 x i32>
  %4598 = getelementptr inbounds i16, i16* %4564, i32 96
  %4599 = bitcast i16* %4598 to <32 x i16>*
  %4600 = load <32 x i16>, <32 x i16>* %4599, align 64, !tbaa !105
  %4601 = sext <32 x i16> %4600 to <32 x i32>
  %4602 = getelementptr inbounds i8, i8* %4571, i32 96
  %4603 = bitcast i8* %4602 to <32 x i8>*
  %4604 = load <32 x i8>, <32 x i8>* %4603, align 32, !tbaa !129
  %4605 = zext <32 x i8> %4604 to <32 x i32>
  %4606 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4597, <32 x i32> %4593) #11
  %4607 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4606, <32 x i32> %4597, <32 x i32> %4593) #11
  %4608 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4605, <32 x i32> %4601) #11
  %4609 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4608, <32 x i32> %4605, <32 x i32> %4601) #11
  %4610 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4607, <32 x i32> %4609) #11
  %4611 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4610, <64 x i32> %4589) #11
  %4612 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4611)
  %4613 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4611)
  %4614 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4588)
  %4615 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4588)
  br label %"end for convolved.s1.r19$x106.loopexit.us"

"end for convolved.s1.r19$x106.loopexit.us":      ; preds = %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x105.us.epil"
  %.lcssa2482 = phi <32 x i32> [ %.lcssa2482.ph, %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa" ], [ %4615, %"for convolved.s1.r19$x105.us.epil" ]
  %.lcssa2481 = phi <32 x i32> [ %.lcssa2481.ph, %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa" ], [ %4614, %"for convolved.s1.r19$x105.us.epil" ]
  %.lcssa2480 = phi <32 x i32> [ %.lcssa2480.ph, %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa" ], [ %4613, %"for convolved.s1.r19$x105.us.epil" ]
  %.lcssa2479 = phi <32 x i32> [ %.lcssa2479.ph, %"end for convolved.s1.r19$x106.loopexit.us.unr-lcssa" ], [ %4612, %"for convolved.s1.r19$x105.us.epil" ]
  %4616 = add nuw nsw i32 %"convolved.s1.r19$y104.us", 1
  %.not1840.us = icmp eq i32 %4616, %6
  br i1 %.not1840.us, label %"consume convolved108", label %"for convolved.s1.r19$y102.us"

"consume convolved108":                           ; preds = %"end for convolved.s1.r19$x106.loopexit.us", %next_bb101, %"for convolved.s1.r19$y102.preheader", %then_bb100
  %.pre-phi2354 = phi i32 [ %4085, %then_bb100 ], [ %4438, %"for convolved.s1.r19$y102.preheader" ], [ %4438, %next_bb101 ], [ %4438, %"end for convolved.s1.r19$x106.loopexit.us" ]
  %.lcssa2191.us.lcssa2210 = phi <32 x i32> [ %4437, %then_bb100 ], [ %3393, %"for convolved.s1.r19$y102.preheader" ], [ %3393, %next_bb101 ], [ %.lcssa2479, %"end for convolved.s1.r19$x106.loopexit.us" ]
  %.lcssa2189.us.lcssa2207 = phi <32 x i32> [ %4436, %then_bb100 ], [ %3392, %"for convolved.s1.r19$y102.preheader" ], [ %3392, %next_bb101 ], [ %.lcssa2480, %"end for convolved.s1.r19$x106.loopexit.us" ]
  %.lcssa2187.us.lcssa2204 = phi <32 x i32> [ %4272, %then_bb100 ], [ %3378, %"for convolved.s1.r19$y102.preheader" ], [ %3378, %next_bb101 ], [ %.lcssa2481, %"end for convolved.s1.r19$x106.loopexit.us" ]
  %.lcssa2185.us.lcssa2201 = phi <32 x i32> [ %4271, %then_bb100 ], [ %3377, %"for convolved.s1.r19$y102.preheader" ], [ %3377, %next_bb101 ], [ %.lcssa2482, %"end for convolved.s1.r19$x106.loopexit.us" ]
  %4617 = sext <32 x i32> %.lcssa2185.us.lcssa2201 to <32 x i64>
  %a442 = mul nsw <32 x i64> %3111, %4617
  %4618 = icmp slt <32 x i64> %a442, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4619 = select <32 x i1> %4618, <32 x i64> %a442, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4620 = add nsw <32 x i64> %4619, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a441 = ashr <32 x i64> %4620, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4621 = icmp slt <32 x i64> %a441, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a440 = select <32 x i1> %4621, <32 x i64> %a441, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4622 = icmp sgt <32 x i64> %a440, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4623 = select <32 x i1> %4622, <32 x i64> %a440, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4624 = trunc <32 x i64> %4623 to <32 x i32>
  %4625 = sext <32 x i32> %.lcssa2187.us.lcssa2204 to <32 x i64>
  %a445 = mul nsw <32 x i64> %3111, %4625
  %4626 = icmp slt <32 x i64> %a445, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4627 = select <32 x i1> %4626, <32 x i64> %a445, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4628 = add nsw <32 x i64> %4627, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a444 = ashr <32 x i64> %4628, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4629 = icmp slt <32 x i64> %a444, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a443 = select <32 x i1> %4629, <32 x i64> %a444, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4630 = icmp sgt <32 x i64> %a443, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4631 = select <32 x i1> %4630, <32 x i64> %a443, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4632 = trunc <32 x i64> %4631 to <32 x i32>
  %4633 = sext <32 x i32> %.lcssa2189.us.lcssa2207 to <32 x i64>
  %a448 = mul nsw <32 x i64> %3111, %4633
  %4634 = icmp slt <32 x i64> %a448, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4635 = select <32 x i1> %4634, <32 x i64> %a448, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4636 = add nsw <32 x i64> %4635, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a447 = ashr <32 x i64> %4636, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4637 = icmp slt <32 x i64> %a447, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a446 = select <32 x i1> %4637, <32 x i64> %a447, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4638 = icmp sgt <32 x i64> %a446, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4639 = select <32 x i1> %4638, <32 x i64> %a446, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4640 = trunc <32 x i64> %4639 to <32 x i32>
  %4641 = sext <32 x i32> %.lcssa2191.us.lcssa2210 to <32 x i64>
  %a451 = mul nsw <32 x i64> %3111, %4641
  %4642 = icmp slt <32 x i64> %a451, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4643 = select <32 x i1> %4642, <32 x i64> %a451, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4644 = add nsw <32 x i64> %4643, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a450 = ashr <32 x i64> %4644, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4645 = icmp slt <32 x i64> %a450, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a449 = select <32 x i1> %4645, <32 x i64> %a450, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4646 = icmp sgt <32 x i64> %a449, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4647 = select <32 x i1> %4646, <32 x i64> %a449, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4648 = trunc <32 x i64> %4647 to <32 x i32>
  %4649 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4624, <32 x i32> %4075) #11
  %4650 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4649, <32 x i32> %4074) #11
  %4651 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %4650) #11
  %4652 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4632, <32 x i32> %4075) #11
  %4653 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4652, <32 x i32> %4074) #11
  %4654 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4653, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4655 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4651, <32 x i32> %4654) #11
  %4656 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4655) #11
  %4657 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4656) #11
  %4658 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4655) #11
  %4659 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4658) #11
  %4660 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4657, <32 x i32> %4659) #11
  %4661 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4660) #11
  %4662 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4660) #11
  %4663 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %4661, <32 x i32> %4662) #11
  %4664 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3117, <32 x i32> %4663) #11
  %4665 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %4664, <32 x i32> %4076) #11
  %4666 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4073, <32 x i32> %4665) #11
  %4667 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4640, <32 x i32> %4075) #11
  %4668 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4667, <32 x i32> %4074) #11
  %4669 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %4668) #11
  %4670 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4648, <32 x i32> %4075) #11
  %4671 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4670, <32 x i32> %4074) #11
  %4672 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4671, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4673 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4669, <32 x i32> %4672) #11
  %4674 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4673) #11
  %4675 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4674) #11
  %4676 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4673) #11
  %4677 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4676) #11
  %4678 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4675, <32 x i32> %4677) #11
  %4679 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4678) #11
  %4680 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4678) #11
  %4681 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %4679, <32 x i32> %4680) #11
  %4682 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3117, <32 x i32> %4681) #11
  %4683 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %4078, <32 x i32> %4682) #11
  %4684 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4077, <32 x i32> %4683) #11
  %4685 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4666, <32 x i32> %4684) #11
  %4686 = bitcast <64 x i32> %4685 to <32 x i64>
  %4687 = shufflevector <32 x i64> %4686, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4688 = bitcast <8 x i64> %4687 to <32 x i16>
  %4689 = trunc <32 x i16> %4688 to <32 x i8>
  %4690 = shufflevector <32 x i8> %4689, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4691 = bitcast <128 x i8> %4690 to <32 x i32>
  %4692 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %4691, <32 x i32> %3120) #11
  %4693 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %4692, <32 x i32> %3123) #11
  %4694 = bitcast <32 x i32> %4693 to <128 x i8>
  %4695 = shufflevector <128 x i8> %4694, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4696 = mul nsw i32 %.pre-phi2354, %21
  %4697 = add i32 %4080, %4696
  %4698 = getelementptr inbounds i8, i8* %17, i32 %4697
  %4699 = bitcast i8* %4698 to <32 x i8>*
  store <32 x i8> %4695, <32 x i8>* %4699, align 1, !tbaa !217
  %4700 = shufflevector <32 x i64> %4686, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4701 = bitcast <8 x i64> %4700 to <32 x i16>
  %4702 = trunc <32 x i16> %4701 to <32 x i8>
  %4703 = shufflevector <32 x i8> %4702, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4704 = bitcast <128 x i8> %4703 to <32 x i32>
  %4705 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %4704, <32 x i32> %3120) #11
  %4706 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %4705, <32 x i32> %3123) #11
  %4707 = bitcast <32 x i32> %4706 to <128 x i8>
  %4708 = shufflevector <128 x i8> %4707, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4709 = getelementptr inbounds i8, i8* %4698, i32 32
  %4710 = bitcast i8* %4709 to <32 x i8>*
  store <32 x i8> %4708, <32 x i8>* %4710, align 1, !tbaa !217
  %4711 = shufflevector <32 x i64> %4686, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4712 = bitcast <8 x i64> %4711 to <32 x i16>
  %4713 = trunc <32 x i16> %4712 to <32 x i8>
  %4714 = shufflevector <32 x i8> %4713, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4715 = bitcast <128 x i8> %4714 to <32 x i32>
  %4716 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %4715, <32 x i32> %3120) #11
  %4717 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %4716, <32 x i32> %3123) #11
  %4718 = bitcast <32 x i32> %4717 to <128 x i8>
  %4719 = shufflevector <128 x i8> %4718, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4720 = getelementptr inbounds i8, i8* %4698, i32 64
  %4721 = bitcast i8* %4720 to <32 x i8>*
  store <32 x i8> %4719, <32 x i8>* %4721, align 1, !tbaa !217
  %4722 = shufflevector <32 x i64> %4686, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4723 = bitcast <8 x i64> %4722 to <32 x i16>
  %4724 = trunc <32 x i16> %4723 to <32 x i8>
  %4725 = shufflevector <32 x i8> %4724, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4726 = bitcast <128 x i8> %4725 to <32 x i32>
  %4727 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %4726, <32 x i32> %3120) #11
  %4728 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %4727, <32 x i32> %3123) #11
  %4729 = bitcast <32 x i32> %4728 to <128 x i8>
  %4730 = shufflevector <128 x i8> %4729, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4731 = getelementptr inbounds i8, i8* %4698, i32 96
  %4732 = bitcast i8* %4731 to <32 x i8>*
  store <32 x i8> %4730, <32 x i8>* %4732, align 1, !tbaa !217
  %4733 = add nuw nsw i32 %output.s0.x.xo97, 1
  %.not1839 = icmp eq i32 %4733, %20
  br i1 %.not1839, label %"end for output.s0.x.xo96.loopexit", label %"for output.s0.x.xo95"

if.end.i2005:                                     ; preds = %next_bb29
  %4734 = icmp eq i32 %4, 3
  %4735 = icmp eq i32 %6, 3
  %4736 = and i1 %4734, %4735
  %4737 = icmp sgt i32 %4, 0
  %4738 = icmp sgt i32 %6, 0
  %4739 = select i1 %4738, i32 %6, i32 0
  %.op = shl i32 %4, 8
  %4740 = select i1 %4737, i32 %.op, i32 0
  %4741 = mul i32 %4740, %4739
  %4742 = or i32 %4741, 134
  %4743 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i32 %4742, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i2004 = icmp ugt i32 %4742, 16384
  br i1 %cmp7.i2004, label %pseudostack_alloc.exit2010, label %pseudostack_alloc.exit2010.thread

pseudostack_alloc.exit2010.thread:                ; preds = %if.end.i2005
  store i32 %4742, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %then_bb112

pseudostack_alloc.exit2010:                       ; preds = %if.end.i2005
  %call.i2006 = tail call i8* @halide_malloc(i8* null, i32 %4742) #15
  store i8* %call.i2006, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %4742, i32* %.fca.1.gep, align 4, !tbaa !98
  %4744 = bitcast i8* %call.i2006 to i16*
  %.not = icmp eq i8* %call.i2006, null
  br i1 %.not, label %then_bb112, label %"produce filter_zeroed114", !prof !100

then_bb112:                                       ; preds = %pseudostack_alloc.exit2010.thread, %pseudostack_alloc.exit2010
  %4745 = alloca i8*, i32 %4742, align 128
  %4746 = bitcast i8** %4745 to i16*
  %4747 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %4745, i8*** %4747, align 4
  br label %"produce filter_zeroed114"

"produce filter_zeroed114":                       ; preds = %pseudostack_alloc.exit2010, %then_bb112
  %filter_zeroed113 = phi i16* [ %4746, %then_bb112 ], [ %4744, %pseudostack_alloc.exit2010 ]
  %t2399 = icmp sgt i32 %3, 64
  %t2398 = icmp sgt i32 %3, 63
  %4748 = insertelement <64 x i32> undef, i32 %3, i32 0
  %4749 = shufflevector <64 x i32> %4748, <64 x i32> undef, <64 x i32> zeroinitializer
  br i1 %4738, label %"for filter_zeroed.s0.y115.preheader", label %"produce sum_filter132", !prof !101

"for filter_zeroed.s0.y115.preheader":            ; preds = %"produce filter_zeroed114"
  %4750 = icmp sgt <64 x i32> %4749, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4751 = zext i8 %filter_zero to i16
  %4752 = insertelement <64 x i16> undef, i16 %4751, i32 0
  %4753 = shufflevector <64 x i16> %4752, <64 x i16> undef, <64 x i32> zeroinitializer
  %4754 = bitcast <64 x i16> %4753 to <32 x i32>
  %4755 = icmp sgt <64 x i32> %4749, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br i1 %4737, label %"for filter_zeroed.s0.y115.preheader.split.us", label %"produce sum_filter132", !prof !101

"for filter_zeroed.s0.y115.preheader.split.us":   ; preds = %"for filter_zeroed.s0.y115.preheader"
  br i1 %t2398, label %"for filter_zeroed.s0.y115.preheader.split.us.split.us", label %"for filter_zeroed.s0.y115.us.preheader"

"for filter_zeroed.s0.y115.us.preheader":         ; preds = %"for filter_zeroed.s0.y115.preheader.split.us"
  %4756 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %4757 = icmp ult i32 %4756, 7
  %unroll_iter = and i32 %4, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %"for filter_zeroed.s0.y115.us"

"for filter_zeroed.s0.y115.preheader.split.us.split.us": ; preds = %"for filter_zeroed.s0.y115.preheader.split.us"
  br i1 %t2399, label %"for filter_zeroed.s0.y115.us.us.us.preheader", label %"for filter_zeroed.s0.y115.us.us.preheader"

"for filter_zeroed.s0.y115.us.us.preheader":      ; preds = %"for filter_zeroed.s0.y115.preheader.split.us.split.us"
  %4758 = add i32 %4, -1
  %xtraiter2491 = and i32 %4, 7
  %4759 = icmp ult i32 %4758, 7
  %unroll_iter2494 = and i32 %4, -8
  %lcmp.mod2493.not = icmp eq i32 %xtraiter2491, 0
  br label %"for filter_zeroed.s0.y115.us.us"

"for filter_zeroed.s0.y115.us.us.us.preheader":   ; preds = %"for filter_zeroed.s0.y115.preheader.split.us.split.us"
  %4760 = add i32 %4, -1
  %xtraiter2496 = and i32 %4, 3
  %4761 = icmp ult i32 %4760, 3
  %unroll_iter2499 = and i32 %4, -4
  %lcmp.mod2498.not = icmp eq i32 %xtraiter2496, 0
  br label %"for filter_zeroed.s0.y115.us.us.us"

"for filter_zeroed.s0.y115.us.us.us":             ; preds = %"for filter_zeroed.s0.y115.us.us.us.preheader", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us"
  %filter_zeroed.s0.y117.us.us.us = phi i32 [ %4874, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us.us.preheader" ]
  %4762 = mul nsw i32 %filter_zeroed.s0.y117.us.us.us, %7
  %4763 = mul nsw i32 %filter_zeroed.s0.y117.us.us.us, %4
  br i1 %4761, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us.us.us.us"

"for filter_zeroed.s0.x118.us.us.us.us.us":       ; preds = %"for filter_zeroed.s0.y115.us.us.us", %"for filter_zeroed.s0.x118.us.us.us.us.us"
  %filter_zeroed.s0.x120.us.us.us.us.us = phi i32 [ %4851, %"for filter_zeroed.s0.x118.us.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us.us" ]
  %niter2500 = phi i32 [ %niter2500.nsub.3, %"for filter_zeroed.s0.x118.us.us.us.us.us" ], [ %unroll_iter2499, %"for filter_zeroed.s0.y115.us.us.us" ]
  %4764 = mul nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us, %5
  %4765 = add nsw i32 %4764, %4762
  %4766 = getelementptr inbounds i8, i8* %1, i32 %4765
  %4767 = bitcast i8* %4766 to <64 x i8>*
  %4768 = load <64 x i8>, <64 x i8>* %4767, align 1, !tbaa !102
  %4769 = zext <64 x i8> %4768 to <64 x i16>
  %4770 = bitcast <64 x i16> %4769 to <32 x i32>
  %4771 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4770, <32 x i32> %4754) #11
  %4772 = add nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us, %4763
  %4773 = shl nsw i32 %4772, 7
  %4774 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4773
  %4775 = bitcast i16* %4774 to <32 x i32>*
  store <32 x i32> %4771, <32 x i32>* %4775, align 128, !tbaa !105
  %4776 = getelementptr inbounds i8, i8* %4766, i32 64
  %4777 = bitcast i8* %4776 to <64 x i8>*
  %4778 = load <64 x i8>, <64 x i8>* %4777, align 1, !tbaa !102
  %4779 = zext <64 x i8> %4778 to <64 x i16>
  %4780 = bitcast <64 x i16> %4779 to <32 x i32>
  %4781 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4780, <32 x i32> %4754) #11
  %4782 = bitcast <32 x i32> %4781 to <64 x i16>
  %4783 = getelementptr inbounds i16, i16* %4774, i32 64
  %4784 = bitcast i16* %4783 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4782, <64 x i16>* nonnull %4784, i32 128, <64 x i1> %4755), !tbaa !105
  %4785 = or i32 %filter_zeroed.s0.x120.us.us.us.us.us, 1
  %4786 = mul nsw i32 %4785, %5
  %4787 = add nsw i32 %4786, %4762
  %4788 = getelementptr inbounds i8, i8* %1, i32 %4787
  %4789 = bitcast i8* %4788 to <64 x i8>*
  %4790 = load <64 x i8>, <64 x i8>* %4789, align 1, !tbaa !102
  %4791 = zext <64 x i8> %4790 to <64 x i16>
  %4792 = bitcast <64 x i16> %4791 to <32 x i32>
  %4793 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4792, <32 x i32> %4754) #11
  %4794 = add nsw i32 %4785, %4763
  %4795 = shl nsw i32 %4794, 7
  %4796 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4795
  %4797 = bitcast i16* %4796 to <32 x i32>*
  store <32 x i32> %4793, <32 x i32>* %4797, align 128, !tbaa !105
  %4798 = getelementptr inbounds i8, i8* %4788, i32 64
  %4799 = bitcast i8* %4798 to <64 x i8>*
  %4800 = load <64 x i8>, <64 x i8>* %4799, align 1, !tbaa !102
  %4801 = zext <64 x i8> %4800 to <64 x i16>
  %4802 = bitcast <64 x i16> %4801 to <32 x i32>
  %4803 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4802, <32 x i32> %4754) #11
  %4804 = bitcast <32 x i32> %4803 to <64 x i16>
  %4805 = getelementptr inbounds i16, i16* %4796, i32 64
  %4806 = bitcast i16* %4805 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4804, <64 x i16>* nonnull %4806, i32 128, <64 x i1> %4755), !tbaa !105
  %4807 = or i32 %filter_zeroed.s0.x120.us.us.us.us.us, 2
  %4808 = mul nsw i32 %4807, %5
  %4809 = add nsw i32 %4808, %4762
  %4810 = getelementptr inbounds i8, i8* %1, i32 %4809
  %4811 = bitcast i8* %4810 to <64 x i8>*
  %4812 = load <64 x i8>, <64 x i8>* %4811, align 1, !tbaa !102
  %4813 = zext <64 x i8> %4812 to <64 x i16>
  %4814 = bitcast <64 x i16> %4813 to <32 x i32>
  %4815 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4814, <32 x i32> %4754) #11
  %4816 = add nsw i32 %4807, %4763
  %4817 = shl nsw i32 %4816, 7
  %4818 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4817
  %4819 = bitcast i16* %4818 to <32 x i32>*
  store <32 x i32> %4815, <32 x i32>* %4819, align 128, !tbaa !105
  %4820 = getelementptr inbounds i8, i8* %4810, i32 64
  %4821 = bitcast i8* %4820 to <64 x i8>*
  %4822 = load <64 x i8>, <64 x i8>* %4821, align 1, !tbaa !102
  %4823 = zext <64 x i8> %4822 to <64 x i16>
  %4824 = bitcast <64 x i16> %4823 to <32 x i32>
  %4825 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4824, <32 x i32> %4754) #11
  %4826 = bitcast <32 x i32> %4825 to <64 x i16>
  %4827 = getelementptr inbounds i16, i16* %4818, i32 64
  %4828 = bitcast i16* %4827 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4826, <64 x i16>* nonnull %4828, i32 128, <64 x i1> %4755), !tbaa !105
  %4829 = or i32 %filter_zeroed.s0.x120.us.us.us.us.us, 3
  %4830 = mul nsw i32 %4829, %5
  %4831 = add nsw i32 %4830, %4762
  %4832 = getelementptr inbounds i8, i8* %1, i32 %4831
  %4833 = bitcast i8* %4832 to <64 x i8>*
  %4834 = load <64 x i8>, <64 x i8>* %4833, align 1, !tbaa !102
  %4835 = zext <64 x i8> %4834 to <64 x i16>
  %4836 = bitcast <64 x i16> %4835 to <32 x i32>
  %4837 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4836, <32 x i32> %4754) #11
  %4838 = add nsw i32 %4829, %4763
  %4839 = shl nsw i32 %4838, 7
  %4840 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4839
  %4841 = bitcast i16* %4840 to <32 x i32>*
  store <32 x i32> %4837, <32 x i32>* %4841, align 128, !tbaa !105
  %4842 = getelementptr inbounds i8, i8* %4832, i32 64
  %4843 = bitcast i8* %4842 to <64 x i8>*
  %4844 = load <64 x i8>, <64 x i8>* %4843, align 1, !tbaa !102
  %4845 = zext <64 x i8> %4844 to <64 x i16>
  %4846 = bitcast <64 x i16> %4845 to <32 x i32>
  %4847 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4846, <32 x i32> %4754) #11
  %4848 = bitcast <32 x i32> %4847 to <64 x i16>
  %4849 = getelementptr inbounds i16, i16* %4840, i32 64
  %4850 = bitcast i16* %4849 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4848, <64 x i16>* nonnull %4850, i32 128, <64 x i1> %4755), !tbaa !105
  %4851 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us, 4
  %niter2500.nsub.3 = add i32 %niter2500, -4
  %niter2500.ncmp.3 = icmp eq i32 %niter2500.nsub.3, 0
  br i1 %niter2500.ncmp.3, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us.us.us.us"

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x118.us.us.us.us.us", %"for filter_zeroed.s0.y115.us.us.us"
  %filter_zeroed.s0.x120.us.us.us.us.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y115.us.us.us" ], [ %4851, %"for filter_zeroed.s0.x118.us.us.us.us.us" ]
  br i1 %lcmp.mod2498.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x118.us.us.us.us.us.epil"

"for filter_zeroed.s0.x118.us.us.us.us.us.epil":  ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa", %"for filter_zeroed.s0.x118.us.us.us.us.us.epil"
  %filter_zeroed.s0.x120.us.us.us.us.us.epil = phi i32 [ %4873, %"for filter_zeroed.s0.x118.us.us.us.us.us.epil" ], [ %filter_zeroed.s0.x120.us.us.us.us.us.unr, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %epil.iter2497 = phi i32 [ %epil.iter2497.sub, %"for filter_zeroed.s0.x118.us.us.us.us.us.epil" ], [ %xtraiter2496, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %4852 = mul nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us.epil, %5
  %4853 = add nsw i32 %4852, %4762
  %4854 = getelementptr inbounds i8, i8* %1, i32 %4853
  %4855 = bitcast i8* %4854 to <64 x i8>*
  %4856 = load <64 x i8>, <64 x i8>* %4855, align 1, !tbaa !102
  %4857 = zext <64 x i8> %4856 to <64 x i16>
  %4858 = bitcast <64 x i16> %4857 to <32 x i32>
  %4859 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4858, <32 x i32> %4754) #11
  %4860 = add nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us.epil, %4763
  %4861 = shl nsw i32 %4860, 7
  %4862 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4861
  %4863 = bitcast i16* %4862 to <32 x i32>*
  store <32 x i32> %4859, <32 x i32>* %4863, align 128, !tbaa !105
  %4864 = getelementptr inbounds i8, i8* %4854, i32 64
  %4865 = bitcast i8* %4864 to <64 x i8>*
  %4866 = load <64 x i8>, <64 x i8>* %4865, align 1, !tbaa !102
  %4867 = zext <64 x i8> %4866 to <64 x i16>
  %4868 = bitcast <64 x i16> %4867 to <32 x i32>
  %4869 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4868, <32 x i32> %4754) #11
  %4870 = bitcast <32 x i32> %4869 to <64 x i16>
  %4871 = getelementptr inbounds i16, i16* %4862, i32 64
  %4872 = bitcast i16* %4871 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4870, <64 x i16>* nonnull %4872, i32 128, <64 x i1> %4755), !tbaa !105
  %4873 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us.epil, 1
  %epil.iter2497.sub = add i32 %epil.iter2497, -1
  %epil.iter2497.cmp.not = icmp eq i32 %epil.iter2497.sub, 0
  br i1 %epil.iter2497.cmp.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x118.us.us.us.us.us.epil", !llvm.loop !221

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us": ; preds = %"for filter_zeroed.s0.x118.us.us.us.us.us.epil", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa"
  %4874 = add nuw nsw i32 %filter_zeroed.s0.y117.us.us.us, 1
  %.not1830.us.us.us = icmp eq i32 %4874, %6
  br i1 %.not1830.us.us.us, label %"produce sum_filter132", label %"for filter_zeroed.s0.y115.us.us.us"

"for filter_zeroed.s0.y115.us.us":                ; preds = %"for filter_zeroed.s0.y115.us.us.preheader", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us"
  %filter_zeroed.s0.y117.us.us = phi i32 [ %4994, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us.preheader" ]
  %4875 = mul nsw i32 %filter_zeroed.s0.y117.us.us, %7
  %4876 = mul nsw i32 %filter_zeroed.s0.y117.us.us, %4
  br i1 %4759, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us2157.us"

"for filter_zeroed.s0.x118.us.us2157.us":         ; preds = %"for filter_zeroed.s0.y115.us.us", %"for filter_zeroed.s0.x118.us.us2157.us"
  %filter_zeroed.s0.x120.us.us2158.us = phi i32 [ %4980, %"for filter_zeroed.s0.x118.us.us2157.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us" ]
  %niter2495 = phi i32 [ %niter2495.nsub.7, %"for filter_zeroed.s0.x118.us.us2157.us" ], [ %unroll_iter2494, %"for filter_zeroed.s0.y115.us.us" ]
  %4877 = mul nsw i32 %filter_zeroed.s0.x120.us.us2158.us, %5
  %4878 = add nsw i32 %4877, %4875
  %4879 = getelementptr inbounds i8, i8* %1, i32 %4878
  %4880 = bitcast i8* %4879 to <64 x i8>*
  %4881 = load <64 x i8>, <64 x i8>* %4880, align 1, !tbaa !102
  %4882 = zext <64 x i8> %4881 to <64 x i16>
  %4883 = bitcast <64 x i16> %4882 to <32 x i32>
  %4884 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4883, <32 x i32> %4754) #11
  %4885 = add nsw i32 %filter_zeroed.s0.x120.us.us2158.us, %4876
  %4886 = shl nsw i32 %4885, 7
  %4887 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4886
  %4888 = bitcast i16* %4887 to <32 x i32>*
  store <32 x i32> %4884, <32 x i32>* %4888, align 128, !tbaa !105
  %4889 = or i32 %filter_zeroed.s0.x120.us.us2158.us, 1
  %4890 = mul nsw i32 %4889, %5
  %4891 = add nsw i32 %4890, %4875
  %4892 = getelementptr inbounds i8, i8* %1, i32 %4891
  %4893 = bitcast i8* %4892 to <64 x i8>*
  %4894 = load <64 x i8>, <64 x i8>* %4893, align 1, !tbaa !102
  %4895 = zext <64 x i8> %4894 to <64 x i16>
  %4896 = bitcast <64 x i16> %4895 to <32 x i32>
  %4897 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4896, <32 x i32> %4754) #11
  %4898 = add nsw i32 %4889, %4876
  %4899 = shl nsw i32 %4898, 7
  %4900 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4899
  %4901 = bitcast i16* %4900 to <32 x i32>*
  store <32 x i32> %4897, <32 x i32>* %4901, align 128, !tbaa !105
  %4902 = or i32 %filter_zeroed.s0.x120.us.us2158.us, 2
  %4903 = mul nsw i32 %4902, %5
  %4904 = add nsw i32 %4903, %4875
  %4905 = getelementptr inbounds i8, i8* %1, i32 %4904
  %4906 = bitcast i8* %4905 to <64 x i8>*
  %4907 = load <64 x i8>, <64 x i8>* %4906, align 1, !tbaa !102
  %4908 = zext <64 x i8> %4907 to <64 x i16>
  %4909 = bitcast <64 x i16> %4908 to <32 x i32>
  %4910 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4909, <32 x i32> %4754) #11
  %4911 = add nsw i32 %4902, %4876
  %4912 = shl nsw i32 %4911, 7
  %4913 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4912
  %4914 = bitcast i16* %4913 to <32 x i32>*
  store <32 x i32> %4910, <32 x i32>* %4914, align 128, !tbaa !105
  %4915 = or i32 %filter_zeroed.s0.x120.us.us2158.us, 3
  %4916 = mul nsw i32 %4915, %5
  %4917 = add nsw i32 %4916, %4875
  %4918 = getelementptr inbounds i8, i8* %1, i32 %4917
  %4919 = bitcast i8* %4918 to <64 x i8>*
  %4920 = load <64 x i8>, <64 x i8>* %4919, align 1, !tbaa !102
  %4921 = zext <64 x i8> %4920 to <64 x i16>
  %4922 = bitcast <64 x i16> %4921 to <32 x i32>
  %4923 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4922, <32 x i32> %4754) #11
  %4924 = add nsw i32 %4915, %4876
  %4925 = shl nsw i32 %4924, 7
  %4926 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4925
  %4927 = bitcast i16* %4926 to <32 x i32>*
  store <32 x i32> %4923, <32 x i32>* %4927, align 128, !tbaa !105
  %4928 = or i32 %filter_zeroed.s0.x120.us.us2158.us, 4
  %4929 = mul nsw i32 %4928, %5
  %4930 = add nsw i32 %4929, %4875
  %4931 = getelementptr inbounds i8, i8* %1, i32 %4930
  %4932 = bitcast i8* %4931 to <64 x i8>*
  %4933 = load <64 x i8>, <64 x i8>* %4932, align 1, !tbaa !102
  %4934 = zext <64 x i8> %4933 to <64 x i16>
  %4935 = bitcast <64 x i16> %4934 to <32 x i32>
  %4936 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4935, <32 x i32> %4754) #11
  %4937 = add nsw i32 %4928, %4876
  %4938 = shl nsw i32 %4937, 7
  %4939 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4938
  %4940 = bitcast i16* %4939 to <32 x i32>*
  store <32 x i32> %4936, <32 x i32>* %4940, align 128, !tbaa !105
  %4941 = or i32 %filter_zeroed.s0.x120.us.us2158.us, 5
  %4942 = mul nsw i32 %4941, %5
  %4943 = add nsw i32 %4942, %4875
  %4944 = getelementptr inbounds i8, i8* %1, i32 %4943
  %4945 = bitcast i8* %4944 to <64 x i8>*
  %4946 = load <64 x i8>, <64 x i8>* %4945, align 1, !tbaa !102
  %4947 = zext <64 x i8> %4946 to <64 x i16>
  %4948 = bitcast <64 x i16> %4947 to <32 x i32>
  %4949 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4948, <32 x i32> %4754) #11
  %4950 = add nsw i32 %4941, %4876
  %4951 = shl nsw i32 %4950, 7
  %4952 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4951
  %4953 = bitcast i16* %4952 to <32 x i32>*
  store <32 x i32> %4949, <32 x i32>* %4953, align 128, !tbaa !105
  %4954 = or i32 %filter_zeroed.s0.x120.us.us2158.us, 6
  %4955 = mul nsw i32 %4954, %5
  %4956 = add nsw i32 %4955, %4875
  %4957 = getelementptr inbounds i8, i8* %1, i32 %4956
  %4958 = bitcast i8* %4957 to <64 x i8>*
  %4959 = load <64 x i8>, <64 x i8>* %4958, align 1, !tbaa !102
  %4960 = zext <64 x i8> %4959 to <64 x i16>
  %4961 = bitcast <64 x i16> %4960 to <32 x i32>
  %4962 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4961, <32 x i32> %4754) #11
  %4963 = add nsw i32 %4954, %4876
  %4964 = shl nsw i32 %4963, 7
  %4965 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4964
  %4966 = bitcast i16* %4965 to <32 x i32>*
  store <32 x i32> %4962, <32 x i32>* %4966, align 128, !tbaa !105
  %4967 = or i32 %filter_zeroed.s0.x120.us.us2158.us, 7
  %4968 = mul nsw i32 %4967, %5
  %4969 = add nsw i32 %4968, %4875
  %4970 = getelementptr inbounds i8, i8* %1, i32 %4969
  %4971 = bitcast i8* %4970 to <64 x i8>*
  %4972 = load <64 x i8>, <64 x i8>* %4971, align 1, !tbaa !102
  %4973 = zext <64 x i8> %4972 to <64 x i16>
  %4974 = bitcast <64 x i16> %4973 to <32 x i32>
  %4975 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4974, <32 x i32> %4754) #11
  %4976 = add nsw i32 %4967, %4876
  %4977 = shl nsw i32 %4976, 7
  %4978 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4977
  %4979 = bitcast i16* %4978 to <32 x i32>*
  store <32 x i32> %4975, <32 x i32>* %4979, align 128, !tbaa !105
  %4980 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us2158.us, 8
  %niter2495.nsub.7 = add i32 %niter2495, -8
  %niter2495.ncmp.7 = icmp eq i32 %niter2495.nsub.7, 0
  br i1 %niter2495.ncmp.7, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us2157.us"

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x118.us.us2157.us", %"for filter_zeroed.s0.y115.us.us"
  %filter_zeroed.s0.x120.us.us2158.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y115.us.us" ], [ %4980, %"for filter_zeroed.s0.x118.us.us2157.us" ]
  br i1 %lcmp.mod2493.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us", label %"for filter_zeroed.s0.x118.us.us2157.us.epil"

"for filter_zeroed.s0.x118.us.us2157.us.epil":    ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us.unr-lcssa", %"for filter_zeroed.s0.x118.us.us2157.us.epil"
  %filter_zeroed.s0.x120.us.us2158.us.epil = phi i32 [ %4993, %"for filter_zeroed.s0.x118.us.us2157.us.epil" ], [ %filter_zeroed.s0.x120.us.us2158.us.unr, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us.unr-lcssa" ]
  %epil.iter2492 = phi i32 [ %epil.iter2492.sub, %"for filter_zeroed.s0.x118.us.us2157.us.epil" ], [ %xtraiter2491, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us.unr-lcssa" ]
  %4981 = mul nsw i32 %filter_zeroed.s0.x120.us.us2158.us.epil, %5
  %4982 = add nsw i32 %4981, %4875
  %4983 = getelementptr inbounds i8, i8* %1, i32 %4982
  %4984 = bitcast i8* %4983 to <64 x i8>*
  %4985 = load <64 x i8>, <64 x i8>* %4984, align 1, !tbaa !102
  %4986 = zext <64 x i8> %4985 to <64 x i16>
  %4987 = bitcast <64 x i16> %4986 to <32 x i32>
  %4988 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4987, <32 x i32> %4754) #11
  %4989 = add nsw i32 %filter_zeroed.s0.x120.us.us2158.us.epil, %4876
  %4990 = shl nsw i32 %4989, 7
  %4991 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4990
  %4992 = bitcast i16* %4991 to <32 x i32>*
  store <32 x i32> %4988, <32 x i32>* %4992, align 128, !tbaa !105
  %4993 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us2158.us.epil, 1
  %epil.iter2492.sub = add i32 %epil.iter2492, -1
  %epil.iter2492.cmp.not = icmp eq i32 %epil.iter2492.sub, 0
  br i1 %epil.iter2492.cmp.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us", label %"for filter_zeroed.s0.x118.us.us2157.us.epil", !llvm.loop !222

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us": ; preds = %"for filter_zeroed.s0.x118.us.us2157.us.epil", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us.unr-lcssa"
  %4994 = add nuw nsw i32 %filter_zeroed.s0.y117.us.us, 1
  %.not1830.us.us = icmp eq i32 %4994, %6
  br i1 %.not1830.us.us, label %"produce sum_filter132", label %"for filter_zeroed.s0.y115.us.us"

"for filter_zeroed.s0.y115.us":                   ; preds = %"for filter_zeroed.s0.y115.us.preheader", %"end for filter_zeroed.s0.x119.loopexit.split.us2155"
  %filter_zeroed.s0.y117.us = phi i32 [ %5123, %"end for filter_zeroed.s0.x119.loopexit.split.us2155" ], [ 0, %"for filter_zeroed.s0.y115.us.preheader" ]
  %4995 = mul nsw i32 %filter_zeroed.s0.y117.us, %7
  %4996 = mul nsw i32 %filter_zeroed.s0.y117.us, %4
  br i1 %4757, label %"end for filter_zeroed.s0.x119.loopexit.split.us2155.unr-lcssa", label %"for filter_zeroed.s0.x118.us2152"

"for filter_zeroed.s0.x118.us2152":               ; preds = %"for filter_zeroed.s0.y115.us", %"for filter_zeroed.s0.x118.us2152"
  %filter_zeroed.s0.x120.us2153 = phi i32 [ %5108, %"for filter_zeroed.s0.x118.us2152" ], [ 0, %"for filter_zeroed.s0.y115.us" ]
  %niter = phi i32 [ %niter.nsub.7, %"for filter_zeroed.s0.x118.us2152" ], [ %unroll_iter, %"for filter_zeroed.s0.y115.us" ]
  %4997 = mul nsw i32 %filter_zeroed.s0.x120.us2153, %5
  %4998 = add nsw i32 %4997, %4995
  %4999 = getelementptr inbounds i8, i8* %1, i32 %4998
  %5000 = bitcast i8* %4999 to <64 x i8>*
  %5001 = load <64 x i8>, <64 x i8>* %5000, align 1, !tbaa !102
  %5002 = zext <64 x i8> %5001 to <64 x i16>
  %5003 = bitcast <64 x i16> %5002 to <32 x i32>
  %5004 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5003, <32 x i32> %4754) #11
  %5005 = bitcast <32 x i32> %5004 to <64 x i16>
  %5006 = add nsw i32 %filter_zeroed.s0.x120.us2153, %4996
  %5007 = shl nsw i32 %5006, 7
  %5008 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5007
  %5009 = bitcast i16* %5008 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5005, <64 x i16>* %5009, i32 128, <64 x i1> %4750), !tbaa !105
  %5010 = or i32 %filter_zeroed.s0.x120.us2153, 1
  %5011 = mul nsw i32 %5010, %5
  %5012 = add nsw i32 %5011, %4995
  %5013 = getelementptr inbounds i8, i8* %1, i32 %5012
  %5014 = bitcast i8* %5013 to <64 x i8>*
  %5015 = load <64 x i8>, <64 x i8>* %5014, align 1, !tbaa !102
  %5016 = zext <64 x i8> %5015 to <64 x i16>
  %5017 = bitcast <64 x i16> %5016 to <32 x i32>
  %5018 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5017, <32 x i32> %4754) #11
  %5019 = bitcast <32 x i32> %5018 to <64 x i16>
  %5020 = add nsw i32 %5010, %4996
  %5021 = shl nsw i32 %5020, 7
  %5022 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5021
  %5023 = bitcast i16* %5022 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5019, <64 x i16>* %5023, i32 128, <64 x i1> %4750), !tbaa !105
  %5024 = or i32 %filter_zeroed.s0.x120.us2153, 2
  %5025 = mul nsw i32 %5024, %5
  %5026 = add nsw i32 %5025, %4995
  %5027 = getelementptr inbounds i8, i8* %1, i32 %5026
  %5028 = bitcast i8* %5027 to <64 x i8>*
  %5029 = load <64 x i8>, <64 x i8>* %5028, align 1, !tbaa !102
  %5030 = zext <64 x i8> %5029 to <64 x i16>
  %5031 = bitcast <64 x i16> %5030 to <32 x i32>
  %5032 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5031, <32 x i32> %4754) #11
  %5033 = bitcast <32 x i32> %5032 to <64 x i16>
  %5034 = add nsw i32 %5024, %4996
  %5035 = shl nsw i32 %5034, 7
  %5036 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5035
  %5037 = bitcast i16* %5036 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5033, <64 x i16>* %5037, i32 128, <64 x i1> %4750), !tbaa !105
  %5038 = or i32 %filter_zeroed.s0.x120.us2153, 3
  %5039 = mul nsw i32 %5038, %5
  %5040 = add nsw i32 %5039, %4995
  %5041 = getelementptr inbounds i8, i8* %1, i32 %5040
  %5042 = bitcast i8* %5041 to <64 x i8>*
  %5043 = load <64 x i8>, <64 x i8>* %5042, align 1, !tbaa !102
  %5044 = zext <64 x i8> %5043 to <64 x i16>
  %5045 = bitcast <64 x i16> %5044 to <32 x i32>
  %5046 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5045, <32 x i32> %4754) #11
  %5047 = bitcast <32 x i32> %5046 to <64 x i16>
  %5048 = add nsw i32 %5038, %4996
  %5049 = shl nsw i32 %5048, 7
  %5050 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5049
  %5051 = bitcast i16* %5050 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5047, <64 x i16>* %5051, i32 128, <64 x i1> %4750), !tbaa !105
  %5052 = or i32 %filter_zeroed.s0.x120.us2153, 4
  %5053 = mul nsw i32 %5052, %5
  %5054 = add nsw i32 %5053, %4995
  %5055 = getelementptr inbounds i8, i8* %1, i32 %5054
  %5056 = bitcast i8* %5055 to <64 x i8>*
  %5057 = load <64 x i8>, <64 x i8>* %5056, align 1, !tbaa !102
  %5058 = zext <64 x i8> %5057 to <64 x i16>
  %5059 = bitcast <64 x i16> %5058 to <32 x i32>
  %5060 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5059, <32 x i32> %4754) #11
  %5061 = bitcast <32 x i32> %5060 to <64 x i16>
  %5062 = add nsw i32 %5052, %4996
  %5063 = shl nsw i32 %5062, 7
  %5064 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5063
  %5065 = bitcast i16* %5064 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5061, <64 x i16>* %5065, i32 128, <64 x i1> %4750), !tbaa !105
  %5066 = or i32 %filter_zeroed.s0.x120.us2153, 5
  %5067 = mul nsw i32 %5066, %5
  %5068 = add nsw i32 %5067, %4995
  %5069 = getelementptr inbounds i8, i8* %1, i32 %5068
  %5070 = bitcast i8* %5069 to <64 x i8>*
  %5071 = load <64 x i8>, <64 x i8>* %5070, align 1, !tbaa !102
  %5072 = zext <64 x i8> %5071 to <64 x i16>
  %5073 = bitcast <64 x i16> %5072 to <32 x i32>
  %5074 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5073, <32 x i32> %4754) #11
  %5075 = bitcast <32 x i32> %5074 to <64 x i16>
  %5076 = add nsw i32 %5066, %4996
  %5077 = shl nsw i32 %5076, 7
  %5078 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5077
  %5079 = bitcast i16* %5078 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5075, <64 x i16>* %5079, i32 128, <64 x i1> %4750), !tbaa !105
  %5080 = or i32 %filter_zeroed.s0.x120.us2153, 6
  %5081 = mul nsw i32 %5080, %5
  %5082 = add nsw i32 %5081, %4995
  %5083 = getelementptr inbounds i8, i8* %1, i32 %5082
  %5084 = bitcast i8* %5083 to <64 x i8>*
  %5085 = load <64 x i8>, <64 x i8>* %5084, align 1, !tbaa !102
  %5086 = zext <64 x i8> %5085 to <64 x i16>
  %5087 = bitcast <64 x i16> %5086 to <32 x i32>
  %5088 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5087, <32 x i32> %4754) #11
  %5089 = bitcast <32 x i32> %5088 to <64 x i16>
  %5090 = add nsw i32 %5080, %4996
  %5091 = shl nsw i32 %5090, 7
  %5092 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5091
  %5093 = bitcast i16* %5092 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5089, <64 x i16>* %5093, i32 128, <64 x i1> %4750), !tbaa !105
  %5094 = or i32 %filter_zeroed.s0.x120.us2153, 7
  %5095 = mul nsw i32 %5094, %5
  %5096 = add nsw i32 %5095, %4995
  %5097 = getelementptr inbounds i8, i8* %1, i32 %5096
  %5098 = bitcast i8* %5097 to <64 x i8>*
  %5099 = load <64 x i8>, <64 x i8>* %5098, align 1, !tbaa !102
  %5100 = zext <64 x i8> %5099 to <64 x i16>
  %5101 = bitcast <64 x i16> %5100 to <32 x i32>
  %5102 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5101, <32 x i32> %4754) #11
  %5103 = bitcast <32 x i32> %5102 to <64 x i16>
  %5104 = add nsw i32 %5094, %4996
  %5105 = shl nsw i32 %5104, 7
  %5106 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5105
  %5107 = bitcast i16* %5106 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5103, <64 x i16>* %5107, i32 128, <64 x i1> %4750), !tbaa !105
  %5108 = add nuw nsw i32 %filter_zeroed.s0.x120.us2153, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for filter_zeroed.s0.x119.loopexit.split.us2155.unr-lcssa", label %"for filter_zeroed.s0.x118.us2152"

"end for filter_zeroed.s0.x119.loopexit.split.us2155.unr-lcssa": ; preds = %"for filter_zeroed.s0.x118.us2152", %"for filter_zeroed.s0.y115.us"
  %filter_zeroed.s0.x120.us2153.unr = phi i32 [ 0, %"for filter_zeroed.s0.y115.us" ], [ %5108, %"for filter_zeroed.s0.x118.us2152" ]
  br i1 %lcmp.mod.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us2155", label %"for filter_zeroed.s0.x118.us2152.epil"

"for filter_zeroed.s0.x118.us2152.epil":          ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us2155.unr-lcssa", %"for filter_zeroed.s0.x118.us2152.epil"
  %filter_zeroed.s0.x120.us2153.epil = phi i32 [ %5122, %"for filter_zeroed.s0.x118.us2152.epil" ], [ %filter_zeroed.s0.x120.us2153.unr, %"end for filter_zeroed.s0.x119.loopexit.split.us2155.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for filter_zeroed.s0.x118.us2152.epil" ], [ %xtraiter, %"end for filter_zeroed.s0.x119.loopexit.split.us2155.unr-lcssa" ]
  %5109 = mul nsw i32 %filter_zeroed.s0.x120.us2153.epil, %5
  %5110 = add nsw i32 %5109, %4995
  %5111 = getelementptr inbounds i8, i8* %1, i32 %5110
  %5112 = bitcast i8* %5111 to <64 x i8>*
  %5113 = load <64 x i8>, <64 x i8>* %5112, align 1, !tbaa !102
  %5114 = zext <64 x i8> %5113 to <64 x i16>
  %5115 = bitcast <64 x i16> %5114 to <32 x i32>
  %5116 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %5115, <32 x i32> %4754) #11
  %5117 = bitcast <32 x i32> %5116 to <64 x i16>
  %5118 = add nsw i32 %filter_zeroed.s0.x120.us2153.epil, %4996
  %5119 = shl nsw i32 %5118, 7
  %5120 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5119
  %5121 = bitcast i16* %5120 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %5117, <64 x i16>* %5121, i32 128, <64 x i1> %4750), !tbaa !105
  %5122 = add nuw nsw i32 %filter_zeroed.s0.x120.us2153.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us2155", label %"for filter_zeroed.s0.x118.us2152.epil", !llvm.loop !223

"end for filter_zeroed.s0.x119.loopexit.split.us2155": ; preds = %"for filter_zeroed.s0.x118.us2152.epil", %"end for filter_zeroed.s0.x119.loopexit.split.us2155.unr-lcssa"
  %5123 = add nuw nsw i32 %filter_zeroed.s0.y117.us, 1
  %.not1830.us = icmp eq i32 %5123, %6
  br i1 %.not1830.us, label %"produce sum_filter132", label %"for filter_zeroed.s0.y115.us"

"produce sum_filter132":                          ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us2155", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2160.us", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us", %"produce filter_zeroed114", %"for filter_zeroed.s0.y115.preheader"
  %5124 = icmp sgt <64 x i32> %4749, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5125 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %5126 = bitcast [128 x i32]* %sum_filter1817 to <32 x i32>*
  %5127 = shufflevector <64 x i1> %5124, <64 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5125, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  %5128 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  %5129 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 32
  %5130 = bitcast i32* %5129 to <32 x i32>*
  %5131 = shufflevector <64 x i1> %5124, <64 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5128, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  %5132 = icmp sgt <64 x i32> %4749, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5133 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 64
  %5134 = bitcast i32* %5133 to <32 x i32>*
  %5135 = shufflevector <64 x i1> %5132, <64 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5125, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  %5136 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 96
  %5137 = bitcast i32* %5136 to <32 x i32>*
  %5138 = shufflevector <64 x i1> %5132, <64 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5128, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  %brmerge2409.demorgan = and i1 %4738, %4737
  br i1 %brmerge2409.demorgan, label %"for sum_filter.s1.r19$y133.preheader.split.us", label %"consume sum_filter163", !prof !224

"for sum_filter.s1.r19$y133.preheader.split.us":  ; preds = %"produce sum_filter132"
  %5139 = insertelement <128 x i32> undef, i32 %3, i32 0
  %5140 = shufflevector <128 x i32> %5139, <128 x i32> undef, <128 x i32> zeroinitializer
  %t2132 = icmp sgt <128 x i32> %5140, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5141 = zext <128 x i1> %t2132 to <128 x i8>
  %5142 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %5141) #9
  %5143 = and i8 %5142, 1
  %t2486.not.us = icmp eq i8 %5143, 0
  br i1 %t2486.not.us, label %"for sum_filter.s1.r19$y133.preheader.split.us.split.us", label %"for sum_filter.s1.r19$y133.us.preheader"

"for sum_filter.s1.r19$y133.us.preheader":        ; preds = %"for sum_filter.s1.r19$y133.preheader.split.us"
  %xtraiter2501 = and i32 %4, 1
  %5144 = icmp eq i32 %4, 1
  %unroll_iter2503 = and i32 %4, -2
  %lcmp.mod2502.not = icmp eq i32 %xtraiter2501, 0
  br label %"for sum_filter.s1.r19$y133.us"

"for sum_filter.s1.r19$y133.preheader.split.us.split.us": ; preds = %"for sum_filter.s1.r19$y133.preheader.split.us"
  %5145 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5125) #11
  %5146 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5145, <64 x i32> zeroinitializer) #11
  %5147 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5146)
  %5148 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5146)
  %5149 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5128) #11
  %5150 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5149, <64 x i32> zeroinitializer) #11
  %5151 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5150)
  %5152 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5150)
  %5153 = add i32 %4, -1
  %xtraiter2505 = and i32 %4, 7
  %5154 = icmp ult i32 %5153, 7
  %unroll_iter2508 = and i32 %4, -8
  %lcmp.mod2507.not = icmp eq i32 %xtraiter2505, 0
  br label %"for sum_filter.s1.r19$y133.us.us"

"for sum_filter.s1.r19$y133.us.us":               ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", %"for sum_filter.s1.r19$y133.preheader.split.us.split.us"
  %"sum_filter.s1.r19$y135.us.us" = phi i32 [ %5155, %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us" ], [ 0, %"for sum_filter.s1.r19$y133.preheader.split.us.split.us" ]
  br i1 %5154, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x136.us.us.us"

"for sum_filter.s1.r19$x136.us.us.us":            ; preds = %"for sum_filter.s1.r19$y133.us.us", %"for sum_filter.s1.r19$x136.us.us.us"
  %niter2509 = phi i32 [ %niter2509.nsub.7, %"for sum_filter.s1.r19$x136.us.us.us" ], [ %unroll_iter2508, %"for sum_filter.s1.r19$y133.us.us" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  %niter2509.nsub.7 = add i32 %niter2509, -8
  %niter2509.ncmp.7 = icmp eq i32 %niter2509.nsub.7, 0
  br i1 %niter2509.ncmp.7, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x136.us.us.us"

"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x136.us.us.us", %"for sum_filter.s1.r19$y133.us.us"
  br i1 %lcmp.mod2507.not, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x136.us.us.us.epil"

"for sum_filter.s1.r19$x136.us.us.us.epil":       ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa", %"for sum_filter.s1.r19$x136.us.us.us.epil"
  %epil.iter2506 = phi i32 [ %epil.iter2506.sub, %"for sum_filter.s1.r19$x136.us.us.us.epil" ], [ %xtraiter2505, %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5147, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5148, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5151, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5152, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  %epil.iter2506.sub = add i32 %epil.iter2506, -1
  %epil.iter2506.cmp.not = icmp eq i32 %epil.iter2506.sub, 0
  br i1 %epil.iter2506.cmp.not, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x136.us.us.us.epil", !llvm.loop !225

"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us": ; preds = %"for sum_filter.s1.r19$x136.us.us.us.epil", %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa"
  %5155 = add nuw nsw i32 %"sum_filter.s1.r19$y135.us.us", 1
  %.not1828.us.us = icmp eq i32 %5155, %6
  br i1 %.not1828.us.us, label %"consume sum_filter163", label %"for sum_filter.s1.r19$y133.us.us"

"for sum_filter.s1.r19$y133.us":                  ; preds = %"for sum_filter.s1.r19$y133.us.preheader", %"end for sum_filter.s1.r19$x137.loopexit.split.us2165"
  %"sum_filter.s1.r19$y135.us" = phi i32 [ %5258, %"end for sum_filter.s1.r19$x137.loopexit.split.us2165" ], [ 0, %"for sum_filter.s1.r19$y133.us.preheader" ]
  %5156 = mul nsw i32 %"sum_filter.s1.r19$y135.us", %4
  br i1 %5144, label %"end for sum_filter.s1.r19$x137.loopexit.split.us2165.unr-lcssa", label %"for sum_filter.s1.r19$x136.us2162"

"for sum_filter.s1.r19$x136.us2162":              ; preds = %"for sum_filter.s1.r19$y133.us", %"for sum_filter.s1.r19$x136.us2162"
  %"sum_filter.s1.r19$x138.us2163" = phi i32 [ %5224, %"for sum_filter.s1.r19$x136.us2162" ], [ 0, %"for sum_filter.s1.r19$y133.us" ]
  %niter2504 = phi i32 [ %niter2504.nsub.1, %"for sum_filter.s1.r19$x136.us2162" ], [ %unroll_iter2503, %"for sum_filter.s1.r19$y133.us" ]
  %5157 = load <32 x i32>, <32 x i32>* %5126, align 128, !tbaa !111
  %5158 = load <32 x i32>, <32 x i32>* %5130, align 128, !tbaa !119
  %5159 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5158, <32 x i32> %5157)
  %5160 = shufflevector <64 x i32> %5159, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5161 = bitcast <128 x i32> %5160 to <64 x i64>
  %5162 = shufflevector <64 x i64> %5161, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5163 = bitcast <32 x i64> %5162 to <64 x i32>
  %5164 = add nsw i32 %"sum_filter.s1.r19$x138.us2163", %5156
  %5165 = shl nsw i32 %5164, 7
  %5166 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5165
  %5167 = bitcast i16* %5166 to <32 x i32>*
  %5168 = load <32 x i32>, <32 x i32>* %5167, align 128, !tbaa !105
  %5169 = getelementptr inbounds i16, i16* %5166, i32 64
  %5170 = bitcast i16* %5169 to <32 x i32>*
  %5171 = load <32 x i32>, <32 x i32>* %5170, align 128, !tbaa !105
  %5172 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5171, <32 x i32> %5168)
  %5173 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5172)
  %5174 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5173) #11
  %5175 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5174, <64 x i32> %5163) #11
  %5176 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5175)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5176, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  %5177 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5175)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5177, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  %5178 = load <32 x i32>, <32 x i32>* %5134, align 128, !tbaa !121
  %5179 = load <32 x i32>, <32 x i32>* %5137, align 128, !tbaa !124
  %5180 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5179, <32 x i32> %5178)
  %5181 = shufflevector <64 x i32> %5180, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5182 = bitcast <128 x i32> %5181 to <64 x i64>
  %5183 = shufflevector <64 x i64> %5182, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5184 = bitcast <32 x i64> %5183 to <64 x i32>
  %5185 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5172)
  %5186 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5185) #11
  %5187 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5186, <64 x i32> %5184) #11
  %5188 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5187)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5188, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  %5189 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5187)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5189, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  %5190 = or i32 %"sum_filter.s1.r19$x138.us2163", 1
  %5191 = load <32 x i32>, <32 x i32>* %5126, align 128, !tbaa !111
  %5192 = load <32 x i32>, <32 x i32>* %5130, align 128, !tbaa !119
  %5193 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5192, <32 x i32> %5191)
  %5194 = shufflevector <64 x i32> %5193, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5195 = bitcast <128 x i32> %5194 to <64 x i64>
  %5196 = shufflevector <64 x i64> %5195, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5197 = bitcast <32 x i64> %5196 to <64 x i32>
  %5198 = add nsw i32 %5190, %5156
  %5199 = shl nsw i32 %5198, 7
  %5200 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5199
  %5201 = bitcast i16* %5200 to <32 x i32>*
  %5202 = load <32 x i32>, <32 x i32>* %5201, align 128, !tbaa !105
  %5203 = getelementptr inbounds i16, i16* %5200, i32 64
  %5204 = bitcast i16* %5203 to <32 x i32>*
  %5205 = load <32 x i32>, <32 x i32>* %5204, align 128, !tbaa !105
  %5206 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5205, <32 x i32> %5202)
  %5207 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5206)
  %5208 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5207) #11
  %5209 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5208, <64 x i32> %5197) #11
  %5210 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5209)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5210, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  %5211 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5209)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5211, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  %5212 = load <32 x i32>, <32 x i32>* %5134, align 128, !tbaa !121
  %5213 = load <32 x i32>, <32 x i32>* %5137, align 128, !tbaa !124
  %5214 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5213, <32 x i32> %5212)
  %5215 = shufflevector <64 x i32> %5214, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5216 = bitcast <128 x i32> %5215 to <64 x i64>
  %5217 = shufflevector <64 x i64> %5216, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5218 = bitcast <32 x i64> %5217 to <64 x i32>
  %5219 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5206)
  %5220 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5219) #11
  %5221 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5220, <64 x i32> %5218) #11
  %5222 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5221)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5222, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  %5223 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5221)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5223, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  %5224 = add nuw nsw i32 %"sum_filter.s1.r19$x138.us2163", 2
  %niter2504.nsub.1 = add i32 %niter2504, -2
  %niter2504.ncmp.1 = icmp eq i32 %niter2504.nsub.1, 0
  br i1 %niter2504.ncmp.1, label %"end for sum_filter.s1.r19$x137.loopexit.split.us2165.unr-lcssa", label %"for sum_filter.s1.r19$x136.us2162"

"end for sum_filter.s1.r19$x137.loopexit.split.us2165.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x136.us2162", %"for sum_filter.s1.r19$y133.us"
  %"sum_filter.s1.r19$x138.us2163.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y133.us" ], [ %5224, %"for sum_filter.s1.r19$x136.us2162" ]
  br i1 %lcmp.mod2502.not, label %"end for sum_filter.s1.r19$x137.loopexit.split.us2165", label %"for sum_filter.s1.r19$x136.us2162.epil"

"for sum_filter.s1.r19$x136.us2162.epil":         ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us2165.unr-lcssa"
  %5225 = load <32 x i32>, <32 x i32>* %5126, align 128, !tbaa !111
  %5226 = load <32 x i32>, <32 x i32>* %5130, align 128, !tbaa !119
  %5227 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5226, <32 x i32> %5225)
  %5228 = shufflevector <64 x i32> %5227, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5229 = bitcast <128 x i32> %5228 to <64 x i64>
  %5230 = shufflevector <64 x i64> %5229, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5231 = bitcast <32 x i64> %5230 to <64 x i32>
  %5232 = add nsw i32 %"sum_filter.s1.r19$x138.us2163.unr", %5156
  %5233 = shl nsw i32 %5232, 7
  %5234 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5233
  %5235 = bitcast i16* %5234 to <32 x i32>*
  %5236 = load <32 x i32>, <32 x i32>* %5235, align 128, !tbaa !105
  %5237 = getelementptr inbounds i16, i16* %5234, i32 64
  %5238 = bitcast i16* %5237 to <32 x i32>*
  %5239 = load <32 x i32>, <32 x i32>* %5238, align 128, !tbaa !105
  %5240 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5239, <32 x i32> %5236)
  %5241 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5240)
  %5242 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5241) #11
  %5243 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5242, <64 x i32> %5231) #11
  %5244 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5243)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5244, <32 x i32>* nonnull %5126, i32 128, <32 x i1> %5127), !tbaa !111
  %5245 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5243)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5245, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %5131), !tbaa !119
  %5246 = load <32 x i32>, <32 x i32>* %5134, align 128, !tbaa !121
  %5247 = load <32 x i32>, <32 x i32>* %5137, align 128, !tbaa !124
  %5248 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5247, <32 x i32> %5246)
  %5249 = shufflevector <64 x i32> %5248, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5250 = bitcast <128 x i32> %5249 to <64 x i64>
  %5251 = shufflevector <64 x i64> %5250, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5252 = bitcast <32 x i64> %5251 to <64 x i32>
  %5253 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5240)
  %5254 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5253) #11
  %5255 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5254, <64 x i32> %5252) #11
  %5256 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5255)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5256, <32 x i32>* nonnull %5134, i32 128, <32 x i1> %5135), !tbaa !121
  %5257 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5255)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5257, <32 x i32>* nonnull %5137, i32 128, <32 x i1> %5138), !tbaa !124
  br label %"end for sum_filter.s1.r19$x137.loopexit.split.us2165"

"end for sum_filter.s1.r19$x137.loopexit.split.us2165": ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us2165.unr-lcssa", %"for sum_filter.s1.r19$x136.us2162.epil"
  %5258 = add nuw nsw i32 %"sum_filter.s1.r19$y135.us", 1
  %.not1828.us = icmp eq i32 %5258, %6
  br i1 %.not1828.us, label %"consume sum_filter163", label %"for sum_filter.s1.r19$y133.us"

"consume sum_filter163":                          ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us2165", %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", %"produce sum_filter132"
  %5259 = insertelement <128 x i32> undef, i32 %3, i32 0
  %5260 = shufflevector <128 x i32> %5259, <128 x i32> undef, <128 x i32> zeroinitializer
  %t2133 = icmp sgt <128 x i32> %5260, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5261 = zext <128 x i1> %t2133 to <128 x i8>
  %5262 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %5261) #9
  %5263 = and i8 %5262, 1
  %t2487.not = icmp eq i8 %5263, 0
  br i1 %t2487.not, label %after_bb175.thread, label %true_bb176

after_bb175.thread:                               ; preds = %"consume sum_filter163"
  %5264 = zext i8 %input_zero to i32
  %5265 = insertelement <32 x i32> undef, i32 %5264, i32 0
  %5266 = shufflevector <32 x i32> %5265, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %after_bb181

true_bb176:                                       ; preds = %"consume sum_filter163"
  %5267 = bitcast i8* %0 to <32 x i32>*
  %5268 = load <32 x i32>, <32 x i32>* %5267, align 4, !tbaa !226
  %5269 = getelementptr inbounds i8, i8* %0, i32 128
  %5270 = bitcast i8* %5269 to <32 x i32>*
  %5271 = load <32 x i32>, <32 x i32>* %5270, align 4, !tbaa !233
  %5272 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5271, <32 x i32> %5268)
  %5273 = shufflevector <64 x i32> %5272, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5274 = bitcast <128 x i32> %5273 to <64 x i64>
  %5275 = shufflevector <64 x i64> %5274, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5276 = bitcast <32 x i64> %5275 to <64 x i32>
  %5277 = load <32 x i32>, <32 x i32>* %5126, align 128, !tbaa !111
  %5278 = load <32 x i32>, <32 x i32>* %5130, align 128, !tbaa !119
  %5279 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5278, <32 x i32> %5277)
  %5280 = shufflevector <64 x i32> %5279, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5281 = bitcast <128 x i32> %5280 to <64 x i64>
  %5282 = shufflevector <64 x i64> %5281, <64 x i64> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5283 = bitcast <16 x i64> %5282 to <32 x i32>
  %5284 = zext i8 %input_zero to i32
  %5285 = insertelement <32 x i32> undef, i32 %5284, i32 0
  %5286 = shufflevector <32 x i32> %5285, <32 x i32> undef, <32 x i32> zeroinitializer
  %5287 = load <32 x i32>, <32 x i32>* %5134, align 128, !tbaa !121
  %5288 = load <32 x i32>, <32 x i32>* %5137, align 128, !tbaa !124
  %5289 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5288, <32 x i32> %5287)
  %5290 = shufflevector <64 x i32> %5279, <64 x i32> %5289, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast = bitcast <128 x i32> %5290 to <64 x i64>
  br label %after_bb181

after_bb181:                                      ; preds = %after_bb175.thread, %true_bb176
  %5291 = phi <32 x i32> [ %5286, %true_bb176 ], [ %5266, %after_bb175.thread ]
  %5292 = phi <32 x i32> [ %5283, %true_bb176 ], [ zeroinitializer, %after_bb175.thread ]
  %5293 = phi <64 x i32> [ %5276, %true_bb176 ], [ zeroinitializer, %after_bb175.thread ]
  %5294 = phi <64 x i64> [ %phi.cast, %true_bb176 ], [ zeroinitializer, %after_bb175.thread ]
  %5295 = shufflevector <64 x i64> %5294, <64 x i64> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5296 = bitcast <16 x i64> %5295 to <32 x i32>
  %5297 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5291, <32 x i32> %5292) #11
  %5298 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5297, <32 x i32> %5291, <32 x i32> %5292) #11
  %5299 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5291, <32 x i32> %5296) #11
  %5300 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5299, <32 x i32> %5291, <32 x i32> %5296) #11
  %5301 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5298, <32 x i32> %5300) #11
  %5302 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %5293, <64 x i32> %5301) #11
  %5303 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5302)
  %5304 = bitcast [512 x i32]* %offset_c1815 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5303, <32 x i32>* nonnull %5304, i32 128, <32 x i1> %5127), !tbaa !131
  %5305 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5302)
  %5306 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 32
  %5307 = bitcast i32* %5306 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5305, <32 x i32>* nonnull %5307, i32 128, <32 x i1> %5131), !tbaa !139
  br i1 %t2487.not, label %after_bb199, label %true_bb194

true_bb194:                                       ; preds = %after_bb181
  %5308 = getelementptr inbounds i8, i8* %0, i32 256
  %5309 = bitcast i8* %5308 to <32 x i32>*
  %5310 = load <32 x i32>, <32 x i32>* %5309, align 4, !tbaa !235
  %5311 = getelementptr inbounds i8, i8* %0, i32 384
  %5312 = bitcast i8* %5311 to <32 x i32>*
  %5313 = load <32 x i32>, <32 x i32>* %5312, align 4, !tbaa !238
  %5314 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5313, <32 x i32> %5310)
  %5315 = shufflevector <64 x i32> %5314, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5316 = bitcast <128 x i32> %5315 to <64 x i64>
  %5317 = shufflevector <64 x i64> %5316, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5318 = bitcast <32 x i64> %5317 to <64 x i32>
  %5319 = load <32 x i32>, <32 x i32>* %5134, align 128, !tbaa !121
  %5320 = load <32 x i32>, <32 x i32>* %5137, align 128, !tbaa !124
  %5321 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5320, <32 x i32> %5319)
  %5322 = shufflevector <64 x i32> %5321, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5323 = bitcast <128 x i32> %5322 to <64 x i64>
  %5324 = shufflevector <64 x i64> %5323, <64 x i64> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %5325 = bitcast <16 x i64> %5324 to <32 x i32>
  %5326 = load <32 x i32>, <32 x i32>* %5126, align 128, !tbaa !111
  %5327 = load <32 x i32>, <32 x i32>* %5130, align 128, !tbaa !119
  %5328 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5327, <32 x i32> %5326)
  %5329 = shufflevector <64 x i32> %5328, <64 x i32> %5321, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast2361 = bitcast <128 x i32> %5329 to <64 x i64>
  br label %after_bb199

after_bb199:                                      ; preds = %after_bb181, %true_bb194
  %5330 = phi <32 x i32> [ %5325, %true_bb194 ], [ zeroinitializer, %after_bb181 ]
  %5331 = phi <64 x i32> [ %5318, %true_bb194 ], [ zeroinitializer, %after_bb181 ]
  %5332 = phi <64 x i64> [ %phi.cast2361, %true_bb194 ], [ zeroinitializer, %after_bb181 ]
  %5333 = shufflevector <64 x i64> %5332, <64 x i64> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5334 = bitcast <16 x i64> %5333 to <32 x i32>
  %5335 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5291, <32 x i32> %5330) #11
  %5336 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5335, <32 x i32> %5291, <32 x i32> %5330) #11
  %5337 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5291, <32 x i32> %5334) #11
  %5338 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5337, <32 x i32> %5291, <32 x i32> %5334) #11
  %5339 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5336, <32 x i32> %5338) #11
  %5340 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %5331, <64 x i32> %5339) #11
  %5341 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5340)
  %5342 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 64
  %5343 = bitcast i32* %5342 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5341, <32 x i32>* nonnull %5343, i32 128, <32 x i1> %5135), !tbaa !141
  %5344 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5340)
  %5345 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 96
  %5346 = bitcast i32* %5345 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5344, <32 x i32>* nonnull %5346, i32 128, <32 x i1> %5138), !tbaa !144
  %t2427 = icmp slt i32 %a553, 0
  %t2429 = icmp slt i32 %stride_x, 0
  %5347 = add nsw i32 %4, -1
  %5348 = mul nsw i32 %5347, %a553
  %t2430 = select i1 %t2427, i32 %5348, i32 0
  %t2431.s = select i1 %t2429, i32 %20, i32 1
  %t2432 = icmp slt i32 %a548, 0
  %t2434 = icmp slt i32 %stride_y, 0
  %5349 = add nsw i32 %6, -1
  %5350 = mul nsw i32 %5349, %a548
  %t2435 = select i1 %t2432, i32 %5350, i32 0
  %t2436.s = select i1 %t2434, i32 %23, i32 1
  %t2420 = icmp eq i32 %depth_multiplier, 1
  %a548.op = shl i32 %a548, 1
  %5351 = select i1 %t2432, i32 %a548.op, i32 0
  %5352 = select i1 %4736, i32 %5351, i32 %t2435
  %5353 = add i32 %22, -1
  %5354 = add i32 %5353, %t2436.s
  %5355 = mul nsw i32 %5354, %stride_y
  %a553.op = shl i32 %a553, 1
  %5356 = select i1 %t2427, i32 %a553.op, i32 0
  %5357 = select i1 %4736, i32 %5356, i32 %t2430
  %5358 = add i32 %19, -1
  %5359 = add i32 %5358, %t2431.s
  %5360 = mul nsw i32 %5359, %stride_x
  %5361 = select i1 %t2432, i32 0, i32 %5350
  %5362 = add nsw i32 %23, -1
  %5363 = select i1 %t2434, i32 0, i32 %5362
  %5364 = add nsw i32 %5363, %22
  %5365 = mul nsw i32 %5364, %stride_y
  %b547 = add nsw i32 %5365, %5361
  %5366 = select i1 %t2427, i32 0, i32 %5348
  %5367 = add nsw i32 %20, -1
  %5368 = select i1 %t2429, i32 0, i32 %5367
  %5369 = add nsw i32 %5368, %19
  %5370 = mul nsw i32 %5369, %stride_x
  %b552 = add nsw i32 %5370, %5366
  %5371 = mul nsw i32 %13, %12
  %5372 = mul nsw i32 %16, %14
  %5373 = mul nsw i32 %11, %10
  %5374 = add i32 %5371, %5373
  %t2421 = add i32 %5374, %5372
  %5375 = icmp sgt i32 %15, 0
  br i1 %5375, label %"for output.s0.b.rebased202.preheader", label %if.then.i1933, !prof !101

"for output.s0.b.rebased202.preheader":           ; preds = %after_bb199
  %b551 = add nsw i32 %5360, %5357
  %b546 = add nsw i32 %5355, %5352
  %a544 = add nsw i32 %5355, %t2435
  %5376 = icmp slt i32 %t2435, %5352
  %resampled_input.y.min_realized = select i1 %5376, i32 %a544, i32 %b546
  %5377 = icmp sgt i32 %a548, 0
  %5378 = select i1 %5377, i32 %a548, i32 0
  %5379 = shl nuw nsw i32 %5378, 1
  %5380 = select i1 %4736, i32 %5379, i32 %5361
  %a545 = add nsw i32 %5365, %5380
  %5381 = icmp sgt i32 %5380, %5361
  %5382 = select i1 %5381, i32 %a545, i32 %b547
  %a557 = sub nsw i32 %5382, %resampled_input.y.min_realized
  %a549 = add nsw i32 %5360, %t2430
  %5383 = icmp slt i32 %t2430, %5357
  %resampled_input.x.min_realized = select i1 %5383, i32 %a549, i32 %b551
  %5384 = icmp sgt i32 %a553, 0
  %5385 = select i1 %5384, i32 %a553, i32 0
  %5386 = shl nuw nsw i32 %5385, 1
  %5387 = select i1 %4736, i32 %5386, i32 %5366
  %a550 = add nsw i32 %5370, %5387
  %5388 = icmp sgt i32 %5387, %5366
  %5389 = select i1 %5388, i32 %a550, i32 %b552
  %a556 = sub nsw i32 %5389, %resampled_input.x.min_realized
  %5390 = icmp sgt i32 %a556, -1
  %t2555 = select i1 %5390, i32 %a556, i32 -1
  %5391 = icmp sgt i32 %a557, -1
  %t2556 = select i1 %5391, i32 %a557, i32 -1
  %5392 = add nsw i32 %t2556, 1
  %5393 = shl i32 %t2555, 7
  %t2557 = add i32 %5393, 128
  %5394 = mul i32 %t2557, %5392
  %5395 = add i32 %5394, 131
  %5396 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2448 = sub nsw i32 %b552, %a549
  %t2447 = sub nsw i32 %b547, %a544
  %5397 = icmp sgt i32 %t2447, -1
  %5398 = sub i32 %a544, %resampled_input.y.min_realized
  %5399 = add nsw i32 %a556, 1
  %5400 = sub i32 %a549, %resampled_input.x.min_realized
  %5401 = icmp sgt i32 %t2448, -1
  %5402 = icmp sgt i32 %3, 1
  %5403 = icmp sgt i32 %3, 2
  %5404 = icmp sgt i32 %3, 3
  %5405 = icmp sgt i32 %3, 4
  %5406 = icmp sgt i32 %3, 5
  %5407 = icmp sgt i32 %3, 6
  %5408 = icmp sgt i32 %3, 7
  %5409 = icmp sgt i32 %3, 8
  %5410 = icmp sgt i32 %3, 9
  %5411 = icmp sgt i32 %3, 10
  %5412 = icmp sgt i32 %3, 11
  %5413 = icmp sgt i32 %3, 12
  %5414 = icmp sgt i32 %3, 13
  %5415 = icmp sgt i32 %3, 14
  %5416 = icmp sgt i32 %3, 15
  %5417 = icmp sgt i32 %3, 16
  %5418 = icmp sgt i32 %3, 17
  %5419 = icmp sgt i32 %3, 18
  %5420 = icmp sgt i32 %3, 19
  %5421 = icmp sgt i32 %3, 20
  %5422 = icmp sgt i32 %3, 21
  %5423 = icmp sgt i32 %3, 22
  %5424 = icmp sgt i32 %3, 23
  %5425 = icmp sgt i32 %3, 24
  %5426 = icmp sgt i32 %3, 25
  %5427 = icmp sgt i32 %3, 26
  %5428 = icmp sgt i32 %3, 27
  %5429 = icmp sgt i32 %3, 28
  %5430 = icmp sgt i32 %3, 29
  %5431 = icmp sgt i32 %3, 30
  %5432 = icmp sgt i32 %3, 31
  %5433 = icmp sgt i32 %3, 32
  %5434 = icmp sgt i32 %3, 33
  %5435 = icmp sgt i32 %3, 34
  %5436 = icmp sgt i32 %3, 35
  %5437 = icmp sgt i32 %3, 36
  %5438 = icmp sgt i32 %3, 37
  %5439 = icmp sgt i32 %3, 38
  %5440 = icmp sgt i32 %3, 39
  %5441 = icmp sgt i32 %3, 40
  %5442 = icmp sgt i32 %3, 41
  %5443 = icmp sgt i32 %3, 42
  %5444 = icmp sgt i32 %3, 43
  %5445 = icmp sgt i32 %3, 44
  %5446 = icmp sgt i32 %3, 45
  %5447 = icmp sgt i32 %3, 46
  %5448 = icmp sgt i32 %3, 47
  %5449 = icmp sgt i32 %3, 48
  %5450 = icmp sgt i32 %3, 49
  %5451 = icmp sgt i32 %3, 50
  %5452 = icmp sgt i32 %3, 51
  %5453 = icmp sgt i32 %3, 52
  %5454 = icmp sgt i32 %3, 53
  %5455 = icmp sgt i32 %3, 54
  %5456 = icmp sgt i32 %3, 55
  %5457 = icmp sgt i32 %3, 56
  %5458 = icmp sgt i32 %3, 57
  %5459 = icmp sgt i32 %3, 58
  %5460 = icmp sgt i32 %3, 59
  %5461 = icmp sgt i32 %3, 60
  %5462 = icmp sgt i32 %3, 61
  %5463 = icmp sgt i32 %3, 62
  %5464 = icmp sgt i32 %3, 65
  %5465 = icmp sgt i32 %3, 66
  %5466 = icmp sgt i32 %3, 67
  %5467 = icmp sgt i32 %3, 68
  %5468 = icmp sgt i32 %3, 69
  %5469 = icmp sgt i32 %3, 70
  %5470 = icmp sgt i32 %3, 71
  %5471 = icmp sgt i32 %3, 72
  %5472 = icmp sgt i32 %3, 73
  %5473 = icmp sgt i32 %3, 74
  %5474 = icmp sgt i32 %3, 75
  %5475 = icmp sgt i32 %3, 76
  %5476 = icmp sgt i32 %3, 77
  %5477 = icmp sgt i32 %3, 78
  %5478 = icmp sgt i32 %3, 79
  %5479 = icmp sgt i32 %3, 80
  %5480 = icmp sgt i32 %3, 81
  %5481 = icmp sgt i32 %3, 82
  %5482 = icmp sgt i32 %3, 83
  %5483 = icmp sgt i32 %3, 84
  %5484 = icmp sgt i32 %3, 85
  %5485 = icmp sgt i32 %3, 86
  %5486 = icmp sgt i32 %3, 87
  %5487 = icmp sgt i32 %3, 88
  %5488 = icmp sgt i32 %3, 89
  %5489 = icmp sgt i32 %3, 90
  %5490 = icmp sgt i32 %3, 91
  %5491 = icmp sgt i32 %3, 92
  %5492 = icmp sgt i32 %3, 93
  %5493 = icmp sgt i32 %3, 94
  %5494 = icmp sgt i32 %3, 95
  %5495 = icmp sgt i32 %3, 96
  %5496 = icmp sgt i32 %3, 97
  %5497 = icmp sgt i32 %3, 98
  %5498 = icmp sgt i32 %3, 99
  %5499 = icmp sgt i32 %3, 100
  %5500 = icmp sgt i32 %3, 101
  %5501 = icmp sgt i32 %3, 102
  %5502 = icmp sgt i32 %3, 103
  %5503 = icmp sgt i32 %3, 104
  %5504 = icmp sgt i32 %3, 105
  %5505 = icmp sgt i32 %3, 106
  %5506 = icmp sgt i32 %3, 107
  %5507 = icmp sgt i32 %3, 108
  %5508 = icmp sgt i32 %3, 109
  %5509 = icmp sgt i32 %3, 110
  %5510 = icmp sgt i32 %3, 111
  %5511 = icmp sgt i32 %3, 112
  %5512 = icmp sgt i32 %3, 113
  %5513 = icmp sgt i32 %3, 114
  %5514 = icmp sgt i32 %3, 115
  %5515 = icmp sgt i32 %3, 116
  %5516 = icmp sgt i32 %3, 117
  %5517 = icmp sgt i32 %3, 118
  %5518 = icmp sgt i32 %3, 119
  %5519 = icmp sgt i32 %3, 120
  %5520 = icmp sgt i32 %3, 121
  %5521 = icmp sgt i32 %3, 122
  %5522 = icmp sgt i32 %3, 123
  %5523 = icmp sgt i32 %3, 124
  %5524 = icmp sgt i32 %3, 125
  %5525 = icmp sgt i32 %3, 126
  %5526 = icmp eq i32 %depth_multiplier, 0
  %t2813 = sext i1 %5526 to i32
  %5527 = sub nsw i32 %depth_multiplier, %t2813
  %5528 = add i32 %5527, 1
  %5529 = icmp ult i32 %5528, 3
  %5530 = select i1 %5529, i32 %5527, i32 0
  %5531 = xor i32 %t2813, -1
  %5532 = and i32 %5530, %5531
  %5533 = icmp sgt i32 %23, 0
  %5534 = sub i32 %a548.op, %resampled_input.y.min_realized
  %5535 = sub i32 %a548, %resampled_input.y.min_realized
  %.neg = mul i32 %24, %22
  %.neg2120 = mul i32 %21, %19
  %.neg2121 = mul i32 %25, %14
  %5536 = icmp sgt i32 %20, 0
  %5537 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 768
  %5538 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 1024
  %5539 = bitcast i16* %5538 to <32 x i16>*
  %5540 = sub nsw i32 %a553.op, %resampled_input.x.min_realized
  %5541 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 1056
  %5542 = bitcast i16* %5541 to <32 x i16>*
  %5543 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 896
  %5544 = bitcast i16* %5543 to <32 x i16>*
  %5545 = sub nsw i32 %a553, %resampled_input.x.min_realized
  %5546 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 928
  %5547 = bitcast i16* %5546 to <32 x i16>*
  %5548 = bitcast i16* %5537 to <32 x i16>*
  %5549 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 800
  %5550 = bitcast i16* %5549 to <32 x i16>*
  %5551 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 384
  %5552 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 640
  %5553 = bitcast i16* %5552 to <32 x i16>*
  %5554 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 672
  %5555 = bitcast i16* %5554 to <32 x i16>*
  %5556 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 512
  %5557 = bitcast i16* %5556 to <32 x i16>*
  %5558 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 544
  %5559 = bitcast i16* %5558 to <32 x i16>*
  %5560 = bitcast i16* %5551 to <32 x i16>*
  %5561 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 416
  %5562 = bitcast i16* %5561 to <32 x i16>*
  %5563 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 256
  %5564 = bitcast i16* %5563 to <32 x i16>*
  %5565 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 288
  %5566 = bitcast i16* %5565 to <32 x i16>*
  %5567 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 128
  %5568 = bitcast i16* %5567 to <32 x i16>*
  %5569 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 160
  %5570 = bitcast i16* %5569 to <32 x i16>*
  %5571 = bitcast i16* %filter_zeroed113 to <32 x i16>*
  %5572 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 32
  %5573 = bitcast i16* %5572 to <32 x i16>*
  %5574 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 1088
  %5575 = bitcast i16* %5574 to <32 x i16>*
  %5576 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 1120
  %5577 = bitcast i16* %5576 to <32 x i16>*
  %5578 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 960
  %5579 = bitcast i16* %5578 to <32 x i16>*
  %5580 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 992
  %5581 = bitcast i16* %5580 to <32 x i16>*
  %5582 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 832
  %5583 = bitcast i16* %5582 to <32 x i16>*
  %5584 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 864
  %5585 = bitcast i16* %5584 to <32 x i16>*
  %5586 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 704
  %5587 = bitcast i16* %5586 to <32 x i16>*
  %5588 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 736
  %5589 = bitcast i16* %5588 to <32 x i16>*
  %5590 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 576
  %5591 = bitcast i16* %5590 to <32 x i16>*
  %5592 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 608
  %5593 = bitcast i16* %5592 to <32 x i16>*
  %5594 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 448
  %5595 = bitcast i16* %5594 to <32 x i16>*
  %5596 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 480
  %5597 = bitcast i16* %5596 to <32 x i16>*
  %5598 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 320
  %5599 = bitcast i16* %5598 to <32 x i16>*
  %5600 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 352
  %5601 = bitcast i16* %5600 to <32 x i16>*
  %5602 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 192
  %5603 = bitcast i16* %5602 to <32 x i16>*
  %5604 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 224
  %5605 = bitcast i16* %5604 to <32 x i16>*
  %5606 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 64
  %5607 = bitcast i16* %5606 to <32 x i16>*
  %5608 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 96
  %5609 = bitcast i16* %5608 to <32 x i16>*
  %5610 = insertelement <32 x i32> undef, i32 %3, i32 0
  %5611 = shufflevector <32 x i32> %5610, <32 x i32> undef, <32 x i32> zeroinitializer
  %5612 = icmp sgt <32 x i32> %5611, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5613 = sext i32 %output_multiplier to i64
  %5614 = insertelement <32 x i64> undef, i64 %5613, i32 0
  %5615 = shufflevector <32 x i64> %5614, <32 x i64> undef, <32 x i32> zeroinitializer
  %5616 = shl nuw i32 1, %output_shift
  %5617 = ashr i32 %5616, 1
  %5618 = zext i8 %output_zero to i16
  %5619 = insertelement <64 x i16> undef, i16 %5618, i32 0
  %5620 = shufflevector <64 x i16> %5619, <64 x i16> undef, <64 x i32> zeroinitializer
  %5621 = bitcast <64 x i16> %5620 to <32 x i32>
  %5622 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %5623 = shufflevector <32 x i8> %5622, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5624 = bitcast <128 x i8> %5623 to <32 x i32>
  %5625 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %5626 = shufflevector <32 x i8> %5625, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5627 = bitcast <128 x i8> %5626 to <32 x i32>
  %reass.add = add i32 %.neg, %.neg2120
  %reass.add2123 = add i32 %reass.add, %.neg2121
  %5628 = icmp sgt <32 x i32> %5611, <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5629 = icmp sgt <32 x i32> %5611, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5630 = icmp sgt <32 x i32> %5611, <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %xtraiter2510 = and i32 %4, 1
  %5631 = icmp eq i32 %4, 1
  %unroll_iter2512 = and i32 %4, -2
  %lcmp.mod2511.not = icmp eq i32 %xtraiter2510, 0
  br label %"for output.s0.b.rebased202"

"for output.s0.b.rebased202":                     ; preds = %"for output.s0.b.rebased202.preheader", %"end for output.s0.y.yo1762"
  %output.s0.b.rebased204 = phi i32 [ %7021, %"end for output.s0.y.yo1762" ], [ 0, %"for output.s0.b.rebased202.preheader" ]
  %5632 = load i32, i32* %.fca.1.gep1779, align 4, !tbaa !98
  %cmp.i2012 = icmp ult i32 %5632, %5395
  %5633 = load i8*, i8** %.fca.0.gep1778, align 4, !tbaa !95
  br i1 %cmp.i2012, label %if.then.i2015, label %pseudostack_alloc.exit2028, !prof !99

if.then.i2015:                                    ; preds = %"for output.s0.b.rebased202"
  %tobool1.not.i2014 = icmp ne i8* %5633, null
  %5634 = load i32, i32* %.fca.2.gep1780, align 4
  %cmp2.i2017 = icmp ugt i32 %5634, 16384
  %or.cond2119 = and i1 %tobool1.not.i2014, %cmp2.i2017
  br i1 %or.cond2119, label %if.then3.i2019, label %if.end.i2023

if.then3.i2019:                                   ; preds = %if.then.i2015
  call void @halide_free(i8* null, i8* nonnull %5633) #15
  %.pre = load i32, i32* %.fca.2.gep1780, align 4, !tbaa !97
  br label %if.end.i2023

if.end.i2023:                                     ; preds = %if.then3.i2019, %if.then.i2015
  %5635 = phi i32 [ %.pre, %if.then3.i2019 ], [ %5634, %if.then.i2015 ]
  %add.i2021 = add i32 %5635, %5395
  store i32 %add.i2021, i32* %.fca.2.gep1780, align 4, !tbaa !97
  %cmp7.i2022 = icmp ugt i32 %add.i2021, 16384
  br i1 %cmp7.i2022, label %if.then8.i2025, label %if.end11.i2027

if.then8.i2025:                                   ; preds = %if.end.i2023
  %call.i2024 = call i8* @halide_malloc(i8* null, i32 %5395) #15
  br label %if.end11.i2027

if.end11.i2027:                                   ; preds = %if.then8.i2025, %if.end.i2023
  %storemerge.i2026 = phi i8* [ %call.i2024, %if.then8.i2025 ], [ null, %if.end.i2023 ]
  store i8* %storemerge.i2026, i8** %.fca.0.gep1778, align 4, !tbaa !95
  store i32 %5395, i32* %.fca.1.gep1779, align 4, !tbaa !98
  br label %pseudostack_alloc.exit2028

pseudostack_alloc.exit2028:                       ; preds = %"for output.s0.b.rebased202", %if.end11.i2027
  %5636 = phi i8* [ %storemerge.i2026, %if.end11.i2027 ], [ %5633, %"for output.s0.b.rebased202" ]
  %.not1818 = icmp eq i8* %5636, null
  br i1 %.not1818, label %then_bb206, label %"produce resampled_input208", !prof !100

then_bb206:                                       ; preds = %pseudostack_alloc.exit2028
  %5637 = alloca i8*, i32 %5395, align 128
  %5638 = bitcast i8** %5637 to i8*
  store i8** %5637, i8*** %5396, align 4
  br label %"produce resampled_input208"

"produce resampled_input208":                     ; preds = %pseudostack_alloc.exit2028, %then_bb206
  %resampled_input207 = phi i8* [ %5638, %then_bb206 ], [ %5636, %pseudostack_alloc.exit2028 ]
  br i1 %t2420, label %then_bb210, label %next_bb211

then_bb210:                                       ; preds = %"produce resampled_input208"
  br i1 %5397, label %"for resampled_input.s0.y.rebased212.preheader", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased212.preheader":  ; preds = %then_bb210
  %5639 = add nsw i32 %output.s0.b.rebased204, %14
  %5640 = mul nsw i32 %5639, %16
  %5641 = sub i32 %5640, %t2421
  br i1 %5401, label %"for resampled_input.s0.y.rebased212.us", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased212.us":         ; preds = %"for resampled_input.s0.y.rebased212.preheader", %"end for resampled_input.s0.x.rebased216.loopexit.us"
  %resampled_input.s0.y.rebased214.us = phi i32 [ %5657, %"end for resampled_input.s0.x.rebased216.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased212.preheader" ]
  %5642 = add nsw i32 %5398, %resampled_input.s0.y.rebased214.us
  %5643 = mul nsw i32 %5642, %5399
  %t2446.us = add nsw i32 %5400, %5643
  %5644 = add nsw i32 %resampled_input.s0.y.rebased214.us, %a544
  %5645 = mul nsw i32 %5644, %13
  %t2445.us = add nsw i32 %5641, %5645
  br label %"for resampled_input.s0.x.rebased215.us"

"for resampled_input.s0.x.rebased215.us":         ; preds = %"for resampled_input.s0.y.rebased212.us", %"for resampled_input.s0.x.rebased215.us"
  %resampled_input.s0.x.rebased217.us = phi i32 [ %5656, %"for resampled_input.s0.x.rebased215.us" ], [ 0, %"for resampled_input.s0.y.rebased212.us" ]
  %5646 = add nsw i32 %resampled_input.s0.x.rebased217.us, %a549
  %5647 = mul nsw i32 %5646, %11
  %5648 = add nsw i32 %t2445.us, %5647
  %5649 = getelementptr inbounds i8, i8* %8, i32 %5648
  %5650 = bitcast i8* %5649 to <128 x i8>*
  %5651 = load <128 x i8>, <128 x i8>* %5650, align 1, !tbaa !127
  %5652 = add nsw i32 %t2446.us, %resampled_input.s0.x.rebased217.us
  %5653 = shl nsw i32 %5652, 7
  %5654 = getelementptr inbounds i8, i8* %resampled_input207, i32 %5653
  %5655 = bitcast i8* %5654 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5651, <128 x i8>* %5655, i32 128, <128 x i1> %t2133), !tbaa !129
  %5656 = add nuw nsw i32 %resampled_input.s0.x.rebased217.us, 1
  %.not1827.us = icmp eq i32 %resampled_input.s0.x.rebased217.us, %t2448
  br i1 %.not1827.us, label %"end for resampled_input.s0.x.rebased216.loopexit.us", label %"for resampled_input.s0.x.rebased215.us"

"end for resampled_input.s0.x.rebased216.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased215.us"
  %5657 = add nuw nsw i32 %resampled_input.s0.y.rebased214.us, 1
  %.not1826.us = icmp eq i32 %resampled_input.s0.y.rebased214.us, %t2447
  br i1 %.not1826.us, label %"consume resampled_input1760", label %"for resampled_input.s0.y.rebased212.us"

next_bb211:                                       ; preds = %"produce resampled_input208"
  br i1 %5397, label %"for resampled_input.s0.y.rebased218.preheader", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased218.preheader":  ; preds = %next_bb211
  %5658 = add nsw i32 %output.s0.b.rebased204, %14
  %5659 = mul nsw i32 %5658, %16
  %5660 = sub i32 %5659, %t2421
  br i1 %5401, label %"for resampled_input.s0.y.rebased218.us", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased218.us":         ; preds = %"for resampled_input.s0.y.rebased218.preheader", %"end for resampled_input.s0.x.rebased222.loopexit.us"
  %resampled_input.s0.y.rebased220.us = phi i32 [ %7003, %"end for resampled_input.s0.x.rebased222.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased218.preheader" ]
  %5661 = add nsw i32 %5398, %resampled_input.s0.y.rebased220.us
  %5662 = mul nsw i32 %5661, %5399
  %t2453.us = add nsw i32 %5400, %5662
  %5663 = add nsw i32 %resampled_input.s0.y.rebased220.us, %a544
  %5664 = mul nsw i32 %5663, %13
  %t2452.us = add nsw i32 %5660, %5664
  br label %"for resampled_input.s0.x.rebased221.us"

"for resampled_input.s0.x.rebased221.us":         ; preds = %"for resampled_input.s0.y.rebased218.us", %after_bb1759.us
  %resampled_input.s0.x.rebased223.us = phi i32 [ %7002, %after_bb1759.us ], [ 0, %"for resampled_input.s0.y.rebased218.us" ]
  %5665 = add nsw i32 %resampled_input.s0.x.rebased223.us, %a549
  %5666 = mul nsw i32 %5665, %11
  %5667 = add nsw i32 %t2452.us, %5666
  %5668 = getelementptr inbounds i8, i8* %8, i32 %5667
  %5669 = load i8, i8* %5668, align 1, !tbaa !127
  br i1 %5402, label %true_bb611.us, label %after_bb613.us

true_bb611.us:                                    ; preds = %"for resampled_input.s0.x.rebased221.us"
  %5670 = add nsw i32 %5667, %5532
  %5671 = getelementptr inbounds i8, i8* %8, i32 %5670
  %5672 = load i8, i8* %5671, align 1, !tbaa !127
  br label %after_bb613.us

after_bb613.us:                                   ; preds = %true_bb611.us, %"for resampled_input.s0.x.rebased221.us"
  %5673 = phi i8 [ %5672, %true_bb611.us ], [ 0, %"for resampled_input.s0.x.rebased221.us" ]
  br i1 %5403, label %true_bb614.us, label %after_bb616.us

true_bb614.us:                                    ; preds = %after_bb613.us
  %5674 = sdiv i32 2, %5527
  %5675 = and i32 %5674, %5531
  %5676 = add nsw i32 %5675, %5667
  %5677 = getelementptr inbounds i8, i8* %8, i32 %5676
  %5678 = load i8, i8* %5677, align 1, !tbaa !127
  br label %after_bb616.us

after_bb616.us:                                   ; preds = %true_bb614.us, %after_bb613.us
  %5679 = phi i8 [ %5678, %true_bb614.us ], [ 0, %after_bb613.us ]
  br i1 %5404, label %true_bb617.us, label %after_bb619.us

true_bb617.us:                                    ; preds = %after_bb616.us
  %5680 = sdiv i32 3, %5527
  %5681 = and i32 %5680, %5531
  %5682 = add nsw i32 %5681, %5667
  %5683 = getelementptr inbounds i8, i8* %8, i32 %5682
  %5684 = load i8, i8* %5683, align 1, !tbaa !127
  br label %after_bb619.us

after_bb619.us:                                   ; preds = %true_bb617.us, %after_bb616.us
  %5685 = phi i8 [ %5684, %true_bb617.us ], [ 0, %after_bb616.us ]
  br i1 %5405, label %true_bb620.us, label %after_bb622.us

true_bb620.us:                                    ; preds = %after_bb619.us
  %5686 = sdiv i32 4, %5527
  %5687 = and i32 %5686, %5531
  %5688 = add nsw i32 %5687, %5667
  %5689 = getelementptr inbounds i8, i8* %8, i32 %5688
  %5690 = load i8, i8* %5689, align 1, !tbaa !127
  br label %after_bb622.us

after_bb622.us:                                   ; preds = %true_bb620.us, %after_bb619.us
  %5691 = phi i8 [ %5690, %true_bb620.us ], [ 0, %after_bb619.us ]
  br i1 %5406, label %true_bb623.us, label %after_bb625.us

true_bb623.us:                                    ; preds = %after_bb622.us
  %5692 = sdiv i32 5, %5527
  %5693 = and i32 %5692, %5531
  %5694 = add nsw i32 %5693, %5667
  %5695 = getelementptr inbounds i8, i8* %8, i32 %5694
  %5696 = load i8, i8* %5695, align 1, !tbaa !127
  br label %after_bb625.us

after_bb625.us:                                   ; preds = %true_bb623.us, %after_bb622.us
  %5697 = phi i8 [ %5696, %true_bb623.us ], [ 0, %after_bb622.us ]
  br i1 %5407, label %true_bb626.us, label %after_bb628.us

true_bb626.us:                                    ; preds = %after_bb625.us
  %5698 = sdiv i32 6, %5527
  %5699 = and i32 %5698, %5531
  %5700 = add nsw i32 %5699, %5667
  %5701 = getelementptr inbounds i8, i8* %8, i32 %5700
  %5702 = load i8, i8* %5701, align 1, !tbaa !127
  br label %after_bb628.us

after_bb628.us:                                   ; preds = %true_bb626.us, %after_bb625.us
  %5703 = phi i8 [ %5702, %true_bb626.us ], [ 0, %after_bb625.us ]
  br i1 %5408, label %true_bb629.us, label %after_bb631.us

true_bb629.us:                                    ; preds = %after_bb628.us
  %5704 = sdiv i32 7, %5527
  %5705 = and i32 %5704, %5531
  %5706 = add nsw i32 %5705, %5667
  %5707 = getelementptr inbounds i8, i8* %8, i32 %5706
  %5708 = load i8, i8* %5707, align 1, !tbaa !127
  br label %after_bb631.us

after_bb631.us:                                   ; preds = %true_bb629.us, %after_bb628.us
  %5709 = phi i8 [ %5708, %true_bb629.us ], [ 0, %after_bb628.us ]
  br i1 %5409, label %true_bb632.us, label %after_bb634.us

true_bb632.us:                                    ; preds = %after_bb631.us
  %5710 = sdiv i32 8, %5527
  %5711 = and i32 %5710, %5531
  %5712 = add nsw i32 %5711, %5667
  %5713 = getelementptr inbounds i8, i8* %8, i32 %5712
  %5714 = load i8, i8* %5713, align 1, !tbaa !127
  br label %after_bb634.us

after_bb634.us:                                   ; preds = %true_bb632.us, %after_bb631.us
  %5715 = phi i8 [ %5714, %true_bb632.us ], [ 0, %after_bb631.us ]
  br i1 %5410, label %true_bb635.us, label %after_bb637.us

true_bb635.us:                                    ; preds = %after_bb634.us
  %5716 = sdiv i32 9, %5527
  %5717 = and i32 %5716, %5531
  %5718 = add nsw i32 %5717, %5667
  %5719 = getelementptr inbounds i8, i8* %8, i32 %5718
  %5720 = load i8, i8* %5719, align 1, !tbaa !127
  br label %after_bb637.us

after_bb637.us:                                   ; preds = %true_bb635.us, %after_bb634.us
  %5721 = phi i8 [ %5720, %true_bb635.us ], [ 0, %after_bb634.us ]
  br i1 %5411, label %true_bb638.us, label %after_bb640.us

true_bb638.us:                                    ; preds = %after_bb637.us
  %5722 = sdiv i32 10, %5527
  %5723 = and i32 %5722, %5531
  %5724 = add nsw i32 %5723, %5667
  %5725 = getelementptr inbounds i8, i8* %8, i32 %5724
  %5726 = load i8, i8* %5725, align 1, !tbaa !127
  br label %after_bb640.us

after_bb640.us:                                   ; preds = %true_bb638.us, %after_bb637.us
  %5727 = phi i8 [ %5726, %true_bb638.us ], [ 0, %after_bb637.us ]
  br i1 %5412, label %true_bb641.us, label %after_bb643.us

true_bb641.us:                                    ; preds = %after_bb640.us
  %5728 = sdiv i32 11, %5527
  %5729 = and i32 %5728, %5531
  %5730 = add nsw i32 %5729, %5667
  %5731 = getelementptr inbounds i8, i8* %8, i32 %5730
  %5732 = load i8, i8* %5731, align 1, !tbaa !127
  br label %after_bb643.us

after_bb643.us:                                   ; preds = %true_bb641.us, %after_bb640.us
  %5733 = phi i8 [ %5732, %true_bb641.us ], [ 0, %after_bb640.us ]
  br i1 %5413, label %true_bb644.us, label %after_bb646.us

true_bb644.us:                                    ; preds = %after_bb643.us
  %5734 = sdiv i32 12, %5527
  %5735 = and i32 %5734, %5531
  %5736 = add nsw i32 %5735, %5667
  %5737 = getelementptr inbounds i8, i8* %8, i32 %5736
  %5738 = load i8, i8* %5737, align 1, !tbaa !127
  br label %after_bb646.us

after_bb646.us:                                   ; preds = %true_bb644.us, %after_bb643.us
  %5739 = phi i8 [ %5738, %true_bb644.us ], [ 0, %after_bb643.us ]
  br i1 %5414, label %true_bb647.us, label %after_bb649.us

true_bb647.us:                                    ; preds = %after_bb646.us
  %5740 = sdiv i32 13, %5527
  %5741 = and i32 %5740, %5531
  %5742 = add nsw i32 %5741, %5667
  %5743 = getelementptr inbounds i8, i8* %8, i32 %5742
  %5744 = load i8, i8* %5743, align 1, !tbaa !127
  br label %after_bb649.us

after_bb649.us:                                   ; preds = %true_bb647.us, %after_bb646.us
  %5745 = phi i8 [ %5744, %true_bb647.us ], [ 0, %after_bb646.us ]
  br i1 %5415, label %true_bb650.us, label %after_bb652.us

true_bb650.us:                                    ; preds = %after_bb649.us
  %5746 = sdiv i32 14, %5527
  %5747 = and i32 %5746, %5531
  %5748 = add nsw i32 %5747, %5667
  %5749 = getelementptr inbounds i8, i8* %8, i32 %5748
  %5750 = load i8, i8* %5749, align 1, !tbaa !127
  br label %after_bb652.us

after_bb652.us:                                   ; preds = %true_bb650.us, %after_bb649.us
  %5751 = phi i8 [ %5750, %true_bb650.us ], [ 0, %after_bb649.us ]
  br i1 %5416, label %true_bb653.us, label %after_bb655.us

true_bb653.us:                                    ; preds = %after_bb652.us
  %5752 = sdiv i32 15, %5527
  %5753 = and i32 %5752, %5531
  %5754 = add nsw i32 %5753, %5667
  %5755 = getelementptr inbounds i8, i8* %8, i32 %5754
  %5756 = load i8, i8* %5755, align 1, !tbaa !127
  br label %after_bb655.us

after_bb655.us:                                   ; preds = %true_bb653.us, %after_bb652.us
  %5757 = phi i8 [ %5756, %true_bb653.us ], [ 0, %after_bb652.us ]
  br i1 %5417, label %true_bb656.us, label %after_bb658.us

true_bb656.us:                                    ; preds = %after_bb655.us
  %5758 = sdiv i32 16, %5527
  %5759 = and i32 %5758, %5531
  %5760 = add nsw i32 %5759, %5667
  %5761 = getelementptr inbounds i8, i8* %8, i32 %5760
  %5762 = load i8, i8* %5761, align 1, !tbaa !127
  br label %after_bb658.us

after_bb658.us:                                   ; preds = %true_bb656.us, %after_bb655.us
  %5763 = phi i8 [ %5762, %true_bb656.us ], [ 0, %after_bb655.us ]
  br i1 %5418, label %true_bb659.us, label %after_bb661.us

true_bb659.us:                                    ; preds = %after_bb658.us
  %5764 = sdiv i32 17, %5527
  %5765 = and i32 %5764, %5531
  %5766 = add nsw i32 %5765, %5667
  %5767 = getelementptr inbounds i8, i8* %8, i32 %5766
  %5768 = load i8, i8* %5767, align 1, !tbaa !127
  br label %after_bb661.us

after_bb661.us:                                   ; preds = %true_bb659.us, %after_bb658.us
  %5769 = phi i8 [ %5768, %true_bb659.us ], [ 0, %after_bb658.us ]
  br i1 %5419, label %true_bb662.us, label %after_bb664.us

true_bb662.us:                                    ; preds = %after_bb661.us
  %5770 = sdiv i32 18, %5527
  %5771 = and i32 %5770, %5531
  %5772 = add nsw i32 %5771, %5667
  %5773 = getelementptr inbounds i8, i8* %8, i32 %5772
  %5774 = load i8, i8* %5773, align 1, !tbaa !127
  br label %after_bb664.us

after_bb664.us:                                   ; preds = %true_bb662.us, %after_bb661.us
  %5775 = phi i8 [ %5774, %true_bb662.us ], [ 0, %after_bb661.us ]
  br i1 %5420, label %true_bb665.us, label %after_bb667.us

true_bb665.us:                                    ; preds = %after_bb664.us
  %5776 = sdiv i32 19, %5527
  %5777 = and i32 %5776, %5531
  %5778 = add nsw i32 %5777, %5667
  %5779 = getelementptr inbounds i8, i8* %8, i32 %5778
  %5780 = load i8, i8* %5779, align 1, !tbaa !127
  br label %after_bb667.us

after_bb667.us:                                   ; preds = %true_bb665.us, %after_bb664.us
  %5781 = phi i8 [ %5780, %true_bb665.us ], [ 0, %after_bb664.us ]
  br i1 %5421, label %true_bb668.us, label %after_bb670.us

true_bb668.us:                                    ; preds = %after_bb667.us
  %5782 = sdiv i32 20, %5527
  %5783 = and i32 %5782, %5531
  %5784 = add nsw i32 %5783, %5667
  %5785 = getelementptr inbounds i8, i8* %8, i32 %5784
  %5786 = load i8, i8* %5785, align 1, !tbaa !127
  br label %after_bb670.us

after_bb670.us:                                   ; preds = %true_bb668.us, %after_bb667.us
  %5787 = phi i8 [ %5786, %true_bb668.us ], [ 0, %after_bb667.us ]
  br i1 %5422, label %true_bb671.us, label %after_bb673.us

true_bb671.us:                                    ; preds = %after_bb670.us
  %5788 = sdiv i32 21, %5527
  %5789 = and i32 %5788, %5531
  %5790 = add nsw i32 %5789, %5667
  %5791 = getelementptr inbounds i8, i8* %8, i32 %5790
  %5792 = load i8, i8* %5791, align 1, !tbaa !127
  br label %after_bb673.us

after_bb673.us:                                   ; preds = %true_bb671.us, %after_bb670.us
  %5793 = phi i8 [ %5792, %true_bb671.us ], [ 0, %after_bb670.us ]
  br i1 %5423, label %true_bb674.us, label %after_bb676.us

true_bb674.us:                                    ; preds = %after_bb673.us
  %5794 = sdiv i32 22, %5527
  %5795 = and i32 %5794, %5531
  %5796 = add nsw i32 %5795, %5667
  %5797 = getelementptr inbounds i8, i8* %8, i32 %5796
  %5798 = load i8, i8* %5797, align 1, !tbaa !127
  br label %after_bb676.us

after_bb676.us:                                   ; preds = %true_bb674.us, %after_bb673.us
  %5799 = phi i8 [ %5798, %true_bb674.us ], [ 0, %after_bb673.us ]
  br i1 %5424, label %true_bb677.us, label %after_bb679.us

true_bb677.us:                                    ; preds = %after_bb676.us
  %5800 = sdiv i32 23, %5527
  %5801 = and i32 %5800, %5531
  %5802 = add nsw i32 %5801, %5667
  %5803 = getelementptr inbounds i8, i8* %8, i32 %5802
  %5804 = load i8, i8* %5803, align 1, !tbaa !127
  br label %after_bb679.us

after_bb679.us:                                   ; preds = %true_bb677.us, %after_bb676.us
  %5805 = phi i8 [ %5804, %true_bb677.us ], [ 0, %after_bb676.us ]
  br i1 %5425, label %true_bb680.us, label %after_bb682.us

true_bb680.us:                                    ; preds = %after_bb679.us
  %5806 = sdiv i32 24, %5527
  %5807 = and i32 %5806, %5531
  %5808 = add nsw i32 %5807, %5667
  %5809 = getelementptr inbounds i8, i8* %8, i32 %5808
  %5810 = load i8, i8* %5809, align 1, !tbaa !127
  br label %after_bb682.us

after_bb682.us:                                   ; preds = %true_bb680.us, %after_bb679.us
  %5811 = phi i8 [ %5810, %true_bb680.us ], [ 0, %after_bb679.us ]
  br i1 %5426, label %true_bb683.us, label %after_bb685.us

true_bb683.us:                                    ; preds = %after_bb682.us
  %5812 = sdiv i32 25, %5527
  %5813 = and i32 %5812, %5531
  %5814 = add nsw i32 %5813, %5667
  %5815 = getelementptr inbounds i8, i8* %8, i32 %5814
  %5816 = load i8, i8* %5815, align 1, !tbaa !127
  br label %after_bb685.us

after_bb685.us:                                   ; preds = %true_bb683.us, %after_bb682.us
  %5817 = phi i8 [ %5816, %true_bb683.us ], [ 0, %after_bb682.us ]
  br i1 %5427, label %true_bb686.us, label %after_bb688.us

true_bb686.us:                                    ; preds = %after_bb685.us
  %5818 = sdiv i32 26, %5527
  %5819 = and i32 %5818, %5531
  %5820 = add nsw i32 %5819, %5667
  %5821 = getelementptr inbounds i8, i8* %8, i32 %5820
  %5822 = load i8, i8* %5821, align 1, !tbaa !127
  br label %after_bb688.us

after_bb688.us:                                   ; preds = %true_bb686.us, %after_bb685.us
  %5823 = phi i8 [ %5822, %true_bb686.us ], [ 0, %after_bb685.us ]
  br i1 %5428, label %true_bb689.us, label %after_bb691.us

true_bb689.us:                                    ; preds = %after_bb688.us
  %5824 = sdiv i32 27, %5527
  %5825 = and i32 %5824, %5531
  %5826 = add nsw i32 %5825, %5667
  %5827 = getelementptr inbounds i8, i8* %8, i32 %5826
  %5828 = load i8, i8* %5827, align 1, !tbaa !127
  br label %after_bb691.us

after_bb691.us:                                   ; preds = %true_bb689.us, %after_bb688.us
  %5829 = phi i8 [ %5828, %true_bb689.us ], [ 0, %after_bb688.us ]
  br i1 %5429, label %true_bb692.us, label %after_bb694.us

true_bb692.us:                                    ; preds = %after_bb691.us
  %5830 = sdiv i32 28, %5527
  %5831 = and i32 %5830, %5531
  %5832 = add nsw i32 %5831, %5667
  %5833 = getelementptr inbounds i8, i8* %8, i32 %5832
  %5834 = load i8, i8* %5833, align 1, !tbaa !127
  br label %after_bb694.us

after_bb694.us:                                   ; preds = %true_bb692.us, %after_bb691.us
  %5835 = phi i8 [ %5834, %true_bb692.us ], [ 0, %after_bb691.us ]
  br i1 %5430, label %true_bb695.us, label %after_bb697.us

true_bb695.us:                                    ; preds = %after_bb694.us
  %5836 = sdiv i32 29, %5527
  %5837 = and i32 %5836, %5531
  %5838 = add nsw i32 %5837, %5667
  %5839 = getelementptr inbounds i8, i8* %8, i32 %5838
  %5840 = load i8, i8* %5839, align 1, !tbaa !127
  br label %after_bb697.us

after_bb697.us:                                   ; preds = %true_bb695.us, %after_bb694.us
  %5841 = phi i8 [ %5840, %true_bb695.us ], [ 0, %after_bb694.us ]
  br i1 %5431, label %true_bb698.us, label %after_bb700.us

true_bb698.us:                                    ; preds = %after_bb697.us
  %5842 = sdiv i32 30, %5527
  %5843 = and i32 %5842, %5531
  %5844 = add nsw i32 %5843, %5667
  %5845 = getelementptr inbounds i8, i8* %8, i32 %5844
  %5846 = load i8, i8* %5845, align 1, !tbaa !127
  br label %after_bb700.us

after_bb700.us:                                   ; preds = %true_bb698.us, %after_bb697.us
  %5847 = phi i8 [ %5846, %true_bb698.us ], [ 0, %after_bb697.us ]
  br i1 %5432, label %true_bb701.us, label %after_bb703.us

true_bb701.us:                                    ; preds = %after_bb700.us
  %5848 = sdiv i32 31, %5527
  %5849 = and i32 %5848, %5531
  %5850 = add nsw i32 %5849, %5667
  %5851 = getelementptr inbounds i8, i8* %8, i32 %5850
  %5852 = load i8, i8* %5851, align 1, !tbaa !127
  br label %after_bb703.us

after_bb703.us:                                   ; preds = %true_bb701.us, %after_bb700.us
  %5853 = phi i8 [ %5852, %true_bb701.us ], [ 0, %after_bb700.us ]
  br i1 %5433, label %true_bb704.us, label %after_bb706.us

true_bb704.us:                                    ; preds = %after_bb703.us
  %5854 = sdiv i32 32, %5527
  %5855 = and i32 %5854, %5531
  %5856 = add nsw i32 %5855, %5667
  %5857 = getelementptr inbounds i8, i8* %8, i32 %5856
  %5858 = load i8, i8* %5857, align 1, !tbaa !127
  br label %after_bb706.us

after_bb706.us:                                   ; preds = %true_bb704.us, %after_bb703.us
  %5859 = phi i8 [ %5858, %true_bb704.us ], [ 0, %after_bb703.us ]
  br i1 %5434, label %true_bb707.us, label %after_bb709.us

true_bb707.us:                                    ; preds = %after_bb706.us
  %5860 = sdiv i32 33, %5527
  %5861 = and i32 %5860, %5531
  %5862 = add nsw i32 %5861, %5667
  %5863 = getelementptr inbounds i8, i8* %8, i32 %5862
  %5864 = load i8, i8* %5863, align 1, !tbaa !127
  br label %after_bb709.us

after_bb709.us:                                   ; preds = %true_bb707.us, %after_bb706.us
  %5865 = phi i8 [ %5864, %true_bb707.us ], [ 0, %after_bb706.us ]
  br i1 %5435, label %true_bb710.us, label %after_bb712.us

true_bb710.us:                                    ; preds = %after_bb709.us
  %5866 = sdiv i32 34, %5527
  %5867 = and i32 %5866, %5531
  %5868 = add nsw i32 %5867, %5667
  %5869 = getelementptr inbounds i8, i8* %8, i32 %5868
  %5870 = load i8, i8* %5869, align 1, !tbaa !127
  br label %after_bb712.us

after_bb712.us:                                   ; preds = %true_bb710.us, %after_bb709.us
  %5871 = phi i8 [ %5870, %true_bb710.us ], [ 0, %after_bb709.us ]
  br i1 %5436, label %true_bb713.us, label %after_bb715.us

true_bb713.us:                                    ; preds = %after_bb712.us
  %5872 = sdiv i32 35, %5527
  %5873 = and i32 %5872, %5531
  %5874 = add nsw i32 %5873, %5667
  %5875 = getelementptr inbounds i8, i8* %8, i32 %5874
  %5876 = load i8, i8* %5875, align 1, !tbaa !127
  br label %after_bb715.us

after_bb715.us:                                   ; preds = %true_bb713.us, %after_bb712.us
  %5877 = phi i8 [ %5876, %true_bb713.us ], [ 0, %after_bb712.us ]
  br i1 %5437, label %true_bb716.us, label %after_bb718.us

true_bb716.us:                                    ; preds = %after_bb715.us
  %5878 = sdiv i32 36, %5527
  %5879 = and i32 %5878, %5531
  %5880 = add nsw i32 %5879, %5667
  %5881 = getelementptr inbounds i8, i8* %8, i32 %5880
  %5882 = load i8, i8* %5881, align 1, !tbaa !127
  br label %after_bb718.us

after_bb718.us:                                   ; preds = %true_bb716.us, %after_bb715.us
  %5883 = phi i8 [ %5882, %true_bb716.us ], [ 0, %after_bb715.us ]
  br i1 %5438, label %true_bb719.us, label %after_bb721.us

true_bb719.us:                                    ; preds = %after_bb718.us
  %5884 = sdiv i32 37, %5527
  %5885 = and i32 %5884, %5531
  %5886 = add nsw i32 %5885, %5667
  %5887 = getelementptr inbounds i8, i8* %8, i32 %5886
  %5888 = load i8, i8* %5887, align 1, !tbaa !127
  br label %after_bb721.us

after_bb721.us:                                   ; preds = %true_bb719.us, %after_bb718.us
  %5889 = phi i8 [ %5888, %true_bb719.us ], [ 0, %after_bb718.us ]
  br i1 %5439, label %true_bb722.us, label %after_bb724.us

true_bb722.us:                                    ; preds = %after_bb721.us
  %5890 = sdiv i32 38, %5527
  %5891 = and i32 %5890, %5531
  %5892 = add nsw i32 %5891, %5667
  %5893 = getelementptr inbounds i8, i8* %8, i32 %5892
  %5894 = load i8, i8* %5893, align 1, !tbaa !127
  br label %after_bb724.us

after_bb724.us:                                   ; preds = %true_bb722.us, %after_bb721.us
  %5895 = phi i8 [ %5894, %true_bb722.us ], [ 0, %after_bb721.us ]
  br i1 %5440, label %true_bb725.us, label %after_bb727.us

true_bb725.us:                                    ; preds = %after_bb724.us
  %5896 = sdiv i32 39, %5527
  %5897 = and i32 %5896, %5531
  %5898 = add nsw i32 %5897, %5667
  %5899 = getelementptr inbounds i8, i8* %8, i32 %5898
  %5900 = load i8, i8* %5899, align 1, !tbaa !127
  br label %after_bb727.us

after_bb727.us:                                   ; preds = %true_bb725.us, %after_bb724.us
  %5901 = phi i8 [ %5900, %true_bb725.us ], [ 0, %after_bb724.us ]
  br i1 %5441, label %true_bb728.us, label %after_bb730.us

true_bb728.us:                                    ; preds = %after_bb727.us
  %5902 = sdiv i32 40, %5527
  %5903 = and i32 %5902, %5531
  %5904 = add nsw i32 %5903, %5667
  %5905 = getelementptr inbounds i8, i8* %8, i32 %5904
  %5906 = load i8, i8* %5905, align 1, !tbaa !127
  br label %after_bb730.us

after_bb730.us:                                   ; preds = %true_bb728.us, %after_bb727.us
  %5907 = phi i8 [ %5906, %true_bb728.us ], [ 0, %after_bb727.us ]
  br i1 %5442, label %true_bb731.us, label %after_bb733.us

true_bb731.us:                                    ; preds = %after_bb730.us
  %5908 = sdiv i32 41, %5527
  %5909 = and i32 %5908, %5531
  %5910 = add nsw i32 %5909, %5667
  %5911 = getelementptr inbounds i8, i8* %8, i32 %5910
  %5912 = load i8, i8* %5911, align 1, !tbaa !127
  br label %after_bb733.us

after_bb733.us:                                   ; preds = %true_bb731.us, %after_bb730.us
  %5913 = phi i8 [ %5912, %true_bb731.us ], [ 0, %after_bb730.us ]
  br i1 %5443, label %true_bb734.us, label %after_bb736.us

true_bb734.us:                                    ; preds = %after_bb733.us
  %5914 = sdiv i32 42, %5527
  %5915 = and i32 %5914, %5531
  %5916 = add nsw i32 %5915, %5667
  %5917 = getelementptr inbounds i8, i8* %8, i32 %5916
  %5918 = load i8, i8* %5917, align 1, !tbaa !127
  br label %after_bb736.us

after_bb736.us:                                   ; preds = %true_bb734.us, %after_bb733.us
  %5919 = phi i8 [ %5918, %true_bb734.us ], [ 0, %after_bb733.us ]
  br i1 %5444, label %true_bb737.us, label %after_bb739.us

true_bb737.us:                                    ; preds = %after_bb736.us
  %5920 = sdiv i32 43, %5527
  %5921 = and i32 %5920, %5531
  %5922 = add nsw i32 %5921, %5667
  %5923 = getelementptr inbounds i8, i8* %8, i32 %5922
  %5924 = load i8, i8* %5923, align 1, !tbaa !127
  br label %after_bb739.us

after_bb739.us:                                   ; preds = %true_bb737.us, %after_bb736.us
  %5925 = phi i8 [ %5924, %true_bb737.us ], [ 0, %after_bb736.us ]
  br i1 %5445, label %true_bb740.us, label %after_bb742.us

true_bb740.us:                                    ; preds = %after_bb739.us
  %5926 = sdiv i32 44, %5527
  %5927 = and i32 %5926, %5531
  %5928 = add nsw i32 %5927, %5667
  %5929 = getelementptr inbounds i8, i8* %8, i32 %5928
  %5930 = load i8, i8* %5929, align 1, !tbaa !127
  br label %after_bb742.us

after_bb742.us:                                   ; preds = %true_bb740.us, %after_bb739.us
  %5931 = phi i8 [ %5930, %true_bb740.us ], [ 0, %after_bb739.us ]
  br i1 %5446, label %true_bb743.us, label %after_bb745.us

true_bb743.us:                                    ; preds = %after_bb742.us
  %5932 = sdiv i32 45, %5527
  %5933 = and i32 %5932, %5531
  %5934 = add nsw i32 %5933, %5667
  %5935 = getelementptr inbounds i8, i8* %8, i32 %5934
  %5936 = load i8, i8* %5935, align 1, !tbaa !127
  br label %after_bb745.us

after_bb745.us:                                   ; preds = %true_bb743.us, %after_bb742.us
  %5937 = phi i8 [ %5936, %true_bb743.us ], [ 0, %after_bb742.us ]
  br i1 %5447, label %true_bb746.us, label %after_bb748.us

true_bb746.us:                                    ; preds = %after_bb745.us
  %5938 = sdiv i32 46, %5527
  %5939 = and i32 %5938, %5531
  %5940 = add nsw i32 %5939, %5667
  %5941 = getelementptr inbounds i8, i8* %8, i32 %5940
  %5942 = load i8, i8* %5941, align 1, !tbaa !127
  br label %after_bb748.us

after_bb748.us:                                   ; preds = %true_bb746.us, %after_bb745.us
  %5943 = phi i8 [ %5942, %true_bb746.us ], [ 0, %after_bb745.us ]
  br i1 %5448, label %true_bb749.us, label %after_bb751.us

true_bb749.us:                                    ; preds = %after_bb748.us
  %5944 = sdiv i32 47, %5527
  %5945 = and i32 %5944, %5531
  %5946 = add nsw i32 %5945, %5667
  %5947 = getelementptr inbounds i8, i8* %8, i32 %5946
  %5948 = load i8, i8* %5947, align 1, !tbaa !127
  br label %after_bb751.us

after_bb751.us:                                   ; preds = %true_bb749.us, %after_bb748.us
  %5949 = phi i8 [ %5948, %true_bb749.us ], [ 0, %after_bb748.us ]
  br i1 %5449, label %true_bb752.us, label %after_bb754.us

true_bb752.us:                                    ; preds = %after_bb751.us
  %5950 = sdiv i32 48, %5527
  %5951 = and i32 %5950, %5531
  %5952 = add nsw i32 %5951, %5667
  %5953 = getelementptr inbounds i8, i8* %8, i32 %5952
  %5954 = load i8, i8* %5953, align 1, !tbaa !127
  br label %after_bb754.us

after_bb754.us:                                   ; preds = %true_bb752.us, %after_bb751.us
  %5955 = phi i8 [ %5954, %true_bb752.us ], [ 0, %after_bb751.us ]
  br i1 %5450, label %true_bb755.us, label %after_bb757.us

true_bb755.us:                                    ; preds = %after_bb754.us
  %5956 = sdiv i32 49, %5527
  %5957 = and i32 %5956, %5531
  %5958 = add nsw i32 %5957, %5667
  %5959 = getelementptr inbounds i8, i8* %8, i32 %5958
  %5960 = load i8, i8* %5959, align 1, !tbaa !127
  br label %after_bb757.us

after_bb757.us:                                   ; preds = %true_bb755.us, %after_bb754.us
  %5961 = phi i8 [ %5960, %true_bb755.us ], [ 0, %after_bb754.us ]
  br i1 %5451, label %true_bb758.us, label %after_bb760.us

true_bb758.us:                                    ; preds = %after_bb757.us
  %5962 = sdiv i32 50, %5527
  %5963 = and i32 %5962, %5531
  %5964 = add nsw i32 %5963, %5667
  %5965 = getelementptr inbounds i8, i8* %8, i32 %5964
  %5966 = load i8, i8* %5965, align 1, !tbaa !127
  br label %after_bb760.us

after_bb760.us:                                   ; preds = %true_bb758.us, %after_bb757.us
  %5967 = phi i8 [ %5966, %true_bb758.us ], [ 0, %after_bb757.us ]
  br i1 %5452, label %true_bb761.us, label %after_bb763.us

true_bb761.us:                                    ; preds = %after_bb760.us
  %5968 = sdiv i32 51, %5527
  %5969 = and i32 %5968, %5531
  %5970 = add nsw i32 %5969, %5667
  %5971 = getelementptr inbounds i8, i8* %8, i32 %5970
  %5972 = load i8, i8* %5971, align 1, !tbaa !127
  br label %after_bb763.us

after_bb763.us:                                   ; preds = %true_bb761.us, %after_bb760.us
  %5973 = phi i8 [ %5972, %true_bb761.us ], [ 0, %after_bb760.us ]
  br i1 %5453, label %true_bb764.us, label %after_bb766.us

true_bb764.us:                                    ; preds = %after_bb763.us
  %5974 = sdiv i32 52, %5527
  %5975 = and i32 %5974, %5531
  %5976 = add nsw i32 %5975, %5667
  %5977 = getelementptr inbounds i8, i8* %8, i32 %5976
  %5978 = load i8, i8* %5977, align 1, !tbaa !127
  br label %after_bb766.us

after_bb766.us:                                   ; preds = %true_bb764.us, %after_bb763.us
  %5979 = phi i8 [ %5978, %true_bb764.us ], [ 0, %after_bb763.us ]
  br i1 %5454, label %true_bb767.us, label %after_bb769.us

true_bb767.us:                                    ; preds = %after_bb766.us
  %5980 = sdiv i32 53, %5527
  %5981 = and i32 %5980, %5531
  %5982 = add nsw i32 %5981, %5667
  %5983 = getelementptr inbounds i8, i8* %8, i32 %5982
  %5984 = load i8, i8* %5983, align 1, !tbaa !127
  br label %after_bb769.us

after_bb769.us:                                   ; preds = %true_bb767.us, %after_bb766.us
  %5985 = phi i8 [ %5984, %true_bb767.us ], [ 0, %after_bb766.us ]
  br i1 %5455, label %true_bb770.us, label %after_bb772.us

true_bb770.us:                                    ; preds = %after_bb769.us
  %5986 = sdiv i32 54, %5527
  %5987 = and i32 %5986, %5531
  %5988 = add nsw i32 %5987, %5667
  %5989 = getelementptr inbounds i8, i8* %8, i32 %5988
  %5990 = load i8, i8* %5989, align 1, !tbaa !127
  br label %after_bb772.us

after_bb772.us:                                   ; preds = %true_bb770.us, %after_bb769.us
  %5991 = phi i8 [ %5990, %true_bb770.us ], [ 0, %after_bb769.us ]
  br i1 %5456, label %true_bb773.us, label %after_bb775.us

true_bb773.us:                                    ; preds = %after_bb772.us
  %5992 = sdiv i32 55, %5527
  %5993 = and i32 %5992, %5531
  %5994 = add nsw i32 %5993, %5667
  %5995 = getelementptr inbounds i8, i8* %8, i32 %5994
  %5996 = load i8, i8* %5995, align 1, !tbaa !127
  br label %after_bb775.us

after_bb775.us:                                   ; preds = %true_bb773.us, %after_bb772.us
  %5997 = phi i8 [ %5996, %true_bb773.us ], [ 0, %after_bb772.us ]
  br i1 %5457, label %true_bb776.us, label %after_bb778.us

true_bb776.us:                                    ; preds = %after_bb775.us
  %5998 = sdiv i32 56, %5527
  %5999 = and i32 %5998, %5531
  %6000 = add nsw i32 %5999, %5667
  %6001 = getelementptr inbounds i8, i8* %8, i32 %6000
  %6002 = load i8, i8* %6001, align 1, !tbaa !127
  br label %after_bb778.us

after_bb778.us:                                   ; preds = %true_bb776.us, %after_bb775.us
  %6003 = phi i8 [ %6002, %true_bb776.us ], [ 0, %after_bb775.us ]
  br i1 %5458, label %true_bb779.us, label %after_bb781.us

true_bb779.us:                                    ; preds = %after_bb778.us
  %6004 = sdiv i32 57, %5527
  %6005 = and i32 %6004, %5531
  %6006 = add nsw i32 %6005, %5667
  %6007 = getelementptr inbounds i8, i8* %8, i32 %6006
  %6008 = load i8, i8* %6007, align 1, !tbaa !127
  br label %after_bb781.us

after_bb781.us:                                   ; preds = %true_bb779.us, %after_bb778.us
  %6009 = phi i8 [ %6008, %true_bb779.us ], [ 0, %after_bb778.us ]
  br i1 %5459, label %true_bb782.us, label %after_bb784.us

true_bb782.us:                                    ; preds = %after_bb781.us
  %6010 = sdiv i32 58, %5527
  %6011 = and i32 %6010, %5531
  %6012 = add nsw i32 %6011, %5667
  %6013 = getelementptr inbounds i8, i8* %8, i32 %6012
  %6014 = load i8, i8* %6013, align 1, !tbaa !127
  br label %after_bb784.us

after_bb784.us:                                   ; preds = %true_bb782.us, %after_bb781.us
  %6015 = phi i8 [ %6014, %true_bb782.us ], [ 0, %after_bb781.us ]
  br i1 %5460, label %true_bb785.us, label %after_bb787.us

true_bb785.us:                                    ; preds = %after_bb784.us
  %6016 = sdiv i32 59, %5527
  %6017 = and i32 %6016, %5531
  %6018 = add nsw i32 %6017, %5667
  %6019 = getelementptr inbounds i8, i8* %8, i32 %6018
  %6020 = load i8, i8* %6019, align 1, !tbaa !127
  br label %after_bb787.us

after_bb787.us:                                   ; preds = %true_bb785.us, %after_bb784.us
  %6021 = phi i8 [ %6020, %true_bb785.us ], [ 0, %after_bb784.us ]
  br i1 %5461, label %true_bb788.us, label %after_bb790.us

true_bb788.us:                                    ; preds = %after_bb787.us
  %6022 = sdiv i32 60, %5527
  %6023 = and i32 %6022, %5531
  %6024 = add nsw i32 %6023, %5667
  %6025 = getelementptr inbounds i8, i8* %8, i32 %6024
  %6026 = load i8, i8* %6025, align 1, !tbaa !127
  br label %after_bb790.us

after_bb790.us:                                   ; preds = %true_bb788.us, %after_bb787.us
  %6027 = phi i8 [ %6026, %true_bb788.us ], [ 0, %after_bb787.us ]
  br i1 %5462, label %true_bb791.us, label %after_bb793.us

true_bb791.us:                                    ; preds = %after_bb790.us
  %6028 = sdiv i32 61, %5527
  %6029 = and i32 %6028, %5531
  %6030 = add nsw i32 %6029, %5667
  %6031 = getelementptr inbounds i8, i8* %8, i32 %6030
  %6032 = load i8, i8* %6031, align 1, !tbaa !127
  br label %after_bb793.us

after_bb793.us:                                   ; preds = %true_bb791.us, %after_bb790.us
  %6033 = phi i8 [ %6032, %true_bb791.us ], [ 0, %after_bb790.us ]
  br i1 %5463, label %true_bb794.us, label %after_bb796.us

true_bb794.us:                                    ; preds = %after_bb793.us
  %6034 = sdiv i32 62, %5527
  %6035 = and i32 %6034, %5531
  %6036 = add nsw i32 %6035, %5667
  %6037 = getelementptr inbounds i8, i8* %8, i32 %6036
  %6038 = load i8, i8* %6037, align 1, !tbaa !127
  br label %after_bb796.us

after_bb796.us:                                   ; preds = %true_bb794.us, %after_bb793.us
  %6039 = phi i8 [ %6038, %true_bb794.us ], [ 0, %after_bb793.us ]
  br i1 %t2398, label %true_bb797.us, label %after_bb799.us

true_bb797.us:                                    ; preds = %after_bb796.us
  %6040 = sdiv i32 63, %5527
  %6041 = and i32 %6040, %5531
  %6042 = add nsw i32 %6041, %5667
  %6043 = getelementptr inbounds i8, i8* %8, i32 %6042
  %6044 = load i8, i8* %6043, align 1, !tbaa !127
  br label %after_bb799.us

after_bb799.us:                                   ; preds = %true_bb797.us, %after_bb796.us
  %6045 = phi i8 [ %6044, %true_bb797.us ], [ 0, %after_bb796.us ]
  %6046 = insertelement <128 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %5669, i32 0
  %6047 = insertelement <128 x i8> %6046, i8 %5673, i32 1
  %6048 = insertelement <128 x i8> %6047, i8 %5679, i32 2
  %6049 = insertelement <128 x i8> %6048, i8 %5685, i32 3
  %6050 = insertelement <128 x i8> %6049, i8 %5691, i32 4
  %6051 = insertelement <128 x i8> %6050, i8 %5697, i32 5
  %6052 = insertelement <128 x i8> %6051, i8 %5703, i32 6
  %6053 = insertelement <128 x i8> %6052, i8 %5709, i32 7
  %6054 = insertelement <128 x i8> %6053, i8 %5715, i32 8
  %6055 = insertelement <128 x i8> %6054, i8 %5721, i32 9
  %6056 = insertelement <128 x i8> %6055, i8 %5727, i32 10
  %6057 = insertelement <128 x i8> %6056, i8 %5733, i32 11
  %6058 = insertelement <128 x i8> %6057, i8 %5739, i32 12
  %6059 = insertelement <128 x i8> %6058, i8 %5745, i32 13
  %6060 = insertelement <128 x i8> %6059, i8 %5751, i32 14
  %6061 = insertelement <128 x i8> %6060, i8 %5757, i32 15
  %6062 = insertelement <128 x i8> %6061, i8 %5763, i32 16
  %6063 = insertelement <128 x i8> %6062, i8 %5769, i32 17
  %6064 = insertelement <128 x i8> %6063, i8 %5775, i32 18
  %6065 = insertelement <128 x i8> %6064, i8 %5781, i32 19
  %6066 = insertelement <128 x i8> %6065, i8 %5787, i32 20
  %6067 = insertelement <128 x i8> %6066, i8 %5793, i32 21
  %6068 = insertelement <128 x i8> %6067, i8 %5799, i32 22
  %6069 = insertelement <128 x i8> %6068, i8 %5805, i32 23
  %6070 = insertelement <128 x i8> %6069, i8 %5811, i32 24
  %6071 = insertelement <128 x i8> %6070, i8 %5817, i32 25
  %6072 = insertelement <128 x i8> %6071, i8 %5823, i32 26
  %6073 = insertelement <128 x i8> %6072, i8 %5829, i32 27
  %6074 = insertelement <128 x i8> %6073, i8 %5835, i32 28
  %6075 = insertelement <128 x i8> %6074, i8 %5841, i32 29
  %6076 = insertelement <128 x i8> %6075, i8 %5847, i32 30
  %6077 = insertelement <128 x i8> %6076, i8 %5853, i32 31
  %6078 = insertelement <128 x i8> %6077, i8 %5859, i32 32
  %6079 = insertelement <128 x i8> %6078, i8 %5865, i32 33
  %6080 = insertelement <128 x i8> %6079, i8 %5871, i32 34
  %6081 = insertelement <128 x i8> %6080, i8 %5877, i32 35
  %6082 = insertelement <128 x i8> %6081, i8 %5883, i32 36
  %6083 = insertelement <128 x i8> %6082, i8 %5889, i32 37
  %6084 = insertelement <128 x i8> %6083, i8 %5895, i32 38
  %6085 = insertelement <128 x i8> %6084, i8 %5901, i32 39
  %6086 = insertelement <128 x i8> %6085, i8 %5907, i32 40
  %6087 = insertelement <128 x i8> %6086, i8 %5913, i32 41
  %6088 = insertelement <128 x i8> %6087, i8 %5919, i32 42
  %6089 = insertelement <128 x i8> %6088, i8 %5925, i32 43
  %6090 = insertelement <128 x i8> %6089, i8 %5931, i32 44
  %6091 = insertelement <128 x i8> %6090, i8 %5937, i32 45
  %6092 = insertelement <128 x i8> %6091, i8 %5943, i32 46
  %6093 = insertelement <128 x i8> %6092, i8 %5949, i32 47
  %6094 = insertelement <128 x i8> %6093, i8 %5955, i32 48
  %6095 = insertelement <128 x i8> %6094, i8 %5961, i32 49
  %6096 = insertelement <128 x i8> %6095, i8 %5967, i32 50
  %6097 = insertelement <128 x i8> %6096, i8 %5973, i32 51
  %6098 = insertelement <128 x i8> %6097, i8 %5979, i32 52
  %6099 = insertelement <128 x i8> %6098, i8 %5985, i32 53
  %6100 = insertelement <128 x i8> %6099, i8 %5991, i32 54
  %6101 = insertelement <128 x i8> %6100, i8 %5997, i32 55
  %6102 = insertelement <128 x i8> %6101, i8 %6003, i32 56
  %6103 = insertelement <128 x i8> %6102, i8 %6009, i32 57
  %6104 = insertelement <128 x i8> %6103, i8 %6015, i32 58
  %6105 = insertelement <128 x i8> %6104, i8 %6021, i32 59
  %6106 = insertelement <128 x i8> %6105, i8 %6027, i32 60
  %6107 = insertelement <128 x i8> %6106, i8 %6033, i32 61
  %6108 = insertelement <128 x i8> %6107, i8 %6039, i32 62
  %6109 = insertelement <128 x i8> %6108, i8 %6045, i32 63
  %6110 = bitcast <128 x i8> %6109 to <16 x i64>
  %6111 = shufflevector <16 x i64> %6110, <16 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6112 = bitcast <8 x i64> %6111 to <64 x i8>
  %6113 = add nsw i32 %t2453.us, %resampled_input.s0.x.rebased223.us
  %6114 = shl nsw i32 %6113, 7
  %6115 = getelementptr inbounds i8, i8* %resampled_input207, i32 %6114
  %6116 = bitcast i8* %6115 to <64 x i8>*
  call void @llvm.masked.store.v64i8.p0v64i8(<64 x i8> %6112, <64 x i8>* %6116, i32 128, <64 x i1> %5124), !tbaa !129
  br i1 %5402, label %true_bb1379.us, label %after_bb1381.us

true_bb1379.us:                                   ; preds = %after_bb799.us
  %6117 = add nsw i32 %5667, %5532
  %6118 = getelementptr inbounds i8, i8* %8, i32 %6117
  %6119 = load i8, i8* %6118, align 1, !tbaa !127
  br label %after_bb1381.us

after_bb1381.us:                                  ; preds = %true_bb1379.us, %after_bb799.us
  %6120 = phi i8 [ %6119, %true_bb1379.us ], [ 0, %after_bb799.us ]
  br i1 %5403, label %true_bb1382.us, label %after_bb1384.us

true_bb1382.us:                                   ; preds = %after_bb1381.us
  %6121 = sdiv i32 2, %5527
  %6122 = and i32 %6121, %5531
  %6123 = add nsw i32 %6122, %5667
  %6124 = getelementptr inbounds i8, i8* %8, i32 %6123
  %6125 = load i8, i8* %6124, align 1, !tbaa !127
  br label %after_bb1384.us

after_bb1384.us:                                  ; preds = %true_bb1382.us, %after_bb1381.us
  %6126 = phi i8 [ %6125, %true_bb1382.us ], [ 0, %after_bb1381.us ]
  br i1 %5404, label %true_bb1385.us, label %after_bb1387.us

true_bb1385.us:                                   ; preds = %after_bb1384.us
  %6127 = sdiv i32 3, %5527
  %6128 = and i32 %6127, %5531
  %6129 = add nsw i32 %6128, %5667
  %6130 = getelementptr inbounds i8, i8* %8, i32 %6129
  %6131 = load i8, i8* %6130, align 1, !tbaa !127
  br label %after_bb1387.us

after_bb1387.us:                                  ; preds = %true_bb1385.us, %after_bb1384.us
  %6132 = phi i8 [ %6131, %true_bb1385.us ], [ 0, %after_bb1384.us ]
  br i1 %5405, label %true_bb1388.us, label %after_bb1390.us

true_bb1388.us:                                   ; preds = %after_bb1387.us
  %6133 = sdiv i32 4, %5527
  %6134 = and i32 %6133, %5531
  %6135 = add nsw i32 %6134, %5667
  %6136 = getelementptr inbounds i8, i8* %8, i32 %6135
  %6137 = load i8, i8* %6136, align 1, !tbaa !127
  br label %after_bb1390.us

after_bb1390.us:                                  ; preds = %true_bb1388.us, %after_bb1387.us
  %6138 = phi i8 [ %6137, %true_bb1388.us ], [ 0, %after_bb1387.us ]
  br i1 %5406, label %true_bb1391.us, label %after_bb1393.us

true_bb1391.us:                                   ; preds = %after_bb1390.us
  %6139 = sdiv i32 5, %5527
  %6140 = and i32 %6139, %5531
  %6141 = add nsw i32 %6140, %5667
  %6142 = getelementptr inbounds i8, i8* %8, i32 %6141
  %6143 = load i8, i8* %6142, align 1, !tbaa !127
  br label %after_bb1393.us

after_bb1393.us:                                  ; preds = %true_bb1391.us, %after_bb1390.us
  %6144 = phi i8 [ %6143, %true_bb1391.us ], [ 0, %after_bb1390.us ]
  br i1 %5407, label %true_bb1394.us, label %after_bb1396.us

true_bb1394.us:                                   ; preds = %after_bb1393.us
  %6145 = sdiv i32 6, %5527
  %6146 = and i32 %6145, %5531
  %6147 = add nsw i32 %6146, %5667
  %6148 = getelementptr inbounds i8, i8* %8, i32 %6147
  %6149 = load i8, i8* %6148, align 1, !tbaa !127
  br label %after_bb1396.us

after_bb1396.us:                                  ; preds = %true_bb1394.us, %after_bb1393.us
  %6150 = phi i8 [ %6149, %true_bb1394.us ], [ 0, %after_bb1393.us ]
  br i1 %5408, label %true_bb1397.us, label %after_bb1399.us

true_bb1397.us:                                   ; preds = %after_bb1396.us
  %6151 = sdiv i32 7, %5527
  %6152 = and i32 %6151, %5531
  %6153 = add nsw i32 %6152, %5667
  %6154 = getelementptr inbounds i8, i8* %8, i32 %6153
  %6155 = load i8, i8* %6154, align 1, !tbaa !127
  br label %after_bb1399.us

after_bb1399.us:                                  ; preds = %true_bb1397.us, %after_bb1396.us
  %6156 = phi i8 [ %6155, %true_bb1397.us ], [ 0, %after_bb1396.us ]
  br i1 %5409, label %true_bb1400.us, label %after_bb1402.us

true_bb1400.us:                                   ; preds = %after_bb1399.us
  %6157 = sdiv i32 8, %5527
  %6158 = and i32 %6157, %5531
  %6159 = add nsw i32 %6158, %5667
  %6160 = getelementptr inbounds i8, i8* %8, i32 %6159
  %6161 = load i8, i8* %6160, align 1, !tbaa !127
  br label %after_bb1402.us

after_bb1402.us:                                  ; preds = %true_bb1400.us, %after_bb1399.us
  %6162 = phi i8 [ %6161, %true_bb1400.us ], [ 0, %after_bb1399.us ]
  br i1 %5410, label %true_bb1403.us, label %after_bb1405.us

true_bb1403.us:                                   ; preds = %after_bb1402.us
  %6163 = sdiv i32 9, %5527
  %6164 = and i32 %6163, %5531
  %6165 = add nsw i32 %6164, %5667
  %6166 = getelementptr inbounds i8, i8* %8, i32 %6165
  %6167 = load i8, i8* %6166, align 1, !tbaa !127
  br label %after_bb1405.us

after_bb1405.us:                                  ; preds = %true_bb1403.us, %after_bb1402.us
  %6168 = phi i8 [ %6167, %true_bb1403.us ], [ 0, %after_bb1402.us ]
  br i1 %5411, label %true_bb1406.us, label %after_bb1408.us

true_bb1406.us:                                   ; preds = %after_bb1405.us
  %6169 = sdiv i32 10, %5527
  %6170 = and i32 %6169, %5531
  %6171 = add nsw i32 %6170, %5667
  %6172 = getelementptr inbounds i8, i8* %8, i32 %6171
  %6173 = load i8, i8* %6172, align 1, !tbaa !127
  br label %after_bb1408.us

after_bb1408.us:                                  ; preds = %true_bb1406.us, %after_bb1405.us
  %6174 = phi i8 [ %6173, %true_bb1406.us ], [ 0, %after_bb1405.us ]
  br i1 %5412, label %true_bb1409.us, label %after_bb1411.us

true_bb1409.us:                                   ; preds = %after_bb1408.us
  %6175 = sdiv i32 11, %5527
  %6176 = and i32 %6175, %5531
  %6177 = add nsw i32 %6176, %5667
  %6178 = getelementptr inbounds i8, i8* %8, i32 %6177
  %6179 = load i8, i8* %6178, align 1, !tbaa !127
  br label %after_bb1411.us

after_bb1411.us:                                  ; preds = %true_bb1409.us, %after_bb1408.us
  %6180 = phi i8 [ %6179, %true_bb1409.us ], [ 0, %after_bb1408.us ]
  br i1 %5413, label %true_bb1412.us, label %after_bb1414.us

true_bb1412.us:                                   ; preds = %after_bb1411.us
  %6181 = sdiv i32 12, %5527
  %6182 = and i32 %6181, %5531
  %6183 = add nsw i32 %6182, %5667
  %6184 = getelementptr inbounds i8, i8* %8, i32 %6183
  %6185 = load i8, i8* %6184, align 1, !tbaa !127
  br label %after_bb1414.us

after_bb1414.us:                                  ; preds = %true_bb1412.us, %after_bb1411.us
  %6186 = phi i8 [ %6185, %true_bb1412.us ], [ 0, %after_bb1411.us ]
  br i1 %5414, label %true_bb1415.us, label %after_bb1417.us

true_bb1415.us:                                   ; preds = %after_bb1414.us
  %6187 = sdiv i32 13, %5527
  %6188 = and i32 %6187, %5531
  %6189 = add nsw i32 %6188, %5667
  %6190 = getelementptr inbounds i8, i8* %8, i32 %6189
  %6191 = load i8, i8* %6190, align 1, !tbaa !127
  br label %after_bb1417.us

after_bb1417.us:                                  ; preds = %true_bb1415.us, %after_bb1414.us
  %6192 = phi i8 [ %6191, %true_bb1415.us ], [ 0, %after_bb1414.us ]
  br i1 %5415, label %true_bb1418.us, label %after_bb1420.us

true_bb1418.us:                                   ; preds = %after_bb1417.us
  %6193 = sdiv i32 14, %5527
  %6194 = and i32 %6193, %5531
  %6195 = add nsw i32 %6194, %5667
  %6196 = getelementptr inbounds i8, i8* %8, i32 %6195
  %6197 = load i8, i8* %6196, align 1, !tbaa !127
  br label %after_bb1420.us

after_bb1420.us:                                  ; preds = %true_bb1418.us, %after_bb1417.us
  %6198 = phi i8 [ %6197, %true_bb1418.us ], [ 0, %after_bb1417.us ]
  br i1 %5416, label %true_bb1421.us, label %after_bb1423.us

true_bb1421.us:                                   ; preds = %after_bb1420.us
  %6199 = sdiv i32 15, %5527
  %6200 = and i32 %6199, %5531
  %6201 = add nsw i32 %6200, %5667
  %6202 = getelementptr inbounds i8, i8* %8, i32 %6201
  %6203 = load i8, i8* %6202, align 1, !tbaa !127
  br label %after_bb1423.us

after_bb1423.us:                                  ; preds = %true_bb1421.us, %after_bb1420.us
  %6204 = phi i8 [ %6203, %true_bb1421.us ], [ 0, %after_bb1420.us ]
  br i1 %5417, label %true_bb1424.us, label %after_bb1426.us

true_bb1424.us:                                   ; preds = %after_bb1423.us
  %6205 = sdiv i32 16, %5527
  %6206 = and i32 %6205, %5531
  %6207 = add nsw i32 %6206, %5667
  %6208 = getelementptr inbounds i8, i8* %8, i32 %6207
  %6209 = load i8, i8* %6208, align 1, !tbaa !127
  br label %after_bb1426.us

after_bb1426.us:                                  ; preds = %true_bb1424.us, %after_bb1423.us
  %6210 = phi i8 [ %6209, %true_bb1424.us ], [ 0, %after_bb1423.us ]
  br i1 %5418, label %true_bb1427.us, label %after_bb1429.us

true_bb1427.us:                                   ; preds = %after_bb1426.us
  %6211 = sdiv i32 17, %5527
  %6212 = and i32 %6211, %5531
  %6213 = add nsw i32 %6212, %5667
  %6214 = getelementptr inbounds i8, i8* %8, i32 %6213
  %6215 = load i8, i8* %6214, align 1, !tbaa !127
  br label %after_bb1429.us

after_bb1429.us:                                  ; preds = %true_bb1427.us, %after_bb1426.us
  %6216 = phi i8 [ %6215, %true_bb1427.us ], [ 0, %after_bb1426.us ]
  br i1 %5419, label %true_bb1430.us, label %after_bb1432.us

true_bb1430.us:                                   ; preds = %after_bb1429.us
  %6217 = sdiv i32 18, %5527
  %6218 = and i32 %6217, %5531
  %6219 = add nsw i32 %6218, %5667
  %6220 = getelementptr inbounds i8, i8* %8, i32 %6219
  %6221 = load i8, i8* %6220, align 1, !tbaa !127
  br label %after_bb1432.us

after_bb1432.us:                                  ; preds = %true_bb1430.us, %after_bb1429.us
  %6222 = phi i8 [ %6221, %true_bb1430.us ], [ 0, %after_bb1429.us ]
  br i1 %5420, label %true_bb1433.us, label %after_bb1435.us

true_bb1433.us:                                   ; preds = %after_bb1432.us
  %6223 = sdiv i32 19, %5527
  %6224 = and i32 %6223, %5531
  %6225 = add nsw i32 %6224, %5667
  %6226 = getelementptr inbounds i8, i8* %8, i32 %6225
  %6227 = load i8, i8* %6226, align 1, !tbaa !127
  br label %after_bb1435.us

after_bb1435.us:                                  ; preds = %true_bb1433.us, %after_bb1432.us
  %6228 = phi i8 [ %6227, %true_bb1433.us ], [ 0, %after_bb1432.us ]
  br i1 %5421, label %true_bb1436.us, label %after_bb1438.us

true_bb1436.us:                                   ; preds = %after_bb1435.us
  %6229 = sdiv i32 20, %5527
  %6230 = and i32 %6229, %5531
  %6231 = add nsw i32 %6230, %5667
  %6232 = getelementptr inbounds i8, i8* %8, i32 %6231
  %6233 = load i8, i8* %6232, align 1, !tbaa !127
  br label %after_bb1438.us

after_bb1438.us:                                  ; preds = %true_bb1436.us, %after_bb1435.us
  %6234 = phi i8 [ %6233, %true_bb1436.us ], [ 0, %after_bb1435.us ]
  br i1 %5422, label %true_bb1439.us, label %after_bb1441.us

true_bb1439.us:                                   ; preds = %after_bb1438.us
  %6235 = sdiv i32 21, %5527
  %6236 = and i32 %6235, %5531
  %6237 = add nsw i32 %6236, %5667
  %6238 = getelementptr inbounds i8, i8* %8, i32 %6237
  %6239 = load i8, i8* %6238, align 1, !tbaa !127
  br label %after_bb1441.us

after_bb1441.us:                                  ; preds = %true_bb1439.us, %after_bb1438.us
  %6240 = phi i8 [ %6239, %true_bb1439.us ], [ 0, %after_bb1438.us ]
  br i1 %5423, label %true_bb1442.us, label %after_bb1444.us

true_bb1442.us:                                   ; preds = %after_bb1441.us
  %6241 = sdiv i32 22, %5527
  %6242 = and i32 %6241, %5531
  %6243 = add nsw i32 %6242, %5667
  %6244 = getelementptr inbounds i8, i8* %8, i32 %6243
  %6245 = load i8, i8* %6244, align 1, !tbaa !127
  br label %after_bb1444.us

after_bb1444.us:                                  ; preds = %true_bb1442.us, %after_bb1441.us
  %6246 = phi i8 [ %6245, %true_bb1442.us ], [ 0, %after_bb1441.us ]
  br i1 %5424, label %true_bb1445.us, label %after_bb1447.us

true_bb1445.us:                                   ; preds = %after_bb1444.us
  %6247 = sdiv i32 23, %5527
  %6248 = and i32 %6247, %5531
  %6249 = add nsw i32 %6248, %5667
  %6250 = getelementptr inbounds i8, i8* %8, i32 %6249
  %6251 = load i8, i8* %6250, align 1, !tbaa !127
  br label %after_bb1447.us

after_bb1447.us:                                  ; preds = %true_bb1445.us, %after_bb1444.us
  %6252 = phi i8 [ %6251, %true_bb1445.us ], [ 0, %after_bb1444.us ]
  br i1 %5425, label %true_bb1448.us, label %after_bb1450.us

true_bb1448.us:                                   ; preds = %after_bb1447.us
  %6253 = sdiv i32 24, %5527
  %6254 = and i32 %6253, %5531
  %6255 = add nsw i32 %6254, %5667
  %6256 = getelementptr inbounds i8, i8* %8, i32 %6255
  %6257 = load i8, i8* %6256, align 1, !tbaa !127
  br label %after_bb1450.us

after_bb1450.us:                                  ; preds = %true_bb1448.us, %after_bb1447.us
  %6258 = phi i8 [ %6257, %true_bb1448.us ], [ 0, %after_bb1447.us ]
  br i1 %5426, label %true_bb1451.us, label %after_bb1453.us

true_bb1451.us:                                   ; preds = %after_bb1450.us
  %6259 = sdiv i32 25, %5527
  %6260 = and i32 %6259, %5531
  %6261 = add nsw i32 %6260, %5667
  %6262 = getelementptr inbounds i8, i8* %8, i32 %6261
  %6263 = load i8, i8* %6262, align 1, !tbaa !127
  br label %after_bb1453.us

after_bb1453.us:                                  ; preds = %true_bb1451.us, %after_bb1450.us
  %6264 = phi i8 [ %6263, %true_bb1451.us ], [ 0, %after_bb1450.us ]
  br i1 %5427, label %true_bb1454.us, label %after_bb1456.us

true_bb1454.us:                                   ; preds = %after_bb1453.us
  %6265 = sdiv i32 26, %5527
  %6266 = and i32 %6265, %5531
  %6267 = add nsw i32 %6266, %5667
  %6268 = getelementptr inbounds i8, i8* %8, i32 %6267
  %6269 = load i8, i8* %6268, align 1, !tbaa !127
  br label %after_bb1456.us

after_bb1456.us:                                  ; preds = %true_bb1454.us, %after_bb1453.us
  %6270 = phi i8 [ %6269, %true_bb1454.us ], [ 0, %after_bb1453.us ]
  br i1 %5428, label %true_bb1457.us, label %after_bb1459.us

true_bb1457.us:                                   ; preds = %after_bb1456.us
  %6271 = sdiv i32 27, %5527
  %6272 = and i32 %6271, %5531
  %6273 = add nsw i32 %6272, %5667
  %6274 = getelementptr inbounds i8, i8* %8, i32 %6273
  %6275 = load i8, i8* %6274, align 1, !tbaa !127
  br label %after_bb1459.us

after_bb1459.us:                                  ; preds = %true_bb1457.us, %after_bb1456.us
  %6276 = phi i8 [ %6275, %true_bb1457.us ], [ 0, %after_bb1456.us ]
  br i1 %5429, label %true_bb1460.us, label %after_bb1462.us

true_bb1460.us:                                   ; preds = %after_bb1459.us
  %6277 = sdiv i32 28, %5527
  %6278 = and i32 %6277, %5531
  %6279 = add nsw i32 %6278, %5667
  %6280 = getelementptr inbounds i8, i8* %8, i32 %6279
  %6281 = load i8, i8* %6280, align 1, !tbaa !127
  br label %after_bb1462.us

after_bb1462.us:                                  ; preds = %true_bb1460.us, %after_bb1459.us
  %6282 = phi i8 [ %6281, %true_bb1460.us ], [ 0, %after_bb1459.us ]
  br i1 %5430, label %true_bb1463.us, label %after_bb1465.us

true_bb1463.us:                                   ; preds = %after_bb1462.us
  %6283 = sdiv i32 29, %5527
  %6284 = and i32 %6283, %5531
  %6285 = add nsw i32 %6284, %5667
  %6286 = getelementptr inbounds i8, i8* %8, i32 %6285
  %6287 = load i8, i8* %6286, align 1, !tbaa !127
  br label %after_bb1465.us

after_bb1465.us:                                  ; preds = %true_bb1463.us, %after_bb1462.us
  %6288 = phi i8 [ %6287, %true_bb1463.us ], [ 0, %after_bb1462.us ]
  br i1 %5431, label %true_bb1466.us, label %after_bb1468.us

true_bb1466.us:                                   ; preds = %after_bb1465.us
  %6289 = sdiv i32 30, %5527
  %6290 = and i32 %6289, %5531
  %6291 = add nsw i32 %6290, %5667
  %6292 = getelementptr inbounds i8, i8* %8, i32 %6291
  %6293 = load i8, i8* %6292, align 1, !tbaa !127
  br label %after_bb1468.us

after_bb1468.us:                                  ; preds = %true_bb1466.us, %after_bb1465.us
  %6294 = phi i8 [ %6293, %true_bb1466.us ], [ 0, %after_bb1465.us ]
  br i1 %5432, label %true_bb1469.us, label %after_bb1471.us

true_bb1469.us:                                   ; preds = %after_bb1468.us
  %6295 = sdiv i32 31, %5527
  %6296 = and i32 %6295, %5531
  %6297 = add nsw i32 %6296, %5667
  %6298 = getelementptr inbounds i8, i8* %8, i32 %6297
  %6299 = load i8, i8* %6298, align 1, !tbaa !127
  br label %after_bb1471.us

after_bb1471.us:                                  ; preds = %true_bb1469.us, %after_bb1468.us
  %6300 = phi i8 [ %6299, %true_bb1469.us ], [ 0, %after_bb1468.us ]
  br i1 %5433, label %true_bb1472.us, label %after_bb1474.us

true_bb1472.us:                                   ; preds = %after_bb1471.us
  %6301 = sdiv i32 32, %5527
  %6302 = and i32 %6301, %5531
  %6303 = add nsw i32 %6302, %5667
  %6304 = getelementptr inbounds i8, i8* %8, i32 %6303
  %6305 = load i8, i8* %6304, align 1, !tbaa !127
  br label %after_bb1474.us

after_bb1474.us:                                  ; preds = %true_bb1472.us, %after_bb1471.us
  %6306 = phi i8 [ %6305, %true_bb1472.us ], [ 0, %after_bb1471.us ]
  br i1 %5434, label %true_bb1475.us, label %after_bb1477.us

true_bb1475.us:                                   ; preds = %after_bb1474.us
  %6307 = sdiv i32 33, %5527
  %6308 = and i32 %6307, %5531
  %6309 = add nsw i32 %6308, %5667
  %6310 = getelementptr inbounds i8, i8* %8, i32 %6309
  %6311 = load i8, i8* %6310, align 1, !tbaa !127
  br label %after_bb1477.us

after_bb1477.us:                                  ; preds = %true_bb1475.us, %after_bb1474.us
  %6312 = phi i8 [ %6311, %true_bb1475.us ], [ 0, %after_bb1474.us ]
  br i1 %5435, label %true_bb1478.us, label %after_bb1480.us

true_bb1478.us:                                   ; preds = %after_bb1477.us
  %6313 = sdiv i32 34, %5527
  %6314 = and i32 %6313, %5531
  %6315 = add nsw i32 %6314, %5667
  %6316 = getelementptr inbounds i8, i8* %8, i32 %6315
  %6317 = load i8, i8* %6316, align 1, !tbaa !127
  br label %after_bb1480.us

after_bb1480.us:                                  ; preds = %true_bb1478.us, %after_bb1477.us
  %6318 = phi i8 [ %6317, %true_bb1478.us ], [ 0, %after_bb1477.us ]
  br i1 %5436, label %true_bb1481.us, label %after_bb1483.us

true_bb1481.us:                                   ; preds = %after_bb1480.us
  %6319 = sdiv i32 35, %5527
  %6320 = and i32 %6319, %5531
  %6321 = add nsw i32 %6320, %5667
  %6322 = getelementptr inbounds i8, i8* %8, i32 %6321
  %6323 = load i8, i8* %6322, align 1, !tbaa !127
  br label %after_bb1483.us

after_bb1483.us:                                  ; preds = %true_bb1481.us, %after_bb1480.us
  %6324 = phi i8 [ %6323, %true_bb1481.us ], [ 0, %after_bb1480.us ]
  br i1 %5437, label %true_bb1484.us, label %after_bb1486.us

true_bb1484.us:                                   ; preds = %after_bb1483.us
  %6325 = sdiv i32 36, %5527
  %6326 = and i32 %6325, %5531
  %6327 = add nsw i32 %6326, %5667
  %6328 = getelementptr inbounds i8, i8* %8, i32 %6327
  %6329 = load i8, i8* %6328, align 1, !tbaa !127
  br label %after_bb1486.us

after_bb1486.us:                                  ; preds = %true_bb1484.us, %after_bb1483.us
  %6330 = phi i8 [ %6329, %true_bb1484.us ], [ 0, %after_bb1483.us ]
  br i1 %5438, label %true_bb1487.us, label %after_bb1489.us

true_bb1487.us:                                   ; preds = %after_bb1486.us
  %6331 = sdiv i32 37, %5527
  %6332 = and i32 %6331, %5531
  %6333 = add nsw i32 %6332, %5667
  %6334 = getelementptr inbounds i8, i8* %8, i32 %6333
  %6335 = load i8, i8* %6334, align 1, !tbaa !127
  br label %after_bb1489.us

after_bb1489.us:                                  ; preds = %true_bb1487.us, %after_bb1486.us
  %6336 = phi i8 [ %6335, %true_bb1487.us ], [ 0, %after_bb1486.us ]
  br i1 %5439, label %true_bb1490.us, label %after_bb1492.us

true_bb1490.us:                                   ; preds = %after_bb1489.us
  %6337 = sdiv i32 38, %5527
  %6338 = and i32 %6337, %5531
  %6339 = add nsw i32 %6338, %5667
  %6340 = getelementptr inbounds i8, i8* %8, i32 %6339
  %6341 = load i8, i8* %6340, align 1, !tbaa !127
  br label %after_bb1492.us

after_bb1492.us:                                  ; preds = %true_bb1490.us, %after_bb1489.us
  %6342 = phi i8 [ %6341, %true_bb1490.us ], [ 0, %after_bb1489.us ]
  br i1 %5440, label %true_bb1493.us, label %after_bb1495.us

true_bb1493.us:                                   ; preds = %after_bb1492.us
  %6343 = sdiv i32 39, %5527
  %6344 = and i32 %6343, %5531
  %6345 = add nsw i32 %6344, %5667
  %6346 = getelementptr inbounds i8, i8* %8, i32 %6345
  %6347 = load i8, i8* %6346, align 1, !tbaa !127
  br label %after_bb1495.us

after_bb1495.us:                                  ; preds = %true_bb1493.us, %after_bb1492.us
  %6348 = phi i8 [ %6347, %true_bb1493.us ], [ 0, %after_bb1492.us ]
  br i1 %5441, label %true_bb1496.us, label %after_bb1498.us

true_bb1496.us:                                   ; preds = %after_bb1495.us
  %6349 = sdiv i32 40, %5527
  %6350 = and i32 %6349, %5531
  %6351 = add nsw i32 %6350, %5667
  %6352 = getelementptr inbounds i8, i8* %8, i32 %6351
  %6353 = load i8, i8* %6352, align 1, !tbaa !127
  br label %after_bb1498.us

after_bb1498.us:                                  ; preds = %true_bb1496.us, %after_bb1495.us
  %6354 = phi i8 [ %6353, %true_bb1496.us ], [ 0, %after_bb1495.us ]
  br i1 %5442, label %true_bb1499.us, label %after_bb1501.us

true_bb1499.us:                                   ; preds = %after_bb1498.us
  %6355 = sdiv i32 41, %5527
  %6356 = and i32 %6355, %5531
  %6357 = add nsw i32 %6356, %5667
  %6358 = getelementptr inbounds i8, i8* %8, i32 %6357
  %6359 = load i8, i8* %6358, align 1, !tbaa !127
  br label %after_bb1501.us

after_bb1501.us:                                  ; preds = %true_bb1499.us, %after_bb1498.us
  %6360 = phi i8 [ %6359, %true_bb1499.us ], [ 0, %after_bb1498.us ]
  br i1 %5443, label %true_bb1502.us, label %after_bb1504.us

true_bb1502.us:                                   ; preds = %after_bb1501.us
  %6361 = sdiv i32 42, %5527
  %6362 = and i32 %6361, %5531
  %6363 = add nsw i32 %6362, %5667
  %6364 = getelementptr inbounds i8, i8* %8, i32 %6363
  %6365 = load i8, i8* %6364, align 1, !tbaa !127
  br label %after_bb1504.us

after_bb1504.us:                                  ; preds = %true_bb1502.us, %after_bb1501.us
  %6366 = phi i8 [ %6365, %true_bb1502.us ], [ 0, %after_bb1501.us ]
  br i1 %5444, label %true_bb1505.us, label %after_bb1507.us

true_bb1505.us:                                   ; preds = %after_bb1504.us
  %6367 = sdiv i32 43, %5527
  %6368 = and i32 %6367, %5531
  %6369 = add nsw i32 %6368, %5667
  %6370 = getelementptr inbounds i8, i8* %8, i32 %6369
  %6371 = load i8, i8* %6370, align 1, !tbaa !127
  br label %after_bb1507.us

after_bb1507.us:                                  ; preds = %true_bb1505.us, %after_bb1504.us
  %6372 = phi i8 [ %6371, %true_bb1505.us ], [ 0, %after_bb1504.us ]
  br i1 %5445, label %true_bb1508.us, label %after_bb1510.us

true_bb1508.us:                                   ; preds = %after_bb1507.us
  %6373 = sdiv i32 44, %5527
  %6374 = and i32 %6373, %5531
  %6375 = add nsw i32 %6374, %5667
  %6376 = getelementptr inbounds i8, i8* %8, i32 %6375
  %6377 = load i8, i8* %6376, align 1, !tbaa !127
  br label %after_bb1510.us

after_bb1510.us:                                  ; preds = %true_bb1508.us, %after_bb1507.us
  %6378 = phi i8 [ %6377, %true_bb1508.us ], [ 0, %after_bb1507.us ]
  br i1 %5446, label %true_bb1511.us, label %after_bb1513.us

true_bb1511.us:                                   ; preds = %after_bb1510.us
  %6379 = sdiv i32 45, %5527
  %6380 = and i32 %6379, %5531
  %6381 = add nsw i32 %6380, %5667
  %6382 = getelementptr inbounds i8, i8* %8, i32 %6381
  %6383 = load i8, i8* %6382, align 1, !tbaa !127
  br label %after_bb1513.us

after_bb1513.us:                                  ; preds = %true_bb1511.us, %after_bb1510.us
  %6384 = phi i8 [ %6383, %true_bb1511.us ], [ 0, %after_bb1510.us ]
  br i1 %5447, label %true_bb1514.us, label %after_bb1516.us

true_bb1514.us:                                   ; preds = %after_bb1513.us
  %6385 = sdiv i32 46, %5527
  %6386 = and i32 %6385, %5531
  %6387 = add nsw i32 %6386, %5667
  %6388 = getelementptr inbounds i8, i8* %8, i32 %6387
  %6389 = load i8, i8* %6388, align 1, !tbaa !127
  br label %after_bb1516.us

after_bb1516.us:                                  ; preds = %true_bb1514.us, %after_bb1513.us
  %6390 = phi i8 [ %6389, %true_bb1514.us ], [ 0, %after_bb1513.us ]
  br i1 %5448, label %true_bb1517.us, label %after_bb1519.us

true_bb1517.us:                                   ; preds = %after_bb1516.us
  %6391 = sdiv i32 47, %5527
  %6392 = and i32 %6391, %5531
  %6393 = add nsw i32 %6392, %5667
  %6394 = getelementptr inbounds i8, i8* %8, i32 %6393
  %6395 = load i8, i8* %6394, align 1, !tbaa !127
  br label %after_bb1519.us

after_bb1519.us:                                  ; preds = %true_bb1517.us, %after_bb1516.us
  %6396 = phi i8 [ %6395, %true_bb1517.us ], [ 0, %after_bb1516.us ]
  br i1 %5449, label %true_bb1520.us, label %after_bb1522.us

true_bb1520.us:                                   ; preds = %after_bb1519.us
  %6397 = sdiv i32 48, %5527
  %6398 = and i32 %6397, %5531
  %6399 = add nsw i32 %6398, %5667
  %6400 = getelementptr inbounds i8, i8* %8, i32 %6399
  %6401 = load i8, i8* %6400, align 1, !tbaa !127
  br label %after_bb1522.us

after_bb1522.us:                                  ; preds = %true_bb1520.us, %after_bb1519.us
  %6402 = phi i8 [ %6401, %true_bb1520.us ], [ 0, %after_bb1519.us ]
  br i1 %5450, label %true_bb1523.us, label %after_bb1525.us

true_bb1523.us:                                   ; preds = %after_bb1522.us
  %6403 = sdiv i32 49, %5527
  %6404 = and i32 %6403, %5531
  %6405 = add nsw i32 %6404, %5667
  %6406 = getelementptr inbounds i8, i8* %8, i32 %6405
  %6407 = load i8, i8* %6406, align 1, !tbaa !127
  br label %after_bb1525.us

after_bb1525.us:                                  ; preds = %true_bb1523.us, %after_bb1522.us
  %6408 = phi i8 [ %6407, %true_bb1523.us ], [ 0, %after_bb1522.us ]
  br i1 %5451, label %true_bb1526.us, label %after_bb1528.us

true_bb1526.us:                                   ; preds = %after_bb1525.us
  %6409 = sdiv i32 50, %5527
  %6410 = and i32 %6409, %5531
  %6411 = add nsw i32 %6410, %5667
  %6412 = getelementptr inbounds i8, i8* %8, i32 %6411
  %6413 = load i8, i8* %6412, align 1, !tbaa !127
  br label %after_bb1528.us

after_bb1528.us:                                  ; preds = %true_bb1526.us, %after_bb1525.us
  %6414 = phi i8 [ %6413, %true_bb1526.us ], [ 0, %after_bb1525.us ]
  br i1 %5452, label %true_bb1529.us, label %after_bb1531.us

true_bb1529.us:                                   ; preds = %after_bb1528.us
  %6415 = sdiv i32 51, %5527
  %6416 = and i32 %6415, %5531
  %6417 = add nsw i32 %6416, %5667
  %6418 = getelementptr inbounds i8, i8* %8, i32 %6417
  %6419 = load i8, i8* %6418, align 1, !tbaa !127
  br label %after_bb1531.us

after_bb1531.us:                                  ; preds = %true_bb1529.us, %after_bb1528.us
  %6420 = phi i8 [ %6419, %true_bb1529.us ], [ 0, %after_bb1528.us ]
  br i1 %5453, label %true_bb1532.us, label %after_bb1534.us

true_bb1532.us:                                   ; preds = %after_bb1531.us
  %6421 = sdiv i32 52, %5527
  %6422 = and i32 %6421, %5531
  %6423 = add nsw i32 %6422, %5667
  %6424 = getelementptr inbounds i8, i8* %8, i32 %6423
  %6425 = load i8, i8* %6424, align 1, !tbaa !127
  br label %after_bb1534.us

after_bb1534.us:                                  ; preds = %true_bb1532.us, %after_bb1531.us
  %6426 = phi i8 [ %6425, %true_bb1532.us ], [ 0, %after_bb1531.us ]
  br i1 %5454, label %true_bb1535.us, label %after_bb1537.us

true_bb1535.us:                                   ; preds = %after_bb1534.us
  %6427 = sdiv i32 53, %5527
  %6428 = and i32 %6427, %5531
  %6429 = add nsw i32 %6428, %5667
  %6430 = getelementptr inbounds i8, i8* %8, i32 %6429
  %6431 = load i8, i8* %6430, align 1, !tbaa !127
  br label %after_bb1537.us

after_bb1537.us:                                  ; preds = %true_bb1535.us, %after_bb1534.us
  %6432 = phi i8 [ %6431, %true_bb1535.us ], [ 0, %after_bb1534.us ]
  br i1 %5455, label %true_bb1538.us, label %after_bb1540.us

true_bb1538.us:                                   ; preds = %after_bb1537.us
  %6433 = sdiv i32 54, %5527
  %6434 = and i32 %6433, %5531
  %6435 = add nsw i32 %6434, %5667
  %6436 = getelementptr inbounds i8, i8* %8, i32 %6435
  %6437 = load i8, i8* %6436, align 1, !tbaa !127
  br label %after_bb1540.us

after_bb1540.us:                                  ; preds = %true_bb1538.us, %after_bb1537.us
  %6438 = phi i8 [ %6437, %true_bb1538.us ], [ 0, %after_bb1537.us ]
  br i1 %5456, label %true_bb1541.us, label %after_bb1543.us

true_bb1541.us:                                   ; preds = %after_bb1540.us
  %6439 = sdiv i32 55, %5527
  %6440 = and i32 %6439, %5531
  %6441 = add nsw i32 %6440, %5667
  %6442 = getelementptr inbounds i8, i8* %8, i32 %6441
  %6443 = load i8, i8* %6442, align 1, !tbaa !127
  br label %after_bb1543.us

after_bb1543.us:                                  ; preds = %true_bb1541.us, %after_bb1540.us
  %6444 = phi i8 [ %6443, %true_bb1541.us ], [ 0, %after_bb1540.us ]
  br i1 %5457, label %true_bb1544.us, label %after_bb1546.us

true_bb1544.us:                                   ; preds = %after_bb1543.us
  %6445 = sdiv i32 56, %5527
  %6446 = and i32 %6445, %5531
  %6447 = add nsw i32 %6446, %5667
  %6448 = getelementptr inbounds i8, i8* %8, i32 %6447
  %6449 = load i8, i8* %6448, align 1, !tbaa !127
  br label %after_bb1546.us

after_bb1546.us:                                  ; preds = %true_bb1544.us, %after_bb1543.us
  %6450 = phi i8 [ %6449, %true_bb1544.us ], [ 0, %after_bb1543.us ]
  br i1 %5458, label %true_bb1547.us, label %after_bb1549.us

true_bb1547.us:                                   ; preds = %after_bb1546.us
  %6451 = sdiv i32 57, %5527
  %6452 = and i32 %6451, %5531
  %6453 = add nsw i32 %6452, %5667
  %6454 = getelementptr inbounds i8, i8* %8, i32 %6453
  %6455 = load i8, i8* %6454, align 1, !tbaa !127
  br label %after_bb1549.us

after_bb1549.us:                                  ; preds = %true_bb1547.us, %after_bb1546.us
  %6456 = phi i8 [ %6455, %true_bb1547.us ], [ 0, %after_bb1546.us ]
  br i1 %5459, label %true_bb1550.us, label %after_bb1552.us

true_bb1550.us:                                   ; preds = %after_bb1549.us
  %6457 = sdiv i32 58, %5527
  %6458 = and i32 %6457, %5531
  %6459 = add nsw i32 %6458, %5667
  %6460 = getelementptr inbounds i8, i8* %8, i32 %6459
  %6461 = load i8, i8* %6460, align 1, !tbaa !127
  br label %after_bb1552.us

after_bb1552.us:                                  ; preds = %true_bb1550.us, %after_bb1549.us
  %6462 = phi i8 [ %6461, %true_bb1550.us ], [ 0, %after_bb1549.us ]
  br i1 %5460, label %true_bb1553.us, label %after_bb1555.us

true_bb1553.us:                                   ; preds = %after_bb1552.us
  %6463 = sdiv i32 59, %5527
  %6464 = and i32 %6463, %5531
  %6465 = add nsw i32 %6464, %5667
  %6466 = getelementptr inbounds i8, i8* %8, i32 %6465
  %6467 = load i8, i8* %6466, align 1, !tbaa !127
  br label %after_bb1555.us

after_bb1555.us:                                  ; preds = %true_bb1553.us, %after_bb1552.us
  %6468 = phi i8 [ %6467, %true_bb1553.us ], [ 0, %after_bb1552.us ]
  br i1 %5461, label %true_bb1556.us, label %after_bb1558.us

true_bb1556.us:                                   ; preds = %after_bb1555.us
  %6469 = sdiv i32 60, %5527
  %6470 = and i32 %6469, %5531
  %6471 = add nsw i32 %6470, %5667
  %6472 = getelementptr inbounds i8, i8* %8, i32 %6471
  %6473 = load i8, i8* %6472, align 1, !tbaa !127
  br label %after_bb1558.us

after_bb1558.us:                                  ; preds = %true_bb1556.us, %after_bb1555.us
  %6474 = phi i8 [ %6473, %true_bb1556.us ], [ 0, %after_bb1555.us ]
  br i1 %5462, label %true_bb1559.us, label %after_bb1561.us

true_bb1559.us:                                   ; preds = %after_bb1558.us
  %6475 = sdiv i32 61, %5527
  %6476 = and i32 %6475, %5531
  %6477 = add nsw i32 %6476, %5667
  %6478 = getelementptr inbounds i8, i8* %8, i32 %6477
  %6479 = load i8, i8* %6478, align 1, !tbaa !127
  br label %after_bb1561.us

after_bb1561.us:                                  ; preds = %true_bb1559.us, %after_bb1558.us
  %6480 = phi i8 [ %6479, %true_bb1559.us ], [ 0, %after_bb1558.us ]
  br i1 %5463, label %true_bb1562.us, label %after_bb1564.us

true_bb1562.us:                                   ; preds = %after_bb1561.us
  %6481 = sdiv i32 62, %5527
  %6482 = and i32 %6481, %5531
  %6483 = add nsw i32 %6482, %5667
  %6484 = getelementptr inbounds i8, i8* %8, i32 %6483
  %6485 = load i8, i8* %6484, align 1, !tbaa !127
  br label %after_bb1564.us

after_bb1564.us:                                  ; preds = %true_bb1562.us, %after_bb1561.us
  %6486 = phi i8 [ %6485, %true_bb1562.us ], [ 0, %after_bb1561.us ]
  br i1 %t2398, label %true_bb1565.us, label %after_bb1567.us

true_bb1565.us:                                   ; preds = %after_bb1564.us
  %6487 = sdiv i32 63, %5527
  %6488 = and i32 %6487, %5531
  %6489 = add nsw i32 %6488, %5667
  %6490 = getelementptr inbounds i8, i8* %8, i32 %6489
  %6491 = load i8, i8* %6490, align 1, !tbaa !127
  br label %after_bb1567.us

after_bb1567.us:                                  ; preds = %true_bb1565.us, %after_bb1564.us
  %6492 = phi i8 [ %6491, %true_bb1565.us ], [ 0, %after_bb1564.us ]
  br i1 %t2399, label %true_bb1568.us, label %after_bb1570.us

true_bb1568.us:                                   ; preds = %after_bb1567.us
  %6493 = sdiv i32 64, %5527
  %6494 = and i32 %6493, %5531
  %6495 = add nsw i32 %6494, %5667
  %6496 = getelementptr inbounds i8, i8* %8, i32 %6495
  %6497 = load i8, i8* %6496, align 1, !tbaa !127
  br label %after_bb1570.us

after_bb1570.us:                                  ; preds = %true_bb1568.us, %after_bb1567.us
  %6498 = phi i8 [ %6497, %true_bb1568.us ], [ 0, %after_bb1567.us ]
  br i1 %5464, label %true_bb1571.us, label %after_bb1573.us

true_bb1571.us:                                   ; preds = %after_bb1570.us
  %6499 = sdiv i32 65, %5527
  %6500 = and i32 %6499, %5531
  %6501 = add nsw i32 %6500, %5667
  %6502 = getelementptr inbounds i8, i8* %8, i32 %6501
  %6503 = load i8, i8* %6502, align 1, !tbaa !127
  br label %after_bb1573.us

after_bb1573.us:                                  ; preds = %true_bb1571.us, %after_bb1570.us
  %6504 = phi i8 [ %6503, %true_bb1571.us ], [ 0, %after_bb1570.us ]
  br i1 %5465, label %true_bb1574.us, label %after_bb1576.us

true_bb1574.us:                                   ; preds = %after_bb1573.us
  %6505 = sdiv i32 66, %5527
  %6506 = and i32 %6505, %5531
  %6507 = add nsw i32 %6506, %5667
  %6508 = getelementptr inbounds i8, i8* %8, i32 %6507
  %6509 = load i8, i8* %6508, align 1, !tbaa !127
  br label %after_bb1576.us

after_bb1576.us:                                  ; preds = %true_bb1574.us, %after_bb1573.us
  %6510 = phi i8 [ %6509, %true_bb1574.us ], [ 0, %after_bb1573.us ]
  br i1 %5466, label %true_bb1577.us, label %after_bb1579.us

true_bb1577.us:                                   ; preds = %after_bb1576.us
  %6511 = sdiv i32 67, %5527
  %6512 = and i32 %6511, %5531
  %6513 = add nsw i32 %6512, %5667
  %6514 = getelementptr inbounds i8, i8* %8, i32 %6513
  %6515 = load i8, i8* %6514, align 1, !tbaa !127
  br label %after_bb1579.us

after_bb1579.us:                                  ; preds = %true_bb1577.us, %after_bb1576.us
  %6516 = phi i8 [ %6515, %true_bb1577.us ], [ 0, %after_bb1576.us ]
  br i1 %5467, label %true_bb1580.us, label %after_bb1582.us

true_bb1580.us:                                   ; preds = %after_bb1579.us
  %6517 = sdiv i32 68, %5527
  %6518 = and i32 %6517, %5531
  %6519 = add nsw i32 %6518, %5667
  %6520 = getelementptr inbounds i8, i8* %8, i32 %6519
  %6521 = load i8, i8* %6520, align 1, !tbaa !127
  br label %after_bb1582.us

after_bb1582.us:                                  ; preds = %true_bb1580.us, %after_bb1579.us
  %6522 = phi i8 [ %6521, %true_bb1580.us ], [ 0, %after_bb1579.us ]
  br i1 %5468, label %true_bb1583.us, label %after_bb1585.us

true_bb1583.us:                                   ; preds = %after_bb1582.us
  %6523 = sdiv i32 69, %5527
  %6524 = and i32 %6523, %5531
  %6525 = add nsw i32 %6524, %5667
  %6526 = getelementptr inbounds i8, i8* %8, i32 %6525
  %6527 = load i8, i8* %6526, align 1, !tbaa !127
  br label %after_bb1585.us

after_bb1585.us:                                  ; preds = %true_bb1583.us, %after_bb1582.us
  %6528 = phi i8 [ %6527, %true_bb1583.us ], [ 0, %after_bb1582.us ]
  br i1 %5469, label %true_bb1586.us, label %after_bb1588.us

true_bb1586.us:                                   ; preds = %after_bb1585.us
  %6529 = sdiv i32 70, %5527
  %6530 = and i32 %6529, %5531
  %6531 = add nsw i32 %6530, %5667
  %6532 = getelementptr inbounds i8, i8* %8, i32 %6531
  %6533 = load i8, i8* %6532, align 1, !tbaa !127
  br label %after_bb1588.us

after_bb1588.us:                                  ; preds = %true_bb1586.us, %after_bb1585.us
  %6534 = phi i8 [ %6533, %true_bb1586.us ], [ 0, %after_bb1585.us ]
  br i1 %5470, label %true_bb1589.us, label %after_bb1591.us

true_bb1589.us:                                   ; preds = %after_bb1588.us
  %6535 = sdiv i32 71, %5527
  %6536 = and i32 %6535, %5531
  %6537 = add nsw i32 %6536, %5667
  %6538 = getelementptr inbounds i8, i8* %8, i32 %6537
  %6539 = load i8, i8* %6538, align 1, !tbaa !127
  br label %after_bb1591.us

after_bb1591.us:                                  ; preds = %true_bb1589.us, %after_bb1588.us
  %6540 = phi i8 [ %6539, %true_bb1589.us ], [ 0, %after_bb1588.us ]
  br i1 %5471, label %true_bb1592.us, label %after_bb1594.us

true_bb1592.us:                                   ; preds = %after_bb1591.us
  %6541 = sdiv i32 72, %5527
  %6542 = and i32 %6541, %5531
  %6543 = add nsw i32 %6542, %5667
  %6544 = getelementptr inbounds i8, i8* %8, i32 %6543
  %6545 = load i8, i8* %6544, align 1, !tbaa !127
  br label %after_bb1594.us

after_bb1594.us:                                  ; preds = %true_bb1592.us, %after_bb1591.us
  %6546 = phi i8 [ %6545, %true_bb1592.us ], [ 0, %after_bb1591.us ]
  br i1 %5472, label %true_bb1595.us, label %after_bb1597.us

true_bb1595.us:                                   ; preds = %after_bb1594.us
  %6547 = sdiv i32 73, %5527
  %6548 = and i32 %6547, %5531
  %6549 = add nsw i32 %6548, %5667
  %6550 = getelementptr inbounds i8, i8* %8, i32 %6549
  %6551 = load i8, i8* %6550, align 1, !tbaa !127
  br label %after_bb1597.us

after_bb1597.us:                                  ; preds = %true_bb1595.us, %after_bb1594.us
  %6552 = phi i8 [ %6551, %true_bb1595.us ], [ 0, %after_bb1594.us ]
  br i1 %5473, label %true_bb1598.us, label %after_bb1600.us

true_bb1598.us:                                   ; preds = %after_bb1597.us
  %6553 = sdiv i32 74, %5527
  %6554 = and i32 %6553, %5531
  %6555 = add nsw i32 %6554, %5667
  %6556 = getelementptr inbounds i8, i8* %8, i32 %6555
  %6557 = load i8, i8* %6556, align 1, !tbaa !127
  br label %after_bb1600.us

after_bb1600.us:                                  ; preds = %true_bb1598.us, %after_bb1597.us
  %6558 = phi i8 [ %6557, %true_bb1598.us ], [ 0, %after_bb1597.us ]
  br i1 %5474, label %true_bb1601.us, label %after_bb1603.us

true_bb1601.us:                                   ; preds = %after_bb1600.us
  %6559 = sdiv i32 75, %5527
  %6560 = and i32 %6559, %5531
  %6561 = add nsw i32 %6560, %5667
  %6562 = getelementptr inbounds i8, i8* %8, i32 %6561
  %6563 = load i8, i8* %6562, align 1, !tbaa !127
  br label %after_bb1603.us

after_bb1603.us:                                  ; preds = %true_bb1601.us, %after_bb1600.us
  %6564 = phi i8 [ %6563, %true_bb1601.us ], [ 0, %after_bb1600.us ]
  br i1 %5475, label %true_bb1604.us, label %after_bb1606.us

true_bb1604.us:                                   ; preds = %after_bb1603.us
  %6565 = sdiv i32 76, %5527
  %6566 = and i32 %6565, %5531
  %6567 = add nsw i32 %6566, %5667
  %6568 = getelementptr inbounds i8, i8* %8, i32 %6567
  %6569 = load i8, i8* %6568, align 1, !tbaa !127
  br label %after_bb1606.us

after_bb1606.us:                                  ; preds = %true_bb1604.us, %after_bb1603.us
  %6570 = phi i8 [ %6569, %true_bb1604.us ], [ 0, %after_bb1603.us ]
  br i1 %5476, label %true_bb1607.us, label %after_bb1609.us

true_bb1607.us:                                   ; preds = %after_bb1606.us
  %6571 = sdiv i32 77, %5527
  %6572 = and i32 %6571, %5531
  %6573 = add nsw i32 %6572, %5667
  %6574 = getelementptr inbounds i8, i8* %8, i32 %6573
  %6575 = load i8, i8* %6574, align 1, !tbaa !127
  br label %after_bb1609.us

after_bb1609.us:                                  ; preds = %true_bb1607.us, %after_bb1606.us
  %6576 = phi i8 [ %6575, %true_bb1607.us ], [ 0, %after_bb1606.us ]
  br i1 %5477, label %true_bb1610.us, label %after_bb1612.us

true_bb1610.us:                                   ; preds = %after_bb1609.us
  %6577 = sdiv i32 78, %5527
  %6578 = and i32 %6577, %5531
  %6579 = add nsw i32 %6578, %5667
  %6580 = getelementptr inbounds i8, i8* %8, i32 %6579
  %6581 = load i8, i8* %6580, align 1, !tbaa !127
  br label %after_bb1612.us

after_bb1612.us:                                  ; preds = %true_bb1610.us, %after_bb1609.us
  %6582 = phi i8 [ %6581, %true_bb1610.us ], [ 0, %after_bb1609.us ]
  br i1 %5478, label %true_bb1613.us, label %after_bb1615.us

true_bb1613.us:                                   ; preds = %after_bb1612.us
  %6583 = sdiv i32 79, %5527
  %6584 = and i32 %6583, %5531
  %6585 = add nsw i32 %6584, %5667
  %6586 = getelementptr inbounds i8, i8* %8, i32 %6585
  %6587 = load i8, i8* %6586, align 1, !tbaa !127
  br label %after_bb1615.us

after_bb1615.us:                                  ; preds = %true_bb1613.us, %after_bb1612.us
  %6588 = phi i8 [ %6587, %true_bb1613.us ], [ 0, %after_bb1612.us ]
  br i1 %5479, label %true_bb1616.us, label %after_bb1618.us

true_bb1616.us:                                   ; preds = %after_bb1615.us
  %6589 = sdiv i32 80, %5527
  %6590 = and i32 %6589, %5531
  %6591 = add nsw i32 %6590, %5667
  %6592 = getelementptr inbounds i8, i8* %8, i32 %6591
  %6593 = load i8, i8* %6592, align 1, !tbaa !127
  br label %after_bb1618.us

after_bb1618.us:                                  ; preds = %true_bb1616.us, %after_bb1615.us
  %6594 = phi i8 [ %6593, %true_bb1616.us ], [ 0, %after_bb1615.us ]
  br i1 %5480, label %true_bb1619.us, label %after_bb1621.us

true_bb1619.us:                                   ; preds = %after_bb1618.us
  %6595 = sdiv i32 81, %5527
  %6596 = and i32 %6595, %5531
  %6597 = add nsw i32 %6596, %5667
  %6598 = getelementptr inbounds i8, i8* %8, i32 %6597
  %6599 = load i8, i8* %6598, align 1, !tbaa !127
  br label %after_bb1621.us

after_bb1621.us:                                  ; preds = %true_bb1619.us, %after_bb1618.us
  %6600 = phi i8 [ %6599, %true_bb1619.us ], [ 0, %after_bb1618.us ]
  br i1 %5481, label %true_bb1622.us, label %after_bb1624.us

true_bb1622.us:                                   ; preds = %after_bb1621.us
  %6601 = sdiv i32 82, %5527
  %6602 = and i32 %6601, %5531
  %6603 = add nsw i32 %6602, %5667
  %6604 = getelementptr inbounds i8, i8* %8, i32 %6603
  %6605 = load i8, i8* %6604, align 1, !tbaa !127
  br label %after_bb1624.us

after_bb1624.us:                                  ; preds = %true_bb1622.us, %after_bb1621.us
  %6606 = phi i8 [ %6605, %true_bb1622.us ], [ 0, %after_bb1621.us ]
  br i1 %5482, label %true_bb1625.us, label %after_bb1627.us

true_bb1625.us:                                   ; preds = %after_bb1624.us
  %6607 = sdiv i32 83, %5527
  %6608 = and i32 %6607, %5531
  %6609 = add nsw i32 %6608, %5667
  %6610 = getelementptr inbounds i8, i8* %8, i32 %6609
  %6611 = load i8, i8* %6610, align 1, !tbaa !127
  br label %after_bb1627.us

after_bb1627.us:                                  ; preds = %true_bb1625.us, %after_bb1624.us
  %6612 = phi i8 [ %6611, %true_bb1625.us ], [ 0, %after_bb1624.us ]
  br i1 %5483, label %true_bb1628.us, label %after_bb1630.us

true_bb1628.us:                                   ; preds = %after_bb1627.us
  %6613 = sdiv i32 84, %5527
  %6614 = and i32 %6613, %5531
  %6615 = add nsw i32 %6614, %5667
  %6616 = getelementptr inbounds i8, i8* %8, i32 %6615
  %6617 = load i8, i8* %6616, align 1, !tbaa !127
  br label %after_bb1630.us

after_bb1630.us:                                  ; preds = %true_bb1628.us, %after_bb1627.us
  %6618 = phi i8 [ %6617, %true_bb1628.us ], [ 0, %after_bb1627.us ]
  br i1 %5484, label %true_bb1631.us, label %after_bb1633.us

true_bb1631.us:                                   ; preds = %after_bb1630.us
  %6619 = sdiv i32 85, %5527
  %6620 = and i32 %6619, %5531
  %6621 = add nsw i32 %6620, %5667
  %6622 = getelementptr inbounds i8, i8* %8, i32 %6621
  %6623 = load i8, i8* %6622, align 1, !tbaa !127
  br label %after_bb1633.us

after_bb1633.us:                                  ; preds = %true_bb1631.us, %after_bb1630.us
  %6624 = phi i8 [ %6623, %true_bb1631.us ], [ 0, %after_bb1630.us ]
  br i1 %5485, label %true_bb1634.us, label %after_bb1636.us

true_bb1634.us:                                   ; preds = %after_bb1633.us
  %6625 = sdiv i32 86, %5527
  %6626 = and i32 %6625, %5531
  %6627 = add nsw i32 %6626, %5667
  %6628 = getelementptr inbounds i8, i8* %8, i32 %6627
  %6629 = load i8, i8* %6628, align 1, !tbaa !127
  br label %after_bb1636.us

after_bb1636.us:                                  ; preds = %true_bb1634.us, %after_bb1633.us
  %6630 = phi i8 [ %6629, %true_bb1634.us ], [ 0, %after_bb1633.us ]
  br i1 %5486, label %true_bb1637.us, label %after_bb1639.us

true_bb1637.us:                                   ; preds = %after_bb1636.us
  %6631 = sdiv i32 87, %5527
  %6632 = and i32 %6631, %5531
  %6633 = add nsw i32 %6632, %5667
  %6634 = getelementptr inbounds i8, i8* %8, i32 %6633
  %6635 = load i8, i8* %6634, align 1, !tbaa !127
  br label %after_bb1639.us

after_bb1639.us:                                  ; preds = %true_bb1637.us, %after_bb1636.us
  %6636 = phi i8 [ %6635, %true_bb1637.us ], [ 0, %after_bb1636.us ]
  br i1 %5487, label %true_bb1640.us, label %after_bb1642.us

true_bb1640.us:                                   ; preds = %after_bb1639.us
  %6637 = sdiv i32 88, %5527
  %6638 = and i32 %6637, %5531
  %6639 = add nsw i32 %6638, %5667
  %6640 = getelementptr inbounds i8, i8* %8, i32 %6639
  %6641 = load i8, i8* %6640, align 1, !tbaa !127
  br label %after_bb1642.us

after_bb1642.us:                                  ; preds = %true_bb1640.us, %after_bb1639.us
  %6642 = phi i8 [ %6641, %true_bb1640.us ], [ 0, %after_bb1639.us ]
  br i1 %5488, label %true_bb1643.us, label %after_bb1645.us

true_bb1643.us:                                   ; preds = %after_bb1642.us
  %6643 = sdiv i32 89, %5527
  %6644 = and i32 %6643, %5531
  %6645 = add nsw i32 %6644, %5667
  %6646 = getelementptr inbounds i8, i8* %8, i32 %6645
  %6647 = load i8, i8* %6646, align 1, !tbaa !127
  br label %after_bb1645.us

after_bb1645.us:                                  ; preds = %true_bb1643.us, %after_bb1642.us
  %6648 = phi i8 [ %6647, %true_bb1643.us ], [ 0, %after_bb1642.us ]
  br i1 %5489, label %true_bb1646.us, label %after_bb1648.us

true_bb1646.us:                                   ; preds = %after_bb1645.us
  %6649 = sdiv i32 90, %5527
  %6650 = and i32 %6649, %5531
  %6651 = add nsw i32 %6650, %5667
  %6652 = getelementptr inbounds i8, i8* %8, i32 %6651
  %6653 = load i8, i8* %6652, align 1, !tbaa !127
  br label %after_bb1648.us

after_bb1648.us:                                  ; preds = %true_bb1646.us, %after_bb1645.us
  %6654 = phi i8 [ %6653, %true_bb1646.us ], [ 0, %after_bb1645.us ]
  br i1 %5490, label %true_bb1649.us, label %after_bb1651.us

true_bb1649.us:                                   ; preds = %after_bb1648.us
  %6655 = sdiv i32 91, %5527
  %6656 = and i32 %6655, %5531
  %6657 = add nsw i32 %6656, %5667
  %6658 = getelementptr inbounds i8, i8* %8, i32 %6657
  %6659 = load i8, i8* %6658, align 1, !tbaa !127
  br label %after_bb1651.us

after_bb1651.us:                                  ; preds = %true_bb1649.us, %after_bb1648.us
  %6660 = phi i8 [ %6659, %true_bb1649.us ], [ 0, %after_bb1648.us ]
  br i1 %5491, label %true_bb1652.us, label %after_bb1654.us

true_bb1652.us:                                   ; preds = %after_bb1651.us
  %6661 = sdiv i32 92, %5527
  %6662 = and i32 %6661, %5531
  %6663 = add nsw i32 %6662, %5667
  %6664 = getelementptr inbounds i8, i8* %8, i32 %6663
  %6665 = load i8, i8* %6664, align 1, !tbaa !127
  br label %after_bb1654.us

after_bb1654.us:                                  ; preds = %true_bb1652.us, %after_bb1651.us
  %6666 = phi i8 [ %6665, %true_bb1652.us ], [ 0, %after_bb1651.us ]
  br i1 %5492, label %true_bb1655.us, label %after_bb1657.us

true_bb1655.us:                                   ; preds = %after_bb1654.us
  %6667 = sdiv i32 93, %5527
  %6668 = and i32 %6667, %5531
  %6669 = add nsw i32 %6668, %5667
  %6670 = getelementptr inbounds i8, i8* %8, i32 %6669
  %6671 = load i8, i8* %6670, align 1, !tbaa !127
  br label %after_bb1657.us

after_bb1657.us:                                  ; preds = %true_bb1655.us, %after_bb1654.us
  %6672 = phi i8 [ %6671, %true_bb1655.us ], [ 0, %after_bb1654.us ]
  br i1 %5493, label %true_bb1658.us, label %after_bb1660.us

true_bb1658.us:                                   ; preds = %after_bb1657.us
  %6673 = sdiv i32 94, %5527
  %6674 = and i32 %6673, %5531
  %6675 = add nsw i32 %6674, %5667
  %6676 = getelementptr inbounds i8, i8* %8, i32 %6675
  %6677 = load i8, i8* %6676, align 1, !tbaa !127
  br label %after_bb1660.us

after_bb1660.us:                                  ; preds = %true_bb1658.us, %after_bb1657.us
  %6678 = phi i8 [ %6677, %true_bb1658.us ], [ 0, %after_bb1657.us ]
  br i1 %5494, label %true_bb1661.us, label %after_bb1663.us

true_bb1661.us:                                   ; preds = %after_bb1660.us
  %6679 = sdiv i32 95, %5527
  %6680 = and i32 %6679, %5531
  %6681 = add nsw i32 %6680, %5667
  %6682 = getelementptr inbounds i8, i8* %8, i32 %6681
  %6683 = load i8, i8* %6682, align 1, !tbaa !127
  br label %after_bb1663.us

after_bb1663.us:                                  ; preds = %true_bb1661.us, %after_bb1660.us
  %6684 = phi i8 [ %6683, %true_bb1661.us ], [ 0, %after_bb1660.us ]
  br i1 %5495, label %true_bb1664.us, label %after_bb1666.us

true_bb1664.us:                                   ; preds = %after_bb1663.us
  %6685 = sdiv i32 96, %5527
  %6686 = and i32 %6685, %5531
  %6687 = add nsw i32 %6686, %5667
  %6688 = getelementptr inbounds i8, i8* %8, i32 %6687
  %6689 = load i8, i8* %6688, align 1, !tbaa !127
  br label %after_bb1666.us

after_bb1666.us:                                  ; preds = %true_bb1664.us, %after_bb1663.us
  %6690 = phi i8 [ %6689, %true_bb1664.us ], [ 0, %after_bb1663.us ]
  br i1 %5496, label %true_bb1667.us, label %after_bb1669.us

true_bb1667.us:                                   ; preds = %after_bb1666.us
  %6691 = sdiv i32 97, %5527
  %6692 = and i32 %6691, %5531
  %6693 = add nsw i32 %6692, %5667
  %6694 = getelementptr inbounds i8, i8* %8, i32 %6693
  %6695 = load i8, i8* %6694, align 1, !tbaa !127
  br label %after_bb1669.us

after_bb1669.us:                                  ; preds = %true_bb1667.us, %after_bb1666.us
  %6696 = phi i8 [ %6695, %true_bb1667.us ], [ 0, %after_bb1666.us ]
  br i1 %5497, label %true_bb1670.us, label %after_bb1672.us

true_bb1670.us:                                   ; preds = %after_bb1669.us
  %6697 = sdiv i32 98, %5527
  %6698 = and i32 %6697, %5531
  %6699 = add nsw i32 %6698, %5667
  %6700 = getelementptr inbounds i8, i8* %8, i32 %6699
  %6701 = load i8, i8* %6700, align 1, !tbaa !127
  br label %after_bb1672.us

after_bb1672.us:                                  ; preds = %true_bb1670.us, %after_bb1669.us
  %6702 = phi i8 [ %6701, %true_bb1670.us ], [ 0, %after_bb1669.us ]
  br i1 %5498, label %true_bb1673.us, label %after_bb1675.us

true_bb1673.us:                                   ; preds = %after_bb1672.us
  %6703 = sdiv i32 99, %5527
  %6704 = and i32 %6703, %5531
  %6705 = add nsw i32 %6704, %5667
  %6706 = getelementptr inbounds i8, i8* %8, i32 %6705
  %6707 = load i8, i8* %6706, align 1, !tbaa !127
  br label %after_bb1675.us

after_bb1675.us:                                  ; preds = %true_bb1673.us, %after_bb1672.us
  %6708 = phi i8 [ %6707, %true_bb1673.us ], [ 0, %after_bb1672.us ]
  br i1 %5499, label %true_bb1676.us, label %after_bb1678.us

true_bb1676.us:                                   ; preds = %after_bb1675.us
  %6709 = sdiv i32 100, %5527
  %6710 = and i32 %6709, %5531
  %6711 = add nsw i32 %6710, %5667
  %6712 = getelementptr inbounds i8, i8* %8, i32 %6711
  %6713 = load i8, i8* %6712, align 1, !tbaa !127
  br label %after_bb1678.us

after_bb1678.us:                                  ; preds = %true_bb1676.us, %after_bb1675.us
  %6714 = phi i8 [ %6713, %true_bb1676.us ], [ 0, %after_bb1675.us ]
  br i1 %5500, label %true_bb1679.us, label %after_bb1681.us

true_bb1679.us:                                   ; preds = %after_bb1678.us
  %6715 = sdiv i32 101, %5527
  %6716 = and i32 %6715, %5531
  %6717 = add nsw i32 %6716, %5667
  %6718 = getelementptr inbounds i8, i8* %8, i32 %6717
  %6719 = load i8, i8* %6718, align 1, !tbaa !127
  br label %after_bb1681.us

after_bb1681.us:                                  ; preds = %true_bb1679.us, %after_bb1678.us
  %6720 = phi i8 [ %6719, %true_bb1679.us ], [ 0, %after_bb1678.us ]
  br i1 %5501, label %true_bb1682.us, label %after_bb1684.us

true_bb1682.us:                                   ; preds = %after_bb1681.us
  %6721 = sdiv i32 102, %5527
  %6722 = and i32 %6721, %5531
  %6723 = add nsw i32 %6722, %5667
  %6724 = getelementptr inbounds i8, i8* %8, i32 %6723
  %6725 = load i8, i8* %6724, align 1, !tbaa !127
  br label %after_bb1684.us

after_bb1684.us:                                  ; preds = %true_bb1682.us, %after_bb1681.us
  %6726 = phi i8 [ %6725, %true_bb1682.us ], [ 0, %after_bb1681.us ]
  br i1 %5502, label %true_bb1685.us, label %after_bb1687.us

true_bb1685.us:                                   ; preds = %after_bb1684.us
  %6727 = sdiv i32 103, %5527
  %6728 = and i32 %6727, %5531
  %6729 = add nsw i32 %6728, %5667
  %6730 = getelementptr inbounds i8, i8* %8, i32 %6729
  %6731 = load i8, i8* %6730, align 1, !tbaa !127
  br label %after_bb1687.us

after_bb1687.us:                                  ; preds = %true_bb1685.us, %after_bb1684.us
  %6732 = phi i8 [ %6731, %true_bb1685.us ], [ 0, %after_bb1684.us ]
  br i1 %5503, label %true_bb1688.us, label %after_bb1690.us

true_bb1688.us:                                   ; preds = %after_bb1687.us
  %6733 = sdiv i32 104, %5527
  %6734 = and i32 %6733, %5531
  %6735 = add nsw i32 %6734, %5667
  %6736 = getelementptr inbounds i8, i8* %8, i32 %6735
  %6737 = load i8, i8* %6736, align 1, !tbaa !127
  br label %after_bb1690.us

after_bb1690.us:                                  ; preds = %true_bb1688.us, %after_bb1687.us
  %6738 = phi i8 [ %6737, %true_bb1688.us ], [ 0, %after_bb1687.us ]
  br i1 %5504, label %true_bb1691.us, label %after_bb1693.us

true_bb1691.us:                                   ; preds = %after_bb1690.us
  %6739 = sdiv i32 105, %5527
  %6740 = and i32 %6739, %5531
  %6741 = add nsw i32 %6740, %5667
  %6742 = getelementptr inbounds i8, i8* %8, i32 %6741
  %6743 = load i8, i8* %6742, align 1, !tbaa !127
  br label %after_bb1693.us

after_bb1693.us:                                  ; preds = %true_bb1691.us, %after_bb1690.us
  %6744 = phi i8 [ %6743, %true_bb1691.us ], [ 0, %after_bb1690.us ]
  br i1 %5505, label %true_bb1694.us, label %after_bb1696.us

true_bb1694.us:                                   ; preds = %after_bb1693.us
  %6745 = sdiv i32 106, %5527
  %6746 = and i32 %6745, %5531
  %6747 = add nsw i32 %6746, %5667
  %6748 = getelementptr inbounds i8, i8* %8, i32 %6747
  %6749 = load i8, i8* %6748, align 1, !tbaa !127
  br label %after_bb1696.us

after_bb1696.us:                                  ; preds = %true_bb1694.us, %after_bb1693.us
  %6750 = phi i8 [ %6749, %true_bb1694.us ], [ 0, %after_bb1693.us ]
  br i1 %5506, label %true_bb1697.us, label %after_bb1699.us

true_bb1697.us:                                   ; preds = %after_bb1696.us
  %6751 = sdiv i32 107, %5527
  %6752 = and i32 %6751, %5531
  %6753 = add nsw i32 %6752, %5667
  %6754 = getelementptr inbounds i8, i8* %8, i32 %6753
  %6755 = load i8, i8* %6754, align 1, !tbaa !127
  br label %after_bb1699.us

after_bb1699.us:                                  ; preds = %true_bb1697.us, %after_bb1696.us
  %6756 = phi i8 [ %6755, %true_bb1697.us ], [ 0, %after_bb1696.us ]
  br i1 %5507, label %true_bb1700.us, label %after_bb1702.us

true_bb1700.us:                                   ; preds = %after_bb1699.us
  %6757 = sdiv i32 108, %5527
  %6758 = and i32 %6757, %5531
  %6759 = add nsw i32 %6758, %5667
  %6760 = getelementptr inbounds i8, i8* %8, i32 %6759
  %6761 = load i8, i8* %6760, align 1, !tbaa !127
  br label %after_bb1702.us

after_bb1702.us:                                  ; preds = %true_bb1700.us, %after_bb1699.us
  %6762 = phi i8 [ %6761, %true_bb1700.us ], [ 0, %after_bb1699.us ]
  br i1 %5508, label %true_bb1703.us, label %after_bb1705.us

true_bb1703.us:                                   ; preds = %after_bb1702.us
  %6763 = sdiv i32 109, %5527
  %6764 = and i32 %6763, %5531
  %6765 = add nsw i32 %6764, %5667
  %6766 = getelementptr inbounds i8, i8* %8, i32 %6765
  %6767 = load i8, i8* %6766, align 1, !tbaa !127
  br label %after_bb1705.us

after_bb1705.us:                                  ; preds = %true_bb1703.us, %after_bb1702.us
  %6768 = phi i8 [ %6767, %true_bb1703.us ], [ 0, %after_bb1702.us ]
  br i1 %5509, label %true_bb1706.us, label %after_bb1708.us

true_bb1706.us:                                   ; preds = %after_bb1705.us
  %6769 = sdiv i32 110, %5527
  %6770 = and i32 %6769, %5531
  %6771 = add nsw i32 %6770, %5667
  %6772 = getelementptr inbounds i8, i8* %8, i32 %6771
  %6773 = load i8, i8* %6772, align 1, !tbaa !127
  br label %after_bb1708.us

after_bb1708.us:                                  ; preds = %true_bb1706.us, %after_bb1705.us
  %6774 = phi i8 [ %6773, %true_bb1706.us ], [ 0, %after_bb1705.us ]
  br i1 %5510, label %true_bb1709.us, label %after_bb1711.us

true_bb1709.us:                                   ; preds = %after_bb1708.us
  %6775 = sdiv i32 111, %5527
  %6776 = and i32 %6775, %5531
  %6777 = add nsw i32 %6776, %5667
  %6778 = getelementptr inbounds i8, i8* %8, i32 %6777
  %6779 = load i8, i8* %6778, align 1, !tbaa !127
  br label %after_bb1711.us

after_bb1711.us:                                  ; preds = %true_bb1709.us, %after_bb1708.us
  %6780 = phi i8 [ %6779, %true_bb1709.us ], [ 0, %after_bb1708.us ]
  br i1 %5511, label %true_bb1712.us, label %after_bb1714.us

true_bb1712.us:                                   ; preds = %after_bb1711.us
  %6781 = sdiv i32 112, %5527
  %6782 = and i32 %6781, %5531
  %6783 = add nsw i32 %6782, %5667
  %6784 = getelementptr inbounds i8, i8* %8, i32 %6783
  %6785 = load i8, i8* %6784, align 1, !tbaa !127
  br label %after_bb1714.us

after_bb1714.us:                                  ; preds = %true_bb1712.us, %after_bb1711.us
  %6786 = phi i8 [ %6785, %true_bb1712.us ], [ 0, %after_bb1711.us ]
  br i1 %5512, label %true_bb1715.us, label %after_bb1717.us

true_bb1715.us:                                   ; preds = %after_bb1714.us
  %6787 = sdiv i32 113, %5527
  %6788 = and i32 %6787, %5531
  %6789 = add nsw i32 %6788, %5667
  %6790 = getelementptr inbounds i8, i8* %8, i32 %6789
  %6791 = load i8, i8* %6790, align 1, !tbaa !127
  br label %after_bb1717.us

after_bb1717.us:                                  ; preds = %true_bb1715.us, %after_bb1714.us
  %6792 = phi i8 [ %6791, %true_bb1715.us ], [ 0, %after_bb1714.us ]
  br i1 %5513, label %true_bb1718.us, label %after_bb1720.us

true_bb1718.us:                                   ; preds = %after_bb1717.us
  %6793 = sdiv i32 114, %5527
  %6794 = and i32 %6793, %5531
  %6795 = add nsw i32 %6794, %5667
  %6796 = getelementptr inbounds i8, i8* %8, i32 %6795
  %6797 = load i8, i8* %6796, align 1, !tbaa !127
  br label %after_bb1720.us

after_bb1720.us:                                  ; preds = %true_bb1718.us, %after_bb1717.us
  %6798 = phi i8 [ %6797, %true_bb1718.us ], [ 0, %after_bb1717.us ]
  br i1 %5514, label %true_bb1721.us, label %after_bb1723.us

true_bb1721.us:                                   ; preds = %after_bb1720.us
  %6799 = sdiv i32 115, %5527
  %6800 = and i32 %6799, %5531
  %6801 = add nsw i32 %6800, %5667
  %6802 = getelementptr inbounds i8, i8* %8, i32 %6801
  %6803 = load i8, i8* %6802, align 1, !tbaa !127
  br label %after_bb1723.us

after_bb1723.us:                                  ; preds = %true_bb1721.us, %after_bb1720.us
  %6804 = phi i8 [ %6803, %true_bb1721.us ], [ 0, %after_bb1720.us ]
  br i1 %5515, label %true_bb1724.us, label %after_bb1726.us

true_bb1724.us:                                   ; preds = %after_bb1723.us
  %6805 = sdiv i32 116, %5527
  %6806 = and i32 %6805, %5531
  %6807 = add nsw i32 %6806, %5667
  %6808 = getelementptr inbounds i8, i8* %8, i32 %6807
  %6809 = load i8, i8* %6808, align 1, !tbaa !127
  br label %after_bb1726.us

after_bb1726.us:                                  ; preds = %true_bb1724.us, %after_bb1723.us
  %6810 = phi i8 [ %6809, %true_bb1724.us ], [ 0, %after_bb1723.us ]
  br i1 %5516, label %true_bb1727.us, label %after_bb1729.us

true_bb1727.us:                                   ; preds = %after_bb1726.us
  %6811 = sdiv i32 117, %5527
  %6812 = and i32 %6811, %5531
  %6813 = add nsw i32 %6812, %5667
  %6814 = getelementptr inbounds i8, i8* %8, i32 %6813
  %6815 = load i8, i8* %6814, align 1, !tbaa !127
  br label %after_bb1729.us

after_bb1729.us:                                  ; preds = %true_bb1727.us, %after_bb1726.us
  %6816 = phi i8 [ %6815, %true_bb1727.us ], [ 0, %after_bb1726.us ]
  br i1 %5517, label %true_bb1730.us, label %after_bb1732.us

true_bb1730.us:                                   ; preds = %after_bb1729.us
  %6817 = sdiv i32 118, %5527
  %6818 = and i32 %6817, %5531
  %6819 = add nsw i32 %6818, %5667
  %6820 = getelementptr inbounds i8, i8* %8, i32 %6819
  %6821 = load i8, i8* %6820, align 1, !tbaa !127
  br label %after_bb1732.us

after_bb1732.us:                                  ; preds = %true_bb1730.us, %after_bb1729.us
  %6822 = phi i8 [ %6821, %true_bb1730.us ], [ 0, %after_bb1729.us ]
  br i1 %5518, label %true_bb1733.us, label %after_bb1735.us

true_bb1733.us:                                   ; preds = %after_bb1732.us
  %6823 = sdiv i32 119, %5527
  %6824 = and i32 %6823, %5531
  %6825 = add nsw i32 %6824, %5667
  %6826 = getelementptr inbounds i8, i8* %8, i32 %6825
  %6827 = load i8, i8* %6826, align 1, !tbaa !127
  br label %after_bb1735.us

after_bb1735.us:                                  ; preds = %true_bb1733.us, %after_bb1732.us
  %6828 = phi i8 [ %6827, %true_bb1733.us ], [ 0, %after_bb1732.us ]
  br i1 %5519, label %true_bb1736.us, label %after_bb1738.us

true_bb1736.us:                                   ; preds = %after_bb1735.us
  %6829 = sdiv i32 120, %5527
  %6830 = and i32 %6829, %5531
  %6831 = add nsw i32 %6830, %5667
  %6832 = getelementptr inbounds i8, i8* %8, i32 %6831
  %6833 = load i8, i8* %6832, align 1, !tbaa !127
  br label %after_bb1738.us

after_bb1738.us:                                  ; preds = %true_bb1736.us, %after_bb1735.us
  %6834 = phi i8 [ %6833, %true_bb1736.us ], [ 0, %after_bb1735.us ]
  br i1 %5520, label %true_bb1739.us, label %after_bb1741.us

true_bb1739.us:                                   ; preds = %after_bb1738.us
  %6835 = sdiv i32 121, %5527
  %6836 = and i32 %6835, %5531
  %6837 = add nsw i32 %6836, %5667
  %6838 = getelementptr inbounds i8, i8* %8, i32 %6837
  %6839 = load i8, i8* %6838, align 1, !tbaa !127
  br label %after_bb1741.us

after_bb1741.us:                                  ; preds = %true_bb1739.us, %after_bb1738.us
  %6840 = phi i8 [ %6839, %true_bb1739.us ], [ 0, %after_bb1738.us ]
  br i1 %5521, label %true_bb1742.us, label %after_bb1744.us

true_bb1742.us:                                   ; preds = %after_bb1741.us
  %6841 = sdiv i32 122, %5527
  %6842 = and i32 %6841, %5531
  %6843 = add nsw i32 %6842, %5667
  %6844 = getelementptr inbounds i8, i8* %8, i32 %6843
  %6845 = load i8, i8* %6844, align 1, !tbaa !127
  br label %after_bb1744.us

after_bb1744.us:                                  ; preds = %true_bb1742.us, %after_bb1741.us
  %6846 = phi i8 [ %6845, %true_bb1742.us ], [ 0, %after_bb1741.us ]
  br i1 %5522, label %true_bb1745.us, label %after_bb1747.us

true_bb1745.us:                                   ; preds = %after_bb1744.us
  %6847 = sdiv i32 123, %5527
  %6848 = and i32 %6847, %5531
  %6849 = add nsw i32 %6848, %5667
  %6850 = getelementptr inbounds i8, i8* %8, i32 %6849
  %6851 = load i8, i8* %6850, align 1, !tbaa !127
  br label %after_bb1747.us

after_bb1747.us:                                  ; preds = %true_bb1745.us, %after_bb1744.us
  %6852 = phi i8 [ %6851, %true_bb1745.us ], [ 0, %after_bb1744.us ]
  br i1 %5523, label %true_bb1748.us, label %after_bb1750.us

true_bb1748.us:                                   ; preds = %after_bb1747.us
  %6853 = sdiv i32 124, %5527
  %6854 = and i32 %6853, %5531
  %6855 = add nsw i32 %6854, %5667
  %6856 = getelementptr inbounds i8, i8* %8, i32 %6855
  %6857 = load i8, i8* %6856, align 1, !tbaa !127
  br label %after_bb1750.us

after_bb1750.us:                                  ; preds = %true_bb1748.us, %after_bb1747.us
  %6858 = phi i8 [ %6857, %true_bb1748.us ], [ 0, %after_bb1747.us ]
  br i1 %5524, label %true_bb1751.us, label %after_bb1753.us

true_bb1751.us:                                   ; preds = %after_bb1750.us
  %6859 = sdiv i32 125, %5527
  %6860 = and i32 %6859, %5531
  %6861 = add nsw i32 %6860, %5667
  %6862 = getelementptr inbounds i8, i8* %8, i32 %6861
  %6863 = load i8, i8* %6862, align 1, !tbaa !127
  br label %after_bb1753.us

after_bb1753.us:                                  ; preds = %true_bb1751.us, %after_bb1750.us
  %6864 = phi i8 [ %6863, %true_bb1751.us ], [ 0, %after_bb1750.us ]
  br i1 %5525, label %true_bb1754.us, label %after_bb1759.us

true_bb1754.us:                                   ; preds = %after_bb1753.us
  %6865 = sdiv i32 126, %5527
  %6866 = and i32 %6865, %5531
  %6867 = add nsw i32 %6866, %5667
  %6868 = getelementptr inbounds i8, i8* %8, i32 %6867
  %6869 = load i8, i8* %6868, align 1, !tbaa !127
  br label %after_bb1759.us

after_bb1759.us:                                  ; preds = %true_bb1754.us, %after_bb1753.us
  %6870 = phi i8 [ %6869, %true_bb1754.us ], [ 0, %after_bb1753.us ]
  %6871 = insertelement <128 x i8> %6046, i8 %6120, i32 1
  %6872 = insertelement <128 x i8> %6871, i8 %6126, i32 2
  %6873 = insertelement <128 x i8> %6872, i8 %6132, i32 3
  %6874 = insertelement <128 x i8> %6873, i8 %6138, i32 4
  %6875 = insertelement <128 x i8> %6874, i8 %6144, i32 5
  %6876 = insertelement <128 x i8> %6875, i8 %6150, i32 6
  %6877 = insertelement <128 x i8> %6876, i8 %6156, i32 7
  %6878 = insertelement <128 x i8> %6877, i8 %6162, i32 8
  %6879 = insertelement <128 x i8> %6878, i8 %6168, i32 9
  %6880 = insertelement <128 x i8> %6879, i8 %6174, i32 10
  %6881 = insertelement <128 x i8> %6880, i8 %6180, i32 11
  %6882 = insertelement <128 x i8> %6881, i8 %6186, i32 12
  %6883 = insertelement <128 x i8> %6882, i8 %6192, i32 13
  %6884 = insertelement <128 x i8> %6883, i8 %6198, i32 14
  %6885 = insertelement <128 x i8> %6884, i8 %6204, i32 15
  %6886 = insertelement <128 x i8> %6885, i8 %6210, i32 16
  %6887 = insertelement <128 x i8> %6886, i8 %6216, i32 17
  %6888 = insertelement <128 x i8> %6887, i8 %6222, i32 18
  %6889 = insertelement <128 x i8> %6888, i8 %6228, i32 19
  %6890 = insertelement <128 x i8> %6889, i8 %6234, i32 20
  %6891 = insertelement <128 x i8> %6890, i8 %6240, i32 21
  %6892 = insertelement <128 x i8> %6891, i8 %6246, i32 22
  %6893 = insertelement <128 x i8> %6892, i8 %6252, i32 23
  %6894 = insertelement <128 x i8> %6893, i8 %6258, i32 24
  %6895 = insertelement <128 x i8> %6894, i8 %6264, i32 25
  %6896 = insertelement <128 x i8> %6895, i8 %6270, i32 26
  %6897 = insertelement <128 x i8> %6896, i8 %6276, i32 27
  %6898 = insertelement <128 x i8> %6897, i8 %6282, i32 28
  %6899 = insertelement <128 x i8> %6898, i8 %6288, i32 29
  %6900 = insertelement <128 x i8> %6899, i8 %6294, i32 30
  %6901 = insertelement <128 x i8> %6900, i8 %6300, i32 31
  %6902 = insertelement <128 x i8> %6901, i8 %6306, i32 32
  %6903 = insertelement <128 x i8> %6902, i8 %6312, i32 33
  %6904 = insertelement <128 x i8> %6903, i8 %6318, i32 34
  %6905 = insertelement <128 x i8> %6904, i8 %6324, i32 35
  %6906 = insertelement <128 x i8> %6905, i8 %6330, i32 36
  %6907 = insertelement <128 x i8> %6906, i8 %6336, i32 37
  %6908 = insertelement <128 x i8> %6907, i8 %6342, i32 38
  %6909 = insertelement <128 x i8> %6908, i8 %6348, i32 39
  %6910 = insertelement <128 x i8> %6909, i8 %6354, i32 40
  %6911 = insertelement <128 x i8> %6910, i8 %6360, i32 41
  %6912 = insertelement <128 x i8> %6911, i8 %6366, i32 42
  %6913 = insertelement <128 x i8> %6912, i8 %6372, i32 43
  %6914 = insertelement <128 x i8> %6913, i8 %6378, i32 44
  %6915 = insertelement <128 x i8> %6914, i8 %6384, i32 45
  %6916 = insertelement <128 x i8> %6915, i8 %6390, i32 46
  %6917 = insertelement <128 x i8> %6916, i8 %6396, i32 47
  %6918 = insertelement <128 x i8> %6917, i8 %6402, i32 48
  %6919 = insertelement <128 x i8> %6918, i8 %6408, i32 49
  %6920 = insertelement <128 x i8> %6919, i8 %6414, i32 50
  %6921 = insertelement <128 x i8> %6920, i8 %6420, i32 51
  %6922 = insertelement <128 x i8> %6921, i8 %6426, i32 52
  %6923 = insertelement <128 x i8> %6922, i8 %6432, i32 53
  %6924 = insertelement <128 x i8> %6923, i8 %6438, i32 54
  %6925 = insertelement <128 x i8> %6924, i8 %6444, i32 55
  %6926 = insertelement <128 x i8> %6925, i8 %6450, i32 56
  %6927 = insertelement <128 x i8> %6926, i8 %6456, i32 57
  %6928 = insertelement <128 x i8> %6927, i8 %6462, i32 58
  %6929 = insertelement <128 x i8> %6928, i8 %6468, i32 59
  %6930 = insertelement <128 x i8> %6929, i8 %6474, i32 60
  %6931 = insertelement <128 x i8> %6930, i8 %6480, i32 61
  %6932 = insertelement <128 x i8> %6931, i8 %6486, i32 62
  %6933 = insertelement <128 x i8> %6932, i8 %6492, i32 63
  %6934 = insertelement <128 x i8> %6933, i8 %6498, i32 64
  %6935 = insertelement <128 x i8> %6934, i8 %6504, i32 65
  %6936 = insertelement <128 x i8> %6935, i8 %6510, i32 66
  %6937 = insertelement <128 x i8> %6936, i8 %6516, i32 67
  %6938 = insertelement <128 x i8> %6937, i8 %6522, i32 68
  %6939 = insertelement <128 x i8> %6938, i8 %6528, i32 69
  %6940 = insertelement <128 x i8> %6939, i8 %6534, i32 70
  %6941 = insertelement <128 x i8> %6940, i8 %6540, i32 71
  %6942 = insertelement <128 x i8> %6941, i8 %6546, i32 72
  %6943 = insertelement <128 x i8> %6942, i8 %6552, i32 73
  %6944 = insertelement <128 x i8> %6943, i8 %6558, i32 74
  %6945 = insertelement <128 x i8> %6944, i8 %6564, i32 75
  %6946 = insertelement <128 x i8> %6945, i8 %6570, i32 76
  %6947 = insertelement <128 x i8> %6946, i8 %6576, i32 77
  %6948 = insertelement <128 x i8> %6947, i8 %6582, i32 78
  %6949 = insertelement <128 x i8> %6948, i8 %6588, i32 79
  %6950 = insertelement <128 x i8> %6949, i8 %6594, i32 80
  %6951 = insertelement <128 x i8> %6950, i8 %6600, i32 81
  %6952 = insertelement <128 x i8> %6951, i8 %6606, i32 82
  %6953 = insertelement <128 x i8> %6952, i8 %6612, i32 83
  %6954 = insertelement <128 x i8> %6953, i8 %6618, i32 84
  %6955 = insertelement <128 x i8> %6954, i8 %6624, i32 85
  %6956 = insertelement <128 x i8> %6955, i8 %6630, i32 86
  %6957 = insertelement <128 x i8> %6956, i8 %6636, i32 87
  %6958 = insertelement <128 x i8> %6957, i8 %6642, i32 88
  %6959 = insertelement <128 x i8> %6958, i8 %6648, i32 89
  %6960 = insertelement <128 x i8> %6959, i8 %6654, i32 90
  %6961 = insertelement <128 x i8> %6960, i8 %6660, i32 91
  %6962 = insertelement <128 x i8> %6961, i8 %6666, i32 92
  %6963 = insertelement <128 x i8> %6962, i8 %6672, i32 93
  %6964 = insertelement <128 x i8> %6963, i8 %6678, i32 94
  %6965 = insertelement <128 x i8> %6964, i8 %6684, i32 95
  %6966 = insertelement <128 x i8> %6965, i8 %6690, i32 96
  %6967 = insertelement <128 x i8> %6966, i8 %6696, i32 97
  %6968 = insertelement <128 x i8> %6967, i8 %6702, i32 98
  %6969 = insertelement <128 x i8> %6968, i8 %6708, i32 99
  %6970 = insertelement <128 x i8> %6969, i8 %6714, i32 100
  %6971 = insertelement <128 x i8> %6970, i8 %6720, i32 101
  %6972 = insertelement <128 x i8> %6971, i8 %6726, i32 102
  %6973 = insertelement <128 x i8> %6972, i8 %6732, i32 103
  %6974 = insertelement <128 x i8> %6973, i8 %6738, i32 104
  %6975 = insertelement <128 x i8> %6974, i8 %6744, i32 105
  %6976 = insertelement <128 x i8> %6975, i8 %6750, i32 106
  %6977 = insertelement <128 x i8> %6976, i8 %6756, i32 107
  %6978 = insertelement <128 x i8> %6977, i8 %6762, i32 108
  %6979 = insertelement <128 x i8> %6978, i8 %6768, i32 109
  %6980 = insertelement <128 x i8> %6979, i8 %6774, i32 110
  %6981 = insertelement <128 x i8> %6980, i8 %6780, i32 111
  %6982 = insertelement <128 x i8> %6981, i8 %6786, i32 112
  %6983 = insertelement <128 x i8> %6982, i8 %6792, i32 113
  %6984 = insertelement <128 x i8> %6983, i8 %6798, i32 114
  %6985 = insertelement <128 x i8> %6984, i8 %6804, i32 115
  %6986 = insertelement <128 x i8> %6985, i8 %6810, i32 116
  %6987 = insertelement <128 x i8> %6986, i8 %6816, i32 117
  %6988 = insertelement <128 x i8> %6987, i8 %6822, i32 118
  %6989 = insertelement <128 x i8> %6988, i8 %6828, i32 119
  %6990 = insertelement <128 x i8> %6989, i8 %6834, i32 120
  %6991 = insertelement <128 x i8> %6990, i8 %6840, i32 121
  %6992 = insertelement <128 x i8> %6991, i8 %6846, i32 122
  %6993 = insertelement <128 x i8> %6992, i8 %6852, i32 123
  %6994 = insertelement <128 x i8> %6993, i8 %6858, i32 124
  %6995 = insertelement <128 x i8> %6994, i8 %6864, i32 125
  %6996 = insertelement <128 x i8> %6995, i8 %6870, i32 126
  %6997 = bitcast <128 x i8> %6996 to <16 x i64>
  %6998 = shufflevector <16 x i64> %6997, <16 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6999 = bitcast <8 x i64> %6998 to <64 x i8>
  %7000 = getelementptr inbounds i8, i8* %6115, i32 64
  %7001 = bitcast i8* %7000 to <64 x i8>*
  call void @llvm.masked.store.v64i8.p0v64i8(<64 x i8> %6999, <64 x i8>* nonnull %7001, i32 64, <64 x i1> %5132), !tbaa !129
  %7002 = add nuw nsw i32 %resampled_input.s0.x.rebased223.us, 1
  %.not1825.us = icmp eq i32 %resampled_input.s0.x.rebased223.us, %t2448
  br i1 %.not1825.us, label %"end for resampled_input.s0.x.rebased222.loopexit.us", label %"for resampled_input.s0.x.rebased221.us"

"end for resampled_input.s0.x.rebased222.loopexit.us": ; preds = %after_bb1759.us
  %7003 = add nuw nsw i32 %resampled_input.s0.y.rebased220.us, 1
  %.not1824.us = icmp eq i32 %resampled_input.s0.y.rebased220.us, %t2447
  br i1 %.not1824.us, label %"consume resampled_input1760", label %"for resampled_input.s0.y.rebased218.us"

"consume resampled_input1760":                    ; preds = %"end for resampled_input.s0.x.rebased222.loopexit.us", %"end for resampled_input.s0.x.rebased216.loopexit.us", %"for resampled_input.s0.y.rebased218.preheader", %"for resampled_input.s0.y.rebased212.preheader", %next_bb211, %then_bb210
  br i1 %5533, label %"for output.s0.y.yo1761.preheader", label %"end for output.s0.y.yo1762", !prof !101

"for output.s0.y.yo1761.preheader":               ; preds = %"consume resampled_input1760"
  %7004 = add nsw i32 %output.s0.b.rebased204, %14
  %7005 = mul nsw i32 %7004, %25
  %7006 = load <32 x i32>, <32 x i32>* %5304, align 128
  %7007 = load <32 x i32>, <32 x i32>* %5307, align 128
  %7008 = load <32 x i32>, <32 x i32>* %5343, align 128
  %7009 = load <32 x i32>, <32 x i32>* %5346, align 128
  br label %"for output.s0.y.yo1761"

"for output.s0.y.yo1761":                         ; preds = %"for output.s0.y.yo1761.preheader", %"end for output.s0.x.xo1765"
  %output.s0.y.yo1763 = phi i32 [ %7022, %"end for output.s0.x.xo1765" ], [ 0, %"for output.s0.y.yo1761.preheader" ]
  %7010 = add nsw i32 %output.s0.y.yo1763, %22
  %7011 = mul nsw i32 %7010, %stride_y
  %7012 = add nsw i32 %5534, %7011
  %t2476 = mul nsw i32 %7012, %5399
  %7013 = add nsw i32 %5535, %7011
  %t2478 = mul nsw i32 %7013, %5399
  %7014 = sub nsw i32 %7011, %resampled_input.y.min_realized
  %t2480 = mul nsw i32 %7014, %5399
  br i1 %5536, label %"for output.s0.x.xo1764.preheader", label %"end for output.s0.x.xo1765", !prof !101

"for output.s0.x.xo1764.preheader":               ; preds = %"for output.s0.y.yo1761"
  %7015 = mul nsw i32 %7010, %24
  %7016 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %7017 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5617) #11
  %7018 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %7019 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %7020 = add i32 %7015, %7005
  br label %"for output.s0.x.xo1764"

"end for output.s0.y.yo1762":                     ; preds = %"end for output.s0.x.xo1765", %"consume resampled_input1760"
  %7021 = add nuw nsw i32 %output.s0.b.rebased204, 1
  %.not1819 = icmp eq i32 %7021, %15
  br i1 %.not1819, label %if.then.i.loopexit, label %"for output.s0.b.rebased202"

"for output.s0.x.xo1764":                         ; preds = %"for output.s0.x.xo1764.preheader", %"consume convolved1777"
  %output.s0.x.xo1766 = phi i32 [ %7669, %"consume convolved1777" ], [ 0, %"for output.s0.x.xo1764.preheader" ]
  br i1 %4736, label %then_bb1769, label %next_bb1770

"end for output.s0.x.xo1765":                     ; preds = %"consume convolved1777", %"for output.s0.y.yo1761"
  %7022 = add nuw nsw i32 %output.s0.y.yo1763, 1
  %.not1820 = icmp eq i32 %7022, %23
  br i1 %.not1820, label %"end for output.s0.y.yo1762", label %"for output.s0.y.yo1761"

then_bb1769:                                      ; preds = %"for output.s0.x.xo1764"
  %7023 = load <32 x i16>, <32 x i16>* %5539, align 128, !tbaa !105
  %7024 = sext <32 x i16> %7023 to <32 x i32>
  %7025 = add nsw i32 %output.s0.x.xo1766, %19
  %7026 = mul nsw i32 %7025, %stride_x
  %7027 = add i32 %7026, %5540
  %7028 = add i32 %7027, %t2476
  %7029 = shl nsw i32 %7028, 7
  %7030 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7029
  %7031 = bitcast i8* %7030 to <32 x i8>*
  %7032 = load <32 x i8>, <32 x i8>* %7031, align 128, !tbaa !129
  %7033 = zext <32 x i8> %7032 to <32 x i32>
  %7034 = load <32 x i16>, <32 x i16>* %5542, align 64, !tbaa !105
  %7035 = sext <32 x i16> %7034 to <32 x i32>
  %7036 = getelementptr inbounds i8, i8* %7030, i32 32
  %7037 = bitcast i8* %7036 to <32 x i8>*
  %7038 = load <32 x i8>, <32 x i8>* %7037, align 32, !tbaa !129
  %7039 = zext <32 x i8> %7038 to <32 x i32>
  %7040 = load <32 x i16>, <32 x i16>* %5544, align 128, !tbaa !105
  %7041 = sext <32 x i16> %7040 to <32 x i32>
  %7042 = add i32 %7026, %5545
  %7043 = add i32 %7042, %t2476
  %7044 = shl nsw i32 %7043, 7
  %7045 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7044
  %7046 = bitcast i8* %7045 to <32 x i8>*
  %7047 = load <32 x i8>, <32 x i8>* %7046, align 128, !tbaa !129
  %7048 = zext <32 x i8> %7047 to <32 x i32>
  %7049 = load <32 x i16>, <32 x i16>* %5547, align 64, !tbaa !105
  %7050 = sext <32 x i16> %7049 to <32 x i32>
  %7051 = getelementptr inbounds i8, i8* %7045, i32 32
  %7052 = bitcast i8* %7051 to <32 x i8>*
  %7053 = load <32 x i8>, <32 x i8>* %7052, align 32, !tbaa !129
  %7054 = zext <32 x i8> %7053 to <32 x i32>
  %7055 = load <32 x i16>, <32 x i16>* %5548, align 128, !tbaa !105
  %7056 = sext <32 x i16> %7055 to <32 x i32>
  %7057 = add i32 %7026, %t2476
  %7058 = sub i32 %7057, %resampled_input.x.min_realized
  %7059 = shl nsw i32 %7058, 7
  %7060 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7059
  %7061 = bitcast i8* %7060 to <32 x i8>*
  %7062 = load <32 x i8>, <32 x i8>* %7061, align 128, !tbaa !129
  %7063 = zext <32 x i8> %7062 to <32 x i32>
  %7064 = load <32 x i16>, <32 x i16>* %5550, align 64, !tbaa !105
  %7065 = sext <32 x i16> %7064 to <32 x i32>
  %7066 = getelementptr inbounds i8, i8* %7060, i32 32
  %7067 = bitcast i8* %7066 to <32 x i8>*
  %7068 = load <32 x i8>, <32 x i8>* %7067, align 32, !tbaa !129
  %7069 = zext <32 x i8> %7068 to <32 x i32>
  %7070 = load <32 x i16>, <32 x i16>* %5553, align 128, !tbaa !105
  %7071 = sext <32 x i16> %7070 to <32 x i32>
  %7072 = add i32 %7027, %t2478
  %7073 = shl nsw i32 %7072, 7
  %7074 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7073
  %7075 = bitcast i8* %7074 to <32 x i8>*
  %7076 = load <32 x i8>, <32 x i8>* %7075, align 128, !tbaa !129
  %7077 = zext <32 x i8> %7076 to <32 x i32>
  %7078 = load <32 x i16>, <32 x i16>* %5555, align 64, !tbaa !105
  %7079 = sext <32 x i16> %7078 to <32 x i32>
  %7080 = getelementptr inbounds i8, i8* %7074, i32 32
  %7081 = bitcast i8* %7080 to <32 x i8>*
  %7082 = load <32 x i8>, <32 x i8>* %7081, align 32, !tbaa !129
  %7083 = zext <32 x i8> %7082 to <32 x i32>
  %7084 = load <32 x i16>, <32 x i16>* %5557, align 128, !tbaa !105
  %7085 = sext <32 x i16> %7084 to <32 x i32>
  %7086 = add i32 %7042, %t2478
  %7087 = shl nsw i32 %7086, 7
  %7088 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7087
  %7089 = bitcast i8* %7088 to <32 x i8>*
  %7090 = load <32 x i8>, <32 x i8>* %7089, align 128, !tbaa !129
  %7091 = zext <32 x i8> %7090 to <32 x i32>
  %7092 = load <32 x i16>, <32 x i16>* %5559, align 64, !tbaa !105
  %7093 = sext <32 x i16> %7092 to <32 x i32>
  %7094 = getelementptr inbounds i8, i8* %7088, i32 32
  %7095 = bitcast i8* %7094 to <32 x i8>*
  %7096 = load <32 x i8>, <32 x i8>* %7095, align 32, !tbaa !129
  %7097 = zext <32 x i8> %7096 to <32 x i32>
  %7098 = load <32 x i16>, <32 x i16>* %5560, align 128, !tbaa !105
  %7099 = sext <32 x i16> %7098 to <32 x i32>
  %7100 = add i32 %7026, %t2478
  %7101 = sub i32 %7100, %resampled_input.x.min_realized
  %7102 = shl nsw i32 %7101, 7
  %7103 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7102
  %7104 = bitcast i8* %7103 to <32 x i8>*
  %7105 = load <32 x i8>, <32 x i8>* %7104, align 128, !tbaa !129
  %7106 = zext <32 x i8> %7105 to <32 x i32>
  %7107 = load <32 x i16>, <32 x i16>* %5562, align 64, !tbaa !105
  %7108 = sext <32 x i16> %7107 to <32 x i32>
  %7109 = getelementptr inbounds i8, i8* %7103, i32 32
  %7110 = bitcast i8* %7109 to <32 x i8>*
  %7111 = load <32 x i8>, <32 x i8>* %7110, align 32, !tbaa !129
  %7112 = zext <32 x i8> %7111 to <32 x i32>
  %7113 = load <32 x i16>, <32 x i16>* %5564, align 128, !tbaa !180
  %7114 = sext <32 x i16> %7113 to <32 x i32>
  %7115 = add i32 %7027, %t2480
  %7116 = shl nsw i32 %7115, 7
  %7117 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7116
  %7118 = bitcast i8* %7117 to <32 x i8>*
  %7119 = load <32 x i8>, <32 x i8>* %7118, align 128, !tbaa !129
  %7120 = zext <32 x i8> %7119 to <32 x i32>
  %7121 = load <32 x i16>, <32 x i16>* %5566, align 128, !tbaa !187
  %7122 = sext <32 x i16> %7121 to <32 x i32>
  %7123 = getelementptr inbounds i8, i8* %7117, i32 32
  %7124 = bitcast i8* %7123 to <32 x i8>*
  %7125 = load <32 x i8>, <32 x i8>* %7124, align 32, !tbaa !129
  %7126 = zext <32 x i8> %7125 to <32 x i32>
  %7127 = load <32 x i16>, <32 x i16>* %5568, align 128, !tbaa !189
  %7128 = sext <32 x i16> %7127 to <32 x i32>
  %7129 = add i32 %7042, %t2480
  %7130 = shl nsw i32 %7129, 7
  %7131 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7130
  %7132 = bitcast i8* %7131 to <32 x i8>*
  %7133 = load <32 x i8>, <32 x i8>* %7132, align 128, !tbaa !129
  %7134 = zext <32 x i8> %7133 to <32 x i32>
  %7135 = load <32 x i16>, <32 x i16>* %5570, align 128, !tbaa !194
  %7136 = sext <32 x i16> %7135 to <32 x i32>
  %7137 = getelementptr inbounds i8, i8* %7131, i32 32
  %7138 = bitcast i8* %7137 to <32 x i8>*
  %7139 = load <32 x i8>, <32 x i8>* %7138, align 32, !tbaa !129
  %7140 = zext <32 x i8> %7139 to <32 x i32>
  %7141 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7007, <32 x i32> %7006)
  %7142 = load <32 x i16>, <32 x i16>* %5571, align 128, !tbaa !196
  %7143 = sext <32 x i16> %7142 to <32 x i32>
  %7144 = add i32 %7026, %t2480
  %7145 = sub i32 %7144, %resampled_input.x.min_realized
  %7146 = shl nsw i32 %7145, 7
  %7147 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7146
  %7148 = bitcast i8* %7147 to <32 x i8>*
  %7149 = load <32 x i8>, <32 x i8>* %7148, align 128, !tbaa !129
  %7150 = zext <32 x i8> %7149 to <32 x i32>
  %7151 = load <32 x i16>, <32 x i16>* %5573, align 128, !tbaa !200
  %7152 = sext <32 x i16> %7151 to <32 x i32>
  %7153 = getelementptr inbounds i8, i8* %7147, i32 32
  %7154 = bitcast i8* %7153 to <32 x i8>*
  %7155 = load <32 x i8>, <32 x i8>* %7154, align 32, !tbaa !129
  %7156 = zext <32 x i8> %7155 to <32 x i32>
  %7157 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7033, <32 x i32> %7024) #11
  %7158 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7157, <32 x i32> %7033, <32 x i32> %7024) #11
  %7159 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7039, <32 x i32> %7035) #11
  %7160 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7159, <32 x i32> %7039, <32 x i32> %7035) #11
  %7161 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7158, <32 x i32> %7160) #11
  %7162 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7077, <32 x i32> %7071) #11
  %7163 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7162, <32 x i32> %7077, <32 x i32> %7071) #11
  %7164 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7083, <32 x i32> %7079) #11
  %7165 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7164, <32 x i32> %7083, <32 x i32> %7079) #11
  %7166 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7163, <32 x i32> %7165) #11
  %7167 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7120, <32 x i32> %7114) #11
  %7168 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7167, <32 x i32> %7120, <32 x i32> %7114) #11
  %7169 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7126, <32 x i32> %7122) #11
  %7170 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7169, <32 x i32> %7126, <32 x i32> %7122) #11
  %7171 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7168, <32 x i32> %7170) #11
  %7172 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7150, <32 x i32> %7143) #11
  %7173 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7172, <32 x i32> %7150, <32 x i32> %7143) #11
  %7174 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7156, <32 x i32> %7152) #11
  %7175 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7174, <32 x i32> %7156, <32 x i32> %7152) #11
  %7176 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7173, <32 x i32> %7175) #11
  %7177 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7176, <64 x i32> %7141) #11
  %7178 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7134, <32 x i32> %7128) #11
  %7179 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7178, <32 x i32> %7134, <32 x i32> %7128) #11
  %7180 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7140, <32 x i32> %7136) #11
  %7181 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7180, <32 x i32> %7140, <32 x i32> %7136) #11
  %7182 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7179, <32 x i32> %7181) #11
  %7183 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7177, <64 x i32> %7182) #11
  %7184 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7171, <64 x i32> %7183) #11
  %7185 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7106, <32 x i32> %7099) #11
  %7186 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7185, <32 x i32> %7106, <32 x i32> %7099) #11
  %7187 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7112, <32 x i32> %7108) #11
  %7188 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7187, <32 x i32> %7112, <32 x i32> %7108) #11
  %7189 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7186, <32 x i32> %7188) #11
  %7190 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7184, <64 x i32> %7189) #11
  %7191 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7091, <32 x i32> %7085) #11
  %7192 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7191, <32 x i32> %7091, <32 x i32> %7085) #11
  %7193 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7097, <32 x i32> %7093) #11
  %7194 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7193, <32 x i32> %7097, <32 x i32> %7093) #11
  %7195 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7192, <32 x i32> %7194) #11
  %7196 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7190, <64 x i32> %7195) #11
  %7197 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7166, <64 x i32> %7196) #11
  %7198 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7063, <32 x i32> %7056) #11
  %7199 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7198, <32 x i32> %7063, <32 x i32> %7056) #11
  %7200 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7069, <32 x i32> %7065) #11
  %7201 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7200, <32 x i32> %7069, <32 x i32> %7065) #11
  %7202 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7199, <32 x i32> %7201) #11
  %7203 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7197, <64 x i32> %7202) #11
  %7204 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7048, <32 x i32> %7041) #11
  %7205 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7204, <32 x i32> %7048, <32 x i32> %7041) #11
  %7206 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7054, <32 x i32> %7050) #11
  %7207 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7206, <32 x i32> %7054, <32 x i32> %7050) #11
  %7208 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7205, <32 x i32> %7207) #11
  %7209 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7203, <64 x i32> %7208) #11
  %7210 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7161, <64 x i32> %7209) #11
  %7211 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7210)
  %7212 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7210)
  %7213 = load <32 x i16>, <32 x i16>* %5575, align 128, !tbaa !105
  %7214 = sext <32 x i16> %7213 to <32 x i32>
  %7215 = getelementptr inbounds i8, i8* %7030, i32 64
  %7216 = bitcast i8* %7215 to <32 x i8>*
  %7217 = load <32 x i8>, <32 x i8>* %7216, align 64, !tbaa !129
  %7218 = zext <32 x i8> %7217 to <32 x i32>
  %7219 = load <32 x i16>, <32 x i16>* %5577, align 64, !tbaa !105
  %7220 = sext <32 x i16> %7219 to <32 x i32>
  %7221 = getelementptr inbounds i8, i8* %7030, i32 96
  %7222 = bitcast i8* %7221 to <32 x i8>*
  %7223 = load <32 x i8>, <32 x i8>* %7222, align 32, !tbaa !129
  %7224 = zext <32 x i8> %7223 to <32 x i32>
  %7225 = load <32 x i16>, <32 x i16>* %5579, align 128, !tbaa !105
  %7226 = sext <32 x i16> %7225 to <32 x i32>
  %7227 = getelementptr inbounds i8, i8* %7045, i32 64
  %7228 = bitcast i8* %7227 to <32 x i8>*
  %7229 = load <32 x i8>, <32 x i8>* %7228, align 64, !tbaa !129
  %7230 = zext <32 x i8> %7229 to <32 x i32>
  %7231 = load <32 x i16>, <32 x i16>* %5581, align 64, !tbaa !105
  %7232 = sext <32 x i16> %7231 to <32 x i32>
  %7233 = getelementptr inbounds i8, i8* %7045, i32 96
  %7234 = bitcast i8* %7233 to <32 x i8>*
  %7235 = load <32 x i8>, <32 x i8>* %7234, align 32, !tbaa !129
  %7236 = zext <32 x i8> %7235 to <32 x i32>
  %7237 = load <32 x i16>, <32 x i16>* %5583, align 128, !tbaa !105
  %7238 = sext <32 x i16> %7237 to <32 x i32>
  %7239 = getelementptr inbounds i8, i8* %7060, i32 64
  %7240 = bitcast i8* %7239 to <32 x i8>*
  %7241 = load <32 x i8>, <32 x i8>* %7240, align 64, !tbaa !129
  %7242 = zext <32 x i8> %7241 to <32 x i32>
  %7243 = load <32 x i16>, <32 x i16>* %5585, align 64, !tbaa !105
  %7244 = sext <32 x i16> %7243 to <32 x i32>
  %7245 = getelementptr inbounds i8, i8* %7060, i32 96
  %7246 = bitcast i8* %7245 to <32 x i8>*
  %7247 = load <32 x i8>, <32 x i8>* %7246, align 32, !tbaa !129
  %7248 = zext <32 x i8> %7247 to <32 x i32>
  %7249 = load <32 x i16>, <32 x i16>* %5587, align 128, !tbaa !105
  %7250 = sext <32 x i16> %7249 to <32 x i32>
  %7251 = getelementptr inbounds i8, i8* %7074, i32 64
  %7252 = bitcast i8* %7251 to <32 x i8>*
  %7253 = load <32 x i8>, <32 x i8>* %7252, align 64, !tbaa !129
  %7254 = zext <32 x i8> %7253 to <32 x i32>
  %7255 = load <32 x i16>, <32 x i16>* %5589, align 64, !tbaa !105
  %7256 = sext <32 x i16> %7255 to <32 x i32>
  %7257 = getelementptr inbounds i8, i8* %7074, i32 96
  %7258 = bitcast i8* %7257 to <32 x i8>*
  %7259 = load <32 x i8>, <32 x i8>* %7258, align 32, !tbaa !129
  %7260 = zext <32 x i8> %7259 to <32 x i32>
  %7261 = load <32 x i16>, <32 x i16>* %5591, align 128, !tbaa !105
  %7262 = sext <32 x i16> %7261 to <32 x i32>
  %7263 = getelementptr inbounds i8, i8* %7088, i32 64
  %7264 = bitcast i8* %7263 to <32 x i8>*
  %7265 = load <32 x i8>, <32 x i8>* %7264, align 64, !tbaa !129
  %7266 = zext <32 x i8> %7265 to <32 x i32>
  %7267 = load <32 x i16>, <32 x i16>* %5593, align 64, !tbaa !105
  %7268 = sext <32 x i16> %7267 to <32 x i32>
  %7269 = getelementptr inbounds i8, i8* %7088, i32 96
  %7270 = bitcast i8* %7269 to <32 x i8>*
  %7271 = load <32 x i8>, <32 x i8>* %7270, align 32, !tbaa !129
  %7272 = zext <32 x i8> %7271 to <32 x i32>
  %7273 = load <32 x i16>, <32 x i16>* %5595, align 128, !tbaa !105
  %7274 = sext <32 x i16> %7273 to <32 x i32>
  %7275 = getelementptr inbounds i8, i8* %7103, i32 64
  %7276 = bitcast i8* %7275 to <32 x i8>*
  %7277 = load <32 x i8>, <32 x i8>* %7276, align 64, !tbaa !129
  %7278 = zext <32 x i8> %7277 to <32 x i32>
  %7279 = load <32 x i16>, <32 x i16>* %5597, align 64, !tbaa !105
  %7280 = sext <32 x i16> %7279 to <32 x i32>
  %7281 = getelementptr inbounds i8, i8* %7103, i32 96
  %7282 = bitcast i8* %7281 to <32 x i8>*
  %7283 = load <32 x i8>, <32 x i8>* %7282, align 32, !tbaa !129
  %7284 = zext <32 x i8> %7283 to <32 x i32>
  %7285 = load <32 x i16>, <32 x i16>* %5599, align 128, !tbaa !202
  %7286 = sext <32 x i16> %7285 to <32 x i32>
  %7287 = getelementptr inbounds i8, i8* %7117, i32 64
  %7288 = bitcast i8* %7287 to <32 x i8>*
  %7289 = load <32 x i8>, <32 x i8>* %7288, align 64, !tbaa !129
  %7290 = zext <32 x i8> %7289 to <32 x i32>
  %7291 = load <32 x i16>, <32 x i16>* %5601, align 128, !tbaa !205
  %7292 = sext <32 x i16> %7291 to <32 x i32>
  %7293 = getelementptr inbounds i8, i8* %7117, i32 96
  %7294 = bitcast i8* %7293 to <32 x i8>*
  %7295 = load <32 x i8>, <32 x i8>* %7294, align 32, !tbaa !129
  %7296 = zext <32 x i8> %7295 to <32 x i32>
  %7297 = load <32 x i16>, <32 x i16>* %5603, align 128, !tbaa !207
  %7298 = sext <32 x i16> %7297 to <32 x i32>
  %7299 = getelementptr inbounds i8, i8* %7131, i32 64
  %7300 = bitcast i8* %7299 to <32 x i8>*
  %7301 = load <32 x i8>, <32 x i8>* %7300, align 64, !tbaa !129
  %7302 = zext <32 x i8> %7301 to <32 x i32>
  %7303 = load <32 x i16>, <32 x i16>* %5605, align 128, !tbaa !210
  %7304 = sext <32 x i16> %7303 to <32 x i32>
  %7305 = getelementptr inbounds i8, i8* %7131, i32 96
  %7306 = bitcast i8* %7305 to <32 x i8>*
  %7307 = load <32 x i8>, <32 x i8>* %7306, align 32, !tbaa !129
  %7308 = zext <32 x i8> %7307 to <32 x i32>
  %7309 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7009, <32 x i32> %7008)
  %7310 = load <32 x i16>, <32 x i16>* %5607, align 128, !tbaa !212
  %7311 = sext <32 x i16> %7310 to <32 x i32>
  %7312 = getelementptr inbounds i8, i8* %7147, i32 64
  %7313 = bitcast i8* %7312 to <32 x i8>*
  %7314 = load <32 x i8>, <32 x i8>* %7313, align 64, !tbaa !129
  %7315 = zext <32 x i8> %7314 to <32 x i32>
  %7316 = load <32 x i16>, <32 x i16>* %5609, align 128, !tbaa !215
  %7317 = sext <32 x i16> %7316 to <32 x i32>
  %7318 = getelementptr inbounds i8, i8* %7147, i32 96
  %7319 = bitcast i8* %7318 to <32 x i8>*
  %7320 = load <32 x i8>, <32 x i8>* %7319, align 32, !tbaa !129
  %7321 = zext <32 x i8> %7320 to <32 x i32>
  %7322 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7218, <32 x i32> %7214) #11
  %7323 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7322, <32 x i32> %7218, <32 x i32> %7214) #11
  %7324 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7224, <32 x i32> %7220) #11
  %7325 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7324, <32 x i32> %7224, <32 x i32> %7220) #11
  %7326 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7323, <32 x i32> %7325) #11
  %7327 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7254, <32 x i32> %7250) #11
  %7328 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7327, <32 x i32> %7254, <32 x i32> %7250) #11
  %7329 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7260, <32 x i32> %7256) #11
  %7330 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7329, <32 x i32> %7260, <32 x i32> %7256) #11
  %7331 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7328, <32 x i32> %7330) #11
  %7332 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7290, <32 x i32> %7286) #11
  %7333 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7332, <32 x i32> %7290, <32 x i32> %7286) #11
  %7334 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7296, <32 x i32> %7292) #11
  %7335 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7334, <32 x i32> %7296, <32 x i32> %7292) #11
  %7336 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7333, <32 x i32> %7335) #11
  %7337 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7315, <32 x i32> %7311) #11
  %7338 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7337, <32 x i32> %7315, <32 x i32> %7311) #11
  %7339 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7321, <32 x i32> %7317) #11
  %7340 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7339, <32 x i32> %7321, <32 x i32> %7317) #11
  %7341 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7338, <32 x i32> %7340) #11
  %7342 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7341, <64 x i32> %7309) #11
  %7343 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7302, <32 x i32> %7298) #11
  %7344 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7343, <32 x i32> %7302, <32 x i32> %7298) #11
  %7345 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7308, <32 x i32> %7304) #11
  %7346 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7345, <32 x i32> %7308, <32 x i32> %7304) #11
  %7347 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7344, <32 x i32> %7346) #11
  %7348 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7342, <64 x i32> %7347) #11
  %7349 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7336, <64 x i32> %7348) #11
  %7350 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7278, <32 x i32> %7274) #11
  %7351 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7350, <32 x i32> %7278, <32 x i32> %7274) #11
  %7352 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7284, <32 x i32> %7280) #11
  %7353 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7352, <32 x i32> %7284, <32 x i32> %7280) #11
  %7354 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7351, <32 x i32> %7353) #11
  %7355 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7349, <64 x i32> %7354) #11
  %7356 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7266, <32 x i32> %7262) #11
  %7357 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7356, <32 x i32> %7266, <32 x i32> %7262) #11
  %7358 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7272, <32 x i32> %7268) #11
  %7359 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7358, <32 x i32> %7272, <32 x i32> %7268) #11
  %7360 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7357, <32 x i32> %7359) #11
  %7361 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7355, <64 x i32> %7360) #11
  %7362 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7331, <64 x i32> %7361) #11
  %7363 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7242, <32 x i32> %7238) #11
  %7364 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7363, <32 x i32> %7242, <32 x i32> %7238) #11
  %7365 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7248, <32 x i32> %7244) #11
  %7366 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7365, <32 x i32> %7248, <32 x i32> %7244) #11
  %7367 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7364, <32 x i32> %7366) #11
  %7368 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7362, <64 x i32> %7367) #11
  %7369 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7230, <32 x i32> %7226) #11
  %7370 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7369, <32 x i32> %7230, <32 x i32> %7226) #11
  %7371 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7236, <32 x i32> %7232) #11
  %7372 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7371, <32 x i32> %7236, <32 x i32> %7232) #11
  %7373 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7370, <32 x i32> %7372) #11
  %7374 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7368, <64 x i32> %7373) #11
  %7375 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7326, <64 x i32> %7374) #11
  %7376 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7375)
  %7377 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7375)
  br label %"consume convolved1777"

next_bb1770:                                      ; preds = %"for output.s0.x.xo1764"
  %7378 = add nsw i32 %output.s0.x.xo1766, %19
  br i1 %4738, label %"for convolved.s1.r19$y1771.preheader", label %"consume convolved1777", !prof !101

"for convolved.s1.r19$y1771.preheader":           ; preds = %next_bb1770
  %7379 = mul nsw i32 %7378, %stride_x
  %7380 = sub i32 %7379, %resampled_input.x.min_realized
  br i1 %4737, label %"for convolved.s1.r19$y1771.us", label %"consume convolved1777", !prof !101

"for convolved.s1.r19$y1771.us":                  ; preds = %"for convolved.s1.r19$y1771.preheader", %"end for convolved.s1.r19$x1775.loopexit.us"
  %convolved1816.sroa.57.4.us = phi <32 x i32> [ %.lcssa2484, %"end for convolved.s1.r19$x1775.loopexit.us" ], [ %7009, %"for convolved.s1.r19$y1771.preheader" ]
  %convolved1816.sroa.38.4.us = phi <32 x i32> [ %.lcssa2485, %"end for convolved.s1.r19$x1775.loopexit.us" ], [ %7008, %"for convolved.s1.r19$y1771.preheader" ]
  %convolved1816.sroa.19.4.us = phi <32 x i32> [ %.lcssa2486, %"end for convolved.s1.r19$x1775.loopexit.us" ], [ %7007, %"for convolved.s1.r19$y1771.preheader" ]
  %convolved1816.sroa.0.4.us = phi <32 x i32> [ %.lcssa2487, %"end for convolved.s1.r19$x1775.loopexit.us" ], [ %7006, %"for convolved.s1.r19$y1771.preheader" ]
  %"convolved.s1.r19$y1773.us" = phi i32 [ %7552, %"end for convolved.s1.r19$x1775.loopexit.us" ], [ 0, %"for convolved.s1.r19$y1771.preheader" ]
  %7381 = mul nsw i32 %"convolved.s1.r19$y1773.us", %a548
  %7382 = add nsw i32 %7381, %7014
  %7383 = mul nsw i32 %7382, %5399
  %t2483.us = add nsw i32 %7380, %7383
  %7384 = mul nsw i32 %"convolved.s1.r19$y1773.us", %4
  br i1 %5631, label %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x1774.us"

"for convolved.s1.r19$x1774.us":                  ; preds = %"for convolved.s1.r19$y1771.us", %"for convolved.s1.r19$x1774.us"
  %convolved1816.sroa.57.5.us = phi <32 x i32> [ %7495, %"for convolved.s1.r19$x1774.us" ], [ %convolved1816.sroa.57.4.us, %"for convolved.s1.r19$y1771.us" ]
  %convolved1816.sroa.38.5.us = phi <32 x i32> [ %7494, %"for convolved.s1.r19$x1774.us" ], [ %convolved1816.sroa.38.4.us, %"for convolved.s1.r19$y1771.us" ]
  %convolved1816.sroa.19.5.us = phi <32 x i32> [ %7470, %"for convolved.s1.r19$x1774.us" ], [ %convolved1816.sroa.19.4.us, %"for convolved.s1.r19$y1771.us" ]
  %convolved1816.sroa.0.5.us = phi <32 x i32> [ %7469, %"for convolved.s1.r19$x1774.us" ], [ %convolved1816.sroa.0.4.us, %"for convolved.s1.r19$y1771.us" ]
  %"convolved.s1.r19$x1776.us" = phi i32 [ %7496, %"for convolved.s1.r19$x1774.us" ], [ 0, %"for convolved.s1.r19$y1771.us" ]
  %niter2513 = phi i32 [ %niter2513.nsub.1, %"for convolved.s1.r19$x1774.us" ], [ %unroll_iter2512, %"for convolved.s1.r19$y1771.us" ]
  %7385 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.19.5.us, <32 x i32> %convolved1816.sroa.0.5.us)
  %7386 = add nsw i32 %"convolved.s1.r19$x1776.us", %7384
  %7387 = shl nsw i32 %7386, 7
  %7388 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %7387
  %7389 = bitcast i16* %7388 to <32 x i16>*
  %7390 = load <32 x i16>, <32 x i16>* %7389, align 128, !tbaa !105
  %7391 = sext <32 x i16> %7390 to <32 x i32>
  %7392 = mul nsw i32 %"convolved.s1.r19$x1776.us", %a553
  %7393 = add nsw i32 %t2483.us, %7392
  %7394 = shl nsw i32 %7393, 7
  %7395 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7394
  %7396 = bitcast i8* %7395 to <32 x i8>*
  %7397 = load <32 x i8>, <32 x i8>* %7396, align 128, !tbaa !129
  %7398 = zext <32 x i8> %7397 to <32 x i32>
  %7399 = getelementptr inbounds i16, i16* %7388, i32 32
  %7400 = bitcast i16* %7399 to <32 x i16>*
  %7401 = load <32 x i16>, <32 x i16>* %7400, align 64, !tbaa !105
  %7402 = sext <32 x i16> %7401 to <32 x i32>
  %7403 = getelementptr inbounds i8, i8* %7395, i32 32
  %7404 = bitcast i8* %7403 to <32 x i8>*
  %7405 = load <32 x i8>, <32 x i8>* %7404, align 32, !tbaa !129
  %7406 = zext <32 x i8> %7405 to <32 x i32>
  %7407 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7398, <32 x i32> %7391) #11
  %7408 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7407, <32 x i32> %7398, <32 x i32> %7391) #11
  %7409 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7406, <32 x i32> %7402) #11
  %7410 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7409, <32 x i32> %7406, <32 x i32> %7402) #11
  %7411 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7408, <32 x i32> %7410) #11
  %7412 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7411, <64 x i32> %7385) #11
  %7413 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7412)
  %7414 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7412)
  %7415 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.57.5.us, <32 x i32> %convolved1816.sroa.38.5.us)
  %7416 = getelementptr inbounds i16, i16* %7388, i32 64
  %7417 = bitcast i16* %7416 to <32 x i16>*
  %7418 = load <32 x i16>, <32 x i16>* %7417, align 128, !tbaa !105
  %7419 = sext <32 x i16> %7418 to <32 x i32>
  %7420 = getelementptr inbounds i8, i8* %7395, i32 64
  %7421 = bitcast i8* %7420 to <32 x i8>*
  %7422 = load <32 x i8>, <32 x i8>* %7421, align 64, !tbaa !129
  %7423 = zext <32 x i8> %7422 to <32 x i32>
  %7424 = getelementptr inbounds i16, i16* %7388, i32 96
  %7425 = bitcast i16* %7424 to <32 x i16>*
  %7426 = load <32 x i16>, <32 x i16>* %7425, align 64, !tbaa !105
  %7427 = sext <32 x i16> %7426 to <32 x i32>
  %7428 = getelementptr inbounds i8, i8* %7395, i32 96
  %7429 = bitcast i8* %7428 to <32 x i8>*
  %7430 = load <32 x i8>, <32 x i8>* %7429, align 32, !tbaa !129
  %7431 = zext <32 x i8> %7430 to <32 x i32>
  %7432 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7423, <32 x i32> %7419) #11
  %7433 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7432, <32 x i32> %7423, <32 x i32> %7419) #11
  %7434 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7431, <32 x i32> %7427) #11
  %7435 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7434, <32 x i32> %7431, <32 x i32> %7427) #11
  %7436 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7433, <32 x i32> %7435) #11
  %7437 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7436, <64 x i32> %7415) #11
  %7438 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7437)
  %7439 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7437)
  %7440 = or i32 %"convolved.s1.r19$x1776.us", 1
  %7441 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7414, <32 x i32> %7413)
  %7442 = add nsw i32 %7440, %7384
  %7443 = shl nsw i32 %7442, 7
  %7444 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %7443
  %7445 = bitcast i16* %7444 to <32 x i16>*
  %7446 = load <32 x i16>, <32 x i16>* %7445, align 128, !tbaa !105
  %7447 = sext <32 x i16> %7446 to <32 x i32>
  %7448 = mul nsw i32 %7440, %a553
  %7449 = add nsw i32 %t2483.us, %7448
  %7450 = shl nsw i32 %7449, 7
  %7451 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7450
  %7452 = bitcast i8* %7451 to <32 x i8>*
  %7453 = load <32 x i8>, <32 x i8>* %7452, align 128, !tbaa !129
  %7454 = zext <32 x i8> %7453 to <32 x i32>
  %7455 = getelementptr inbounds i16, i16* %7444, i32 32
  %7456 = bitcast i16* %7455 to <32 x i16>*
  %7457 = load <32 x i16>, <32 x i16>* %7456, align 64, !tbaa !105
  %7458 = sext <32 x i16> %7457 to <32 x i32>
  %7459 = getelementptr inbounds i8, i8* %7451, i32 32
  %7460 = bitcast i8* %7459 to <32 x i8>*
  %7461 = load <32 x i8>, <32 x i8>* %7460, align 32, !tbaa !129
  %7462 = zext <32 x i8> %7461 to <32 x i32>
  %7463 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7454, <32 x i32> %7447) #11
  %7464 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7463, <32 x i32> %7454, <32 x i32> %7447) #11
  %7465 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7462, <32 x i32> %7458) #11
  %7466 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7465, <32 x i32> %7462, <32 x i32> %7458) #11
  %7467 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7464, <32 x i32> %7466) #11
  %7468 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7467, <64 x i32> %7441) #11
  %7469 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7468)
  %7470 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7468)
  %7471 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7439, <32 x i32> %7438)
  %7472 = getelementptr inbounds i16, i16* %7444, i32 64
  %7473 = bitcast i16* %7472 to <32 x i16>*
  %7474 = load <32 x i16>, <32 x i16>* %7473, align 128, !tbaa !105
  %7475 = sext <32 x i16> %7474 to <32 x i32>
  %7476 = getelementptr inbounds i8, i8* %7451, i32 64
  %7477 = bitcast i8* %7476 to <32 x i8>*
  %7478 = load <32 x i8>, <32 x i8>* %7477, align 64, !tbaa !129
  %7479 = zext <32 x i8> %7478 to <32 x i32>
  %7480 = getelementptr inbounds i16, i16* %7444, i32 96
  %7481 = bitcast i16* %7480 to <32 x i16>*
  %7482 = load <32 x i16>, <32 x i16>* %7481, align 64, !tbaa !105
  %7483 = sext <32 x i16> %7482 to <32 x i32>
  %7484 = getelementptr inbounds i8, i8* %7451, i32 96
  %7485 = bitcast i8* %7484 to <32 x i8>*
  %7486 = load <32 x i8>, <32 x i8>* %7485, align 32, !tbaa !129
  %7487 = zext <32 x i8> %7486 to <32 x i32>
  %7488 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7479, <32 x i32> %7475) #11
  %7489 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7488, <32 x i32> %7479, <32 x i32> %7475) #11
  %7490 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7487, <32 x i32> %7483) #11
  %7491 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7490, <32 x i32> %7487, <32 x i32> %7483) #11
  %7492 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7489, <32 x i32> %7491) #11
  %7493 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7492, <64 x i32> %7471) #11
  %7494 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7493)
  %7495 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7493)
  %7496 = add nuw nsw i32 %"convolved.s1.r19$x1776.us", 2
  %niter2513.nsub.1 = add i32 %niter2513, -2
  %niter2513.ncmp.1 = icmp eq i32 %niter2513.nsub.1, 0
  br i1 %niter2513.ncmp.1, label %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x1774.us"

"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x1774.us", %"for convolved.s1.r19$y1771.us"
  %.lcssa2487.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y1771.us" ], [ %7469, %"for convolved.s1.r19$x1774.us" ]
  %.lcssa2486.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y1771.us" ], [ %7470, %"for convolved.s1.r19$x1774.us" ]
  %.lcssa2485.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y1771.us" ], [ %7494, %"for convolved.s1.r19$x1774.us" ]
  %.lcssa2484.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y1771.us" ], [ %7495, %"for convolved.s1.r19$x1774.us" ]
  %convolved1816.sroa.57.5.us.unr = phi <32 x i32> [ %convolved1816.sroa.57.4.us, %"for convolved.s1.r19$y1771.us" ], [ %7495, %"for convolved.s1.r19$x1774.us" ]
  %convolved1816.sroa.38.5.us.unr = phi <32 x i32> [ %convolved1816.sroa.38.4.us, %"for convolved.s1.r19$y1771.us" ], [ %7494, %"for convolved.s1.r19$x1774.us" ]
  %convolved1816.sroa.19.5.us.unr = phi <32 x i32> [ %convolved1816.sroa.19.4.us, %"for convolved.s1.r19$y1771.us" ], [ %7470, %"for convolved.s1.r19$x1774.us" ]
  %convolved1816.sroa.0.5.us.unr = phi <32 x i32> [ %convolved1816.sroa.0.4.us, %"for convolved.s1.r19$y1771.us" ], [ %7469, %"for convolved.s1.r19$x1774.us" ]
  %"convolved.s1.r19$x1776.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y1771.us" ], [ %7496, %"for convolved.s1.r19$x1774.us" ]
  br i1 %lcmp.mod2511.not, label %"end for convolved.s1.r19$x1775.loopexit.us", label %"for convolved.s1.r19$x1774.us.epil"

"for convolved.s1.r19$x1774.us.epil":             ; preds = %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa"
  %7497 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.19.5.us.unr, <32 x i32> %convolved1816.sroa.0.5.us.unr)
  %7498 = add nsw i32 %"convolved.s1.r19$x1776.us.unr", %7384
  %7499 = shl nsw i32 %7498, 7
  %7500 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %7499
  %7501 = bitcast i16* %7500 to <32 x i16>*
  %7502 = load <32 x i16>, <32 x i16>* %7501, align 128, !tbaa !105
  %7503 = sext <32 x i16> %7502 to <32 x i32>
  %7504 = mul nsw i32 %"convolved.s1.r19$x1776.us.unr", %a553
  %7505 = add nsw i32 %t2483.us, %7504
  %7506 = shl nsw i32 %7505, 7
  %7507 = getelementptr inbounds i8, i8* %resampled_input207, i32 %7506
  %7508 = bitcast i8* %7507 to <32 x i8>*
  %7509 = load <32 x i8>, <32 x i8>* %7508, align 128, !tbaa !129
  %7510 = zext <32 x i8> %7509 to <32 x i32>
  %7511 = getelementptr inbounds i16, i16* %7500, i32 32
  %7512 = bitcast i16* %7511 to <32 x i16>*
  %7513 = load <32 x i16>, <32 x i16>* %7512, align 64, !tbaa !105
  %7514 = sext <32 x i16> %7513 to <32 x i32>
  %7515 = getelementptr inbounds i8, i8* %7507, i32 32
  %7516 = bitcast i8* %7515 to <32 x i8>*
  %7517 = load <32 x i8>, <32 x i8>* %7516, align 32, !tbaa !129
  %7518 = zext <32 x i8> %7517 to <32 x i32>
  %7519 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7510, <32 x i32> %7503) #11
  %7520 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7519, <32 x i32> %7510, <32 x i32> %7503) #11
  %7521 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7518, <32 x i32> %7514) #11
  %7522 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7521, <32 x i32> %7518, <32 x i32> %7514) #11
  %7523 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7520, <32 x i32> %7522) #11
  %7524 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7523, <64 x i32> %7497) #11
  %7525 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.57.5.us.unr, <32 x i32> %convolved1816.sroa.38.5.us.unr)
  %7526 = getelementptr inbounds i16, i16* %7500, i32 64
  %7527 = bitcast i16* %7526 to <32 x i16>*
  %7528 = load <32 x i16>, <32 x i16>* %7527, align 128, !tbaa !105
  %7529 = sext <32 x i16> %7528 to <32 x i32>
  %7530 = getelementptr inbounds i8, i8* %7507, i32 64
  %7531 = bitcast i8* %7530 to <32 x i8>*
  %7532 = load <32 x i8>, <32 x i8>* %7531, align 64, !tbaa !129
  %7533 = zext <32 x i8> %7532 to <32 x i32>
  %7534 = getelementptr inbounds i16, i16* %7500, i32 96
  %7535 = bitcast i16* %7534 to <32 x i16>*
  %7536 = load <32 x i16>, <32 x i16>* %7535, align 64, !tbaa !105
  %7537 = sext <32 x i16> %7536 to <32 x i32>
  %7538 = getelementptr inbounds i8, i8* %7507, i32 96
  %7539 = bitcast i8* %7538 to <32 x i8>*
  %7540 = load <32 x i8>, <32 x i8>* %7539, align 32, !tbaa !129
  %7541 = zext <32 x i8> %7540 to <32 x i32>
  %7542 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7533, <32 x i32> %7529) #11
  %7543 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7542, <32 x i32> %7533, <32 x i32> %7529) #11
  %7544 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %7541, <32 x i32> %7537) #11
  %7545 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7544, <32 x i32> %7541, <32 x i32> %7537) #11
  %7546 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7543, <32 x i32> %7545) #11
  %7547 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %7546, <64 x i32> %7525) #11
  %7548 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7547)
  %7549 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7547)
  %7550 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7524)
  %7551 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7524)
  br label %"end for convolved.s1.r19$x1775.loopexit.us"

"end for convolved.s1.r19$x1775.loopexit.us":     ; preds = %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x1774.us.epil"
  %.lcssa2487 = phi <32 x i32> [ %.lcssa2487.ph, %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa" ], [ %7551, %"for convolved.s1.r19$x1774.us.epil" ]
  %.lcssa2486 = phi <32 x i32> [ %.lcssa2486.ph, %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa" ], [ %7550, %"for convolved.s1.r19$x1774.us.epil" ]
  %.lcssa2485 = phi <32 x i32> [ %.lcssa2485.ph, %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa" ], [ %7549, %"for convolved.s1.r19$x1774.us.epil" ]
  %.lcssa2484 = phi <32 x i32> [ %.lcssa2484.ph, %"end for convolved.s1.r19$x1775.loopexit.us.unr-lcssa" ], [ %7548, %"for convolved.s1.r19$x1774.us.epil" ]
  %7552 = add nuw nsw i32 %"convolved.s1.r19$y1773.us", 1
  %.not1822.us = icmp eq i32 %7552, %6
  br i1 %.not1822.us, label %"consume convolved1777", label %"for convolved.s1.r19$y1771.us"

"consume convolved1777":                          ; preds = %"end for convolved.s1.r19$x1775.loopexit.us", %next_bb1770, %"for convolved.s1.r19$y1771.preheader", %then_bb1769
  %.pre-phi2360 = phi i32 [ %7025, %then_bb1769 ], [ %7378, %"for convolved.s1.r19$y1771.preheader" ], [ %7378, %next_bb1770 ], [ %7378, %"end for convolved.s1.r19$x1775.loopexit.us" ]
  %convolved1816.sroa.57.7 = phi <32 x i32> [ %7377, %then_bb1769 ], [ %7009, %"for convolved.s1.r19$y1771.preheader" ], [ %7009, %next_bb1770 ], [ %.lcssa2484, %"end for convolved.s1.r19$x1775.loopexit.us" ]
  %convolved1816.sroa.38.7 = phi <32 x i32> [ %7376, %then_bb1769 ], [ %7008, %"for convolved.s1.r19$y1771.preheader" ], [ %7008, %next_bb1770 ], [ %.lcssa2485, %"end for convolved.s1.r19$x1775.loopexit.us" ]
  %convolved1816.sroa.19.7 = phi <32 x i32> [ %7212, %then_bb1769 ], [ %7007, %"for convolved.s1.r19$y1771.preheader" ], [ %7007, %next_bb1770 ], [ %.lcssa2486, %"end for convolved.s1.r19$x1775.loopexit.us" ]
  %convolved1816.sroa.0.7 = phi <32 x i32> [ %7211, %then_bb1769 ], [ %7006, %"for convolved.s1.r19$y1771.preheader" ], [ %7006, %next_bb1770 ], [ %.lcssa2487, %"end for convolved.s1.r19$x1775.loopexit.us" ]
  %7553 = sext <32 x i32> %convolved1816.sroa.0.7 to <32 x i64>
  %a560 = mul nsw <32 x i64> %5615, %7553
  %7554 = icmp slt <32 x i64> %a560, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7555 = select <32 x i1> %7554, <32 x i64> %a560, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7556 = add nsw <32 x i64> %7555, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a559 = ashr <32 x i64> %7556, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %7557 = icmp slt <32 x i64> %a559, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a558 = select <32 x i1> %7557, <32 x i64> %a559, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7558 = icmp sgt <32 x i64> %a558, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7559 = select <32 x i1> %7558, <32 x i64> %a558, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7560 = trunc <32 x i64> %7559 to <32 x i32>
  %7561 = sext <32 x i32> %convolved1816.sroa.19.7 to <32 x i64>
  %a563 = mul nsw <32 x i64> %5615, %7561
  %7562 = icmp slt <32 x i64> %a563, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7563 = select <32 x i1> %7562, <32 x i64> %a563, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7564 = add nsw <32 x i64> %7563, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a562 = ashr <32 x i64> %7564, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %7565 = icmp slt <32 x i64> %a562, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a561 = select <32 x i1> %7565, <32 x i64> %a562, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7566 = icmp sgt <32 x i64> %a561, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7567 = select <32 x i1> %7566, <32 x i64> %a561, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7568 = trunc <32 x i64> %7567 to <32 x i32>
  %7569 = sext <32 x i32> %convolved1816.sroa.38.7 to <32 x i64>
  %a566 = mul nsw <32 x i64> %5615, %7569
  %7570 = icmp slt <32 x i64> %a566, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7571 = select <32 x i1> %7570, <32 x i64> %a566, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7572 = add nsw <32 x i64> %7571, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a565 = ashr <32 x i64> %7572, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %7573 = icmp slt <32 x i64> %a565, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a564 = select <32 x i1> %7573, <32 x i64> %a565, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7574 = icmp sgt <32 x i64> %a564, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7575 = select <32 x i1> %7574, <32 x i64> %a564, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7576 = trunc <32 x i64> %7575 to <32 x i32>
  %7577 = sext <32 x i32> %convolved1816.sroa.57.7 to <32 x i64>
  %a569 = mul nsw <32 x i64> %5615, %7577
  %7578 = icmp slt <32 x i64> %a569, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7579 = select <32 x i1> %7578, <32 x i64> %a569, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %7580 = add nsw <32 x i64> %7579, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a568 = ashr <32 x i64> %7580, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %7581 = icmp slt <32 x i64> %a568, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a567 = select <32 x i1> %7581, <32 x i64> %a568, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7582 = icmp sgt <32 x i64> %a567, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7583 = select <32 x i1> %7582, <32 x i64> %a567, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7584 = trunc <32 x i64> %7583 to <32 x i32>
  %7585 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %7560, <32 x i32> %7017) #11
  %7586 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %7585, <32 x i32> %7016) #11
  %7587 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7586) #11
  %7588 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %7568, <32 x i32> %7017) #11
  %7589 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %7588, <32 x i32> %7016) #11
  %7590 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %7589, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %7591 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7587, <32 x i32> %7590) #11
  %7592 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7591) #11
  %7593 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %7592) #11
  %7594 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7591) #11
  %7595 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %7594) #11
  %7596 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7593, <32 x i32> %7595) #11
  %7597 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7596) #11
  %7598 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7596) #11
  %7599 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %7597, <32 x i32> %7598) #11
  %7600 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %5621, <32 x i32> %7599) #11
  %7601 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %7600, <32 x i32> %7018) #11
  %7602 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %5125, <32 x i32> %7601) #11
  %7603 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %7576, <32 x i32> %7017) #11
  %7604 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %7603, <32 x i32> %7016) #11
  %7605 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7604) #11
  %7606 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %7584, <32 x i32> %7017) #11
  %7607 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %7606, <32 x i32> %7016) #11
  %7608 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %7607, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %7609 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7605, <32 x i32> %7608) #11
  %7610 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7609) #11
  %7611 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %7610) #11
  %7612 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7609) #11
  %7613 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %7612) #11
  %7614 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7611, <32 x i32> %7613) #11
  %7615 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %7614) #11
  %7616 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %7614) #11
  %7617 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %7615, <32 x i32> %7616) #11
  %7618 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %5621, <32 x i32> %7617) #11
  %7619 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %7019, <32 x i32> %7618) #11
  %7620 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %5128, <32 x i32> %7619) #11
  %7621 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7602, <32 x i32> %7620) #11
  %7622 = bitcast <64 x i32> %7621 to <32 x i64>
  %7623 = shufflevector <32 x i64> %7622, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7624 = bitcast <8 x i64> %7623 to <32 x i16>
  %7625 = trunc <32 x i16> %7624 to <32 x i8>
  %7626 = shufflevector <32 x i8> %7625, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7627 = bitcast <128 x i8> %7626 to <32 x i32>
  %7628 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %7627, <32 x i32> %5624) #11
  %7629 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %7628, <32 x i32> %5627) #11
  %7630 = bitcast <32 x i32> %7629 to <128 x i8>
  %7631 = shufflevector <128 x i8> %7630, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7632 = mul nsw i32 %.pre-phi2360, %21
  %t2473 = add i32 %7020, %7632
  %7633 = sub i32 %t2473, %reass.add2123
  %7634 = getelementptr inbounds i8, i8* %17, i32 %7633
  %7635 = bitcast i8* %7634 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %7631, <32 x i8>* %7635, i32 1, <32 x i1> %5612), !tbaa !217
  %7636 = shufflevector <32 x i64> %7622, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7637 = bitcast <8 x i64> %7636 to <32 x i16>
  %7638 = trunc <32 x i16> %7637 to <32 x i8>
  %7639 = shufflevector <32 x i8> %7638, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7640 = bitcast <128 x i8> %7639 to <32 x i32>
  %7641 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %7640, <32 x i32> %5624) #11
  %7642 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %7641, <32 x i32> %5627) #11
  %7643 = bitcast <32 x i32> %7642 to <128 x i8>
  %7644 = shufflevector <128 x i8> %7643, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7645 = getelementptr inbounds i8, i8* %7634, i32 32
  %7646 = bitcast i8* %7645 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %7644, <32 x i8>* nonnull %7646, i32 1, <32 x i1> %5628), !tbaa !217
  %7647 = shufflevector <32 x i64> %7622, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7648 = bitcast <8 x i64> %7647 to <32 x i16>
  %7649 = trunc <32 x i16> %7648 to <32 x i8>
  %7650 = shufflevector <32 x i8> %7649, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7651 = bitcast <128 x i8> %7650 to <32 x i32>
  %7652 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %7651, <32 x i32> %5624) #11
  %7653 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %7652, <32 x i32> %5627) #11
  %7654 = bitcast <32 x i32> %7653 to <128 x i8>
  %7655 = shufflevector <128 x i8> %7654, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7656 = getelementptr inbounds i8, i8* %7634, i32 64
  %7657 = bitcast i8* %7656 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %7655, <32 x i8>* nonnull %7657, i32 1, <32 x i1> %5629), !tbaa !217
  %7658 = shufflevector <32 x i64> %7622, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7659 = bitcast <8 x i64> %7658 to <32 x i16>
  %7660 = trunc <32 x i16> %7659 to <32 x i8>
  %7661 = shufflevector <32 x i8> %7660, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7662 = bitcast <128 x i8> %7661 to <32 x i32>
  %7663 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %7662, <32 x i32> %5624) #11
  %7664 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %7663, <32 x i32> %5627) #11
  %7665 = bitcast <32 x i32> %7664 to <128 x i8>
  %7666 = shufflevector <128 x i8> %7665, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7667 = getelementptr inbounds i8, i8* %7634, i32 96
  %7668 = bitcast i8* %7667 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %7666, <32 x i8>* nonnull %7668, i32 1, <32 x i1> %5630), !tbaa !217
  %7669 = add nuw nsw i32 %output.s0.x.xo1766, 1
  %.not1821 = icmp eq i32 %7669, %20
  br i1 %.not1821, label %"end for output.s0.x.xo1765", label %"for output.s0.x.xo1764"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i32 12
  %44 = load i8*, i8** %43, align 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i32 13
  %47 = load i8*, i8** %46, align 4
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i32 14
  %50 = load i8*, i8** %49, align 4
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i32 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 4
  %55 = tail call i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i16.p0v64i16(<64 x i16>, <64 x i16>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i32.p0v32i32(<32 x i32>, <32 x i32>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8 @llvm.vector.reduce.umax.v128i8(<128 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v128i8.p0v128i8(<128 x i8>, <128 x i8>*, i32 immarg, <128 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i8.p0v64i8(<64 x i8>, <64 x i8>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i8.p0v32i8(<32 x i8>, <32 x i8>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.0(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.1(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.2(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.3(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.4(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.5(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.6(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.7(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.8(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.9(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.10(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.11(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.12(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.13(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.14(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.15(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.16(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.17(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.18(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.19(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.20(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.21(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.22(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.23(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.24(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.25(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.26(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.27(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.28(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.29(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.30(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.31(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.32(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.33(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.34(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.35(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.36(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.37(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.38(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.39(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.40(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.41(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.42(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.43(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.44(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.45(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.46(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.47(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.48(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.49(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.50(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.51(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.52(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.53(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.54(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.55(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.56(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.57(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.58(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.59(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.60(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.61(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.62(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.63(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.64(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.65(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.66(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.67(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.68(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.69(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.70(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.71(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.72(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.73(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.74(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.75(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.76(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.77(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.78(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.79(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.80(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.1, <32 x i32> %arg)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %7, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %10, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %11, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %15, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %17, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %19, <64 x i32> %arg.32)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %21, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %23, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %28, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %29, <32 x i32> %31)
  %33 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %27, <64 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %34, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %33, <64 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %41, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %43, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %45 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %42, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %40, <64 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %47, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %49, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %48, <32 x i32> %50)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.81(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.82(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.83(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.84(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.85(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.86(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!96, !11, i64 0}
!96 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !15, i64 4, !15, i64 8}
!97 = !{!96, !15, i64 8}
!98 = !{!96, !15, i64 4}
!99 = !{!"branch_weights", i32 1, i32 2000}
!100 = !{!"branch_weights", i32 0, i32 1073741824}
!101 = !{!"branch_weights", i32 1073741824, i32 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"filter", !104, i64 0}
!104 = !{!"Halide buffer"}
!105 = !{!106, !106, i64 0}
!106 = !{!"filter_zeroed", !104, i64 0}
!107 = distinct !{!107, !32}
!108 = distinct !{!108, !32}
!109 = !{!110, !110, i64 0}
!110 = !{!"bias", !104, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"offset_c.width32.base0", !113, i64 0}
!113 = !{!"offset_c.width64.base0", !114, i64 0}
!114 = !{!"offset_c.width128.base0", !115, i64 0}
!115 = !{!"offset_c.width256.base0", !116, i64 0}
!116 = !{!"offset_c.width512.base0", !117, i64 0}
!117 = !{!"offset_c.width1024.base0", !118, i64 0}
!118 = !{!"offset_c", !104, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"offset_c.width32.base32", !113, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"offset_c.width32.base64", !123, i64 0}
!123 = !{!"offset_c.width64.base64", !114, i64 0}
!124 = !{!125, !125, i64 0}
!125 = !{!"offset_c.width32.base96", !123, i64 0}
!126 = !{!"branch_weights", i32 0, i32 -2147483648}
!127 = !{!128, !128, i64 0}
!128 = !{!"input", !104, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"resampled_input", !104, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"convolved.width32.base0", !133, i64 0}
!133 = !{!"convolved.width64.base0", !134, i64 0}
!134 = !{!"convolved.width128.base0", !135, i64 0}
!135 = !{!"convolved.width256.base0", !136, i64 0}
!136 = !{!"convolved.width512.base0", !137, i64 0}
!137 = !{!"convolved.width1024.base0", !138, i64 0}
!138 = !{!"convolved", !104, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"convolved.width32.base32", !133, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"convolved.width32.base64", !143, i64 0}
!143 = !{!"convolved.width64.base64", !134, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"convolved.width32.base96", !143, i64 0}
!146 = !{!147, !147, i64 0}
!147 = !{!"convolved.width32.base128", !148, i64 0}
!148 = !{!"convolved.width64.base128", !149, i64 0}
!149 = !{!"convolved.width128.base128", !135, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"convolved.width32.base160", !148, i64 0}
!152 = !{!153, !153, i64 0}
!153 = !{!"convolved.width32.base192", !154, i64 0}
!154 = !{!"convolved.width64.base192", !149, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"convolved.width32.base224", !154, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"convolved.width32.base256", !159, i64 0}
!159 = !{!"convolved.width64.base256", !160, i64 0}
!160 = !{!"convolved.width128.base256", !161, i64 0}
!161 = !{!"convolved.width256.base256", !136, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"convolved.width32.base288", !159, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"convolved.width32.base320", !166, i64 0}
!166 = !{!"convolved.width64.base320", !160, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"convolved.width32.base352", !166, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"convolved.width32.base384", !171, i64 0}
!171 = !{!"convolved.width64.base384", !172, i64 0}
!172 = !{!"convolved.width128.base384", !161, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"convolved.width32.base416", !171, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"convolved.width32.base448", !177, i64 0}
!177 = !{!"convolved.width64.base448", !172, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"convolved.width32.base480", !177, i64 0}
!180 = !{!181, !181, i64 0}
!181 = !{!"filter_zeroed.width32.base256", !182, i64 0}
!182 = !{!"filter_zeroed.width64.base256", !183, i64 0}
!183 = !{!"filter_zeroed.width128.base256", !184, i64 0}
!184 = !{!"filter_zeroed.width256.base256", !185, i64 0}
!185 = !{!"filter_zeroed.width512.base0", !186, i64 0}
!186 = !{!"filter_zeroed.width1024.base0", !106, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"filter_zeroed.width32.base288", !182, i64 0}
!189 = !{!190, !190, i64 0}
!190 = !{!"filter_zeroed.width32.base128", !191, i64 0}
!191 = !{!"filter_zeroed.width64.base128", !192, i64 0}
!192 = !{!"filter_zeroed.width128.base128", !193, i64 0}
!193 = !{!"filter_zeroed.width256.base0", !185, i64 0}
!194 = !{!195, !195, i64 0}
!195 = !{!"filter_zeroed.width32.base160", !191, i64 0}
!196 = !{!197, !197, i64 0}
!197 = !{!"filter_zeroed.width32.base0", !198, i64 0}
!198 = !{!"filter_zeroed.width64.base0", !199, i64 0}
!199 = !{!"filter_zeroed.width128.base0", !193, i64 0}
!200 = !{!201, !201, i64 0}
!201 = !{!"filter_zeroed.width32.base32", !198, i64 0}
!202 = !{!203, !203, i64 0}
!203 = !{!"filter_zeroed.width32.base320", !204, i64 0}
!204 = !{!"filter_zeroed.width64.base320", !183, i64 0}
!205 = !{!206, !206, i64 0}
!206 = !{!"filter_zeroed.width32.base352", !204, i64 0}
!207 = !{!208, !208, i64 0}
!208 = !{!"filter_zeroed.width32.base192", !209, i64 0}
!209 = !{!"filter_zeroed.width64.base192", !192, i64 0}
!210 = !{!211, !211, i64 0}
!211 = !{!"filter_zeroed.width32.base224", !209, i64 0}
!212 = !{!213, !213, i64 0}
!213 = !{!"filter_zeroed.width32.base64", !214, i64 0}
!214 = !{!"filter_zeroed.width64.base64", !199, i64 0}
!215 = !{!216, !216, i64 0}
!216 = !{!"filter_zeroed.width32.base96", !214, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"output", !104, i64 0}
!219 = distinct !{!219, !32}
!220 = distinct !{!220, !32}
!221 = distinct !{!221, !32}
!222 = distinct !{!222, !32}
!223 = distinct !{!223, !32}
!224 = !{!"branch_weights", i32 -2147483648, i32 0}
!225 = distinct !{!225, !32}
!226 = !{!227, !227, i64 0}
!227 = !{!"bias.width32.base0", !228, i64 0}
!228 = !{!"bias.width64.base0", !229, i64 0}
!229 = !{!"bias.width128.base0", !230, i64 0}
!230 = !{!"bias.width256.base0", !231, i64 0}
!231 = !{!"bias.width512.base0", !232, i64 0}
!232 = !{!"bias.width1024.base0", !110, i64 0}
!233 = !{!234, !234, i64 0}
!234 = !{!"bias.width32.base32", !228, i64 0}
!235 = !{!236, !236, i64 0}
!236 = !{!"bias.width32.base64", !237, i64 0}
!237 = !{!"bias.width64.base64", !229, i64 0}
!238 = !{!239, !239, i64 0}
!239 = !{!"bias.width32.base96", !237, i64 0}
