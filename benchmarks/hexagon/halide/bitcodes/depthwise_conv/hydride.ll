; ModuleID = 'depthwise_conv_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i32, i32 }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.107 = private constant [9 x i8] c"stride_x\00", align 32
@str.108 = private constant [9 x i8] c"stride_y\00", align 32
@str.109 = private constant [11 x i8] c"dilation_x\00", align 32
@str.110 = private constant [11 x i8] c"dilation_y\00", align 32
@str.111 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.112 = private constant [13 x i8] c"output_shift\00", align 32
@str.113 = private constant [12 x i8] c"output_zero\00", align 32
@str.114 = private constant [11 x i8] c"output_min\00", align 32
@str.115 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.116 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.115, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.116, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.117 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.118 = private constant [22 x i8] c"depthwise_conv_hvx128\00", align 32
@depthwise_conv_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.117, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.118, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #15
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #16
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #16
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #16
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #16
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #16
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #16
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #16
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #16
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #16
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #16
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #16
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #16
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #16
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #15
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #15
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #15
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #16
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #16
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #16
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #15
  %call.i = call i8* @malloc(i32 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #15
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #15
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a553, i32 %a548, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c1815 = alloca [512 x i32], align 128
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep1778 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep1778, align 4
  %.fca.1.gep1779 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep1779, align 4
  %.fca.2.gep1780 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep1780, align 4
  %sum_filter1817 = alloca [128 x i32], align 128
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep, align 4
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep, align 4
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep, align 4
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !43
  %host.i1870 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %1 = load i8*, i8** %host.i1870, align 4, !tbaa !43
  %dim.i1871 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i1871, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !49
  %extent.i1879 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 1
  %4 = load i32, i32* %extent.i1879, align 4, !tbaa !49
  %stride.i1881 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 2
  %5 = load i32, i32* %stride.i1881, align 4, !tbaa !50
  %extent.i1885 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 1
  %6 = load i32, i32* %extent.i1885, align 4, !tbaa !49
  %stride.i1887 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 2
  %7 = load i32, i32* %stride.i1887, align 4, !tbaa !50
  %host.i1888 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %8 = load i8*, i8** %host.i1888, align 4, !tbaa !43
  %dim.i1889 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i1889, align 8, !tbaa !46
  %min.i1894 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 0
  %10 = load i32, i32* %min.i1894, align 4, !tbaa !47
  %stride.i1896 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 2
  %11 = load i32, i32* %stride.i1896, align 4, !tbaa !50
  %min.i1898 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 0
  %12 = load i32, i32* %min.i1898, align 4, !tbaa !47
  %stride.i1900 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 2
  %13 = load i32, i32* %stride.i1900, align 4, !tbaa !50
  %min.i1902 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 0
  %14 = load i32, i32* %min.i1902, align 4, !tbaa !47
  %extent.i1904 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 1
  %15 = load i32, i32* %extent.i1904, align 4, !tbaa !49
  %stride.i1906 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 2
  %16 = load i32, i32* %stride.i1906, align 4, !tbaa !50
  %host.i1907 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %17 = load i8*, i8** %host.i1907, align 4, !tbaa !43
  %dim.i1908 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %18 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i1908, align 8, !tbaa !46
  %min.i1915 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 0
  %19 = load i32, i32* %min.i1915, align 4, !tbaa !47
  %extent.i1917 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 1
  %20 = load i32, i32* %extent.i1917, align 4, !tbaa !49
  %stride.i1919 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 2
  %21 = load i32, i32* %stride.i1919, align 4, !tbaa !50
  %min.i1921 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 0
  %22 = load i32, i32* %min.i1921, align 4, !tbaa !47
  %extent.i1923 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 1
  %23 = load i32, i32* %extent.i1923, align 4, !tbaa !49
  %stride.i1925 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 2
  %24 = load i32, i32* %stride.i1925, align 4, !tbaa !50
  %stride.i1931 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 3, i32 2
  %25 = load i32, i32* %stride.i1931, align 4, !tbaa !50
  %26 = icmp sgt i32 %20, 7
  %27 = and i32 %20, 1
  %28 = icmp eq i32 %27, 0
  %29 = or i1 %26, %28
  %30 = icmp sgt i32 %23, 7
  %31 = and i32 %23, 1
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %30, %32
  %34 = and i1 %29, %33
  %35 = icmp sgt i32 %3, 127
  %36 = and i1 %35, %34
  br i1 %36, label %then_bb, label %next_bb

after_bb:                                         ; preds = %"end for output.s0.b.rebased58", %"end for output.s0.b.rebased"
  %.02096 = phi i8* [ %.2, %"end for output.s0.b.rebased" ], [ %.4, %"end for output.s0.b.rebased58" ]
  %.0 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %tobool.not.i.not = icmp eq i8* %.02096, null
  br i1 %tobool.not.i.not, label %if.then.i1933, label %if.then.i

if.then.i.loopexit:                               ; preds = %"end for output.s0.y.yo1762"
  %37 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i

if.then.i:                                        ; preds = %if.then.i.loopexit, %after_bb
  %.02108 = phi i8* [ %.0, %after_bb ], [ %4530, %if.then.i.loopexit ]
  %.020962107 = phi i8* [ %.02096, %after_bb ], [ %37, %if.then.i.loopexit ]
  %ptr1.i = bitcast i8* %.020962107 to i8**
  %38 = load i8*, i8** %ptr1.i, align 4, !tbaa !95
  %tobool.not.i2029 = icmp eq i8* %38, null
  br i1 %tobool.not.i2029, label %pseudostack_free.exit, label %land.lhs.true.i2032

land.lhs.true.i2032:                              ; preds = %if.then.i
  %cumulative_size.i2030 = getelementptr inbounds i8, i8* %.020962107, i32 8
  %39 = bitcast i8* %cumulative_size.i2030 to i32*
  %40 = load i32, i32* %39, align 4, !tbaa !97
  %cmp.i2031 = icmp ugt i32 %40, 16384
  br i1 %cmp.i2031, label %if.then.i2033, label %pseudostack_free.exit

if.then.i2033:                                    ; preds = %land.lhs.true.i2032
  call void @halide_free(i8* null, i8* nonnull %38) #15
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i, %land.lhs.true.i2032, %if.then.i2033
  store i8* null, i8** %ptr1.i, align 4, !tbaa !95
  %size.i2034 = getelementptr inbounds i8, i8* %.020962107, i32 4
  %41 = bitcast i8* %size.i2034 to i32*
  store i32 0, i32* %41, align 4, !tbaa !98
  %cumulative_size4.i = getelementptr inbounds i8, i8* %.020962107, i32 8
  %42 = bitcast i8* %cumulative_size4.i to i32*
  store i32 0, i32* %42, align 4, !tbaa !97
  br label %if.then.i1933

if.then.i1933:                                    ; preds = %pseudostack_free.exit, %after_bb, %after_bb199
  %.021012111 = phi i8* [ %4530, %after_bb199 ], [ %.02108, %pseudostack_free.exit ], [ %.0, %after_bb ]
  %ptr1.i2036 = bitcast i8* %.021012111 to i8**
  %43 = load i8*, i8** %ptr1.i2036, align 4, !tbaa !95
  %tobool.not.i2037 = icmp eq i8* %43, null
  br i1 %tobool.not.i2037, label %pseudostack_free.exit2045, label %land.lhs.true.i2040

land.lhs.true.i2040:                              ; preds = %if.then.i1933
  %cumulative_size.i2038 = getelementptr inbounds i8, i8* %.021012111, i32 8
  %44 = bitcast i8* %cumulative_size.i2038 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !97
  %cmp.i2039 = icmp ugt i32 %45, 16384
  br i1 %cmp.i2039, label %if.then.i2041, label %pseudostack_free.exit2045

if.then.i2041:                                    ; preds = %land.lhs.true.i2040
  call void @halide_free(i8* null, i8* nonnull %43) #15
  br label %pseudostack_free.exit2045

pseudostack_free.exit2045:                        ; preds = %if.then.i1933, %land.lhs.true.i2040, %if.then.i2041
  store i8* null, i8** %ptr1.i2036, align 4, !tbaa !95
  %size.i2042 = getelementptr inbounds i8, i8* %.021012111, i32 4
  %46 = bitcast i8* %size.i2042 to i32*
  store i32 0, i32* %46, align 4, !tbaa !98
  %cumulative_size4.i2043 = getelementptr inbounds i8, i8* %.021012111, i32 8
  %47 = bitcast i8* %cumulative_size4.i2043 to i32*
  store i32 0, i32* %47, align 4, !tbaa !97
  br label %call_destructor.exit1937

call_destructor.exit1937:                         ; preds = %next_bb29, %pseudostack_free.exit2045
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #15
  ret i32 0

then_bb:                                          ; preds = %entry
  %t2201 = icmp slt i32 %a553, 0
  %t2203 = icmp slt i32 %stride_x, 0
  %48 = add nsw i32 %4, -1
  %49 = mul nsw i32 %48, %a553
  %t2207 = select i1 %t2201, i32 %49, i32 0
  %50 = add nsw i32 %20, -1
  %51 = icmp slt i32 %20, 2
  %52 = select i1 %51, i32 %20, i32 2
  %53 = add nsw i32 %52, -2
  %t2208.s = select i1 %t2203, i32 %50, i32 %53
  %t2209 = icmp slt i32 %a548, 0
  %t2211 = icmp slt i32 %stride_y, 0
  %54 = add nsw i32 %6, -1
  %55 = mul nsw i32 %54, %a548
  %t2215 = select i1 %t2209, i32 %55, i32 0
  %56 = add nsw i32 %23, -1
  %57 = icmp slt i32 %23, 2
  %58 = select i1 %57, i32 %23, i32 2
  %59 = add nsw i32 %58, -2
  %t2216.s = select i1 %t2211, i32 %56, i32 %59
  %60 = icmp eq i32 %4, 3
  %61 = icmp eq i32 %6, 3
  %t2217 = and i1 %60, %61
  %t2194 = icmp eq i32 %depth_multiplier, 1
  %a548.op1850 = shl i32 %a548, 1
  %62 = select i1 %t2209, i32 %a548.op1850, i32 0
  %63 = select i1 %t2217, i32 %62, i32 %t2215
  %64 = add nsw i32 %t2216.s, %22
  %65 = mul nsw i32 %64, %stride_y
  %b16 = add nsw i32 %65, %63
  %a553.op1851 = shl i32 %a553, 1
  %66 = select i1 %t2201, i32 %a553.op1851, i32 0
  %67 = select i1 %t2217, i32 %66, i32 %t2207
  %68 = add nsw i32 %t2208.s, %19
  %69 = mul nsw i32 %68, %stride_x
  %b15 = add nsw i32 %69, %67
  %70 = select i1 %t2209, i32 0, i32 %55
  %71 = select i1 %t2211, i32 %59, i32 %56
  %72 = add nsw i32 %71, %22
  %73 = mul nsw i32 %72, %stride_y
  %b23 = add nsw i32 %73, %70
  %74 = select i1 %t2201, i32 0, i32 %49
  %75 = select i1 %t2203, i32 %53, i32 %50
  %76 = add nsw i32 %75, %19
  %77 = mul nsw i32 %76, %stride_x
  %b17 = add nsw i32 %77, %74
  %78 = mul nsw i32 %13, %12
  %79 = mul nsw i32 %16, %14
  %80 = mul nsw i32 %11, %10
  %81 = add i32 %78, %80
  %t2195 = add i32 %81, %79
  %82 = add nuw nsw i32 %3, 127
  %83 = ashr i32 %82, 7
  %b10 = add nsw i32 %3, -128
  %84 = icmp sgt i32 %4, 0
  %85 = icmp sgt i32 %6, 0
  %86 = select i1 %85, i32 %6, i32 0
  %.op2639 = shl i32 %4, 8
  %87 = select i1 %84, i32 %.op2639, i32 0
  %88 = mul i32 %87, %86
  %89 = or i32 %88, 134
  %90 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %91 = zext i8 %filter_zero to i16
  %92 = insertelement <64 x i16> undef, i16 %91, i32 0
  %93 = shufflevector <64 x i16> %92, <64 x i16> undef, <64 x i32> zeroinitializer
  %94 = bitcast <64 x i16> %93 to <32 x i32>
  %95 = bitcast i8* %0 to i32*
  %96 = zext i8 %input_zero to i32
  %97 = insertelement <32 x i32> undef, i32 %96, i32 0
  %98 = shufflevector <32 x i32> %97, <32 x i32> undef, <32 x i32> zeroinitializer
  %99 = bitcast [128 x i32]* %sum_filter1817 to <32 x i32>*
  %100 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 32
  %101 = bitcast i32* %100 to <32 x i32>*
  %102 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 64
  %103 = bitcast i32* %102 to <32 x i32>*
  %104 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 96
  %105 = bitcast i32* %104 to <32 x i32>*
  %a13 = add nsw i32 %69, %t2207
  %106 = icmp slt i32 %t2207, %67
  %t2225 = select i1 %106, i32 %a13, i32 %b15
  %a14 = add nsw i32 %65, %t2215
  %107 = icmp slt i32 %t2215, %63
  %t2223 = select i1 %107, i32 %a14, i32 %b16
  %108 = icmp sgt i32 %a553, 0
  %109 = select i1 %108, i32 %a553, i32 0
  %110 = shl nuw nsw i32 %109, 1
  %111 = select i1 %t2217, i32 %110, i32 %74
  %a15 = add nsw i32 %77, %111
  %112 = icmp sgt i32 %111, %74
  %113 = select i1 %112, i32 %a15, i32 %b17
  %a29 = sub nsw i32 %113, %t2225
  %114 = icmp sgt i32 %a548, 0
  %115 = select i1 %114, i32 %a548, i32 0
  %116 = shl nuw nsw i32 %115, 1
  %117 = select i1 %t2217, i32 %116, i32 %70
  %a21 = add nsw i32 %73, %117
  %118 = icmp sgt i32 %117, %70
  %119 = select i1 %118, i32 %a21, i32 %b23
  %a30 = sub nsw i32 %119, %t2223
  %t2228 = sub nsw i32 %b17, %a13
  %t2227 = sub nsw i32 %b23, %a14
  %120 = icmp sgt i32 %15, 0
  %121 = icmp sgt i32 %a29, -1
  %t2543 = select i1 %121, i32 %a29, i32 -1
  %122 = icmp sgt i32 %a30, -1
  %t2544 = select i1 %122, i32 %a30, i32 -1
  %123 = add nsw i32 %t2544, 1
  %124 = shl i32 %t2543, 7
  %t2545 = add i32 %124, 128
  %125 = mul i32 %t2545, %123
  %126 = add i32 %125, 131
  %127 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %128 = icmp sgt i32 %t2227, -1
  %129 = sub i32 %a14, %t2223
  %130 = add nsw i32 %a29, 1
  %131 = sub i32 %a13, %t2225
  %132 = icmp sgt i32 %t2228, -1
  %133 = icmp eq i32 %depth_multiplier, 0
  %134 = select i1 %133, <64 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <64 x i32> zeroinitializer
  %depth_multiplier.lobit1861 = ashr i32 %depth_multiplier, 31
  %135 = xor i32 %depth_multiplier.lobit1861, -1
  %136 = sub nsw i32 %135, %depth_multiplier.lobit1861
  %.neg2132 = mul i32 %24, %22
  %.neg2133 = mul i32 %21, %19
  %.neg2134 = mul i32 %25, %14
  %reass.add2136 = add i32 %.neg2132, %.neg2133
  %reass.add2137 = add i32 %reass.add2136, %.neg2134
  %137 = add nuw nsw i32 %23, 1
  %138 = ashr i32 %137, 1
  %139 = icmp sgt i32 %23, 0
  %b33 = add nsw i32 %23, -2
  %140 = sub nsw i32 %a548.op1850, %t2223
  %141 = sub nsw i32 %a548, %t2223
  %142 = add nuw nsw i32 %20, 1
  %143 = ashr i32 %142, 1
  %144 = icmp sgt i32 %20, 0
  %b34 = add nsw i32 %20, -2
  %145 = bitcast [512 x i32]* %offset_c1815 to <32 x i32>*
  %146 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 32
  %147 = bitcast i32* %146 to <32 x i32>*
  %148 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 64
  %149 = bitcast i32* %148 to <32 x i32>*
  %150 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 96
  %151 = bitcast i32* %150 to <32 x i32>*
  %152 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 128
  %153 = bitcast i32* %152 to <32 x i32>*
  %154 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 160
  %155 = bitcast i32* %154 to <32 x i32>*
  %156 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 192
  %157 = bitcast i32* %156 to <32 x i32>*
  %158 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 224
  %159 = bitcast i32* %158 to <32 x i32>*
  %160 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 256
  %161 = bitcast i32* %160 to <32 x i32>*
  %162 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 288
  %163 = bitcast i32* %162 to <32 x i32>*
  %164 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 320
  %165 = bitcast i32* %164 to <32 x i32>*
  %166 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 352
  %167 = bitcast i32* %166 to <32 x i32>*
  %168 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 384
  %169 = bitcast i32* %168 to <32 x i32>*
  %170 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 416
  %171 = bitcast i32* %170 to <32 x i32>*
  %172 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 448
  %173 = bitcast i32* %172 to <32 x i32>*
  %174 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 480
  %175 = bitcast i32* %174 to <32 x i32>*
  %176 = sub nsw i32 %a553.op1851, %t2225
  %177 = sub nsw i32 %a553, %t2225
  %178 = sext i32 %output_multiplier to i64
  %179 = insertelement <32 x i64> undef, i64 %178, i32 0
  %180 = shufflevector <32 x i64> %179, <32 x i64> undef, <32 x i32> zeroinitializer
  %181 = shl nuw i32 1, %output_shift
  %182 = ashr i32 %181, 1
  %183 = zext i8 %output_zero to i16
  %184 = insertelement <64 x i16> undef, i16 %183, i32 0
  %185 = shufflevector <64 x i16> %184, <64 x i16> undef, <64 x i32> zeroinitializer
  %186 = bitcast <64 x i16> %185 to <32 x i32>
  %187 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %188 = shufflevector <32 x i8> %187, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = bitcast <128 x i8> %188 to <32 x i32>
  %190 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %191 = shufflevector <32 x i8> %190, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <128 x i8> %191 to <32 x i32>
  %193 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %194 = add i32 %4, -1
  %xtraiter3056 = and i32 %4, 3
  %195 = icmp ult i32 %194, 3
  %unroll_iter3059 = and i32 %4, -4
  %lcmp.mod3058.not = icmp eq i32 %xtraiter3056, 0
  %xtraiter3061 = and i32 %4, 3
  %196 = icmp ult i32 %194, 3
  %unroll_iter3068 = and i32 %4, -4
  %lcmp.mod3063.not = icmp eq i32 %xtraiter3061, 0
  %197 = or i32 %t2227, %t2228
  %198 = icmp slt i32 %197, 0
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %35, label %then_bb28, label %next_bb29

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.1 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %526, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 7
  %199 = icmp slt i32 %a8, %b10
  %output.s0.c.c.base = select i1 %199, i32 %a8, i32 %b10
  %200 = load i32, i32* %.fca.1.gep, align 4, !tbaa !98
  %cmp.i = icmp ult i32 %200, %89
  %201 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !95
  br i1 %cmp.i, label %if.then.i1938, label %pseudostack_alloc.exit, !prof !99

if.then.i1938:                                    ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %201, null
  %202 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i = icmp ugt i32 %202, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i1938
  call void @halide_free(i8* null, i8* nonnull %201) #15
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i1938
  %add.i = add i32 %202, %89
  store i32 %add.i, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i = icmp ugt i32 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i32 %89) #15
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %89, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %203 = phi i8* [ %storemerge.i, %if.end11.i ], [ %201, %"for output.s0.c.co" ]
  %204 = bitcast i8* %203 to i16*
  %.not1852 = icmp eq i8* %203, null
  br i1 %.not1852, label %then_bb2, label %"produce filter_zeroed", !prof !100

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %205 = alloca i8*, i32 %89, align 128
  %206 = bitcast i8** %205 to i16*
  store i8** %205, i8*** %90, align 4
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %206, %then_bb2 ], [ %204, %pseudostack_alloc.exit ]
  br i1 %85, label %"for filter_zeroed.s0.y.preheader", label %"produce sum_filter.thread", !prof !101

"for filter_zeroed.s0.y.preheader":               ; preds = %"produce filter_zeroed"
  br i1 %84, label %"for filter_zeroed.s0.y.us", label %"for sum_filter.s1.r19$y.preheader", !prof !101

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %filter_zeroed.s0.y.us = phi i32 [ %315, %"end for filter_zeroed.s0.x.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y.preheader" ]
  %207 = mul nsw i32 %filter_zeroed.s0.y.us, %7
  %208 = add nsw i32 %207, %output.s0.c.c.base
  %209 = mul nsw i32 %filter_zeroed.s0.y.us, %4
  br i1 %195, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %filter_zeroed.s0.x.us = phi i32 [ %293, %"for filter_zeroed.s0.x.us" ], [ 0, %"for filter_zeroed.s0.y.us" ]
  %niter3060 = phi i32 [ %niter3060.nsub.3, %"for filter_zeroed.s0.x.us" ], [ %unroll_iter3059, %"for filter_zeroed.s0.y.us" ]
  %210 = mul nsw i32 %filter_zeroed.s0.x.us, %5
  %211 = add nsw i32 %208, %210
  %212 = getelementptr inbounds i8, i8* %1, i32 %211
  %213 = bitcast i8* %212 to <64 x i8>*
  %214 = load <64 x i8>, <64 x i8>* %213, align 1, !tbaa !102
  %215 = zext <64 x i8> %214 to <64 x i16>
  %216 = bitcast <64 x i16> %215 to <32 x i32>
  %217 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %216, <32 x i32> %94) #11
  %218 = add nsw i32 %filter_zeroed.s0.x.us, %209
  %219 = shl nsw i32 %218, 7
  %220 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %219
  %221 = bitcast i16* %220 to <32 x i32>*
  store <32 x i32> %217, <32 x i32>* %221, align 128, !tbaa !105
  %222 = getelementptr inbounds i8, i8* %212, i32 64
  %223 = bitcast i8* %222 to <64 x i8>*
  %224 = load <64 x i8>, <64 x i8>* %223, align 1, !tbaa !102
  %225 = zext <64 x i8> %224 to <64 x i16>
  %226 = bitcast <64 x i16> %225 to <32 x i32>
  %227 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %226, <32 x i32> %94) #11
  %228 = getelementptr inbounds i16, i16* %220, i32 64
  %229 = bitcast i16* %228 to <32 x i32>*
  store <32 x i32> %227, <32 x i32>* %229, align 128, !tbaa !105
  %230 = or i32 %filter_zeroed.s0.x.us, 1
  %231 = mul nsw i32 %230, %5
  %232 = add nsw i32 %208, %231
  %233 = getelementptr inbounds i8, i8* %1, i32 %232
  %234 = bitcast i8* %233 to <64 x i8>*
  %235 = load <64 x i8>, <64 x i8>* %234, align 1, !tbaa !102
  %236 = zext <64 x i8> %235 to <64 x i16>
  %237 = bitcast <64 x i16> %236 to <32 x i32>
  %238 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %237, <32 x i32> %94) #11
  %239 = add nsw i32 %230, %209
  %240 = shl nsw i32 %239, 7
  %241 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %240
  %242 = bitcast i16* %241 to <32 x i32>*
  store <32 x i32> %238, <32 x i32>* %242, align 128, !tbaa !105
  %243 = getelementptr inbounds i8, i8* %233, i32 64
  %244 = bitcast i8* %243 to <64 x i8>*
  %245 = load <64 x i8>, <64 x i8>* %244, align 1, !tbaa !102
  %246 = zext <64 x i8> %245 to <64 x i16>
  %247 = bitcast <64 x i16> %246 to <32 x i32>
  %248 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %247, <32 x i32> %94) #11
  %249 = getelementptr inbounds i16, i16* %241, i32 64
  %250 = bitcast i16* %249 to <32 x i32>*
  store <32 x i32> %248, <32 x i32>* %250, align 128, !tbaa !105
  %251 = or i32 %filter_zeroed.s0.x.us, 2
  %252 = mul nsw i32 %251, %5
  %253 = add nsw i32 %208, %252
  %254 = getelementptr inbounds i8, i8* %1, i32 %253
  %255 = bitcast i8* %254 to <64 x i8>*
  %256 = load <64 x i8>, <64 x i8>* %255, align 1, !tbaa !102
  %257 = zext <64 x i8> %256 to <64 x i16>
  %258 = bitcast <64 x i16> %257 to <32 x i32>
  %259 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %258, <32 x i32> %94) #11
  %260 = add nsw i32 %251, %209
  %261 = shl nsw i32 %260, 7
  %262 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %261
  %263 = bitcast i16* %262 to <32 x i32>*
  store <32 x i32> %259, <32 x i32>* %263, align 128, !tbaa !105
  %264 = getelementptr inbounds i8, i8* %254, i32 64
  %265 = bitcast i8* %264 to <64 x i8>*
  %266 = load <64 x i8>, <64 x i8>* %265, align 1, !tbaa !102
  %267 = zext <64 x i8> %266 to <64 x i16>
  %268 = bitcast <64 x i16> %267 to <32 x i32>
  %269 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %268, <32 x i32> %94) #11
  %270 = getelementptr inbounds i16, i16* %262, i32 64
  %271 = bitcast i16* %270 to <32 x i32>*
  store <32 x i32> %269, <32 x i32>* %271, align 128, !tbaa !105
  %272 = or i32 %filter_zeroed.s0.x.us, 3
  %273 = mul nsw i32 %272, %5
  %274 = add nsw i32 %208, %273
  %275 = getelementptr inbounds i8, i8* %1, i32 %274
  %276 = bitcast i8* %275 to <64 x i8>*
  %277 = load <64 x i8>, <64 x i8>* %276, align 1, !tbaa !102
  %278 = zext <64 x i8> %277 to <64 x i16>
  %279 = bitcast <64 x i16> %278 to <32 x i32>
  %280 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %279, <32 x i32> %94) #11
  %281 = add nsw i32 %272, %209
  %282 = shl nsw i32 %281, 7
  %283 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %282
  %284 = bitcast i16* %283 to <32 x i32>*
  store <32 x i32> %280, <32 x i32>* %284, align 128, !tbaa !105
  %285 = getelementptr inbounds i8, i8* %275, i32 64
  %286 = bitcast i8* %285 to <64 x i8>*
  %287 = load <64 x i8>, <64 x i8>* %286, align 1, !tbaa !102
  %288 = zext <64 x i8> %287 to <64 x i16>
  %289 = bitcast <64 x i16> %288 to <32 x i32>
  %290 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %289, <32 x i32> %94) #11
  %291 = getelementptr inbounds i16, i16* %283, i32 64
  %292 = bitcast i16* %291 to <32 x i32>*
  store <32 x i32> %290, <32 x i32>* %292, align 128, !tbaa !105
  %293 = add nuw nsw i32 %filter_zeroed.s0.x.us, 4
  %niter3060.nsub.3 = add i32 %niter3060, -4
  %niter3060.ncmp.3 = icmp eq i32 %niter3060.nsub.3, 0
  br i1 %niter3060.ncmp.3, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x.us", %"for filter_zeroed.s0.y.us"
  %filter_zeroed.s0.x.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y.us" ], [ %293, %"for filter_zeroed.s0.x.us" ]
  br i1 %lcmp.mod3058.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil"

"for filter_zeroed.s0.x.us.epil":                 ; preds = %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x.us.epil"
  %filter_zeroed.s0.x.us.epil = phi i32 [ %314, %"for filter_zeroed.s0.x.us.epil" ], [ %filter_zeroed.s0.x.us.unr, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %epil.iter3057 = phi i32 [ %epil.iter3057.sub, %"for filter_zeroed.s0.x.us.epil" ], [ %xtraiter3056, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %294 = mul nsw i32 %filter_zeroed.s0.x.us.epil, %5
  %295 = add nsw i32 %208, %294
  %296 = getelementptr inbounds i8, i8* %1, i32 %295
  %297 = bitcast i8* %296 to <64 x i8>*
  %298 = load <64 x i8>, <64 x i8>* %297, align 1, !tbaa !102
  %299 = zext <64 x i8> %298 to <64 x i16>
  %300 = bitcast <64 x i16> %299 to <32 x i32>
  %301 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %300, <32 x i32> %94) #11
  %302 = add nsw i32 %filter_zeroed.s0.x.us.epil, %209
  %303 = shl nsw i32 %302, 7
  %304 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %303
  %305 = bitcast i16* %304 to <32 x i32>*
  store <32 x i32> %301, <32 x i32>* %305, align 128, !tbaa !105
  %306 = getelementptr inbounds i8, i8* %296, i32 64
  %307 = bitcast i8* %306 to <64 x i8>*
  %308 = load <64 x i8>, <64 x i8>* %307, align 1, !tbaa !102
  %309 = zext <64 x i8> %308 to <64 x i16>
  %310 = bitcast <64 x i16> %309 to <32 x i32>
  %311 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %310, <32 x i32> %94) #11
  %312 = getelementptr inbounds i16, i16* %304, i32 64
  %313 = bitcast i16* %312 to <32 x i32>*
  store <32 x i32> %311, <32 x i32>* %313, align 128, !tbaa !105
  %314 = add nuw nsw i32 %filter_zeroed.s0.x.us.epil, 1
  %epil.iter3057.sub = add i32 %epil.iter3057, -1
  %epil.iter3057.cmp.not = icmp eq i32 %epil.iter3057.sub, 0
  br i1 %epil.iter3057.cmp.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil", !llvm.loop !107

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us.epil", %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa"
  %315 = add nuw nsw i32 %filter_zeroed.s0.y.us, 1
  %.not1867.us = icmp eq i32 %315, %6
  br i1 %.not1867.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"produce sum_filter.thread":                      ; preds = %"produce filter_zeroed"
  %316 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %317 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"consume sum_filter"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us", %"for filter_zeroed.s0.y.preheader"
  %318 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %319 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"for sum_filter.s1.r19$y"

"for sum_filter.s1.r19$y":                        ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x"
  %convolved1816.sroa.57.0 = phi <32 x i32> [ %convolved1816.sroa.57.2, %"end for sum_filter.s1.r19$x" ], [ %319, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved1816.sroa.38.0 = phi <32 x i32> [ %convolved1816.sroa.38.2, %"end for sum_filter.s1.r19$x" ], [ %318, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved1816.sroa.19.0 = phi <32 x i32> [ %convolved1816.sroa.19.2, %"end for sum_filter.s1.r19$x" ], [ %319, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved1816.sroa.0.0 = phi <32 x i32> [ %convolved1816.sroa.0.2, %"end for sum_filter.s1.r19$x" ], [ %318, %"for sum_filter.s1.r19$y.preheader" ]
  %"sum_filter.s1.r19$y" = phi i32 [ %416, %"end for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  br i1 %84, label %"for sum_filter.s1.r19$x.preheader", label %"end for sum_filter.s1.r19$x", !prof !101

"for sum_filter.s1.r19$x.preheader":              ; preds = %"for sum_filter.s1.r19$y"
  %320 = mul nsw i32 %"sum_filter.s1.r19$y", %4
  br i1 %196, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"for sum_filter.s1.r19$x":                        ; preds = %"for sum_filter.s1.r19$x.preheader", %"for sum_filter.s1.r19$x"
  %convolved1816.sroa.57.1 = phi <32 x i32> [ %395, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.57.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved1816.sroa.38.1 = phi <32 x i32> [ %394, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.38.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved1816.sroa.19.1 = phi <32 x i32> [ %387, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.19.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved1816.sroa.0.1 = phi <32 x i32> [ %386, %"for sum_filter.s1.r19$x" ], [ %convolved1816.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ]
  %"sum_filter.s1.r19$x" = phi i32 [ %396, %"for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$x.preheader" ]
  %niter3069 = phi i32 [ %niter3069.nsub.3, %"for sum_filter.s1.r19$x" ], [ %unroll_iter3068, %"for sum_filter.s1.r19$x.preheader" ]
  %321 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.19.1, <32 x i32> %convolved1816.sroa.0.1)
  %322 = add nsw i32 %"sum_filter.s1.r19$x", %320
  %323 = shl nsw i32 %322, 7
  %324 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %323
  %325 = bitcast i16* %324 to <32 x i32>*
  %326 = load <32 x i32>, <32 x i32>* %325, align 128, !tbaa !105
  %327 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %326) #11
  %328 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %327, <64 x i32> %321) #11
  %329 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %328)
  %330 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %328)
  %331 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.57.1, <32 x i32> %convolved1816.sroa.38.1)
  %332 = getelementptr inbounds i16, i16* %324, i32 64
  %333 = bitcast i16* %332 to <32 x i32>*
  %334 = load <32 x i32>, <32 x i32>* %333, align 128, !tbaa !105
  %335 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %334) #11
  %336 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %335, <64 x i32> %331) #11
  %337 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %336)
  %338 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %336)
  %339 = or i32 %"sum_filter.s1.r19$x", 1
  %340 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %330, <32 x i32> %329)
  %341 = add nsw i32 %339, %320
  %342 = shl nsw i32 %341, 7
  %343 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %342
  %344 = bitcast i16* %343 to <32 x i32>*
  %345 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !105
  %346 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %345) #11
  %347 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %346, <64 x i32> %340) #11
  %348 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %347)
  %349 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %347)
  %350 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %338, <32 x i32> %337)
  %351 = getelementptr inbounds i16, i16* %343, i32 64
  %352 = bitcast i16* %351 to <32 x i32>*
  %353 = load <32 x i32>, <32 x i32>* %352, align 128, !tbaa !105
  %354 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %353) #11
  %355 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %354, <64 x i32> %350) #11
  %356 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %355)
  %357 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %355)
  %358 = or i32 %"sum_filter.s1.r19$x", 2
  %359 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %349, <32 x i32> %348)
  %360 = add nsw i32 %358, %320
  %361 = shl nsw i32 %360, 7
  %362 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %361
  %363 = bitcast i16* %362 to <32 x i32>*
  %364 = load <32 x i32>, <32 x i32>* %363, align 128, !tbaa !105
  %365 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %364) #11
  %366 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %365, <64 x i32> %359) #11
  %367 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %366)
  %368 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %366)
  %369 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %357, <32 x i32> %356)
  %370 = getelementptr inbounds i16, i16* %362, i32 64
  %371 = bitcast i16* %370 to <32 x i32>*
  %372 = load <32 x i32>, <32 x i32>* %371, align 128, !tbaa !105
  %373 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %372) #11
  %374 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %373, <64 x i32> %369) #11
  %375 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %374)
  %376 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %374)
  %377 = or i32 %"sum_filter.s1.r19$x", 3
  %378 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %368, <32 x i32> %367)
  %379 = add nsw i32 %377, %320
  %380 = shl nsw i32 %379, 7
  %381 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %380
  %382 = bitcast i16* %381 to <32 x i32>*
  %383 = load <32 x i32>, <32 x i32>* %382, align 128, !tbaa !105
  %384 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %383) #11
  %385 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %384, <64 x i32> %378) #11
  %386 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %385)
  %387 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %385)
  %388 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %376, <32 x i32> %375)
  %389 = getelementptr inbounds i16, i16* %381, i32 64
  %390 = bitcast i16* %389 to <32 x i32>*
  %391 = load <32 x i32>, <32 x i32>* %390, align 128, !tbaa !105
  %392 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %391) #11
  %393 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %392, <64 x i32> %388) #11
  %394 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %393)
  %395 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %393)
  %396 = add nuw nsw i32 %"sum_filter.s1.r19$x", 4
  %niter3069.nsub.3 = add i32 %niter3069, -4
  %niter3069.ncmp.3 = icmp eq i32 %niter3069.nsub.3, 0
  br i1 %niter3069.ncmp.3, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"end for sum_filter.s1.r19$x.loopexit.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x", %"for sum_filter.s1.r19$x.preheader"
  %.lcssa2921.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %386, %"for sum_filter.s1.r19$x" ]
  %.lcssa2920.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %387, %"for sum_filter.s1.r19$x" ]
  %.lcssa2919.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %394, %"for sum_filter.s1.r19$x" ]
  %.lcssa.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %395, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.57.1.unr = phi <32 x i32> [ %convolved1816.sroa.57.0, %"for sum_filter.s1.r19$x.preheader" ], [ %395, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.38.1.unr = phi <32 x i32> [ %convolved1816.sroa.38.0, %"for sum_filter.s1.r19$x.preheader" ], [ %394, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.19.1.unr = phi <32 x i32> [ %convolved1816.sroa.19.0, %"for sum_filter.s1.r19$x.preheader" ], [ %387, %"for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.0.1.unr = phi <32 x i32> [ %convolved1816.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ], [ %386, %"for sum_filter.s1.r19$x" ]
  %"sum_filter.s1.r19$x.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$x.preheader" ], [ %396, %"for sum_filter.s1.r19$x" ]
  br i1 %lcmp.mod3063.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil"

"for sum_filter.s1.r19$x.epil":                   ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil"
  %convolved1816.sroa.57.1.epil = phi <32 x i32> [ %414, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.57.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved1816.sroa.38.1.epil = phi <32 x i32> [ %413, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.38.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved1816.sroa.19.1.epil = phi <32 x i32> [ %406, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.19.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved1816.sroa.0.1.epil = phi <32 x i32> [ %405, %"for sum_filter.s1.r19$x.epil" ], [ %convolved1816.sroa.0.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %"sum_filter.s1.r19$x.epil" = phi i32 [ %415, %"for sum_filter.s1.r19$x.epil" ], [ %"sum_filter.s1.r19$x.unr", %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %epil.iter3062 = phi i32 [ %epil.iter3062.sub, %"for sum_filter.s1.r19$x.epil" ], [ %xtraiter3061, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %397 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.19.1.epil, <32 x i32> %convolved1816.sroa.0.1.epil)
  %398 = add nsw i32 %"sum_filter.s1.r19$x.epil", %320
  %399 = shl nsw i32 %398, 7
  %400 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %399
  %401 = bitcast i16* %400 to <32 x i32>*
  %402 = load <32 x i32>, <32 x i32>* %401, align 128, !tbaa !105
  %403 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %402) #11
  %404 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %403, <64 x i32> %397) #11
  %405 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %404)
  %406 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %404)
  %407 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved1816.sroa.57.1.epil, <32 x i32> %convolved1816.sroa.38.1.epil)
  %408 = getelementptr inbounds i16, i16* %400, i32 64
  %409 = bitcast i16* %408 to <32 x i32>*
  %410 = load <32 x i32>, <32 x i32>* %409, align 128, !tbaa !105
  %411 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %410) #11
  %412 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %411, <64 x i32> %407) #11
  %413 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %412)
  %414 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %412)
  %415 = add nuw nsw i32 %"sum_filter.s1.r19$x.epil", 1
  %epil.iter3062.sub = add i32 %epil.iter3062, -1
  %epil.iter3062.cmp.not = icmp eq i32 %epil.iter3062.sub, 0
  br i1 %epil.iter3062.cmp.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil", !llvm.loop !108

"end for sum_filter.s1.r19$x":                    ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil", %"for sum_filter.s1.r19$y"
  %convolved1816.sroa.57.2 = phi <32 x i32> [ %convolved1816.sroa.57.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %414, %"for sum_filter.s1.r19$x.epil" ]
  %convolved1816.sroa.38.2 = phi <32 x i32> [ %convolved1816.sroa.38.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa2919.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %413, %"for sum_filter.s1.r19$x.epil" ]
  %convolved1816.sroa.19.2 = phi <32 x i32> [ %convolved1816.sroa.19.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa2920.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %406, %"for sum_filter.s1.r19$x.epil" ]
  %convolved1816.sroa.0.2 = phi <32 x i32> [ %convolved1816.sroa.0.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa2921.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %405, %"for sum_filter.s1.r19$x.epil" ]
  %416 = add nuw nsw i32 %"sum_filter.s1.r19$y", 1
  %.not1865 = icmp eq i32 %416, %6
  br i1 %.not1865, label %"consume sum_filter", label %"for sum_filter.s1.r19$y"

"consume sum_filter":                             ; preds = %"end for sum_filter.s1.r19$x", %"produce sum_filter.thread"
  %convolved1816.sroa.57.3 = phi <32 x i32> [ %317, %"produce sum_filter.thread" ], [ %convolved1816.sroa.57.2, %"end for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.38.3 = phi <32 x i32> [ %316, %"produce sum_filter.thread" ], [ %convolved1816.sroa.38.2, %"end for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.19.3 = phi <32 x i32> [ %317, %"produce sum_filter.thread" ], [ %convolved1816.sroa.19.2, %"end for sum_filter.s1.r19$x" ]
  %convolved1816.sroa.0.3 = phi <32 x i32> [ %316, %"produce sum_filter.thread" ], [ %convolved1816.sroa.0.2, %"end for sum_filter.s1.r19$x" ]
  %417 = getelementptr inbounds i32, i32* %95, i32 %output.s0.c.c.base
  %418 = bitcast i32* %417 to <32 x i32>*
  %419 = load <32 x i32>, <32 x i32>* %418, align 4, !tbaa !109
  %420 = getelementptr inbounds i32, i32* %417, i32 32
  %421 = bitcast i32* %420 to <32 x i32>*
  %422 = load <32 x i32>, <32 x i32>* %421, align 4, !tbaa !109
  %423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %422, <32 x i32> %419)
  %424 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.0.3) #11
  %425 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %424, <32 x i32> %98, <32 x i32> %convolved1816.sroa.0.3) #11
  %426 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.19.3) #11
  %427 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %426, <32 x i32> %98, <32 x i32> %convolved1816.sroa.19.3) #11
  %428 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %425, <32 x i32> %427) #11
  %429 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %423, <64 x i32> %428) #11
  %430 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %429)
  store <32 x i32> %430, <32 x i32>* %99, align 128, !tbaa !111
  %431 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %429)
  store <32 x i32> %431, <32 x i32>* %101, align 128, !tbaa !119
  %432 = getelementptr inbounds i32, i32* %417, i32 64
  %433 = bitcast i32* %432 to <32 x i32>*
  %434 = load <32 x i32>, <32 x i32>* %433, align 4, !tbaa !109
  %435 = getelementptr inbounds i32, i32* %417, i32 96
  %436 = bitcast i32* %435 to <32 x i32>*
  %437 = load <32 x i32>, <32 x i32>* %436, align 4, !tbaa !109
  %438 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %437, <32 x i32> %434)
  %439 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.38.3) #11
  %440 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %439, <32 x i32> %98, <32 x i32> %convolved1816.sroa.38.3) #11
  %441 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %98, <32 x i32> %convolved1816.sroa.57.3) #11
  %442 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %441, <32 x i32> %98, <32 x i32> %convolved1816.sroa.57.3) #11
  %443 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %440, <32 x i32> %442) #11
  %444 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %438, <64 x i32> %443) #11
  %445 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %444)
  store <32 x i32> %445, <32 x i32>* %103, align 128, !tbaa !121
  %446 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %444)
  store <32 x i32> %446, <32 x i32>* %105, align 128, !tbaa !124
  br i1 %120, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !101

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %447 = add nsw i32 %output.s0.c.c.base, 64
  %448 = sub i32 %output.s0.c.c.base, %t2195
  %449 = sub i32 %output.s0.c.c.base, %reass.add2137
  %450 = getelementptr inbounds i16, i16* %filter_zeroed, i32 768
  %451 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1024
  %452 = bitcast i16* %451 to <32 x i16>*
  %453 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1056
  %454 = bitcast i16* %453 to <32 x i16>*
  %455 = getelementptr inbounds i16, i16* %filter_zeroed, i32 896
  %456 = bitcast i16* %455 to <32 x i16>*
  %457 = getelementptr inbounds i16, i16* %filter_zeroed, i32 928
  %458 = bitcast i16* %457 to <32 x i16>*
  %459 = bitcast i16* %450 to <32 x i16>*
  %460 = getelementptr inbounds i16, i16* %filter_zeroed, i32 800
  %461 = bitcast i16* %460 to <32 x i16>*
  %462 = getelementptr inbounds i16, i16* %filter_zeroed, i32 384
  %463 = getelementptr inbounds i16, i16* %filter_zeroed, i32 640
  %464 = bitcast i16* %463 to <32 x i16>*
  %465 = getelementptr inbounds i16, i16* %filter_zeroed, i32 672
  %466 = bitcast i16* %465 to <32 x i16>*
  %467 = getelementptr inbounds i16, i16* %filter_zeroed, i32 512
  %468 = bitcast i16* %467 to <32 x i16>*
  %469 = getelementptr inbounds i16, i16* %filter_zeroed, i32 544
  %470 = bitcast i16* %469 to <32 x i16>*
  %471 = bitcast i16* %462 to <32 x i16>*
  %472 = getelementptr inbounds i16, i16* %filter_zeroed, i32 416
  %473 = bitcast i16* %472 to <32 x i16>*
  %474 = getelementptr inbounds i16, i16* %filter_zeroed, i32 256
  %475 = bitcast i16* %474 to <32 x i16>*
  %476 = getelementptr inbounds i16, i16* %filter_zeroed, i32 288
  %477 = bitcast i16* %476 to <32 x i16>*
  %478 = getelementptr inbounds i16, i16* %filter_zeroed, i32 128
  %479 = bitcast i16* %478 to <32 x i16>*
  %480 = getelementptr inbounds i16, i16* %filter_zeroed, i32 160
  %481 = bitcast i16* %480 to <32 x i16>*
  %482 = bitcast i16* %filter_zeroed to <32 x i16>*
  %483 = getelementptr inbounds i16, i16* %filter_zeroed, i32 32
  %484 = bitcast i16* %483 to <32 x i16>*
  %485 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1088
  %486 = bitcast i16* %485 to <32 x i16>*
  %487 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1120
  %488 = bitcast i16* %487 to <32 x i16>*
  %489 = getelementptr inbounds i16, i16* %filter_zeroed, i32 960
  %490 = bitcast i16* %489 to <32 x i16>*
  %491 = getelementptr inbounds i16, i16* %filter_zeroed, i32 992
  %492 = bitcast i16* %491 to <32 x i16>*
  %493 = getelementptr inbounds i16, i16* %filter_zeroed, i32 832
  %494 = bitcast i16* %493 to <32 x i16>*
  %495 = getelementptr inbounds i16, i16* %filter_zeroed, i32 864
  %496 = bitcast i16* %495 to <32 x i16>*
  %497 = getelementptr inbounds i16, i16* %filter_zeroed, i32 704
  %498 = bitcast i16* %497 to <32 x i16>*
  %499 = getelementptr inbounds i16, i16* %filter_zeroed, i32 736
  %500 = bitcast i16* %499 to <32 x i16>*
  %501 = getelementptr inbounds i16, i16* %filter_zeroed, i32 576
  %502 = bitcast i16* %501 to <32 x i16>*
  %503 = getelementptr inbounds i16, i16* %filter_zeroed, i32 608
  %504 = bitcast i16* %503 to <32 x i16>*
  %505 = getelementptr inbounds i16, i16* %filter_zeroed, i32 448
  %506 = bitcast i16* %505 to <32 x i16>*
  %507 = getelementptr inbounds i16, i16* %filter_zeroed, i32 480
  %508 = bitcast i16* %507 to <32 x i16>*
  %509 = getelementptr inbounds i16, i16* %filter_zeroed, i32 320
  %510 = bitcast i16* %509 to <32 x i16>*
  %511 = getelementptr inbounds i16, i16* %filter_zeroed, i32 352
  %512 = bitcast i16* %511 to <32 x i16>*
  %513 = getelementptr inbounds i16, i16* %filter_zeroed, i32 192
  %514 = bitcast i16* %513 to <32 x i16>*
  %515 = getelementptr inbounds i16, i16* %filter_zeroed, i32 224
  %516 = bitcast i16* %515 to <32 x i16>*
  %517 = getelementptr inbounds i16, i16* %filter_zeroed, i32 64
  %518 = bitcast i16* %517 to <32 x i16>*
  %519 = getelementptr inbounds i16, i16* %filter_zeroed, i32 96
  %520 = bitcast i16* %519 to <32 x i16>*
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %output.s0.b.rebased = phi i32 [ %1268, %"end for output.s0.y.yo" ], [ 0, %"for output.s0.b.rebased.preheader" ]
  %521 = load i32, i32* %.fca.1.gep1779, align 4, !tbaa !98
  %cmp.i1940 = icmp ult i32 %521, %126
  %522 = load i8*, i8** %.fca.0.gep1778, align 4, !tbaa !95
  br i1 %cmp.i1940, label %if.then.i1943, label %pseudostack_alloc.exit1956, !prof !99

if.then.i1943:                                    ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i1942 = icmp ne i8* %522, null
  %523 = load i32, i32* %.fca.2.gep1780, align 4
  %cmp2.i1945 = icmp ugt i32 %523, 16384
  %or.cond2115 = and i1 %tobool1.not.i1942, %cmp2.i1945
  br i1 %or.cond2115, label %if.then3.i1947, label %if.end.i1951

if.then3.i1947:                                   ; preds = %if.then.i1943
  call void @halide_free(i8* null, i8* nonnull %522) #15
  %.pre2744 = load i32, i32* %.fca.2.gep1780, align 4, !tbaa !97
  br label %if.end.i1951

if.end.i1951:                                     ; preds = %if.then3.i1947, %if.then.i1943
  %524 = phi i32 [ %.pre2744, %if.then3.i1947 ], [ %523, %if.then.i1943 ]
  %add.i1949 = add i32 %524, %126
  store i32 %add.i1949, i32* %.fca.2.gep1780, align 4, !tbaa !97
  %cmp7.i1950 = icmp ugt i32 %add.i1949, 16384
  br i1 %cmp7.i1950, label %if.then8.i1953, label %if.end11.i1955

if.then8.i1953:                                   ; preds = %if.end.i1951
  %call.i1952 = call i8* @halide_malloc(i8* null, i32 %126) #15
  br label %if.end11.i1955

if.end11.i1955:                                   ; preds = %if.then8.i1953, %if.end.i1951
  %storemerge.i1954 = phi i8* [ %call.i1952, %if.then8.i1953 ], [ null, %if.end.i1951 ]
  store i8* %storemerge.i1954, i8** %.fca.0.gep1778, align 4, !tbaa !95
  store i32 %126, i32* %.fca.1.gep1779, align 4, !tbaa !98
  br label %pseudostack_alloc.exit1956

pseudostack_alloc.exit1956:                       ; preds = %"for output.s0.b.rebased", %if.end11.i1955
  %525 = phi i8* [ %storemerge.i1954, %if.end11.i1955 ], [ %522, %"for output.s0.b.rebased" ]
  %.not1854 = icmp eq i8* %525, null
  br i1 %.not1854, label %then_bb5, label %"produce resampled_input", !prof !100

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.1, %"consume sum_filter" ], [ %193, %"end for output.s0.y.yo" ]
  %526 = add nuw nsw i32 %output.s0.c.co, 1
  %.not1853 = icmp eq i32 %526, %83
  br i1 %.not1853, label %after_bb, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit1956
  %527 = alloca i8*, i32 %126, align 128
  %528 = bitcast i8** %527 to i8*
  store i8** %527, i8*** %127, align 4
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit1956, %then_bb5
  %resampled_input = phi i8* [ %528, %then_bb5 ], [ %525, %pseudostack_alloc.exit1956 ]
  %529 = add nsw i32 %output.s0.b.rebased, %14
  br i1 %t2194, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %530 = mul nsw i32 %529, %16
  %t2239 = add nsw i32 %448, %530
  br i1 %198, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us", !prof !126

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %resampled_input.s0.y.rebased.us = phi i32 [ %547, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %531 = add nsw i32 %129, %resampled_input.s0.y.rebased.us
  %532 = mul nsw i32 %531, %130
  %t2243.us = add nsw i32 %131, %532
  %533 = add nsw i32 %resampled_input.s0.y.rebased.us, %a14
  %534 = mul nsw i32 %533, %13
  %535 = add nsw i32 %t2239, %534
  br label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %resampled_input.s0.x.rebased.us = phi i32 [ %546, %"for resampled_input.s0.x.rebased.us" ], [ 0, %"for resampled_input.s0.y.rebased.us" ]
  %536 = add nsw i32 %resampled_input.s0.x.rebased.us, %a13
  %537 = mul nsw i32 %536, %11
  %538 = add nsw i32 %535, %537
  %539 = getelementptr inbounds i8, i8* %8, i32 %538
  %540 = bitcast i8* %539 to <128 x i8>*
  %541 = load <128 x i8>, <128 x i8>* %540, align 1, !tbaa !127
  %542 = add nsw i32 %t2243.us, %resampled_input.s0.x.rebased.us
  %543 = shl nsw i32 %542, 7
  %544 = getelementptr inbounds i8, i8* %resampled_input, i32 %543
  %545 = bitcast i8* %544 to <128 x i8>*
  store <128 x i8> %541, <128 x i8>* %545, align 128, !tbaa !129
  %546 = add nuw nsw i32 %resampled_input.s0.x.rebased.us, 1
  %.not1864.us = icmp eq i32 %resampled_input.s0.x.rebased.us, %t2228
  br i1 %.not1864.us, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us"
  %547 = add nuw nsw i32 %resampled_input.s0.y.rebased.us, 1
  %.not1863.us = icmp eq i32 %resampled_input.s0.y.rebased.us, %t2227
  br i1 %.not1863.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  br i1 %128, label %"for resampled_input.s0.y.rebased9.preheader", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader":    ; preds = %next_bb8
  %548 = mul nsw i32 %529, %16
  %549 = sub i32 %548, %t2195
  br i1 %132, label %"for resampled_input.s0.y.rebased9.preheader.split.us", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased9.preheader"
  %550 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output.s0.c.c.base) #11
  %551 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %550, <32 x i32> %550) #11
  %552 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> zeroinitializer, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>) #11
  %553 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %551, <64 x i32> %552) #11
  %554 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %depth_multiplier) #11
  %555 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %554, <32 x i32> %554) #11
  %556 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %555, <64 x i32> %134) #11
  %557 = sdiv <64 x i32> %553, %556
  %558 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %559 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %136) #11
  %560 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %558, <32 x i32> %559) #11
  %561 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %562 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %561, <32 x i32> %559) #11
  %563 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %560, <32 x i32> %562) #11
  %564 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %563, <64 x i32> %557) #11
  %565 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %564) #11
  %566 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %134) #11
  %567 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %566) #11
  %568 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %134) #11
  %569 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %568) #11
  %570 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %567, <32 x i32> %569) #11
  %571 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %570) #11
  %572 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %565, <32 x i32> %571) #11
  %573 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %564) #11
  %574 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %570) #11
  %575 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %573, <32 x i32> %574) #11
  %576 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %572, <32 x i32> %575) #11
  %577 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %447) #11
  %578 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %577, <32 x i32> %577) #11
  %579 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %578, <64 x i32> %552) #11
  %580 = sdiv <64 x i32> %579, %556
  %581 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %563, <64 x i32> %580) #11
  %582 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %581) #11
  %583 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %582, <32 x i32> %571) #11
  %584 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %581) #11
  %585 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %584, <32 x i32> %574) #11
  %586 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %583, <32 x i32> %585) #11
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %resampled_input.s0.y.rebased11.us = phi i32 [ %1117, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %587 = add nsw i32 %129, %resampled_input.s0.y.rebased11.us
  %588 = mul nsw i32 %587, %130
  %t2248.us = add nsw i32 %131, %588
  %589 = add nsw i32 %resampled_input.s0.y.rebased11.us, %a14
  %590 = mul nsw i32 %589, %13
  %t2247.us = add nsw i32 %549, %590
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %resampled_input.s0.x.rebased14.us = phi i32 [ %1116, %"for resampled_input.s0.x.rebased12.us" ], [ 0, %"for resampled_input.s0.y.rebased9.us" ]
  %591 = add nsw i32 %resampled_input.s0.x.rebased14.us, %a13
  %592 = mul nsw i32 %591, %11
  %593 = add nsw i32 %t2247.us, %592
  %594 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %593) #11
  %595 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %594, <32 x i32> %594) #11
  %596 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %595, <64 x i32> %576) #11
  %597 = extractelement <64 x i32> %596, i32 0
  %598 = getelementptr inbounds i8, i8* %8, i32 %597
  %599 = load i8, i8* %598, align 1, !tbaa !127
  %600 = insertelement <64 x i8> undef, i8 %599, i32 0
  %601 = extractelement <64 x i32> %596, i32 1
  %602 = getelementptr inbounds i8, i8* %8, i32 %601
  %603 = load i8, i8* %602, align 1, !tbaa !127
  %604 = insertelement <64 x i8> %600, i8 %603, i32 1
  %605 = extractelement <64 x i32> %596, i32 2
  %606 = getelementptr inbounds i8, i8* %8, i32 %605
  %607 = load i8, i8* %606, align 1, !tbaa !127
  %608 = insertelement <64 x i8> %604, i8 %607, i32 2
  %609 = extractelement <64 x i32> %596, i32 3
  %610 = getelementptr inbounds i8, i8* %8, i32 %609
  %611 = load i8, i8* %610, align 1, !tbaa !127
  %612 = insertelement <64 x i8> %608, i8 %611, i32 3
  %613 = extractelement <64 x i32> %596, i32 4
  %614 = getelementptr inbounds i8, i8* %8, i32 %613
  %615 = load i8, i8* %614, align 1, !tbaa !127
  %616 = insertelement <64 x i8> %612, i8 %615, i32 4
  %617 = extractelement <64 x i32> %596, i32 5
  %618 = getelementptr inbounds i8, i8* %8, i32 %617
  %619 = load i8, i8* %618, align 1, !tbaa !127
  %620 = insertelement <64 x i8> %616, i8 %619, i32 5
  %621 = extractelement <64 x i32> %596, i32 6
  %622 = getelementptr inbounds i8, i8* %8, i32 %621
  %623 = load i8, i8* %622, align 1, !tbaa !127
  %624 = insertelement <64 x i8> %620, i8 %623, i32 6
  %625 = extractelement <64 x i32> %596, i32 7
  %626 = getelementptr inbounds i8, i8* %8, i32 %625
  %627 = load i8, i8* %626, align 1, !tbaa !127
  %628 = insertelement <64 x i8> %624, i8 %627, i32 7
  %629 = extractelement <64 x i32> %596, i32 8
  %630 = getelementptr inbounds i8, i8* %8, i32 %629
  %631 = load i8, i8* %630, align 1, !tbaa !127
  %632 = insertelement <64 x i8> %628, i8 %631, i32 8
  %633 = extractelement <64 x i32> %596, i32 9
  %634 = getelementptr inbounds i8, i8* %8, i32 %633
  %635 = load i8, i8* %634, align 1, !tbaa !127
  %636 = insertelement <64 x i8> %632, i8 %635, i32 9
  %637 = extractelement <64 x i32> %596, i32 10
  %638 = getelementptr inbounds i8, i8* %8, i32 %637
  %639 = load i8, i8* %638, align 1, !tbaa !127
  %640 = insertelement <64 x i8> %636, i8 %639, i32 10
  %641 = extractelement <64 x i32> %596, i32 11
  %642 = getelementptr inbounds i8, i8* %8, i32 %641
  %643 = load i8, i8* %642, align 1, !tbaa !127
  %644 = insertelement <64 x i8> %640, i8 %643, i32 11
  %645 = extractelement <64 x i32> %596, i32 12
  %646 = getelementptr inbounds i8, i8* %8, i32 %645
  %647 = load i8, i8* %646, align 1, !tbaa !127
  %648 = insertelement <64 x i8> %644, i8 %647, i32 12
  %649 = extractelement <64 x i32> %596, i32 13
  %650 = getelementptr inbounds i8, i8* %8, i32 %649
  %651 = load i8, i8* %650, align 1, !tbaa !127
  %652 = insertelement <64 x i8> %648, i8 %651, i32 13
  %653 = extractelement <64 x i32> %596, i32 14
  %654 = getelementptr inbounds i8, i8* %8, i32 %653
  %655 = load i8, i8* %654, align 1, !tbaa !127
  %656 = insertelement <64 x i8> %652, i8 %655, i32 14
  %657 = extractelement <64 x i32> %596, i32 15
  %658 = getelementptr inbounds i8, i8* %8, i32 %657
  %659 = load i8, i8* %658, align 1, !tbaa !127
  %660 = insertelement <64 x i8> %656, i8 %659, i32 15
  %661 = extractelement <64 x i32> %596, i32 16
  %662 = getelementptr inbounds i8, i8* %8, i32 %661
  %663 = load i8, i8* %662, align 1, !tbaa !127
  %664 = insertelement <64 x i8> %660, i8 %663, i32 16
  %665 = extractelement <64 x i32> %596, i32 17
  %666 = getelementptr inbounds i8, i8* %8, i32 %665
  %667 = load i8, i8* %666, align 1, !tbaa !127
  %668 = insertelement <64 x i8> %664, i8 %667, i32 17
  %669 = extractelement <64 x i32> %596, i32 18
  %670 = getelementptr inbounds i8, i8* %8, i32 %669
  %671 = load i8, i8* %670, align 1, !tbaa !127
  %672 = insertelement <64 x i8> %668, i8 %671, i32 18
  %673 = extractelement <64 x i32> %596, i32 19
  %674 = getelementptr inbounds i8, i8* %8, i32 %673
  %675 = load i8, i8* %674, align 1, !tbaa !127
  %676 = insertelement <64 x i8> %672, i8 %675, i32 19
  %677 = extractelement <64 x i32> %596, i32 20
  %678 = getelementptr inbounds i8, i8* %8, i32 %677
  %679 = load i8, i8* %678, align 1, !tbaa !127
  %680 = insertelement <64 x i8> %676, i8 %679, i32 20
  %681 = extractelement <64 x i32> %596, i32 21
  %682 = getelementptr inbounds i8, i8* %8, i32 %681
  %683 = load i8, i8* %682, align 1, !tbaa !127
  %684 = insertelement <64 x i8> %680, i8 %683, i32 21
  %685 = extractelement <64 x i32> %596, i32 22
  %686 = getelementptr inbounds i8, i8* %8, i32 %685
  %687 = load i8, i8* %686, align 1, !tbaa !127
  %688 = insertelement <64 x i8> %684, i8 %687, i32 22
  %689 = extractelement <64 x i32> %596, i32 23
  %690 = getelementptr inbounds i8, i8* %8, i32 %689
  %691 = load i8, i8* %690, align 1, !tbaa !127
  %692 = insertelement <64 x i8> %688, i8 %691, i32 23
  %693 = extractelement <64 x i32> %596, i32 24
  %694 = getelementptr inbounds i8, i8* %8, i32 %693
  %695 = load i8, i8* %694, align 1, !tbaa !127
  %696 = insertelement <64 x i8> %692, i8 %695, i32 24
  %697 = extractelement <64 x i32> %596, i32 25
  %698 = getelementptr inbounds i8, i8* %8, i32 %697
  %699 = load i8, i8* %698, align 1, !tbaa !127
  %700 = insertelement <64 x i8> %696, i8 %699, i32 25
  %701 = extractelement <64 x i32> %596, i32 26
  %702 = getelementptr inbounds i8, i8* %8, i32 %701
  %703 = load i8, i8* %702, align 1, !tbaa !127
  %704 = insertelement <64 x i8> %700, i8 %703, i32 26
  %705 = extractelement <64 x i32> %596, i32 27
  %706 = getelementptr inbounds i8, i8* %8, i32 %705
  %707 = load i8, i8* %706, align 1, !tbaa !127
  %708 = insertelement <64 x i8> %704, i8 %707, i32 27
  %709 = extractelement <64 x i32> %596, i32 28
  %710 = getelementptr inbounds i8, i8* %8, i32 %709
  %711 = load i8, i8* %710, align 1, !tbaa !127
  %712 = insertelement <64 x i8> %708, i8 %711, i32 28
  %713 = extractelement <64 x i32> %596, i32 29
  %714 = getelementptr inbounds i8, i8* %8, i32 %713
  %715 = load i8, i8* %714, align 1, !tbaa !127
  %716 = insertelement <64 x i8> %712, i8 %715, i32 29
  %717 = extractelement <64 x i32> %596, i32 30
  %718 = getelementptr inbounds i8, i8* %8, i32 %717
  %719 = load i8, i8* %718, align 1, !tbaa !127
  %720 = insertelement <64 x i8> %716, i8 %719, i32 30
  %721 = extractelement <64 x i32> %596, i32 31
  %722 = getelementptr inbounds i8, i8* %8, i32 %721
  %723 = load i8, i8* %722, align 1, !tbaa !127
  %724 = insertelement <64 x i8> %720, i8 %723, i32 31
  %725 = extractelement <64 x i32> %596, i32 32
  %726 = getelementptr inbounds i8, i8* %8, i32 %725
  %727 = load i8, i8* %726, align 1, !tbaa !127
  %728 = insertelement <64 x i8> %724, i8 %727, i32 32
  %729 = extractelement <64 x i32> %596, i32 33
  %730 = getelementptr inbounds i8, i8* %8, i32 %729
  %731 = load i8, i8* %730, align 1, !tbaa !127
  %732 = insertelement <64 x i8> %728, i8 %731, i32 33
  %733 = extractelement <64 x i32> %596, i32 34
  %734 = getelementptr inbounds i8, i8* %8, i32 %733
  %735 = load i8, i8* %734, align 1, !tbaa !127
  %736 = insertelement <64 x i8> %732, i8 %735, i32 34
  %737 = extractelement <64 x i32> %596, i32 35
  %738 = getelementptr inbounds i8, i8* %8, i32 %737
  %739 = load i8, i8* %738, align 1, !tbaa !127
  %740 = insertelement <64 x i8> %736, i8 %739, i32 35
  %741 = extractelement <64 x i32> %596, i32 36
  %742 = getelementptr inbounds i8, i8* %8, i32 %741
  %743 = load i8, i8* %742, align 1, !tbaa !127
  %744 = insertelement <64 x i8> %740, i8 %743, i32 36
  %745 = extractelement <64 x i32> %596, i32 37
  %746 = getelementptr inbounds i8, i8* %8, i32 %745
  %747 = load i8, i8* %746, align 1, !tbaa !127
  %748 = insertelement <64 x i8> %744, i8 %747, i32 37
  %749 = extractelement <64 x i32> %596, i32 38
  %750 = getelementptr inbounds i8, i8* %8, i32 %749
  %751 = load i8, i8* %750, align 1, !tbaa !127
  %752 = insertelement <64 x i8> %748, i8 %751, i32 38
  %753 = extractelement <64 x i32> %596, i32 39
  %754 = getelementptr inbounds i8, i8* %8, i32 %753
  %755 = load i8, i8* %754, align 1, !tbaa !127
  %756 = insertelement <64 x i8> %752, i8 %755, i32 39
  %757 = extractelement <64 x i32> %596, i32 40
  %758 = getelementptr inbounds i8, i8* %8, i32 %757
  %759 = load i8, i8* %758, align 1, !tbaa !127
  %760 = insertelement <64 x i8> %756, i8 %759, i32 40
  %761 = extractelement <64 x i32> %596, i32 41
  %762 = getelementptr inbounds i8, i8* %8, i32 %761
  %763 = load i8, i8* %762, align 1, !tbaa !127
  %764 = insertelement <64 x i8> %760, i8 %763, i32 41
  %765 = extractelement <64 x i32> %596, i32 42
  %766 = getelementptr inbounds i8, i8* %8, i32 %765
  %767 = load i8, i8* %766, align 1, !tbaa !127
  %768 = insertelement <64 x i8> %764, i8 %767, i32 42
  %769 = extractelement <64 x i32> %596, i32 43
  %770 = getelementptr inbounds i8, i8* %8, i32 %769
  %771 = load i8, i8* %770, align 1, !tbaa !127
  %772 = insertelement <64 x i8> %768, i8 %771, i32 43
  %773 = extractelement <64 x i32> %596, i32 44
  %774 = getelementptr inbounds i8, i8* %8, i32 %773
  %775 = load i8, i8* %774, align 1, !tbaa !127
  %776 = insertelement <64 x i8> %772, i8 %775, i32 44
  %777 = extractelement <64 x i32> %596, i32 45
  %778 = getelementptr inbounds i8, i8* %8, i32 %777
  %779 = load i8, i8* %778, align 1, !tbaa !127
  %780 = insertelement <64 x i8> %776, i8 %779, i32 45
  %781 = extractelement <64 x i32> %596, i32 46
  %782 = getelementptr inbounds i8, i8* %8, i32 %781
  %783 = load i8, i8* %782, align 1, !tbaa !127
  %784 = insertelement <64 x i8> %780, i8 %783, i32 46
  %785 = extractelement <64 x i32> %596, i32 47
  %786 = getelementptr inbounds i8, i8* %8, i32 %785
  %787 = load i8, i8* %786, align 1, !tbaa !127
  %788 = insertelement <64 x i8> %784, i8 %787, i32 47
  %789 = extractelement <64 x i32> %596, i32 48
  %790 = getelementptr inbounds i8, i8* %8, i32 %789
  %791 = load i8, i8* %790, align 1, !tbaa !127
  %792 = insertelement <64 x i8> %788, i8 %791, i32 48
  %793 = extractelement <64 x i32> %596, i32 49
  %794 = getelementptr inbounds i8, i8* %8, i32 %793
  %795 = load i8, i8* %794, align 1, !tbaa !127
  %796 = insertelement <64 x i8> %792, i8 %795, i32 49
  %797 = extractelement <64 x i32> %596, i32 50
  %798 = getelementptr inbounds i8, i8* %8, i32 %797
  %799 = load i8, i8* %798, align 1, !tbaa !127
  %800 = insertelement <64 x i8> %796, i8 %799, i32 50
  %801 = extractelement <64 x i32> %596, i32 51
  %802 = getelementptr inbounds i8, i8* %8, i32 %801
  %803 = load i8, i8* %802, align 1, !tbaa !127
  %804 = insertelement <64 x i8> %800, i8 %803, i32 51
  %805 = extractelement <64 x i32> %596, i32 52
  %806 = getelementptr inbounds i8, i8* %8, i32 %805
  %807 = load i8, i8* %806, align 1, !tbaa !127
  %808 = insertelement <64 x i8> %804, i8 %807, i32 52
  %809 = extractelement <64 x i32> %596, i32 53
  %810 = getelementptr inbounds i8, i8* %8, i32 %809
  %811 = load i8, i8* %810, align 1, !tbaa !127
  %812 = insertelement <64 x i8> %808, i8 %811, i32 53
  %813 = extractelement <64 x i32> %596, i32 54
  %814 = getelementptr inbounds i8, i8* %8, i32 %813
  %815 = load i8, i8* %814, align 1, !tbaa !127
  %816 = insertelement <64 x i8> %812, i8 %815, i32 54
  %817 = extractelement <64 x i32> %596, i32 55
  %818 = getelementptr inbounds i8, i8* %8, i32 %817
  %819 = load i8, i8* %818, align 1, !tbaa !127
  %820 = insertelement <64 x i8> %816, i8 %819, i32 55
  %821 = extractelement <64 x i32> %596, i32 56
  %822 = getelementptr inbounds i8, i8* %8, i32 %821
  %823 = load i8, i8* %822, align 1, !tbaa !127
  %824 = insertelement <64 x i8> %820, i8 %823, i32 56
  %825 = extractelement <64 x i32> %596, i32 57
  %826 = getelementptr inbounds i8, i8* %8, i32 %825
  %827 = load i8, i8* %826, align 1, !tbaa !127
  %828 = insertelement <64 x i8> %824, i8 %827, i32 57
  %829 = extractelement <64 x i32> %596, i32 58
  %830 = getelementptr inbounds i8, i8* %8, i32 %829
  %831 = load i8, i8* %830, align 1, !tbaa !127
  %832 = insertelement <64 x i8> %828, i8 %831, i32 58
  %833 = extractelement <64 x i32> %596, i32 59
  %834 = getelementptr inbounds i8, i8* %8, i32 %833
  %835 = load i8, i8* %834, align 1, !tbaa !127
  %836 = insertelement <64 x i8> %832, i8 %835, i32 59
  %837 = extractelement <64 x i32> %596, i32 60
  %838 = getelementptr inbounds i8, i8* %8, i32 %837
  %839 = load i8, i8* %838, align 1, !tbaa !127
  %840 = insertelement <64 x i8> %836, i8 %839, i32 60
  %841 = extractelement <64 x i32> %596, i32 61
  %842 = getelementptr inbounds i8, i8* %8, i32 %841
  %843 = load i8, i8* %842, align 1, !tbaa !127
  %844 = insertelement <64 x i8> %840, i8 %843, i32 61
  %845 = extractelement <64 x i32> %596, i32 62
  %846 = getelementptr inbounds i8, i8* %8, i32 %845
  %847 = load i8, i8* %846, align 1, !tbaa !127
  %848 = insertelement <64 x i8> %844, i8 %847, i32 62
  %849 = extractelement <64 x i32> %596, i32 63
  %850 = getelementptr inbounds i8, i8* %8, i32 %849
  %851 = load i8, i8* %850, align 1, !tbaa !127
  %852 = insertelement <64 x i8> %848, i8 %851, i32 63
  %853 = add nsw i32 %t2248.us, %resampled_input.s0.x.rebased14.us
  %854 = shl nsw i32 %853, 7
  %855 = getelementptr inbounds i8, i8* %resampled_input, i32 %854
  %856 = bitcast i8* %855 to <64 x i8>*
  store <64 x i8> %852, <64 x i8>* %856, align 128, !tbaa !129
  %857 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %595, <64 x i32> %586) #11
  %858 = extractelement <64 x i32> %857, i32 0
  %859 = getelementptr inbounds i8, i8* %8, i32 %858
  %860 = load i8, i8* %859, align 1, !tbaa !127
  %861 = insertelement <64 x i8> undef, i8 %860, i32 0
  %862 = extractelement <64 x i32> %857, i32 1
  %863 = getelementptr inbounds i8, i8* %8, i32 %862
  %864 = load i8, i8* %863, align 1, !tbaa !127
  %865 = insertelement <64 x i8> %861, i8 %864, i32 1
  %866 = extractelement <64 x i32> %857, i32 2
  %867 = getelementptr inbounds i8, i8* %8, i32 %866
  %868 = load i8, i8* %867, align 1, !tbaa !127
  %869 = insertelement <64 x i8> %865, i8 %868, i32 2
  %870 = extractelement <64 x i32> %857, i32 3
  %871 = getelementptr inbounds i8, i8* %8, i32 %870
  %872 = load i8, i8* %871, align 1, !tbaa !127
  %873 = insertelement <64 x i8> %869, i8 %872, i32 3
  %874 = extractelement <64 x i32> %857, i32 4
  %875 = getelementptr inbounds i8, i8* %8, i32 %874
  %876 = load i8, i8* %875, align 1, !tbaa !127
  %877 = insertelement <64 x i8> %873, i8 %876, i32 4
  %878 = extractelement <64 x i32> %857, i32 5
  %879 = getelementptr inbounds i8, i8* %8, i32 %878
  %880 = load i8, i8* %879, align 1, !tbaa !127
  %881 = insertelement <64 x i8> %877, i8 %880, i32 5
  %882 = extractelement <64 x i32> %857, i32 6
  %883 = getelementptr inbounds i8, i8* %8, i32 %882
  %884 = load i8, i8* %883, align 1, !tbaa !127
  %885 = insertelement <64 x i8> %881, i8 %884, i32 6
  %886 = extractelement <64 x i32> %857, i32 7
  %887 = getelementptr inbounds i8, i8* %8, i32 %886
  %888 = load i8, i8* %887, align 1, !tbaa !127
  %889 = insertelement <64 x i8> %885, i8 %888, i32 7
  %890 = extractelement <64 x i32> %857, i32 8
  %891 = getelementptr inbounds i8, i8* %8, i32 %890
  %892 = load i8, i8* %891, align 1, !tbaa !127
  %893 = insertelement <64 x i8> %889, i8 %892, i32 8
  %894 = extractelement <64 x i32> %857, i32 9
  %895 = getelementptr inbounds i8, i8* %8, i32 %894
  %896 = load i8, i8* %895, align 1, !tbaa !127
  %897 = insertelement <64 x i8> %893, i8 %896, i32 9
  %898 = extractelement <64 x i32> %857, i32 10
  %899 = getelementptr inbounds i8, i8* %8, i32 %898
  %900 = load i8, i8* %899, align 1, !tbaa !127
  %901 = insertelement <64 x i8> %897, i8 %900, i32 10
  %902 = extractelement <64 x i32> %857, i32 11
  %903 = getelementptr inbounds i8, i8* %8, i32 %902
  %904 = load i8, i8* %903, align 1, !tbaa !127
  %905 = insertelement <64 x i8> %901, i8 %904, i32 11
  %906 = extractelement <64 x i32> %857, i32 12
  %907 = getelementptr inbounds i8, i8* %8, i32 %906
  %908 = load i8, i8* %907, align 1, !tbaa !127
  %909 = insertelement <64 x i8> %905, i8 %908, i32 12
  %910 = extractelement <64 x i32> %857, i32 13
  %911 = getelementptr inbounds i8, i8* %8, i32 %910
  %912 = load i8, i8* %911, align 1, !tbaa !127
  %913 = insertelement <64 x i8> %909, i8 %912, i32 13
  %914 = extractelement <64 x i32> %857, i32 14
  %915 = getelementptr inbounds i8, i8* %8, i32 %914
  %916 = load i8, i8* %915, align 1, !tbaa !127
  %917 = insertelement <64 x i8> %913, i8 %916, i32 14
  %918 = extractelement <64 x i32> %857, i32 15
  %919 = getelementptr inbounds i8, i8* %8, i32 %918
  %920 = load i8, i8* %919, align 1, !tbaa !127
  %921 = insertelement <64 x i8> %917, i8 %920, i32 15
  %922 = extractelement <64 x i32> %857, i32 16
  %923 = getelementptr inbounds i8, i8* %8, i32 %922
  %924 = load i8, i8* %923, align 1, !tbaa !127
  %925 = insertelement <64 x i8> %921, i8 %924, i32 16
  %926 = extractelement <64 x i32> %857, i32 17
  %927 = getelementptr inbounds i8, i8* %8, i32 %926
  %928 = load i8, i8* %927, align 1, !tbaa !127
  %929 = insertelement <64 x i8> %925, i8 %928, i32 17
  %930 = extractelement <64 x i32> %857, i32 18
  %931 = getelementptr inbounds i8, i8* %8, i32 %930
  %932 = load i8, i8* %931, align 1, !tbaa !127
  %933 = insertelement <64 x i8> %929, i8 %932, i32 18
  %934 = extractelement <64 x i32> %857, i32 19
  %935 = getelementptr inbounds i8, i8* %8, i32 %934
  %936 = load i8, i8* %935, align 1, !tbaa !127
  %937 = insertelement <64 x i8> %933, i8 %936, i32 19
  %938 = extractelement <64 x i32> %857, i32 20
  %939 = getelementptr inbounds i8, i8* %8, i32 %938
  %940 = load i8, i8* %939, align 1, !tbaa !127
  %941 = insertelement <64 x i8> %937, i8 %940, i32 20
  %942 = extractelement <64 x i32> %857, i32 21
  %943 = getelementptr inbounds i8, i8* %8, i32 %942
  %944 = load i8, i8* %943, align 1, !tbaa !127
  %945 = insertelement <64 x i8> %941, i8 %944, i32 21
  %946 = extractelement <64 x i32> %857, i32 22
  %947 = getelementptr inbounds i8, i8* %8, i32 %946
  %948 = load i8, i8* %947, align 1, !tbaa !127
  %949 = insertelement <64 x i8> %945, i8 %948, i32 22
  %950 = extractelement <64 x i32> %857, i32 23
  %951 = getelementptr inbounds i8, i8* %8, i32 %950
  %952 = load i8, i8* %951, align 1, !tbaa !127
  %953 = insertelement <64 x i8> %949, i8 %952, i32 23
  %954 = extractelement <64 x i32> %857, i32 24
  %955 = getelementptr inbounds i8, i8* %8, i32 %954
  %956 = load i8, i8* %955, align 1, !tbaa !127
  %957 = insertelement <64 x i8> %953, i8 %956, i32 24
  %958 = extractelement <64 x i32> %857, i32 25
  %959 = getelementptr inbounds i8, i8* %8, i32 %958
  %960 = load i8, i8* %959, align 1, !tbaa !127
  %961 = insertelement <64 x i8> %957, i8 %960, i32 25
  %962 = extractelement <64 x i32> %857, i32 26
  %963 = getelementptr inbounds i8, i8* %8, i32 %962
  %964 = load i8, i8* %963, align 1, !tbaa !127
  %965 = insertelement <64 x i8> %961, i8 %964, i32 26
  %966 = extractelement <64 x i32> %857, i32 27
  %967 = getelementptr inbounds i8, i8* %8, i32 %966
  %968 = load i8, i8* %967, align 1, !tbaa !127
  %969 = insertelement <64 x i8> %965, i8 %968, i32 27
  %970 = extractelement <64 x i32> %857, i32 28
  %971 = getelementptr inbounds i8, i8* %8, i32 %970
  %972 = load i8, i8* %971, align 1, !tbaa !127
  %973 = insertelement <64 x i8> %969, i8 %972, i32 28
  %974 = extractelement <64 x i32> %857, i32 29
  %975 = getelementptr inbounds i8, i8* %8, i32 %974
  %976 = load i8, i8* %975, align 1, !tbaa !127
  %977 = insertelement <64 x i8> %973, i8 %976, i32 29
  %978 = extractelement <64 x i32> %857, i32 30
  %979 = getelementptr inbounds i8, i8* %8, i32 %978
  %980 = load i8, i8* %979, align 1, !tbaa !127
  %981 = insertelement <64 x i8> %977, i8 %980, i32 30
  %982 = extractelement <64 x i32> %857, i32 31
  %983 = getelementptr inbounds i8, i8* %8, i32 %982
  %984 = load i8, i8* %983, align 1, !tbaa !127
  %985 = insertelement <64 x i8> %981, i8 %984, i32 31
  %986 = extractelement <64 x i32> %857, i32 32
  %987 = getelementptr inbounds i8, i8* %8, i32 %986
  %988 = load i8, i8* %987, align 1, !tbaa !127
  %989 = insertelement <64 x i8> %985, i8 %988, i32 32
  %990 = extractelement <64 x i32> %857, i32 33
  %991 = getelementptr inbounds i8, i8* %8, i32 %990
  %992 = load i8, i8* %991, align 1, !tbaa !127
  %993 = insertelement <64 x i8> %989, i8 %992, i32 33
  %994 = extractelement <64 x i32> %857, i32 34
  %995 = getelementptr inbounds i8, i8* %8, i32 %994
  %996 = load i8, i8* %995, align 1, !tbaa !127
  %997 = insertelement <64 x i8> %993, i8 %996, i32 34
  %998 = extractelement <64 x i32> %857, i32 35
  %999 = getelementptr inbounds i8, i8* %8, i32 %998
  %1000 = load i8, i8* %999, align 1, !tbaa !127
  %1001 = insertelement <64 x i8> %997, i8 %1000, i32 35
  %1002 = extractelement <64 x i32> %857, i32 36
  %1003 = getelementptr inbounds i8, i8* %8, i32 %1002
  %1004 = load i8, i8* %1003, align 1, !tbaa !127
  %1005 = insertelement <64 x i8> %1001, i8 %1004, i32 36
  %1006 = extractelement <64 x i32> %857, i32 37
  %1007 = getelementptr inbounds i8, i8* %8, i32 %1006
  %1008 = load i8, i8* %1007, align 1, !tbaa !127
  %1009 = insertelement <64 x i8> %1005, i8 %1008, i32 37
  %1010 = extractelement <64 x i32> %857, i32 38
  %1011 = getelementptr inbounds i8, i8* %8, i32 %1010
  %1012 = load i8, i8* %1011, align 1, !tbaa !127
  %1013 = insertelement <64 x i8> %1009, i8 %1012, i32 38
  %1014 = extractelement <64 x i32> %857, i32 39
  %1015 = getelementptr inbounds i8, i8* %8, i32 %1014
  %1016 = load i8, i8* %1015, align 1, !tbaa !127
  %1017 = insertelement <64 x i8> %1013, i8 %1016, i32 39
  %1018 = extractelement <64 x i32> %857, i32 40
  %1019 = getelementptr inbounds i8, i8* %8, i32 %1018
  %1020 = load i8, i8* %1019, align 1, !tbaa !127
  %1021 = insertelement <64 x i8> %1017, i8 %1020, i32 40
  %1022 = extractelement <64 x i32> %857, i32 41
  %1023 = getelementptr inbounds i8, i8* %8, i32 %1022
  %1024 = load i8, i8* %1023, align 1, !tbaa !127
  %1025 = insertelement <64 x i8> %1021, i8 %1024, i32 41
  %1026 = extractelement <64 x i32> %857, i32 42
  %1027 = getelementptr inbounds i8, i8* %8, i32 %1026
  %1028 = load i8, i8* %1027, align 1, !tbaa !127
  %1029 = insertelement <64 x i8> %1025, i8 %1028, i32 42
  %1030 = extractelement <64 x i32> %857, i32 43
  %1031 = getelementptr inbounds i8, i8* %8, i32 %1030
  %1032 = load i8, i8* %1031, align 1, !tbaa !127
  %1033 = insertelement <64 x i8> %1029, i8 %1032, i32 43
  %1034 = extractelement <64 x i32> %857, i32 44
  %1035 = getelementptr inbounds i8, i8* %8, i32 %1034
  %1036 = load i8, i8* %1035, align 1, !tbaa !127
  %1037 = insertelement <64 x i8> %1033, i8 %1036, i32 44
  %1038 = extractelement <64 x i32> %857, i32 45
  %1039 = getelementptr inbounds i8, i8* %8, i32 %1038
  %1040 = load i8, i8* %1039, align 1, !tbaa !127
  %1041 = insertelement <64 x i8> %1037, i8 %1040, i32 45
  %1042 = extractelement <64 x i32> %857, i32 46
  %1043 = getelementptr inbounds i8, i8* %8, i32 %1042
  %1044 = load i8, i8* %1043, align 1, !tbaa !127
  %1045 = insertelement <64 x i8> %1041, i8 %1044, i32 46
  %1046 = extractelement <64 x i32> %857, i32 47
  %1047 = getelementptr inbounds i8, i8* %8, i32 %1046
  %1048 = load i8, i8* %1047, align 1, !tbaa !127
  %1049 = insertelement <64 x i8> %1045, i8 %1048, i32 47
  %1050 = extractelement <64 x i32> %857, i32 48
  %1051 = getelementptr inbounds i8, i8* %8, i32 %1050
  %1052 = load i8, i8* %1051, align 1, !tbaa !127
  %1053 = insertelement <64 x i8> %1049, i8 %1052, i32 48
  %1054 = extractelement <64 x i32> %857, i32 49
  %1055 = getelementptr inbounds i8, i8* %8, i32 %1054
  %1056 = load i8, i8* %1055, align 1, !tbaa !127
  %1057 = insertelement <64 x i8> %1053, i8 %1056, i32 49
  %1058 = extractelement <64 x i32> %857, i32 50
  %1059 = getelementptr inbounds i8, i8* %8, i32 %1058
  %1060 = load i8, i8* %1059, align 1, !tbaa !127
  %1061 = insertelement <64 x i8> %1057, i8 %1060, i32 50
  %1062 = extractelement <64 x i32> %857, i32 51
  %1063 = getelementptr inbounds i8, i8* %8, i32 %1062
  %1064 = load i8, i8* %1063, align 1, !tbaa !127
  %1065 = insertelement <64 x i8> %1061, i8 %1064, i32 51
  %1066 = extractelement <64 x i32> %857, i32 52
  %1067 = getelementptr inbounds i8, i8* %8, i32 %1066
  %1068 = load i8, i8* %1067, align 1, !tbaa !127
  %1069 = insertelement <64 x i8> %1065, i8 %1068, i32 52
  %1070 = extractelement <64 x i32> %857, i32 53
  %1071 = getelementptr inbounds i8, i8* %8, i32 %1070
  %1072 = load i8, i8* %1071, align 1, !tbaa !127
  %1073 = insertelement <64 x i8> %1069, i8 %1072, i32 53
  %1074 = extractelement <64 x i32> %857, i32 54
  %1075 = getelementptr inbounds i8, i8* %8, i32 %1074
  %1076 = load i8, i8* %1075, align 1, !tbaa !127
  %1077 = insertelement <64 x i8> %1073, i8 %1076, i32 54
  %1078 = extractelement <64 x i32> %857, i32 55
  %1079 = getelementptr inbounds i8, i8* %8, i32 %1078
  %1080 = load i8, i8* %1079, align 1, !tbaa !127
  %1081 = insertelement <64 x i8> %1077, i8 %1080, i32 55
  %1082 = extractelement <64 x i32> %857, i32 56
  %1083 = getelementptr inbounds i8, i8* %8, i32 %1082
  %1084 = load i8, i8* %1083, align 1, !tbaa !127
  %1085 = insertelement <64 x i8> %1081, i8 %1084, i32 56
  %1086 = extractelement <64 x i32> %857, i32 57
  %1087 = getelementptr inbounds i8, i8* %8, i32 %1086
  %1088 = load i8, i8* %1087, align 1, !tbaa !127
  %1089 = insertelement <64 x i8> %1085, i8 %1088, i32 57
  %1090 = extractelement <64 x i32> %857, i32 58
  %1091 = getelementptr inbounds i8, i8* %8, i32 %1090
  %1092 = load i8, i8* %1091, align 1, !tbaa !127
  %1093 = insertelement <64 x i8> %1089, i8 %1092, i32 58
  %1094 = extractelement <64 x i32> %857, i32 59
  %1095 = getelementptr inbounds i8, i8* %8, i32 %1094
  %1096 = load i8, i8* %1095, align 1, !tbaa !127
  %1097 = insertelement <64 x i8> %1093, i8 %1096, i32 59
  %1098 = extractelement <64 x i32> %857, i32 60
  %1099 = getelementptr inbounds i8, i8* %8, i32 %1098
  %1100 = load i8, i8* %1099, align 1, !tbaa !127
  %1101 = insertelement <64 x i8> %1097, i8 %1100, i32 60
  %1102 = extractelement <64 x i32> %857, i32 61
  %1103 = getelementptr inbounds i8, i8* %8, i32 %1102
  %1104 = load i8, i8* %1103, align 1, !tbaa !127
  %1105 = insertelement <64 x i8> %1101, i8 %1104, i32 61
  %1106 = extractelement <64 x i32> %857, i32 62
  %1107 = getelementptr inbounds i8, i8* %8, i32 %1106
  %1108 = load i8, i8* %1107, align 1, !tbaa !127
  %1109 = insertelement <64 x i8> %1105, i8 %1108, i32 62
  %1110 = extractelement <64 x i32> %857, i32 63
  %1111 = getelementptr inbounds i8, i8* %8, i32 %1110
  %1112 = load i8, i8* %1111, align 1, !tbaa !127
  %1113 = insertelement <64 x i8> %1109, i8 %1112, i32 63
  %1114 = getelementptr inbounds i8, i8* %855, i32 64
  %1115 = bitcast i8* %1114 to <64 x i8>*
  store <64 x i8> %1113, <64 x i8>* %1115, align 64, !tbaa !129
  %1116 = add nuw nsw i32 %resampled_input.s0.x.rebased14.us, 1
  %.not1862.us = icmp eq i32 %resampled_input.s0.x.rebased14.us, %t2228
  br i1 %.not1862.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %1117 = add nuw nsw i32 %resampled_input.s0.y.rebased11.us, 1
  %.not1860.us = icmp eq i32 %resampled_input.s0.y.rebased11.us, %t2227
  br i1 %.not1860.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7, %"for resampled_input.s0.y.rebased9.preheader"
  %1118 = mul nsw i32 %529, %25
  %t2255 = add i32 %449, %1118
  br i1 %139, label %"for output.s0.y.yo.preheader", label %"end for output.s0.y.yo", !prof !101

"for output.s0.y.yo.preheader":                   ; preds = %"consume resampled_input"
  %1119 = load <32 x i32>, <32 x i32>* %99, align 128
  %1120 = load <32 x i32>, <32 x i32>* %101, align 128
  %1121 = load <32 x i32>, <32 x i32>* %103, align 128
  %1122 = load <32 x i32>, <32 x i32>* %105, align 128
  %1123 = sext <32 x i32> %1119 to <32 x i64>
  %a35 = mul nsw <32 x i64> %180, %1123
  %1124 = icmp slt <32 x i64> %a35, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1125 = select <32 x i1> %1124, <32 x i64> %a35, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1126 = add nsw <32 x i64> %1125, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a34 = ashr <32 x i64> %1126, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1127 = icmp slt <32 x i64> %a34, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a33 = select <32 x i1> %1127, <32 x i64> %a34, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1128 = icmp sgt <32 x i64> %a33, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1129 = select <32 x i1> %1128, <32 x i64> %a33, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1130 = trunc <32 x i64> %1129 to <32 x i32>
  %1131 = sext <32 x i32> %1120 to <32 x i64>
  %a38 = mul nsw <32 x i64> %180, %1131
  %1132 = icmp slt <32 x i64> %a38, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1133 = select <32 x i1> %1132, <32 x i64> %a38, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1134 = add nsw <32 x i64> %1133, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a37 = ashr <32 x i64> %1134, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1135 = icmp slt <32 x i64> %a37, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a36 = select <32 x i1> %1135, <32 x i64> %a37, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1136 = icmp sgt <32 x i64> %a36, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1137 = select <32 x i1> %1136, <32 x i64> %a36, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1138 = trunc <32 x i64> %1137 to <32 x i32>
  %1139 = sext <32 x i32> %1121 to <32 x i64>
  %a41 = mul nsw <32 x i64> %180, %1139
  %1140 = icmp slt <32 x i64> %a41, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1141 = select <32 x i1> %1140, <32 x i64> %a41, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1142 = add nsw <32 x i64> %1141, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a40 = ashr <32 x i64> %1142, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1143 = icmp slt <32 x i64> %a40, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a39 = select <32 x i1> %1143, <32 x i64> %a40, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1144 = icmp sgt <32 x i64> %a39, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1145 = select <32 x i1> %1144, <32 x i64> %a39, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1146 = trunc <32 x i64> %1145 to <32 x i32>
  %1147 = sext <32 x i32> %1122 to <32 x i64>
  %a44 = mul nsw <32 x i64> %180, %1147
  %1148 = icmp slt <32 x i64> %a44, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1149 = select <32 x i1> %1148, <32 x i64> %a44, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1150 = add nsw <32 x i64> %1149, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a43 = ashr <32 x i64> %1150, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1151 = icmp slt <32 x i64> %a43, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a42 = select <32 x i1> %1151, <32 x i64> %a43, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1152 = icmp sgt <32 x i64> %a42, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1153 = select <32 x i1> %1152, <32 x i64> %a42, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1154 = trunc <32 x i64> %1153 to <32 x i32>
  br label %"for output.s0.y.yo"

"for output.s0.y.yo":                             ; preds = %"for output.s0.y.yo.preheader", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %1270, %"end for output.s0.x.xo" ], [ 0, %"for output.s0.y.yo.preheader" ]
  %a31 = shl nuw nsw i32 %output.s0.y.yo, 1
  %1155 = icmp slt i32 %a31, %b33
  %output.s0.y.y.base.s = select i1 %1155, i32 %a31, i32 %b33
  %1156 = add nsw i32 %output.s0.y.y.base.s, %22
  %1157 = mul nsw i32 %1156, %stride_y
  %1158 = add nsw i32 %1157, %140
  %t2283 = mul nsw i32 %1158, %130
  %1159 = add nsw i32 %1157, %141
  %t2286 = mul nsw i32 %1159, %130
  %1160 = add nsw i32 %1156, 1
  %1161 = mul nsw i32 %1160, %stride_y
  %1162 = add nsw i32 %1161, %140
  %t2288 = mul nsw i32 %1162, %130
  %1163 = add nsw i32 %1161, %141
  %t2289 = mul nsw i32 %1163, %130
  %1164 = sub nsw i32 %1157, %t2223
  %t2291 = mul nsw i32 %1164, %130
  %1165 = sub nsw i32 %1161, %t2223
  %t2293 = mul nsw i32 %1165, %130
  br i1 %144, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !101

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %1166 = add nsw i32 %t2283, %176
  %1167 = add nsw i32 %t2283, %177
  %1168 = sub nsw i32 %t2283, %t2225
  %1169 = add nsw i32 %t2286, %176
  %1170 = add nsw i32 %t2286, %177
  %1171 = sub nsw i32 %t2286, %t2225
  %1172 = add nsw i32 %t2291, %176
  %1173 = add nsw i32 %t2291, %177
  %1174 = sub nsw i32 %t2291, %t2225
  %1175 = add nsw i32 %t2288, %176
  %1176 = add nsw i32 %t2288, %177
  %1177 = sub nsw i32 %t2288, %t2225
  %1178 = add nsw i32 %t2289, %176
  %1179 = add nsw i32 %t2289, %177
  %1180 = sub nsw i32 %t2289, %t2225
  %1181 = add nsw i32 %t2293, %176
  %1182 = add nsw i32 %t2293, %177
  %1183 = sub nsw i32 %t2293, %t2225
  %1184 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %1185 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %1186 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %182) #11
  %1187 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1130, <32 x i32> %1186) #11
  %1188 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1187, <32 x i32> %1185) #11
  %1189 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1188) #11
  %1190 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1138, <32 x i32> %1186) #11
  %1191 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1190, <32 x i32> %1185) #11
  %1192 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1191, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1193 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1189, <32 x i32> %1192) #11
  %1194 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1193) #11
  %1195 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1194) #11
  %1196 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1193) #11
  %1197 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1196) #11
  %1198 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1195, <32 x i32> %1197) #11
  %1199 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1198) #11
  %1200 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1198) #11
  %1201 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1199, <32 x i32> %1200) #11
  %1202 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %1201) #11
  %1203 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1204 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1202, <32 x i32> %1203) #11
  %1205 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1184, <32 x i32> %1204) #11
  %1206 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %1207 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1208 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1146, <32 x i32> %1186) #11
  %1209 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1208, <32 x i32> %1185) #11
  %1210 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1209) #11
  %1211 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1154, <32 x i32> %1186) #11
  %1212 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1211, <32 x i32> %1185) #11
  %1213 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1212, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1214 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1210, <32 x i32> %1213) #11
  %1215 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1214) #11
  %1216 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1215) #11
  %1217 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1214) #11
  %1218 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1217) #11
  %1219 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1216, <32 x i32> %1218) #11
  %1220 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1219) #11
  %1221 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1219) #11
  %1222 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1220, <32 x i32> %1221) #11
  %1223 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %186, <32 x i32> %1222) #11
  %1224 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1207, <32 x i32> %1223) #11
  %1225 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1206, <32 x i32> %1224) #11
  %1226 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1205, <32 x i32> %1225) #11
  %1227 = bitcast <64 x i32> %1226 to <32 x i64>
  %1228 = shufflevector <32 x i64> %1227, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1229 = bitcast <8 x i64> %1228 to <32 x i16>
  %1230 = trunc <32 x i16> %1229 to <32 x i8>
  %1231 = shufflevector <32 x i8> %1230, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1232 = bitcast <128 x i8> %1231 to <32 x i32>
  %1233 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1232, <32 x i32> %189) #11
  %1234 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1233, <32 x i32> %192) #11
  %1235 = bitcast <32 x i32> %1234 to <128 x i8>
  %1236 = shufflevector <128 x i8> %1235, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1237 = mul nsw i32 %1156, %24
  %1238 = add nsw i32 %1237, %t2255
  %1239 = shufflevector <32 x i64> %1227, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1240 = bitcast <8 x i64> %1239 to <32 x i16>
  %1241 = trunc <32 x i16> %1240 to <32 x i8>
  %1242 = shufflevector <32 x i8> %1241, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1243 = bitcast <128 x i8> %1242 to <32 x i32>
  %1244 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1243, <32 x i32> %189) #11
  %1245 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1244, <32 x i32> %192) #11
  %1246 = bitcast <32 x i32> %1245 to <128 x i8>
  %1247 = shufflevector <128 x i8> %1246, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1248 = shufflevector <32 x i64> %1227, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1249 = bitcast <8 x i64> %1248 to <32 x i16>
  %1250 = trunc <32 x i16> %1249 to <32 x i8>
  %1251 = shufflevector <32 x i8> %1250, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1252 = bitcast <128 x i8> %1251 to <32 x i32>
  %1253 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1252, <32 x i32> %189) #11
  %1254 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1253, <32 x i32> %192) #11
  %1255 = bitcast <32 x i32> %1254 to <128 x i8>
  %1256 = shufflevector <128 x i8> %1255, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1257 = shufflevector <32 x i64> %1227, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1258 = bitcast <8 x i64> %1257 to <32 x i16>
  %1259 = trunc <32 x i16> %1258 to <32 x i8>
  %1260 = shufflevector <32 x i8> %1259, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1261 = bitcast <128 x i8> %1260 to <32 x i32>
  %1262 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1261, <32 x i32> %189) #11
  %1263 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1262, <32 x i32> %192) #11
  %1264 = bitcast <32 x i32> %1263 to <128 x i8>
  %1265 = shufflevector <128 x i8> %1264, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1266 = mul nsw i32 %1160, %24
  %1267 = add nsw i32 %1266, %t2255
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %1268 = add nuw nsw i32 %output.s0.b.rebased, 1
  %.not1855 = icmp eq i32 %1268, %15
  br i1 %.not1855, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %2676, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a32 = shl nuw nsw i32 %output.s0.x.xo, 1
  %1269 = icmp slt i32 %a32, %b34
  %output.s0.x.x.base.s = select i1 %1269, i32 %a32, i32 %b34
  store <32 x i32> %1119, <32 x i32>* %145, align 128, !tbaa !131
  store <32 x i32> %1120, <32 x i32>* %147, align 128, !tbaa !139
  store <32 x i32> %1121, <32 x i32>* %149, align 128, !tbaa !141
  store <32 x i32> %1122, <32 x i32>* %151, align 128, !tbaa !144
  store <32 x i32> %1119, <32 x i32>* %153, align 128, !tbaa !146
  store <32 x i32> %1120, <32 x i32>* %155, align 128, !tbaa !150
  store <32 x i32> %1121, <32 x i32>* %157, align 128, !tbaa !152
  store <32 x i32> %1122, <32 x i32>* %159, align 128, !tbaa !155
  store <32 x i32> %1119, <32 x i32>* %161, align 128, !tbaa !157
  store <32 x i32> %1120, <32 x i32>* %163, align 128, !tbaa !162
  store <32 x i32> %1121, <32 x i32>* %165, align 128, !tbaa !164
  store <32 x i32> %1122, <32 x i32>* %167, align 128, !tbaa !167
  store <32 x i32> %1119, <32 x i32>* %169, align 128, !tbaa !169
  store <32 x i32> %1120, <32 x i32>* %171, align 128, !tbaa !173
  store <32 x i32> %1121, <32 x i32>* %173, align 128, !tbaa !175
  store <32 x i32> %1122, <32 x i32>* %175, align 128, !tbaa !178
  br i1 %t2217, label %then_bb26, label %next_bb27

"end for output.s0.x.xo":                         ; preds = %"consume convolved", %"for output.s0.y.yo"
  %1270 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not1856 = icmp eq i32 %1270, %138
  br i1 %.not1856, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb26:                                        ; preds = %"for output.s0.x.xo"
  %1271 = load <32 x i16>, <32 x i16>* %452, align 128, !tbaa !105
  %1272 = sext <32 x i16> %1271 to <32 x i32>
  %1273 = add nsw i32 %output.s0.x.x.base.s, %19
  %1274 = mul nsw i32 %1273, %stride_x
  %1275 = add nsw i32 %1274, %1166
  %1276 = shl nsw i32 %1275, 7
  %1277 = getelementptr inbounds i8, i8* %resampled_input, i32 %1276
  %1278 = bitcast i8* %1277 to <32 x i8>*
  %1279 = load <32 x i8>, <32 x i8>* %1278, align 128, !tbaa !129
  %1280 = zext <32 x i8> %1279 to <32 x i32>
  %1281 = load <32 x i16>, <32 x i16>* %454, align 64, !tbaa !105
  %1282 = sext <32 x i16> %1281 to <32 x i32>
  %1283 = getelementptr inbounds i8, i8* %1277, i32 32
  %1284 = bitcast i8* %1283 to <32 x i8>*
  %1285 = load <32 x i8>, <32 x i8>* %1284, align 32, !tbaa !129
  %1286 = zext <32 x i8> %1285 to <32 x i32>
  %1287 = load <32 x i16>, <32 x i16>* %456, align 128, !tbaa !105
  %1288 = sext <32 x i16> %1287 to <32 x i32>
  %1289 = add nsw i32 %1274, %1167
  %1290 = shl nsw i32 %1289, 7
  %1291 = getelementptr inbounds i8, i8* %resampled_input, i32 %1290
  %1292 = bitcast i8* %1291 to <32 x i8>*
  %1293 = load <32 x i8>, <32 x i8>* %1292, align 128, !tbaa !129
  %1294 = zext <32 x i8> %1293 to <32 x i32>
  %1295 = load <32 x i16>, <32 x i16>* %458, align 64, !tbaa !105
  %1296 = sext <32 x i16> %1295 to <32 x i32>
  %1297 = getelementptr inbounds i8, i8* %1291, i32 32
  %1298 = bitcast i8* %1297 to <32 x i8>*
  %1299 = load <32 x i8>, <32 x i8>* %1298, align 32, !tbaa !129
  %1300 = zext <32 x i8> %1299 to <32 x i32>
  %1301 = load <32 x i16>, <32 x i16>* %459, align 128, !tbaa !105
  %1302 = sext <32 x i16> %1301 to <32 x i32>
  %1303 = add nsw i32 %1274, %1168
  %1304 = shl nsw i32 %1303, 7
  %1305 = getelementptr inbounds i8, i8* %resampled_input, i32 %1304
  %1306 = bitcast i8* %1305 to <32 x i8>*
  %1307 = load <32 x i8>, <32 x i8>* %1306, align 128, !tbaa !129
  %1308 = zext <32 x i8> %1307 to <32 x i32>
  %1309 = load <32 x i16>, <32 x i16>* %461, align 64, !tbaa !105
  %1310 = sext <32 x i16> %1309 to <32 x i32>
  %1311 = getelementptr inbounds i8, i8* %1305, i32 32
  %1312 = bitcast i8* %1311 to <32 x i8>*
  %1313 = load <32 x i8>, <32 x i8>* %1312, align 32, !tbaa !129
  %1314 = zext <32 x i8> %1313 to <32 x i32>
  %1315 = load <32 x i16>, <32 x i16>* %464, align 128, !tbaa !105
  %1316 = sext <32 x i16> %1315 to <32 x i32>
  %1317 = add nsw i32 %1274, %1169
  %1318 = shl nsw i32 %1317, 7
  %1319 = getelementptr inbounds i8, i8* %resampled_input, i32 %1318
  %1320 = bitcast i8* %1319 to <32 x i8>*
  %1321 = load <32 x i8>, <32 x i8>* %1320, align 128, !tbaa !129
  %1322 = zext <32 x i8> %1321 to <32 x i32>
  %1323 = load <32 x i16>, <32 x i16>* %466, align 64, !tbaa !105
  %1324 = sext <32 x i16> %1323 to <32 x i32>
  %1325 = getelementptr inbounds i8, i8* %1319, i32 32
  %1326 = bitcast i8* %1325 to <32 x i8>*
  %1327 = load <32 x i8>, <32 x i8>* %1326, align 32, !tbaa !129
  %1328 = zext <32 x i8> %1327 to <32 x i32>
  %1329 = load <32 x i16>, <32 x i16>* %468, align 128, !tbaa !105
  %1330 = sext <32 x i16> %1329 to <32 x i32>
  %1331 = add nsw i32 %1274, %1170
  %1332 = shl nsw i32 %1331, 7
  %1333 = getelementptr inbounds i8, i8* %resampled_input, i32 %1332
  %1334 = bitcast i8* %1333 to <32 x i8>*
  %1335 = load <32 x i8>, <32 x i8>* %1334, align 128, !tbaa !129
  %1336 = zext <32 x i8> %1335 to <32 x i32>
  %1337 = load <32 x i16>, <32 x i16>* %470, align 64, !tbaa !105
  %1338 = sext <32 x i16> %1337 to <32 x i32>
  %1339 = getelementptr inbounds i8, i8* %1333, i32 32
  %1340 = bitcast i8* %1339 to <32 x i8>*
  %1341 = load <32 x i8>, <32 x i8>* %1340, align 32, !tbaa !129
  %1342 = zext <32 x i8> %1341 to <32 x i32>
  %1343 = load <32 x i16>, <32 x i16>* %471, align 128, !tbaa !105
  %1344 = sext <32 x i16> %1343 to <32 x i32>
  %1345 = add nsw i32 %1274, %1171
  %1346 = shl nsw i32 %1345, 7
  %1347 = getelementptr inbounds i8, i8* %resampled_input, i32 %1346
  %1348 = bitcast i8* %1347 to <32 x i8>*
  %1349 = load <32 x i8>, <32 x i8>* %1348, align 128, !tbaa !129
  %1350 = zext <32 x i8> %1349 to <32 x i32>
  %1351 = load <32 x i16>, <32 x i16>* %473, align 64, !tbaa !105
  %1352 = sext <32 x i16> %1351 to <32 x i32>
  %1353 = getelementptr inbounds i8, i8* %1347, i32 32
  %1354 = bitcast i8* %1353 to <32 x i8>*
  %1355 = load <32 x i8>, <32 x i8>* %1354, align 32, !tbaa !129
  %1356 = zext <32 x i8> %1355 to <32 x i32>
  %1357 = load <32 x i16>, <32 x i16>* %475, align 128, !tbaa !180
  %1358 = sext <32 x i16> %1357 to <32 x i32>
  %1359 = add nsw i32 %1274, %1172
  %1360 = shl nsw i32 %1359, 7
  %1361 = getelementptr inbounds i8, i8* %resampled_input, i32 %1360
  %1362 = bitcast i8* %1361 to <32 x i8>*
  %1363 = load <32 x i8>, <32 x i8>* %1362, align 128, !tbaa !129
  %1364 = zext <32 x i8> %1363 to <32 x i32>
  %1365 = load <32 x i16>, <32 x i16>* %477, align 128, !tbaa !187
  %1366 = sext <32 x i16> %1365 to <32 x i32>
  %1367 = getelementptr inbounds i8, i8* %1361, i32 32
  %1368 = bitcast i8* %1367 to <32 x i8>*
  %1369 = load <32 x i8>, <32 x i8>* %1368, align 32, !tbaa !129
  %1370 = zext <32 x i8> %1369 to <32 x i32>
  %1371 = load <32 x i16>, <32 x i16>* %479, align 128, !tbaa !189
  %1372 = sext <32 x i16> %1371 to <32 x i32>
  %1373 = add nsw i32 %1274, %1173
  %1374 = shl nsw i32 %1373, 7
  %1375 = getelementptr inbounds i8, i8* %resampled_input, i32 %1374
  %1376 = bitcast i8* %1375 to <32 x i8>*
  %1377 = load <32 x i8>, <32 x i8>* %1376, align 128, !tbaa !129
  %1378 = zext <32 x i8> %1377 to <32 x i32>
  %1379 = load <32 x i16>, <32 x i16>* %481, align 128, !tbaa !194
  %1380 = sext <32 x i16> %1379 to <32 x i32>
  %1381 = getelementptr inbounds i8, i8* %1375, i32 32
  %1382 = bitcast i8* %1381 to <32 x i8>*
  %1383 = load <32 x i8>, <32 x i8>* %1382, align 32, !tbaa !129
  %1384 = zext <32 x i8> %1383 to <32 x i32>
  %1385 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1120, <32 x i32> %1119)
  %1386 = load <32 x i16>, <32 x i16>* %482, align 128, !tbaa !196
  %1387 = sext <32 x i16> %1386 to <32 x i32>
  %1388 = add nsw i32 %1274, %1174
  %1389 = shl nsw i32 %1388, 7
  %1390 = getelementptr inbounds i8, i8* %resampled_input, i32 %1389
  %1391 = bitcast i8* %1390 to <32 x i8>*
  %1392 = load <32 x i8>, <32 x i8>* %1391, align 128, !tbaa !129
  %1393 = zext <32 x i8> %1392 to <32 x i32>
  %1394 = load <32 x i16>, <32 x i16>* %484, align 128, !tbaa !200
  %1395 = sext <32 x i16> %1394 to <32 x i32>
  %1396 = getelementptr inbounds i8, i8* %1390, i32 32
  %1397 = bitcast i8* %1396 to <32 x i8>*
  %1398 = load <32 x i8>, <32 x i8>* %1397, align 32, !tbaa !129
  %1399 = zext <32 x i8> %1398 to <32 x i32>
  %1400 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1393, <32 x i32> %1387) #11
  %1401 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1400, <32 x i32> %1393, <32 x i32> %1387) #11
  %1402 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1399, <32 x i32> %1395) #11
  %1403 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1402, <32 x i32> %1399, <32 x i32> %1395) #11
  %1404 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1401, <32 x i32> %1403) #11
  %1405 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1404, <64 x i32> %1385) #11
  %1406 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1378, <32 x i32> %1372) #11
  %1407 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1406, <32 x i32> %1378, <32 x i32> %1372) #11
  %1408 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1384, <32 x i32> %1380) #11
  %1409 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1408, <32 x i32> %1384, <32 x i32> %1380) #11
  %1410 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1407, <32 x i32> %1409) #11
  %1411 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1405, <64 x i32> %1410) #11
  %1412 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1364, <32 x i32> %1358) #11
  %1413 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1412, <32 x i32> %1364, <32 x i32> %1358) #11
  %1414 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1366) #11
  %1415 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1414, <32 x i32> %1370, <32 x i32> %1366) #11
  %1416 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1413, <32 x i32> %1415) #11
  %1417 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1411, <64 x i32> %1416) #11
  %1418 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1350, <32 x i32> %1344) #11
  %1419 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1418, <32 x i32> %1350, <32 x i32> %1344) #11
  %1420 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1356, <32 x i32> %1352) #11
  %1421 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1420, <32 x i32> %1356, <32 x i32> %1352) #11
  %1422 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1419, <32 x i32> %1421) #11
  %1423 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1417, <64 x i32> %1422) #11
  %1424 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1336, <32 x i32> %1330) #11
  %1425 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1424, <32 x i32> %1336, <32 x i32> %1330) #11
  %1426 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1342, <32 x i32> %1338) #11
  %1427 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1426, <32 x i32> %1342, <32 x i32> %1338) #11
  %1428 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1425, <32 x i32> %1427) #11
  %1429 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1423, <64 x i32> %1428) #11
  %1430 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1322, <32 x i32> %1316) #11
  %1431 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1430, <32 x i32> %1322, <32 x i32> %1316) #11
  %1432 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1328, <32 x i32> %1324) #11
  %1433 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1432, <32 x i32> %1328, <32 x i32> %1324) #11
  %1434 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1431, <32 x i32> %1433) #11
  %1435 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1429, <64 x i32> %1434) #11
  %1436 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1308, <32 x i32> %1302) #11
  %1437 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1436, <32 x i32> %1308, <32 x i32> %1302) #11
  %1438 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1314, <32 x i32> %1310) #11
  %1439 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1438, <32 x i32> %1314, <32 x i32> %1310) #11
  %1440 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1437, <32 x i32> %1439) #11
  %1441 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1435, <64 x i32> %1440) #11
  %1442 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1294, <32 x i32> %1288) #11
  %1443 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1442, <32 x i32> %1294, <32 x i32> %1288) #11
  %1444 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1300, <32 x i32> %1296) #11
  %1445 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1444, <32 x i32> %1300, <32 x i32> %1296) #11
  %1446 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1443, <32 x i32> %1445) #11
  %1447 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1441, <64 x i32> %1446) #11
  %1448 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1280, <32 x i32> %1272) #11
  %1449 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1448, <32 x i32> %1280, <32 x i32> %1272) #11
  %1450 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1286, <32 x i32> %1282) #11
  %1451 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1450, <32 x i32> %1286, <32 x i32> %1282) #11
  %1452 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1449, <32 x i32> %1451) #11
  %1453 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1447, <64 x i32> %1452) #11
  %1454 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1453)
  store <32 x i32> %1454, <32 x i32>* %145, align 128, !tbaa !131
  %1455 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1453)
  store <32 x i32> %1455, <32 x i32>* %147, align 128, !tbaa !139
  %1456 = load <32 x i16>, <32 x i16>* %486, align 128, !tbaa !105
  %1457 = sext <32 x i16> %1456 to <32 x i32>
  %1458 = getelementptr inbounds i8, i8* %1277, i32 64
  %1459 = bitcast i8* %1458 to <32 x i8>*
  %1460 = load <32 x i8>, <32 x i8>* %1459, align 64, !tbaa !129
  %1461 = zext <32 x i8> %1460 to <32 x i32>
  %1462 = load <32 x i16>, <32 x i16>* %488, align 64, !tbaa !105
  %1463 = sext <32 x i16> %1462 to <32 x i32>
  %1464 = getelementptr inbounds i8, i8* %1277, i32 96
  %1465 = bitcast i8* %1464 to <32 x i8>*
  %1466 = load <32 x i8>, <32 x i8>* %1465, align 32, !tbaa !129
  %1467 = zext <32 x i8> %1466 to <32 x i32>
  %1468 = load <32 x i16>, <32 x i16>* %490, align 128, !tbaa !105
  %1469 = sext <32 x i16> %1468 to <32 x i32>
  %1470 = getelementptr inbounds i8, i8* %1291, i32 64
  %1471 = bitcast i8* %1470 to <32 x i8>*
  %1472 = load <32 x i8>, <32 x i8>* %1471, align 64, !tbaa !129
  %1473 = zext <32 x i8> %1472 to <32 x i32>
  %1474 = load <32 x i16>, <32 x i16>* %492, align 64, !tbaa !105
  %1475 = sext <32 x i16> %1474 to <32 x i32>
  %1476 = getelementptr inbounds i8, i8* %1291, i32 96
  %1477 = bitcast i8* %1476 to <32 x i8>*
  %1478 = load <32 x i8>, <32 x i8>* %1477, align 32, !tbaa !129
  %1479 = zext <32 x i8> %1478 to <32 x i32>
  %1480 = load <32 x i16>, <32 x i16>* %494, align 128, !tbaa !105
  %1481 = sext <32 x i16> %1480 to <32 x i32>
  %1482 = getelementptr inbounds i8, i8* %1305, i32 64
  %1483 = bitcast i8* %1482 to <32 x i8>*
  %1484 = load <32 x i8>, <32 x i8>* %1483, align 64, !tbaa !129
  %1485 = zext <32 x i8> %1484 to <32 x i32>
  %1486 = load <32 x i16>, <32 x i16>* %496, align 64, !tbaa !105
  %1487 = sext <32 x i16> %1486 to <32 x i32>
  %1488 = getelementptr inbounds i8, i8* %1305, i32 96
  %1489 = bitcast i8* %1488 to <32 x i8>*
  %1490 = load <32 x i8>, <32 x i8>* %1489, align 32, !tbaa !129
  %1491 = zext <32 x i8> %1490 to <32 x i32>
  %1492 = load <32 x i16>, <32 x i16>* %498, align 128, !tbaa !105
  %1493 = sext <32 x i16> %1492 to <32 x i32>
  %1494 = getelementptr inbounds i8, i8* %1319, i32 64
  %1495 = bitcast i8* %1494 to <32 x i8>*
  %1496 = load <32 x i8>, <32 x i8>* %1495, align 64, !tbaa !129
  %1497 = zext <32 x i8> %1496 to <32 x i32>
  %1498 = load <32 x i16>, <32 x i16>* %500, align 64, !tbaa !105
  %1499 = sext <32 x i16> %1498 to <32 x i32>
  %1500 = getelementptr inbounds i8, i8* %1319, i32 96
  %1501 = bitcast i8* %1500 to <32 x i8>*
  %1502 = load <32 x i8>, <32 x i8>* %1501, align 32, !tbaa !129
  %1503 = zext <32 x i8> %1502 to <32 x i32>
  %1504 = load <32 x i16>, <32 x i16>* %502, align 128, !tbaa !105
  %1505 = sext <32 x i16> %1504 to <32 x i32>
  %1506 = getelementptr inbounds i8, i8* %1333, i32 64
  %1507 = bitcast i8* %1506 to <32 x i8>*
  %1508 = load <32 x i8>, <32 x i8>* %1507, align 64, !tbaa !129
  %1509 = zext <32 x i8> %1508 to <32 x i32>
  %1510 = load <32 x i16>, <32 x i16>* %504, align 64, !tbaa !105
  %1511 = sext <32 x i16> %1510 to <32 x i32>
  %1512 = getelementptr inbounds i8, i8* %1333, i32 96
  %1513 = bitcast i8* %1512 to <32 x i8>*
  %1514 = load <32 x i8>, <32 x i8>* %1513, align 32, !tbaa !129
  %1515 = zext <32 x i8> %1514 to <32 x i32>
  %1516 = load <32 x i16>, <32 x i16>* %506, align 128, !tbaa !105
  %1517 = sext <32 x i16> %1516 to <32 x i32>
  %1518 = getelementptr inbounds i8, i8* %1347, i32 64
  %1519 = bitcast i8* %1518 to <32 x i8>*
  %1520 = load <32 x i8>, <32 x i8>* %1519, align 64, !tbaa !129
  %1521 = zext <32 x i8> %1520 to <32 x i32>
  %1522 = load <32 x i16>, <32 x i16>* %508, align 64, !tbaa !105
  %1523 = sext <32 x i16> %1522 to <32 x i32>
  %1524 = getelementptr inbounds i8, i8* %1347, i32 96
  %1525 = bitcast i8* %1524 to <32 x i8>*
  %1526 = load <32 x i8>, <32 x i8>* %1525, align 32, !tbaa !129
  %1527 = zext <32 x i8> %1526 to <32 x i32>
  %1528 = load <32 x i16>, <32 x i16>* %510, align 128, !tbaa !202
  %1529 = sext <32 x i16> %1528 to <32 x i32>
  %1530 = getelementptr inbounds i8, i8* %1361, i32 64
  %1531 = bitcast i8* %1530 to <32 x i8>*
  %1532 = load <32 x i8>, <32 x i8>* %1531, align 64, !tbaa !129
  %1533 = zext <32 x i8> %1532 to <32 x i32>
  %1534 = load <32 x i16>, <32 x i16>* %512, align 128, !tbaa !205
  %1535 = sext <32 x i16> %1534 to <32 x i32>
  %1536 = getelementptr inbounds i8, i8* %1361, i32 96
  %1537 = bitcast i8* %1536 to <32 x i8>*
  %1538 = load <32 x i8>, <32 x i8>* %1537, align 32, !tbaa !129
  %1539 = zext <32 x i8> %1538 to <32 x i32>
  %1540 = load <32 x i16>, <32 x i16>* %514, align 128, !tbaa !207
  %1541 = sext <32 x i16> %1540 to <32 x i32>
  %1542 = getelementptr inbounds i8, i8* %1375, i32 64
  %1543 = bitcast i8* %1542 to <32 x i8>*
  %1544 = load <32 x i8>, <32 x i8>* %1543, align 64, !tbaa !129
  %1545 = zext <32 x i8> %1544 to <32 x i32>
  %1546 = load <32 x i16>, <32 x i16>* %516, align 128, !tbaa !210
  %1547 = sext <32 x i16> %1546 to <32 x i32>
  %1548 = getelementptr inbounds i8, i8* %1375, i32 96
  %1549 = bitcast i8* %1548 to <32 x i8>*
  %1550 = load <32 x i8>, <32 x i8>* %1549, align 32, !tbaa !129
  %1551 = zext <32 x i8> %1550 to <32 x i32>
  %1552 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1122, <32 x i32> %1121)
  %1553 = load <32 x i16>, <32 x i16>* %518, align 128, !tbaa !212
  %1554 = sext <32 x i16> %1553 to <32 x i32>
  %1555 = getelementptr inbounds i8, i8* %1390, i32 64
  %1556 = bitcast i8* %1555 to <32 x i8>*
  %1557 = load <32 x i8>, <32 x i8>* %1556, align 64, !tbaa !129
  %1558 = zext <32 x i8> %1557 to <32 x i32>
  %1559 = load <32 x i16>, <32 x i16>* %520, align 128, !tbaa !215
  %1560 = sext <32 x i16> %1559 to <32 x i32>
  %1561 = getelementptr inbounds i8, i8* %1390, i32 96
  %1562 = bitcast i8* %1561 to <32 x i8>*
  %1563 = load <32 x i8>, <32 x i8>* %1562, align 32, !tbaa !129
  %1564 = zext <32 x i8> %1563 to <32 x i32>
  %1565 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1558, <32 x i32> %1554) #11
  %1566 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1565, <32 x i32> %1558, <32 x i32> %1554) #11
  %1567 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1564, <32 x i32> %1560) #11
  %1568 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1567, <32 x i32> %1564, <32 x i32> %1560) #11
  %1569 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1566, <32 x i32> %1568) #11
  %1570 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1569, <64 x i32> %1552) #11
  %1571 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1545, <32 x i32> %1541) #11
  %1572 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1571, <32 x i32> %1545, <32 x i32> %1541) #11
  %1573 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1551, <32 x i32> %1547) #11
  %1574 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1573, <32 x i32> %1551, <32 x i32> %1547) #11
  %1575 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1572, <32 x i32> %1574) #11
  %1576 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1570, <64 x i32> %1575) #11
  %1577 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1533, <32 x i32> %1529) #11
  %1578 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1577, <32 x i32> %1533, <32 x i32> %1529) #11
  %1579 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1539, <32 x i32> %1535) #11
  %1580 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1579, <32 x i32> %1539, <32 x i32> %1535) #11
  %1581 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1578, <32 x i32> %1580) #11
  %1582 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1576, <64 x i32> %1581) #11
  %1583 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1521, <32 x i32> %1517) #11
  %1584 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1583, <32 x i32> %1521, <32 x i32> %1517) #11
  %1585 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1527, <32 x i32> %1523) #11
  %1586 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1585, <32 x i32> %1527, <32 x i32> %1523) #11
  %1587 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1584, <32 x i32> %1586) #11
  %1588 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1582, <64 x i32> %1587) #11
  %1589 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1509, <32 x i32> %1505) #11
  %1590 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1589, <32 x i32> %1509, <32 x i32> %1505) #11
  %1591 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1515, <32 x i32> %1511) #11
  %1592 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1591, <32 x i32> %1515, <32 x i32> %1511) #11
  %1593 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1590, <32 x i32> %1592) #11
  %1594 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1588, <64 x i32> %1593) #11
  %1595 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1497, <32 x i32> %1493) #11
  %1596 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1595, <32 x i32> %1497, <32 x i32> %1493) #11
  %1597 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1503, <32 x i32> %1499) #11
  %1598 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1597, <32 x i32> %1503, <32 x i32> %1499) #11
  %1599 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1596, <32 x i32> %1598) #11
  %1600 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1594, <64 x i32> %1599) #11
  %1601 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1485, <32 x i32> %1481) #11
  %1602 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1601, <32 x i32> %1485, <32 x i32> %1481) #11
  %1603 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1491, <32 x i32> %1487) #11
  %1604 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1603, <32 x i32> %1491, <32 x i32> %1487) #11
  %1605 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1602, <32 x i32> %1604) #11
  %1606 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1600, <64 x i32> %1605) #11
  %1607 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1473, <32 x i32> %1469) #11
  %1608 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1607, <32 x i32> %1473, <32 x i32> %1469) #11
  %1609 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1479, <32 x i32> %1475) #11
  %1610 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1609, <32 x i32> %1479, <32 x i32> %1475) #11
  %1611 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1608, <32 x i32> %1610) #11
  %1612 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1606, <64 x i32> %1611) #11
  %1613 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1461, <32 x i32> %1457) #11
  %1614 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1613, <32 x i32> %1461, <32 x i32> %1457) #11
  %1615 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1467, <32 x i32> %1463) #11
  %1616 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1615, <32 x i32> %1467, <32 x i32> %1463) #11
  %1617 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1614, <32 x i32> %1616) #11
  %1618 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1612, <64 x i32> %1617) #11
  %1619 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1618)
  store <32 x i32> %1619, <32 x i32>* %149, align 128, !tbaa !141
  %1620 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1618)
  store <32 x i32> %1620, <32 x i32>* %151, align 128, !tbaa !144
  %1621 = add nsw i32 %1273, 1
  %1622 = mul nsw i32 %1621, %stride_x
  %1623 = add nsw i32 %1622, %1166
  %1624 = shl nsw i32 %1623, 7
  %1625 = getelementptr inbounds i8, i8* %resampled_input, i32 %1624
  %1626 = bitcast i8* %1625 to <32 x i8>*
  %1627 = load <32 x i8>, <32 x i8>* %1626, align 128, !tbaa !129
  %1628 = zext <32 x i8> %1627 to <32 x i32>
  %1629 = getelementptr inbounds i8, i8* %1625, i32 32
  %1630 = bitcast i8* %1629 to <32 x i8>*
  %1631 = load <32 x i8>, <32 x i8>* %1630, align 32, !tbaa !129
  %1632 = zext <32 x i8> %1631 to <32 x i32>
  %1633 = add nsw i32 %1622, %1167
  %1634 = shl nsw i32 %1633, 7
  %1635 = getelementptr inbounds i8, i8* %resampled_input, i32 %1634
  %1636 = bitcast i8* %1635 to <32 x i8>*
  %1637 = load <32 x i8>, <32 x i8>* %1636, align 128, !tbaa !129
  %1638 = zext <32 x i8> %1637 to <32 x i32>
  %1639 = getelementptr inbounds i8, i8* %1635, i32 32
  %1640 = bitcast i8* %1639 to <32 x i8>*
  %1641 = load <32 x i8>, <32 x i8>* %1640, align 32, !tbaa !129
  %1642 = zext <32 x i8> %1641 to <32 x i32>
  %1643 = add nsw i32 %1622, %1168
  %1644 = shl nsw i32 %1643, 7
  %1645 = getelementptr inbounds i8, i8* %resampled_input, i32 %1644
  %1646 = bitcast i8* %1645 to <32 x i8>*
  %1647 = load <32 x i8>, <32 x i8>* %1646, align 128, !tbaa !129
  %1648 = zext <32 x i8> %1647 to <32 x i32>
  %1649 = getelementptr inbounds i8, i8* %1645, i32 32
  %1650 = bitcast i8* %1649 to <32 x i8>*
  %1651 = load <32 x i8>, <32 x i8>* %1650, align 32, !tbaa !129
  %1652 = zext <32 x i8> %1651 to <32 x i32>
  %1653 = add nsw i32 %1622, %1169
  %1654 = shl nsw i32 %1653, 7
  %1655 = getelementptr inbounds i8, i8* %resampled_input, i32 %1654
  %1656 = bitcast i8* %1655 to <32 x i8>*
  %1657 = load <32 x i8>, <32 x i8>* %1656, align 128, !tbaa !129
  %1658 = zext <32 x i8> %1657 to <32 x i32>
  %1659 = getelementptr inbounds i8, i8* %1655, i32 32
  %1660 = bitcast i8* %1659 to <32 x i8>*
  %1661 = load <32 x i8>, <32 x i8>* %1660, align 32, !tbaa !129
  %1662 = zext <32 x i8> %1661 to <32 x i32>
  %1663 = add nsw i32 %1622, %1170
  %1664 = shl nsw i32 %1663, 7
  %1665 = getelementptr inbounds i8, i8* %resampled_input, i32 %1664
  %1666 = bitcast i8* %1665 to <32 x i8>*
  %1667 = load <32 x i8>, <32 x i8>* %1666, align 128, !tbaa !129
  %1668 = zext <32 x i8> %1667 to <32 x i32>
  %1669 = getelementptr inbounds i8, i8* %1665, i32 32
  %1670 = bitcast i8* %1669 to <32 x i8>*
  %1671 = load <32 x i8>, <32 x i8>* %1670, align 32, !tbaa !129
  %1672 = zext <32 x i8> %1671 to <32 x i32>
  %1673 = add nsw i32 %1622, %1171
  %1674 = shl nsw i32 %1673, 7
  %1675 = getelementptr inbounds i8, i8* %resampled_input, i32 %1674
  %1676 = bitcast i8* %1675 to <32 x i8>*
  %1677 = load <32 x i8>, <32 x i8>* %1676, align 128, !tbaa !129
  %1678 = zext <32 x i8> %1677 to <32 x i32>
  %1679 = getelementptr inbounds i8, i8* %1675, i32 32
  %1680 = bitcast i8* %1679 to <32 x i8>*
  %1681 = load <32 x i8>, <32 x i8>* %1680, align 32, !tbaa !129
  %1682 = zext <32 x i8> %1681 to <32 x i32>
  %1683 = add nsw i32 %1622, %1172
  %1684 = shl nsw i32 %1683, 7
  %1685 = getelementptr inbounds i8, i8* %resampled_input, i32 %1684
  %1686 = bitcast i8* %1685 to <32 x i8>*
  %1687 = load <32 x i8>, <32 x i8>* %1686, align 128, !tbaa !129
  %1688 = zext <32 x i8> %1687 to <32 x i32>
  %1689 = getelementptr inbounds i8, i8* %1685, i32 32
  %1690 = bitcast i8* %1689 to <32 x i8>*
  %1691 = load <32 x i8>, <32 x i8>* %1690, align 32, !tbaa !129
  %1692 = zext <32 x i8> %1691 to <32 x i32>
  %1693 = add nsw i32 %1622, %1173
  %1694 = shl nsw i32 %1693, 7
  %1695 = getelementptr inbounds i8, i8* %resampled_input, i32 %1694
  %1696 = bitcast i8* %1695 to <32 x i8>*
  %1697 = load <32 x i8>, <32 x i8>* %1696, align 128, !tbaa !129
  %1698 = zext <32 x i8> %1697 to <32 x i32>
  %1699 = getelementptr inbounds i8, i8* %1695, i32 32
  %1700 = bitcast i8* %1699 to <32 x i8>*
  %1701 = load <32 x i8>, <32 x i8>* %1700, align 32, !tbaa !129
  %1702 = zext <32 x i8> %1701 to <32 x i32>
  %1703 = add nsw i32 %1622, %1174
  %1704 = shl nsw i32 %1703, 7
  %1705 = getelementptr inbounds i8, i8* %resampled_input, i32 %1704
  %1706 = bitcast i8* %1705 to <32 x i8>*
  %1707 = load <32 x i8>, <32 x i8>* %1706, align 128, !tbaa !129
  %1708 = zext <32 x i8> %1707 to <32 x i32>
  %1709 = getelementptr inbounds i8, i8* %1705, i32 32
  %1710 = bitcast i8* %1709 to <32 x i8>*
  %1711 = load <32 x i8>, <32 x i8>* %1710, align 32, !tbaa !129
  %1712 = zext <32 x i8> %1711 to <32 x i32>
  %1713 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1708, <32 x i32> %1387) #11
  %1714 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1713, <32 x i32> %1708, <32 x i32> %1387) #11
  %1715 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1712, <32 x i32> %1395) #11
  %1716 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1715, <32 x i32> %1712, <32 x i32> %1395) #11
  %1717 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1714, <32 x i32> %1716) #11
  %1718 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1717, <64 x i32> %1385) #11
  %1719 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1698, <32 x i32> %1372) #11
  %1720 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1719, <32 x i32> %1698, <32 x i32> %1372) #11
  %1721 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1702, <32 x i32> %1380) #11
  %1722 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1721, <32 x i32> %1702, <32 x i32> %1380) #11
  %1723 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1720, <32 x i32> %1722) #11
  %1724 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1718, <64 x i32> %1723) #11
  %1725 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1688, <32 x i32> %1358) #11
  %1726 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1725, <32 x i32> %1688, <32 x i32> %1358) #11
  %1727 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1692, <32 x i32> %1366) #11
  %1728 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1727, <32 x i32> %1692, <32 x i32> %1366) #11
  %1729 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1726, <32 x i32> %1728) #11
  %1730 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1724, <64 x i32> %1729) #11
  %1731 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1678, <32 x i32> %1344) #11
  %1732 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1731, <32 x i32> %1678, <32 x i32> %1344) #11
  %1733 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1682, <32 x i32> %1352) #11
  %1734 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1733, <32 x i32> %1682, <32 x i32> %1352) #11
  %1735 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1732, <32 x i32> %1734) #11
  %1736 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1730, <64 x i32> %1735) #11
  %1737 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1668, <32 x i32> %1330) #11
  %1738 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1737, <32 x i32> %1668, <32 x i32> %1330) #11
  %1739 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1672, <32 x i32> %1338) #11
  %1740 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1739, <32 x i32> %1672, <32 x i32> %1338) #11
  %1741 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1738, <32 x i32> %1740) #11
  %1742 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1736, <64 x i32> %1741) #11
  %1743 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1658, <32 x i32> %1316) #11
  %1744 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1743, <32 x i32> %1658, <32 x i32> %1316) #11
  %1745 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1662, <32 x i32> %1324) #11
  %1746 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1745, <32 x i32> %1662, <32 x i32> %1324) #11
  %1747 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1744, <32 x i32> %1746) #11
  %1748 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1742, <64 x i32> %1747) #11
  %1749 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1648, <32 x i32> %1302) #11
  %1750 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1749, <32 x i32> %1648, <32 x i32> %1302) #11
  %1751 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1652, <32 x i32> %1310) #11
  %1752 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1751, <32 x i32> %1652, <32 x i32> %1310) #11
  %1753 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1750, <32 x i32> %1752) #11
  %1754 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1748, <64 x i32> %1753) #11
  %1755 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1638, <32 x i32> %1288) #11
  %1756 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1755, <32 x i32> %1638, <32 x i32> %1288) #11
  %1757 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1642, <32 x i32> %1296) #11
  %1758 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1757, <32 x i32> %1642, <32 x i32> %1296) #11
  %1759 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1756, <32 x i32> %1758) #11
  %1760 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1754, <64 x i32> %1759) #11
  %1761 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1628, <32 x i32> %1272) #11
  %1762 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1761, <32 x i32> %1628, <32 x i32> %1272) #11
  %1763 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1632, <32 x i32> %1282) #11
  %1764 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1763, <32 x i32> %1632, <32 x i32> %1282) #11
  %1765 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1762, <32 x i32> %1764) #11
  %1766 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1760, <64 x i32> %1765) #11
  %1767 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1766)
  store <32 x i32> %1767, <32 x i32>* %153, align 128, !tbaa !146
  %1768 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1766)
  store <32 x i32> %1768, <32 x i32>* %155, align 128, !tbaa !150
  %1769 = getelementptr inbounds i8, i8* %1625, i32 64
  %1770 = bitcast i8* %1769 to <32 x i8>*
  %1771 = load <32 x i8>, <32 x i8>* %1770, align 64, !tbaa !129
  %1772 = zext <32 x i8> %1771 to <32 x i32>
  %1773 = getelementptr inbounds i8, i8* %1625, i32 96
  %1774 = bitcast i8* %1773 to <32 x i8>*
  %1775 = load <32 x i8>, <32 x i8>* %1774, align 32, !tbaa !129
  %1776 = zext <32 x i8> %1775 to <32 x i32>
  %1777 = getelementptr inbounds i8, i8* %1635, i32 64
  %1778 = bitcast i8* %1777 to <32 x i8>*
  %1779 = load <32 x i8>, <32 x i8>* %1778, align 64, !tbaa !129
  %1780 = zext <32 x i8> %1779 to <32 x i32>
  %1781 = getelementptr inbounds i8, i8* %1635, i32 96
  %1782 = bitcast i8* %1781 to <32 x i8>*
  %1783 = load <32 x i8>, <32 x i8>* %1782, align 32, !tbaa !129
  %1784 = zext <32 x i8> %1783 to <32 x i32>
  %1785 = getelementptr inbounds i8, i8* %1645, i32 64
  %1786 = bitcast i8* %1785 to <32 x i8>*
  %1787 = load <32 x i8>, <32 x i8>* %1786, align 64, !tbaa !129
  %1788 = zext <32 x i8> %1787 to <32 x i32>
  %1789 = getelementptr inbounds i8, i8* %1645, i32 96
  %1790 = bitcast i8* %1789 to <32 x i8>*
  %1791 = load <32 x i8>, <32 x i8>* %1790, align 32, !tbaa !129
  %1792 = zext <32 x i8> %1791 to <32 x i32>
  %1793 = getelementptr inbounds i8, i8* %1655, i32 64
  %1794 = bitcast i8* %1793 to <32 x i8>*
  %1795 = load <32 x i8>, <32 x i8>* %1794, align 64, !tbaa !129
  %1796 = zext <32 x i8> %1795 to <32 x i32>
  %1797 = getelementptr inbounds i8, i8* %1655, i32 96
  %1798 = bitcast i8* %1797 to <32 x i8>*
  %1799 = load <32 x i8>, <32 x i8>* %1798, align 32, !tbaa !129
  %1800 = zext <32 x i8> %1799 to <32 x i32>
  %1801 = getelementptr inbounds i8, i8* %1665, i32 64
  %1802 = bitcast i8* %1801 to <32 x i8>*
  %1803 = load <32 x i8>, <32 x i8>* %1802, align 64, !tbaa !129
  %1804 = zext <32 x i8> %1803 to <32 x i32>
  %1805 = getelementptr inbounds i8, i8* %1665, i32 96
  %1806 = bitcast i8* %1805 to <32 x i8>*
  %1807 = load <32 x i8>, <32 x i8>* %1806, align 32, !tbaa !129
  %1808 = zext <32 x i8> %1807 to <32 x i32>
  %1809 = getelementptr inbounds i8, i8* %1675, i32 64
  %1810 = bitcast i8* %1809 to <32 x i8>*
  %1811 = load <32 x i8>, <32 x i8>* %1810, align 64, !tbaa !129
  %1812 = zext <32 x i8> %1811 to <32 x i32>
  %1813 = getelementptr inbounds i8, i8* %1675, i32 96
  %1814 = bitcast i8* %1813 to <32 x i8>*
  %1815 = load <32 x i8>, <32 x i8>* %1814, align 32, !tbaa !129
  %1816 = zext <32 x i8> %1815 to <32 x i32>
  %1817 = getelementptr inbounds i8, i8* %1685, i32 64
  %1818 = bitcast i8* %1817 to <32 x i8>*
  %1819 = load <32 x i8>, <32 x i8>* %1818, align 64, !tbaa !129
  %1820 = zext <32 x i8> %1819 to <32 x i32>
  %1821 = getelementptr inbounds i8, i8* %1685, i32 96
  %1822 = bitcast i8* %1821 to <32 x i8>*
  %1823 = load <32 x i8>, <32 x i8>* %1822, align 32, !tbaa !129
  %1824 = zext <32 x i8> %1823 to <32 x i32>
  %1825 = getelementptr inbounds i8, i8* %1695, i32 64
  %1826 = bitcast i8* %1825 to <32 x i8>*
  %1827 = load <32 x i8>, <32 x i8>* %1826, align 64, !tbaa !129
  %1828 = zext <32 x i8> %1827 to <32 x i32>
  %1829 = getelementptr inbounds i8, i8* %1695, i32 96
  %1830 = bitcast i8* %1829 to <32 x i8>*
  %1831 = load <32 x i8>, <32 x i8>* %1830, align 32, !tbaa !129
  %1832 = zext <32 x i8> %1831 to <32 x i32>
  %1833 = getelementptr inbounds i8, i8* %1705, i32 64
  %1834 = bitcast i8* %1833 to <32 x i8>*
  %1835 = load <32 x i8>, <32 x i8>* %1834, align 64, !tbaa !129
  %1836 = zext <32 x i8> %1835 to <32 x i32>
  %1837 = getelementptr inbounds i8, i8* %1705, i32 96
  %1838 = bitcast i8* %1837 to <32 x i8>*
  %1839 = load <32 x i8>, <32 x i8>* %1838, align 32, !tbaa !129
  %1840 = zext <32 x i8> %1839 to <32 x i32>
  %1841 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1836, <32 x i32> %1554) #11
  %1842 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1841, <32 x i32> %1836, <32 x i32> %1554) #11
  %1843 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1840, <32 x i32> %1560) #11
  %1844 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1843, <32 x i32> %1840, <32 x i32> %1560) #11
  %1845 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1842, <32 x i32> %1844) #11
  %1846 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1845, <64 x i32> %1552) #11
  %1847 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1828, <32 x i32> %1541) #11
  %1848 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1847, <32 x i32> %1828, <32 x i32> %1541) #11
  %1849 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1832, <32 x i32> %1547) #11
  %1850 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1849, <32 x i32> %1832, <32 x i32> %1547) #11
  %1851 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1848, <32 x i32> %1850) #11
  %1852 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1846, <64 x i32> %1851) #11
  %1853 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1820, <32 x i32> %1529) #11
  %1854 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1853, <32 x i32> %1820, <32 x i32> %1529) #11
  %1855 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1824, <32 x i32> %1535) #11
  %1856 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1855, <32 x i32> %1824, <32 x i32> %1535) #11
  %1857 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1854, <32 x i32> %1856) #11
  %1858 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1852, <64 x i32> %1857) #11
  %1859 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1812, <32 x i32> %1517) #11
  %1860 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1859, <32 x i32> %1812, <32 x i32> %1517) #11
  %1861 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1816, <32 x i32> %1523) #11
  %1862 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1861, <32 x i32> %1816, <32 x i32> %1523) #11
  %1863 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1860, <32 x i32> %1862) #11
  %1864 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1858, <64 x i32> %1863) #11
  %1865 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1804, <32 x i32> %1505) #11
  %1866 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1865, <32 x i32> %1804, <32 x i32> %1505) #11
  %1867 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1808, <32 x i32> %1511) #11
  %1868 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1867, <32 x i32> %1808, <32 x i32> %1511) #11
  %1869 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1866, <32 x i32> %1868) #11
  %1870 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1864, <64 x i32> %1869) #11
  %1871 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1796, <32 x i32> %1493) #11
  %1872 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1871, <32 x i32> %1796, <32 x i32> %1493) #11
  %1873 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1800, <32 x i32> %1499) #11
  %1874 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1873, <32 x i32> %1800, <32 x i32> %1499) #11
  %1875 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1872, <32 x i32> %1874) #11
  %1876 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1870, <64 x i32> %1875) #11
  %1877 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1788, <32 x i32> %1481) #11
  %1878 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1877, <32 x i32> %1788, <32 x i32> %1481) #11
  %1879 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1792, <32 x i32> %1487) #11
  %1880 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1879, <32 x i32> %1792, <32 x i32> %1487) #11
  %1881 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1878, <32 x i32> %1880) #11
  %1882 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1876, <64 x i32> %1881) #11
  %1883 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1780, <32 x i32> %1469) #11
  %1884 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1883, <32 x i32> %1780, <32 x i32> %1469) #11
  %1885 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1784, <32 x i32> %1475) #11
  %1886 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1885, <32 x i32> %1784, <32 x i32> %1475) #11
  %1887 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1884, <32 x i32> %1886) #11
  %1888 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1882, <64 x i32> %1887) #11
  %1889 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1772, <32 x i32> %1457) #11
  %1890 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1889, <32 x i32> %1772, <32 x i32> %1457) #11
  %1891 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1776, <32 x i32> %1463) #11
  %1892 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1891, <32 x i32> %1776, <32 x i32> %1463) #11
  %1893 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1890, <32 x i32> %1892) #11
  %1894 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1888, <64 x i32> %1893) #11
  %1895 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1894)
  store <32 x i32> %1895, <32 x i32>* %157, align 128, !tbaa !152
  %1896 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1894)
  store <32 x i32> %1896, <32 x i32>* %159, align 128, !tbaa !155
  %1897 = add nsw i32 %1274, %1175
  %1898 = shl nsw i32 %1897, 7
  %1899 = getelementptr inbounds i8, i8* %resampled_input, i32 %1898
  %1900 = bitcast i8* %1899 to <32 x i8>*
  %1901 = load <32 x i8>, <32 x i8>* %1900, align 128, !tbaa !129
  %1902 = zext <32 x i8> %1901 to <32 x i32>
  %1903 = getelementptr inbounds i8, i8* %1899, i32 32
  %1904 = bitcast i8* %1903 to <32 x i8>*
  %1905 = load <32 x i8>, <32 x i8>* %1904, align 32, !tbaa !129
  %1906 = zext <32 x i8> %1905 to <32 x i32>
  %1907 = add nsw i32 %1274, %1176
  %1908 = shl nsw i32 %1907, 7
  %1909 = getelementptr inbounds i8, i8* %resampled_input, i32 %1908
  %1910 = bitcast i8* %1909 to <32 x i8>*
  %1911 = load <32 x i8>, <32 x i8>* %1910, align 128, !tbaa !129
  %1912 = zext <32 x i8> %1911 to <32 x i32>
  %1913 = getelementptr inbounds i8, i8* %1909, i32 32
  %1914 = bitcast i8* %1913 to <32 x i8>*
  %1915 = load <32 x i8>, <32 x i8>* %1914, align 32, !tbaa !129
  %1916 = zext <32 x i8> %1915 to <32 x i32>
  %1917 = add nsw i32 %1274, %1177
  %1918 = shl nsw i32 %1917, 7
  %1919 = getelementptr inbounds i8, i8* %resampled_input, i32 %1918
  %1920 = bitcast i8* %1919 to <32 x i8>*
  %1921 = load <32 x i8>, <32 x i8>* %1920, align 128, !tbaa !129
  %1922 = zext <32 x i8> %1921 to <32 x i32>
  %1923 = getelementptr inbounds i8, i8* %1919, i32 32
  %1924 = bitcast i8* %1923 to <32 x i8>*
  %1925 = load <32 x i8>, <32 x i8>* %1924, align 32, !tbaa !129
  %1926 = zext <32 x i8> %1925 to <32 x i32>
  %1927 = add nsw i32 %1274, %1178
  %1928 = shl nsw i32 %1927, 7
  %1929 = getelementptr inbounds i8, i8* %resampled_input, i32 %1928
  %1930 = bitcast i8* %1929 to <32 x i8>*
  %1931 = load <32 x i8>, <32 x i8>* %1930, align 128, !tbaa !129
  %1932 = zext <32 x i8> %1931 to <32 x i32>
  %1933 = getelementptr inbounds i8, i8* %1929, i32 32
  %1934 = bitcast i8* %1933 to <32 x i8>*
  %1935 = load <32 x i8>, <32 x i8>* %1934, align 32, !tbaa !129
  %1936 = zext <32 x i8> %1935 to <32 x i32>
  %1937 = add nsw i32 %1274, %1179
  %1938 = shl nsw i32 %1937, 7
  %1939 = getelementptr inbounds i8, i8* %resampled_input, i32 %1938
  %1940 = bitcast i8* %1939 to <32 x i8>*
  %1941 = load <32 x i8>, <32 x i8>* %1940, align 128, !tbaa !129
  %1942 = zext <32 x i8> %1941 to <32 x i32>
  %1943 = getelementptr inbounds i8, i8* %1939, i32 32
  %1944 = bitcast i8* %1943 to <32 x i8>*
  %1945 = load <32 x i8>, <32 x i8>* %1944, align 32, !tbaa !129
  %1946 = zext <32 x i8> %1945 to <32 x i32>
  %1947 = add nsw i32 %1274, %1180
  %1948 = shl nsw i32 %1947, 7
  %1949 = getelementptr inbounds i8, i8* %resampled_input, i32 %1948
  %1950 = bitcast i8* %1949 to <32 x i8>*
  %1951 = load <32 x i8>, <32 x i8>* %1950, align 128, !tbaa !129
  %1952 = zext <32 x i8> %1951 to <32 x i32>
  %1953 = getelementptr inbounds i8, i8* %1949, i32 32
  %1954 = bitcast i8* %1953 to <32 x i8>*
  %1955 = load <32 x i8>, <32 x i8>* %1954, align 32, !tbaa !129
  %1956 = zext <32 x i8> %1955 to <32 x i32>
  %1957 = add nsw i32 %1274, %1181
  %1958 = shl nsw i32 %1957, 7
  %1959 = getelementptr inbounds i8, i8* %resampled_input, i32 %1958
  %1960 = bitcast i8* %1959 to <32 x i8>*
  %1961 = load <32 x i8>, <32 x i8>* %1960, align 128, !tbaa !129
  %1962 = zext <32 x i8> %1961 to <32 x i32>
  %1963 = getelementptr inbounds i8, i8* %1959, i32 32
  %1964 = bitcast i8* %1963 to <32 x i8>*
  %1965 = load <32 x i8>, <32 x i8>* %1964, align 32, !tbaa !129
  %1966 = zext <32 x i8> %1965 to <32 x i32>
  %1967 = add nsw i32 %1274, %1182
  %1968 = shl nsw i32 %1967, 7
  %1969 = getelementptr inbounds i8, i8* %resampled_input, i32 %1968
  %1970 = bitcast i8* %1969 to <32 x i8>*
  %1971 = load <32 x i8>, <32 x i8>* %1970, align 128, !tbaa !129
  %1972 = zext <32 x i8> %1971 to <32 x i32>
  %1973 = getelementptr inbounds i8, i8* %1969, i32 32
  %1974 = bitcast i8* %1973 to <32 x i8>*
  %1975 = load <32 x i8>, <32 x i8>* %1974, align 32, !tbaa !129
  %1976 = zext <32 x i8> %1975 to <32 x i32>
  %1977 = add nsw i32 %1274, %1183
  %1978 = shl nsw i32 %1977, 7
  %1979 = getelementptr inbounds i8, i8* %resampled_input, i32 %1978
  %1980 = bitcast i8* %1979 to <32 x i8>*
  %1981 = load <32 x i8>, <32 x i8>* %1980, align 128, !tbaa !129
  %1982 = zext <32 x i8> %1981 to <32 x i32>
  %1983 = getelementptr inbounds i8, i8* %1979, i32 32
  %1984 = bitcast i8* %1983 to <32 x i8>*
  %1985 = load <32 x i8>, <32 x i8>* %1984, align 32, !tbaa !129
  %1986 = zext <32 x i8> %1985 to <32 x i32>
  %1987 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1982, <32 x i32> %1387) #11
  %1988 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1987, <32 x i32> %1982, <32 x i32> %1387) #11
  %1989 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1986, <32 x i32> %1395) #11
  %1990 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1989, <32 x i32> %1986, <32 x i32> %1395) #11
  %1991 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1988, <32 x i32> %1990) #11
  %1992 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1991, <64 x i32> %1385) #11
  %1993 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1972, <32 x i32> %1372) #11
  %1994 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1993, <32 x i32> %1972, <32 x i32> %1372) #11
  %1995 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1976, <32 x i32> %1380) #11
  %1996 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1995, <32 x i32> %1976, <32 x i32> %1380) #11
  %1997 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1994, <32 x i32> %1996) #11
  %1998 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1992, <64 x i32> %1997) #11
  %1999 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1962, <32 x i32> %1358) #11
  %2000 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1999, <32 x i32> %1962, <32 x i32> %1358) #11
  %2001 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1966, <32 x i32> %1366) #11
  %2002 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2001, <32 x i32> %1966, <32 x i32> %1366) #11
  %2003 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2000, <32 x i32> %2002) #11
  %2004 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1998, <64 x i32> %2003) #11
  %2005 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1952, <32 x i32> %1344) #11
  %2006 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2005, <32 x i32> %1952, <32 x i32> %1344) #11
  %2007 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1956, <32 x i32> %1352) #11
  %2008 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2007, <32 x i32> %1956, <32 x i32> %1352) #11
  %2009 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2006, <32 x i32> %2008) #11
  %2010 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2004, <64 x i32> %2009) #11
  %2011 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1942, <32 x i32> %1330) #11
  %2012 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2011, <32 x i32> %1942, <32 x i32> %1330) #11
  %2013 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1946, <32 x i32> %1338) #11
  %2014 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2013, <32 x i32> %1946, <32 x i32> %1338) #11
  %2015 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2012, <32 x i32> %2014) #11
  %2016 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2010, <64 x i32> %2015) #11
  %2017 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1932, <32 x i32> %1316) #11
  %2018 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2017, <32 x i32> %1932, <32 x i32> %1316) #11
  %2019 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1936, <32 x i32> %1324) #11
  %2020 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2019, <32 x i32> %1936, <32 x i32> %1324) #11
  %2021 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2018, <32 x i32> %2020) #11
  %2022 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2016, <64 x i32> %2021) #11
  %2023 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1922, <32 x i32> %1302) #11
  %2024 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2023, <32 x i32> %1922, <32 x i32> %1302) #11
  %2025 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1926, <32 x i32> %1310) #11
  %2026 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2025, <32 x i32> %1926, <32 x i32> %1310) #11
  %2027 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2024, <32 x i32> %2026) #11
  %2028 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2022, <64 x i32> %2027) #11
  %2029 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1912, <32 x i32> %1288) #11
  %2030 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2029, <32 x i32> %1912, <32 x i32> %1288) #11
  %2031 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1916, <32 x i32> %1296) #11
  %2032 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2031, <32 x i32> %1916, <32 x i32> %1296) #11
  %2033 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2030, <32 x i32> %2032) #11
  %2034 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2028, <64 x i32> %2033) #11
  %2035 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1902, <32 x i32> %1272) #11
  %2036 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2035, <32 x i32> %1902, <32 x i32> %1272) #11
  %2037 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1906, <32 x i32> %1282) #11
  %2038 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2037, <32 x i32> %1906, <32 x i32> %1282) #11
  %2039 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2036, <32 x i32> %2038) #11
  %2040 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2034, <64 x i32> %2039) #11
  %2041 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2040)
  store <32 x i32> %2041, <32 x i32>* %161, align 128, !tbaa !157
  %2042 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2040)
  store <32 x i32> %2042, <32 x i32>* %163, align 128, !tbaa !162
  %2043 = getelementptr inbounds i8, i8* %1899, i32 64
  %2044 = bitcast i8* %2043 to <32 x i8>*
  %2045 = load <32 x i8>, <32 x i8>* %2044, align 64, !tbaa !129
  %2046 = zext <32 x i8> %2045 to <32 x i32>
  %2047 = getelementptr inbounds i8, i8* %1899, i32 96
  %2048 = bitcast i8* %2047 to <32 x i8>*
  %2049 = load <32 x i8>, <32 x i8>* %2048, align 32, !tbaa !129
  %2050 = zext <32 x i8> %2049 to <32 x i32>
  %2051 = getelementptr inbounds i8, i8* %1909, i32 64
  %2052 = bitcast i8* %2051 to <32 x i8>*
  %2053 = load <32 x i8>, <32 x i8>* %2052, align 64, !tbaa !129
  %2054 = zext <32 x i8> %2053 to <32 x i32>
  %2055 = getelementptr inbounds i8, i8* %1909, i32 96
  %2056 = bitcast i8* %2055 to <32 x i8>*
  %2057 = load <32 x i8>, <32 x i8>* %2056, align 32, !tbaa !129
  %2058 = zext <32 x i8> %2057 to <32 x i32>
  %2059 = getelementptr inbounds i8, i8* %1919, i32 64
  %2060 = bitcast i8* %2059 to <32 x i8>*
  %2061 = load <32 x i8>, <32 x i8>* %2060, align 64, !tbaa !129
  %2062 = zext <32 x i8> %2061 to <32 x i32>
  %2063 = getelementptr inbounds i8, i8* %1919, i32 96
  %2064 = bitcast i8* %2063 to <32 x i8>*
  %2065 = load <32 x i8>, <32 x i8>* %2064, align 32, !tbaa !129
  %2066 = zext <32 x i8> %2065 to <32 x i32>
  %2067 = getelementptr inbounds i8, i8* %1929, i32 64
  %2068 = bitcast i8* %2067 to <32 x i8>*
  %2069 = load <32 x i8>, <32 x i8>* %2068, align 64, !tbaa !129
  %2070 = zext <32 x i8> %2069 to <32 x i32>
  %2071 = getelementptr inbounds i8, i8* %1929, i32 96
  %2072 = bitcast i8* %2071 to <32 x i8>*
  %2073 = load <32 x i8>, <32 x i8>* %2072, align 32, !tbaa !129
  %2074 = zext <32 x i8> %2073 to <32 x i32>
  %2075 = getelementptr inbounds i8, i8* %1939, i32 64
  %2076 = bitcast i8* %2075 to <32 x i8>*
  %2077 = load <32 x i8>, <32 x i8>* %2076, align 64, !tbaa !129
  %2078 = zext <32 x i8> %2077 to <32 x i32>
  %2079 = getelementptr inbounds i8, i8* %1939, i32 96
  %2080 = bitcast i8* %2079 to <32 x i8>*
  %2081 = load <32 x i8>, <32 x i8>* %2080, align 32, !tbaa !129
  %2082 = zext <32 x i8> %2081 to <32 x i32>
  %2083 = getelementptr inbounds i8, i8* %1949, i32 64
  %2084 = bitcast i8* %2083 to <32 x i8>*
  %2085 = load <32 x i8>, <32 x i8>* %2084, align 64, !tbaa !129
  %2086 = zext <32 x i8> %2085 to <32 x i32>
  %2087 = getelementptr inbounds i8, i8* %1949, i32 96
  %2088 = bitcast i8* %2087 to <32 x i8>*
  %2089 = load <32 x i8>, <32 x i8>* %2088, align 32, !tbaa !129
  %2090 = zext <32 x i8> %2089 to <32 x i32>
  %2091 = getelementptr inbounds i8, i8* %1959, i32 64
  %2092 = bitcast i8* %2091 to <32 x i8>*
  %2093 = load <32 x i8>, <32 x i8>* %2092, align 64, !tbaa !129
  %2094 = zext <32 x i8> %2093 to <32 x i32>
  %2095 = getelementptr inbounds i8, i8* %1959, i32 96
  %2096 = bitcast i8* %2095 to <32 x i8>*
  %2097 = load <32 x i8>, <32 x i8>* %2096, align 32, !tbaa !129
  %2098 = zext <32 x i8> %2097 to <32 x i32>
  %2099 = getelementptr inbounds i8, i8* %1969, i32 64
  %2100 = bitcast i8* %2099 to <32 x i8>*
  %2101 = load <32 x i8>, <32 x i8>* %2100, align 64, !tbaa !129
  %2102 = zext <32 x i8> %2101 to <32 x i32>
  %2103 = getelementptr inbounds i8, i8* %1969, i32 96
  %2104 = bitcast i8* %2103 to <32 x i8>*
  %2105 = load <32 x i8>, <32 x i8>* %2104, align 32, !tbaa !129
  %2106 = zext <32 x i8> %2105 to <32 x i32>
  %2107 = getelementptr inbounds i8, i8* %1979, i32 64
  %2108 = bitcast i8* %2107 to <32 x i8>*
  %2109 = load <32 x i8>, <32 x i8>* %2108, align 64, !tbaa !129
  %2110 = zext <32 x i8> %2109 to <32 x i32>
  %2111 = getelementptr inbounds i8, i8* %1979, i32 96
  %2112 = bitcast i8* %2111 to <32 x i8>*
  %2113 = load <32 x i8>, <32 x i8>* %2112, align 32, !tbaa !129
  %2114 = zext <32 x i8> %2113 to <32 x i32>
  %2115 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2110, <32 x i32> %1554) #11
  %2116 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2115, <32 x i32> %2110, <32 x i32> %1554) #11
  %2117 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2114, <32 x i32> %1560) #11
  %2118 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2117, <32 x i32> %2114, <32 x i32> %1560) #11
  %2119 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2116, <32 x i32> %2118) #11
  %2120 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2119, <64 x i32> %1552) #11
  %2121 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2102, <32 x i32> %1541) #11
  %2122 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2121, <32 x i32> %2102, <32 x i32> %1541) #11
  %2123 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2106, <32 x i32> %1547) #11
  %2124 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2123, <32 x i32> %2106, <32 x i32> %1547) #11
  %2125 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2122, <32 x i32> %2124) #11
  %2126 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2120, <64 x i32> %2125) #11
  %2127 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2094, <32 x i32> %1529) #11
  %2128 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2127, <32 x i32> %2094, <32 x i32> %1529) #11
  %2129 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2098, <32 x i32> %1535) #11
  %2130 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2129, <32 x i32> %2098, <32 x i32> %1535) #11
  %2131 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2128, <32 x i32> %2130) #11
  %2132 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2126, <64 x i32> %2131) #11
  %2133 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2086, <32 x i32> %1517) #11
  %2134 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2133, <32 x i32> %2086, <32 x i32> %1517) #11
  %2135 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2090, <32 x i32> %1523) #11
  %2136 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2135, <32 x i32> %2090, <32 x i32> %1523) #11
  %2137 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2134, <32 x i32> %2136) #11
  %2138 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2132, <64 x i32> %2137) #11
  %2139 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2078, <32 x i32> %1505) #11
  %2140 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2139, <32 x i32> %2078, <32 x i32> %1505) #11
  %2141 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2082, <32 x i32> %1511) #11
  %2142 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2141, <32 x i32> %2082, <32 x i32> %1511) #11
  %2143 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2140, <32 x i32> %2142) #11
  %2144 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2138, <64 x i32> %2143) #11
  %2145 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2070, <32 x i32> %1493) #11
  %2146 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2145, <32 x i32> %2070, <32 x i32> %1493) #11
  %2147 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2074, <32 x i32> %1499) #11
  %2148 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2147, <32 x i32> %2074, <32 x i32> %1499) #11
  %2149 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2146, <32 x i32> %2148) #11
  %2150 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2144, <64 x i32> %2149) #11
  %2151 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2062, <32 x i32> %1481) #11
  %2152 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2151, <32 x i32> %2062, <32 x i32> %1481) #11
  %2153 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2066, <32 x i32> %1487) #11
  %2154 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2153, <32 x i32> %2066, <32 x i32> %1487) #11
  %2155 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2152, <32 x i32> %2154) #11
  %2156 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2150, <64 x i32> %2155) #11
  %2157 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2054, <32 x i32> %1469) #11
  %2158 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2157, <32 x i32> %2054, <32 x i32> %1469) #11
  %2159 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2058, <32 x i32> %1475) #11
  %2160 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2159, <32 x i32> %2058, <32 x i32> %1475) #11
  %2161 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2158, <32 x i32> %2160) #11
  %2162 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2156, <64 x i32> %2161) #11
  %2163 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2046, <32 x i32> %1457) #11
  %2164 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2163, <32 x i32> %2046, <32 x i32> %1457) #11
  %2165 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2050, <32 x i32> %1463) #11
  %2166 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2165, <32 x i32> %2050, <32 x i32> %1463) #11
  %2167 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2164, <32 x i32> %2166) #11
  %2168 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2162, <64 x i32> %2167) #11
  %2169 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2168)
  store <32 x i32> %2169, <32 x i32>* %165, align 128, !tbaa !164
  %2170 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2168)
  store <32 x i32> %2170, <32 x i32>* %167, align 128, !tbaa !167
  %2171 = add nsw i32 %1622, %1175
  %2172 = shl nsw i32 %2171, 7
  %2173 = getelementptr inbounds i8, i8* %resampled_input, i32 %2172
  %2174 = bitcast i8* %2173 to <32 x i8>*
  %2175 = load <32 x i8>, <32 x i8>* %2174, align 128, !tbaa !129
  %2176 = zext <32 x i8> %2175 to <32 x i32>
  %2177 = getelementptr inbounds i8, i8* %2173, i32 32
  %2178 = bitcast i8* %2177 to <32 x i8>*
  %2179 = load <32 x i8>, <32 x i8>* %2178, align 32, !tbaa !129
  %2180 = zext <32 x i8> %2179 to <32 x i32>
  %2181 = add nsw i32 %1622, %1176
  %2182 = shl nsw i32 %2181, 7
  %2183 = getelementptr inbounds i8, i8* %resampled_input, i32 %2182
  %2184 = bitcast i8* %2183 to <32 x i8>*
  %2185 = load <32 x i8>, <32 x i8>* %2184, align 128, !tbaa !129
  %2186 = zext <32 x i8> %2185 to <32 x i32>
  %2187 = getelementptr inbounds i8, i8* %2183, i32 32
  %2188 = bitcast i8* %2187 to <32 x i8>*
  %2189 = load <32 x i8>, <32 x i8>* %2188, align 32, !tbaa !129
  %2190 = zext <32 x i8> %2189 to <32 x i32>
  %2191 = add nsw i32 %1622, %1177
  %2192 = shl nsw i32 %2191, 7
  %2193 = getelementptr inbounds i8, i8* %resampled_input, i32 %2192
  %2194 = bitcast i8* %2193 to <32 x i8>*
  %2195 = load <32 x i8>, <32 x i8>* %2194, align 128, !tbaa !129
  %2196 = zext <32 x i8> %2195 to <32 x i32>
  %2197 = getelementptr inbounds i8, i8* %2193, i32 32
  %2198 = bitcast i8* %2197 to <32 x i8>*
  %2199 = load <32 x i8>, <32 x i8>* %2198, align 32, !tbaa !129
  %2200 = zext <32 x i8> %2199 to <32 x i32>
  %2201 = add nsw i32 %1622, %1178
  %2202 = shl nsw i32 %2201, 7
  %2203 = getelementptr inbounds i8, i8* %resampled_input, i32 %2202
  %2204 = bitcast i8* %2203 to <32 x i8>*
  %2205 = load <32 x i8>, <32 x i8>* %2204, align 128, !tbaa !129
  %2206 = zext <32 x i8> %2205 to <32 x i32>
  %2207 = getelementptr inbounds i8, i8* %2203, i32 32
  %2208 = bitcast i8* %2207 to <32 x i8>*
  %2209 = load <32 x i8>, <32 x i8>* %2208, align 32, !tbaa !129
  %2210 = zext <32 x i8> %2209 to <32 x i32>
  %2211 = add nsw i32 %1622, %1179
  %2212 = shl nsw i32 %2211, 7
  %2213 = getelementptr inbounds i8, i8* %resampled_input, i32 %2212
  %2214 = bitcast i8* %2213 to <32 x i8>*
  %2215 = load <32 x i8>, <32 x i8>* %2214, align 128, !tbaa !129
  %2216 = zext <32 x i8> %2215 to <32 x i32>
  %2217 = getelementptr inbounds i8, i8* %2213, i32 32
  %2218 = bitcast i8* %2217 to <32 x i8>*
  %2219 = load <32 x i8>, <32 x i8>* %2218, align 32, !tbaa !129
  %2220 = zext <32 x i8> %2219 to <32 x i32>
  %2221 = add nsw i32 %1622, %1180
  %2222 = shl nsw i32 %2221, 7
  %2223 = getelementptr inbounds i8, i8* %resampled_input, i32 %2222
  %2224 = bitcast i8* %2223 to <32 x i8>*
  %2225 = load <32 x i8>, <32 x i8>* %2224, align 128, !tbaa !129
  %2226 = zext <32 x i8> %2225 to <32 x i32>
  %2227 = getelementptr inbounds i8, i8* %2223, i32 32
  %2228 = bitcast i8* %2227 to <32 x i8>*
  %2229 = load <32 x i8>, <32 x i8>* %2228, align 32, !tbaa !129
  %2230 = zext <32 x i8> %2229 to <32 x i32>
  %2231 = add nsw i32 %1622, %1181
  %2232 = shl nsw i32 %2231, 7
  %2233 = getelementptr inbounds i8, i8* %resampled_input, i32 %2232
  %2234 = bitcast i8* %2233 to <32 x i8>*
  %2235 = load <32 x i8>, <32 x i8>* %2234, align 128, !tbaa !129
  %2236 = zext <32 x i8> %2235 to <32 x i32>
  %2237 = getelementptr inbounds i8, i8* %2233, i32 32
  %2238 = bitcast i8* %2237 to <32 x i8>*
  %2239 = load <32 x i8>, <32 x i8>* %2238, align 32, !tbaa !129
  %2240 = zext <32 x i8> %2239 to <32 x i32>
  %2241 = add nsw i32 %1622, %1182
  %2242 = shl nsw i32 %2241, 7
  %2243 = getelementptr inbounds i8, i8* %resampled_input, i32 %2242
  %2244 = bitcast i8* %2243 to <32 x i8>*
  %2245 = load <32 x i8>, <32 x i8>* %2244, align 128, !tbaa !129
  %2246 = zext <32 x i8> %2245 to <32 x i32>
  %2247 = getelementptr inbounds i8, i8* %2243, i32 32
  %2248 = bitcast i8* %2247 to <32 x i8>*
  %2249 = load <32 x i8>, <32 x i8>* %2248, align 32, !tbaa !129
  %2250 = zext <32 x i8> %2249 to <32 x i32>
  %2251 = add nsw i32 %1622, %1183
  %2252 = shl nsw i32 %2251, 7
  %2253 = getelementptr inbounds i8, i8* %resampled_input, i32 %2252
  %2254 = bitcast i8* %2253 to <32 x i8>*
  %2255 = load <32 x i8>, <32 x i8>* %2254, align 128, !tbaa !129
  %2256 = zext <32 x i8> %2255 to <32 x i32>
  %2257 = getelementptr inbounds i8, i8* %2253, i32 32
  %2258 = bitcast i8* %2257 to <32 x i8>*
  %2259 = load <32 x i8>, <32 x i8>* %2258, align 32, !tbaa !129
  %2260 = zext <32 x i8> %2259 to <32 x i32>
  %2261 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2256, <32 x i32> %1387) #11
  %2262 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2261, <32 x i32> %2256, <32 x i32> %1387) #11
  %2263 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2260, <32 x i32> %1395) #11
  %2264 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2263, <32 x i32> %2260, <32 x i32> %1395) #11
  %2265 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2262, <32 x i32> %2264) #11
  %2266 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2265, <64 x i32> %1385) #11
  %2267 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2246, <32 x i32> %1372) #11
  %2268 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2267, <32 x i32> %2246, <32 x i32> %1372) #11
  %2269 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2250, <32 x i32> %1380) #11
  %2270 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2269, <32 x i32> %2250, <32 x i32> %1380) #11
  %2271 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2268, <32 x i32> %2270) #11
  %2272 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2266, <64 x i32> %2271) #11
  %2273 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2236, <32 x i32> %1358) #11
  %2274 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2273, <32 x i32> %2236, <32 x i32> %1358) #11
  %2275 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2240, <32 x i32> %1366) #11
  %2276 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2275, <32 x i32> %2240, <32 x i32> %1366) #11
  %2277 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2274, <32 x i32> %2276) #11
  %2278 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2272, <64 x i32> %2277) #11
  %2279 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2226, <32 x i32> %1344) #11
  %2280 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2279, <32 x i32> %2226, <32 x i32> %1344) #11
  %2281 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2230, <32 x i32> %1352) #11
  %2282 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2281, <32 x i32> %2230, <32 x i32> %1352) #11
  %2283 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2280, <32 x i32> %2282) #11
  %2284 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2278, <64 x i32> %2283) #11
  %2285 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2216, <32 x i32> %1330) #11
  %2286 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2285, <32 x i32> %2216, <32 x i32> %1330) #11
  %2287 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2220, <32 x i32> %1338) #11
  %2288 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2287, <32 x i32> %2220, <32 x i32> %1338) #11
  %2289 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2286, <32 x i32> %2288) #11
  %2290 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2284, <64 x i32> %2289) #11
  %2291 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2206, <32 x i32> %1316) #11
  %2292 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2291, <32 x i32> %2206, <32 x i32> %1316) #11
  %2293 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2210, <32 x i32> %1324) #11
  %2294 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2293, <32 x i32> %2210, <32 x i32> %1324) #11
  %2295 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2292, <32 x i32> %2294) #11
  %2296 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2290, <64 x i32> %2295) #11
  %2297 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2196, <32 x i32> %1302) #11
  %2298 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2297, <32 x i32> %2196, <32 x i32> %1302) #11
  %2299 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2200, <32 x i32> %1310) #11
  %2300 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2299, <32 x i32> %2200, <32 x i32> %1310) #11
  %2301 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2298, <32 x i32> %2300) #11
  %2302 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2296, <64 x i32> %2301) #11
  %2303 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2186, <32 x i32> %1288) #11
  %2304 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2303, <32 x i32> %2186, <32 x i32> %1288) #11
  %2305 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2190, <32 x i32> %1296) #11
  %2306 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2305, <32 x i32> %2190, <32 x i32> %1296) #11
  %2307 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2304, <32 x i32> %2306) #11
  %2308 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2302, <64 x i32> %2307) #11
  %2309 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2176, <32 x i32> %1272) #11
  %2310 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2309, <32 x i32> %2176, <32 x i32> %1272) #11
  %2311 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2180, <32 x i32> %1282) #11
  %2312 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2311, <32 x i32> %2180, <32 x i32> %1282) #11
  %2313 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2310, <32 x i32> %2312) #11
  %2314 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2308, <64 x i32> %2313) #11
  %2315 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2314)
  store <32 x i32> %2315, <32 x i32>* %169, align 128, !tbaa !169
  %2316 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2314)
  store <32 x i32> %2316, <32 x i32>* %171, align 128, !tbaa !173
  %2317 = getelementptr inbounds i8, i8* %2173, i32 64
  %2318 = bitcast i8* %2317 to <32 x i8>*
  %2319 = load <32 x i8>, <32 x i8>* %2318, align 64, !tbaa !129
  %2320 = zext <32 x i8> %2319 to <32 x i32>
  %2321 = getelementptr inbounds i8, i8* %2173, i32 96
  %2322 = bitcast i8* %2321 to <32 x i8>*
  %2323 = load <32 x i8>, <32 x i8>* %2322, align 32, !tbaa !129
  %2324 = zext <32 x i8> %2323 to <32 x i32>
  %2325 = getelementptr inbounds i8, i8* %2183, i32 64
  %2326 = bitcast i8* %2325 to <32 x i8>*
  %2327 = load <32 x i8>, <32 x i8>* %2326, align 64, !tbaa !129
  %2328 = zext <32 x i8> %2327 to <32 x i32>
  %2329 = getelementptr inbounds i8, i8* %2183, i32 96
  %2330 = bitcast i8* %2329 to <32 x i8>*
  %2331 = load <32 x i8>, <32 x i8>* %2330, align 32, !tbaa !129
  %2332 = zext <32 x i8> %2331 to <32 x i32>
  %2333 = getelementptr inbounds i8, i8* %2193, i32 64
  %2334 = bitcast i8* %2333 to <32 x i8>*
  %2335 = load <32 x i8>, <32 x i8>* %2334, align 64, !tbaa !129
  %2336 = zext <32 x i8> %2335 to <32 x i32>
  %2337 = getelementptr inbounds i8, i8* %2193, i32 96
  %2338 = bitcast i8* %2337 to <32 x i8>*
  %2339 = load <32 x i8>, <32 x i8>* %2338, align 32, !tbaa !129
  %2340 = zext <32 x i8> %2339 to <32 x i32>
  %2341 = getelementptr inbounds i8, i8* %2203, i32 64
  %2342 = bitcast i8* %2341 to <32 x i8>*
  %2343 = load <32 x i8>, <32 x i8>* %2342, align 64, !tbaa !129
  %2344 = zext <32 x i8> %2343 to <32 x i32>
  %2345 = getelementptr inbounds i8, i8* %2203, i32 96
  %2346 = bitcast i8* %2345 to <32 x i8>*
  %2347 = load <32 x i8>, <32 x i8>* %2346, align 32, !tbaa !129
  %2348 = zext <32 x i8> %2347 to <32 x i32>
  %2349 = getelementptr inbounds i8, i8* %2213, i32 64
  %2350 = bitcast i8* %2349 to <32 x i8>*
  %2351 = load <32 x i8>, <32 x i8>* %2350, align 64, !tbaa !129
  %2352 = zext <32 x i8> %2351 to <32 x i32>
  %2353 = getelementptr inbounds i8, i8* %2213, i32 96
  %2354 = bitcast i8* %2353 to <32 x i8>*
  %2355 = load <32 x i8>, <32 x i8>* %2354, align 32, !tbaa !129
  %2356 = zext <32 x i8> %2355 to <32 x i32>
  %2357 = getelementptr inbounds i8, i8* %2223, i32 64
  %2358 = bitcast i8* %2357 to <32 x i8>*
  %2359 = load <32 x i8>, <32 x i8>* %2358, align 64, !tbaa !129
  %2360 = zext <32 x i8> %2359 to <32 x i32>
  %2361 = getelementptr inbounds i8, i8* %2223, i32 96
  %2362 = bitcast i8* %2361 to <32 x i8>*
  %2363 = load <32 x i8>, <32 x i8>* %2362, align 32, !tbaa !129
  %2364 = zext <32 x i8> %2363 to <32 x i32>
  %2365 = getelementptr inbounds i8, i8* %2233, i32 64
  %2366 = bitcast i8* %2365 to <32 x i8>*
  %2367 = load <32 x i8>, <32 x i8>* %2366, align 64, !tbaa !129
  %2368 = zext <32 x i8> %2367 to <32 x i32>
  %2369 = getelementptr inbounds i8, i8* %2233, i32 96
  %2370 = bitcast i8* %2369 to <32 x i8>*
  %2371 = load <32 x i8>, <32 x i8>* %2370, align 32, !tbaa !129
  %2372 = zext <32 x i8> %2371 to <32 x i32>
  %2373 = getelementptr inbounds i8, i8* %2243, i32 64
  %2374 = bitcast i8* %2373 to <32 x i8>*
  %2375 = load <32 x i8>, <32 x i8>* %2374, align 64, !tbaa !129
  %2376 = zext <32 x i8> %2375 to <32 x i32>
  %2377 = getelementptr inbounds i8, i8* %2243, i32 96
  %2378 = bitcast i8* %2377 to <32 x i8>*
  %2379 = load <32 x i8>, <32 x i8>* %2378, align 32, !tbaa !129
  %2380 = zext <32 x i8> %2379 to <32 x i32>
  %2381 = getelementptr inbounds i8, i8* %2253, i32 64
  %2382 = bitcast i8* %2381 to <32 x i8>*
  %2383 = load <32 x i8>, <32 x i8>* %2382, align 64, !tbaa !129
  %2384 = zext <32 x i8> %2383 to <32 x i32>
  %2385 = getelementptr inbounds i8, i8* %2253, i32 96
  %2386 = bitcast i8* %2385 to <32 x i8>*
  %2387 = load <32 x i8>, <32 x i8>* %2386, align 32, !tbaa !129
  %2388 = zext <32 x i8> %2387 to <32 x i32>
  %2389 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2384, <32 x i32> %1554) #11
  %2390 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2389, <32 x i32> %2384, <32 x i32> %1554) #11
  %2391 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2388, <32 x i32> %1560) #11
  %2392 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2391, <32 x i32> %2388, <32 x i32> %1560) #11
  %2393 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2390, <32 x i32> %2392) #11
  %2394 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2393, <64 x i32> %1552) #11
  %2395 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2376, <32 x i32> %1541) #11
  %2396 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2395, <32 x i32> %2376, <32 x i32> %1541) #11
  %2397 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2380, <32 x i32> %1547) #11
  %2398 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2397, <32 x i32> %2380, <32 x i32> %1547) #11
  %2399 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2396, <32 x i32> %2398) #11
  %2400 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2394, <64 x i32> %2399) #11
  %2401 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2368, <32 x i32> %1529) #11
  %2402 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2401, <32 x i32> %2368, <32 x i32> %1529) #11
  %2403 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2372, <32 x i32> %1535) #11
  %2404 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2403, <32 x i32> %2372, <32 x i32> %1535) #11
  %2405 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2402, <32 x i32> %2404) #11
  %2406 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2400, <64 x i32> %2405) #11
  %2407 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2360, <32 x i32> %1517) #11
  %2408 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2407, <32 x i32> %2360, <32 x i32> %1517) #11
  %2409 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2364, <32 x i32> %1523) #11
  %2410 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2409, <32 x i32> %2364, <32 x i32> %1523) #11
  %2411 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2408, <32 x i32> %2410) #11
  %2412 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2406, <64 x i32> %2411) #11
  %2413 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2352, <32 x i32> %1505) #11
  %2414 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2413, <32 x i32> %2352, <32 x i32> %1505) #11
  %2415 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2356, <32 x i32> %1511) #11
  %2416 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2415, <32 x i32> %2356, <32 x i32> %1511) #11
  %2417 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2414, <32 x i32> %2416) #11
  %2418 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2412, <64 x i32> %2417) #11
  %2419 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2344, <32 x i32> %1493) #11
  %2420 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2419, <32 x i32> %2344, <32 x i32> %1493) #11
  %2421 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2348, <32 x i32> %1499) #11
  %2422 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2421, <32 x i32> %2348, <32 x i32> %1499) #11
  %2423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2420, <32 x i32> %2422) #11
  %2424 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2418, <64 x i32> %2423) #11
  %2425 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2336, <32 x i32> %1481) #11
  %2426 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2425, <32 x i32> %2336, <32 x i32> %1481) #11
  %2427 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2340, <32 x i32> %1487) #11
  %2428 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2427, <32 x i32> %2340, <32 x i32> %1487) #11
  %2429 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2426, <32 x i32> %2428) #11
  %2430 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2424, <64 x i32> %2429) #11
  %2431 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2328, <32 x i32> %1469) #11
  %2432 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2431, <32 x i32> %2328, <32 x i32> %1469) #11
  %2433 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2332, <32 x i32> %1475) #11
  %2434 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2433, <32 x i32> %2332, <32 x i32> %1475) #11
  %2435 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2432, <32 x i32> %2434) #11
  %2436 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2430, <64 x i32> %2435) #11
  %2437 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2320, <32 x i32> %1457) #11
  %2438 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2437, <32 x i32> %2320, <32 x i32> %1457) #11
  %2439 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2324, <32 x i32> %1463) #11
  %2440 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2439, <32 x i32> %2324, <32 x i32> %1463) #11
  %2441 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2438, <32 x i32> %2440) #11
  %2442 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2436, <64 x i32> %2441) #11
  %2443 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2442)
  store <32 x i32> %2443, <32 x i32>* %173, align 128, !tbaa !175
  %2444 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2442)
  store <32 x i32> %2444, <32 x i32>* %175, align 128, !tbaa !178
  br label %"consume convolved"

next_bb27:                                        ; preds = %"for output.s0.x.xo"
  %2445 = add nsw i32 %output.s0.x.x.base.s, %19
  br i1 %85, label %"for convolved.s1.r19$y.preheader", label %"next_bb27.consume convolved_crit_edge", !prof !101

"next_bb27.consume convolved_crit_edge":          ; preds = %next_bb27
  %.pre2748 = add nsw i32 %2445, 1
  br label %"consume convolved"

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb27
  %2446 = mul nsw i32 %2445, %stride_x
  %2447 = sub nsw i32 %2446, %t2225
  %2448 = add nsw i32 %2445, 1
  %2449 = mul nsw i32 %2448, %stride_x
  %2450 = sub nsw i32 %2449, %t2225
  br i1 %84, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !101

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %.lcssa2605.us2637 = phi <32 x i32> [ %2635, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2603.us2635 = phi <32 x i32> [ %2634, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2601.us2633 = phi <32 x i32> [ %2618, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2599.us2631 = phi <32 x i32> [ %2617, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2597.us2629 = phi <32 x i32> [ %2599, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2595.us2627 = phi <32 x i32> [ %2598, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2593.us2625 = phi <32 x i32> [ %2582, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2591.us2623 = phi <32 x i32> [ %2581, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2589.us2621 = phi <32 x i32> [ %2562, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2587.us2619 = phi <32 x i32> [ %2561, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2585.us2617 = phi <32 x i32> [ %2545, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2583.us2615 = phi <32 x i32> [ %2544, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2581.us2613 = phi <32 x i32> [ %2526, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1122, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2579.us2611 = phi <32 x i32> [ %2525, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1121, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2577.us2609 = phi <32 x i32> [ %2501, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1120, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa2575.us2607 = phi <32 x i32> [ %2500, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1119, %"for convolved.s1.r19$y.preheader" ]
  %"convolved.s1.r19$y.us" = phi i32 [ %2637, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %2451 = mul nsw i32 %"convolved.s1.r19$y.us", %a548
  %2452 = add nsw i32 %2451, %1164
  %t2303.us = mul nsw i32 %2452, %130
  %2453 = add nsw i32 %2451, %1165
  %t2304.us = mul nsw i32 %2453, %130
  %2454 = mul nsw i32 %"convolved.s1.r19$y.us", %4
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %2455 = phi <32 x i32> [ %2635, %"for convolved.s1.r19$x.us" ], [ %.lcssa2605.us2637, %"for convolved.s1.r19$y.us" ]
  %2456 = phi <32 x i32> [ %2634, %"for convolved.s1.r19$x.us" ], [ %.lcssa2603.us2635, %"for convolved.s1.r19$y.us" ]
  %2457 = phi <32 x i32> [ %2618, %"for convolved.s1.r19$x.us" ], [ %.lcssa2601.us2633, %"for convolved.s1.r19$y.us" ]
  %2458 = phi <32 x i32> [ %2617, %"for convolved.s1.r19$x.us" ], [ %.lcssa2599.us2631, %"for convolved.s1.r19$y.us" ]
  %2459 = phi <32 x i32> [ %2599, %"for convolved.s1.r19$x.us" ], [ %.lcssa2597.us2629, %"for convolved.s1.r19$y.us" ]
  %2460 = phi <32 x i32> [ %2598, %"for convolved.s1.r19$x.us" ], [ %.lcssa2595.us2627, %"for convolved.s1.r19$y.us" ]
  %2461 = phi <32 x i32> [ %2582, %"for convolved.s1.r19$x.us" ], [ %.lcssa2593.us2625, %"for convolved.s1.r19$y.us" ]
  %2462 = phi <32 x i32> [ %2581, %"for convolved.s1.r19$x.us" ], [ %.lcssa2591.us2623, %"for convolved.s1.r19$y.us" ]
  %2463 = phi <32 x i32> [ %2562, %"for convolved.s1.r19$x.us" ], [ %.lcssa2589.us2621, %"for convolved.s1.r19$y.us" ]
  %2464 = phi <32 x i32> [ %2561, %"for convolved.s1.r19$x.us" ], [ %.lcssa2587.us2619, %"for convolved.s1.r19$y.us" ]
  %2465 = phi <32 x i32> [ %2545, %"for convolved.s1.r19$x.us" ], [ %.lcssa2585.us2617, %"for convolved.s1.r19$y.us" ]
  %2466 = phi <32 x i32> [ %2544, %"for convolved.s1.r19$x.us" ], [ %.lcssa2583.us2615, %"for convolved.s1.r19$y.us" ]
  %2467 = phi <32 x i32> [ %2526, %"for convolved.s1.r19$x.us" ], [ %.lcssa2581.us2613, %"for convolved.s1.r19$y.us" ]
  %2468 = phi <32 x i32> [ %2525, %"for convolved.s1.r19$x.us" ], [ %.lcssa2579.us2611, %"for convolved.s1.r19$y.us" ]
  %2469 = phi <32 x i32> [ %2501, %"for convolved.s1.r19$x.us" ], [ %.lcssa2577.us2609, %"for convolved.s1.r19$y.us" ]
  %2470 = phi <32 x i32> [ %2500, %"for convolved.s1.r19$x.us" ], [ %.lcssa2575.us2607, %"for convolved.s1.r19$y.us" ]
  %"convolved.s1.r19$x.us" = phi i32 [ %2636, %"for convolved.s1.r19$x.us" ], [ 0, %"for convolved.s1.r19$y.us" ]
  %2471 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2469, <32 x i32> %2470)
  %2472 = add nsw i32 %"convolved.s1.r19$x.us", %2454
  %2473 = shl nsw i32 %2472, 7
  %2474 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %2473
  %2475 = bitcast i16* %2474 to <32 x i16>*
  %2476 = load <32 x i16>, <32 x i16>* %2475, align 128, !tbaa !105
  %2477 = sext <32 x i16> %2476 to <32 x i32>
  %2478 = mul nsw i32 %"convolved.s1.r19$x.us", %a553
  %2479 = add i32 %2478, %t2303.us
  %2480 = add i32 %2479, %2447
  %2481 = shl nsw i32 %2480, 7
  %2482 = getelementptr inbounds i8, i8* %resampled_input, i32 %2481
  %2483 = bitcast i8* %2482 to <32 x i8>*
  %2484 = load <32 x i8>, <32 x i8>* %2483, align 128, !tbaa !129
  %2485 = zext <32 x i8> %2484 to <32 x i32>
  %2486 = getelementptr inbounds i16, i16* %2474, i32 32
  %2487 = bitcast i16* %2486 to <32 x i16>*
  %2488 = load <32 x i16>, <32 x i16>* %2487, align 64, !tbaa !105
  %2489 = sext <32 x i16> %2488 to <32 x i32>
  %2490 = getelementptr inbounds i8, i8* %2482, i32 32
  %2491 = bitcast i8* %2490 to <32 x i8>*
  %2492 = load <32 x i8>, <32 x i8>* %2491, align 32, !tbaa !129
  %2493 = zext <32 x i8> %2492 to <32 x i32>
  %2494 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2485, <32 x i32> %2477) #11
  %2495 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2494, <32 x i32> %2485, <32 x i32> %2477) #11
  %2496 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2493, <32 x i32> %2489) #11
  %2497 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2496, <32 x i32> %2493, <32 x i32> %2489) #11
  %2498 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2495, <32 x i32> %2497) #11
  %2499 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2498, <64 x i32> %2471) #11
  %2500 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2499)
  %2501 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2499)
  %2502 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2467, <32 x i32> %2468)
  %2503 = getelementptr inbounds i16, i16* %2474, i32 64
  %2504 = bitcast i16* %2503 to <32 x i16>*
  %2505 = load <32 x i16>, <32 x i16>* %2504, align 128, !tbaa !105
  %2506 = sext <32 x i16> %2505 to <32 x i32>
  %2507 = getelementptr inbounds i8, i8* %2482, i32 64
  %2508 = bitcast i8* %2507 to <32 x i8>*
  %2509 = load <32 x i8>, <32 x i8>* %2508, align 64, !tbaa !129
  %2510 = zext <32 x i8> %2509 to <32 x i32>
  %2511 = getelementptr inbounds i16, i16* %2474, i32 96
  %2512 = bitcast i16* %2511 to <32 x i16>*
  %2513 = load <32 x i16>, <32 x i16>* %2512, align 64, !tbaa !105
  %2514 = sext <32 x i16> %2513 to <32 x i32>
  %2515 = getelementptr inbounds i8, i8* %2482, i32 96
  %2516 = bitcast i8* %2515 to <32 x i8>*
  %2517 = load <32 x i8>, <32 x i8>* %2516, align 32, !tbaa !129
  %2518 = zext <32 x i8> %2517 to <32 x i32>
  %2519 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2510, <32 x i32> %2506) #11
  %2520 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2519, <32 x i32> %2510, <32 x i32> %2506) #11
  %2521 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2518, <32 x i32> %2514) #11
  %2522 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2521, <32 x i32> %2518, <32 x i32> %2514) #11
  %2523 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2520, <32 x i32> %2522) #11
  %2524 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2523, <64 x i32> %2502) #11
  %2525 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2524)
  %2526 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2524)
  %2527 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2465, <32 x i32> %2466)
  %2528 = add i32 %2479, %2450
  %2529 = shl nsw i32 %2528, 7
  %2530 = getelementptr inbounds i8, i8* %resampled_input, i32 %2529
  %2531 = bitcast i8* %2530 to <32 x i8>*
  %2532 = load <32 x i8>, <32 x i8>* %2531, align 128, !tbaa !129
  %2533 = zext <32 x i8> %2532 to <32 x i32>
  %2534 = getelementptr inbounds i8, i8* %2530, i32 32
  %2535 = bitcast i8* %2534 to <32 x i8>*
  %2536 = load <32 x i8>, <32 x i8>* %2535, align 32, !tbaa !129
  %2537 = zext <32 x i8> %2536 to <32 x i32>
  %2538 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2533, <32 x i32> %2477) #11
  %2539 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2538, <32 x i32> %2533, <32 x i32> %2477) #11
  %2540 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2537, <32 x i32> %2489) #11
  %2541 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2540, <32 x i32> %2537, <32 x i32> %2489) #11
  %2542 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2539, <32 x i32> %2541) #11
  %2543 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2542, <64 x i32> %2527) #11
  %2544 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2543)
  %2545 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2543)
  %2546 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2463, <32 x i32> %2464)
  %2547 = getelementptr inbounds i8, i8* %2530, i32 64
  %2548 = bitcast i8* %2547 to <32 x i8>*
  %2549 = load <32 x i8>, <32 x i8>* %2548, align 64, !tbaa !129
  %2550 = zext <32 x i8> %2549 to <32 x i32>
  %2551 = getelementptr inbounds i8, i8* %2530, i32 96
  %2552 = bitcast i8* %2551 to <32 x i8>*
  %2553 = load <32 x i8>, <32 x i8>* %2552, align 32, !tbaa !129
  %2554 = zext <32 x i8> %2553 to <32 x i32>
  %2555 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2550, <32 x i32> %2506) #11
  %2556 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2555, <32 x i32> %2550, <32 x i32> %2506) #11
  %2557 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2554, <32 x i32> %2514) #11
  %2558 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2557, <32 x i32> %2554, <32 x i32> %2514) #11
  %2559 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2556, <32 x i32> %2558) #11
  %2560 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2559, <64 x i32> %2546) #11
  %2561 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2560)
  %2562 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2560)
  %2563 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2461, <32 x i32> %2462)
  %2564 = add i32 %2478, %t2304.us
  %2565 = add i32 %2564, %2447
  %2566 = shl nsw i32 %2565, 7
  %2567 = getelementptr inbounds i8, i8* %resampled_input, i32 %2566
  %2568 = bitcast i8* %2567 to <32 x i8>*
  %2569 = load <32 x i8>, <32 x i8>* %2568, align 128, !tbaa !129
  %2570 = zext <32 x i8> %2569 to <32 x i32>
  %2571 = getelementptr inbounds i8, i8* %2567, i32 32
  %2572 = bitcast i8* %2571 to <32 x i8>*
  %2573 = load <32 x i8>, <32 x i8>* %2572, align 32, !tbaa !129
  %2574 = zext <32 x i8> %2573 to <32 x i32>
  %2575 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2570, <32 x i32> %2477) #11
  %2576 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2575, <32 x i32> %2570, <32 x i32> %2477) #11
  %2577 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2574, <32 x i32> %2489) #11
  %2578 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2577, <32 x i32> %2574, <32 x i32> %2489) #11
  %2579 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2576, <32 x i32> %2578) #11
  %2580 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2579, <64 x i32> %2563) #11
  %2581 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2580)
  %2582 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2580)
  %2583 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2459, <32 x i32> %2460)
  %2584 = getelementptr inbounds i8, i8* %2567, i32 64
  %2585 = bitcast i8* %2584 to <32 x i8>*
  %2586 = load <32 x i8>, <32 x i8>* %2585, align 64, !tbaa !129
  %2587 = zext <32 x i8> %2586 to <32 x i32>
  %2588 = getelementptr inbounds i8, i8* %2567, i32 96
  %2589 = bitcast i8* %2588 to <32 x i8>*
  %2590 = load <32 x i8>, <32 x i8>* %2589, align 32, !tbaa !129
  %2591 = zext <32 x i8> %2590 to <32 x i32>
  %2592 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2587, <32 x i32> %2506) #11
  %2593 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2592, <32 x i32> %2587, <32 x i32> %2506) #11
  %2594 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2591, <32 x i32> %2514) #11
  %2595 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2594, <32 x i32> %2591, <32 x i32> %2514) #11
  %2596 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2593, <32 x i32> %2595) #11
  %2597 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2596, <64 x i32> %2583) #11
  %2598 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2597)
  %2599 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2597)
  %2600 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2457, <32 x i32> %2458)
  %2601 = add i32 %2564, %2450
  %2602 = shl nsw i32 %2601, 7
  %2603 = getelementptr inbounds i8, i8* %resampled_input, i32 %2602
  %2604 = bitcast i8* %2603 to <32 x i8>*
  %2605 = load <32 x i8>, <32 x i8>* %2604, align 128, !tbaa !129
  %2606 = zext <32 x i8> %2605 to <32 x i32>
  %2607 = getelementptr inbounds i8, i8* %2603, i32 32
  %2608 = bitcast i8* %2607 to <32 x i8>*
  %2609 = load <32 x i8>, <32 x i8>* %2608, align 32, !tbaa !129
  %2610 = zext <32 x i8> %2609 to <32 x i32>
  %2611 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2606, <32 x i32> %2477) #11
  %2612 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2611, <32 x i32> %2606, <32 x i32> %2477) #11
  %2613 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2610, <32 x i32> %2489) #11
  %2614 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2613, <32 x i32> %2610, <32 x i32> %2489) #11
  %2615 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2612, <32 x i32> %2614) #11
  %2616 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2615, <64 x i32> %2600) #11
  %2617 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2616)
  %2618 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2616)
  %2619 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2455, <32 x i32> %2456)
  %2620 = getelementptr inbounds i8, i8* %2603, i32 64
  %2621 = bitcast i8* %2620 to <32 x i8>*
  %2622 = load <32 x i8>, <32 x i8>* %2621, align 64, !tbaa !129
  %2623 = zext <32 x i8> %2622 to <32 x i32>
  %2624 = getelementptr inbounds i8, i8* %2603, i32 96
  %2625 = bitcast i8* %2624 to <32 x i8>*
  %2626 = load <32 x i8>, <32 x i8>* %2625, align 32, !tbaa !129
  %2627 = zext <32 x i8> %2626 to <32 x i32>
  %2628 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2623, <32 x i32> %2506) #11
  %2629 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2628, <32 x i32> %2623, <32 x i32> %2506) #11
  %2630 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2627, <32 x i32> %2514) #11
  %2631 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2630, <32 x i32> %2627, <32 x i32> %2514) #11
  %2632 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2629, <32 x i32> %2631) #11
  %2633 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2632, <64 x i32> %2619) #11
  %2634 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2633)
  %2635 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2633)
  %2636 = add nuw nsw i32 %"convolved.s1.r19$x.us", 1
  %.not1859.us = icmp eq i32 %2636, %4
  br i1 %.not1859.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %2637 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not1858.us = icmp eq i32 %2637, %6
  br i1 %.not1858.us, label %"consume convolved.loopexit.split.us", label %"for convolved.s1.r19$y.us"

"consume convolved.loopexit.split.us":            ; preds = %"end for convolved.s1.r19$x.loopexit.us"
  store <32 x i32> %2500, <32 x i32>* %145, align 128, !tbaa !131
  store <32 x i32> %2501, <32 x i32>* %147, align 128, !tbaa !139
  store <32 x i32> %2525, <32 x i32>* %149, align 128, !tbaa !141
  store <32 x i32> %2526, <32 x i32>* %151, align 128, !tbaa !144
  store <32 x i32> %2544, <32 x i32>* %153, align 128, !tbaa !146
  store <32 x i32> %2545, <32 x i32>* %155, align 128, !tbaa !150
  store <32 x i32> %2561, <32 x i32>* %157, align 128, !tbaa !152
  store <32 x i32> %2562, <32 x i32>* %159, align 128, !tbaa !155
  store <32 x i32> %2581, <32 x i32>* %161, align 128, !tbaa !157
  store <32 x i32> %2582, <32 x i32>* %163, align 128, !tbaa !162
  store <32 x i32> %2598, <32 x i32>* %165, align 128, !tbaa !164
  store <32 x i32> %2599, <32 x i32>* %167, align 128, !tbaa !167
  store <32 x i32> %2617, <32 x i32>* %169, align 128, !tbaa !169
  store <32 x i32> %2618, <32 x i32>* %171, align 128, !tbaa !173
  store <32 x i32> %2634, <32 x i32>* %173, align 128, !tbaa !175
  store <32 x i32> %2635, <32 x i32>* %175, align 128, !tbaa !178
  br label %"consume convolved"

"consume convolved":                              ; preds = %"for convolved.s1.r19$y.preheader", %"next_bb27.consume convolved_crit_edge", %"consume convolved.loopexit.split.us", %then_bb26
  %.pre-phi2749 = phi i32 [ %.pre2748, %"next_bb27.consume convolved_crit_edge" ], [ %2448, %"consume convolved.loopexit.split.us" ], [ %1621, %then_bb26 ], [ %2448, %"for convolved.s1.r19$y.preheader" ]
  %.pre-phi2747 = phi i32 [ %2445, %"next_bb27.consume convolved_crit_edge" ], [ %2445, %"consume convolved.loopexit.split.us" ], [ %1273, %then_bb26 ], [ %2445, %"for convolved.s1.r19$y.preheader" ]
  %2638 = mul nsw i32 %.pre-phi2747, %21
  %2639 = add nsw i32 %2638, %1238
  %2640 = getelementptr inbounds i8, i8* %17, i32 %2639
  %2641 = bitcast i8* %2640 to <32 x i8>*
  store <32 x i8> %1236, <32 x i8>* %2641, align 1, !tbaa !217
  %2642 = getelementptr inbounds i8, i8* %2640, i32 32
  %2643 = bitcast i8* %2642 to <32 x i8>*
  store <32 x i8> %1247, <32 x i8>* %2643, align 1, !tbaa !217
  %2644 = getelementptr inbounds i8, i8* %2640, i32 64
  %2645 = bitcast i8* %2644 to <32 x i8>*
  store <32 x i8> %1256, <32 x i8>* %2645, align 1, !tbaa !217
  %2646 = getelementptr inbounds i8, i8* %2640, i32 96
  %2647 = bitcast i8* %2646 to <32 x i8>*
  store <32 x i8> %1265, <32 x i8>* %2647, align 1, !tbaa !217
  %2648 = mul nsw i32 %.pre-phi2749, %21
  %2649 = add nsw i32 %2648, %1238
  %2650 = getelementptr inbounds i8, i8* %17, i32 %2649
  %2651 = bitcast i8* %2650 to <32 x i8>*
  store <32 x i8> %1236, <32 x i8>* %2651, align 1, !tbaa !217
  %2652 = getelementptr inbounds i8, i8* %2650, i32 32
  %2653 = bitcast i8* %2652 to <32 x i8>*
  store <32 x i8> %1247, <32 x i8>* %2653, align 1, !tbaa !217
  %2654 = getelementptr inbounds i8, i8* %2650, i32 64
  %2655 = bitcast i8* %2654 to <32 x i8>*
  store <32 x i8> %1256, <32 x i8>* %2655, align 1, !tbaa !217
  %2656 = getelementptr inbounds i8, i8* %2650, i32 96
  %2657 = bitcast i8* %2656 to <32 x i8>*
  store <32 x i8> %1265, <32 x i8>* %2657, align 1, !tbaa !217
  %2658 = add nsw i32 %2638, %1267
  %2659 = getelementptr inbounds i8, i8* %17, i32 %2658
  %2660 = bitcast i8* %2659 to <32 x i8>*
  store <32 x i8> %1236, <32 x i8>* %2660, align 1, !tbaa !217
  %2661 = getelementptr inbounds i8, i8* %2659, i32 32
  %2662 = bitcast i8* %2661 to <32 x i8>*
  store <32 x i8> %1247, <32 x i8>* %2662, align 1, !tbaa !217
  %2663 = getelementptr inbounds i8, i8* %2659, i32 64
  %2664 = bitcast i8* %2663 to <32 x i8>*
  store <32 x i8> %1256, <32 x i8>* %2664, align 1, !tbaa !217
  %2665 = getelementptr inbounds i8, i8* %2659, i32 96
  %2666 = bitcast i8* %2665 to <32 x i8>*
  store <32 x i8> %1265, <32 x i8>* %2666, align 1, !tbaa !217
  %2667 = add nsw i32 %2648, %1267
  %2668 = getelementptr inbounds i8, i8* %17, i32 %2667
  %2669 = bitcast i8* %2668 to <32 x i8>*
  store <32 x i8> %1236, <32 x i8>* %2669, align 1, !tbaa !217
  %2670 = getelementptr inbounds i8, i8* %2668, i32 32
  %2671 = bitcast i8* %2670 to <32 x i8>*
  store <32 x i8> %1247, <32 x i8>* %2671, align 1, !tbaa !217
  %2672 = getelementptr inbounds i8, i8* %2668, i32 64
  %2673 = bitcast i8* %2672 to <32 x i8>*
  store <32 x i8> %1256, <32 x i8>* %2673, align 1, !tbaa !217
  %2674 = getelementptr inbounds i8, i8* %2668, i32 96
  %2675 = bitcast i8* %2674 to <32 x i8>*
  store <32 x i8> %1265, <32 x i8>* %2675, align 1, !tbaa !217
  %2676 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not1857 = icmp eq i32 %2676, %143
  br i1 %.not1857, label %"end for output.s0.x.xo", label %"for output.s0.x.xo"

then_bb28:                                        ; preds = %next_bb
  %t2330 = icmp slt i32 %a553, 0
  %t2332 = icmp slt i32 %stride_x, 0
  %2677 = add nsw i32 %4, -1
  %2678 = mul nsw i32 %2677, %a553
  %t2333 = select i1 %t2330, i32 %2678, i32 0
  %t2334.s = select i1 %t2332, i32 %20, i32 1
  %t2335 = icmp slt i32 %a548, 0
  %t2337 = icmp slt i32 %stride_y, 0
  %2679 = add nsw i32 %6, -1
  %2680 = mul nsw i32 %2679, %a548
  %t2338 = select i1 %t2335, i32 %2680, i32 0
  %t2339.s = select i1 %t2337, i32 %23, i32 1
  %2681 = icmp eq i32 %4, 3
  %2682 = icmp eq i32 %6, 3
  %t2340 = and i1 %2681, %2682
  %t2325 = icmp eq i32 %depth_multiplier, 1
  %a548.op1832 = shl i32 %a548, 1
  %2683 = select i1 %t2335, i32 %a548.op1832, i32 0
  %2684 = select i1 %t2340, i32 %2683, i32 %t2338
  %2685 = add i32 %22, -1
  %2686 = add i32 %2685, %t2339.s
  %2687 = mul nsw i32 %2686, %stride_y
  %b429 = add nsw i32 %2687, %2684
  %a553.op1833 = shl i32 %a553, 1
  %2688 = select i1 %t2330, i32 %a553.op1833, i32 0
  %2689 = select i1 %t2340, i32 %2688, i32 %t2333
  %2690 = add i32 %19, -1
  %2691 = add i32 %2690, %t2334.s
  %2692 = mul nsw i32 %2691, %stride_x
  %b428 = add nsw i32 %2692, %2689
  %2693 = select i1 %t2335, i32 0, i32 %2680
  %2694 = add nsw i32 %23, -1
  %2695 = select i1 %t2337, i32 0, i32 %2694
  %2696 = add nsw i32 %2695, %22
  %2697 = mul nsw i32 %2696, %stride_y
  %b434 = add nsw i32 %2697, %2693
  %2698 = select i1 %t2330, i32 0, i32 %2678
  %2699 = add nsw i32 %20, -1
  %2700 = select i1 %t2332, i32 0, i32 %2699
  %2701 = add nsw i32 %2700, %19
  %2702 = mul nsw i32 %2701, %stride_x
  %b430 = add nsw i32 %2702, %2698
  %2703 = mul nsw i32 %13, %12
  %2704 = mul nsw i32 %16, %14
  %2705 = mul nsw i32 %11, %10
  %2706 = add i32 %2703, %2705
  %t2326 = add i32 %2706, %2704
  %2707 = add nuw nsw i32 %3, 127
  %2708 = ashr i32 %2707, 7
  %b423 = add nsw i32 %3, -128
  %2709 = icmp sgt i32 %4, 0
  %2710 = icmp sgt i32 %6, 0
  %2711 = select i1 %2710, i32 %6, i32 0
  %.op2638 = shl i32 %4, 8
  %2712 = select i1 %2709, i32 %.op2638, i32 0
  %2713 = mul i32 %2712, %2711
  %2714 = or i32 %2713, 134
  %2715 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %2716 = zext i8 %filter_zero to i16
  %2717 = insertelement <64 x i16> undef, i16 %2716, i32 0
  %2718 = shufflevector <64 x i16> %2717, <64 x i16> undef, <64 x i32> zeroinitializer
  %2719 = bitcast <64 x i16> %2718 to <32 x i32>
  %2720 = bitcast [512 x i32]* %offset_c1815 to <32 x i32>*
  %2721 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 32
  %2722 = bitcast i32* %2721 to <32 x i32>*
  %2723 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 64
  %2724 = bitcast i32* %2723 to <32 x i32>*
  %2725 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 96
  %2726 = bitcast i32* %2725 to <32 x i32>*
  %2727 = bitcast i8* %0 to i32*
  %2728 = zext i8 %input_zero to i32
  %2729 = insertelement <32 x i32> undef, i32 %2728, i32 0
  %2730 = shufflevector <32 x i32> %2729, <32 x i32> undef, <32 x i32> zeroinitializer
  %a426 = add nsw i32 %2692, %t2333
  %2731 = icmp slt i32 %t2333, %2689
  %t2348 = select i1 %2731, i32 %a426, i32 %b428
  %a427 = add nsw i32 %2687, %t2338
  %2732 = icmp slt i32 %t2338, %2684
  %t2346 = select i1 %2732, i32 %a427, i32 %b429
  %2733 = icmp sgt i32 %a553, 0
  %2734 = select i1 %2733, i32 %a553, i32 0
  %2735 = shl nuw nsw i32 %2734, 1
  %2736 = select i1 %t2340, i32 %2735, i32 %2698
  %a428 = add nsw i32 %2702, %2736
  %2737 = icmp sgt i32 %2736, %2698
  %2738 = select i1 %2737, i32 %a428, i32 %b430
  %a438 = sub nsw i32 %2738, %t2348
  %2739 = icmp sgt i32 %a548, 0
  %2740 = select i1 %2739, i32 %a548, i32 0
  %2741 = shl nuw nsw i32 %2740, 1
  %2742 = select i1 %t2340, i32 %2741, i32 %2693
  %a432 = add nsw i32 %2697, %2742
  %2743 = icmp sgt i32 %2742, %2693
  %2744 = select i1 %2743, i32 %a432, i32 %b434
  %a439 = sub nsw i32 %2744, %t2346
  %t2351 = sub nsw i32 %b430, %a426
  %t2350 = sub nsw i32 %b434, %a427
  %2745 = icmp sgt i32 %15, 0
  %2746 = icmp sgt i32 %a438, -1
  %t2549 = select i1 %2746, i32 %a438, i32 -1
  %2747 = icmp sgt i32 %a439, -1
  %t2550 = select i1 %2747, i32 %a439, i32 -1
  %2748 = add nsw i32 %t2550, 1
  %2749 = shl i32 %t2549, 7
  %t2551 = add i32 %2749, 128
  %2750 = mul i32 %t2551, %2748
  %2751 = add i32 %2750, 131
  %2752 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %2753 = icmp sgt i32 %t2350, -1
  %2754 = sub i32 %a427, %t2346
  %2755 = add nsw i32 %a438, 1
  %2756 = sub i32 %a426, %t2348
  %2757 = icmp sgt i32 %t2351, -1
  %2758 = icmp eq i32 %depth_multiplier, 0
  %2759 = select i1 %2758, <64 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <64 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %2760 = xor i32 %depth_multiplier.lobit, -1
  %2761 = sub nsw i32 %2760, %depth_multiplier.lobit
  %.neg2125 = mul i32 %24, %22
  %.neg2126 = mul i32 %21, %19
  %.neg2127 = mul i32 %25, %14
  %2762 = icmp sgt i32 %23, 0
  %2763 = sub i32 %a548.op1832, %t2346
  %2764 = sub i32 %a548, %t2346
  %2765 = icmp sgt i32 %20, 0
  %2766 = bitcast [128 x i32]* %sum_filter1817 to <32 x i32>*
  %2767 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 32
  %2768 = bitcast i32* %2767 to <32 x i32>*
  %2769 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 64
  %2770 = bitcast i32* %2769 to <32 x i32>*
  %2771 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 96
  %2772 = bitcast i32* %2771 to <32 x i32>*
  %2773 = sub nsw i32 %a553.op1833, %t2348
  %2774 = sub nsw i32 %a553, %t2348
  %2775 = sext i32 %output_multiplier to i64
  %2776 = insertelement <32 x i64> undef, i64 %2775, i32 0
  %2777 = shufflevector <32 x i64> %2776, <32 x i64> undef, <32 x i32> zeroinitializer
  %2778 = shl nuw i32 1, %output_shift
  %2779 = ashr i32 %2778, 1
  %2780 = zext i8 %output_zero to i16
  %2781 = insertelement <64 x i16> undef, i16 %2780, i32 0
  %2782 = shufflevector <64 x i16> %2781, <64 x i16> undef, <64 x i32> zeroinitializer
  %2783 = bitcast <64 x i16> %2782 to <32 x i32>
  %2784 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %2785 = shufflevector <32 x i8> %2784, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2786 = bitcast <128 x i8> %2785 to <32 x i32>
  %2787 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %2788 = shufflevector <32 x i8> %2787, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2789 = bitcast <128 x i8> %2788 to <32 x i32>
  %reass.add2129 = add i32 %.neg2125, %.neg2126
  %reass.add2130 = add i32 %reass.add2129, %.neg2127
  %2790 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %2791 = add i32 %4, -1
  %2792 = add i32 %20, -1
  %xtraiter3026 = and i32 %4, 3
  %2793 = icmp ult i32 %2791, 3
  %unroll_iter3029 = and i32 %4, -4
  %lcmp.mod3028.not = icmp eq i32 %xtraiter3026, 0
  %xtraiter3031 = and i32 %4, 3
  %2794 = icmp ult i32 %2791, 3
  %unroll_iter3041 = and i32 %4, -4
  %lcmp.mod3036.not = icmp eq i32 %xtraiter3031, 0
  %2795 = or i32 %t2350, %t2351
  %2796 = icmp slt i32 %2795, 0
  %xtraiter3043 = and i32 %20, 7
  %2797 = icmp ult i32 %2792, 7
  %unroll_iter3046 = and i32 %20, -8
  %lcmp.mod3045.not = icmp eq i32 %xtraiter3043, 0
  %xtraiter3048 = and i32 %4, 1
  %2798 = icmp eq i32 %2791, 0
  %unroll_iter3054 = and i32 %4, -2
  %lcmp.mod3053.not = icmp eq i32 %xtraiter3048, 0
  br label %"for output.s0.c.co30"

next_bb29:                                        ; preds = %next_bb
  %2799 = icmp sgt i32 %3, 0
  br i1 %2799, label %if.end.i2005, label %call_destructor.exit1937

"for output.s0.c.co30":                           ; preds = %then_bb28, %"end for output.s0.b.rebased58"
  %.3 = phi i8* [ null, %then_bb28 ], [ %.4, %"end for output.s0.b.rebased58" ]
  %output.s0.c.co32 = phi i32 [ 0, %then_bb28 ], [ %3173, %"end for output.s0.b.rebased58" ]
  %a421 = shl nsw i32 %output.s0.c.co32, 7
  %2800 = icmp slt i32 %a421, %b423
  %output.s0.c.c.base33 = select i1 %2800, i32 %a421, i32 %b423
  %2801 = load i32, i32* %.fca.1.gep, align 4, !tbaa !98
  %cmp.i1958 = icmp ult i32 %2801, %2714
  %2802 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !95
  br i1 %cmp.i1958, label %if.then.i1961, label %pseudostack_alloc.exit1974, !prof !99

if.then.i1961:                                    ; preds = %"for output.s0.c.co30"
  %tobool1.not.i1960 = icmp ne i8* %2802, null
  %2803 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i1963 = icmp ugt i32 %2803, 16384
  %or.cond2116 = and i1 %tobool1.not.i1960, %cmp2.i1963
  br i1 %or.cond2116, label %if.then3.i1965, label %if.end.i1969

if.then3.i1965:                                   ; preds = %if.then.i1961
  call void @halide_free(i8* null, i8* nonnull %2802) #15
  br label %if.end.i1969

if.end.i1969:                                     ; preds = %if.then3.i1965, %if.then.i1961
  %add.i1967 = add i32 %2803, %2714
  store i32 %add.i1967, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i1968 = icmp ugt i32 %add.i1967, 16384
  br i1 %cmp7.i1968, label %if.then8.i1971, label %if.end11.i1973

if.then8.i1971:                                   ; preds = %if.end.i1969
  %call.i1970 = call i8* @halide_malloc(i8* null, i32 %2714) #15
  br label %if.end11.i1973

if.end11.i1973:                                   ; preds = %if.then8.i1971, %if.end.i1969
  %storemerge.i1972 = phi i8* [ %call.i1970, %if.then8.i1971 ], [ null, %if.end.i1969 ]
  store i8* %storemerge.i1972, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %2714, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %pseudostack_alloc.exit1974

pseudostack_alloc.exit1974:                       ; preds = %"for output.s0.c.co30", %if.end11.i1973
  %2804 = phi i8* [ %storemerge.i1972, %if.end11.i1973 ], [ %2802, %"for output.s0.c.co30" ]
  %2805 = bitcast i8* %2804 to i16*
  %.not1834 = icmp eq i8* %2804, null
  br i1 %.not1834, label %then_bb35, label %"produce filter_zeroed37", !prof !100

then_bb35:                                        ; preds = %pseudostack_alloc.exit1974
  %2806 = alloca i8*, i32 %2714, align 128
  %2807 = bitcast i8** %2806 to i16*
  store i8** %2806, i8*** %2715, align 4
  br label %"produce filter_zeroed37"

"produce filter_zeroed37":                        ; preds = %pseudostack_alloc.exit1974, %then_bb35
  %filter_zeroed36 = phi i16* [ %2807, %then_bb35 ], [ %2805, %pseudostack_alloc.exit1974 ]
  br i1 %2710, label %"for filter_zeroed.s0.y38.preheader", label %"consume sum_filter54.critedge", !prof !101

"for filter_zeroed.s0.y38.preheader":             ; preds = %"produce filter_zeroed37"
  br i1 %2709, label %"for filter_zeroed.s0.y38.us", label %"for sum_filter.s1.r19$y48.preheader.thread", !prof !101

"for sum_filter.s1.r19$y48.preheader.thread":     ; preds = %"for filter_zeroed.s0.y38.preheader"
  %2808 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %2808, <32 x i32>* %2720, align 128, !tbaa !131
  %2809 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"consume sum_filter54.sink.split"

"for filter_zeroed.s0.y38.us":                    ; preds = %"for filter_zeroed.s0.y38.preheader", %"end for filter_zeroed.s0.x42.loopexit.us"
  %filter_zeroed.s0.y40.us = phi i32 [ %2918, %"end for filter_zeroed.s0.x42.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y38.preheader" ]
  %2810 = mul nsw i32 %filter_zeroed.s0.y40.us, %7
  %2811 = add nsw i32 %2810, %output.s0.c.c.base33
  %2812 = mul nsw i32 %filter_zeroed.s0.y40.us, %4
  br i1 %2793, label %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x41.us"

"for filter_zeroed.s0.x41.us":                    ; preds = %"for filter_zeroed.s0.y38.us", %"for filter_zeroed.s0.x41.us"
  %filter_zeroed.s0.x43.us = phi i32 [ %2896, %"for filter_zeroed.s0.x41.us" ], [ 0, %"for filter_zeroed.s0.y38.us" ]
  %niter3030 = phi i32 [ %niter3030.nsub.3, %"for filter_zeroed.s0.x41.us" ], [ %unroll_iter3029, %"for filter_zeroed.s0.y38.us" ]
  %2813 = mul nsw i32 %filter_zeroed.s0.x43.us, %5
  %2814 = add nsw i32 %2811, %2813
  %2815 = getelementptr inbounds i8, i8* %1, i32 %2814
  %2816 = bitcast i8* %2815 to <64 x i8>*
  %2817 = load <64 x i8>, <64 x i8>* %2816, align 1, !tbaa !102
  %2818 = zext <64 x i8> %2817 to <64 x i16>
  %2819 = bitcast <64 x i16> %2818 to <32 x i32>
  %2820 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2819, <32 x i32> %2719) #11
  %2821 = add nsw i32 %filter_zeroed.s0.x43.us, %2812
  %2822 = shl nsw i32 %2821, 7
  %2823 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2822
  %2824 = bitcast i16* %2823 to <32 x i32>*
  store <32 x i32> %2820, <32 x i32>* %2824, align 128, !tbaa !105
  %2825 = getelementptr inbounds i8, i8* %2815, i32 64
  %2826 = bitcast i8* %2825 to <64 x i8>*
  %2827 = load <64 x i8>, <64 x i8>* %2826, align 1, !tbaa !102
  %2828 = zext <64 x i8> %2827 to <64 x i16>
  %2829 = bitcast <64 x i16> %2828 to <32 x i32>
  %2830 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2829, <32 x i32> %2719) #11
  %2831 = getelementptr inbounds i16, i16* %2823, i32 64
  %2832 = bitcast i16* %2831 to <32 x i32>*
  store <32 x i32> %2830, <32 x i32>* %2832, align 128, !tbaa !105
  %2833 = or i32 %filter_zeroed.s0.x43.us, 1
  %2834 = mul nsw i32 %2833, %5
  %2835 = add nsw i32 %2811, %2834
  %2836 = getelementptr inbounds i8, i8* %1, i32 %2835
  %2837 = bitcast i8* %2836 to <64 x i8>*
  %2838 = load <64 x i8>, <64 x i8>* %2837, align 1, !tbaa !102
  %2839 = zext <64 x i8> %2838 to <64 x i16>
  %2840 = bitcast <64 x i16> %2839 to <32 x i32>
  %2841 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2840, <32 x i32> %2719) #11
  %2842 = add nsw i32 %2833, %2812
  %2843 = shl nsw i32 %2842, 7
  %2844 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2843
  %2845 = bitcast i16* %2844 to <32 x i32>*
  store <32 x i32> %2841, <32 x i32>* %2845, align 128, !tbaa !105
  %2846 = getelementptr inbounds i8, i8* %2836, i32 64
  %2847 = bitcast i8* %2846 to <64 x i8>*
  %2848 = load <64 x i8>, <64 x i8>* %2847, align 1, !tbaa !102
  %2849 = zext <64 x i8> %2848 to <64 x i16>
  %2850 = bitcast <64 x i16> %2849 to <32 x i32>
  %2851 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2850, <32 x i32> %2719) #11
  %2852 = getelementptr inbounds i16, i16* %2844, i32 64
  %2853 = bitcast i16* %2852 to <32 x i32>*
  store <32 x i32> %2851, <32 x i32>* %2853, align 128, !tbaa !105
  %2854 = or i32 %filter_zeroed.s0.x43.us, 2
  %2855 = mul nsw i32 %2854, %5
  %2856 = add nsw i32 %2811, %2855
  %2857 = getelementptr inbounds i8, i8* %1, i32 %2856
  %2858 = bitcast i8* %2857 to <64 x i8>*
  %2859 = load <64 x i8>, <64 x i8>* %2858, align 1, !tbaa !102
  %2860 = zext <64 x i8> %2859 to <64 x i16>
  %2861 = bitcast <64 x i16> %2860 to <32 x i32>
  %2862 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2861, <32 x i32> %2719) #11
  %2863 = add nsw i32 %2854, %2812
  %2864 = shl nsw i32 %2863, 7
  %2865 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2864
  %2866 = bitcast i16* %2865 to <32 x i32>*
  store <32 x i32> %2862, <32 x i32>* %2866, align 128, !tbaa !105
  %2867 = getelementptr inbounds i8, i8* %2857, i32 64
  %2868 = bitcast i8* %2867 to <64 x i8>*
  %2869 = load <64 x i8>, <64 x i8>* %2868, align 1, !tbaa !102
  %2870 = zext <64 x i8> %2869 to <64 x i16>
  %2871 = bitcast <64 x i16> %2870 to <32 x i32>
  %2872 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2871, <32 x i32> %2719) #11
  %2873 = getelementptr inbounds i16, i16* %2865, i32 64
  %2874 = bitcast i16* %2873 to <32 x i32>*
  store <32 x i32> %2872, <32 x i32>* %2874, align 128, !tbaa !105
  %2875 = or i32 %filter_zeroed.s0.x43.us, 3
  %2876 = mul nsw i32 %2875, %5
  %2877 = add nsw i32 %2811, %2876
  %2878 = getelementptr inbounds i8, i8* %1, i32 %2877
  %2879 = bitcast i8* %2878 to <64 x i8>*
  %2880 = load <64 x i8>, <64 x i8>* %2879, align 1, !tbaa !102
  %2881 = zext <64 x i8> %2880 to <64 x i16>
  %2882 = bitcast <64 x i16> %2881 to <32 x i32>
  %2883 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2882, <32 x i32> %2719) #11
  %2884 = add nsw i32 %2875, %2812
  %2885 = shl nsw i32 %2884, 7
  %2886 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2885
  %2887 = bitcast i16* %2886 to <32 x i32>*
  store <32 x i32> %2883, <32 x i32>* %2887, align 128, !tbaa !105
  %2888 = getelementptr inbounds i8, i8* %2878, i32 64
  %2889 = bitcast i8* %2888 to <64 x i8>*
  %2890 = load <64 x i8>, <64 x i8>* %2889, align 1, !tbaa !102
  %2891 = zext <64 x i8> %2890 to <64 x i16>
  %2892 = bitcast <64 x i16> %2891 to <32 x i32>
  %2893 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2892, <32 x i32> %2719) #11
  %2894 = getelementptr inbounds i16, i16* %2886, i32 64
  %2895 = bitcast i16* %2894 to <32 x i32>*
  store <32 x i32> %2893, <32 x i32>* %2895, align 128, !tbaa !105
  %2896 = add nuw nsw i32 %filter_zeroed.s0.x43.us, 4
  %niter3030.nsub.3 = add i32 %niter3030, -4
  %niter3030.ncmp.3 = icmp eq i32 %niter3030.nsub.3, 0
  br i1 %niter3030.ncmp.3, label %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x41.us"

"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x41.us", %"for filter_zeroed.s0.y38.us"
  %filter_zeroed.s0.x43.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y38.us" ], [ %2896, %"for filter_zeroed.s0.x41.us" ]
  br i1 %lcmp.mod3028.not, label %"end for filter_zeroed.s0.x42.loopexit.us", label %"for filter_zeroed.s0.x41.us.epil"

"for filter_zeroed.s0.x41.us.epil":               ; preds = %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x41.us.epil"
  %filter_zeroed.s0.x43.us.epil = phi i32 [ %2917, %"for filter_zeroed.s0.x41.us.epil" ], [ %filter_zeroed.s0.x43.us.unr, %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa" ]
  %epil.iter3027 = phi i32 [ %epil.iter3027.sub, %"for filter_zeroed.s0.x41.us.epil" ], [ %xtraiter3026, %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa" ]
  %2897 = mul nsw i32 %filter_zeroed.s0.x43.us.epil, %5
  %2898 = add nsw i32 %2811, %2897
  %2899 = getelementptr inbounds i8, i8* %1, i32 %2898
  %2900 = bitcast i8* %2899 to <64 x i8>*
  %2901 = load <64 x i8>, <64 x i8>* %2900, align 1, !tbaa !102
  %2902 = zext <64 x i8> %2901 to <64 x i16>
  %2903 = bitcast <64 x i16> %2902 to <32 x i32>
  %2904 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2903, <32 x i32> %2719) #11
  %2905 = add nsw i32 %filter_zeroed.s0.x43.us.epil, %2812
  %2906 = shl nsw i32 %2905, 7
  %2907 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2906
  %2908 = bitcast i16* %2907 to <32 x i32>*
  store <32 x i32> %2904, <32 x i32>* %2908, align 128, !tbaa !105
  %2909 = getelementptr inbounds i8, i8* %2899, i32 64
  %2910 = bitcast i8* %2909 to <64 x i8>*
  %2911 = load <64 x i8>, <64 x i8>* %2910, align 1, !tbaa !102
  %2912 = zext <64 x i8> %2911 to <64 x i16>
  %2913 = bitcast <64 x i16> %2912 to <32 x i32>
  %2914 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2913, <32 x i32> %2719) #11
  %2915 = getelementptr inbounds i16, i16* %2907, i32 64
  %2916 = bitcast i16* %2915 to <32 x i32>*
  store <32 x i32> %2914, <32 x i32>* %2916, align 128, !tbaa !105
  %2917 = add nuw nsw i32 %filter_zeroed.s0.x43.us.epil, 1
  %epil.iter3027.sub = add i32 %epil.iter3027, -1
  %epil.iter3027.cmp.not = icmp eq i32 %epil.iter3027.sub, 0
  br i1 %epil.iter3027.cmp.not, label %"end for filter_zeroed.s0.x42.loopexit.us", label %"for filter_zeroed.s0.x41.us.epil", !llvm.loop !219

"end for filter_zeroed.s0.x42.loopexit.us":       ; preds = %"for filter_zeroed.s0.x41.us.epil", %"end for filter_zeroed.s0.x42.loopexit.us.unr-lcssa"
  %2918 = add nuw nsw i32 %filter_zeroed.s0.y40.us, 1
  %.not1848.us = icmp eq i32 %2918, %6
  br i1 %.not1848.us, label %"for sum_filter.s1.r19$y48.preheader", label %"for filter_zeroed.s0.y38.us"

"for sum_filter.s1.r19$y48.preheader":            ; preds = %"end for filter_zeroed.s0.x42.loopexit.us"
  %2919 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %2919, <32 x i32>* %2720, align 128, !tbaa !131
  %2920 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %2920, <32 x i32>* %2722, align 128, !tbaa !139
  store <32 x i32> %2919, <32 x i32>* %2724, align 128, !tbaa !141
  store <32 x i32> %2920, <32 x i32>* %2726, align 128, !tbaa !144
  br i1 %2709, label %"for sum_filter.s1.r19$y48.us", label %"consume sum_filter54", !prof !101

"for sum_filter.s1.r19$y48.us":                   ; preds = %"for sum_filter.s1.r19$y48.preheader", %"end for sum_filter.s1.r19$x52.loopexit.us"
  %.lcssa2186.us2193 = phi <32 x i32> [ %.lcssa2942, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %2920, %"for sum_filter.s1.r19$y48.preheader" ]
  %.lcssa2184.us2191 = phi <32 x i32> [ %.lcssa2943, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %2919, %"for sum_filter.s1.r19$y48.preheader" ]
  %.lcssa2182.us2189 = phi <32 x i32> [ %.lcssa2944, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %2920, %"for sum_filter.s1.r19$y48.preheader" ]
  %.lcssa2180.us2187 = phi <32 x i32> [ %.lcssa2945, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ %2919, %"for sum_filter.s1.r19$y48.preheader" ]
  %"sum_filter.s1.r19$y50.us" = phi i32 [ %3025, %"end for sum_filter.s1.r19$x52.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y48.preheader" ]
  %2921 = mul nsw i32 %"sum_filter.s1.r19$y50.us", %4
  br i1 %2794, label %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x51.us"

"for sum_filter.s1.r19$x51.us":                   ; preds = %"for sum_filter.s1.r19$y48.us", %"for sum_filter.s1.r19$x51.us"
  %2922 = phi <32 x i32> [ %3000, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2186.us2193, %"for sum_filter.s1.r19$y48.us" ]
  %2923 = phi <32 x i32> [ %2999, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2184.us2191, %"for sum_filter.s1.r19$y48.us" ]
  %2924 = phi <32 x i32> [ %2992, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2182.us2189, %"for sum_filter.s1.r19$y48.us" ]
  %2925 = phi <32 x i32> [ %2991, %"for sum_filter.s1.r19$x51.us" ], [ %.lcssa2180.us2187, %"for sum_filter.s1.r19$y48.us" ]
  %"sum_filter.s1.r19$x53.us" = phi i32 [ %3001, %"for sum_filter.s1.r19$x51.us" ], [ 0, %"for sum_filter.s1.r19$y48.us" ]
  %niter3042 = phi i32 [ %niter3042.nsub.3, %"for sum_filter.s1.r19$x51.us" ], [ %unroll_iter3041, %"for sum_filter.s1.r19$y48.us" ]
  %2926 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2924, <32 x i32> %2925)
  %2927 = add nsw i32 %"sum_filter.s1.r19$x53.us", %2921
  %2928 = shl nsw i32 %2927, 7
  %2929 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2928
  %2930 = bitcast i16* %2929 to <32 x i32>*
  %2931 = load <32 x i32>, <32 x i32>* %2930, align 128, !tbaa !105
  %2932 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2931) #11
  %2933 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2932, <64 x i32> %2926) #11
  %2934 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2933)
  %2935 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2933)
  %2936 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2922, <32 x i32> %2923)
  %2937 = getelementptr inbounds i16, i16* %2929, i32 64
  %2938 = bitcast i16* %2937 to <32 x i32>*
  %2939 = load <32 x i32>, <32 x i32>* %2938, align 128, !tbaa !105
  %2940 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2939) #11
  %2941 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2940, <64 x i32> %2936) #11
  %2942 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2941)
  %2943 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2941)
  %2944 = or i32 %"sum_filter.s1.r19$x53.us", 1
  %2945 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2935, <32 x i32> %2934)
  %2946 = add nsw i32 %2944, %2921
  %2947 = shl nsw i32 %2946, 7
  %2948 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2947
  %2949 = bitcast i16* %2948 to <32 x i32>*
  %2950 = load <32 x i32>, <32 x i32>* %2949, align 128, !tbaa !105
  %2951 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2950) #11
  %2952 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2951, <64 x i32> %2945) #11
  %2953 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2952)
  %2954 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2952)
  %2955 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2943, <32 x i32> %2942)
  %2956 = getelementptr inbounds i16, i16* %2948, i32 64
  %2957 = bitcast i16* %2956 to <32 x i32>*
  %2958 = load <32 x i32>, <32 x i32>* %2957, align 128, !tbaa !105
  %2959 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2958) #11
  %2960 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2959, <64 x i32> %2955) #11
  %2961 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2960)
  %2962 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2960)
  %2963 = or i32 %"sum_filter.s1.r19$x53.us", 2
  %2964 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2954, <32 x i32> %2953)
  %2965 = add nsw i32 %2963, %2921
  %2966 = shl nsw i32 %2965, 7
  %2967 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2966
  %2968 = bitcast i16* %2967 to <32 x i32>*
  %2969 = load <32 x i32>, <32 x i32>* %2968, align 128, !tbaa !105
  %2970 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2969) #11
  %2971 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2970, <64 x i32> %2964) #11
  %2972 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2971)
  %2973 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2971)
  %2974 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2962, <32 x i32> %2961)
  %2975 = getelementptr inbounds i16, i16* %2967, i32 64
  %2976 = bitcast i16* %2975 to <32 x i32>*
  %2977 = load <32 x i32>, <32 x i32>* %2976, align 128, !tbaa !105
  %2978 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2977) #11
  %2979 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2978, <64 x i32> %2974) #11
  %2980 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2979)
  %2981 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2979)
  %2982 = or i32 %"sum_filter.s1.r19$x53.us", 3
  %2983 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2973, <32 x i32> %2972)
  %2984 = add nsw i32 %2982, %2921
  %2985 = shl nsw i32 %2984, 7
  %2986 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %2985
  %2987 = bitcast i16* %2986 to <32 x i32>*
  %2988 = load <32 x i32>, <32 x i32>* %2987, align 128, !tbaa !105
  %2989 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2988) #11
  %2990 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2989, <64 x i32> %2983) #11
  %2991 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2990)
  %2992 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2990)
  %2993 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2981, <32 x i32> %2980)
  %2994 = getelementptr inbounds i16, i16* %2986, i32 64
  %2995 = bitcast i16* %2994 to <32 x i32>*
  %2996 = load <32 x i32>, <32 x i32>* %2995, align 128, !tbaa !105
  %2997 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2996) #11
  %2998 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2997, <64 x i32> %2993) #11
  %2999 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2998)
  %3000 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2998)
  %3001 = add nuw nsw i32 %"sum_filter.s1.r19$x53.us", 4
  %niter3042.nsub.3 = add i32 %niter3042, -4
  %niter3042.ncmp.3 = icmp eq i32 %niter3042.nsub.3, 0
  br i1 %niter3042.ncmp.3, label %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x51.us"

"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x51.us", %"for sum_filter.s1.r19$y48.us"
  %.lcssa2945.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %2991, %"for sum_filter.s1.r19$x51.us" ]
  %.lcssa2944.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %2992, %"for sum_filter.s1.r19$x51.us" ]
  %.lcssa2943.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %2999, %"for sum_filter.s1.r19$x51.us" ]
  %.lcssa2942.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y48.us" ], [ %3000, %"for sum_filter.s1.r19$x51.us" ]
  %.unr = phi <32 x i32> [ %.lcssa2186.us2193, %"for sum_filter.s1.r19$y48.us" ], [ %3000, %"for sum_filter.s1.r19$x51.us" ]
  %.unr3033 = phi <32 x i32> [ %.lcssa2184.us2191, %"for sum_filter.s1.r19$y48.us" ], [ %2999, %"for sum_filter.s1.r19$x51.us" ]
  %.unr3034 = phi <32 x i32> [ %.lcssa2182.us2189, %"for sum_filter.s1.r19$y48.us" ], [ %2992, %"for sum_filter.s1.r19$x51.us" ]
  %.unr3035 = phi <32 x i32> [ %.lcssa2180.us2187, %"for sum_filter.s1.r19$y48.us" ], [ %2991, %"for sum_filter.s1.r19$x51.us" ]
  %"sum_filter.s1.r19$x53.us.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y48.us" ], [ %3001, %"for sum_filter.s1.r19$x51.us" ]
  br i1 %lcmp.mod3036.not, label %"end for sum_filter.s1.r19$x52.loopexit.us", label %"for sum_filter.s1.r19$x51.us.epil"

"for sum_filter.s1.r19$x51.us.epil":              ; preds = %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x51.us.epil"
  %3002 = phi <32 x i32> [ %3023, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3003 = phi <32 x i32> [ %3022, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr3033, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3004 = phi <32 x i32> [ %3015, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr3034, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3005 = phi <32 x i32> [ %3014, %"for sum_filter.s1.r19$x51.us.epil" ], [ %.unr3035, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %"sum_filter.s1.r19$x53.us.epil" = phi i32 [ %3024, %"for sum_filter.s1.r19$x51.us.epil" ], [ %"sum_filter.s1.r19$x53.us.unr", %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %epil.iter3032 = phi i32 [ %epil.iter3032.sub, %"for sum_filter.s1.r19$x51.us.epil" ], [ %xtraiter3031, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ]
  %3006 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3004, <32 x i32> %3005)
  %3007 = add nsw i32 %"sum_filter.s1.r19$x53.us.epil", %2921
  %3008 = shl nsw i32 %3007, 7
  %3009 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %3008
  %3010 = bitcast i16* %3009 to <32 x i32>*
  %3011 = load <32 x i32>, <32 x i32>* %3010, align 128, !tbaa !105
  %3012 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3011) #11
  %3013 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3012, <64 x i32> %3006) #11
  %3014 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3013)
  %3015 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3013)
  %3016 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3002, <32 x i32> %3003)
  %3017 = getelementptr inbounds i16, i16* %3009, i32 64
  %3018 = bitcast i16* %3017 to <32 x i32>*
  %3019 = load <32 x i32>, <32 x i32>* %3018, align 128, !tbaa !105
  %3020 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3019) #11
  %3021 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3020, <64 x i32> %3016) #11
  %3022 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3021)
  %3023 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3021)
  %3024 = add nuw nsw i32 %"sum_filter.s1.r19$x53.us.epil", 1
  %epil.iter3032.sub = add i32 %epil.iter3032, -1
  %epil.iter3032.cmp.not = icmp eq i32 %epil.iter3032.sub, 0
  br i1 %epil.iter3032.cmp.not, label %"end for sum_filter.s1.r19$x52.loopexit.us", label %"for sum_filter.s1.r19$x51.us.epil", !llvm.loop !220

"end for sum_filter.s1.r19$x52.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x51.us.epil", %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa"
  %.lcssa2945 = phi <32 x i32> [ %.lcssa2945.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3014, %"for sum_filter.s1.r19$x51.us.epil" ]
  %.lcssa2944 = phi <32 x i32> [ %.lcssa2944.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3015, %"for sum_filter.s1.r19$x51.us.epil" ]
  %.lcssa2943 = phi <32 x i32> [ %.lcssa2943.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3022, %"for sum_filter.s1.r19$x51.us.epil" ]
  %.lcssa2942 = phi <32 x i32> [ %.lcssa2942.ph, %"end for sum_filter.s1.r19$x52.loopexit.us.unr-lcssa" ], [ %3023, %"for sum_filter.s1.r19$x51.us.epil" ]
  %3025 = add nuw nsw i32 %"sum_filter.s1.r19$y50.us", 1
  %.not1846.us = icmp eq i32 %3025, %6
  br i1 %.not1846.us, label %"consume sum_filter54.loopexit.split.us", label %"for sum_filter.s1.r19$y48.us"

"consume sum_filter54.loopexit.split.us":         ; preds = %"end for sum_filter.s1.r19$x52.loopexit.us"
  store <32 x i32> %.lcssa2945, <32 x i32>* %2720, align 128, !tbaa !131
  br label %"consume sum_filter54.sink.split"

"consume sum_filter54.critedge":                  ; preds = %"produce filter_zeroed37"
  %3026 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  store <32 x i32> %3026, <32 x i32>* %2720, align 128, !tbaa !131
  %3027 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  br label %"consume sum_filter54.sink.split"

"consume sum_filter54.sink.split":                ; preds = %"consume sum_filter54.critedge", %"consume sum_filter54.loopexit.split.us", %"for sum_filter.s1.r19$y48.preheader.thread"
  %.sink2917 = phi <32 x i32> [ %2809, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2944, %"consume sum_filter54.loopexit.split.us" ], [ %3027, %"consume sum_filter54.critedge" ]
  %.sink2916 = phi <32 x i32> [ %2808, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2943, %"consume sum_filter54.loopexit.split.us" ], [ %3026, %"consume sum_filter54.critedge" ]
  %.sink = phi <32 x i32> [ %2809, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2942, %"consume sum_filter54.loopexit.split.us" ], [ %3027, %"consume sum_filter54.critedge" ]
  %.ph2915 = phi <32 x i32> [ %2808, %"for sum_filter.s1.r19$y48.preheader.thread" ], [ %.lcssa2945, %"consume sum_filter54.loopexit.split.us" ], [ %3026, %"consume sum_filter54.critedge" ]
  store <32 x i32> %.sink2917, <32 x i32>* %2722, align 128, !tbaa !139
  store <32 x i32> %.sink2916, <32 x i32>* %2724, align 128, !tbaa !141
  store <32 x i32> %.sink, <32 x i32>* %2726, align 128, !tbaa !144
  br label %"consume sum_filter54"

"consume sum_filter54":                           ; preds = %"consume sum_filter54.sink.split", %"for sum_filter.s1.r19$y48.preheader"
  %3028 = phi <32 x i32> [ %2920, %"for sum_filter.s1.r19$y48.preheader" ], [ %.sink, %"consume sum_filter54.sink.split" ]
  %3029 = phi <32 x i32> [ %2919, %"for sum_filter.s1.r19$y48.preheader" ], [ %.sink2916, %"consume sum_filter54.sink.split" ]
  %3030 = phi <32 x i32> [ %2920, %"for sum_filter.s1.r19$y48.preheader" ], [ %.sink2917, %"consume sum_filter54.sink.split" ]
  %3031 = phi <32 x i32> [ %2919, %"for sum_filter.s1.r19$y48.preheader" ], [ %.ph2915, %"consume sum_filter54.sink.split" ]
  %3032 = getelementptr inbounds i32, i32* %2727, i32 %output.s0.c.c.base33
  %3033 = bitcast i32* %3032 to <32 x i32>*
  %3034 = load <32 x i32>, <32 x i32>* %3033, align 4, !tbaa !109
  %3035 = getelementptr inbounds i32, i32* %3032, i32 32
  %3036 = bitcast i32* %3035 to <32 x i32>*
  %3037 = load <32 x i32>, <32 x i32>* %3036, align 4, !tbaa !109
  %3038 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3037, <32 x i32> %3034)
  %3039 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2730, <32 x i32> %3031) #11
  %3040 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3039, <32 x i32> %2730, <32 x i32> %3031) #11
  %3041 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2730, <32 x i32> %3030) #11
  %3042 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3041, <32 x i32> %2730, <32 x i32> %3030) #11
  %3043 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3040, <32 x i32> %3042) #11
  %3044 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3038, <64 x i32> %3043) #11
  %3045 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3044)
  %3046 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3044)
  %3047 = getelementptr inbounds i32, i32* %3032, i32 64
  %3048 = bitcast i32* %3047 to <32 x i32>*
  %3049 = load <32 x i32>, <32 x i32>* %3048, align 4, !tbaa !109
  %3050 = getelementptr inbounds i32, i32* %3032, i32 96
  %3051 = bitcast i32* %3050 to <32 x i32>*
  %3052 = load <32 x i32>, <32 x i32>* %3051, align 4, !tbaa !109
  %3053 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3052, <32 x i32> %3049)
  %3054 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2730, <32 x i32> %3029) #11
  %3055 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3054, <32 x i32> %2730, <32 x i32> %3029) #11
  %3056 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2730, <32 x i32> %3028) #11
  %3057 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3056, <32 x i32> %2730, <32 x i32> %3028) #11
  %3058 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3055, <32 x i32> %3057) #11
  %3059 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3053, <64 x i32> %3058) #11
  %3060 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3059)
  %3061 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3059)
  br i1 %2745, label %"for output.s0.b.rebased57.preheader", label %"end for output.s0.b.rebased58", !prof !101

"for output.s0.b.rebased57.preheader":            ; preds = %"consume sum_filter54"
  %3062 = add nsw i32 %output.s0.c.c.base33, 64
  %3063 = sub i32 %output.s0.c.c.base33, %t2326
  %3064 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 768
  %3065 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1024
  %3066 = bitcast i16* %3065 to <32 x i16>*
  %3067 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1056
  %3068 = bitcast i16* %3067 to <32 x i16>*
  %3069 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 896
  %3070 = bitcast i16* %3069 to <32 x i16>*
  %3071 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 928
  %3072 = bitcast i16* %3071 to <32 x i16>*
  %3073 = bitcast i16* %3064 to <32 x i16>*
  %3074 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 800
  %3075 = bitcast i16* %3074 to <32 x i16>*
  %3076 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 384
  %3077 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 640
  %3078 = bitcast i16* %3077 to <32 x i16>*
  %3079 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 672
  %3080 = bitcast i16* %3079 to <32 x i16>*
  %3081 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 512
  %3082 = bitcast i16* %3081 to <32 x i16>*
  %3083 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 544
  %3084 = bitcast i16* %3083 to <32 x i16>*
  %3085 = bitcast i16* %3076 to <32 x i16>*
  %3086 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 416
  %3087 = bitcast i16* %3086 to <32 x i16>*
  %3088 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 256
  %3089 = bitcast i16* %3088 to <32 x i16>*
  %3090 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 288
  %3091 = bitcast i16* %3090 to <32 x i16>*
  %3092 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 128
  %3093 = bitcast i16* %3092 to <32 x i16>*
  %3094 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 160
  %3095 = bitcast i16* %3094 to <32 x i16>*
  %3096 = bitcast i16* %filter_zeroed36 to <32 x i16>*
  %3097 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 32
  %3098 = bitcast i16* %3097 to <32 x i16>*
  %3099 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1088
  %3100 = bitcast i16* %3099 to <32 x i16>*
  %3101 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 1120
  %3102 = bitcast i16* %3101 to <32 x i16>*
  %3103 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 960
  %3104 = bitcast i16* %3103 to <32 x i16>*
  %3105 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 992
  %3106 = bitcast i16* %3105 to <32 x i16>*
  %3107 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 832
  %3108 = bitcast i16* %3107 to <32 x i16>*
  %3109 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 864
  %3110 = bitcast i16* %3109 to <32 x i16>*
  %3111 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 704
  %3112 = bitcast i16* %3111 to <32 x i16>*
  %3113 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 736
  %3114 = bitcast i16* %3113 to <32 x i16>*
  %3115 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 576
  %3116 = bitcast i16* %3115 to <32 x i16>*
  %3117 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 608
  %3118 = bitcast i16* %3117 to <32 x i16>*
  %3119 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 448
  %3120 = bitcast i16* %3119 to <32 x i16>*
  %3121 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 480
  %3122 = bitcast i16* %3121 to <32 x i16>*
  %3123 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 320
  %3124 = bitcast i16* %3123 to <32 x i16>*
  %3125 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 352
  %3126 = bitcast i16* %3125 to <32 x i16>*
  %3127 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 192
  %3128 = bitcast i16* %3127 to <32 x i16>*
  %3129 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 224
  %3130 = bitcast i16* %3129 to <32 x i16>*
  %3131 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 64
  %3132 = bitcast i16* %3131 to <32 x i16>*
  %3133 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 96
  %3134 = bitcast i16* %3133 to <32 x i16>*
  %3135 = sext <32 x i32> %3045 to <32 x i64>
  %a442 = mul nsw <32 x i64> %2777, %3135
  %3136 = icmp slt <32 x i64> %a442, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3137 = select <32 x i1> %3136, <32 x i64> %a442, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3138 = add nsw <32 x i64> %3137, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a441 = ashr <32 x i64> %3138, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3139 = icmp slt <32 x i64> %a441, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a440 = select <32 x i1> %3139, <32 x i64> %a441, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3140 = icmp sgt <32 x i64> %a440, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3141 = select <32 x i1> %3140, <32 x i64> %a440, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3142 = trunc <32 x i64> %3141 to <32 x i32>
  %3143 = sext <32 x i32> %3046 to <32 x i64>
  %a445 = mul nsw <32 x i64> %2777, %3143
  %3144 = icmp slt <32 x i64> %a445, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3145 = select <32 x i1> %3144, <32 x i64> %a445, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3146 = add nsw <32 x i64> %3145, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a444 = ashr <32 x i64> %3146, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3147 = icmp slt <32 x i64> %a444, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a443 = select <32 x i1> %3147, <32 x i64> %a444, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3148 = icmp sgt <32 x i64> %a443, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3149 = select <32 x i1> %3148, <32 x i64> %a443, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3150 = trunc <32 x i64> %3149 to <32 x i32>
  %3151 = sext <32 x i32> %3060 to <32 x i64>
  %a448 = mul nsw <32 x i64> %2777, %3151
  %3152 = icmp slt <32 x i64> %a448, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3153 = select <32 x i1> %3152, <32 x i64> %a448, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3154 = add nsw <32 x i64> %3153, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a447 = ashr <32 x i64> %3154, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3155 = icmp slt <32 x i64> %a447, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a446 = select <32 x i1> %3155, <32 x i64> %a447, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3156 = icmp sgt <32 x i64> %a446, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3157 = select <32 x i1> %3156, <32 x i64> %a446, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3158 = trunc <32 x i64> %3157 to <32 x i32>
  %3159 = sext <32 x i32> %3061 to <32 x i64>
  %a451 = mul nsw <32 x i64> %2777, %3159
  %3160 = icmp slt <32 x i64> %a451, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3161 = select <32 x i1> %3160, <32 x i64> %a451, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3162 = add nsw <32 x i64> %3161, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a450 = ashr <32 x i64> %3162, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3163 = icmp slt <32 x i64> %a450, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a449 = select <32 x i1> %3163, <32 x i64> %a450, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3164 = icmp sgt <32 x i64> %a449, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3165 = select <32 x i1> %3164, <32 x i64> %a449, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3166 = trunc <32 x i64> %3165 to <32 x i32>
  %3167 = sub i32 %output.s0.c.c.base33, %reass.add2130
  br label %"for output.s0.b.rebased57"

"for output.s0.b.rebased57":                      ; preds = %"for output.s0.b.rebased57.preheader", %"end for output.s0.y.yo93"
  %output.s0.b.rebased59 = phi i32 [ %4411, %"end for output.s0.y.yo93" ], [ 0, %"for output.s0.b.rebased57.preheader" ]
  %3168 = load i32, i32* %.fca.1.gep1779, align 4, !tbaa !98
  %cmp.i1976 = icmp ult i32 %3168, %2751
  %3169 = load i8*, i8** %.fca.0.gep1778, align 4, !tbaa !95
  br i1 %cmp.i1976, label %if.then.i1979, label %pseudostack_alloc.exit1992, !prof !99

if.then.i1979:                                    ; preds = %"for output.s0.b.rebased57"
  %tobool1.not.i1978 = icmp ne i8* %3169, null
  %3170 = load i32, i32* %.fca.2.gep1780, align 4
  %cmp2.i1981 = icmp ugt i32 %3170, 16384
  %or.cond2117 = and i1 %tobool1.not.i1978, %cmp2.i1981
  br i1 %or.cond2117, label %if.then3.i1983, label %if.end.i1987

if.then3.i1983:                                   ; preds = %if.then.i1979
  call void @halide_free(i8* null, i8* nonnull %3169) #15
  %.pre2743 = load i32, i32* %.fca.2.gep1780, align 4, !tbaa !97
  br label %if.end.i1987

if.end.i1987:                                     ; preds = %if.then3.i1983, %if.then.i1979
  %3171 = phi i32 [ %.pre2743, %if.then3.i1983 ], [ %3170, %if.then.i1979 ]
  %add.i1985 = add i32 %3171, %2751
  store i32 %add.i1985, i32* %.fca.2.gep1780, align 4, !tbaa !97
  %cmp7.i1986 = icmp ugt i32 %add.i1985, 16384
  br i1 %cmp7.i1986, label %if.then8.i1989, label %if.end11.i1991

if.then8.i1989:                                   ; preds = %if.end.i1987
  %call.i1988 = call i8* @halide_malloc(i8* null, i32 %2751) #15
  br label %if.end11.i1991

if.end11.i1991:                                   ; preds = %if.then8.i1989, %if.end.i1987
  %storemerge.i1990 = phi i8* [ %call.i1988, %if.then8.i1989 ], [ null, %if.end.i1987 ]
  store i8* %storemerge.i1990, i8** %.fca.0.gep1778, align 4, !tbaa !95
  store i32 %2751, i32* %.fca.1.gep1779, align 4, !tbaa !98
  br label %pseudostack_alloc.exit1992

pseudostack_alloc.exit1992:                       ; preds = %"for output.s0.b.rebased57", %if.end11.i1991
  %3172 = phi i8* [ %storemerge.i1990, %if.end11.i1991 ], [ %3169, %"for output.s0.b.rebased57" ]
  %.not1836 = icmp eq i8* %3172, null
  br i1 %.not1836, label %then_bb61, label %"produce resampled_input63", !prof !100

"end for output.s0.b.rebased58":                  ; preds = %"end for output.s0.y.yo93", %"consume sum_filter54"
  %.4 = phi i8* [ %.3, %"consume sum_filter54" ], [ %2790, %"end for output.s0.y.yo93" ]
  %3173 = add nuw nsw i32 %output.s0.c.co32, 1
  %.not1835 = icmp eq i32 %3173, %2708
  br i1 %.not1835, label %after_bb, label %"for output.s0.c.co30"

then_bb61:                                        ; preds = %pseudostack_alloc.exit1992
  %3174 = alloca i8*, i32 %2751, align 128
  %3175 = bitcast i8** %3174 to i8*
  store i8** %3174, i8*** %2752, align 4
  br label %"produce resampled_input63"

"produce resampled_input63":                      ; preds = %pseudostack_alloc.exit1992, %then_bb61
  %resampled_input62 = phi i8* [ %3175, %then_bb61 ], [ %3172, %pseudostack_alloc.exit1992 ]
  br i1 %t2325, label %then_bb65, label %next_bb66

then_bb65:                                        ; preds = %"produce resampled_input63"
  %3176 = add nsw i32 %output.s0.b.rebased59, %14
  %3177 = mul nsw i32 %3176, %16
  %t2358 = add nsw i32 %3063, %3177
  br i1 %2796, label %"consume resampled_input91", label %"for resampled_input.s0.y.rebased67.us", !prof !126

"for resampled_input.s0.y.rebased67.us":          ; preds = %then_bb65, %"end for resampled_input.s0.x.rebased71.loopexit.us"
  %resampled_input.s0.y.rebased69.us = phi i32 [ %3194, %"end for resampled_input.s0.x.rebased71.loopexit.us" ], [ 0, %then_bb65 ]
  %3178 = add nsw i32 %2754, %resampled_input.s0.y.rebased69.us
  %3179 = mul nsw i32 %3178, %2755
  %t2362.us = add nsw i32 %2756, %3179
  %3180 = add nsw i32 %resampled_input.s0.y.rebased69.us, %a427
  %3181 = mul nsw i32 %3180, %13
  %3182 = add nsw i32 %t2358, %3181
  br label %"for resampled_input.s0.x.rebased70.us"

"for resampled_input.s0.x.rebased70.us":          ; preds = %"for resampled_input.s0.y.rebased67.us", %"for resampled_input.s0.x.rebased70.us"
  %resampled_input.s0.x.rebased72.us = phi i32 [ %3193, %"for resampled_input.s0.x.rebased70.us" ], [ 0, %"for resampled_input.s0.y.rebased67.us" ]
  %3183 = add nsw i32 %resampled_input.s0.x.rebased72.us, %a426
  %3184 = mul nsw i32 %3183, %11
  %3185 = add nsw i32 %3182, %3184
  %3186 = getelementptr inbounds i8, i8* %8, i32 %3185
  %3187 = bitcast i8* %3186 to <128 x i8>*
  %3188 = load <128 x i8>, <128 x i8>* %3187, align 1, !tbaa !127
  %3189 = add nsw i32 %t2362.us, %resampled_input.s0.x.rebased72.us
  %3190 = shl nsw i32 %3189, 7
  %3191 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3190
  %3192 = bitcast i8* %3191 to <128 x i8>*
  store <128 x i8> %3188, <128 x i8>* %3192, align 128, !tbaa !129
  %3193 = add nuw nsw i32 %resampled_input.s0.x.rebased72.us, 1
  %.not1845.us = icmp eq i32 %resampled_input.s0.x.rebased72.us, %t2351
  br i1 %.not1845.us, label %"end for resampled_input.s0.x.rebased71.loopexit.us", label %"for resampled_input.s0.x.rebased70.us"

"end for resampled_input.s0.x.rebased71.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased70.us"
  %3194 = add nuw nsw i32 %resampled_input.s0.y.rebased69.us, 1
  %.not1844.us = icmp eq i32 %resampled_input.s0.y.rebased69.us, %t2350
  br i1 %.not1844.us, label %"consume resampled_input91", label %"for resampled_input.s0.y.rebased67.us"

next_bb66:                                        ; preds = %"produce resampled_input63"
  br i1 %2753, label %"for resampled_input.s0.y.rebased73.preheader", label %"consume resampled_input91", !prof !101

"for resampled_input.s0.y.rebased73.preheader":   ; preds = %next_bb66
  %3195 = add nsw i32 %output.s0.b.rebased59, %14
  %3196 = mul nsw i32 %3195, %16
  %3197 = sub i32 %3196, %t2326
  br i1 %2757, label %"for resampled_input.s0.y.rebased73.preheader.split.us", label %"consume resampled_input91", !prof !101

"for resampled_input.s0.y.rebased73.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased73.preheader"
  %3198 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output.s0.c.c.base33) #11
  %3199 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3198, <32 x i32> %3198) #11
  %3200 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> zeroinitializer, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>) #11
  %3201 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3199, <64 x i32> %3200) #11
  %3202 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %depth_multiplier) #11
  %3203 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3202, <32 x i32> %3202) #11
  %3204 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3203, <64 x i32> %2759) #11
  %3205 = sdiv <64 x i32> %3201, %3204
  %3206 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %3207 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2761) #11
  %3208 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3206, <32 x i32> %3207) #11
  %3209 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %3210 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3209, <32 x i32> %3207) #11
  %3211 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3208, <32 x i32> %3210) #11
  %3212 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3211, <64 x i32> %3205) #11
  %3213 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3212) #11
  %3214 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2759) #11
  %3215 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %3214) #11
  %3216 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2759) #11
  %3217 = call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %3216) #11
  %3218 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3215, <32 x i32> %3217) #11
  %3219 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3218) #11
  %3220 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3213, <32 x i32> %3219) #11
  %3221 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3212) #11
  %3222 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3218) #11
  %3223 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3221, <32 x i32> %3222) #11
  %3224 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3220, <32 x i32> %3223) #11
  %3225 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3062) #11
  %3226 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3225, <32 x i32> %3225) #11
  %3227 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3226, <64 x i32> %3200) #11
  %3228 = sdiv <64 x i32> %3227, %3204
  %3229 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3211, <64 x i32> %3228) #11
  %3230 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3229) #11
  %3231 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3230, <32 x i32> %3219) #11
  %3232 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3229) #11
  %3233 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3232, <32 x i32> %3222) #11
  %3234 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3231, <32 x i32> %3233) #11
  br label %"for resampled_input.s0.y.rebased73.us"

"for resampled_input.s0.y.rebased73.us":          ; preds = %"end for resampled_input.s0.x.rebased77.loopexit.us", %"for resampled_input.s0.y.rebased73.preheader.split.us"
  %resampled_input.s0.y.rebased75.us = phi i32 [ %3765, %"end for resampled_input.s0.x.rebased77.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased73.preheader.split.us" ]
  %3235 = add nsw i32 %2754, %resampled_input.s0.y.rebased75.us
  %3236 = mul nsw i32 %3235, %2755
  %t2367.us = add nsw i32 %2756, %3236
  %3237 = add nsw i32 %resampled_input.s0.y.rebased75.us, %a427
  %3238 = mul nsw i32 %3237, %13
  %t2366.us = add nsw i32 %3197, %3238
  br label %"for resampled_input.s0.x.rebased76.us"

"for resampled_input.s0.x.rebased76.us":          ; preds = %"for resampled_input.s0.y.rebased73.us", %"for resampled_input.s0.x.rebased76.us"
  %resampled_input.s0.x.rebased78.us = phi i32 [ %3764, %"for resampled_input.s0.x.rebased76.us" ], [ 0, %"for resampled_input.s0.y.rebased73.us" ]
  %3239 = add nsw i32 %resampled_input.s0.x.rebased78.us, %a426
  %3240 = mul nsw i32 %3239, %11
  %3241 = add nsw i32 %t2366.us, %3240
  %3242 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3241) #11
  %3243 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3242, <32 x i32> %3242) #11
  %3244 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3243, <64 x i32> %3224) #11
  %3245 = extractelement <64 x i32> %3244, i32 0
  %3246 = getelementptr inbounds i8, i8* %8, i32 %3245
  %3247 = load i8, i8* %3246, align 1, !tbaa !127
  %3248 = insertelement <64 x i8> undef, i8 %3247, i32 0
  %3249 = extractelement <64 x i32> %3244, i32 1
  %3250 = getelementptr inbounds i8, i8* %8, i32 %3249
  %3251 = load i8, i8* %3250, align 1, !tbaa !127
  %3252 = insertelement <64 x i8> %3248, i8 %3251, i32 1
  %3253 = extractelement <64 x i32> %3244, i32 2
  %3254 = getelementptr inbounds i8, i8* %8, i32 %3253
  %3255 = load i8, i8* %3254, align 1, !tbaa !127
  %3256 = insertelement <64 x i8> %3252, i8 %3255, i32 2
  %3257 = extractelement <64 x i32> %3244, i32 3
  %3258 = getelementptr inbounds i8, i8* %8, i32 %3257
  %3259 = load i8, i8* %3258, align 1, !tbaa !127
  %3260 = insertelement <64 x i8> %3256, i8 %3259, i32 3
  %3261 = extractelement <64 x i32> %3244, i32 4
  %3262 = getelementptr inbounds i8, i8* %8, i32 %3261
  %3263 = load i8, i8* %3262, align 1, !tbaa !127
  %3264 = insertelement <64 x i8> %3260, i8 %3263, i32 4
  %3265 = extractelement <64 x i32> %3244, i32 5
  %3266 = getelementptr inbounds i8, i8* %8, i32 %3265
  %3267 = load i8, i8* %3266, align 1, !tbaa !127
  %3268 = insertelement <64 x i8> %3264, i8 %3267, i32 5
  %3269 = extractelement <64 x i32> %3244, i32 6
  %3270 = getelementptr inbounds i8, i8* %8, i32 %3269
  %3271 = load i8, i8* %3270, align 1, !tbaa !127
  %3272 = insertelement <64 x i8> %3268, i8 %3271, i32 6
  %3273 = extractelement <64 x i32> %3244, i32 7
  %3274 = getelementptr inbounds i8, i8* %8, i32 %3273
  %3275 = load i8, i8* %3274, align 1, !tbaa !127
  %3276 = insertelement <64 x i8> %3272, i8 %3275, i32 7
  %3277 = extractelement <64 x i32> %3244, i32 8
  %3278 = getelementptr inbounds i8, i8* %8, i32 %3277
  %3279 = load i8, i8* %3278, align 1, !tbaa !127
  %3280 = insertelement <64 x i8> %3276, i8 %3279, i32 8
  %3281 = extractelement <64 x i32> %3244, i32 9
  %3282 = getelementptr inbounds i8, i8* %8, i32 %3281
  %3283 = load i8, i8* %3282, align 1, !tbaa !127
  %3284 = insertelement <64 x i8> %3280, i8 %3283, i32 9
  %3285 = extractelement <64 x i32> %3244, i32 10
  %3286 = getelementptr inbounds i8, i8* %8, i32 %3285
  %3287 = load i8, i8* %3286, align 1, !tbaa !127
  %3288 = insertelement <64 x i8> %3284, i8 %3287, i32 10
  %3289 = extractelement <64 x i32> %3244, i32 11
  %3290 = getelementptr inbounds i8, i8* %8, i32 %3289
  %3291 = load i8, i8* %3290, align 1, !tbaa !127
  %3292 = insertelement <64 x i8> %3288, i8 %3291, i32 11
  %3293 = extractelement <64 x i32> %3244, i32 12
  %3294 = getelementptr inbounds i8, i8* %8, i32 %3293
  %3295 = load i8, i8* %3294, align 1, !tbaa !127
  %3296 = insertelement <64 x i8> %3292, i8 %3295, i32 12
  %3297 = extractelement <64 x i32> %3244, i32 13
  %3298 = getelementptr inbounds i8, i8* %8, i32 %3297
  %3299 = load i8, i8* %3298, align 1, !tbaa !127
  %3300 = insertelement <64 x i8> %3296, i8 %3299, i32 13
  %3301 = extractelement <64 x i32> %3244, i32 14
  %3302 = getelementptr inbounds i8, i8* %8, i32 %3301
  %3303 = load i8, i8* %3302, align 1, !tbaa !127
  %3304 = insertelement <64 x i8> %3300, i8 %3303, i32 14
  %3305 = extractelement <64 x i32> %3244, i32 15
  %3306 = getelementptr inbounds i8, i8* %8, i32 %3305
  %3307 = load i8, i8* %3306, align 1, !tbaa !127
  %3308 = insertelement <64 x i8> %3304, i8 %3307, i32 15
  %3309 = extractelement <64 x i32> %3244, i32 16
  %3310 = getelementptr inbounds i8, i8* %8, i32 %3309
  %3311 = load i8, i8* %3310, align 1, !tbaa !127
  %3312 = insertelement <64 x i8> %3308, i8 %3311, i32 16
  %3313 = extractelement <64 x i32> %3244, i32 17
  %3314 = getelementptr inbounds i8, i8* %8, i32 %3313
  %3315 = load i8, i8* %3314, align 1, !tbaa !127
  %3316 = insertelement <64 x i8> %3312, i8 %3315, i32 17
  %3317 = extractelement <64 x i32> %3244, i32 18
  %3318 = getelementptr inbounds i8, i8* %8, i32 %3317
  %3319 = load i8, i8* %3318, align 1, !tbaa !127
  %3320 = insertelement <64 x i8> %3316, i8 %3319, i32 18
  %3321 = extractelement <64 x i32> %3244, i32 19
  %3322 = getelementptr inbounds i8, i8* %8, i32 %3321
  %3323 = load i8, i8* %3322, align 1, !tbaa !127
  %3324 = insertelement <64 x i8> %3320, i8 %3323, i32 19
  %3325 = extractelement <64 x i32> %3244, i32 20
  %3326 = getelementptr inbounds i8, i8* %8, i32 %3325
  %3327 = load i8, i8* %3326, align 1, !tbaa !127
  %3328 = insertelement <64 x i8> %3324, i8 %3327, i32 20
  %3329 = extractelement <64 x i32> %3244, i32 21
  %3330 = getelementptr inbounds i8, i8* %8, i32 %3329
  %3331 = load i8, i8* %3330, align 1, !tbaa !127
  %3332 = insertelement <64 x i8> %3328, i8 %3331, i32 21
  %3333 = extractelement <64 x i32> %3244, i32 22
  %3334 = getelementptr inbounds i8, i8* %8, i32 %3333
  %3335 = load i8, i8* %3334, align 1, !tbaa !127
  %3336 = insertelement <64 x i8> %3332, i8 %3335, i32 22
  %3337 = extractelement <64 x i32> %3244, i32 23
  %3338 = getelementptr inbounds i8, i8* %8, i32 %3337
  %3339 = load i8, i8* %3338, align 1, !tbaa !127
  %3340 = insertelement <64 x i8> %3336, i8 %3339, i32 23
  %3341 = extractelement <64 x i32> %3244, i32 24
  %3342 = getelementptr inbounds i8, i8* %8, i32 %3341
  %3343 = load i8, i8* %3342, align 1, !tbaa !127
  %3344 = insertelement <64 x i8> %3340, i8 %3343, i32 24
  %3345 = extractelement <64 x i32> %3244, i32 25
  %3346 = getelementptr inbounds i8, i8* %8, i32 %3345
  %3347 = load i8, i8* %3346, align 1, !tbaa !127
  %3348 = insertelement <64 x i8> %3344, i8 %3347, i32 25
  %3349 = extractelement <64 x i32> %3244, i32 26
  %3350 = getelementptr inbounds i8, i8* %8, i32 %3349
  %3351 = load i8, i8* %3350, align 1, !tbaa !127
  %3352 = insertelement <64 x i8> %3348, i8 %3351, i32 26
  %3353 = extractelement <64 x i32> %3244, i32 27
  %3354 = getelementptr inbounds i8, i8* %8, i32 %3353
  %3355 = load i8, i8* %3354, align 1, !tbaa !127
  %3356 = insertelement <64 x i8> %3352, i8 %3355, i32 27
  %3357 = extractelement <64 x i32> %3244, i32 28
  %3358 = getelementptr inbounds i8, i8* %8, i32 %3357
  %3359 = load i8, i8* %3358, align 1, !tbaa !127
  %3360 = insertelement <64 x i8> %3356, i8 %3359, i32 28
  %3361 = extractelement <64 x i32> %3244, i32 29
  %3362 = getelementptr inbounds i8, i8* %8, i32 %3361
  %3363 = load i8, i8* %3362, align 1, !tbaa !127
  %3364 = insertelement <64 x i8> %3360, i8 %3363, i32 29
  %3365 = extractelement <64 x i32> %3244, i32 30
  %3366 = getelementptr inbounds i8, i8* %8, i32 %3365
  %3367 = load i8, i8* %3366, align 1, !tbaa !127
  %3368 = insertelement <64 x i8> %3364, i8 %3367, i32 30
  %3369 = extractelement <64 x i32> %3244, i32 31
  %3370 = getelementptr inbounds i8, i8* %8, i32 %3369
  %3371 = load i8, i8* %3370, align 1, !tbaa !127
  %3372 = insertelement <64 x i8> %3368, i8 %3371, i32 31
  %3373 = extractelement <64 x i32> %3244, i32 32
  %3374 = getelementptr inbounds i8, i8* %8, i32 %3373
  %3375 = load i8, i8* %3374, align 1, !tbaa !127
  %3376 = insertelement <64 x i8> %3372, i8 %3375, i32 32
  %3377 = extractelement <64 x i32> %3244, i32 33
  %3378 = getelementptr inbounds i8, i8* %8, i32 %3377
  %3379 = load i8, i8* %3378, align 1, !tbaa !127
  %3380 = insertelement <64 x i8> %3376, i8 %3379, i32 33
  %3381 = extractelement <64 x i32> %3244, i32 34
  %3382 = getelementptr inbounds i8, i8* %8, i32 %3381
  %3383 = load i8, i8* %3382, align 1, !tbaa !127
  %3384 = insertelement <64 x i8> %3380, i8 %3383, i32 34
  %3385 = extractelement <64 x i32> %3244, i32 35
  %3386 = getelementptr inbounds i8, i8* %8, i32 %3385
  %3387 = load i8, i8* %3386, align 1, !tbaa !127
  %3388 = insertelement <64 x i8> %3384, i8 %3387, i32 35
  %3389 = extractelement <64 x i32> %3244, i32 36
  %3390 = getelementptr inbounds i8, i8* %8, i32 %3389
  %3391 = load i8, i8* %3390, align 1, !tbaa !127
  %3392 = insertelement <64 x i8> %3388, i8 %3391, i32 36
  %3393 = extractelement <64 x i32> %3244, i32 37
  %3394 = getelementptr inbounds i8, i8* %8, i32 %3393
  %3395 = load i8, i8* %3394, align 1, !tbaa !127
  %3396 = insertelement <64 x i8> %3392, i8 %3395, i32 37
  %3397 = extractelement <64 x i32> %3244, i32 38
  %3398 = getelementptr inbounds i8, i8* %8, i32 %3397
  %3399 = load i8, i8* %3398, align 1, !tbaa !127
  %3400 = insertelement <64 x i8> %3396, i8 %3399, i32 38
  %3401 = extractelement <64 x i32> %3244, i32 39
  %3402 = getelementptr inbounds i8, i8* %8, i32 %3401
  %3403 = load i8, i8* %3402, align 1, !tbaa !127
  %3404 = insertelement <64 x i8> %3400, i8 %3403, i32 39
  %3405 = extractelement <64 x i32> %3244, i32 40
  %3406 = getelementptr inbounds i8, i8* %8, i32 %3405
  %3407 = load i8, i8* %3406, align 1, !tbaa !127
  %3408 = insertelement <64 x i8> %3404, i8 %3407, i32 40
  %3409 = extractelement <64 x i32> %3244, i32 41
  %3410 = getelementptr inbounds i8, i8* %8, i32 %3409
  %3411 = load i8, i8* %3410, align 1, !tbaa !127
  %3412 = insertelement <64 x i8> %3408, i8 %3411, i32 41
  %3413 = extractelement <64 x i32> %3244, i32 42
  %3414 = getelementptr inbounds i8, i8* %8, i32 %3413
  %3415 = load i8, i8* %3414, align 1, !tbaa !127
  %3416 = insertelement <64 x i8> %3412, i8 %3415, i32 42
  %3417 = extractelement <64 x i32> %3244, i32 43
  %3418 = getelementptr inbounds i8, i8* %8, i32 %3417
  %3419 = load i8, i8* %3418, align 1, !tbaa !127
  %3420 = insertelement <64 x i8> %3416, i8 %3419, i32 43
  %3421 = extractelement <64 x i32> %3244, i32 44
  %3422 = getelementptr inbounds i8, i8* %8, i32 %3421
  %3423 = load i8, i8* %3422, align 1, !tbaa !127
  %3424 = insertelement <64 x i8> %3420, i8 %3423, i32 44
  %3425 = extractelement <64 x i32> %3244, i32 45
  %3426 = getelementptr inbounds i8, i8* %8, i32 %3425
  %3427 = load i8, i8* %3426, align 1, !tbaa !127
  %3428 = insertelement <64 x i8> %3424, i8 %3427, i32 45
  %3429 = extractelement <64 x i32> %3244, i32 46
  %3430 = getelementptr inbounds i8, i8* %8, i32 %3429
  %3431 = load i8, i8* %3430, align 1, !tbaa !127
  %3432 = insertelement <64 x i8> %3428, i8 %3431, i32 46
  %3433 = extractelement <64 x i32> %3244, i32 47
  %3434 = getelementptr inbounds i8, i8* %8, i32 %3433
  %3435 = load i8, i8* %3434, align 1, !tbaa !127
  %3436 = insertelement <64 x i8> %3432, i8 %3435, i32 47
  %3437 = extractelement <64 x i32> %3244, i32 48
  %3438 = getelementptr inbounds i8, i8* %8, i32 %3437
  %3439 = load i8, i8* %3438, align 1, !tbaa !127
  %3440 = insertelement <64 x i8> %3436, i8 %3439, i32 48
  %3441 = extractelement <64 x i32> %3244, i32 49
  %3442 = getelementptr inbounds i8, i8* %8, i32 %3441
  %3443 = load i8, i8* %3442, align 1, !tbaa !127
  %3444 = insertelement <64 x i8> %3440, i8 %3443, i32 49
  %3445 = extractelement <64 x i32> %3244, i32 50
  %3446 = getelementptr inbounds i8, i8* %8, i32 %3445
  %3447 = load i8, i8* %3446, align 1, !tbaa !127
  %3448 = insertelement <64 x i8> %3444, i8 %3447, i32 50
  %3449 = extractelement <64 x i32> %3244, i32 51
  %3450 = getelementptr inbounds i8, i8* %8, i32 %3449
  %3451 = load i8, i8* %3450, align 1, !tbaa !127
  %3452 = insertelement <64 x i8> %3448, i8 %3451, i32 51
  %3453 = extractelement <64 x i32> %3244, i32 52
  %3454 = getelementptr inbounds i8, i8* %8, i32 %3453
  %3455 = load i8, i8* %3454, align 1, !tbaa !127
  %3456 = insertelement <64 x i8> %3452, i8 %3455, i32 52
  %3457 = extractelement <64 x i32> %3244, i32 53
  %3458 = getelementptr inbounds i8, i8* %8, i32 %3457
  %3459 = load i8, i8* %3458, align 1, !tbaa !127
  %3460 = insertelement <64 x i8> %3456, i8 %3459, i32 53
  %3461 = extractelement <64 x i32> %3244, i32 54
  %3462 = getelementptr inbounds i8, i8* %8, i32 %3461
  %3463 = load i8, i8* %3462, align 1, !tbaa !127
  %3464 = insertelement <64 x i8> %3460, i8 %3463, i32 54
  %3465 = extractelement <64 x i32> %3244, i32 55
  %3466 = getelementptr inbounds i8, i8* %8, i32 %3465
  %3467 = load i8, i8* %3466, align 1, !tbaa !127
  %3468 = insertelement <64 x i8> %3464, i8 %3467, i32 55
  %3469 = extractelement <64 x i32> %3244, i32 56
  %3470 = getelementptr inbounds i8, i8* %8, i32 %3469
  %3471 = load i8, i8* %3470, align 1, !tbaa !127
  %3472 = insertelement <64 x i8> %3468, i8 %3471, i32 56
  %3473 = extractelement <64 x i32> %3244, i32 57
  %3474 = getelementptr inbounds i8, i8* %8, i32 %3473
  %3475 = load i8, i8* %3474, align 1, !tbaa !127
  %3476 = insertelement <64 x i8> %3472, i8 %3475, i32 57
  %3477 = extractelement <64 x i32> %3244, i32 58
  %3478 = getelementptr inbounds i8, i8* %8, i32 %3477
  %3479 = load i8, i8* %3478, align 1, !tbaa !127
  %3480 = insertelement <64 x i8> %3476, i8 %3479, i32 58
  %3481 = extractelement <64 x i32> %3244, i32 59
  %3482 = getelementptr inbounds i8, i8* %8, i32 %3481
  %3483 = load i8, i8* %3482, align 1, !tbaa !127
  %3484 = insertelement <64 x i8> %3480, i8 %3483, i32 59
  %3485 = extractelement <64 x i32> %3244, i32 60
  %3486 = getelementptr inbounds i8, i8* %8, i32 %3485
  %3487 = load i8, i8* %3486, align 1, !tbaa !127
  %3488 = insertelement <64 x i8> %3484, i8 %3487, i32 60
  %3489 = extractelement <64 x i32> %3244, i32 61
  %3490 = getelementptr inbounds i8, i8* %8, i32 %3489
  %3491 = load i8, i8* %3490, align 1, !tbaa !127
  %3492 = insertelement <64 x i8> %3488, i8 %3491, i32 61
  %3493 = extractelement <64 x i32> %3244, i32 62
  %3494 = getelementptr inbounds i8, i8* %8, i32 %3493
  %3495 = load i8, i8* %3494, align 1, !tbaa !127
  %3496 = insertelement <64 x i8> %3492, i8 %3495, i32 62
  %3497 = extractelement <64 x i32> %3244, i32 63
  %3498 = getelementptr inbounds i8, i8* %8, i32 %3497
  %3499 = load i8, i8* %3498, align 1, !tbaa !127
  %3500 = insertelement <64 x i8> %3496, i8 %3499, i32 63
  %3501 = add nsw i32 %t2367.us, %resampled_input.s0.x.rebased78.us
  %3502 = shl nsw i32 %3501, 7
  %3503 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3502
  %3504 = bitcast i8* %3503 to <64 x i8>*
  store <64 x i8> %3500, <64 x i8>* %3504, align 128, !tbaa !129
  %3505 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3243, <64 x i32> %3234) #11
  %3506 = extractelement <64 x i32> %3505, i32 0
  %3507 = getelementptr inbounds i8, i8* %8, i32 %3506
  %3508 = load i8, i8* %3507, align 1, !tbaa !127
  %3509 = insertelement <64 x i8> undef, i8 %3508, i32 0
  %3510 = extractelement <64 x i32> %3505, i32 1
  %3511 = getelementptr inbounds i8, i8* %8, i32 %3510
  %3512 = load i8, i8* %3511, align 1, !tbaa !127
  %3513 = insertelement <64 x i8> %3509, i8 %3512, i32 1
  %3514 = extractelement <64 x i32> %3505, i32 2
  %3515 = getelementptr inbounds i8, i8* %8, i32 %3514
  %3516 = load i8, i8* %3515, align 1, !tbaa !127
  %3517 = insertelement <64 x i8> %3513, i8 %3516, i32 2
  %3518 = extractelement <64 x i32> %3505, i32 3
  %3519 = getelementptr inbounds i8, i8* %8, i32 %3518
  %3520 = load i8, i8* %3519, align 1, !tbaa !127
  %3521 = insertelement <64 x i8> %3517, i8 %3520, i32 3
  %3522 = extractelement <64 x i32> %3505, i32 4
  %3523 = getelementptr inbounds i8, i8* %8, i32 %3522
  %3524 = load i8, i8* %3523, align 1, !tbaa !127
  %3525 = insertelement <64 x i8> %3521, i8 %3524, i32 4
  %3526 = extractelement <64 x i32> %3505, i32 5
  %3527 = getelementptr inbounds i8, i8* %8, i32 %3526
  %3528 = load i8, i8* %3527, align 1, !tbaa !127
  %3529 = insertelement <64 x i8> %3525, i8 %3528, i32 5
  %3530 = extractelement <64 x i32> %3505, i32 6
  %3531 = getelementptr inbounds i8, i8* %8, i32 %3530
  %3532 = load i8, i8* %3531, align 1, !tbaa !127
  %3533 = insertelement <64 x i8> %3529, i8 %3532, i32 6
  %3534 = extractelement <64 x i32> %3505, i32 7
  %3535 = getelementptr inbounds i8, i8* %8, i32 %3534
  %3536 = load i8, i8* %3535, align 1, !tbaa !127
  %3537 = insertelement <64 x i8> %3533, i8 %3536, i32 7
  %3538 = extractelement <64 x i32> %3505, i32 8
  %3539 = getelementptr inbounds i8, i8* %8, i32 %3538
  %3540 = load i8, i8* %3539, align 1, !tbaa !127
  %3541 = insertelement <64 x i8> %3537, i8 %3540, i32 8
  %3542 = extractelement <64 x i32> %3505, i32 9
  %3543 = getelementptr inbounds i8, i8* %8, i32 %3542
  %3544 = load i8, i8* %3543, align 1, !tbaa !127
  %3545 = insertelement <64 x i8> %3541, i8 %3544, i32 9
  %3546 = extractelement <64 x i32> %3505, i32 10
  %3547 = getelementptr inbounds i8, i8* %8, i32 %3546
  %3548 = load i8, i8* %3547, align 1, !tbaa !127
  %3549 = insertelement <64 x i8> %3545, i8 %3548, i32 10
  %3550 = extractelement <64 x i32> %3505, i32 11
  %3551 = getelementptr inbounds i8, i8* %8, i32 %3550
  %3552 = load i8, i8* %3551, align 1, !tbaa !127
  %3553 = insertelement <64 x i8> %3549, i8 %3552, i32 11
  %3554 = extractelement <64 x i32> %3505, i32 12
  %3555 = getelementptr inbounds i8, i8* %8, i32 %3554
  %3556 = load i8, i8* %3555, align 1, !tbaa !127
  %3557 = insertelement <64 x i8> %3553, i8 %3556, i32 12
  %3558 = extractelement <64 x i32> %3505, i32 13
  %3559 = getelementptr inbounds i8, i8* %8, i32 %3558
  %3560 = load i8, i8* %3559, align 1, !tbaa !127
  %3561 = insertelement <64 x i8> %3557, i8 %3560, i32 13
  %3562 = extractelement <64 x i32> %3505, i32 14
  %3563 = getelementptr inbounds i8, i8* %8, i32 %3562
  %3564 = load i8, i8* %3563, align 1, !tbaa !127
  %3565 = insertelement <64 x i8> %3561, i8 %3564, i32 14
  %3566 = extractelement <64 x i32> %3505, i32 15
  %3567 = getelementptr inbounds i8, i8* %8, i32 %3566
  %3568 = load i8, i8* %3567, align 1, !tbaa !127
  %3569 = insertelement <64 x i8> %3565, i8 %3568, i32 15
  %3570 = extractelement <64 x i32> %3505, i32 16
  %3571 = getelementptr inbounds i8, i8* %8, i32 %3570
  %3572 = load i8, i8* %3571, align 1, !tbaa !127
  %3573 = insertelement <64 x i8> %3569, i8 %3572, i32 16
  %3574 = extractelement <64 x i32> %3505, i32 17
  %3575 = getelementptr inbounds i8, i8* %8, i32 %3574
  %3576 = load i8, i8* %3575, align 1, !tbaa !127
  %3577 = insertelement <64 x i8> %3573, i8 %3576, i32 17
  %3578 = extractelement <64 x i32> %3505, i32 18
  %3579 = getelementptr inbounds i8, i8* %8, i32 %3578
  %3580 = load i8, i8* %3579, align 1, !tbaa !127
  %3581 = insertelement <64 x i8> %3577, i8 %3580, i32 18
  %3582 = extractelement <64 x i32> %3505, i32 19
  %3583 = getelementptr inbounds i8, i8* %8, i32 %3582
  %3584 = load i8, i8* %3583, align 1, !tbaa !127
  %3585 = insertelement <64 x i8> %3581, i8 %3584, i32 19
  %3586 = extractelement <64 x i32> %3505, i32 20
  %3587 = getelementptr inbounds i8, i8* %8, i32 %3586
  %3588 = load i8, i8* %3587, align 1, !tbaa !127
  %3589 = insertelement <64 x i8> %3585, i8 %3588, i32 20
  %3590 = extractelement <64 x i32> %3505, i32 21
  %3591 = getelementptr inbounds i8, i8* %8, i32 %3590
  %3592 = load i8, i8* %3591, align 1, !tbaa !127
  %3593 = insertelement <64 x i8> %3589, i8 %3592, i32 21
  %3594 = extractelement <64 x i32> %3505, i32 22
  %3595 = getelementptr inbounds i8, i8* %8, i32 %3594
  %3596 = load i8, i8* %3595, align 1, !tbaa !127
  %3597 = insertelement <64 x i8> %3593, i8 %3596, i32 22
  %3598 = extractelement <64 x i32> %3505, i32 23
  %3599 = getelementptr inbounds i8, i8* %8, i32 %3598
  %3600 = load i8, i8* %3599, align 1, !tbaa !127
  %3601 = insertelement <64 x i8> %3597, i8 %3600, i32 23
  %3602 = extractelement <64 x i32> %3505, i32 24
  %3603 = getelementptr inbounds i8, i8* %8, i32 %3602
  %3604 = load i8, i8* %3603, align 1, !tbaa !127
  %3605 = insertelement <64 x i8> %3601, i8 %3604, i32 24
  %3606 = extractelement <64 x i32> %3505, i32 25
  %3607 = getelementptr inbounds i8, i8* %8, i32 %3606
  %3608 = load i8, i8* %3607, align 1, !tbaa !127
  %3609 = insertelement <64 x i8> %3605, i8 %3608, i32 25
  %3610 = extractelement <64 x i32> %3505, i32 26
  %3611 = getelementptr inbounds i8, i8* %8, i32 %3610
  %3612 = load i8, i8* %3611, align 1, !tbaa !127
  %3613 = insertelement <64 x i8> %3609, i8 %3612, i32 26
  %3614 = extractelement <64 x i32> %3505, i32 27
  %3615 = getelementptr inbounds i8, i8* %8, i32 %3614
  %3616 = load i8, i8* %3615, align 1, !tbaa !127
  %3617 = insertelement <64 x i8> %3613, i8 %3616, i32 27
  %3618 = extractelement <64 x i32> %3505, i32 28
  %3619 = getelementptr inbounds i8, i8* %8, i32 %3618
  %3620 = load i8, i8* %3619, align 1, !tbaa !127
  %3621 = insertelement <64 x i8> %3617, i8 %3620, i32 28
  %3622 = extractelement <64 x i32> %3505, i32 29
  %3623 = getelementptr inbounds i8, i8* %8, i32 %3622
  %3624 = load i8, i8* %3623, align 1, !tbaa !127
  %3625 = insertelement <64 x i8> %3621, i8 %3624, i32 29
  %3626 = extractelement <64 x i32> %3505, i32 30
  %3627 = getelementptr inbounds i8, i8* %8, i32 %3626
  %3628 = load i8, i8* %3627, align 1, !tbaa !127
  %3629 = insertelement <64 x i8> %3625, i8 %3628, i32 30
  %3630 = extractelement <64 x i32> %3505, i32 31
  %3631 = getelementptr inbounds i8, i8* %8, i32 %3630
  %3632 = load i8, i8* %3631, align 1, !tbaa !127
  %3633 = insertelement <64 x i8> %3629, i8 %3632, i32 31
  %3634 = extractelement <64 x i32> %3505, i32 32
  %3635 = getelementptr inbounds i8, i8* %8, i32 %3634
  %3636 = load i8, i8* %3635, align 1, !tbaa !127
  %3637 = insertelement <64 x i8> %3633, i8 %3636, i32 32
  %3638 = extractelement <64 x i32> %3505, i32 33
  %3639 = getelementptr inbounds i8, i8* %8, i32 %3638
  %3640 = load i8, i8* %3639, align 1, !tbaa !127
  %3641 = insertelement <64 x i8> %3637, i8 %3640, i32 33
  %3642 = extractelement <64 x i32> %3505, i32 34
  %3643 = getelementptr inbounds i8, i8* %8, i32 %3642
  %3644 = load i8, i8* %3643, align 1, !tbaa !127
  %3645 = insertelement <64 x i8> %3641, i8 %3644, i32 34
  %3646 = extractelement <64 x i32> %3505, i32 35
  %3647 = getelementptr inbounds i8, i8* %8, i32 %3646
  %3648 = load i8, i8* %3647, align 1, !tbaa !127
  %3649 = insertelement <64 x i8> %3645, i8 %3648, i32 35
  %3650 = extractelement <64 x i32> %3505, i32 36
  %3651 = getelementptr inbounds i8, i8* %8, i32 %3650
  %3652 = load i8, i8* %3651, align 1, !tbaa !127
  %3653 = insertelement <64 x i8> %3649, i8 %3652, i32 36
  %3654 = extractelement <64 x i32> %3505, i32 37
  %3655 = getelementptr inbounds i8, i8* %8, i32 %3654
  %3656 = load i8, i8* %3655, align 1, !tbaa !127
  %3657 = insertelement <64 x i8> %3653, i8 %3656, i32 37
  %3658 = extractelement <64 x i32> %3505, i32 38
  %3659 = getelementptr inbounds i8, i8* %8, i32 %3658
  %3660 = load i8, i8* %3659, align 1, !tbaa !127
  %3661 = insertelement <64 x i8> %3657, i8 %3660, i32 38
  %3662 = extractelement <64 x i32> %3505, i32 39
  %3663 = getelementptr inbounds i8, i8* %8, i32 %3662
  %3664 = load i8, i8* %3663, align 1, !tbaa !127
  %3665 = insertelement <64 x i8> %3661, i8 %3664, i32 39
  %3666 = extractelement <64 x i32> %3505, i32 40
  %3667 = getelementptr inbounds i8, i8* %8, i32 %3666
  %3668 = load i8, i8* %3667, align 1, !tbaa !127
  %3669 = insertelement <64 x i8> %3665, i8 %3668, i32 40
  %3670 = extractelement <64 x i32> %3505, i32 41
  %3671 = getelementptr inbounds i8, i8* %8, i32 %3670
  %3672 = load i8, i8* %3671, align 1, !tbaa !127
  %3673 = insertelement <64 x i8> %3669, i8 %3672, i32 41
  %3674 = extractelement <64 x i32> %3505, i32 42
  %3675 = getelementptr inbounds i8, i8* %8, i32 %3674
  %3676 = load i8, i8* %3675, align 1, !tbaa !127
  %3677 = insertelement <64 x i8> %3673, i8 %3676, i32 42
  %3678 = extractelement <64 x i32> %3505, i32 43
  %3679 = getelementptr inbounds i8, i8* %8, i32 %3678
  %3680 = load i8, i8* %3679, align 1, !tbaa !127
  %3681 = insertelement <64 x i8> %3677, i8 %3680, i32 43
  %3682 = extractelement <64 x i32> %3505, i32 44
  %3683 = getelementptr inbounds i8, i8* %8, i32 %3682
  %3684 = load i8, i8* %3683, align 1, !tbaa !127
  %3685 = insertelement <64 x i8> %3681, i8 %3684, i32 44
  %3686 = extractelement <64 x i32> %3505, i32 45
  %3687 = getelementptr inbounds i8, i8* %8, i32 %3686
  %3688 = load i8, i8* %3687, align 1, !tbaa !127
  %3689 = insertelement <64 x i8> %3685, i8 %3688, i32 45
  %3690 = extractelement <64 x i32> %3505, i32 46
  %3691 = getelementptr inbounds i8, i8* %8, i32 %3690
  %3692 = load i8, i8* %3691, align 1, !tbaa !127
  %3693 = insertelement <64 x i8> %3689, i8 %3692, i32 46
  %3694 = extractelement <64 x i32> %3505, i32 47
  %3695 = getelementptr inbounds i8, i8* %8, i32 %3694
  %3696 = load i8, i8* %3695, align 1, !tbaa !127
  %3697 = insertelement <64 x i8> %3693, i8 %3696, i32 47
  %3698 = extractelement <64 x i32> %3505, i32 48
  %3699 = getelementptr inbounds i8, i8* %8, i32 %3698
  %3700 = load i8, i8* %3699, align 1, !tbaa !127
  %3701 = insertelement <64 x i8> %3697, i8 %3700, i32 48
  %3702 = extractelement <64 x i32> %3505, i32 49
  %3703 = getelementptr inbounds i8, i8* %8, i32 %3702
  %3704 = load i8, i8* %3703, align 1, !tbaa !127
  %3705 = insertelement <64 x i8> %3701, i8 %3704, i32 49
  %3706 = extractelement <64 x i32> %3505, i32 50
  %3707 = getelementptr inbounds i8, i8* %8, i32 %3706
  %3708 = load i8, i8* %3707, align 1, !tbaa !127
  %3709 = insertelement <64 x i8> %3705, i8 %3708, i32 50
  %3710 = extractelement <64 x i32> %3505, i32 51
  %3711 = getelementptr inbounds i8, i8* %8, i32 %3710
  %3712 = load i8, i8* %3711, align 1, !tbaa !127
  %3713 = insertelement <64 x i8> %3709, i8 %3712, i32 51
  %3714 = extractelement <64 x i32> %3505, i32 52
  %3715 = getelementptr inbounds i8, i8* %8, i32 %3714
  %3716 = load i8, i8* %3715, align 1, !tbaa !127
  %3717 = insertelement <64 x i8> %3713, i8 %3716, i32 52
  %3718 = extractelement <64 x i32> %3505, i32 53
  %3719 = getelementptr inbounds i8, i8* %8, i32 %3718
  %3720 = load i8, i8* %3719, align 1, !tbaa !127
  %3721 = insertelement <64 x i8> %3717, i8 %3720, i32 53
  %3722 = extractelement <64 x i32> %3505, i32 54
  %3723 = getelementptr inbounds i8, i8* %8, i32 %3722
  %3724 = load i8, i8* %3723, align 1, !tbaa !127
  %3725 = insertelement <64 x i8> %3721, i8 %3724, i32 54
  %3726 = extractelement <64 x i32> %3505, i32 55
  %3727 = getelementptr inbounds i8, i8* %8, i32 %3726
  %3728 = load i8, i8* %3727, align 1, !tbaa !127
  %3729 = insertelement <64 x i8> %3725, i8 %3728, i32 55
  %3730 = extractelement <64 x i32> %3505, i32 56
  %3731 = getelementptr inbounds i8, i8* %8, i32 %3730
  %3732 = load i8, i8* %3731, align 1, !tbaa !127
  %3733 = insertelement <64 x i8> %3729, i8 %3732, i32 56
  %3734 = extractelement <64 x i32> %3505, i32 57
  %3735 = getelementptr inbounds i8, i8* %8, i32 %3734
  %3736 = load i8, i8* %3735, align 1, !tbaa !127
  %3737 = insertelement <64 x i8> %3733, i8 %3736, i32 57
  %3738 = extractelement <64 x i32> %3505, i32 58
  %3739 = getelementptr inbounds i8, i8* %8, i32 %3738
  %3740 = load i8, i8* %3739, align 1, !tbaa !127
  %3741 = insertelement <64 x i8> %3737, i8 %3740, i32 58
  %3742 = extractelement <64 x i32> %3505, i32 59
  %3743 = getelementptr inbounds i8, i8* %8, i32 %3742
  %3744 = load i8, i8* %3743, align 1, !tbaa !127
  %3745 = insertelement <64 x i8> %3741, i8 %3744, i32 59
  %3746 = extractelement <64 x i32> %3505, i32 60
  %3747 = getelementptr inbounds i8, i8* %8, i32 %3746
  %3748 = load i8, i8* %3747, align 1, !tbaa !127
  %3749 = insertelement <64 x i8> %3745, i8 %3748, i32 60
  %3750 = extractelement <64 x i32> %3505, i32 61
  %3751 = getelementptr inbounds i8, i8* %8, i32 %3750
  %3752 = load i8, i8* %3751, align 1, !tbaa !127
  %3753 = insertelement <64 x i8> %3749, i8 %3752, i32 61
  %3754 = extractelement <64 x i32> %3505, i32 62
  %3755 = getelementptr inbounds i8, i8* %8, i32 %3754
  %3756 = load i8, i8* %3755, align 1, !tbaa !127
  %3757 = insertelement <64 x i8> %3753, i8 %3756, i32 62
  %3758 = extractelement <64 x i32> %3505, i32 63
  %3759 = getelementptr inbounds i8, i8* %8, i32 %3758
  %3760 = load i8, i8* %3759, align 1, !tbaa !127
  %3761 = insertelement <64 x i8> %3757, i8 %3760, i32 63
  %3762 = getelementptr inbounds i8, i8* %3503, i32 64
  %3763 = bitcast i8* %3762 to <64 x i8>*
  store <64 x i8> %3761, <64 x i8>* %3763, align 64, !tbaa !129
  %3764 = add nuw nsw i32 %resampled_input.s0.x.rebased78.us, 1
  %.not1843.us = icmp eq i32 %resampled_input.s0.x.rebased78.us, %t2351
  br i1 %.not1843.us, label %"end for resampled_input.s0.x.rebased77.loopexit.us", label %"for resampled_input.s0.x.rebased76.us"

"end for resampled_input.s0.x.rebased77.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased76.us"
  %3765 = add nuw nsw i32 %resampled_input.s0.y.rebased75.us, 1
  %.not1842.us = icmp eq i32 %resampled_input.s0.y.rebased75.us, %t2350
  br i1 %.not1842.us, label %"consume resampled_input91", label %"for resampled_input.s0.y.rebased73.us"

"consume resampled_input91":                      ; preds = %"end for resampled_input.s0.x.rebased77.loopexit.us", %"end for resampled_input.s0.x.rebased71.loopexit.us", %then_bb65, %"for resampled_input.s0.y.rebased73.preheader", %next_bb66
  br i1 %2762, label %"for output.s0.y.yo92.preheader", label %"end for output.s0.y.yo93", !prof !101

"for output.s0.y.yo92.preheader":                 ; preds = %"consume resampled_input91"
  %3766 = add nsw i32 %output.s0.b.rebased59, %14
  %3767 = mul nsw i32 %3766, %25
  %t2374 = add i32 %3167, %3767
  br label %"for output.s0.y.yo92"

"for output.s0.y.yo92":                           ; preds = %"for output.s0.y.yo92.preheader", %"end for output.s0.x.xo96"
  %output.s0.y.yo94 = phi i32 [ %4520, %"end for output.s0.x.xo96" ], [ 0, %"for output.s0.y.yo92.preheader" ]
  %3768 = add nsw i32 %output.s0.y.yo94, %22
  %3769 = mul nsw i32 %3768, %stride_y
  %3770 = add nsw i32 %2763, %3769
  %t2390 = mul nsw i32 %3770, %2755
  %3771 = add nsw i32 %2764, %3769
  %t2392 = mul nsw i32 %3771, %2755
  %3772 = sub nsw i32 %3769, %t2346
  %t2394 = mul nsw i32 %3772, %2755
  br i1 %2765, label %"for output.s0.x.xo95.preheader", label %"end for output.s0.x.xo96", !prof !101

"for output.s0.x.xo95.preheader":                 ; preds = %"for output.s0.y.yo92"
  %3773 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %3774 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %3775 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2779) #11
  %3776 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3142, <32 x i32> %3775) #11
  %3777 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3776, <32 x i32> %3774) #11
  %3778 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3777) #11
  %3779 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3150, <32 x i32> %3775) #11
  %3780 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3779, <32 x i32> %3774) #11
  %3781 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3780, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3782 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3778, <32 x i32> %3781) #11
  %3783 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3782) #11
  %3784 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3783) #11
  %3785 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3782) #11
  %3786 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3785) #11
  %3787 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3784, <32 x i32> %3786) #11
  %3788 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3787) #11
  %3789 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3787) #11
  %3790 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %3788, <32 x i32> %3789) #11
  %3791 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2783, <32 x i32> %3790) #11
  %3792 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %3793 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3791, <32 x i32> %3792) #11
  %3794 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3773, <32 x i32> %3793) #11
  %3795 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %3796 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %3797 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3158, <32 x i32> %3775) #11
  %3798 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3797, <32 x i32> %3774) #11
  %3799 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3798) #11
  %3800 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3166, <32 x i32> %3775) #11
  %3801 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3800, <32 x i32> %3774) #11
  %3802 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3801, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3803 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3799, <32 x i32> %3802) #11
  %3804 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3803) #11
  %3805 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3804) #11
  %3806 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3803) #11
  %3807 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3806) #11
  %3808 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3805, <32 x i32> %3807) #11
  %3809 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3808) #11
  %3810 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3808) #11
  %3811 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %3809, <32 x i32> %3810) #11
  %3812 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2783, <32 x i32> %3811) #11
  %3813 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3796, <32 x i32> %3812) #11
  %3814 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3795, <32 x i32> %3813) #11
  %3815 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3794, <32 x i32> %3814) #11
  %3816 = bitcast <64 x i32> %3815 to <32 x i64>
  %3817 = shufflevector <32 x i64> %3816, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3818 = bitcast <8 x i64> %3817 to <32 x i16>
  %3819 = trunc <32 x i16> %3818 to <32 x i8>
  %3820 = shufflevector <32 x i8> %3819, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3821 = bitcast <128 x i8> %3820 to <32 x i32>
  %3822 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3821, <32 x i32> %2786) #11
  %3823 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3822, <32 x i32> %2789) #11
  %3824 = bitcast <32 x i32> %3823 to <128 x i8>
  %3825 = shufflevector <128 x i8> %3824, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3826 = mul nsw i32 %3768, %24
  %3827 = add i32 %t2374, %3826
  %3828 = shufflevector <32 x i64> %3816, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3829 = bitcast <8 x i64> %3828 to <32 x i16>
  %3830 = trunc <32 x i16> %3829 to <32 x i8>
  %3831 = shufflevector <32 x i8> %3830, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3832 = bitcast <128 x i8> %3831 to <32 x i32>
  %3833 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3832, <32 x i32> %2786) #11
  %3834 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3833, <32 x i32> %2789) #11
  %3835 = bitcast <32 x i32> %3834 to <128 x i8>
  %3836 = shufflevector <128 x i8> %3835, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3837 = shufflevector <32 x i64> %3816, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3838 = bitcast <8 x i64> %3837 to <32 x i16>
  %3839 = trunc <32 x i16> %3838 to <32 x i8>
  %3840 = shufflevector <32 x i8> %3839, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3841 = bitcast <128 x i8> %3840 to <32 x i32>
  %3842 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3841, <32 x i32> %2786) #11
  %3843 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3842, <32 x i32> %2789) #11
  %3844 = bitcast <32 x i32> %3843 to <128 x i8>
  %3845 = shufflevector <128 x i8> %3844, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3846 = shufflevector <32 x i64> %3816, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3847 = bitcast <8 x i64> %3846 to <32 x i16>
  %3848 = trunc <32 x i16> %3847 to <32 x i8>
  %3849 = shufflevector <32 x i8> %3848, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3850 = bitcast <128 x i8> %3849 to <32 x i32>
  %3851 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3850, <32 x i32> %2786) #11
  %3852 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3851, <32 x i32> %2789) #11
  %3853 = bitcast <32 x i32> %3852 to <128 x i8>
  %3854 = shufflevector <128 x i8> %3853, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br i1 %t2340, label %"for output.s0.x.xo95.preheader.split.us", label %"for output.s0.x.xo95.preheader.split"

"for output.s0.x.xo95.preheader.split.us":        ; preds = %"for output.s0.x.xo95.preheader"
  %3855 = load <32 x i16>, <32 x i16>* %3066, align 128, !tbaa !105
  %3856 = load <32 x i16>, <32 x i16>* %3068, align 64, !tbaa !105
  %3857 = load <32 x i16>, <32 x i16>* %3070, align 128, !tbaa !105
  %3858 = load <32 x i16>, <32 x i16>* %3072, align 64, !tbaa !105
  %3859 = load <32 x i16>, <32 x i16>* %3073, align 128, !tbaa !105
  %3860 = load <32 x i16>, <32 x i16>* %3075, align 64, !tbaa !105
  %3861 = load <32 x i16>, <32 x i16>* %3078, align 128, !tbaa !105
  %3862 = load <32 x i16>, <32 x i16>* %3080, align 64, !tbaa !105
  %3863 = load <32 x i16>, <32 x i16>* %3082, align 128, !tbaa !105
  %3864 = load <32 x i16>, <32 x i16>* %3084, align 64, !tbaa !105
  %3865 = load <32 x i16>, <32 x i16>* %3085, align 128, !tbaa !105
  %3866 = load <32 x i16>, <32 x i16>* %3087, align 64, !tbaa !105
  %3867 = load <32 x i16>, <32 x i16>* %3089, align 128, !tbaa !180
  %3868 = load <32 x i16>, <32 x i16>* %3091, align 128, !tbaa !187
  %3869 = load <32 x i16>, <32 x i16>* %3093, align 128, !tbaa !189
  %3870 = load <32 x i16>, <32 x i16>* %3095, align 128, !tbaa !194
  %3871 = load <32 x i16>, <32 x i16>* %3096, align 128, !tbaa !196
  %3872 = load <32 x i16>, <32 x i16>* %3098, align 128, !tbaa !200
  %3873 = load <32 x i16>, <32 x i16>* %3100, align 128, !tbaa !105
  %3874 = load <32 x i16>, <32 x i16>* %3102, align 64, !tbaa !105
  %3875 = load <32 x i16>, <32 x i16>* %3104, align 128, !tbaa !105
  %3876 = load <32 x i16>, <32 x i16>* %3106, align 64, !tbaa !105
  %3877 = load <32 x i16>, <32 x i16>* %3108, align 128, !tbaa !105
  %3878 = load <32 x i16>, <32 x i16>* %3110, align 64, !tbaa !105
  %3879 = load <32 x i16>, <32 x i16>* %3112, align 128, !tbaa !105
  %3880 = load <32 x i16>, <32 x i16>* %3114, align 64, !tbaa !105
  %3881 = load <32 x i16>, <32 x i16>* %3116, align 128, !tbaa !105
  %3882 = load <32 x i16>, <32 x i16>* %3118, align 64, !tbaa !105
  %3883 = load <32 x i16>, <32 x i16>* %3120, align 128, !tbaa !105
  %3884 = load <32 x i16>, <32 x i16>* %3122, align 64, !tbaa !105
  %3885 = load <32 x i16>, <32 x i16>* %3124, align 128, !tbaa !202
  %3886 = load <32 x i16>, <32 x i16>* %3126, align 128, !tbaa !205
  %3887 = load <32 x i16>, <32 x i16>* %3128, align 128, !tbaa !207
  %3888 = load <32 x i16>, <32 x i16>* %3130, align 128, !tbaa !210
  %3889 = load <32 x i16>, <32 x i16>* %3132, align 128, !tbaa !212
  %3890 = load <32 x i16>, <32 x i16>* %3134, align 128, !tbaa !215
  br label %"for output.s0.x.xo95.us"

"for output.s0.x.xo95.us":                        ; preds = %"for output.s0.x.xo95.us", %"for output.s0.x.xo95.preheader.split.us"
  %output.s0.x.xo97.us = phi i32 [ %4034, %"for output.s0.x.xo95.us" ], [ 0, %"for output.s0.x.xo95.preheader.split.us" ]
  %3891 = add nsw i32 %output.s0.x.xo97.us, %19
  %3892 = mul nsw i32 %3891, %stride_x
  %3893 = add i32 %3892, %2773
  %3894 = add i32 %3893, %t2390
  %3895 = shl nsw i32 %3894, 7
  %3896 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3895
  %3897 = bitcast i8* %3896 to <32 x i8>*
  %3898 = load <32 x i8>, <32 x i8>* %3897, align 128, !tbaa !129
  %3899 = getelementptr inbounds i8, i8* %3896, i32 32
  %3900 = bitcast i8* %3899 to <32 x i8>*
  %3901 = load <32 x i8>, <32 x i8>* %3900, align 32, !tbaa !129
  %3902 = add i32 %3892, %2774
  %3903 = add i32 %3902, %t2390
  %3904 = shl nsw i32 %3903, 7
  %3905 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3904
  %3906 = bitcast i8* %3905 to <32 x i8>*
  %3907 = load <32 x i8>, <32 x i8>* %3906, align 128, !tbaa !129
  %3908 = getelementptr inbounds i8, i8* %3905, i32 32
  %3909 = bitcast i8* %3908 to <32 x i8>*
  %3910 = load <32 x i8>, <32 x i8>* %3909, align 32, !tbaa !129
  %3911 = add i32 %3892, %t2390
  %3912 = sub i32 %3911, %t2348
  %3913 = shl nsw i32 %3912, 7
  %3914 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3913
  %3915 = bitcast i8* %3914 to <32 x i8>*
  %3916 = load <32 x i8>, <32 x i8>* %3915, align 128, !tbaa !129
  %3917 = getelementptr inbounds i8, i8* %3914, i32 32
  %3918 = bitcast i8* %3917 to <32 x i8>*
  %3919 = load <32 x i8>, <32 x i8>* %3918, align 32, !tbaa !129
  %3920 = add i32 %3893, %t2392
  %3921 = shl nsw i32 %3920, 7
  %3922 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3921
  %3923 = bitcast i8* %3922 to <32 x i8>*
  %3924 = load <32 x i8>, <32 x i8>* %3923, align 128, !tbaa !129
  %3925 = getelementptr inbounds i8, i8* %3922, i32 32
  %3926 = bitcast i8* %3925 to <32 x i8>*
  %3927 = load <32 x i8>, <32 x i8>* %3926, align 32, !tbaa !129
  %3928 = add i32 %3902, %t2392
  %3929 = shl nsw i32 %3928, 7
  %3930 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3929
  %3931 = bitcast i8* %3930 to <32 x i8>*
  %3932 = load <32 x i8>, <32 x i8>* %3931, align 128, !tbaa !129
  %3933 = getelementptr inbounds i8, i8* %3930, i32 32
  %3934 = bitcast i8* %3933 to <32 x i8>*
  %3935 = load <32 x i8>, <32 x i8>* %3934, align 32, !tbaa !129
  %3936 = add i32 %3892, %t2392
  %3937 = sub i32 %3936, %t2348
  %3938 = shl nsw i32 %3937, 7
  %3939 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3938
  %3940 = bitcast i8* %3939 to <32 x i8>*
  %3941 = load <32 x i8>, <32 x i8>* %3940, align 128, !tbaa !129
  %3942 = getelementptr inbounds i8, i8* %3939, i32 32
  %3943 = bitcast i8* %3942 to <32 x i8>*
  %3944 = load <32 x i8>, <32 x i8>* %3943, align 32, !tbaa !129
  %3945 = add i32 %3893, %t2394
  %3946 = shl nsw i32 %3945, 7
  %3947 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3946
  %3948 = bitcast i8* %3947 to <32 x i8>*
  %3949 = load <32 x i8>, <32 x i8>* %3948, align 128, !tbaa !129
  %3950 = getelementptr inbounds i8, i8* %3947, i32 32
  %3951 = bitcast i8* %3950 to <32 x i8>*
  %3952 = load <32 x i8>, <32 x i8>* %3951, align 32, !tbaa !129
  %3953 = add i32 %3902, %t2394
  %3954 = shl nsw i32 %3953, 7
  %3955 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3954
  %3956 = bitcast i8* %3955 to <32 x i8>*
  %3957 = load <32 x i8>, <32 x i8>* %3956, align 128, !tbaa !129
  %3958 = getelementptr inbounds i8, i8* %3955, i32 32
  %3959 = bitcast i8* %3958 to <32 x i8>*
  %3960 = load <32 x i8>, <32 x i8>* %3959, align 32, !tbaa !129
  %3961 = add i32 %3892, %t2394
  %3962 = sub i32 %3961, %t2348
  %3963 = shl nsw i32 %3962, 7
  %3964 = getelementptr inbounds i8, i8* %resampled_input62, i32 %3963
  %3965 = bitcast i8* %3964 to <32 x i8>*
  %3966 = load <32 x i8>, <32 x i8>* %3965, align 128, !tbaa !129
  %3967 = getelementptr inbounds i8, i8* %3964, i32 32
  %3968 = bitcast i8* %3967 to <32 x i8>*
  %3969 = load <32 x i8>, <32 x i8>* %3968, align 32, !tbaa !129
  %3970 = getelementptr inbounds i8, i8* %3896, i32 64
  %3971 = bitcast i8* %3970 to <32 x i8>*
  %3972 = load <32 x i8>, <32 x i8>* %3971, align 64, !tbaa !129
  %3973 = getelementptr inbounds i8, i8* %3896, i32 96
  %3974 = bitcast i8* %3973 to <32 x i8>*
  %3975 = load <32 x i8>, <32 x i8>* %3974, align 32, !tbaa !129
  %3976 = getelementptr inbounds i8, i8* %3905, i32 64
  %3977 = bitcast i8* %3976 to <32 x i8>*
  %3978 = load <32 x i8>, <32 x i8>* %3977, align 64, !tbaa !129
  %3979 = getelementptr inbounds i8, i8* %3905, i32 96
  %3980 = bitcast i8* %3979 to <32 x i8>*
  %3981 = load <32 x i8>, <32 x i8>* %3980, align 32, !tbaa !129
  %3982 = getelementptr inbounds i8, i8* %3914, i32 64
  %3983 = bitcast i8* %3982 to <32 x i8>*
  %3984 = load <32 x i8>, <32 x i8>* %3983, align 64, !tbaa !129
  %3985 = getelementptr inbounds i8, i8* %3914, i32 96
  %3986 = bitcast i8* %3985 to <32 x i8>*
  %3987 = load <32 x i8>, <32 x i8>* %3986, align 32, !tbaa !129
  %3988 = getelementptr inbounds i8, i8* %3922, i32 64
  %3989 = bitcast i8* %3988 to <32 x i8>*
  %3990 = load <32 x i8>, <32 x i8>* %3989, align 64, !tbaa !129
  %3991 = getelementptr inbounds i8, i8* %3922, i32 96
  %3992 = bitcast i8* %3991 to <32 x i8>*
  %3993 = load <32 x i8>, <32 x i8>* %3992, align 32, !tbaa !129
  %3994 = getelementptr inbounds i8, i8* %3930, i32 64
  %3995 = bitcast i8* %3994 to <32 x i8>*
  %3996 = load <32 x i8>, <32 x i8>* %3995, align 64, !tbaa !129
  %3997 = getelementptr inbounds i8, i8* %3930, i32 96
  %3998 = bitcast i8* %3997 to <32 x i8>*
  %3999 = load <32 x i8>, <32 x i8>* %3998, align 32, !tbaa !129
  %4000 = getelementptr inbounds i8, i8* %3939, i32 64
  %4001 = bitcast i8* %4000 to <32 x i8>*
  %4002 = load <32 x i8>, <32 x i8>* %4001, align 64, !tbaa !129
  %4003 = getelementptr inbounds i8, i8* %3939, i32 96
  %4004 = bitcast i8* %4003 to <32 x i8>*
  %4005 = load <32 x i8>, <32 x i8>* %4004, align 32, !tbaa !129
  %4006 = getelementptr inbounds i8, i8* %3947, i32 64
  %4007 = bitcast i8* %4006 to <32 x i8>*
  %4008 = load <32 x i8>, <32 x i8>* %4007, align 64, !tbaa !129
  %4009 = getelementptr inbounds i8, i8* %3947, i32 96
  %4010 = bitcast i8* %4009 to <32 x i8>*
  %4011 = load <32 x i8>, <32 x i8>* %4010, align 32, !tbaa !129
  %4012 = getelementptr inbounds i8, i8* %3955, i32 64
  %4013 = bitcast i8* %4012 to <32 x i8>*
  %4014 = load <32 x i8>, <32 x i8>* %4013, align 64, !tbaa !129
  %4015 = getelementptr inbounds i8, i8* %3955, i32 96
  %4016 = bitcast i8* %4015 to <32 x i8>*
  %4017 = load <32 x i8>, <32 x i8>* %4016, align 32, !tbaa !129
  %4018 = getelementptr inbounds i8, i8* %3964, i32 64
  %4019 = bitcast i8* %4018 to <32 x i8>*
  %4020 = load <32 x i8>, <32 x i8>* %4019, align 64, !tbaa !129
  %4021 = getelementptr inbounds i8, i8* %3964, i32 96
  %4022 = bitcast i8* %4021 to <32 x i8>*
  %4023 = load <32 x i8>, <32 x i8>* %4022, align 32, !tbaa !129
  %4024 = mul nsw i32 %3891, %21
  %4025 = add i32 %3827, %4024
  %4026 = getelementptr inbounds i8, i8* %17, i32 %4025
  %4027 = bitcast i8* %4026 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4027, align 1, !tbaa !217
  %4028 = getelementptr inbounds i8, i8* %4026, i32 32
  %4029 = bitcast i8* %4028 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4029, align 1, !tbaa !217
  %4030 = getelementptr inbounds i8, i8* %4026, i32 64
  %4031 = bitcast i8* %4030 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4031, align 1, !tbaa !217
  %4032 = getelementptr inbounds i8, i8* %4026, i32 96
  %4033 = bitcast i8* %4032 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4033, align 1, !tbaa !217
  %4034 = add nuw nsw i32 %output.s0.x.xo97.us, 1
  %.not1839.us = icmp eq i32 %4034, %20
  br i1 %.not1839.us, label %"end for output.s0.x.xo96.loopexit.split.us", label %"for output.s0.x.xo95.us"

"end for output.s0.x.xo96.loopexit.split.us":     ; preds = %"for output.s0.x.xo95.us"
  %4035 = sext <32 x i16> %3855 to <32 x i32>
  %4036 = zext <32 x i8> %3898 to <32 x i32>
  %4037 = sext <32 x i16> %3856 to <32 x i32>
  %4038 = zext <32 x i8> %3901 to <32 x i32>
  %4039 = sext <32 x i16> %3857 to <32 x i32>
  %4040 = zext <32 x i8> %3907 to <32 x i32>
  %4041 = sext <32 x i16> %3858 to <32 x i32>
  %4042 = zext <32 x i8> %3910 to <32 x i32>
  %4043 = sext <32 x i16> %3859 to <32 x i32>
  %4044 = zext <32 x i8> %3916 to <32 x i32>
  %4045 = sext <32 x i16> %3860 to <32 x i32>
  %4046 = zext <32 x i8> %3919 to <32 x i32>
  %4047 = sext <32 x i16> %3861 to <32 x i32>
  %4048 = zext <32 x i8> %3924 to <32 x i32>
  %4049 = sext <32 x i16> %3862 to <32 x i32>
  %4050 = zext <32 x i8> %3927 to <32 x i32>
  %4051 = sext <32 x i16> %3863 to <32 x i32>
  %4052 = zext <32 x i8> %3932 to <32 x i32>
  %4053 = sext <32 x i16> %3864 to <32 x i32>
  %4054 = zext <32 x i8> %3935 to <32 x i32>
  %4055 = sext <32 x i16> %3865 to <32 x i32>
  %4056 = zext <32 x i8> %3941 to <32 x i32>
  %4057 = sext <32 x i16> %3866 to <32 x i32>
  %4058 = zext <32 x i8> %3944 to <32 x i32>
  %4059 = sext <32 x i16> %3867 to <32 x i32>
  %4060 = zext <32 x i8> %3949 to <32 x i32>
  %4061 = sext <32 x i16> %3868 to <32 x i32>
  %4062 = zext <32 x i8> %3952 to <32 x i32>
  %4063 = sext <32 x i16> %3869 to <32 x i32>
  %4064 = zext <32 x i8> %3957 to <32 x i32>
  %4065 = sext <32 x i16> %3870 to <32 x i32>
  %4066 = zext <32 x i8> %3960 to <32 x i32>
  %4067 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3046, <32 x i32> %3045)
  %4068 = sext <32 x i16> %3871 to <32 x i32>
  %4069 = zext <32 x i8> %3966 to <32 x i32>
  %4070 = sext <32 x i16> %3872 to <32 x i32>
  %4071 = zext <32 x i8> %3969 to <32 x i32>
  %4072 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4069, <32 x i32> %4068) #11
  %4073 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4072, <32 x i32> %4069, <32 x i32> %4068) #11
  %4074 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4071, <32 x i32> %4070) #11
  %4075 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4074, <32 x i32> %4071, <32 x i32> %4070) #11
  %4076 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4073, <32 x i32> %4075) #11
  %4077 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4076, <64 x i32> %4067) #11
  %4078 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4064, <32 x i32> %4063) #11
  %4079 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4078, <32 x i32> %4064, <32 x i32> %4063) #11
  %4080 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4066, <32 x i32> %4065) #11
  %4081 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4080, <32 x i32> %4066, <32 x i32> %4065) #11
  %4082 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4079, <32 x i32> %4081) #11
  %4083 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4077, <64 x i32> %4082) #11
  %4084 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4060, <32 x i32> %4059) #11
  %4085 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4084, <32 x i32> %4060, <32 x i32> %4059) #11
  %4086 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4062, <32 x i32> %4061) #11
  %4087 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4086, <32 x i32> %4062, <32 x i32> %4061) #11
  %4088 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4085, <32 x i32> %4087) #11
  %4089 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4083, <64 x i32> %4088) #11
  %4090 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4056, <32 x i32> %4055) #11
  %4091 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4090, <32 x i32> %4056, <32 x i32> %4055) #11
  %4092 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4058, <32 x i32> %4057) #11
  %4093 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4092, <32 x i32> %4058, <32 x i32> %4057) #11
  %4094 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4091, <32 x i32> %4093) #11
  %4095 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4089, <64 x i32> %4094) #11
  %4096 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4052, <32 x i32> %4051) #11
  %4097 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4096, <32 x i32> %4052, <32 x i32> %4051) #11
  %4098 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4054, <32 x i32> %4053) #11
  %4099 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4098, <32 x i32> %4054, <32 x i32> %4053) #11
  %4100 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4097, <32 x i32> %4099) #11
  %4101 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4095, <64 x i32> %4100) #11
  %4102 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4048, <32 x i32> %4047) #11
  %4103 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4102, <32 x i32> %4048, <32 x i32> %4047) #11
  %4104 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4050, <32 x i32> %4049) #11
  %4105 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4104, <32 x i32> %4050, <32 x i32> %4049) #11
  %4106 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4103, <32 x i32> %4105) #11
  %4107 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4101, <64 x i32> %4106) #11
  %4108 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4044, <32 x i32> %4043) #11
  %4109 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4108, <32 x i32> %4044, <32 x i32> %4043) #11
  %4110 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4046, <32 x i32> %4045) #11
  %4111 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4110, <32 x i32> %4046, <32 x i32> %4045) #11
  %4112 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4109, <32 x i32> %4111) #11
  %4113 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4107, <64 x i32> %4112) #11
  %4114 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4040, <32 x i32> %4039) #11
  %4115 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4114, <32 x i32> %4040, <32 x i32> %4039) #11
  %4116 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4042, <32 x i32> %4041) #11
  %4117 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4116, <32 x i32> %4042, <32 x i32> %4041) #11
  %4118 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4115, <32 x i32> %4117) #11
  %4119 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4113, <64 x i32> %4118) #11
  %4120 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4036, <32 x i32> %4035) #11
  %4121 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4120, <32 x i32> %4036, <32 x i32> %4035) #11
  %4122 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4038, <32 x i32> %4037) #11
  %4123 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4122, <32 x i32> %4038, <32 x i32> %4037) #11
  %4124 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4121, <32 x i32> %4123) #11
  %4125 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4119, <64 x i32> %4124) #11
  %4126 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4125)
  %4127 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4125)
  %4128 = sext <32 x i16> %3873 to <32 x i32>
  %4129 = zext <32 x i8> %3972 to <32 x i32>
  %4130 = sext <32 x i16> %3874 to <32 x i32>
  %4131 = zext <32 x i8> %3975 to <32 x i32>
  %4132 = sext <32 x i16> %3875 to <32 x i32>
  %4133 = zext <32 x i8> %3978 to <32 x i32>
  %4134 = sext <32 x i16> %3876 to <32 x i32>
  %4135 = zext <32 x i8> %3981 to <32 x i32>
  %4136 = sext <32 x i16> %3877 to <32 x i32>
  %4137 = zext <32 x i8> %3984 to <32 x i32>
  %4138 = sext <32 x i16> %3878 to <32 x i32>
  %4139 = zext <32 x i8> %3987 to <32 x i32>
  %4140 = sext <32 x i16> %3879 to <32 x i32>
  %4141 = zext <32 x i8> %3990 to <32 x i32>
  %4142 = sext <32 x i16> %3880 to <32 x i32>
  %4143 = zext <32 x i8> %3993 to <32 x i32>
  %4144 = sext <32 x i16> %3881 to <32 x i32>
  %4145 = zext <32 x i8> %3996 to <32 x i32>
  %4146 = sext <32 x i16> %3882 to <32 x i32>
  %4147 = zext <32 x i8> %3999 to <32 x i32>
  %4148 = sext <32 x i16> %3883 to <32 x i32>
  %4149 = zext <32 x i8> %4002 to <32 x i32>
  %4150 = sext <32 x i16> %3884 to <32 x i32>
  %4151 = zext <32 x i8> %4005 to <32 x i32>
  %4152 = sext <32 x i16> %3885 to <32 x i32>
  %4153 = zext <32 x i8> %4008 to <32 x i32>
  %4154 = sext <32 x i16> %3886 to <32 x i32>
  %4155 = zext <32 x i8> %4011 to <32 x i32>
  %4156 = sext <32 x i16> %3887 to <32 x i32>
  %4157 = zext <32 x i8> %4014 to <32 x i32>
  %4158 = sext <32 x i16> %3888 to <32 x i32>
  %4159 = zext <32 x i8> %4017 to <32 x i32>
  %4160 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3061, <32 x i32> %3060)
  %4161 = sext <32 x i16> %3889 to <32 x i32>
  %4162 = zext <32 x i8> %4020 to <32 x i32>
  %4163 = sext <32 x i16> %3890 to <32 x i32>
  %4164 = zext <32 x i8> %4023 to <32 x i32>
  %4165 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4162, <32 x i32> %4161) #11
  %4166 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4165, <32 x i32> %4162, <32 x i32> %4161) #11
  %4167 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4164, <32 x i32> %4163) #11
  %4168 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4167, <32 x i32> %4164, <32 x i32> %4163) #11
  %4169 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4166, <32 x i32> %4168) #11
  %4170 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4169, <64 x i32> %4160) #11
  %4171 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4157, <32 x i32> %4156) #11
  %4172 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4171, <32 x i32> %4157, <32 x i32> %4156) #11
  %4173 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4159, <32 x i32> %4158) #11
  %4174 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4173, <32 x i32> %4159, <32 x i32> %4158) #11
  %4175 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4172, <32 x i32> %4174) #11
  %4176 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4170, <64 x i32> %4175) #11
  %4177 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4153, <32 x i32> %4152) #11
  %4178 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4177, <32 x i32> %4153, <32 x i32> %4152) #11
  %4179 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4155, <32 x i32> %4154) #11
  %4180 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4179, <32 x i32> %4155, <32 x i32> %4154) #11
  %4181 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4178, <32 x i32> %4180) #11
  %4182 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4176, <64 x i32> %4181) #11
  %4183 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4149, <32 x i32> %4148) #11
  %4184 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4183, <32 x i32> %4149, <32 x i32> %4148) #11
  %4185 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4151, <32 x i32> %4150) #11
  %4186 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4185, <32 x i32> %4151, <32 x i32> %4150) #11
  %4187 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4184, <32 x i32> %4186) #11
  %4188 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4182, <64 x i32> %4187) #11
  %4189 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4145, <32 x i32> %4144) #11
  %4190 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4189, <32 x i32> %4145, <32 x i32> %4144) #11
  %4191 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4147, <32 x i32> %4146) #11
  %4192 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4191, <32 x i32> %4147, <32 x i32> %4146) #11
  %4193 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4190, <32 x i32> %4192) #11
  %4194 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4188, <64 x i32> %4193) #11
  %4195 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4141, <32 x i32> %4140) #11
  %4196 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4195, <32 x i32> %4141, <32 x i32> %4140) #11
  %4197 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4143, <32 x i32> %4142) #11
  %4198 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4197, <32 x i32> %4143, <32 x i32> %4142) #11
  %4199 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4196, <32 x i32> %4198) #11
  %4200 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4194, <64 x i32> %4199) #11
  %4201 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4137, <32 x i32> %4136) #11
  %4202 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4201, <32 x i32> %4137, <32 x i32> %4136) #11
  %4203 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4139, <32 x i32> %4138) #11
  %4204 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4203, <32 x i32> %4139, <32 x i32> %4138) #11
  %4205 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4202, <32 x i32> %4204) #11
  %4206 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4200, <64 x i32> %4205) #11
  %4207 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4133, <32 x i32> %4132) #11
  %4208 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4207, <32 x i32> %4133, <32 x i32> %4132) #11
  %4209 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4135, <32 x i32> %4134) #11
  %4210 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4209, <32 x i32> %4135, <32 x i32> %4134) #11
  %4211 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4208, <32 x i32> %4210) #11
  %4212 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4206, <64 x i32> %4211) #11
  %4213 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4129, <32 x i32> %4128) #11
  %4214 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4213, <32 x i32> %4129, <32 x i32> %4128) #11
  %4215 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4131, <32 x i32> %4130) #11
  %4216 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4215, <32 x i32> %4131, <32 x i32> %4130) #11
  %4217 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4214, <32 x i32> %4216) #11
  %4218 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4212, <64 x i32> %4217) #11
  %4219 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4218)
  %4220 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4218)
  br label %"end for output.s0.x.xo96.loopexit"

"for output.s0.x.xo95.preheader.split":           ; preds = %"for output.s0.x.xo95.preheader"
  br i1 %2710, label %"for output.s0.x.xo95.us2225", label %"for output.s0.x.xo95.preheader2938", !prof !101

"for output.s0.x.xo95.preheader2938":             ; preds = %"for output.s0.x.xo95.preheader.split"
  br i1 %2797, label %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa", label %"for output.s0.x.xo95"

"for output.s0.x.xo95.us2225":                    ; preds = %"for output.s0.x.xo95.preheader.split", %"consume convolved108.loopexit.us"
  %output.s0.x.xo97.us2226 = phi i32 [ %4234, %"consume convolved108.loopexit.us" ], [ 0, %"for output.s0.x.xo95.preheader.split" ]
  %4221 = add nsw i32 %output.s0.x.xo97.us2226, %19
  %4222 = mul nsw i32 %4221, %stride_x
  %4223 = sub i32 %4222, %t2348
  br i1 %2709, label %"for convolved.s1.r19$y102.us.us", label %"consume convolved108.loopexit.us", !prof !101

"consume convolved108.loopexit.us":               ; preds = %"end for convolved.s1.r19$x106.loopexit.us.us", %"for output.s0.x.xo95.us2225"
  %.lcssa2201.us.lcssa2221.us = phi <32 x i32> [ %3061, %"for output.s0.x.xo95.us2225" ], [ %.lcssa2946, %"end for convolved.s1.r19$x106.loopexit.us.us" ]
  %.lcssa2199.us.lcssa2218.us = phi <32 x i32> [ %3060, %"for output.s0.x.xo95.us2225" ], [ %.lcssa2947, %"end for convolved.s1.r19$x106.loopexit.us.us" ]
  %.lcssa2197.us.lcssa2215.us = phi <32 x i32> [ %3046, %"for output.s0.x.xo95.us2225" ], [ %.lcssa2948, %"end for convolved.s1.r19$x106.loopexit.us.us" ]
  %.lcssa2195.us.lcssa2212.us = phi <32 x i32> [ %3045, %"for output.s0.x.xo95.us2225" ], [ %.lcssa2949, %"end for convolved.s1.r19$x106.loopexit.us.us" ]
  %4224 = mul nsw i32 %4221, %21
  %4225 = add i32 %3827, %4224
  %4226 = getelementptr inbounds i8, i8* %17, i32 %4225
  %4227 = bitcast i8* %4226 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4227, align 1, !tbaa !217
  %4228 = getelementptr inbounds i8, i8* %4226, i32 32
  %4229 = bitcast i8* %4228 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4229, align 1, !tbaa !217
  %4230 = getelementptr inbounds i8, i8* %4226, i32 64
  %4231 = bitcast i8* %4230 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4231, align 1, !tbaa !217
  %4232 = getelementptr inbounds i8, i8* %4226, i32 96
  %4233 = bitcast i8* %4232 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4233, align 1, !tbaa !217
  %4234 = add nuw nsw i32 %output.s0.x.xo97.us2226, 1
  %.not1839.us2235 = icmp eq i32 %4234, %20
  br i1 %.not1839.us2235, label %"end for output.s0.x.xo96.loopexit", label %"for output.s0.x.xo95.us2225"

"for convolved.s1.r19$y102.us.us":                ; preds = %"for output.s0.x.xo95.us2225", %"end for convolved.s1.r19$x106.loopexit.us.us"
  %.lcssa2201.us2209.us = phi <32 x i32> [ %.lcssa2946, %"end for convolved.s1.r19$x106.loopexit.us.us" ], [ %3061, %"for output.s0.x.xo95.us2225" ]
  %.lcssa2199.us2207.us = phi <32 x i32> [ %.lcssa2947, %"end for convolved.s1.r19$x106.loopexit.us.us" ], [ %3060, %"for output.s0.x.xo95.us2225" ]
  %.lcssa2197.us2205.us = phi <32 x i32> [ %.lcssa2948, %"end for convolved.s1.r19$x106.loopexit.us.us" ], [ %3046, %"for output.s0.x.xo95.us2225" ]
  %.lcssa2195.us2203.us = phi <32 x i32> [ %.lcssa2949, %"end for convolved.s1.r19$x106.loopexit.us.us" ], [ %3045, %"for output.s0.x.xo95.us2225" ]
  %"convolved.s1.r19$y104.us.us" = phi i32 [ %4410, %"end for convolved.s1.r19$x106.loopexit.us.us" ], [ 0, %"for output.s0.x.xo95.us2225" ]
  %4235 = mul nsw i32 %"convolved.s1.r19$y104.us.us", %a548
  %4236 = add nsw i32 %4235, %3772
  %4237 = mul nsw i32 %4236, %2755
  %t2397.us.us = add nsw i32 %4223, %4237
  %4238 = mul nsw i32 %"convolved.s1.r19$y104.us.us", %4
  br i1 %2798, label %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa", label %"for convolved.s1.r19$x105.us.us"

"for convolved.s1.r19$x105.us.us":                ; preds = %"for convolved.s1.r19$y102.us.us", %"for convolved.s1.r19$x105.us.us"
  %4239 = phi <32 x i32> [ %4353, %"for convolved.s1.r19$x105.us.us" ], [ %.lcssa2201.us2209.us, %"for convolved.s1.r19$y102.us.us" ]
  %4240 = phi <32 x i32> [ %4352, %"for convolved.s1.r19$x105.us.us" ], [ %.lcssa2199.us2207.us, %"for convolved.s1.r19$y102.us.us" ]
  %4241 = phi <32 x i32> [ %4328, %"for convolved.s1.r19$x105.us.us" ], [ %.lcssa2197.us2205.us, %"for convolved.s1.r19$y102.us.us" ]
  %4242 = phi <32 x i32> [ %4327, %"for convolved.s1.r19$x105.us.us" ], [ %.lcssa2195.us2203.us, %"for convolved.s1.r19$y102.us.us" ]
  %"convolved.s1.r19$x107.us.us" = phi i32 [ %4354, %"for convolved.s1.r19$x105.us.us" ], [ 0, %"for convolved.s1.r19$y102.us.us" ]
  %niter3055 = phi i32 [ %niter3055.nsub.1, %"for convolved.s1.r19$x105.us.us" ], [ %unroll_iter3054, %"for convolved.s1.r19$y102.us.us" ]
  %4243 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4241, <32 x i32> %4242)
  %4244 = add nsw i32 %"convolved.s1.r19$x107.us.us", %4238
  %4245 = shl nsw i32 %4244, 7
  %4246 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %4245
  %4247 = bitcast i16* %4246 to <32 x i16>*
  %4248 = load <32 x i16>, <32 x i16>* %4247, align 128, !tbaa !105
  %4249 = sext <32 x i16> %4248 to <32 x i32>
  %4250 = mul nsw i32 %"convolved.s1.r19$x107.us.us", %a553
  %4251 = add nsw i32 %t2397.us.us, %4250
  %4252 = shl nsw i32 %4251, 7
  %4253 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4252
  %4254 = bitcast i8* %4253 to <32 x i8>*
  %4255 = load <32 x i8>, <32 x i8>* %4254, align 128, !tbaa !129
  %4256 = zext <32 x i8> %4255 to <32 x i32>
  %4257 = getelementptr inbounds i16, i16* %4246, i32 32
  %4258 = bitcast i16* %4257 to <32 x i16>*
  %4259 = load <32 x i16>, <32 x i16>* %4258, align 64, !tbaa !105
  %4260 = sext <32 x i16> %4259 to <32 x i32>
  %4261 = getelementptr inbounds i8, i8* %4253, i32 32
  %4262 = bitcast i8* %4261 to <32 x i8>*
  %4263 = load <32 x i8>, <32 x i8>* %4262, align 32, !tbaa !129
  %4264 = zext <32 x i8> %4263 to <32 x i32>
  %4265 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4256, <32 x i32> %4249) #11
  %4266 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4265, <32 x i32> %4256, <32 x i32> %4249) #11
  %4267 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4264, <32 x i32> %4260) #11
  %4268 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4267, <32 x i32> %4264, <32 x i32> %4260) #11
  %4269 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4266, <32 x i32> %4268) #11
  %4270 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4269, <64 x i32> %4243) #11
  %4271 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4270)
  %4272 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4270)
  %4273 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4239, <32 x i32> %4240)
  %4274 = getelementptr inbounds i16, i16* %4246, i32 64
  %4275 = bitcast i16* %4274 to <32 x i16>*
  %4276 = load <32 x i16>, <32 x i16>* %4275, align 128, !tbaa !105
  %4277 = sext <32 x i16> %4276 to <32 x i32>
  %4278 = getelementptr inbounds i8, i8* %4253, i32 64
  %4279 = bitcast i8* %4278 to <32 x i8>*
  %4280 = load <32 x i8>, <32 x i8>* %4279, align 64, !tbaa !129
  %4281 = zext <32 x i8> %4280 to <32 x i32>
  %4282 = getelementptr inbounds i16, i16* %4246, i32 96
  %4283 = bitcast i16* %4282 to <32 x i16>*
  %4284 = load <32 x i16>, <32 x i16>* %4283, align 64, !tbaa !105
  %4285 = sext <32 x i16> %4284 to <32 x i32>
  %4286 = getelementptr inbounds i8, i8* %4253, i32 96
  %4287 = bitcast i8* %4286 to <32 x i8>*
  %4288 = load <32 x i8>, <32 x i8>* %4287, align 32, !tbaa !129
  %4289 = zext <32 x i8> %4288 to <32 x i32>
  %4290 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4281, <32 x i32> %4277) #11
  %4291 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4290, <32 x i32> %4281, <32 x i32> %4277) #11
  %4292 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4289, <32 x i32> %4285) #11
  %4293 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4292, <32 x i32> %4289, <32 x i32> %4285) #11
  %4294 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4291, <32 x i32> %4293) #11
  %4295 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4294, <64 x i32> %4273) #11
  %4296 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4295)
  %4297 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4295)
  %4298 = or i32 %"convolved.s1.r19$x107.us.us", 1
  %4299 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4272, <32 x i32> %4271)
  %4300 = add nsw i32 %4298, %4238
  %4301 = shl nsw i32 %4300, 7
  %4302 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %4301
  %4303 = bitcast i16* %4302 to <32 x i16>*
  %4304 = load <32 x i16>, <32 x i16>* %4303, align 128, !tbaa !105
  %4305 = sext <32 x i16> %4304 to <32 x i32>
  %4306 = mul nsw i32 %4298, %a553
  %4307 = add nsw i32 %t2397.us.us, %4306
  %4308 = shl nsw i32 %4307, 7
  %4309 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4308
  %4310 = bitcast i8* %4309 to <32 x i8>*
  %4311 = load <32 x i8>, <32 x i8>* %4310, align 128, !tbaa !129
  %4312 = zext <32 x i8> %4311 to <32 x i32>
  %4313 = getelementptr inbounds i16, i16* %4302, i32 32
  %4314 = bitcast i16* %4313 to <32 x i16>*
  %4315 = load <32 x i16>, <32 x i16>* %4314, align 64, !tbaa !105
  %4316 = sext <32 x i16> %4315 to <32 x i32>
  %4317 = getelementptr inbounds i8, i8* %4309, i32 32
  %4318 = bitcast i8* %4317 to <32 x i8>*
  %4319 = load <32 x i8>, <32 x i8>* %4318, align 32, !tbaa !129
  %4320 = zext <32 x i8> %4319 to <32 x i32>
  %4321 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4312, <32 x i32> %4305) #11
  %4322 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4321, <32 x i32> %4312, <32 x i32> %4305) #11
  %4323 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4320, <32 x i32> %4316) #11
  %4324 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4323, <32 x i32> %4320, <32 x i32> %4316) #11
  %4325 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4322, <32 x i32> %4324) #11
  %4326 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4325, <64 x i32> %4299) #11
  %4327 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4326)
  %4328 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4326)
  %4329 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4297, <32 x i32> %4296)
  %4330 = getelementptr inbounds i16, i16* %4302, i32 64
  %4331 = bitcast i16* %4330 to <32 x i16>*
  %4332 = load <32 x i16>, <32 x i16>* %4331, align 128, !tbaa !105
  %4333 = sext <32 x i16> %4332 to <32 x i32>
  %4334 = getelementptr inbounds i8, i8* %4309, i32 64
  %4335 = bitcast i8* %4334 to <32 x i8>*
  %4336 = load <32 x i8>, <32 x i8>* %4335, align 64, !tbaa !129
  %4337 = zext <32 x i8> %4336 to <32 x i32>
  %4338 = getelementptr inbounds i16, i16* %4302, i32 96
  %4339 = bitcast i16* %4338 to <32 x i16>*
  %4340 = load <32 x i16>, <32 x i16>* %4339, align 64, !tbaa !105
  %4341 = sext <32 x i16> %4340 to <32 x i32>
  %4342 = getelementptr inbounds i8, i8* %4309, i32 96
  %4343 = bitcast i8* %4342 to <32 x i8>*
  %4344 = load <32 x i8>, <32 x i8>* %4343, align 32, !tbaa !129
  %4345 = zext <32 x i8> %4344 to <32 x i32>
  %4346 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4337, <32 x i32> %4333) #11
  %4347 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4346, <32 x i32> %4337, <32 x i32> %4333) #11
  %4348 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4345, <32 x i32> %4341) #11
  %4349 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4348, <32 x i32> %4345, <32 x i32> %4341) #11
  %4350 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4347, <32 x i32> %4349) #11
  %4351 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4350, <64 x i32> %4329) #11
  %4352 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4351)
  %4353 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4351)
  %4354 = add nuw nsw i32 %"convolved.s1.r19$x107.us.us", 2
  %niter3055.nsub.1 = add i32 %niter3055, -2
  %niter3055.ncmp.1 = icmp eq i32 %niter3055.nsub.1, 0
  br i1 %niter3055.ncmp.1, label %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa", label %"for convolved.s1.r19$x105.us.us"

"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x105.us.us", %"for convolved.s1.r19$y102.us.us"
  %.lcssa2949.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us.us" ], [ %4327, %"for convolved.s1.r19$x105.us.us" ]
  %.lcssa2948.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us.us" ], [ %4328, %"for convolved.s1.r19$x105.us.us" ]
  %.lcssa2947.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us.us" ], [ %4352, %"for convolved.s1.r19$x105.us.us" ]
  %.lcssa2946.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y102.us.us" ], [ %4353, %"for convolved.s1.r19$x105.us.us" ]
  %.unr3049 = phi <32 x i32> [ %.lcssa2201.us2209.us, %"for convolved.s1.r19$y102.us.us" ], [ %4353, %"for convolved.s1.r19$x105.us.us" ]
  %.unr3050 = phi <32 x i32> [ %.lcssa2199.us2207.us, %"for convolved.s1.r19$y102.us.us" ], [ %4352, %"for convolved.s1.r19$x105.us.us" ]
  %.unr3051 = phi <32 x i32> [ %.lcssa2197.us2205.us, %"for convolved.s1.r19$y102.us.us" ], [ %4328, %"for convolved.s1.r19$x105.us.us" ]
  %.unr3052 = phi <32 x i32> [ %.lcssa2195.us2203.us, %"for convolved.s1.r19$y102.us.us" ], [ %4327, %"for convolved.s1.r19$x105.us.us" ]
  %"convolved.s1.r19$x107.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y102.us.us" ], [ %4354, %"for convolved.s1.r19$x105.us.us" ]
  br i1 %lcmp.mod3053.not, label %"end for convolved.s1.r19$x106.loopexit.us.us", label %"for convolved.s1.r19$x105.us.us.epil"

"for convolved.s1.r19$x105.us.us.epil":           ; preds = %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa"
  %4355 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr3051, <32 x i32> %.unr3052)
  %4356 = add nsw i32 %"convolved.s1.r19$x107.us.us.unr", %4238
  %4357 = shl nsw i32 %4356, 7
  %4358 = getelementptr inbounds i16, i16* %filter_zeroed36, i32 %4357
  %4359 = bitcast i16* %4358 to <32 x i16>*
  %4360 = load <32 x i16>, <32 x i16>* %4359, align 128, !tbaa !105
  %4361 = sext <32 x i16> %4360 to <32 x i32>
  %4362 = mul nsw i32 %"convolved.s1.r19$x107.us.us.unr", %a553
  %4363 = add nsw i32 %t2397.us.us, %4362
  %4364 = shl nsw i32 %4363, 7
  %4365 = getelementptr inbounds i8, i8* %resampled_input62, i32 %4364
  %4366 = bitcast i8* %4365 to <32 x i8>*
  %4367 = load <32 x i8>, <32 x i8>* %4366, align 128, !tbaa !129
  %4368 = zext <32 x i8> %4367 to <32 x i32>
  %4369 = getelementptr inbounds i16, i16* %4358, i32 32
  %4370 = bitcast i16* %4369 to <32 x i16>*
  %4371 = load <32 x i16>, <32 x i16>* %4370, align 64, !tbaa !105
  %4372 = sext <32 x i16> %4371 to <32 x i32>
  %4373 = getelementptr inbounds i8, i8* %4365, i32 32
  %4374 = bitcast i8* %4373 to <32 x i8>*
  %4375 = load <32 x i8>, <32 x i8>* %4374, align 32, !tbaa !129
  %4376 = zext <32 x i8> %4375 to <32 x i32>
  %4377 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4368, <32 x i32> %4361) #11
  %4378 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4377, <32 x i32> %4368, <32 x i32> %4361) #11
  %4379 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4376, <32 x i32> %4372) #11
  %4380 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4379, <32 x i32> %4376, <32 x i32> %4372) #11
  %4381 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4378, <32 x i32> %4380) #11
  %4382 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4381, <64 x i32> %4355) #11
  %4383 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr3049, <32 x i32> %.unr3050)
  %4384 = getelementptr inbounds i16, i16* %4358, i32 64
  %4385 = bitcast i16* %4384 to <32 x i16>*
  %4386 = load <32 x i16>, <32 x i16>* %4385, align 128, !tbaa !105
  %4387 = sext <32 x i16> %4386 to <32 x i32>
  %4388 = getelementptr inbounds i8, i8* %4365, i32 64
  %4389 = bitcast i8* %4388 to <32 x i8>*
  %4390 = load <32 x i8>, <32 x i8>* %4389, align 64, !tbaa !129
  %4391 = zext <32 x i8> %4390 to <32 x i32>
  %4392 = getelementptr inbounds i16, i16* %4358, i32 96
  %4393 = bitcast i16* %4392 to <32 x i16>*
  %4394 = load <32 x i16>, <32 x i16>* %4393, align 64, !tbaa !105
  %4395 = sext <32 x i16> %4394 to <32 x i32>
  %4396 = getelementptr inbounds i8, i8* %4365, i32 96
  %4397 = bitcast i8* %4396 to <32 x i8>*
  %4398 = load <32 x i8>, <32 x i8>* %4397, align 32, !tbaa !129
  %4399 = zext <32 x i8> %4398 to <32 x i32>
  %4400 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4391, <32 x i32> %4387) #11
  %4401 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4400, <32 x i32> %4391, <32 x i32> %4387) #11
  %4402 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4399, <32 x i32> %4395) #11
  %4403 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4402, <32 x i32> %4399, <32 x i32> %4395) #11
  %4404 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4401, <32 x i32> %4403) #11
  %4405 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4404, <64 x i32> %4383) #11
  %4406 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4405)
  %4407 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4405)
  %4408 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4382)
  %4409 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4382)
  br label %"end for convolved.s1.r19$x106.loopexit.us.us"

"end for convolved.s1.r19$x106.loopexit.us.us":   ; preds = %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa", %"for convolved.s1.r19$x105.us.us.epil"
  %.lcssa2949 = phi <32 x i32> [ %.lcssa2949.ph, %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa" ], [ %4409, %"for convolved.s1.r19$x105.us.us.epil" ]
  %.lcssa2948 = phi <32 x i32> [ %.lcssa2948.ph, %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa" ], [ %4408, %"for convolved.s1.r19$x105.us.us.epil" ]
  %.lcssa2947 = phi <32 x i32> [ %.lcssa2947.ph, %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa" ], [ %4407, %"for convolved.s1.r19$x105.us.us.epil" ]
  %.lcssa2946 = phi <32 x i32> [ %.lcssa2946.ph, %"end for convolved.s1.r19$x106.loopexit.us.us.unr-lcssa" ], [ %4406, %"for convolved.s1.r19$x105.us.us.epil" ]
  %4410 = add nuw nsw i32 %"convolved.s1.r19$y104.us.us", 1
  %.not1840.us.us = icmp eq i32 %4410, %6
  br i1 %.not1840.us.us, label %"consume convolved108.loopexit.us", label %"for convolved.s1.r19$y102.us.us"

"end for output.s0.y.yo93":                       ; preds = %"end for output.s0.x.xo96", %"consume resampled_input91"
  %4411 = add nuw nsw i32 %output.s0.b.rebased59, 1
  %.not1837 = icmp eq i32 %4411, %15
  br i1 %.not1837, label %"end for output.s0.b.rebased58", label %"for output.s0.b.rebased57"

"for output.s0.x.xo95":                           ; preds = %"for output.s0.x.xo95.preheader2938", %"for output.s0.x.xo95"
  %output.s0.x.xo97 = phi i32 [ %4507, %"for output.s0.x.xo95" ], [ 0, %"for output.s0.x.xo95.preheader2938" ]
  %niter3047 = phi i32 [ %niter3047.nsub.7, %"for output.s0.x.xo95" ], [ %unroll_iter3046, %"for output.s0.x.xo95.preheader2938" ]
  %4412 = add nsw i32 %output.s0.x.xo97, %19
  %4413 = mul nsw i32 %4412, %21
  %4414 = add i32 %3827, %4413
  %4415 = getelementptr inbounds i8, i8* %17, i32 %4414
  %4416 = bitcast i8* %4415 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4416, align 1, !tbaa !217
  %4417 = getelementptr inbounds i8, i8* %4415, i32 32
  %4418 = bitcast i8* %4417 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4418, align 1, !tbaa !217
  %4419 = getelementptr inbounds i8, i8* %4415, i32 64
  %4420 = bitcast i8* %4419 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4420, align 1, !tbaa !217
  %4421 = getelementptr inbounds i8, i8* %4415, i32 96
  %4422 = bitcast i8* %4421 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4422, align 1, !tbaa !217
  %4423 = or i32 %output.s0.x.xo97, 1
  %4424 = add nsw i32 %4423, %19
  %4425 = mul nsw i32 %4424, %21
  %4426 = add i32 %3827, %4425
  %4427 = getelementptr inbounds i8, i8* %17, i32 %4426
  %4428 = bitcast i8* %4427 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4428, align 1, !tbaa !217
  %4429 = getelementptr inbounds i8, i8* %4427, i32 32
  %4430 = bitcast i8* %4429 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4430, align 1, !tbaa !217
  %4431 = getelementptr inbounds i8, i8* %4427, i32 64
  %4432 = bitcast i8* %4431 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4432, align 1, !tbaa !217
  %4433 = getelementptr inbounds i8, i8* %4427, i32 96
  %4434 = bitcast i8* %4433 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4434, align 1, !tbaa !217
  %4435 = or i32 %output.s0.x.xo97, 2
  %4436 = add nsw i32 %4435, %19
  %4437 = mul nsw i32 %4436, %21
  %4438 = add i32 %3827, %4437
  %4439 = getelementptr inbounds i8, i8* %17, i32 %4438
  %4440 = bitcast i8* %4439 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4440, align 1, !tbaa !217
  %4441 = getelementptr inbounds i8, i8* %4439, i32 32
  %4442 = bitcast i8* %4441 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4442, align 1, !tbaa !217
  %4443 = getelementptr inbounds i8, i8* %4439, i32 64
  %4444 = bitcast i8* %4443 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4444, align 1, !tbaa !217
  %4445 = getelementptr inbounds i8, i8* %4439, i32 96
  %4446 = bitcast i8* %4445 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4446, align 1, !tbaa !217
  %4447 = or i32 %output.s0.x.xo97, 3
  %4448 = add nsw i32 %4447, %19
  %4449 = mul nsw i32 %4448, %21
  %4450 = add i32 %3827, %4449
  %4451 = getelementptr inbounds i8, i8* %17, i32 %4450
  %4452 = bitcast i8* %4451 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4452, align 1, !tbaa !217
  %4453 = getelementptr inbounds i8, i8* %4451, i32 32
  %4454 = bitcast i8* %4453 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4454, align 1, !tbaa !217
  %4455 = getelementptr inbounds i8, i8* %4451, i32 64
  %4456 = bitcast i8* %4455 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4456, align 1, !tbaa !217
  %4457 = getelementptr inbounds i8, i8* %4451, i32 96
  %4458 = bitcast i8* %4457 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4458, align 1, !tbaa !217
  %4459 = or i32 %output.s0.x.xo97, 4
  %4460 = add nsw i32 %4459, %19
  %4461 = mul nsw i32 %4460, %21
  %4462 = add i32 %3827, %4461
  %4463 = getelementptr inbounds i8, i8* %17, i32 %4462
  %4464 = bitcast i8* %4463 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4464, align 1, !tbaa !217
  %4465 = getelementptr inbounds i8, i8* %4463, i32 32
  %4466 = bitcast i8* %4465 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4466, align 1, !tbaa !217
  %4467 = getelementptr inbounds i8, i8* %4463, i32 64
  %4468 = bitcast i8* %4467 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4468, align 1, !tbaa !217
  %4469 = getelementptr inbounds i8, i8* %4463, i32 96
  %4470 = bitcast i8* %4469 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4470, align 1, !tbaa !217
  %4471 = or i32 %output.s0.x.xo97, 5
  %4472 = add nsw i32 %4471, %19
  %4473 = mul nsw i32 %4472, %21
  %4474 = add i32 %3827, %4473
  %4475 = getelementptr inbounds i8, i8* %17, i32 %4474
  %4476 = bitcast i8* %4475 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4476, align 1, !tbaa !217
  %4477 = getelementptr inbounds i8, i8* %4475, i32 32
  %4478 = bitcast i8* %4477 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4478, align 1, !tbaa !217
  %4479 = getelementptr inbounds i8, i8* %4475, i32 64
  %4480 = bitcast i8* %4479 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4480, align 1, !tbaa !217
  %4481 = getelementptr inbounds i8, i8* %4475, i32 96
  %4482 = bitcast i8* %4481 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4482, align 1, !tbaa !217
  %4483 = or i32 %output.s0.x.xo97, 6
  %4484 = add nsw i32 %4483, %19
  %4485 = mul nsw i32 %4484, %21
  %4486 = add i32 %3827, %4485
  %4487 = getelementptr inbounds i8, i8* %17, i32 %4486
  %4488 = bitcast i8* %4487 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4488, align 1, !tbaa !217
  %4489 = getelementptr inbounds i8, i8* %4487, i32 32
  %4490 = bitcast i8* %4489 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4490, align 1, !tbaa !217
  %4491 = getelementptr inbounds i8, i8* %4487, i32 64
  %4492 = bitcast i8* %4491 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4492, align 1, !tbaa !217
  %4493 = getelementptr inbounds i8, i8* %4487, i32 96
  %4494 = bitcast i8* %4493 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4494, align 1, !tbaa !217
  %4495 = or i32 %output.s0.x.xo97, 7
  %4496 = add nsw i32 %4495, %19
  %4497 = mul nsw i32 %4496, %21
  %4498 = add i32 %3827, %4497
  %4499 = getelementptr inbounds i8, i8* %17, i32 %4498
  %4500 = bitcast i8* %4499 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4500, align 1, !tbaa !217
  %4501 = getelementptr inbounds i8, i8* %4499, i32 32
  %4502 = bitcast i8* %4501 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4502, align 1, !tbaa !217
  %4503 = getelementptr inbounds i8, i8* %4499, i32 64
  %4504 = bitcast i8* %4503 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4504, align 1, !tbaa !217
  %4505 = getelementptr inbounds i8, i8* %4499, i32 96
  %4506 = bitcast i8* %4505 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4506, align 1, !tbaa !217
  %4507 = add nuw nsw i32 %output.s0.x.xo97, 8
  %niter3047.nsub.7 = add i32 %niter3047, -8
  %niter3047.ncmp.7 = icmp eq i32 %niter3047.nsub.7, 0
  br i1 %niter3047.ncmp.7, label %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa", label %"for output.s0.x.xo95"

"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa": ; preds = %"for output.s0.x.xo95", %"for output.s0.x.xo95.preheader2938"
  %output.s0.x.xo97.unr = phi i32 [ 0, %"for output.s0.x.xo95.preheader2938" ], [ %4507, %"for output.s0.x.xo95" ]
  br i1 %lcmp.mod3045.not, label %"end for output.s0.x.xo96.loopexit", label %"for output.s0.x.xo95.epil"

"for output.s0.x.xo95.epil":                      ; preds = %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa", %"for output.s0.x.xo95.epil"
  %output.s0.x.xo97.epil = phi i32 [ %4519, %"for output.s0.x.xo95.epil" ], [ %output.s0.x.xo97.unr, %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa" ]
  %epil.iter3044 = phi i32 [ %epil.iter3044.sub, %"for output.s0.x.xo95.epil" ], [ %xtraiter3043, %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa" ]
  %4508 = add nsw i32 %output.s0.x.xo97.epil, %19
  %4509 = mul nsw i32 %4508, %21
  %4510 = add i32 %3827, %4509
  %4511 = getelementptr inbounds i8, i8* %17, i32 %4510
  %4512 = bitcast i8* %4511 to <32 x i8>*
  store <32 x i8> %3825, <32 x i8>* %4512, align 1, !tbaa !217
  %4513 = getelementptr inbounds i8, i8* %4511, i32 32
  %4514 = bitcast i8* %4513 to <32 x i8>*
  store <32 x i8> %3836, <32 x i8>* %4514, align 1, !tbaa !217
  %4515 = getelementptr inbounds i8, i8* %4511, i32 64
  %4516 = bitcast i8* %4515 to <32 x i8>*
  store <32 x i8> %3845, <32 x i8>* %4516, align 1, !tbaa !217
  %4517 = getelementptr inbounds i8, i8* %4511, i32 96
  %4518 = bitcast i8* %4517 to <32 x i8>*
  store <32 x i8> %3854, <32 x i8>* %4518, align 1, !tbaa !217
  %4519 = add nuw nsw i32 %output.s0.x.xo97.epil, 1
  %epil.iter3044.sub = add i32 %epil.iter3044, -1
  %epil.iter3044.cmp.not = icmp eq i32 %epil.iter3044.sub, 0
  br i1 %epil.iter3044.cmp.not, label %"end for output.s0.x.xo96.loopexit", label %"for output.s0.x.xo95.epil", !llvm.loop !221

"end for output.s0.x.xo96.loopexit":              ; preds = %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa", %"for output.s0.x.xo95.epil", %"consume convolved108.loopexit.us", %"end for output.s0.x.xo96.loopexit.split.us"
  %.us-phi = phi <32 x i32> [ %4220, %"end for output.s0.x.xo96.loopexit.split.us" ], [ %.lcssa2201.us.lcssa2221.us, %"consume convolved108.loopexit.us" ], [ %3061, %"for output.s0.x.xo95.epil" ], [ %3061, %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa" ]
  %.us-phi2222 = phi <32 x i32> [ %4219, %"end for output.s0.x.xo96.loopexit.split.us" ], [ %.lcssa2199.us.lcssa2218.us, %"consume convolved108.loopexit.us" ], [ %3060, %"for output.s0.x.xo95.epil" ], [ %3060, %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa" ]
  %.us-phi2223 = phi <32 x i32> [ %4127, %"end for output.s0.x.xo96.loopexit.split.us" ], [ %.lcssa2197.us.lcssa2215.us, %"consume convolved108.loopexit.us" ], [ %3046, %"for output.s0.x.xo95.epil" ], [ %3046, %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa" ]
  %.us-phi2224 = phi <32 x i32> [ %4126, %"end for output.s0.x.xo96.loopexit.split.us" ], [ %.lcssa2195.us.lcssa2212.us, %"consume convolved108.loopexit.us" ], [ %3045, %"for output.s0.x.xo95.epil" ], [ %3045, %"end for output.s0.x.xo96.loopexit.loopexit2939.unr-lcssa" ]
  store <32 x i32> %.us-phi2224, <32 x i32>* %2766, align 128, !tbaa !111
  store <32 x i32> %.us-phi2223, <32 x i32>* %2768, align 128, !tbaa !119
  store <32 x i32> %.us-phi2222, <32 x i32>* %2770, align 128, !tbaa !121
  store <32 x i32> %.us-phi, <32 x i32>* %2772, align 128, !tbaa !124
  br label %"end for output.s0.x.xo96"

"end for output.s0.x.xo96":                       ; preds = %"end for output.s0.x.xo96.loopexit", %"for output.s0.y.yo92"
  %4520 = add nuw nsw i32 %output.s0.y.yo94, 1
  %.not1838 = icmp eq i32 %4520, %23
  br i1 %.not1838, label %"end for output.s0.y.yo93", label %"for output.s0.y.yo92"

if.end.i2005:                                     ; preds = %next_bb29
  %4521 = icmp eq i32 %4, 3
  %4522 = icmp eq i32 %6, 3
  %4523 = and i1 %4521, %4522
  %4524 = icmp sgt i32 %4, 0
  %4525 = icmp sgt i32 %6, 0
  %4526 = select i1 %4525, i32 %6, i32 0
  %.op = shl i32 %4, 8
  %4527 = select i1 %4524, i32 %.op, i32 0
  %4528 = mul i32 %4527, %4526
  %4529 = or i32 %4528, 134
  %4530 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i32 %4529, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i2004 = icmp ugt i32 %4529, 16384
  br i1 %cmp7.i2004, label %pseudostack_alloc.exit2010, label %pseudostack_alloc.exit2010.thread

pseudostack_alloc.exit2010.thread:                ; preds = %if.end.i2005
  store i32 %4529, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %then_bb112

pseudostack_alloc.exit2010:                       ; preds = %if.end.i2005
  %call.i2006 = tail call i8* @halide_malloc(i8* null, i32 %4529) #15
  store i8* %call.i2006, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %4529, i32* %.fca.1.gep, align 4, !tbaa !98
  %4531 = bitcast i8* %call.i2006 to i16*
  %.not = icmp eq i8* %call.i2006, null
  br i1 %.not, label %then_bb112, label %"produce filter_zeroed114", !prof !100

then_bb112:                                       ; preds = %pseudostack_alloc.exit2010.thread, %pseudostack_alloc.exit2010
  %4532 = alloca i8*, i32 %4529, align 128
  %4533 = bitcast i8** %4532 to i16*
  %4534 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %4532, i8*** %4534, align 4
  br label %"produce filter_zeroed114"

"produce filter_zeroed114":                       ; preds = %pseudostack_alloc.exit2010, %then_bb112
  %filter_zeroed113 = phi i16* [ %4533, %then_bb112 ], [ %4531, %pseudostack_alloc.exit2010 ]
  %t2399 = icmp sgt i32 %3, 64
  %t2398 = icmp sgt i32 %3, 63
  %4535 = insertelement <64 x i32> undef, i32 %3, i32 0
  %4536 = shufflevector <64 x i32> %4535, <64 x i32> undef, <64 x i32> zeroinitializer
  br i1 %4525, label %"for filter_zeroed.s0.y115.preheader", label %"produce sum_filter132", !prof !101

"for filter_zeroed.s0.y115.preheader":            ; preds = %"produce filter_zeroed114"
  %4537 = icmp sgt <64 x i32> %4536, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4538 = zext i8 %filter_zero to i16
  %4539 = insertelement <64 x i16> undef, i16 %4538, i32 0
  %4540 = shufflevector <64 x i16> %4539, <64 x i16> undef, <64 x i32> zeroinitializer
  %4541 = bitcast <64 x i16> %4540 to <32 x i32>
  %4542 = icmp sgt <64 x i32> %4536, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br i1 %4524, label %"for filter_zeroed.s0.y115.preheader.split.us", label %"produce sum_filter132", !prof !101

"for filter_zeroed.s0.y115.preheader.split.us":   ; preds = %"for filter_zeroed.s0.y115.preheader"
  br i1 %t2398, label %"for filter_zeroed.s0.y115.preheader.split.us.split.us", label %"for filter_zeroed.s0.y115.us.preheader"

"for filter_zeroed.s0.y115.us.preheader":         ; preds = %"for filter_zeroed.s0.y115.preheader.split.us"
  %4543 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %4544 = icmp ult i32 %4543, 7
  %unroll_iter = and i32 %4, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %"for filter_zeroed.s0.y115.us"

"for filter_zeroed.s0.y115.preheader.split.us.split.us": ; preds = %"for filter_zeroed.s0.y115.preheader.split.us"
  br i1 %t2399, label %"for filter_zeroed.s0.y115.us.us.us.preheader", label %"for filter_zeroed.s0.y115.us.us.preheader"

"for filter_zeroed.s0.y115.us.us.preheader":      ; preds = %"for filter_zeroed.s0.y115.preheader.split.us.split.us"
  %4545 = add i32 %4, -1
  %xtraiter2992 = and i32 %4, 7
  %4546 = icmp ult i32 %4545, 7
  %unroll_iter2995 = and i32 %4, -8
  %lcmp.mod2994.not = icmp eq i32 %xtraiter2992, 0
  br label %"for filter_zeroed.s0.y115.us.us"

"for filter_zeroed.s0.y115.us.us.us.preheader":   ; preds = %"for filter_zeroed.s0.y115.preheader.split.us.split.us"
  %4547 = add i32 %4, -1
  %xtraiter2997 = and i32 %4, 3
  %4548 = icmp ult i32 %4547, 3
  %unroll_iter3000 = and i32 %4, -4
  %lcmp.mod2999.not = icmp eq i32 %xtraiter2997, 0
  br label %"for filter_zeroed.s0.y115.us.us.us"

"for filter_zeroed.s0.y115.us.us.us":             ; preds = %"for filter_zeroed.s0.y115.us.us.us.preheader", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us"
  %filter_zeroed.s0.y117.us.us.us = phi i32 [ %4661, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us.us.preheader" ]
  %4549 = mul nsw i32 %filter_zeroed.s0.y117.us.us.us, %7
  %4550 = mul nsw i32 %filter_zeroed.s0.y117.us.us.us, %4
  br i1 %4548, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us.us.us.us"

"for filter_zeroed.s0.x118.us.us.us.us.us":       ; preds = %"for filter_zeroed.s0.y115.us.us.us", %"for filter_zeroed.s0.x118.us.us.us.us.us"
  %filter_zeroed.s0.x120.us.us.us.us.us = phi i32 [ %4638, %"for filter_zeroed.s0.x118.us.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us.us" ]
  %niter3001 = phi i32 [ %niter3001.nsub.3, %"for filter_zeroed.s0.x118.us.us.us.us.us" ], [ %unroll_iter3000, %"for filter_zeroed.s0.y115.us.us.us" ]
  %4551 = mul nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us, %5
  %4552 = add nsw i32 %4551, %4549
  %4553 = getelementptr inbounds i8, i8* %1, i32 %4552
  %4554 = bitcast i8* %4553 to <64 x i8>*
  %4555 = load <64 x i8>, <64 x i8>* %4554, align 1, !tbaa !102
  %4556 = zext <64 x i8> %4555 to <64 x i16>
  %4557 = bitcast <64 x i16> %4556 to <32 x i32>
  %4558 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4557, <32 x i32> %4541) #11
  %4559 = add nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us, %4550
  %4560 = shl nsw i32 %4559, 7
  %4561 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4560
  %4562 = bitcast i16* %4561 to <32 x i32>*
  store <32 x i32> %4558, <32 x i32>* %4562, align 128, !tbaa !105
  %4563 = getelementptr inbounds i8, i8* %4553, i32 64
  %4564 = bitcast i8* %4563 to <64 x i8>*
  %4565 = load <64 x i8>, <64 x i8>* %4564, align 1, !tbaa !102
  %4566 = zext <64 x i8> %4565 to <64 x i16>
  %4567 = bitcast <64 x i16> %4566 to <32 x i32>
  %4568 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4567, <32 x i32> %4541) #11
  %4569 = bitcast <32 x i32> %4568 to <64 x i16>
  %4570 = getelementptr inbounds i16, i16* %4561, i32 64
  %4571 = bitcast i16* %4570 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4569, <64 x i16>* nonnull %4571, i32 128, <64 x i1> %4542), !tbaa !105
  %4572 = or i32 %filter_zeroed.s0.x120.us.us.us.us.us, 1
  %4573 = mul nsw i32 %4572, %5
  %4574 = add nsw i32 %4573, %4549
  %4575 = getelementptr inbounds i8, i8* %1, i32 %4574
  %4576 = bitcast i8* %4575 to <64 x i8>*
  %4577 = load <64 x i8>, <64 x i8>* %4576, align 1, !tbaa !102
  %4578 = zext <64 x i8> %4577 to <64 x i16>
  %4579 = bitcast <64 x i16> %4578 to <32 x i32>
  %4580 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4579, <32 x i32> %4541) #11
  %4581 = add nsw i32 %4572, %4550
  %4582 = shl nsw i32 %4581, 7
  %4583 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4582
  %4584 = bitcast i16* %4583 to <32 x i32>*
  store <32 x i32> %4580, <32 x i32>* %4584, align 128, !tbaa !105
  %4585 = getelementptr inbounds i8, i8* %4575, i32 64
  %4586 = bitcast i8* %4585 to <64 x i8>*
  %4587 = load <64 x i8>, <64 x i8>* %4586, align 1, !tbaa !102
  %4588 = zext <64 x i8> %4587 to <64 x i16>
  %4589 = bitcast <64 x i16> %4588 to <32 x i32>
  %4590 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4589, <32 x i32> %4541) #11
  %4591 = bitcast <32 x i32> %4590 to <64 x i16>
  %4592 = getelementptr inbounds i16, i16* %4583, i32 64
  %4593 = bitcast i16* %4592 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4591, <64 x i16>* nonnull %4593, i32 128, <64 x i1> %4542), !tbaa !105
  %4594 = or i32 %filter_zeroed.s0.x120.us.us.us.us.us, 2
  %4595 = mul nsw i32 %4594, %5
  %4596 = add nsw i32 %4595, %4549
  %4597 = getelementptr inbounds i8, i8* %1, i32 %4596
  %4598 = bitcast i8* %4597 to <64 x i8>*
  %4599 = load <64 x i8>, <64 x i8>* %4598, align 1, !tbaa !102
  %4600 = zext <64 x i8> %4599 to <64 x i16>
  %4601 = bitcast <64 x i16> %4600 to <32 x i32>
  %4602 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4601, <32 x i32> %4541) #11
  %4603 = add nsw i32 %4594, %4550
  %4604 = shl nsw i32 %4603, 7
  %4605 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4604
  %4606 = bitcast i16* %4605 to <32 x i32>*
  store <32 x i32> %4602, <32 x i32>* %4606, align 128, !tbaa !105
  %4607 = getelementptr inbounds i8, i8* %4597, i32 64
  %4608 = bitcast i8* %4607 to <64 x i8>*
  %4609 = load <64 x i8>, <64 x i8>* %4608, align 1, !tbaa !102
  %4610 = zext <64 x i8> %4609 to <64 x i16>
  %4611 = bitcast <64 x i16> %4610 to <32 x i32>
  %4612 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4611, <32 x i32> %4541) #11
  %4613 = bitcast <32 x i32> %4612 to <64 x i16>
  %4614 = getelementptr inbounds i16, i16* %4605, i32 64
  %4615 = bitcast i16* %4614 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4613, <64 x i16>* nonnull %4615, i32 128, <64 x i1> %4542), !tbaa !105
  %4616 = or i32 %filter_zeroed.s0.x120.us.us.us.us.us, 3
  %4617 = mul nsw i32 %4616, %5
  %4618 = add nsw i32 %4617, %4549
  %4619 = getelementptr inbounds i8, i8* %1, i32 %4618
  %4620 = bitcast i8* %4619 to <64 x i8>*
  %4621 = load <64 x i8>, <64 x i8>* %4620, align 1, !tbaa !102
  %4622 = zext <64 x i8> %4621 to <64 x i16>
  %4623 = bitcast <64 x i16> %4622 to <32 x i32>
  %4624 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4623, <32 x i32> %4541) #11
  %4625 = add nsw i32 %4616, %4550
  %4626 = shl nsw i32 %4625, 7
  %4627 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4626
  %4628 = bitcast i16* %4627 to <32 x i32>*
  store <32 x i32> %4624, <32 x i32>* %4628, align 128, !tbaa !105
  %4629 = getelementptr inbounds i8, i8* %4619, i32 64
  %4630 = bitcast i8* %4629 to <64 x i8>*
  %4631 = load <64 x i8>, <64 x i8>* %4630, align 1, !tbaa !102
  %4632 = zext <64 x i8> %4631 to <64 x i16>
  %4633 = bitcast <64 x i16> %4632 to <32 x i32>
  %4634 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4633, <32 x i32> %4541) #11
  %4635 = bitcast <32 x i32> %4634 to <64 x i16>
  %4636 = getelementptr inbounds i16, i16* %4627, i32 64
  %4637 = bitcast i16* %4636 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4635, <64 x i16>* nonnull %4637, i32 128, <64 x i1> %4542), !tbaa !105
  %4638 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us, 4
  %niter3001.nsub.3 = add i32 %niter3001, -4
  %niter3001.ncmp.3 = icmp eq i32 %niter3001.nsub.3, 0
  br i1 %niter3001.ncmp.3, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us.us.us.us"

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x118.us.us.us.us.us", %"for filter_zeroed.s0.y115.us.us.us"
  %filter_zeroed.s0.x120.us.us.us.us.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y115.us.us.us" ], [ %4638, %"for filter_zeroed.s0.x118.us.us.us.us.us" ]
  br i1 %lcmp.mod2999.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x118.us.us.us.us.us.epil"

"for filter_zeroed.s0.x118.us.us.us.us.us.epil":  ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa", %"for filter_zeroed.s0.x118.us.us.us.us.us.epil"
  %filter_zeroed.s0.x120.us.us.us.us.us.epil = phi i32 [ %4660, %"for filter_zeroed.s0.x118.us.us.us.us.us.epil" ], [ %filter_zeroed.s0.x120.us.us.us.us.us.unr, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %epil.iter2998 = phi i32 [ %epil.iter2998.sub, %"for filter_zeroed.s0.x118.us.us.us.us.us.epil" ], [ %xtraiter2997, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %4639 = mul nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us.epil, %5
  %4640 = add nsw i32 %4639, %4549
  %4641 = getelementptr inbounds i8, i8* %1, i32 %4640
  %4642 = bitcast i8* %4641 to <64 x i8>*
  %4643 = load <64 x i8>, <64 x i8>* %4642, align 1, !tbaa !102
  %4644 = zext <64 x i8> %4643 to <64 x i16>
  %4645 = bitcast <64 x i16> %4644 to <32 x i32>
  %4646 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4645, <32 x i32> %4541) #11
  %4647 = add nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us.epil, %4550
  %4648 = shl nsw i32 %4647, 7
  %4649 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4648
  %4650 = bitcast i16* %4649 to <32 x i32>*
  store <32 x i32> %4646, <32 x i32>* %4650, align 128, !tbaa !105
  %4651 = getelementptr inbounds i8, i8* %4641, i32 64
  %4652 = bitcast i8* %4651 to <64 x i8>*
  %4653 = load <64 x i8>, <64 x i8>* %4652, align 1, !tbaa !102
  %4654 = zext <64 x i8> %4653 to <64 x i16>
  %4655 = bitcast <64 x i16> %4654 to <32 x i32>
  %4656 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4655, <32 x i32> %4541) #11
  %4657 = bitcast <32 x i32> %4656 to <64 x i16>
  %4658 = getelementptr inbounds i16, i16* %4649, i32 64
  %4659 = bitcast i16* %4658 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4657, <64 x i16>* nonnull %4659, i32 128, <64 x i1> %4542), !tbaa !105
  %4660 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us.us.us.us.epil, 1
  %epil.iter2998.sub = add i32 %epil.iter2998, -1
  %epil.iter2998.cmp.not = icmp eq i32 %epil.iter2998.sub, 0
  br i1 %epil.iter2998.cmp.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x118.us.us.us.us.us.epil", !llvm.loop !222

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us": ; preds = %"for filter_zeroed.s0.x118.us.us.us.us.us.epil", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us.unr-lcssa"
  %4661 = add nuw nsw i32 %filter_zeroed.s0.y117.us.us.us, 1
  %.not1830.us.us.us = icmp eq i32 %4661, %6
  br i1 %.not1830.us.us.us, label %"produce sum_filter132", label %"for filter_zeroed.s0.y115.us.us.us"

"for filter_zeroed.s0.y115.us.us":                ; preds = %"for filter_zeroed.s0.y115.us.us.preheader", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us"
  %filter_zeroed.s0.y117.us.us = phi i32 [ %4781, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us.preheader" ]
  %4662 = mul nsw i32 %filter_zeroed.s0.y117.us.us, %7
  %4663 = mul nsw i32 %filter_zeroed.s0.y117.us.us, %4
  br i1 %4546, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us2158.us"

"for filter_zeroed.s0.x118.us.us2158.us":         ; preds = %"for filter_zeroed.s0.y115.us.us", %"for filter_zeroed.s0.x118.us.us2158.us"
  %filter_zeroed.s0.x120.us.us2159.us = phi i32 [ %4767, %"for filter_zeroed.s0.x118.us.us2158.us" ], [ 0, %"for filter_zeroed.s0.y115.us.us" ]
  %niter2996 = phi i32 [ %niter2996.nsub.7, %"for filter_zeroed.s0.x118.us.us2158.us" ], [ %unroll_iter2995, %"for filter_zeroed.s0.y115.us.us" ]
  %4664 = mul nsw i32 %filter_zeroed.s0.x120.us.us2159.us, %5
  %4665 = add nsw i32 %4664, %4662
  %4666 = getelementptr inbounds i8, i8* %1, i32 %4665
  %4667 = bitcast i8* %4666 to <64 x i8>*
  %4668 = load <64 x i8>, <64 x i8>* %4667, align 1, !tbaa !102
  %4669 = zext <64 x i8> %4668 to <64 x i16>
  %4670 = bitcast <64 x i16> %4669 to <32 x i32>
  %4671 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4670, <32 x i32> %4541) #11
  %4672 = add nsw i32 %filter_zeroed.s0.x120.us.us2159.us, %4663
  %4673 = shl nsw i32 %4672, 7
  %4674 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4673
  %4675 = bitcast i16* %4674 to <32 x i32>*
  store <32 x i32> %4671, <32 x i32>* %4675, align 128, !tbaa !105
  %4676 = or i32 %filter_zeroed.s0.x120.us.us2159.us, 1
  %4677 = mul nsw i32 %4676, %5
  %4678 = add nsw i32 %4677, %4662
  %4679 = getelementptr inbounds i8, i8* %1, i32 %4678
  %4680 = bitcast i8* %4679 to <64 x i8>*
  %4681 = load <64 x i8>, <64 x i8>* %4680, align 1, !tbaa !102
  %4682 = zext <64 x i8> %4681 to <64 x i16>
  %4683 = bitcast <64 x i16> %4682 to <32 x i32>
  %4684 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4683, <32 x i32> %4541) #11
  %4685 = add nsw i32 %4676, %4663
  %4686 = shl nsw i32 %4685, 7
  %4687 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4686
  %4688 = bitcast i16* %4687 to <32 x i32>*
  store <32 x i32> %4684, <32 x i32>* %4688, align 128, !tbaa !105
  %4689 = or i32 %filter_zeroed.s0.x120.us.us2159.us, 2
  %4690 = mul nsw i32 %4689, %5
  %4691 = add nsw i32 %4690, %4662
  %4692 = getelementptr inbounds i8, i8* %1, i32 %4691
  %4693 = bitcast i8* %4692 to <64 x i8>*
  %4694 = load <64 x i8>, <64 x i8>* %4693, align 1, !tbaa !102
  %4695 = zext <64 x i8> %4694 to <64 x i16>
  %4696 = bitcast <64 x i16> %4695 to <32 x i32>
  %4697 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4696, <32 x i32> %4541) #11
  %4698 = add nsw i32 %4689, %4663
  %4699 = shl nsw i32 %4698, 7
  %4700 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4699
  %4701 = bitcast i16* %4700 to <32 x i32>*
  store <32 x i32> %4697, <32 x i32>* %4701, align 128, !tbaa !105
  %4702 = or i32 %filter_zeroed.s0.x120.us.us2159.us, 3
  %4703 = mul nsw i32 %4702, %5
  %4704 = add nsw i32 %4703, %4662
  %4705 = getelementptr inbounds i8, i8* %1, i32 %4704
  %4706 = bitcast i8* %4705 to <64 x i8>*
  %4707 = load <64 x i8>, <64 x i8>* %4706, align 1, !tbaa !102
  %4708 = zext <64 x i8> %4707 to <64 x i16>
  %4709 = bitcast <64 x i16> %4708 to <32 x i32>
  %4710 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4709, <32 x i32> %4541) #11
  %4711 = add nsw i32 %4702, %4663
  %4712 = shl nsw i32 %4711, 7
  %4713 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4712
  %4714 = bitcast i16* %4713 to <32 x i32>*
  store <32 x i32> %4710, <32 x i32>* %4714, align 128, !tbaa !105
  %4715 = or i32 %filter_zeroed.s0.x120.us.us2159.us, 4
  %4716 = mul nsw i32 %4715, %5
  %4717 = add nsw i32 %4716, %4662
  %4718 = getelementptr inbounds i8, i8* %1, i32 %4717
  %4719 = bitcast i8* %4718 to <64 x i8>*
  %4720 = load <64 x i8>, <64 x i8>* %4719, align 1, !tbaa !102
  %4721 = zext <64 x i8> %4720 to <64 x i16>
  %4722 = bitcast <64 x i16> %4721 to <32 x i32>
  %4723 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4722, <32 x i32> %4541) #11
  %4724 = add nsw i32 %4715, %4663
  %4725 = shl nsw i32 %4724, 7
  %4726 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4725
  %4727 = bitcast i16* %4726 to <32 x i32>*
  store <32 x i32> %4723, <32 x i32>* %4727, align 128, !tbaa !105
  %4728 = or i32 %filter_zeroed.s0.x120.us.us2159.us, 5
  %4729 = mul nsw i32 %4728, %5
  %4730 = add nsw i32 %4729, %4662
  %4731 = getelementptr inbounds i8, i8* %1, i32 %4730
  %4732 = bitcast i8* %4731 to <64 x i8>*
  %4733 = load <64 x i8>, <64 x i8>* %4732, align 1, !tbaa !102
  %4734 = zext <64 x i8> %4733 to <64 x i16>
  %4735 = bitcast <64 x i16> %4734 to <32 x i32>
  %4736 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4735, <32 x i32> %4541) #11
  %4737 = add nsw i32 %4728, %4663
  %4738 = shl nsw i32 %4737, 7
  %4739 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4738
  %4740 = bitcast i16* %4739 to <32 x i32>*
  store <32 x i32> %4736, <32 x i32>* %4740, align 128, !tbaa !105
  %4741 = or i32 %filter_zeroed.s0.x120.us.us2159.us, 6
  %4742 = mul nsw i32 %4741, %5
  %4743 = add nsw i32 %4742, %4662
  %4744 = getelementptr inbounds i8, i8* %1, i32 %4743
  %4745 = bitcast i8* %4744 to <64 x i8>*
  %4746 = load <64 x i8>, <64 x i8>* %4745, align 1, !tbaa !102
  %4747 = zext <64 x i8> %4746 to <64 x i16>
  %4748 = bitcast <64 x i16> %4747 to <32 x i32>
  %4749 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4748, <32 x i32> %4541) #11
  %4750 = add nsw i32 %4741, %4663
  %4751 = shl nsw i32 %4750, 7
  %4752 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4751
  %4753 = bitcast i16* %4752 to <32 x i32>*
  store <32 x i32> %4749, <32 x i32>* %4753, align 128, !tbaa !105
  %4754 = or i32 %filter_zeroed.s0.x120.us.us2159.us, 7
  %4755 = mul nsw i32 %4754, %5
  %4756 = add nsw i32 %4755, %4662
  %4757 = getelementptr inbounds i8, i8* %1, i32 %4756
  %4758 = bitcast i8* %4757 to <64 x i8>*
  %4759 = load <64 x i8>, <64 x i8>* %4758, align 1, !tbaa !102
  %4760 = zext <64 x i8> %4759 to <64 x i16>
  %4761 = bitcast <64 x i16> %4760 to <32 x i32>
  %4762 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4761, <32 x i32> %4541) #11
  %4763 = add nsw i32 %4754, %4663
  %4764 = shl nsw i32 %4763, 7
  %4765 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4764
  %4766 = bitcast i16* %4765 to <32 x i32>*
  store <32 x i32> %4762, <32 x i32>* %4766, align 128, !tbaa !105
  %4767 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us2159.us, 8
  %niter2996.nsub.7 = add i32 %niter2996, -8
  %niter2996.ncmp.7 = icmp eq i32 %niter2996.nsub.7, 0
  br i1 %niter2996.ncmp.7, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us.unr-lcssa", label %"for filter_zeroed.s0.x118.us.us2158.us"

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x118.us.us2158.us", %"for filter_zeroed.s0.y115.us.us"
  %filter_zeroed.s0.x120.us.us2159.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y115.us.us" ], [ %4767, %"for filter_zeroed.s0.x118.us.us2158.us" ]
  br i1 %lcmp.mod2994.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us", label %"for filter_zeroed.s0.x118.us.us2158.us.epil"

"for filter_zeroed.s0.x118.us.us2158.us.epil":    ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us.unr-lcssa", %"for filter_zeroed.s0.x118.us.us2158.us.epil"
  %filter_zeroed.s0.x120.us.us2159.us.epil = phi i32 [ %4780, %"for filter_zeroed.s0.x118.us.us2158.us.epil" ], [ %filter_zeroed.s0.x120.us.us2159.us.unr, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us.unr-lcssa" ]
  %epil.iter2993 = phi i32 [ %epil.iter2993.sub, %"for filter_zeroed.s0.x118.us.us2158.us.epil" ], [ %xtraiter2992, %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us.unr-lcssa" ]
  %4768 = mul nsw i32 %filter_zeroed.s0.x120.us.us2159.us.epil, %5
  %4769 = add nsw i32 %4768, %4662
  %4770 = getelementptr inbounds i8, i8* %1, i32 %4769
  %4771 = bitcast i8* %4770 to <64 x i8>*
  %4772 = load <64 x i8>, <64 x i8>* %4771, align 1, !tbaa !102
  %4773 = zext <64 x i8> %4772 to <64 x i16>
  %4774 = bitcast <64 x i16> %4773 to <32 x i32>
  %4775 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4774, <32 x i32> %4541) #11
  %4776 = add nsw i32 %filter_zeroed.s0.x120.us.us2159.us.epil, %4663
  %4777 = shl nsw i32 %4776, 7
  %4778 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4777
  %4779 = bitcast i16* %4778 to <32 x i32>*
  store <32 x i32> %4775, <32 x i32>* %4779, align 128, !tbaa !105
  %4780 = add nuw nsw i32 %filter_zeroed.s0.x120.us.us2159.us.epil, 1
  %epil.iter2993.sub = add i32 %epil.iter2993, -1
  %epil.iter2993.cmp.not = icmp eq i32 %epil.iter2993.sub, 0
  br i1 %epil.iter2993.cmp.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us", label %"for filter_zeroed.s0.x118.us.us2158.us.epil", !llvm.loop !223

"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us": ; preds = %"for filter_zeroed.s0.x118.us.us2158.us.epil", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us.unr-lcssa"
  %4781 = add nuw nsw i32 %filter_zeroed.s0.y117.us.us, 1
  %.not1830.us.us = icmp eq i32 %4781, %6
  br i1 %.not1830.us.us, label %"produce sum_filter132", label %"for filter_zeroed.s0.y115.us.us"

"for filter_zeroed.s0.y115.us":                   ; preds = %"for filter_zeroed.s0.y115.us.preheader", %"end for filter_zeroed.s0.x119.loopexit.split.us2156"
  %filter_zeroed.s0.y117.us = phi i32 [ %4910, %"end for filter_zeroed.s0.x119.loopexit.split.us2156" ], [ 0, %"for filter_zeroed.s0.y115.us.preheader" ]
  %4782 = mul nsw i32 %filter_zeroed.s0.y117.us, %7
  %4783 = mul nsw i32 %filter_zeroed.s0.y117.us, %4
  br i1 %4544, label %"end for filter_zeroed.s0.x119.loopexit.split.us2156.unr-lcssa", label %"for filter_zeroed.s0.x118.us2153"

"for filter_zeroed.s0.x118.us2153":               ; preds = %"for filter_zeroed.s0.y115.us", %"for filter_zeroed.s0.x118.us2153"
  %filter_zeroed.s0.x120.us2154 = phi i32 [ %4895, %"for filter_zeroed.s0.x118.us2153" ], [ 0, %"for filter_zeroed.s0.y115.us" ]
  %niter = phi i32 [ %niter.nsub.7, %"for filter_zeroed.s0.x118.us2153" ], [ %unroll_iter, %"for filter_zeroed.s0.y115.us" ]
  %4784 = mul nsw i32 %filter_zeroed.s0.x120.us2154, %5
  %4785 = add nsw i32 %4784, %4782
  %4786 = getelementptr inbounds i8, i8* %1, i32 %4785
  %4787 = bitcast i8* %4786 to <64 x i8>*
  %4788 = load <64 x i8>, <64 x i8>* %4787, align 1, !tbaa !102
  %4789 = zext <64 x i8> %4788 to <64 x i16>
  %4790 = bitcast <64 x i16> %4789 to <32 x i32>
  %4791 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4790, <32 x i32> %4541) #11
  %4792 = bitcast <32 x i32> %4791 to <64 x i16>
  %4793 = add nsw i32 %filter_zeroed.s0.x120.us2154, %4783
  %4794 = shl nsw i32 %4793, 7
  %4795 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4794
  %4796 = bitcast i16* %4795 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4792, <64 x i16>* %4796, i32 128, <64 x i1> %4537), !tbaa !105
  %4797 = or i32 %filter_zeroed.s0.x120.us2154, 1
  %4798 = mul nsw i32 %4797, %5
  %4799 = add nsw i32 %4798, %4782
  %4800 = getelementptr inbounds i8, i8* %1, i32 %4799
  %4801 = bitcast i8* %4800 to <64 x i8>*
  %4802 = load <64 x i8>, <64 x i8>* %4801, align 1, !tbaa !102
  %4803 = zext <64 x i8> %4802 to <64 x i16>
  %4804 = bitcast <64 x i16> %4803 to <32 x i32>
  %4805 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4804, <32 x i32> %4541) #11
  %4806 = bitcast <32 x i32> %4805 to <64 x i16>
  %4807 = add nsw i32 %4797, %4783
  %4808 = shl nsw i32 %4807, 7
  %4809 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4808
  %4810 = bitcast i16* %4809 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4806, <64 x i16>* %4810, i32 128, <64 x i1> %4537), !tbaa !105
  %4811 = or i32 %filter_zeroed.s0.x120.us2154, 2
  %4812 = mul nsw i32 %4811, %5
  %4813 = add nsw i32 %4812, %4782
  %4814 = getelementptr inbounds i8, i8* %1, i32 %4813
  %4815 = bitcast i8* %4814 to <64 x i8>*
  %4816 = load <64 x i8>, <64 x i8>* %4815, align 1, !tbaa !102
  %4817 = zext <64 x i8> %4816 to <64 x i16>
  %4818 = bitcast <64 x i16> %4817 to <32 x i32>
  %4819 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4818, <32 x i32> %4541) #11
  %4820 = bitcast <32 x i32> %4819 to <64 x i16>
  %4821 = add nsw i32 %4811, %4783
  %4822 = shl nsw i32 %4821, 7
  %4823 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4822
  %4824 = bitcast i16* %4823 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4820, <64 x i16>* %4824, i32 128, <64 x i1> %4537), !tbaa !105
  %4825 = or i32 %filter_zeroed.s0.x120.us2154, 3
  %4826 = mul nsw i32 %4825, %5
  %4827 = add nsw i32 %4826, %4782
  %4828 = getelementptr inbounds i8, i8* %1, i32 %4827
  %4829 = bitcast i8* %4828 to <64 x i8>*
  %4830 = load <64 x i8>, <64 x i8>* %4829, align 1, !tbaa !102
  %4831 = zext <64 x i8> %4830 to <64 x i16>
  %4832 = bitcast <64 x i16> %4831 to <32 x i32>
  %4833 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4832, <32 x i32> %4541) #11
  %4834 = bitcast <32 x i32> %4833 to <64 x i16>
  %4835 = add nsw i32 %4825, %4783
  %4836 = shl nsw i32 %4835, 7
  %4837 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4836
  %4838 = bitcast i16* %4837 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4834, <64 x i16>* %4838, i32 128, <64 x i1> %4537), !tbaa !105
  %4839 = or i32 %filter_zeroed.s0.x120.us2154, 4
  %4840 = mul nsw i32 %4839, %5
  %4841 = add nsw i32 %4840, %4782
  %4842 = getelementptr inbounds i8, i8* %1, i32 %4841
  %4843 = bitcast i8* %4842 to <64 x i8>*
  %4844 = load <64 x i8>, <64 x i8>* %4843, align 1, !tbaa !102
  %4845 = zext <64 x i8> %4844 to <64 x i16>
  %4846 = bitcast <64 x i16> %4845 to <32 x i32>
  %4847 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4846, <32 x i32> %4541) #11
  %4848 = bitcast <32 x i32> %4847 to <64 x i16>
  %4849 = add nsw i32 %4839, %4783
  %4850 = shl nsw i32 %4849, 7
  %4851 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4850
  %4852 = bitcast i16* %4851 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4848, <64 x i16>* %4852, i32 128, <64 x i1> %4537), !tbaa !105
  %4853 = or i32 %filter_zeroed.s0.x120.us2154, 5
  %4854 = mul nsw i32 %4853, %5
  %4855 = add nsw i32 %4854, %4782
  %4856 = getelementptr inbounds i8, i8* %1, i32 %4855
  %4857 = bitcast i8* %4856 to <64 x i8>*
  %4858 = load <64 x i8>, <64 x i8>* %4857, align 1, !tbaa !102
  %4859 = zext <64 x i8> %4858 to <64 x i16>
  %4860 = bitcast <64 x i16> %4859 to <32 x i32>
  %4861 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4860, <32 x i32> %4541) #11
  %4862 = bitcast <32 x i32> %4861 to <64 x i16>
  %4863 = add nsw i32 %4853, %4783
  %4864 = shl nsw i32 %4863, 7
  %4865 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4864
  %4866 = bitcast i16* %4865 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4862, <64 x i16>* %4866, i32 128, <64 x i1> %4537), !tbaa !105
  %4867 = or i32 %filter_zeroed.s0.x120.us2154, 6
  %4868 = mul nsw i32 %4867, %5
  %4869 = add nsw i32 %4868, %4782
  %4870 = getelementptr inbounds i8, i8* %1, i32 %4869
  %4871 = bitcast i8* %4870 to <64 x i8>*
  %4872 = load <64 x i8>, <64 x i8>* %4871, align 1, !tbaa !102
  %4873 = zext <64 x i8> %4872 to <64 x i16>
  %4874 = bitcast <64 x i16> %4873 to <32 x i32>
  %4875 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4874, <32 x i32> %4541) #11
  %4876 = bitcast <32 x i32> %4875 to <64 x i16>
  %4877 = add nsw i32 %4867, %4783
  %4878 = shl nsw i32 %4877, 7
  %4879 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4878
  %4880 = bitcast i16* %4879 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4876, <64 x i16>* %4880, i32 128, <64 x i1> %4537), !tbaa !105
  %4881 = or i32 %filter_zeroed.s0.x120.us2154, 7
  %4882 = mul nsw i32 %4881, %5
  %4883 = add nsw i32 %4882, %4782
  %4884 = getelementptr inbounds i8, i8* %1, i32 %4883
  %4885 = bitcast i8* %4884 to <64 x i8>*
  %4886 = load <64 x i8>, <64 x i8>* %4885, align 1, !tbaa !102
  %4887 = zext <64 x i8> %4886 to <64 x i16>
  %4888 = bitcast <64 x i16> %4887 to <32 x i32>
  %4889 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4888, <32 x i32> %4541) #11
  %4890 = bitcast <32 x i32> %4889 to <64 x i16>
  %4891 = add nsw i32 %4881, %4783
  %4892 = shl nsw i32 %4891, 7
  %4893 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4892
  %4894 = bitcast i16* %4893 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4890, <64 x i16>* %4894, i32 128, <64 x i1> %4537), !tbaa !105
  %4895 = add nuw nsw i32 %filter_zeroed.s0.x120.us2154, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for filter_zeroed.s0.x119.loopexit.split.us2156.unr-lcssa", label %"for filter_zeroed.s0.x118.us2153"

"end for filter_zeroed.s0.x119.loopexit.split.us2156.unr-lcssa": ; preds = %"for filter_zeroed.s0.x118.us2153", %"for filter_zeroed.s0.y115.us"
  %filter_zeroed.s0.x120.us2154.unr = phi i32 [ 0, %"for filter_zeroed.s0.y115.us" ], [ %4895, %"for filter_zeroed.s0.x118.us2153" ]
  br i1 %lcmp.mod.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us2156", label %"for filter_zeroed.s0.x118.us2153.epil"

"for filter_zeroed.s0.x118.us2153.epil":          ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us2156.unr-lcssa", %"for filter_zeroed.s0.x118.us2153.epil"
  %filter_zeroed.s0.x120.us2154.epil = phi i32 [ %4909, %"for filter_zeroed.s0.x118.us2153.epil" ], [ %filter_zeroed.s0.x120.us2154.unr, %"end for filter_zeroed.s0.x119.loopexit.split.us2156.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for filter_zeroed.s0.x118.us2153.epil" ], [ %xtraiter, %"end for filter_zeroed.s0.x119.loopexit.split.us2156.unr-lcssa" ]
  %4896 = mul nsw i32 %filter_zeroed.s0.x120.us2154.epil, %5
  %4897 = add nsw i32 %4896, %4782
  %4898 = getelementptr inbounds i8, i8* %1, i32 %4897
  %4899 = bitcast i8* %4898 to <64 x i8>*
  %4900 = load <64 x i8>, <64 x i8>* %4899, align 1, !tbaa !102
  %4901 = zext <64 x i8> %4900 to <64 x i16>
  %4902 = bitcast <64 x i16> %4901 to <32 x i32>
  %4903 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4902, <32 x i32> %4541) #11
  %4904 = bitcast <32 x i32> %4903 to <64 x i16>
  %4905 = add nsw i32 %filter_zeroed.s0.x120.us2154.epil, %4783
  %4906 = shl nsw i32 %4905, 7
  %4907 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4906
  %4908 = bitcast i16* %4907 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4904, <64 x i16>* %4908, i32 128, <64 x i1> %4537), !tbaa !105
  %4909 = add nuw nsw i32 %filter_zeroed.s0.x120.us2154.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for filter_zeroed.s0.x119.loopexit.split.us2156", label %"for filter_zeroed.s0.x118.us2153.epil", !llvm.loop !224

"end for filter_zeroed.s0.x119.loopexit.split.us2156": ; preds = %"for filter_zeroed.s0.x118.us2153.epil", %"end for filter_zeroed.s0.x119.loopexit.split.us2156.unr-lcssa"
  %4910 = add nuw nsw i32 %filter_zeroed.s0.y117.us, 1
  %.not1830.us = icmp eq i32 %4910, %6
  br i1 %.not1830.us, label %"produce sum_filter132", label %"for filter_zeroed.s0.y115.us"

"produce sum_filter132":                          ; preds = %"end for filter_zeroed.s0.x119.loopexit.split.us2156", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us2161.us", %"end for filter_zeroed.s0.x119.loopexit.split.us.split.us.us.us.us", %"produce filter_zeroed114", %"for filter_zeroed.s0.y115.preheader"
  %4911 = icmp sgt <64 x i32> %4536, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4912 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %4913 = bitcast [128 x i32]* %sum_filter1817 to <32 x i32>*
  %4914 = shufflevector <64 x i1> %4911, <64 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4912, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  %4915 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  %4916 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 32
  %4917 = bitcast i32* %4916 to <32 x i32>*
  %4918 = shufflevector <64 x i1> %4911, <64 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4915, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  %4919 = icmp sgt <64 x i32> %4536, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4920 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 64
  %4921 = bitcast i32* %4920 to <32 x i32>*
  %4922 = shufflevector <64 x i1> %4919, <64 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4912, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  %4923 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter1817, i32 0, i32 96
  %4924 = bitcast i32* %4923 to <32 x i32>*
  %4925 = shufflevector <64 x i1> %4919, <64 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4915, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  %brmerge2838.demorgan = and i1 %4525, %4524
  br i1 %brmerge2838.demorgan, label %"for sum_filter.s1.r19$y133.preheader.split.us", label %"consume sum_filter163", !prof !225

"for sum_filter.s1.r19$y133.preheader.split.us":  ; preds = %"produce sum_filter132"
  %4926 = insertelement <128 x i32> undef, i32 %3, i32 0
  %4927 = shufflevector <128 x i32> %4926, <128 x i32> undef, <128 x i32> zeroinitializer
  %t2132 = icmp sgt <128 x i32> %4927, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4928 = zext <128 x i1> %t2132 to <128 x i8>
  %4929 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %4928) #9
  %4930 = and i8 %4929, 1
  %t2486.not.us = icmp eq i8 %4930, 0
  br i1 %t2486.not.us, label %"for sum_filter.s1.r19$y133.preheader.split.us.split.us", label %"for sum_filter.s1.r19$y133.us.preheader"

"for sum_filter.s1.r19$y133.us.preheader":        ; preds = %"for sum_filter.s1.r19$y133.preheader.split.us"
  %xtraiter3002 = and i32 %4, 1
  %4931 = icmp eq i32 %4, 1
  %unroll_iter3004 = and i32 %4, -2
  %lcmp.mod3003.not = icmp eq i32 %xtraiter3002, 0
  br label %"for sum_filter.s1.r19$y133.us"

"for sum_filter.s1.r19$y133.preheader.split.us.split.us": ; preds = %"for sum_filter.s1.r19$y133.preheader.split.us"
  %4932 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4912) #11
  %4933 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4932, <64 x i32> zeroinitializer) #11
  %4934 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4933)
  %4935 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4933)
  %4936 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4915) #11
  %4937 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4936, <64 x i32> zeroinitializer) #11
  %4938 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4937)
  %4939 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4937)
  %4940 = add i32 %4, -1
  %xtraiter3006 = and i32 %4, 7
  %4941 = icmp ult i32 %4940, 7
  %unroll_iter3009 = and i32 %4, -8
  %lcmp.mod3008.not = icmp eq i32 %xtraiter3006, 0
  br label %"for sum_filter.s1.r19$y133.us.us"

"for sum_filter.s1.r19$y133.us.us":               ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", %"for sum_filter.s1.r19$y133.preheader.split.us.split.us"
  %"sum_filter.s1.r19$y135.us.us" = phi i32 [ %4942, %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us" ], [ 0, %"for sum_filter.s1.r19$y133.preheader.split.us.split.us" ]
  br i1 %4941, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x136.us.us.us"

"for sum_filter.s1.r19$x136.us.us.us":            ; preds = %"for sum_filter.s1.r19$y133.us.us", %"for sum_filter.s1.r19$x136.us.us.us"
  %niter3010 = phi i32 [ %niter3010.nsub.7, %"for sum_filter.s1.r19$x136.us.us.us" ], [ %unroll_iter3009, %"for sum_filter.s1.r19$y133.us.us" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  %niter3010.nsub.7 = add i32 %niter3010, -8
  %niter3010.ncmp.7 = icmp eq i32 %niter3010.nsub.7, 0
  br i1 %niter3010.ncmp.7, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x136.us.us.us"

"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x136.us.us.us", %"for sum_filter.s1.r19$y133.us.us"
  br i1 %lcmp.mod3008.not, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x136.us.us.us.epil"

"for sum_filter.s1.r19$x136.us.us.us.epil":       ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa", %"for sum_filter.s1.r19$x136.us.us.us.epil"
  %epil.iter3007 = phi i32 [ %epil.iter3007.sub, %"for sum_filter.s1.r19$x136.us.us.us.epil" ], [ %xtraiter3006, %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4934, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4939, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  %epil.iter3007.sub = add i32 %epil.iter3007, -1
  %epil.iter3007.cmp.not = icmp eq i32 %epil.iter3007.sub, 0
  br i1 %epil.iter3007.cmp.not, label %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x136.us.us.us.epil", !llvm.loop !226

"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us": ; preds = %"for sum_filter.s1.r19$x136.us.us.us.epil", %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us.unr-lcssa"
  %4942 = add nuw nsw i32 %"sum_filter.s1.r19$y135.us.us", 1
  %.not1828.us.us = icmp eq i32 %4942, %6
  br i1 %.not1828.us.us, label %"consume sum_filter163", label %"for sum_filter.s1.r19$y133.us.us"

"for sum_filter.s1.r19$y133.us":                  ; preds = %"for sum_filter.s1.r19$y133.us.preheader", %"end for sum_filter.s1.r19$x137.loopexit.split.us2166"
  %"sum_filter.s1.r19$y135.us" = phi i32 [ %5045, %"end for sum_filter.s1.r19$x137.loopexit.split.us2166" ], [ 0, %"for sum_filter.s1.r19$y133.us.preheader" ]
  %4943 = mul nsw i32 %"sum_filter.s1.r19$y135.us", %4
  br i1 %4931, label %"end for sum_filter.s1.r19$x137.loopexit.split.us2166.unr-lcssa", label %"for sum_filter.s1.r19$x136.us2163"

"for sum_filter.s1.r19$x136.us2163":              ; preds = %"for sum_filter.s1.r19$y133.us", %"for sum_filter.s1.r19$x136.us2163"
  %"sum_filter.s1.r19$x138.us2164" = phi i32 [ %5011, %"for sum_filter.s1.r19$x136.us2163" ], [ 0, %"for sum_filter.s1.r19$y133.us" ]
  %niter3005 = phi i32 [ %niter3005.nsub.1, %"for sum_filter.s1.r19$x136.us2163" ], [ %unroll_iter3004, %"for sum_filter.s1.r19$y133.us" ]
  %4944 = load <32 x i32>, <32 x i32>* %4913, align 128, !tbaa !111
  %4945 = load <32 x i32>, <32 x i32>* %4917, align 128, !tbaa !119
  %4946 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4945, <32 x i32> %4944)
  %4947 = shufflevector <64 x i32> %4946, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4948 = bitcast <128 x i32> %4947 to <64 x i64>
  %4949 = shufflevector <64 x i64> %4948, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4950 = bitcast <32 x i64> %4949 to <64 x i32>
  %4951 = add nsw i32 %"sum_filter.s1.r19$x138.us2164", %4943
  %4952 = shl nsw i32 %4951, 7
  %4953 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4952
  %4954 = bitcast i16* %4953 to <32 x i32>*
  %4955 = load <32 x i32>, <32 x i32>* %4954, align 128, !tbaa !105
  %4956 = getelementptr inbounds i16, i16* %4953, i32 64
  %4957 = bitcast i16* %4956 to <32 x i32>*
  %4958 = load <32 x i32>, <32 x i32>* %4957, align 128, !tbaa !105
  %4959 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4958, <32 x i32> %4955)
  %4960 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4959)
  %4961 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4960) #11
  %4962 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4961, <64 x i32> %4950) #11
  %4963 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4962)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4963, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  %4964 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4962)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4964, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  %4965 = load <32 x i32>, <32 x i32>* %4921, align 128, !tbaa !121
  %4966 = load <32 x i32>, <32 x i32>* %4924, align 128, !tbaa !124
  %4967 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4966, <32 x i32> %4965)
  %4968 = shufflevector <64 x i32> %4967, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4969 = bitcast <128 x i32> %4968 to <64 x i64>
  %4970 = shufflevector <64 x i64> %4969, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4971 = bitcast <32 x i64> %4970 to <64 x i32>
  %4972 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4959)
  %4973 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4972) #11
  %4974 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4973, <64 x i32> %4971) #11
  %4975 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4974)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4975, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  %4976 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4974)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4976, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  %4977 = or i32 %"sum_filter.s1.r19$x138.us2164", 1
  %4978 = load <32 x i32>, <32 x i32>* %4913, align 128, !tbaa !111
  %4979 = load <32 x i32>, <32 x i32>* %4917, align 128, !tbaa !119
  %4980 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4979, <32 x i32> %4978)
  %4981 = shufflevector <64 x i32> %4980, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4982 = bitcast <128 x i32> %4981 to <64 x i64>
  %4983 = shufflevector <64 x i64> %4982, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4984 = bitcast <32 x i64> %4983 to <64 x i32>
  %4985 = add nsw i32 %4977, %4943
  %4986 = shl nsw i32 %4985, 7
  %4987 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %4986
  %4988 = bitcast i16* %4987 to <32 x i32>*
  %4989 = load <32 x i32>, <32 x i32>* %4988, align 128, !tbaa !105
  %4990 = getelementptr inbounds i16, i16* %4987, i32 64
  %4991 = bitcast i16* %4990 to <32 x i32>*
  %4992 = load <32 x i32>, <32 x i32>* %4991, align 128, !tbaa !105
  %4993 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4992, <32 x i32> %4989)
  %4994 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4993)
  %4995 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4994) #11
  %4996 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4995, <64 x i32> %4984) #11
  %4997 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4996)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4997, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  %4998 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4996)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4998, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  %4999 = load <32 x i32>, <32 x i32>* %4921, align 128, !tbaa !121
  %5000 = load <32 x i32>, <32 x i32>* %4924, align 128, !tbaa !124
  %5001 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5000, <32 x i32> %4999)
  %5002 = shufflevector <64 x i32> %5001, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5003 = bitcast <128 x i32> %5002 to <64 x i64>
  %5004 = shufflevector <64 x i64> %5003, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5005 = bitcast <32 x i64> %5004 to <64 x i32>
  %5006 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4993)
  %5007 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5006) #11
  %5008 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5007, <64 x i32> %5005) #11
  %5009 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5008)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5009, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  %5010 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5008)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5010, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  %5011 = add nuw nsw i32 %"sum_filter.s1.r19$x138.us2164", 2
  %niter3005.nsub.1 = add i32 %niter3005, -2
  %niter3005.ncmp.1 = icmp eq i32 %niter3005.nsub.1, 0
  br i1 %niter3005.ncmp.1, label %"end for sum_filter.s1.r19$x137.loopexit.split.us2166.unr-lcssa", label %"for sum_filter.s1.r19$x136.us2163"

"end for sum_filter.s1.r19$x137.loopexit.split.us2166.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x136.us2163", %"for sum_filter.s1.r19$y133.us"
  %"sum_filter.s1.r19$x138.us2164.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y133.us" ], [ %5011, %"for sum_filter.s1.r19$x136.us2163" ]
  br i1 %lcmp.mod3003.not, label %"end for sum_filter.s1.r19$x137.loopexit.split.us2166", label %"for sum_filter.s1.r19$x136.us2163.epil"

"for sum_filter.s1.r19$x136.us2163.epil":         ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us2166.unr-lcssa"
  %5012 = load <32 x i32>, <32 x i32>* %4913, align 128, !tbaa !111
  %5013 = load <32 x i32>, <32 x i32>* %4917, align 128, !tbaa !119
  %5014 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5013, <32 x i32> %5012)
  %5015 = shufflevector <64 x i32> %5014, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5016 = bitcast <128 x i32> %5015 to <64 x i64>
  %5017 = shufflevector <64 x i64> %5016, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5018 = bitcast <32 x i64> %5017 to <64 x i32>
  %5019 = add nsw i32 %"sum_filter.s1.r19$x138.us2164.unr", %4943
  %5020 = shl nsw i32 %5019, 7
  %5021 = getelementptr inbounds i16, i16* %filter_zeroed113, i32 %5020
  %5022 = bitcast i16* %5021 to <32 x i32>*
  %5023 = load <32 x i32>, <32 x i32>* %5022, align 128, !tbaa !105
  %5024 = getelementptr inbounds i16, i16* %5021, i32 64
  %5025 = bitcast i16* %5024 to <32 x i32>*
  %5026 = load <32 x i32>, <32 x i32>* %5025, align 128, !tbaa !105
  %5027 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5026, <32 x i32> %5023)
  %5028 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5027)
  %5029 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5028) #11
  %5030 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5029, <64 x i32> %5018) #11
  %5031 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5030)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5031, <32 x i32>* nonnull %4913, i32 128, <32 x i1> %4914), !tbaa !111
  %5032 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5030)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5032, <32 x i32>* nonnull %4917, i32 128, <32 x i1> %4918), !tbaa !119
  %5033 = load <32 x i32>, <32 x i32>* %4921, align 128, !tbaa !121
  %5034 = load <32 x i32>, <32 x i32>* %4924, align 128, !tbaa !124
  %5035 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5034, <32 x i32> %5033)
  %5036 = shufflevector <64 x i32> %5035, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5037 = bitcast <128 x i32> %5036 to <64 x i64>
  %5038 = shufflevector <64 x i64> %5037, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5039 = bitcast <32 x i64> %5038 to <64 x i32>
  %5040 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5027)
  %5041 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %5040) #11
  %5042 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5041, <64 x i32> %5039) #11
  %5043 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5042)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5043, <32 x i32>* nonnull %4921, i32 128, <32 x i1> %4922), !tbaa !121
  %5044 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5042)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5044, <32 x i32>* nonnull %4924, i32 128, <32 x i1> %4925), !tbaa !124
  br label %"end for sum_filter.s1.r19$x137.loopexit.split.us2166"

"end for sum_filter.s1.r19$x137.loopexit.split.us2166": ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us2166.unr-lcssa", %"for sum_filter.s1.r19$x136.us2163.epil"
  %5045 = add nuw nsw i32 %"sum_filter.s1.r19$y135.us", 1
  %.not1828.us = icmp eq i32 %5045, %6
  br i1 %.not1828.us, label %"consume sum_filter163", label %"for sum_filter.s1.r19$y133.us"

"consume sum_filter163":                          ; preds = %"end for sum_filter.s1.r19$x137.loopexit.split.us2166", %"end for sum_filter.s1.r19$x137.loopexit.split.us.us.us", %"produce sum_filter132"
  %5046 = insertelement <128 x i32> undef, i32 %3, i32 0
  %5047 = shufflevector <128 x i32> %5046, <128 x i32> undef, <128 x i32> zeroinitializer
  %t2133 = icmp sgt <128 x i32> %5047, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5048 = zext <128 x i1> %t2133 to <128 x i8>
  %5049 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %5048) #9
  %5050 = and i8 %5049, 1
  %t2487.not = icmp eq i8 %5050, 0
  br i1 %t2487.not, label %after_bb175.thread, label %true_bb176

after_bb175.thread:                               ; preds = %"consume sum_filter163"
  %5051 = zext i8 %input_zero to i32
  %5052 = insertelement <32 x i32> undef, i32 %5051, i32 0
  %5053 = shufflevector <32 x i32> %5052, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %after_bb181

true_bb176:                                       ; preds = %"consume sum_filter163"
  %5054 = bitcast i8* %0 to <32 x i32>*
  %5055 = load <32 x i32>, <32 x i32>* %5054, align 4, !tbaa !227
  %5056 = getelementptr inbounds i8, i8* %0, i32 128
  %5057 = bitcast i8* %5056 to <32 x i32>*
  %5058 = load <32 x i32>, <32 x i32>* %5057, align 4, !tbaa !234
  %5059 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5058, <32 x i32> %5055)
  %5060 = shufflevector <64 x i32> %5059, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5061 = bitcast <128 x i32> %5060 to <64 x i64>
  %5062 = shufflevector <64 x i64> %5061, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5063 = bitcast <32 x i64> %5062 to <64 x i32>
  %5064 = load <32 x i32>, <32 x i32>* %4913, align 128, !tbaa !111
  %5065 = load <32 x i32>, <32 x i32>* %4917, align 128, !tbaa !119
  %5066 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5065, <32 x i32> %5064)
  %5067 = shufflevector <64 x i32> %5066, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5068 = bitcast <128 x i32> %5067 to <64 x i64>
  %5069 = shufflevector <64 x i64> %5068, <64 x i64> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5070 = bitcast <16 x i64> %5069 to <32 x i32>
  %5071 = zext i8 %input_zero to i32
  %5072 = insertelement <32 x i32> undef, i32 %5071, i32 0
  %5073 = shufflevector <32 x i32> %5072, <32 x i32> undef, <32 x i32> zeroinitializer
  %5074 = load <32 x i32>, <32 x i32>* %4921, align 128, !tbaa !121
  %5075 = load <32 x i32>, <32 x i32>* %4924, align 128, !tbaa !124
  %5076 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5075, <32 x i32> %5074)
  %5077 = shufflevector <64 x i32> %5066, <64 x i32> %5076, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast = bitcast <128 x i32> %5077 to <64 x i64>
  br label %after_bb181

after_bb181:                                      ; preds = %after_bb175.thread, %true_bb176
  %5078 = phi <32 x i32> [ %5073, %true_bb176 ], [ %5053, %after_bb175.thread ]
  %5079 = phi <32 x i32> [ %5070, %true_bb176 ], [ zeroinitializer, %after_bb175.thread ]
  %5080 = phi <64 x i32> [ %5063, %true_bb176 ], [ zeroinitializer, %after_bb175.thread ]
  %5081 = phi <64 x i64> [ %phi.cast, %true_bb176 ], [ zeroinitializer, %after_bb175.thread ]
  %5082 = shufflevector <64 x i64> %5081, <64 x i64> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5083 = bitcast <16 x i64> %5082 to <32 x i32>
  %5084 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5078, <32 x i32> %5079) #11
  %5085 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5084, <32 x i32> %5078, <32 x i32> %5079) #11
  %5086 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5078, <32 x i32> %5083) #11
  %5087 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5086, <32 x i32> %5078, <32 x i32> %5083) #11
  %5088 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5085, <32 x i32> %5087) #11
  %5089 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %5080, <64 x i32> %5088) #11
  %5090 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5089)
  %5091 = bitcast [512 x i32]* %offset_c1815 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5090, <32 x i32>* nonnull %5091, i32 128, <32 x i1> %4914), !tbaa !131
  %5092 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5089)
  %5093 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 32
  %5094 = bitcast i32* %5093 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5092, <32 x i32>* nonnull %5094, i32 128, <32 x i1> %4918), !tbaa !139
  br i1 %t2487.not, label %after_bb199, label %true_bb194

true_bb194:                                       ; preds = %after_bb181
  %5095 = getelementptr inbounds i8, i8* %0, i32 256
  %5096 = bitcast i8* %5095 to <32 x i32>*
  %5097 = load <32 x i32>, <32 x i32>* %5096, align 4, !tbaa !236
  %5098 = getelementptr inbounds i8, i8* %0, i32 384
  %5099 = bitcast i8* %5098 to <32 x i32>*
  %5100 = load <32 x i32>, <32 x i32>* %5099, align 4, !tbaa !239
  %5101 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5100, <32 x i32> %5097)
  %5102 = shufflevector <64 x i32> %5101, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5103 = bitcast <128 x i32> %5102 to <64 x i64>
  %5104 = shufflevector <64 x i64> %5103, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5105 = bitcast <32 x i64> %5104 to <64 x i32>
  %5106 = load <32 x i32>, <32 x i32>* %4921, align 128, !tbaa !121
  %5107 = load <32 x i32>, <32 x i32>* %4924, align 128, !tbaa !124
  %5108 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5107, <32 x i32> %5106)
  %5109 = shufflevector <64 x i32> %5108, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5110 = bitcast <128 x i32> %5109 to <64 x i64>
  %5111 = shufflevector <64 x i64> %5110, <64 x i64> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %5112 = bitcast <16 x i64> %5111 to <32 x i32>
  %5113 = load <32 x i32>, <32 x i32>* %4913, align 128, !tbaa !111
  %5114 = load <32 x i32>, <32 x i32>* %4917, align 128, !tbaa !119
  %5115 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5114, <32 x i32> %5113)
  %5116 = shufflevector <64 x i32> %5115, <64 x i32> %5108, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast2754 = bitcast <128 x i32> %5116 to <64 x i64>
  br label %after_bb199

after_bb199:                                      ; preds = %after_bb181, %true_bb194
  %5117 = phi <32 x i32> [ %5112, %true_bb194 ], [ zeroinitializer, %after_bb181 ]
  %5118 = phi <64 x i32> [ %5105, %true_bb194 ], [ zeroinitializer, %after_bb181 ]
  %5119 = phi <64 x i64> [ %phi.cast2754, %true_bb194 ], [ zeroinitializer, %after_bb181 ]
  %5120 = shufflevector <64 x i64> %5119, <64 x i64> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5121 = bitcast <16 x i64> %5120 to <32 x i32>
  %5122 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5078, <32 x i32> %5117) #11
  %5123 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5122, <32 x i32> %5078, <32 x i32> %5117) #11
  %5124 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5078, <32 x i32> %5121) #11
  %5125 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %5124, <32 x i32> %5078, <32 x i32> %5121) #11
  %5126 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5123, <32 x i32> %5125) #11
  %5127 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %5118, <64 x i32> %5126) #11
  %5128 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5127)
  %5129 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 64
  %5130 = bitcast i32* %5129 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5128, <32 x i32>* nonnull %5130, i32 128, <32 x i1> %4922), !tbaa !141
  %5131 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5127)
  %5132 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c1815, i32 0, i32 96
  %5133 = bitcast i32* %5132 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %5131, <32 x i32>* nonnull %5133, i32 128, <32 x i1> %4925), !tbaa !144
  %t2427 = icmp slt i32 %a553, 0
  %t2429 = icmp slt i32 %stride_x, 0
  %5134 = add nsw i32 %4, -1
  %5135 = mul nsw i32 %5134, %a553
  %t2430 = select i1 %t2427, i32 %5135, i32 0
  %t2431.s = select i1 %t2429, i32 %20, i32 1
  %t2432 = icmp slt i32 %a548, 0
  %t2434 = icmp slt i32 %stride_y, 0
  %5136 = add nsw i32 %6, -1
  %5137 = mul nsw i32 %5136, %a548
  %t2435 = select i1 %t2432, i32 %5137, i32 0
  %t2436.s = select i1 %t2434, i32 %23, i32 1
  %t2420 = icmp eq i32 %depth_multiplier, 1
  %a548.op = shl i32 %a548, 1
  %5138 = select i1 %t2432, i32 %a548.op, i32 0
  %5139 = select i1 %4523, i32 %5138, i32 %t2435
  %5140 = add i32 %22, -1
  %5141 = add i32 %5140, %t2436.s
  %5142 = mul nsw i32 %5141, %stride_y
  %a553.op = shl i32 %a553, 1
  %5143 = select i1 %t2427, i32 %a553.op, i32 0
  %5144 = select i1 %4523, i32 %5143, i32 %t2430
  %5145 = add i32 %19, -1
  %5146 = add i32 %5145, %t2431.s
  %5147 = mul nsw i32 %5146, %stride_x
  %5148 = select i1 %t2432, i32 0, i32 %5137
  %5149 = add nsw i32 %23, -1
  %5150 = select i1 %t2434, i32 0, i32 %5149
  %5151 = add nsw i32 %5150, %22
  %5152 = mul nsw i32 %5151, %stride_y
  %b547 = add nsw i32 %5152, %5148
  %5153 = select i1 %t2427, i32 0, i32 %5135
  %5154 = add nsw i32 %20, -1
  %5155 = select i1 %t2429, i32 0, i32 %5154
  %5156 = add nsw i32 %5155, %19
  %5157 = mul nsw i32 %5156, %stride_x
  %b552 = add nsw i32 %5157, %5153
  %5158 = mul nsw i32 %13, %12
  %5159 = mul nsw i32 %16, %14
  %5160 = mul nsw i32 %11, %10
  %5161 = add i32 %5158, %5160
  %t2421 = add i32 %5161, %5159
  %5162 = icmp sgt i32 %15, 0
  br i1 %5162, label %"for output.s0.b.rebased202.preheader", label %if.then.i1933, !prof !101

"for output.s0.b.rebased202.preheader":           ; preds = %after_bb199
  %b551 = add nsw i32 %5147, %5144
  %b546 = add nsw i32 %5142, %5139
  %a544 = add nsw i32 %5142, %t2435
  %5163 = icmp slt i32 %t2435, %5139
  %resampled_input.y.min_realized = select i1 %5163, i32 %a544, i32 %b546
  %5164 = icmp sgt i32 %a548, 0
  %5165 = select i1 %5164, i32 %a548, i32 0
  %5166 = shl nuw nsw i32 %5165, 1
  %5167 = select i1 %4523, i32 %5166, i32 %5148
  %a545 = add nsw i32 %5152, %5167
  %5168 = icmp sgt i32 %5167, %5148
  %5169 = select i1 %5168, i32 %a545, i32 %b547
  %a557 = sub nsw i32 %5169, %resampled_input.y.min_realized
  %a549 = add nsw i32 %5147, %t2430
  %5170 = icmp slt i32 %t2430, %5144
  %resampled_input.x.min_realized = select i1 %5170, i32 %a549, i32 %b551
  %5171 = icmp sgt i32 %a553, 0
  %5172 = select i1 %5171, i32 %a553, i32 0
  %5173 = shl nuw nsw i32 %5172, 1
  %5174 = select i1 %4523, i32 %5173, i32 %5153
  %a550 = add nsw i32 %5157, %5174
  %5175 = icmp sgt i32 %5174, %5153
  %5176 = select i1 %5175, i32 %a550, i32 %b552
  %a556 = sub nsw i32 %5176, %resampled_input.x.min_realized
  %5177 = icmp sgt i32 %a556, -1
  %t2555 = select i1 %5177, i32 %a556, i32 -1
  %5178 = icmp sgt i32 %a557, -1
  %t2556 = select i1 %5178, i32 %a557, i32 -1
  %5179 = add nsw i32 %t2556, 1
  %5180 = shl i32 %t2555, 7
  %t2557 = add i32 %5180, 128
  %5181 = mul i32 %t2557, %5179
  %5182 = add i32 %5181, 131
  %5183 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2448 = sub nsw i32 %b552, %a549
  %t2447 = sub nsw i32 %b547, %a544
  %5184 = icmp sgt i32 %t2447, -1
  %5185 = sub i32 %a544, %resampled_input.y.min_realized
  %5186 = add nsw i32 %a556, 1
  %5187 = sub i32 %a549, %resampled_input.x.min_realized
  %5188 = icmp sgt i32 %t2448, -1
  %5189 = icmp sgt i32 %3, 1
  %5190 = icmp sgt i32 %3, 2
  %5191 = icmp sgt i32 %3, 3
  %5192 = icmp sgt i32 %3, 4
  %5193 = icmp sgt i32 %3, 5
  %5194 = icmp sgt i32 %3, 6
  %5195 = icmp sgt i32 %3, 7
  %5196 = icmp sgt i32 %3, 8
  %5197 = icmp sgt i32 %3, 9
  %5198 = icmp sgt i32 %3, 10
  %5199 = icmp sgt i32 %3, 11
  %5200 = icmp sgt i32 %3, 12
  %5201 = icmp sgt i32 %3, 13
  %5202 = icmp sgt i32 %3, 14
  %5203 = icmp sgt i32 %3, 15
  %5204 = icmp sgt i32 %3, 16
  %5205 = icmp sgt i32 %3, 17
  %5206 = icmp sgt i32 %3, 18
  %5207 = icmp sgt i32 %3, 19
  %5208 = icmp sgt i32 %3, 20
  %5209 = icmp sgt i32 %3, 21
  %5210 = icmp sgt i32 %3, 22
  %5211 = icmp sgt i32 %3, 23
  %5212 = icmp sgt i32 %3, 24
  %5213 = icmp sgt i32 %3, 25
  %5214 = icmp sgt i32 %3, 26
  %5215 = icmp sgt i32 %3, 27
  %5216 = icmp sgt i32 %3, 28
  %5217 = icmp sgt i32 %3, 29
  %5218 = icmp sgt i32 %3, 30
  %5219 = icmp sgt i32 %3, 31
  %5220 = icmp sgt i32 %3, 32
  %5221 = icmp sgt i32 %3, 33
  %5222 = icmp sgt i32 %3, 34
  %5223 = icmp sgt i32 %3, 35
  %5224 = icmp sgt i32 %3, 36
  %5225 = icmp sgt i32 %3, 37
  %5226 = icmp sgt i32 %3, 38
  %5227 = icmp sgt i32 %3, 39
  %5228 = icmp sgt i32 %3, 40
  %5229 = icmp sgt i32 %3, 41
  %5230 = icmp sgt i32 %3, 42
  %5231 = icmp sgt i32 %3, 43
  %5232 = icmp sgt i32 %3, 44
  %5233 = icmp sgt i32 %3, 45
  %5234 = icmp sgt i32 %3, 46
  %5235 = icmp sgt i32 %3, 47
  %5236 = icmp sgt i32 %3, 48
  %5237 = icmp sgt i32 %3, 49
  %5238 = icmp sgt i32 %3, 50
  %5239 = icmp sgt i32 %3, 51
  %5240 = icmp sgt i32 %3, 52
  %5241 = icmp sgt i32 %3, 53
  %5242 = icmp sgt i32 %3, 54
  %5243 = icmp sgt i32 %3, 55
  %5244 = icmp sgt i32 %3, 56
  %5245 = icmp sgt i32 %3, 57
  %5246 = icmp sgt i32 %3, 58
  %5247 = icmp sgt i32 %3, 59
  %5248 = icmp sgt i32 %3, 60
  %5249 = icmp sgt i32 %3, 61
  %5250 = icmp sgt i32 %3, 62
  %5251 = icmp sgt i32 %3, 65
  %5252 = icmp sgt i32 %3, 66
  %5253 = icmp sgt i32 %3, 67
  %5254 = icmp sgt i32 %3, 68
  %5255 = icmp sgt i32 %3, 69
  %5256 = icmp sgt i32 %3, 70
  %5257 = icmp sgt i32 %3, 71
  %5258 = icmp sgt i32 %3, 72
  %5259 = icmp sgt i32 %3, 73
  %5260 = icmp sgt i32 %3, 74
  %5261 = icmp sgt i32 %3, 75
  %5262 = icmp sgt i32 %3, 76
  %5263 = icmp sgt i32 %3, 77
  %5264 = icmp sgt i32 %3, 78
  %5265 = icmp sgt i32 %3, 79
  %5266 = icmp sgt i32 %3, 80
  %5267 = icmp sgt i32 %3, 81
  %5268 = icmp sgt i32 %3, 82
  %5269 = icmp sgt i32 %3, 83
  %5270 = icmp sgt i32 %3, 84
  %5271 = icmp sgt i32 %3, 85
  %5272 = icmp sgt i32 %3, 86
  %5273 = icmp sgt i32 %3, 87
  %5274 = icmp sgt i32 %3, 88
  %5275 = icmp sgt i32 %3, 89
  %5276 = icmp sgt i32 %3, 90
  %5277 = icmp sgt i32 %3, 91
  %5278 = icmp sgt i32 %3, 92
  %5279 = icmp sgt i32 %3, 93
  %5280 = icmp sgt i32 %3, 94
  %5281 = icmp sgt i32 %3, 95
  %5282 = icmp sgt i32 %3, 96
  %5283 = icmp sgt i32 %3, 97
  %5284 = icmp sgt i32 %3, 98
  %5285 = icmp sgt i32 %3, 99
  %5286 = icmp sgt i32 %3, 100
  %5287 = icmp sgt i32 %3, 101
  %5288 = icmp sgt i32 %3, 102
  %5289 = icmp sgt i32 %3, 103
  %5290 = icmp sgt i32 %3, 104
  %5291 = icmp sgt i32 %3, 105
  %5292 = icmp sgt i32 %3, 106
  %5293 = icmp sgt i32 %3, 107
  %5294 = icmp sgt i32 %3, 108
  %5295 = icmp sgt i32 %3, 109
  %5296 = icmp sgt i32 %3, 110
  %5297 = icmp sgt i32 %3, 111
  %5298 = icmp sgt i32 %3, 112
  %5299 = icmp sgt i32 %3, 113
  %5300 = icmp sgt i32 %3, 114
  %5301 = icmp sgt i32 %3, 115
  %5302 = icmp sgt i32 %3, 116
  %5303 = icmp sgt i32 %3, 117
  %5304 = icmp sgt i32 %3, 118
  %5305 = icmp sgt i32 %3, 119
  %5306 = icmp sgt i32 %3, 120
  %5307 = icmp sgt i32 %3, 121
  %5308 = icmp sgt i32 %3, 122
  %5309 = icmp sgt i32 %3, 123
  %5310 = icmp sgt i32 %3, 124
  %5311 = icmp sgt i32 %3, 125
  %5312 = icmp sgt i32 %3, 126
  %5313 = icmp eq i32 %depth_multiplier, 0
  %t2813 = sext i1 %5313 to i32
  %5314 = sub nsw i32 %depth_multiplier, %t2813
  %5315 = add i32 %5314, 1
  %5316 = icmp ult i32 %5315, 3
  %5317 = select i1 %5316, i32 %5314, i32 0
  %5318 = xor i32 %t2813, -1
  %5319 = and i32 %5317, %5318
  %5320 = icmp sgt i32 %23, 0
  %.neg = mul i32 %24, %22
  %.neg2121 = mul i32 %21, %19
  %.neg2122 = mul i32 %25, %14
  %5321 = icmp sgt i32 %20, 0
  %.not2120 = xor i1 %4525, true
  %brmerge = or i1 %4523, %.not2120
  %5322 = insertelement <32 x i32> undef, i32 %3, i32 0
  %5323 = shufflevector <32 x i32> %5322, <32 x i32> undef, <32 x i32> zeroinitializer
  %5324 = icmp sgt <32 x i32> %5323, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5325 = sext i32 %output_multiplier to i64
  %5326 = insertelement <32 x i64> undef, i64 %5325, i32 0
  %5327 = shufflevector <32 x i64> %5326, <32 x i64> undef, <32 x i32> zeroinitializer
  %5328 = shl nuw i32 1, %output_shift
  %5329 = ashr i32 %5328, 1
  %5330 = zext i8 %output_zero to i16
  %5331 = insertelement <64 x i16> undef, i16 %5330, i32 0
  %5332 = shufflevector <64 x i16> %5331, <64 x i16> undef, <64 x i32> zeroinitializer
  %5333 = bitcast <64 x i16> %5332 to <32 x i32>
  %5334 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %5335 = shufflevector <32 x i8> %5334, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5336 = bitcast <128 x i8> %5335 to <32 x i32>
  %5337 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %5338 = shufflevector <32 x i8> %5337, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5339 = bitcast <128 x i8> %5338 to <32 x i32>
  %reass.add = add i32 %.neg, %.neg2121
  %reass.add2124 = add i32 %reass.add, %.neg2122
  %5340 = icmp sgt <32 x i32> %5323, <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5341 = icmp sgt <32 x i32> %5323, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5342 = icmp sgt <32 x i32> %5323, <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5343 = add i32 %20, -1
  %xtraiter3011 = and i32 %20, 7
  %5344 = icmp ult i32 %5343, 7
  %unroll_iter3014 = and i32 %20, -8
  %lcmp.mod3013.not = icmp eq i32 %xtraiter3011, 0
  %xtraiter3016 = and i32 %20, 7
  %5345 = icmp ult i32 %5343, 7
  %unroll_iter3019 = and i32 %20, -8
  %lcmp.mod3018.not = icmp eq i32 %xtraiter3016, 0
  %xtraiter3021 = and i32 %20, 7
  %5346 = icmp ult i32 %5343, 7
  %unroll_iter3024 = and i32 %20, -8
  %lcmp.mod3023.not = icmp eq i32 %xtraiter3021, 0
  br label %"for output.s0.b.rebased202"

"for output.s0.b.rebased202":                     ; preds = %"for output.s0.b.rebased202.preheader", %"end for output.s0.y.yo1762"
  %output.s0.b.rebased204 = phi i32 [ %7163, %"end for output.s0.y.yo1762" ], [ 0, %"for output.s0.b.rebased202.preheader" ]
  %5347 = load i32, i32* %.fca.1.gep1779, align 4, !tbaa !98
  %cmp.i2012 = icmp ult i32 %5347, %5182
  %5348 = load i8*, i8** %.fca.0.gep1778, align 4, !tbaa !95
  br i1 %cmp.i2012, label %if.then.i2015, label %pseudostack_alloc.exit2028, !prof !99

if.then.i2015:                                    ; preds = %"for output.s0.b.rebased202"
  %tobool1.not.i2014 = icmp ne i8* %5348, null
  %5349 = load i32, i32* %.fca.2.gep1780, align 4
  %cmp2.i2017 = icmp ugt i32 %5349, 16384
  %or.cond2119 = and i1 %tobool1.not.i2014, %cmp2.i2017
  br i1 %or.cond2119, label %if.then3.i2019, label %if.end.i2023

if.then3.i2019:                                   ; preds = %if.then.i2015
  call void @halide_free(i8* null, i8* nonnull %5348) #15
  %.pre = load i32, i32* %.fca.2.gep1780, align 4, !tbaa !97
  br label %if.end.i2023

if.end.i2023:                                     ; preds = %if.then3.i2019, %if.then.i2015
  %5350 = phi i32 [ %.pre, %if.then3.i2019 ], [ %5349, %if.then.i2015 ]
  %add.i2021 = add i32 %5350, %5182
  store i32 %add.i2021, i32* %.fca.2.gep1780, align 4, !tbaa !97
  %cmp7.i2022 = icmp ugt i32 %add.i2021, 16384
  br i1 %cmp7.i2022, label %if.then8.i2025, label %if.end11.i2027

if.then8.i2025:                                   ; preds = %if.end.i2023
  %call.i2024 = call i8* @halide_malloc(i8* null, i32 %5182) #15
  br label %if.end11.i2027

if.end11.i2027:                                   ; preds = %if.then8.i2025, %if.end.i2023
  %storemerge.i2026 = phi i8* [ %call.i2024, %if.then8.i2025 ], [ null, %if.end.i2023 ]
  store i8* %storemerge.i2026, i8** %.fca.0.gep1778, align 4, !tbaa !95
  store i32 %5182, i32* %.fca.1.gep1779, align 4, !tbaa !98
  br label %pseudostack_alloc.exit2028

pseudostack_alloc.exit2028:                       ; preds = %"for output.s0.b.rebased202", %if.end11.i2027
  %5351 = phi i8* [ %storemerge.i2026, %if.end11.i2027 ], [ %5348, %"for output.s0.b.rebased202" ]
  %.not1818 = icmp eq i8* %5351, null
  br i1 %.not1818, label %then_bb206, label %"produce resampled_input208", !prof !100

then_bb206:                                       ; preds = %pseudostack_alloc.exit2028
  %5352 = alloca i8*, i32 %5182, align 128
  %5353 = bitcast i8** %5352 to i8*
  store i8** %5352, i8*** %5183, align 4
  br label %"produce resampled_input208"

"produce resampled_input208":                     ; preds = %pseudostack_alloc.exit2028, %then_bb206
  %resampled_input207 = phi i8* [ %5353, %then_bb206 ], [ %5351, %pseudostack_alloc.exit2028 ]
  br i1 %t2420, label %then_bb210, label %next_bb211

then_bb210:                                       ; preds = %"produce resampled_input208"
  br i1 %5184, label %"for resampled_input.s0.y.rebased212.preheader", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased212.preheader":  ; preds = %then_bb210
  %5354 = add nsw i32 %output.s0.b.rebased204, %14
  %5355 = mul nsw i32 %5354, %16
  %5356 = sub i32 %5355, %t2421
  br i1 %5188, label %"for resampled_input.s0.y.rebased212.us", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased212.us":         ; preds = %"for resampled_input.s0.y.rebased212.preheader", %"end for resampled_input.s0.x.rebased216.loopexit.us"
  %resampled_input.s0.y.rebased214.us = phi i32 [ %5372, %"end for resampled_input.s0.x.rebased216.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased212.preheader" ]
  %5357 = add nsw i32 %5185, %resampled_input.s0.y.rebased214.us
  %5358 = mul nsw i32 %5357, %5186
  %t2446.us = add nsw i32 %5187, %5358
  %5359 = add nsw i32 %resampled_input.s0.y.rebased214.us, %a544
  %5360 = mul nsw i32 %5359, %13
  %t2445.us = add nsw i32 %5356, %5360
  br label %"for resampled_input.s0.x.rebased215.us"

"for resampled_input.s0.x.rebased215.us":         ; preds = %"for resampled_input.s0.y.rebased212.us", %"for resampled_input.s0.x.rebased215.us"
  %resampled_input.s0.x.rebased217.us = phi i32 [ %5371, %"for resampled_input.s0.x.rebased215.us" ], [ 0, %"for resampled_input.s0.y.rebased212.us" ]
  %5361 = add nsw i32 %resampled_input.s0.x.rebased217.us, %a549
  %5362 = mul nsw i32 %5361, %11
  %5363 = add nsw i32 %t2445.us, %5362
  %5364 = getelementptr inbounds i8, i8* %8, i32 %5363
  %5365 = bitcast i8* %5364 to <128 x i8>*
  %5366 = load <128 x i8>, <128 x i8>* %5365, align 1, !tbaa !127
  %5367 = add nsw i32 %t2446.us, %resampled_input.s0.x.rebased217.us
  %5368 = shl nsw i32 %5367, 7
  %5369 = getelementptr inbounds i8, i8* %resampled_input207, i32 %5368
  %5370 = bitcast i8* %5369 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5366, <128 x i8>* %5370, i32 128, <128 x i1> %t2133), !tbaa !129
  %5371 = add nuw nsw i32 %resampled_input.s0.x.rebased217.us, 1
  %.not1827.us = icmp eq i32 %resampled_input.s0.x.rebased217.us, %t2448
  br i1 %.not1827.us, label %"end for resampled_input.s0.x.rebased216.loopexit.us", label %"for resampled_input.s0.x.rebased215.us"

"end for resampled_input.s0.x.rebased216.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased215.us"
  %5372 = add nuw nsw i32 %resampled_input.s0.y.rebased214.us, 1
  %.not1826.us = icmp eq i32 %resampled_input.s0.y.rebased214.us, %t2447
  br i1 %.not1826.us, label %"consume resampled_input1760", label %"for resampled_input.s0.y.rebased212.us"

next_bb211:                                       ; preds = %"produce resampled_input208"
  br i1 %5184, label %"for resampled_input.s0.y.rebased218.preheader", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased218.preheader":  ; preds = %next_bb211
  %5373 = add nsw i32 %output.s0.b.rebased204, %14
  %5374 = mul nsw i32 %5373, %16
  %5375 = sub i32 %5374, %t2421
  br i1 %5188, label %"for resampled_input.s0.y.rebased218.us", label %"consume resampled_input1760", !prof !101

"for resampled_input.s0.y.rebased218.us":         ; preds = %"for resampled_input.s0.y.rebased218.preheader", %"end for resampled_input.s0.x.rebased222.loopexit.us"
  %resampled_input.s0.y.rebased220.us = phi i32 [ %6718, %"end for resampled_input.s0.x.rebased222.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased218.preheader" ]
  %5376 = add nsw i32 %5185, %resampled_input.s0.y.rebased220.us
  %5377 = mul nsw i32 %5376, %5186
  %t2453.us = add nsw i32 %5187, %5377
  %5378 = add nsw i32 %resampled_input.s0.y.rebased220.us, %a544
  %5379 = mul nsw i32 %5378, %13
  %t2452.us = add nsw i32 %5375, %5379
  br label %"for resampled_input.s0.x.rebased221.us"

"for resampled_input.s0.x.rebased221.us":         ; preds = %"for resampled_input.s0.y.rebased218.us", %after_bb1759.us
  %resampled_input.s0.x.rebased223.us = phi i32 [ %6717, %after_bb1759.us ], [ 0, %"for resampled_input.s0.y.rebased218.us" ]
  %5380 = add nsw i32 %resampled_input.s0.x.rebased223.us, %a549
  %5381 = mul nsw i32 %5380, %11
  %5382 = add nsw i32 %t2452.us, %5381
  %5383 = getelementptr inbounds i8, i8* %8, i32 %5382
  %5384 = load i8, i8* %5383, align 1, !tbaa !127
  br i1 %5189, label %true_bb611.us, label %after_bb613.us

true_bb611.us:                                    ; preds = %"for resampled_input.s0.x.rebased221.us"
  %5385 = add nsw i32 %5382, %5319
  %5386 = getelementptr inbounds i8, i8* %8, i32 %5385
  %5387 = load i8, i8* %5386, align 1, !tbaa !127
  br label %after_bb613.us

after_bb613.us:                                   ; preds = %true_bb611.us, %"for resampled_input.s0.x.rebased221.us"
  %5388 = phi i8 [ %5387, %true_bb611.us ], [ 0, %"for resampled_input.s0.x.rebased221.us" ]
  br i1 %5190, label %true_bb614.us, label %after_bb616.us

true_bb614.us:                                    ; preds = %after_bb613.us
  %5389 = sdiv i32 2, %5314
  %5390 = and i32 %5389, %5318
  %5391 = add nsw i32 %5390, %5382
  %5392 = getelementptr inbounds i8, i8* %8, i32 %5391
  %5393 = load i8, i8* %5392, align 1, !tbaa !127
  br label %after_bb616.us

after_bb616.us:                                   ; preds = %true_bb614.us, %after_bb613.us
  %5394 = phi i8 [ %5393, %true_bb614.us ], [ 0, %after_bb613.us ]
  br i1 %5191, label %true_bb617.us, label %after_bb619.us

true_bb617.us:                                    ; preds = %after_bb616.us
  %5395 = sdiv i32 3, %5314
  %5396 = and i32 %5395, %5318
  %5397 = add nsw i32 %5396, %5382
  %5398 = getelementptr inbounds i8, i8* %8, i32 %5397
  %5399 = load i8, i8* %5398, align 1, !tbaa !127
  br label %after_bb619.us

after_bb619.us:                                   ; preds = %true_bb617.us, %after_bb616.us
  %5400 = phi i8 [ %5399, %true_bb617.us ], [ 0, %after_bb616.us ]
  br i1 %5192, label %true_bb620.us, label %after_bb622.us

true_bb620.us:                                    ; preds = %after_bb619.us
  %5401 = sdiv i32 4, %5314
  %5402 = and i32 %5401, %5318
  %5403 = add nsw i32 %5402, %5382
  %5404 = getelementptr inbounds i8, i8* %8, i32 %5403
  %5405 = load i8, i8* %5404, align 1, !tbaa !127
  br label %after_bb622.us

after_bb622.us:                                   ; preds = %true_bb620.us, %after_bb619.us
  %5406 = phi i8 [ %5405, %true_bb620.us ], [ 0, %after_bb619.us ]
  br i1 %5193, label %true_bb623.us, label %after_bb625.us

true_bb623.us:                                    ; preds = %after_bb622.us
  %5407 = sdiv i32 5, %5314
  %5408 = and i32 %5407, %5318
  %5409 = add nsw i32 %5408, %5382
  %5410 = getelementptr inbounds i8, i8* %8, i32 %5409
  %5411 = load i8, i8* %5410, align 1, !tbaa !127
  br label %after_bb625.us

after_bb625.us:                                   ; preds = %true_bb623.us, %after_bb622.us
  %5412 = phi i8 [ %5411, %true_bb623.us ], [ 0, %after_bb622.us ]
  br i1 %5194, label %true_bb626.us, label %after_bb628.us

true_bb626.us:                                    ; preds = %after_bb625.us
  %5413 = sdiv i32 6, %5314
  %5414 = and i32 %5413, %5318
  %5415 = add nsw i32 %5414, %5382
  %5416 = getelementptr inbounds i8, i8* %8, i32 %5415
  %5417 = load i8, i8* %5416, align 1, !tbaa !127
  br label %after_bb628.us

after_bb628.us:                                   ; preds = %true_bb626.us, %after_bb625.us
  %5418 = phi i8 [ %5417, %true_bb626.us ], [ 0, %after_bb625.us ]
  br i1 %5195, label %true_bb629.us, label %after_bb631.us

true_bb629.us:                                    ; preds = %after_bb628.us
  %5419 = sdiv i32 7, %5314
  %5420 = and i32 %5419, %5318
  %5421 = add nsw i32 %5420, %5382
  %5422 = getelementptr inbounds i8, i8* %8, i32 %5421
  %5423 = load i8, i8* %5422, align 1, !tbaa !127
  br label %after_bb631.us

after_bb631.us:                                   ; preds = %true_bb629.us, %after_bb628.us
  %5424 = phi i8 [ %5423, %true_bb629.us ], [ 0, %after_bb628.us ]
  br i1 %5196, label %true_bb632.us, label %after_bb634.us

true_bb632.us:                                    ; preds = %after_bb631.us
  %5425 = sdiv i32 8, %5314
  %5426 = and i32 %5425, %5318
  %5427 = add nsw i32 %5426, %5382
  %5428 = getelementptr inbounds i8, i8* %8, i32 %5427
  %5429 = load i8, i8* %5428, align 1, !tbaa !127
  br label %after_bb634.us

after_bb634.us:                                   ; preds = %true_bb632.us, %after_bb631.us
  %5430 = phi i8 [ %5429, %true_bb632.us ], [ 0, %after_bb631.us ]
  br i1 %5197, label %true_bb635.us, label %after_bb637.us

true_bb635.us:                                    ; preds = %after_bb634.us
  %5431 = sdiv i32 9, %5314
  %5432 = and i32 %5431, %5318
  %5433 = add nsw i32 %5432, %5382
  %5434 = getelementptr inbounds i8, i8* %8, i32 %5433
  %5435 = load i8, i8* %5434, align 1, !tbaa !127
  br label %after_bb637.us

after_bb637.us:                                   ; preds = %true_bb635.us, %after_bb634.us
  %5436 = phi i8 [ %5435, %true_bb635.us ], [ 0, %after_bb634.us ]
  br i1 %5198, label %true_bb638.us, label %after_bb640.us

true_bb638.us:                                    ; preds = %after_bb637.us
  %5437 = sdiv i32 10, %5314
  %5438 = and i32 %5437, %5318
  %5439 = add nsw i32 %5438, %5382
  %5440 = getelementptr inbounds i8, i8* %8, i32 %5439
  %5441 = load i8, i8* %5440, align 1, !tbaa !127
  br label %after_bb640.us

after_bb640.us:                                   ; preds = %true_bb638.us, %after_bb637.us
  %5442 = phi i8 [ %5441, %true_bb638.us ], [ 0, %after_bb637.us ]
  br i1 %5199, label %true_bb641.us, label %after_bb643.us

true_bb641.us:                                    ; preds = %after_bb640.us
  %5443 = sdiv i32 11, %5314
  %5444 = and i32 %5443, %5318
  %5445 = add nsw i32 %5444, %5382
  %5446 = getelementptr inbounds i8, i8* %8, i32 %5445
  %5447 = load i8, i8* %5446, align 1, !tbaa !127
  br label %after_bb643.us

after_bb643.us:                                   ; preds = %true_bb641.us, %after_bb640.us
  %5448 = phi i8 [ %5447, %true_bb641.us ], [ 0, %after_bb640.us ]
  br i1 %5200, label %true_bb644.us, label %after_bb646.us

true_bb644.us:                                    ; preds = %after_bb643.us
  %5449 = sdiv i32 12, %5314
  %5450 = and i32 %5449, %5318
  %5451 = add nsw i32 %5450, %5382
  %5452 = getelementptr inbounds i8, i8* %8, i32 %5451
  %5453 = load i8, i8* %5452, align 1, !tbaa !127
  br label %after_bb646.us

after_bb646.us:                                   ; preds = %true_bb644.us, %after_bb643.us
  %5454 = phi i8 [ %5453, %true_bb644.us ], [ 0, %after_bb643.us ]
  br i1 %5201, label %true_bb647.us, label %after_bb649.us

true_bb647.us:                                    ; preds = %after_bb646.us
  %5455 = sdiv i32 13, %5314
  %5456 = and i32 %5455, %5318
  %5457 = add nsw i32 %5456, %5382
  %5458 = getelementptr inbounds i8, i8* %8, i32 %5457
  %5459 = load i8, i8* %5458, align 1, !tbaa !127
  br label %after_bb649.us

after_bb649.us:                                   ; preds = %true_bb647.us, %after_bb646.us
  %5460 = phi i8 [ %5459, %true_bb647.us ], [ 0, %after_bb646.us ]
  br i1 %5202, label %true_bb650.us, label %after_bb652.us

true_bb650.us:                                    ; preds = %after_bb649.us
  %5461 = sdiv i32 14, %5314
  %5462 = and i32 %5461, %5318
  %5463 = add nsw i32 %5462, %5382
  %5464 = getelementptr inbounds i8, i8* %8, i32 %5463
  %5465 = load i8, i8* %5464, align 1, !tbaa !127
  br label %after_bb652.us

after_bb652.us:                                   ; preds = %true_bb650.us, %after_bb649.us
  %5466 = phi i8 [ %5465, %true_bb650.us ], [ 0, %after_bb649.us ]
  br i1 %5203, label %true_bb653.us, label %after_bb655.us

true_bb653.us:                                    ; preds = %after_bb652.us
  %5467 = sdiv i32 15, %5314
  %5468 = and i32 %5467, %5318
  %5469 = add nsw i32 %5468, %5382
  %5470 = getelementptr inbounds i8, i8* %8, i32 %5469
  %5471 = load i8, i8* %5470, align 1, !tbaa !127
  br label %after_bb655.us

after_bb655.us:                                   ; preds = %true_bb653.us, %after_bb652.us
  %5472 = phi i8 [ %5471, %true_bb653.us ], [ 0, %after_bb652.us ]
  br i1 %5204, label %true_bb656.us, label %after_bb658.us

true_bb656.us:                                    ; preds = %after_bb655.us
  %5473 = sdiv i32 16, %5314
  %5474 = and i32 %5473, %5318
  %5475 = add nsw i32 %5474, %5382
  %5476 = getelementptr inbounds i8, i8* %8, i32 %5475
  %5477 = load i8, i8* %5476, align 1, !tbaa !127
  br label %after_bb658.us

after_bb658.us:                                   ; preds = %true_bb656.us, %after_bb655.us
  %5478 = phi i8 [ %5477, %true_bb656.us ], [ 0, %after_bb655.us ]
  br i1 %5205, label %true_bb659.us, label %after_bb661.us

true_bb659.us:                                    ; preds = %after_bb658.us
  %5479 = sdiv i32 17, %5314
  %5480 = and i32 %5479, %5318
  %5481 = add nsw i32 %5480, %5382
  %5482 = getelementptr inbounds i8, i8* %8, i32 %5481
  %5483 = load i8, i8* %5482, align 1, !tbaa !127
  br label %after_bb661.us

after_bb661.us:                                   ; preds = %true_bb659.us, %after_bb658.us
  %5484 = phi i8 [ %5483, %true_bb659.us ], [ 0, %after_bb658.us ]
  br i1 %5206, label %true_bb662.us, label %after_bb664.us

true_bb662.us:                                    ; preds = %after_bb661.us
  %5485 = sdiv i32 18, %5314
  %5486 = and i32 %5485, %5318
  %5487 = add nsw i32 %5486, %5382
  %5488 = getelementptr inbounds i8, i8* %8, i32 %5487
  %5489 = load i8, i8* %5488, align 1, !tbaa !127
  br label %after_bb664.us

after_bb664.us:                                   ; preds = %true_bb662.us, %after_bb661.us
  %5490 = phi i8 [ %5489, %true_bb662.us ], [ 0, %after_bb661.us ]
  br i1 %5207, label %true_bb665.us, label %after_bb667.us

true_bb665.us:                                    ; preds = %after_bb664.us
  %5491 = sdiv i32 19, %5314
  %5492 = and i32 %5491, %5318
  %5493 = add nsw i32 %5492, %5382
  %5494 = getelementptr inbounds i8, i8* %8, i32 %5493
  %5495 = load i8, i8* %5494, align 1, !tbaa !127
  br label %after_bb667.us

after_bb667.us:                                   ; preds = %true_bb665.us, %after_bb664.us
  %5496 = phi i8 [ %5495, %true_bb665.us ], [ 0, %after_bb664.us ]
  br i1 %5208, label %true_bb668.us, label %after_bb670.us

true_bb668.us:                                    ; preds = %after_bb667.us
  %5497 = sdiv i32 20, %5314
  %5498 = and i32 %5497, %5318
  %5499 = add nsw i32 %5498, %5382
  %5500 = getelementptr inbounds i8, i8* %8, i32 %5499
  %5501 = load i8, i8* %5500, align 1, !tbaa !127
  br label %after_bb670.us

after_bb670.us:                                   ; preds = %true_bb668.us, %after_bb667.us
  %5502 = phi i8 [ %5501, %true_bb668.us ], [ 0, %after_bb667.us ]
  br i1 %5209, label %true_bb671.us, label %after_bb673.us

true_bb671.us:                                    ; preds = %after_bb670.us
  %5503 = sdiv i32 21, %5314
  %5504 = and i32 %5503, %5318
  %5505 = add nsw i32 %5504, %5382
  %5506 = getelementptr inbounds i8, i8* %8, i32 %5505
  %5507 = load i8, i8* %5506, align 1, !tbaa !127
  br label %after_bb673.us

after_bb673.us:                                   ; preds = %true_bb671.us, %after_bb670.us
  %5508 = phi i8 [ %5507, %true_bb671.us ], [ 0, %after_bb670.us ]
  br i1 %5210, label %true_bb674.us, label %after_bb676.us

true_bb674.us:                                    ; preds = %after_bb673.us
  %5509 = sdiv i32 22, %5314
  %5510 = and i32 %5509, %5318
  %5511 = add nsw i32 %5510, %5382
  %5512 = getelementptr inbounds i8, i8* %8, i32 %5511
  %5513 = load i8, i8* %5512, align 1, !tbaa !127
  br label %after_bb676.us

after_bb676.us:                                   ; preds = %true_bb674.us, %after_bb673.us
  %5514 = phi i8 [ %5513, %true_bb674.us ], [ 0, %after_bb673.us ]
  br i1 %5211, label %true_bb677.us, label %after_bb679.us

true_bb677.us:                                    ; preds = %after_bb676.us
  %5515 = sdiv i32 23, %5314
  %5516 = and i32 %5515, %5318
  %5517 = add nsw i32 %5516, %5382
  %5518 = getelementptr inbounds i8, i8* %8, i32 %5517
  %5519 = load i8, i8* %5518, align 1, !tbaa !127
  br label %after_bb679.us

after_bb679.us:                                   ; preds = %true_bb677.us, %after_bb676.us
  %5520 = phi i8 [ %5519, %true_bb677.us ], [ 0, %after_bb676.us ]
  br i1 %5212, label %true_bb680.us, label %after_bb682.us

true_bb680.us:                                    ; preds = %after_bb679.us
  %5521 = sdiv i32 24, %5314
  %5522 = and i32 %5521, %5318
  %5523 = add nsw i32 %5522, %5382
  %5524 = getelementptr inbounds i8, i8* %8, i32 %5523
  %5525 = load i8, i8* %5524, align 1, !tbaa !127
  br label %after_bb682.us

after_bb682.us:                                   ; preds = %true_bb680.us, %after_bb679.us
  %5526 = phi i8 [ %5525, %true_bb680.us ], [ 0, %after_bb679.us ]
  br i1 %5213, label %true_bb683.us, label %after_bb685.us

true_bb683.us:                                    ; preds = %after_bb682.us
  %5527 = sdiv i32 25, %5314
  %5528 = and i32 %5527, %5318
  %5529 = add nsw i32 %5528, %5382
  %5530 = getelementptr inbounds i8, i8* %8, i32 %5529
  %5531 = load i8, i8* %5530, align 1, !tbaa !127
  br label %after_bb685.us

after_bb685.us:                                   ; preds = %true_bb683.us, %after_bb682.us
  %5532 = phi i8 [ %5531, %true_bb683.us ], [ 0, %after_bb682.us ]
  br i1 %5214, label %true_bb686.us, label %after_bb688.us

true_bb686.us:                                    ; preds = %after_bb685.us
  %5533 = sdiv i32 26, %5314
  %5534 = and i32 %5533, %5318
  %5535 = add nsw i32 %5534, %5382
  %5536 = getelementptr inbounds i8, i8* %8, i32 %5535
  %5537 = load i8, i8* %5536, align 1, !tbaa !127
  br label %after_bb688.us

after_bb688.us:                                   ; preds = %true_bb686.us, %after_bb685.us
  %5538 = phi i8 [ %5537, %true_bb686.us ], [ 0, %after_bb685.us ]
  br i1 %5215, label %true_bb689.us, label %after_bb691.us

true_bb689.us:                                    ; preds = %after_bb688.us
  %5539 = sdiv i32 27, %5314
  %5540 = and i32 %5539, %5318
  %5541 = add nsw i32 %5540, %5382
  %5542 = getelementptr inbounds i8, i8* %8, i32 %5541
  %5543 = load i8, i8* %5542, align 1, !tbaa !127
  br label %after_bb691.us

after_bb691.us:                                   ; preds = %true_bb689.us, %after_bb688.us
  %5544 = phi i8 [ %5543, %true_bb689.us ], [ 0, %after_bb688.us ]
  br i1 %5216, label %true_bb692.us, label %after_bb694.us

true_bb692.us:                                    ; preds = %after_bb691.us
  %5545 = sdiv i32 28, %5314
  %5546 = and i32 %5545, %5318
  %5547 = add nsw i32 %5546, %5382
  %5548 = getelementptr inbounds i8, i8* %8, i32 %5547
  %5549 = load i8, i8* %5548, align 1, !tbaa !127
  br label %after_bb694.us

after_bb694.us:                                   ; preds = %true_bb692.us, %after_bb691.us
  %5550 = phi i8 [ %5549, %true_bb692.us ], [ 0, %after_bb691.us ]
  br i1 %5217, label %true_bb695.us, label %after_bb697.us

true_bb695.us:                                    ; preds = %after_bb694.us
  %5551 = sdiv i32 29, %5314
  %5552 = and i32 %5551, %5318
  %5553 = add nsw i32 %5552, %5382
  %5554 = getelementptr inbounds i8, i8* %8, i32 %5553
  %5555 = load i8, i8* %5554, align 1, !tbaa !127
  br label %after_bb697.us

after_bb697.us:                                   ; preds = %true_bb695.us, %after_bb694.us
  %5556 = phi i8 [ %5555, %true_bb695.us ], [ 0, %after_bb694.us ]
  br i1 %5218, label %true_bb698.us, label %after_bb700.us

true_bb698.us:                                    ; preds = %after_bb697.us
  %5557 = sdiv i32 30, %5314
  %5558 = and i32 %5557, %5318
  %5559 = add nsw i32 %5558, %5382
  %5560 = getelementptr inbounds i8, i8* %8, i32 %5559
  %5561 = load i8, i8* %5560, align 1, !tbaa !127
  br label %after_bb700.us

after_bb700.us:                                   ; preds = %true_bb698.us, %after_bb697.us
  %5562 = phi i8 [ %5561, %true_bb698.us ], [ 0, %after_bb697.us ]
  br i1 %5219, label %true_bb701.us, label %after_bb703.us

true_bb701.us:                                    ; preds = %after_bb700.us
  %5563 = sdiv i32 31, %5314
  %5564 = and i32 %5563, %5318
  %5565 = add nsw i32 %5564, %5382
  %5566 = getelementptr inbounds i8, i8* %8, i32 %5565
  %5567 = load i8, i8* %5566, align 1, !tbaa !127
  br label %after_bb703.us

after_bb703.us:                                   ; preds = %true_bb701.us, %after_bb700.us
  %5568 = phi i8 [ %5567, %true_bb701.us ], [ 0, %after_bb700.us ]
  br i1 %5220, label %true_bb704.us, label %after_bb706.us

true_bb704.us:                                    ; preds = %after_bb703.us
  %5569 = sdiv i32 32, %5314
  %5570 = and i32 %5569, %5318
  %5571 = add nsw i32 %5570, %5382
  %5572 = getelementptr inbounds i8, i8* %8, i32 %5571
  %5573 = load i8, i8* %5572, align 1, !tbaa !127
  br label %after_bb706.us

after_bb706.us:                                   ; preds = %true_bb704.us, %after_bb703.us
  %5574 = phi i8 [ %5573, %true_bb704.us ], [ 0, %after_bb703.us ]
  br i1 %5221, label %true_bb707.us, label %after_bb709.us

true_bb707.us:                                    ; preds = %after_bb706.us
  %5575 = sdiv i32 33, %5314
  %5576 = and i32 %5575, %5318
  %5577 = add nsw i32 %5576, %5382
  %5578 = getelementptr inbounds i8, i8* %8, i32 %5577
  %5579 = load i8, i8* %5578, align 1, !tbaa !127
  br label %after_bb709.us

after_bb709.us:                                   ; preds = %true_bb707.us, %after_bb706.us
  %5580 = phi i8 [ %5579, %true_bb707.us ], [ 0, %after_bb706.us ]
  br i1 %5222, label %true_bb710.us, label %after_bb712.us

true_bb710.us:                                    ; preds = %after_bb709.us
  %5581 = sdiv i32 34, %5314
  %5582 = and i32 %5581, %5318
  %5583 = add nsw i32 %5582, %5382
  %5584 = getelementptr inbounds i8, i8* %8, i32 %5583
  %5585 = load i8, i8* %5584, align 1, !tbaa !127
  br label %after_bb712.us

after_bb712.us:                                   ; preds = %true_bb710.us, %after_bb709.us
  %5586 = phi i8 [ %5585, %true_bb710.us ], [ 0, %after_bb709.us ]
  br i1 %5223, label %true_bb713.us, label %after_bb715.us

true_bb713.us:                                    ; preds = %after_bb712.us
  %5587 = sdiv i32 35, %5314
  %5588 = and i32 %5587, %5318
  %5589 = add nsw i32 %5588, %5382
  %5590 = getelementptr inbounds i8, i8* %8, i32 %5589
  %5591 = load i8, i8* %5590, align 1, !tbaa !127
  br label %after_bb715.us

after_bb715.us:                                   ; preds = %true_bb713.us, %after_bb712.us
  %5592 = phi i8 [ %5591, %true_bb713.us ], [ 0, %after_bb712.us ]
  br i1 %5224, label %true_bb716.us, label %after_bb718.us

true_bb716.us:                                    ; preds = %after_bb715.us
  %5593 = sdiv i32 36, %5314
  %5594 = and i32 %5593, %5318
  %5595 = add nsw i32 %5594, %5382
  %5596 = getelementptr inbounds i8, i8* %8, i32 %5595
  %5597 = load i8, i8* %5596, align 1, !tbaa !127
  br label %after_bb718.us

after_bb718.us:                                   ; preds = %true_bb716.us, %after_bb715.us
  %5598 = phi i8 [ %5597, %true_bb716.us ], [ 0, %after_bb715.us ]
  br i1 %5225, label %true_bb719.us, label %after_bb721.us

true_bb719.us:                                    ; preds = %after_bb718.us
  %5599 = sdiv i32 37, %5314
  %5600 = and i32 %5599, %5318
  %5601 = add nsw i32 %5600, %5382
  %5602 = getelementptr inbounds i8, i8* %8, i32 %5601
  %5603 = load i8, i8* %5602, align 1, !tbaa !127
  br label %after_bb721.us

after_bb721.us:                                   ; preds = %true_bb719.us, %after_bb718.us
  %5604 = phi i8 [ %5603, %true_bb719.us ], [ 0, %after_bb718.us ]
  br i1 %5226, label %true_bb722.us, label %after_bb724.us

true_bb722.us:                                    ; preds = %after_bb721.us
  %5605 = sdiv i32 38, %5314
  %5606 = and i32 %5605, %5318
  %5607 = add nsw i32 %5606, %5382
  %5608 = getelementptr inbounds i8, i8* %8, i32 %5607
  %5609 = load i8, i8* %5608, align 1, !tbaa !127
  br label %after_bb724.us

after_bb724.us:                                   ; preds = %true_bb722.us, %after_bb721.us
  %5610 = phi i8 [ %5609, %true_bb722.us ], [ 0, %after_bb721.us ]
  br i1 %5227, label %true_bb725.us, label %after_bb727.us

true_bb725.us:                                    ; preds = %after_bb724.us
  %5611 = sdiv i32 39, %5314
  %5612 = and i32 %5611, %5318
  %5613 = add nsw i32 %5612, %5382
  %5614 = getelementptr inbounds i8, i8* %8, i32 %5613
  %5615 = load i8, i8* %5614, align 1, !tbaa !127
  br label %after_bb727.us

after_bb727.us:                                   ; preds = %true_bb725.us, %after_bb724.us
  %5616 = phi i8 [ %5615, %true_bb725.us ], [ 0, %after_bb724.us ]
  br i1 %5228, label %true_bb728.us, label %after_bb730.us

true_bb728.us:                                    ; preds = %after_bb727.us
  %5617 = sdiv i32 40, %5314
  %5618 = and i32 %5617, %5318
  %5619 = add nsw i32 %5618, %5382
  %5620 = getelementptr inbounds i8, i8* %8, i32 %5619
  %5621 = load i8, i8* %5620, align 1, !tbaa !127
  br label %after_bb730.us

after_bb730.us:                                   ; preds = %true_bb728.us, %after_bb727.us
  %5622 = phi i8 [ %5621, %true_bb728.us ], [ 0, %after_bb727.us ]
  br i1 %5229, label %true_bb731.us, label %after_bb733.us

true_bb731.us:                                    ; preds = %after_bb730.us
  %5623 = sdiv i32 41, %5314
  %5624 = and i32 %5623, %5318
  %5625 = add nsw i32 %5624, %5382
  %5626 = getelementptr inbounds i8, i8* %8, i32 %5625
  %5627 = load i8, i8* %5626, align 1, !tbaa !127
  br label %after_bb733.us

after_bb733.us:                                   ; preds = %true_bb731.us, %after_bb730.us
  %5628 = phi i8 [ %5627, %true_bb731.us ], [ 0, %after_bb730.us ]
  br i1 %5230, label %true_bb734.us, label %after_bb736.us

true_bb734.us:                                    ; preds = %after_bb733.us
  %5629 = sdiv i32 42, %5314
  %5630 = and i32 %5629, %5318
  %5631 = add nsw i32 %5630, %5382
  %5632 = getelementptr inbounds i8, i8* %8, i32 %5631
  %5633 = load i8, i8* %5632, align 1, !tbaa !127
  br label %after_bb736.us

after_bb736.us:                                   ; preds = %true_bb734.us, %after_bb733.us
  %5634 = phi i8 [ %5633, %true_bb734.us ], [ 0, %after_bb733.us ]
  br i1 %5231, label %true_bb737.us, label %after_bb739.us

true_bb737.us:                                    ; preds = %after_bb736.us
  %5635 = sdiv i32 43, %5314
  %5636 = and i32 %5635, %5318
  %5637 = add nsw i32 %5636, %5382
  %5638 = getelementptr inbounds i8, i8* %8, i32 %5637
  %5639 = load i8, i8* %5638, align 1, !tbaa !127
  br label %after_bb739.us

after_bb739.us:                                   ; preds = %true_bb737.us, %after_bb736.us
  %5640 = phi i8 [ %5639, %true_bb737.us ], [ 0, %after_bb736.us ]
  br i1 %5232, label %true_bb740.us, label %after_bb742.us

true_bb740.us:                                    ; preds = %after_bb739.us
  %5641 = sdiv i32 44, %5314
  %5642 = and i32 %5641, %5318
  %5643 = add nsw i32 %5642, %5382
  %5644 = getelementptr inbounds i8, i8* %8, i32 %5643
  %5645 = load i8, i8* %5644, align 1, !tbaa !127
  br label %after_bb742.us

after_bb742.us:                                   ; preds = %true_bb740.us, %after_bb739.us
  %5646 = phi i8 [ %5645, %true_bb740.us ], [ 0, %after_bb739.us ]
  br i1 %5233, label %true_bb743.us, label %after_bb745.us

true_bb743.us:                                    ; preds = %after_bb742.us
  %5647 = sdiv i32 45, %5314
  %5648 = and i32 %5647, %5318
  %5649 = add nsw i32 %5648, %5382
  %5650 = getelementptr inbounds i8, i8* %8, i32 %5649
  %5651 = load i8, i8* %5650, align 1, !tbaa !127
  br label %after_bb745.us

after_bb745.us:                                   ; preds = %true_bb743.us, %after_bb742.us
  %5652 = phi i8 [ %5651, %true_bb743.us ], [ 0, %after_bb742.us ]
  br i1 %5234, label %true_bb746.us, label %after_bb748.us

true_bb746.us:                                    ; preds = %after_bb745.us
  %5653 = sdiv i32 46, %5314
  %5654 = and i32 %5653, %5318
  %5655 = add nsw i32 %5654, %5382
  %5656 = getelementptr inbounds i8, i8* %8, i32 %5655
  %5657 = load i8, i8* %5656, align 1, !tbaa !127
  br label %after_bb748.us

after_bb748.us:                                   ; preds = %true_bb746.us, %after_bb745.us
  %5658 = phi i8 [ %5657, %true_bb746.us ], [ 0, %after_bb745.us ]
  br i1 %5235, label %true_bb749.us, label %after_bb751.us

true_bb749.us:                                    ; preds = %after_bb748.us
  %5659 = sdiv i32 47, %5314
  %5660 = and i32 %5659, %5318
  %5661 = add nsw i32 %5660, %5382
  %5662 = getelementptr inbounds i8, i8* %8, i32 %5661
  %5663 = load i8, i8* %5662, align 1, !tbaa !127
  br label %after_bb751.us

after_bb751.us:                                   ; preds = %true_bb749.us, %after_bb748.us
  %5664 = phi i8 [ %5663, %true_bb749.us ], [ 0, %after_bb748.us ]
  br i1 %5236, label %true_bb752.us, label %after_bb754.us

true_bb752.us:                                    ; preds = %after_bb751.us
  %5665 = sdiv i32 48, %5314
  %5666 = and i32 %5665, %5318
  %5667 = add nsw i32 %5666, %5382
  %5668 = getelementptr inbounds i8, i8* %8, i32 %5667
  %5669 = load i8, i8* %5668, align 1, !tbaa !127
  br label %after_bb754.us

after_bb754.us:                                   ; preds = %true_bb752.us, %after_bb751.us
  %5670 = phi i8 [ %5669, %true_bb752.us ], [ 0, %after_bb751.us ]
  br i1 %5237, label %true_bb755.us, label %after_bb757.us

true_bb755.us:                                    ; preds = %after_bb754.us
  %5671 = sdiv i32 49, %5314
  %5672 = and i32 %5671, %5318
  %5673 = add nsw i32 %5672, %5382
  %5674 = getelementptr inbounds i8, i8* %8, i32 %5673
  %5675 = load i8, i8* %5674, align 1, !tbaa !127
  br label %after_bb757.us

after_bb757.us:                                   ; preds = %true_bb755.us, %after_bb754.us
  %5676 = phi i8 [ %5675, %true_bb755.us ], [ 0, %after_bb754.us ]
  br i1 %5238, label %true_bb758.us, label %after_bb760.us

true_bb758.us:                                    ; preds = %after_bb757.us
  %5677 = sdiv i32 50, %5314
  %5678 = and i32 %5677, %5318
  %5679 = add nsw i32 %5678, %5382
  %5680 = getelementptr inbounds i8, i8* %8, i32 %5679
  %5681 = load i8, i8* %5680, align 1, !tbaa !127
  br label %after_bb760.us

after_bb760.us:                                   ; preds = %true_bb758.us, %after_bb757.us
  %5682 = phi i8 [ %5681, %true_bb758.us ], [ 0, %after_bb757.us ]
  br i1 %5239, label %true_bb761.us, label %after_bb763.us

true_bb761.us:                                    ; preds = %after_bb760.us
  %5683 = sdiv i32 51, %5314
  %5684 = and i32 %5683, %5318
  %5685 = add nsw i32 %5684, %5382
  %5686 = getelementptr inbounds i8, i8* %8, i32 %5685
  %5687 = load i8, i8* %5686, align 1, !tbaa !127
  br label %after_bb763.us

after_bb763.us:                                   ; preds = %true_bb761.us, %after_bb760.us
  %5688 = phi i8 [ %5687, %true_bb761.us ], [ 0, %after_bb760.us ]
  br i1 %5240, label %true_bb764.us, label %after_bb766.us

true_bb764.us:                                    ; preds = %after_bb763.us
  %5689 = sdiv i32 52, %5314
  %5690 = and i32 %5689, %5318
  %5691 = add nsw i32 %5690, %5382
  %5692 = getelementptr inbounds i8, i8* %8, i32 %5691
  %5693 = load i8, i8* %5692, align 1, !tbaa !127
  br label %after_bb766.us

after_bb766.us:                                   ; preds = %true_bb764.us, %after_bb763.us
  %5694 = phi i8 [ %5693, %true_bb764.us ], [ 0, %after_bb763.us ]
  br i1 %5241, label %true_bb767.us, label %after_bb769.us

true_bb767.us:                                    ; preds = %after_bb766.us
  %5695 = sdiv i32 53, %5314
  %5696 = and i32 %5695, %5318
  %5697 = add nsw i32 %5696, %5382
  %5698 = getelementptr inbounds i8, i8* %8, i32 %5697
  %5699 = load i8, i8* %5698, align 1, !tbaa !127
  br label %after_bb769.us

after_bb769.us:                                   ; preds = %true_bb767.us, %after_bb766.us
  %5700 = phi i8 [ %5699, %true_bb767.us ], [ 0, %after_bb766.us ]
  br i1 %5242, label %true_bb770.us, label %after_bb772.us

true_bb770.us:                                    ; preds = %after_bb769.us
  %5701 = sdiv i32 54, %5314
  %5702 = and i32 %5701, %5318
  %5703 = add nsw i32 %5702, %5382
  %5704 = getelementptr inbounds i8, i8* %8, i32 %5703
  %5705 = load i8, i8* %5704, align 1, !tbaa !127
  br label %after_bb772.us

after_bb772.us:                                   ; preds = %true_bb770.us, %after_bb769.us
  %5706 = phi i8 [ %5705, %true_bb770.us ], [ 0, %after_bb769.us ]
  br i1 %5243, label %true_bb773.us, label %after_bb775.us

true_bb773.us:                                    ; preds = %after_bb772.us
  %5707 = sdiv i32 55, %5314
  %5708 = and i32 %5707, %5318
  %5709 = add nsw i32 %5708, %5382
  %5710 = getelementptr inbounds i8, i8* %8, i32 %5709
  %5711 = load i8, i8* %5710, align 1, !tbaa !127
  br label %after_bb775.us

after_bb775.us:                                   ; preds = %true_bb773.us, %after_bb772.us
  %5712 = phi i8 [ %5711, %true_bb773.us ], [ 0, %after_bb772.us ]
  br i1 %5244, label %true_bb776.us, label %after_bb778.us

true_bb776.us:                                    ; preds = %after_bb775.us
  %5713 = sdiv i32 56, %5314
  %5714 = and i32 %5713, %5318
  %5715 = add nsw i32 %5714, %5382
  %5716 = getelementptr inbounds i8, i8* %8, i32 %5715
  %5717 = load i8, i8* %5716, align 1, !tbaa !127
  br label %after_bb778.us

after_bb778.us:                                   ; preds = %true_bb776.us, %after_bb775.us
  %5718 = phi i8 [ %5717, %true_bb776.us ], [ 0, %after_bb775.us ]
  br i1 %5245, label %true_bb779.us, label %after_bb781.us

true_bb779.us:                                    ; preds = %after_bb778.us
  %5719 = sdiv i32 57, %5314
  %5720 = and i32 %5719, %5318
  %5721 = add nsw i32 %5720, %5382
  %5722 = getelementptr inbounds i8, i8* %8, i32 %5721
  %5723 = load i8, i8* %5722, align 1, !tbaa !127
  br label %after_bb781.us

after_bb781.us:                                   ; preds = %true_bb779.us, %after_bb778.us
  %5724 = phi i8 [ %5723, %true_bb779.us ], [ 0, %after_bb778.us ]
  br i1 %5246, label %true_bb782.us, label %after_bb784.us

true_bb782.us:                                    ; preds = %after_bb781.us
  %5725 = sdiv i32 58, %5314
  %5726 = and i32 %5725, %5318
  %5727 = add nsw i32 %5726, %5382
  %5728 = getelementptr inbounds i8, i8* %8, i32 %5727
  %5729 = load i8, i8* %5728, align 1, !tbaa !127
  br label %after_bb784.us

after_bb784.us:                                   ; preds = %true_bb782.us, %after_bb781.us
  %5730 = phi i8 [ %5729, %true_bb782.us ], [ 0, %after_bb781.us ]
  br i1 %5247, label %true_bb785.us, label %after_bb787.us

true_bb785.us:                                    ; preds = %after_bb784.us
  %5731 = sdiv i32 59, %5314
  %5732 = and i32 %5731, %5318
  %5733 = add nsw i32 %5732, %5382
  %5734 = getelementptr inbounds i8, i8* %8, i32 %5733
  %5735 = load i8, i8* %5734, align 1, !tbaa !127
  br label %after_bb787.us

after_bb787.us:                                   ; preds = %true_bb785.us, %after_bb784.us
  %5736 = phi i8 [ %5735, %true_bb785.us ], [ 0, %after_bb784.us ]
  br i1 %5248, label %true_bb788.us, label %after_bb790.us

true_bb788.us:                                    ; preds = %after_bb787.us
  %5737 = sdiv i32 60, %5314
  %5738 = and i32 %5737, %5318
  %5739 = add nsw i32 %5738, %5382
  %5740 = getelementptr inbounds i8, i8* %8, i32 %5739
  %5741 = load i8, i8* %5740, align 1, !tbaa !127
  br label %after_bb790.us

after_bb790.us:                                   ; preds = %true_bb788.us, %after_bb787.us
  %5742 = phi i8 [ %5741, %true_bb788.us ], [ 0, %after_bb787.us ]
  br i1 %5249, label %true_bb791.us, label %after_bb793.us

true_bb791.us:                                    ; preds = %after_bb790.us
  %5743 = sdiv i32 61, %5314
  %5744 = and i32 %5743, %5318
  %5745 = add nsw i32 %5744, %5382
  %5746 = getelementptr inbounds i8, i8* %8, i32 %5745
  %5747 = load i8, i8* %5746, align 1, !tbaa !127
  br label %after_bb793.us

after_bb793.us:                                   ; preds = %true_bb791.us, %after_bb790.us
  %5748 = phi i8 [ %5747, %true_bb791.us ], [ 0, %after_bb790.us ]
  br i1 %5250, label %true_bb794.us, label %after_bb796.us

true_bb794.us:                                    ; preds = %after_bb793.us
  %5749 = sdiv i32 62, %5314
  %5750 = and i32 %5749, %5318
  %5751 = add nsw i32 %5750, %5382
  %5752 = getelementptr inbounds i8, i8* %8, i32 %5751
  %5753 = load i8, i8* %5752, align 1, !tbaa !127
  br label %after_bb796.us

after_bb796.us:                                   ; preds = %true_bb794.us, %after_bb793.us
  %5754 = phi i8 [ %5753, %true_bb794.us ], [ 0, %after_bb793.us ]
  br i1 %t2398, label %true_bb797.us, label %after_bb799.us

true_bb797.us:                                    ; preds = %after_bb796.us
  %5755 = sdiv i32 63, %5314
  %5756 = and i32 %5755, %5318
  %5757 = add nsw i32 %5756, %5382
  %5758 = getelementptr inbounds i8, i8* %8, i32 %5757
  %5759 = load i8, i8* %5758, align 1, !tbaa !127
  br label %after_bb799.us

after_bb799.us:                                   ; preds = %true_bb797.us, %after_bb796.us
  %5760 = phi i8 [ %5759, %true_bb797.us ], [ 0, %after_bb796.us ]
  %5761 = insertelement <128 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %5384, i32 0
  %5762 = insertelement <128 x i8> %5761, i8 %5388, i32 1
  %5763 = insertelement <128 x i8> %5762, i8 %5394, i32 2
  %5764 = insertelement <128 x i8> %5763, i8 %5400, i32 3
  %5765 = insertelement <128 x i8> %5764, i8 %5406, i32 4
  %5766 = insertelement <128 x i8> %5765, i8 %5412, i32 5
  %5767 = insertelement <128 x i8> %5766, i8 %5418, i32 6
  %5768 = insertelement <128 x i8> %5767, i8 %5424, i32 7
  %5769 = insertelement <128 x i8> %5768, i8 %5430, i32 8
  %5770 = insertelement <128 x i8> %5769, i8 %5436, i32 9
  %5771 = insertelement <128 x i8> %5770, i8 %5442, i32 10
  %5772 = insertelement <128 x i8> %5771, i8 %5448, i32 11
  %5773 = insertelement <128 x i8> %5772, i8 %5454, i32 12
  %5774 = insertelement <128 x i8> %5773, i8 %5460, i32 13
  %5775 = insertelement <128 x i8> %5774, i8 %5466, i32 14
  %5776 = insertelement <128 x i8> %5775, i8 %5472, i32 15
  %5777 = insertelement <128 x i8> %5776, i8 %5478, i32 16
  %5778 = insertelement <128 x i8> %5777, i8 %5484, i32 17
  %5779 = insertelement <128 x i8> %5778, i8 %5490, i32 18
  %5780 = insertelement <128 x i8> %5779, i8 %5496, i32 19
  %5781 = insertelement <128 x i8> %5780, i8 %5502, i32 20
  %5782 = insertelement <128 x i8> %5781, i8 %5508, i32 21
  %5783 = insertelement <128 x i8> %5782, i8 %5514, i32 22
  %5784 = insertelement <128 x i8> %5783, i8 %5520, i32 23
  %5785 = insertelement <128 x i8> %5784, i8 %5526, i32 24
  %5786 = insertelement <128 x i8> %5785, i8 %5532, i32 25
  %5787 = insertelement <128 x i8> %5786, i8 %5538, i32 26
  %5788 = insertelement <128 x i8> %5787, i8 %5544, i32 27
  %5789 = insertelement <128 x i8> %5788, i8 %5550, i32 28
  %5790 = insertelement <128 x i8> %5789, i8 %5556, i32 29
  %5791 = insertelement <128 x i8> %5790, i8 %5562, i32 30
  %5792 = insertelement <128 x i8> %5791, i8 %5568, i32 31
  %5793 = insertelement <128 x i8> %5792, i8 %5574, i32 32
  %5794 = insertelement <128 x i8> %5793, i8 %5580, i32 33
  %5795 = insertelement <128 x i8> %5794, i8 %5586, i32 34
  %5796 = insertelement <128 x i8> %5795, i8 %5592, i32 35
  %5797 = insertelement <128 x i8> %5796, i8 %5598, i32 36
  %5798 = insertelement <128 x i8> %5797, i8 %5604, i32 37
  %5799 = insertelement <128 x i8> %5798, i8 %5610, i32 38
  %5800 = insertelement <128 x i8> %5799, i8 %5616, i32 39
  %5801 = insertelement <128 x i8> %5800, i8 %5622, i32 40
  %5802 = insertelement <128 x i8> %5801, i8 %5628, i32 41
  %5803 = insertelement <128 x i8> %5802, i8 %5634, i32 42
  %5804 = insertelement <128 x i8> %5803, i8 %5640, i32 43
  %5805 = insertelement <128 x i8> %5804, i8 %5646, i32 44
  %5806 = insertelement <128 x i8> %5805, i8 %5652, i32 45
  %5807 = insertelement <128 x i8> %5806, i8 %5658, i32 46
  %5808 = insertelement <128 x i8> %5807, i8 %5664, i32 47
  %5809 = insertelement <128 x i8> %5808, i8 %5670, i32 48
  %5810 = insertelement <128 x i8> %5809, i8 %5676, i32 49
  %5811 = insertelement <128 x i8> %5810, i8 %5682, i32 50
  %5812 = insertelement <128 x i8> %5811, i8 %5688, i32 51
  %5813 = insertelement <128 x i8> %5812, i8 %5694, i32 52
  %5814 = insertelement <128 x i8> %5813, i8 %5700, i32 53
  %5815 = insertelement <128 x i8> %5814, i8 %5706, i32 54
  %5816 = insertelement <128 x i8> %5815, i8 %5712, i32 55
  %5817 = insertelement <128 x i8> %5816, i8 %5718, i32 56
  %5818 = insertelement <128 x i8> %5817, i8 %5724, i32 57
  %5819 = insertelement <128 x i8> %5818, i8 %5730, i32 58
  %5820 = insertelement <128 x i8> %5819, i8 %5736, i32 59
  %5821 = insertelement <128 x i8> %5820, i8 %5742, i32 60
  %5822 = insertelement <128 x i8> %5821, i8 %5748, i32 61
  %5823 = insertelement <128 x i8> %5822, i8 %5754, i32 62
  %5824 = insertelement <128 x i8> %5823, i8 %5760, i32 63
  %5825 = bitcast <128 x i8> %5824 to <16 x i64>
  %5826 = shufflevector <16 x i64> %5825, <16 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5827 = bitcast <8 x i64> %5826 to <64 x i8>
  %5828 = add nsw i32 %t2453.us, %resampled_input.s0.x.rebased223.us
  %5829 = shl nsw i32 %5828, 7
  %5830 = getelementptr inbounds i8, i8* %resampled_input207, i32 %5829
  %5831 = bitcast i8* %5830 to <64 x i8>*
  call void @llvm.masked.store.v64i8.p0v64i8(<64 x i8> %5827, <64 x i8>* %5831, i32 128, <64 x i1> %4911), !tbaa !129
  br i1 %5189, label %true_bb1379.us, label %after_bb1381.us

true_bb1379.us:                                   ; preds = %after_bb799.us
  %5832 = add nsw i32 %5382, %5319
  %5833 = getelementptr inbounds i8, i8* %8, i32 %5832
  %5834 = load i8, i8* %5833, align 1, !tbaa !127
  br label %after_bb1381.us

after_bb1381.us:                                  ; preds = %true_bb1379.us, %after_bb799.us
  %5835 = phi i8 [ %5834, %true_bb1379.us ], [ 0, %after_bb799.us ]
  br i1 %5190, label %true_bb1382.us, label %after_bb1384.us

true_bb1382.us:                                   ; preds = %after_bb1381.us
  %5836 = sdiv i32 2, %5314
  %5837 = and i32 %5836, %5318
  %5838 = add nsw i32 %5837, %5382
  %5839 = getelementptr inbounds i8, i8* %8, i32 %5838
  %5840 = load i8, i8* %5839, align 1, !tbaa !127
  br label %after_bb1384.us

after_bb1384.us:                                  ; preds = %true_bb1382.us, %after_bb1381.us
  %5841 = phi i8 [ %5840, %true_bb1382.us ], [ 0, %after_bb1381.us ]
  br i1 %5191, label %true_bb1385.us, label %after_bb1387.us

true_bb1385.us:                                   ; preds = %after_bb1384.us
  %5842 = sdiv i32 3, %5314
  %5843 = and i32 %5842, %5318
  %5844 = add nsw i32 %5843, %5382
  %5845 = getelementptr inbounds i8, i8* %8, i32 %5844
  %5846 = load i8, i8* %5845, align 1, !tbaa !127
  br label %after_bb1387.us

after_bb1387.us:                                  ; preds = %true_bb1385.us, %after_bb1384.us
  %5847 = phi i8 [ %5846, %true_bb1385.us ], [ 0, %after_bb1384.us ]
  br i1 %5192, label %true_bb1388.us, label %after_bb1390.us

true_bb1388.us:                                   ; preds = %after_bb1387.us
  %5848 = sdiv i32 4, %5314
  %5849 = and i32 %5848, %5318
  %5850 = add nsw i32 %5849, %5382
  %5851 = getelementptr inbounds i8, i8* %8, i32 %5850
  %5852 = load i8, i8* %5851, align 1, !tbaa !127
  br label %after_bb1390.us

after_bb1390.us:                                  ; preds = %true_bb1388.us, %after_bb1387.us
  %5853 = phi i8 [ %5852, %true_bb1388.us ], [ 0, %after_bb1387.us ]
  br i1 %5193, label %true_bb1391.us, label %after_bb1393.us

true_bb1391.us:                                   ; preds = %after_bb1390.us
  %5854 = sdiv i32 5, %5314
  %5855 = and i32 %5854, %5318
  %5856 = add nsw i32 %5855, %5382
  %5857 = getelementptr inbounds i8, i8* %8, i32 %5856
  %5858 = load i8, i8* %5857, align 1, !tbaa !127
  br label %after_bb1393.us

after_bb1393.us:                                  ; preds = %true_bb1391.us, %after_bb1390.us
  %5859 = phi i8 [ %5858, %true_bb1391.us ], [ 0, %after_bb1390.us ]
  br i1 %5194, label %true_bb1394.us, label %after_bb1396.us

true_bb1394.us:                                   ; preds = %after_bb1393.us
  %5860 = sdiv i32 6, %5314
  %5861 = and i32 %5860, %5318
  %5862 = add nsw i32 %5861, %5382
  %5863 = getelementptr inbounds i8, i8* %8, i32 %5862
  %5864 = load i8, i8* %5863, align 1, !tbaa !127
  br label %after_bb1396.us

after_bb1396.us:                                  ; preds = %true_bb1394.us, %after_bb1393.us
  %5865 = phi i8 [ %5864, %true_bb1394.us ], [ 0, %after_bb1393.us ]
  br i1 %5195, label %true_bb1397.us, label %after_bb1399.us

true_bb1397.us:                                   ; preds = %after_bb1396.us
  %5866 = sdiv i32 7, %5314
  %5867 = and i32 %5866, %5318
  %5868 = add nsw i32 %5867, %5382
  %5869 = getelementptr inbounds i8, i8* %8, i32 %5868
  %5870 = load i8, i8* %5869, align 1, !tbaa !127
  br label %after_bb1399.us

after_bb1399.us:                                  ; preds = %true_bb1397.us, %after_bb1396.us
  %5871 = phi i8 [ %5870, %true_bb1397.us ], [ 0, %after_bb1396.us ]
  br i1 %5196, label %true_bb1400.us, label %after_bb1402.us

true_bb1400.us:                                   ; preds = %after_bb1399.us
  %5872 = sdiv i32 8, %5314
  %5873 = and i32 %5872, %5318
  %5874 = add nsw i32 %5873, %5382
  %5875 = getelementptr inbounds i8, i8* %8, i32 %5874
  %5876 = load i8, i8* %5875, align 1, !tbaa !127
  br label %after_bb1402.us

after_bb1402.us:                                  ; preds = %true_bb1400.us, %after_bb1399.us
  %5877 = phi i8 [ %5876, %true_bb1400.us ], [ 0, %after_bb1399.us ]
  br i1 %5197, label %true_bb1403.us, label %after_bb1405.us

true_bb1403.us:                                   ; preds = %after_bb1402.us
  %5878 = sdiv i32 9, %5314
  %5879 = and i32 %5878, %5318
  %5880 = add nsw i32 %5879, %5382
  %5881 = getelementptr inbounds i8, i8* %8, i32 %5880
  %5882 = load i8, i8* %5881, align 1, !tbaa !127
  br label %after_bb1405.us

after_bb1405.us:                                  ; preds = %true_bb1403.us, %after_bb1402.us
  %5883 = phi i8 [ %5882, %true_bb1403.us ], [ 0, %after_bb1402.us ]
  br i1 %5198, label %true_bb1406.us, label %after_bb1408.us

true_bb1406.us:                                   ; preds = %after_bb1405.us
  %5884 = sdiv i32 10, %5314
  %5885 = and i32 %5884, %5318
  %5886 = add nsw i32 %5885, %5382
  %5887 = getelementptr inbounds i8, i8* %8, i32 %5886
  %5888 = load i8, i8* %5887, align 1, !tbaa !127
  br label %after_bb1408.us

after_bb1408.us:                                  ; preds = %true_bb1406.us, %after_bb1405.us
  %5889 = phi i8 [ %5888, %true_bb1406.us ], [ 0, %after_bb1405.us ]
  br i1 %5199, label %true_bb1409.us, label %after_bb1411.us

true_bb1409.us:                                   ; preds = %after_bb1408.us
  %5890 = sdiv i32 11, %5314
  %5891 = and i32 %5890, %5318
  %5892 = add nsw i32 %5891, %5382
  %5893 = getelementptr inbounds i8, i8* %8, i32 %5892
  %5894 = load i8, i8* %5893, align 1, !tbaa !127
  br label %after_bb1411.us

after_bb1411.us:                                  ; preds = %true_bb1409.us, %after_bb1408.us
  %5895 = phi i8 [ %5894, %true_bb1409.us ], [ 0, %after_bb1408.us ]
  br i1 %5200, label %true_bb1412.us, label %after_bb1414.us

true_bb1412.us:                                   ; preds = %after_bb1411.us
  %5896 = sdiv i32 12, %5314
  %5897 = and i32 %5896, %5318
  %5898 = add nsw i32 %5897, %5382
  %5899 = getelementptr inbounds i8, i8* %8, i32 %5898
  %5900 = load i8, i8* %5899, align 1, !tbaa !127
  br label %after_bb1414.us

after_bb1414.us:                                  ; preds = %true_bb1412.us, %after_bb1411.us
  %5901 = phi i8 [ %5900, %true_bb1412.us ], [ 0, %after_bb1411.us ]
  br i1 %5201, label %true_bb1415.us, label %after_bb1417.us

true_bb1415.us:                                   ; preds = %after_bb1414.us
  %5902 = sdiv i32 13, %5314
  %5903 = and i32 %5902, %5318
  %5904 = add nsw i32 %5903, %5382
  %5905 = getelementptr inbounds i8, i8* %8, i32 %5904
  %5906 = load i8, i8* %5905, align 1, !tbaa !127
  br label %after_bb1417.us

after_bb1417.us:                                  ; preds = %true_bb1415.us, %after_bb1414.us
  %5907 = phi i8 [ %5906, %true_bb1415.us ], [ 0, %after_bb1414.us ]
  br i1 %5202, label %true_bb1418.us, label %after_bb1420.us

true_bb1418.us:                                   ; preds = %after_bb1417.us
  %5908 = sdiv i32 14, %5314
  %5909 = and i32 %5908, %5318
  %5910 = add nsw i32 %5909, %5382
  %5911 = getelementptr inbounds i8, i8* %8, i32 %5910
  %5912 = load i8, i8* %5911, align 1, !tbaa !127
  br label %after_bb1420.us

after_bb1420.us:                                  ; preds = %true_bb1418.us, %after_bb1417.us
  %5913 = phi i8 [ %5912, %true_bb1418.us ], [ 0, %after_bb1417.us ]
  br i1 %5203, label %true_bb1421.us, label %after_bb1423.us

true_bb1421.us:                                   ; preds = %after_bb1420.us
  %5914 = sdiv i32 15, %5314
  %5915 = and i32 %5914, %5318
  %5916 = add nsw i32 %5915, %5382
  %5917 = getelementptr inbounds i8, i8* %8, i32 %5916
  %5918 = load i8, i8* %5917, align 1, !tbaa !127
  br label %after_bb1423.us

after_bb1423.us:                                  ; preds = %true_bb1421.us, %after_bb1420.us
  %5919 = phi i8 [ %5918, %true_bb1421.us ], [ 0, %after_bb1420.us ]
  br i1 %5204, label %true_bb1424.us, label %after_bb1426.us

true_bb1424.us:                                   ; preds = %after_bb1423.us
  %5920 = sdiv i32 16, %5314
  %5921 = and i32 %5920, %5318
  %5922 = add nsw i32 %5921, %5382
  %5923 = getelementptr inbounds i8, i8* %8, i32 %5922
  %5924 = load i8, i8* %5923, align 1, !tbaa !127
  br label %after_bb1426.us

after_bb1426.us:                                  ; preds = %true_bb1424.us, %after_bb1423.us
  %5925 = phi i8 [ %5924, %true_bb1424.us ], [ 0, %after_bb1423.us ]
  br i1 %5205, label %true_bb1427.us, label %after_bb1429.us

true_bb1427.us:                                   ; preds = %after_bb1426.us
  %5926 = sdiv i32 17, %5314
  %5927 = and i32 %5926, %5318
  %5928 = add nsw i32 %5927, %5382
  %5929 = getelementptr inbounds i8, i8* %8, i32 %5928
  %5930 = load i8, i8* %5929, align 1, !tbaa !127
  br label %after_bb1429.us

after_bb1429.us:                                  ; preds = %true_bb1427.us, %after_bb1426.us
  %5931 = phi i8 [ %5930, %true_bb1427.us ], [ 0, %after_bb1426.us ]
  br i1 %5206, label %true_bb1430.us, label %after_bb1432.us

true_bb1430.us:                                   ; preds = %after_bb1429.us
  %5932 = sdiv i32 18, %5314
  %5933 = and i32 %5932, %5318
  %5934 = add nsw i32 %5933, %5382
  %5935 = getelementptr inbounds i8, i8* %8, i32 %5934
  %5936 = load i8, i8* %5935, align 1, !tbaa !127
  br label %after_bb1432.us

after_bb1432.us:                                  ; preds = %true_bb1430.us, %after_bb1429.us
  %5937 = phi i8 [ %5936, %true_bb1430.us ], [ 0, %after_bb1429.us ]
  br i1 %5207, label %true_bb1433.us, label %after_bb1435.us

true_bb1433.us:                                   ; preds = %after_bb1432.us
  %5938 = sdiv i32 19, %5314
  %5939 = and i32 %5938, %5318
  %5940 = add nsw i32 %5939, %5382
  %5941 = getelementptr inbounds i8, i8* %8, i32 %5940
  %5942 = load i8, i8* %5941, align 1, !tbaa !127
  br label %after_bb1435.us

after_bb1435.us:                                  ; preds = %true_bb1433.us, %after_bb1432.us
  %5943 = phi i8 [ %5942, %true_bb1433.us ], [ 0, %after_bb1432.us ]
  br i1 %5208, label %true_bb1436.us, label %after_bb1438.us

true_bb1436.us:                                   ; preds = %after_bb1435.us
  %5944 = sdiv i32 20, %5314
  %5945 = and i32 %5944, %5318
  %5946 = add nsw i32 %5945, %5382
  %5947 = getelementptr inbounds i8, i8* %8, i32 %5946
  %5948 = load i8, i8* %5947, align 1, !tbaa !127
  br label %after_bb1438.us

after_bb1438.us:                                  ; preds = %true_bb1436.us, %after_bb1435.us
  %5949 = phi i8 [ %5948, %true_bb1436.us ], [ 0, %after_bb1435.us ]
  br i1 %5209, label %true_bb1439.us, label %after_bb1441.us

true_bb1439.us:                                   ; preds = %after_bb1438.us
  %5950 = sdiv i32 21, %5314
  %5951 = and i32 %5950, %5318
  %5952 = add nsw i32 %5951, %5382
  %5953 = getelementptr inbounds i8, i8* %8, i32 %5952
  %5954 = load i8, i8* %5953, align 1, !tbaa !127
  br label %after_bb1441.us

after_bb1441.us:                                  ; preds = %true_bb1439.us, %after_bb1438.us
  %5955 = phi i8 [ %5954, %true_bb1439.us ], [ 0, %after_bb1438.us ]
  br i1 %5210, label %true_bb1442.us, label %after_bb1444.us

true_bb1442.us:                                   ; preds = %after_bb1441.us
  %5956 = sdiv i32 22, %5314
  %5957 = and i32 %5956, %5318
  %5958 = add nsw i32 %5957, %5382
  %5959 = getelementptr inbounds i8, i8* %8, i32 %5958
  %5960 = load i8, i8* %5959, align 1, !tbaa !127
  br label %after_bb1444.us

after_bb1444.us:                                  ; preds = %true_bb1442.us, %after_bb1441.us
  %5961 = phi i8 [ %5960, %true_bb1442.us ], [ 0, %after_bb1441.us ]
  br i1 %5211, label %true_bb1445.us, label %after_bb1447.us

true_bb1445.us:                                   ; preds = %after_bb1444.us
  %5962 = sdiv i32 23, %5314
  %5963 = and i32 %5962, %5318
  %5964 = add nsw i32 %5963, %5382
  %5965 = getelementptr inbounds i8, i8* %8, i32 %5964
  %5966 = load i8, i8* %5965, align 1, !tbaa !127
  br label %after_bb1447.us

after_bb1447.us:                                  ; preds = %true_bb1445.us, %after_bb1444.us
  %5967 = phi i8 [ %5966, %true_bb1445.us ], [ 0, %after_bb1444.us ]
  br i1 %5212, label %true_bb1448.us, label %after_bb1450.us

true_bb1448.us:                                   ; preds = %after_bb1447.us
  %5968 = sdiv i32 24, %5314
  %5969 = and i32 %5968, %5318
  %5970 = add nsw i32 %5969, %5382
  %5971 = getelementptr inbounds i8, i8* %8, i32 %5970
  %5972 = load i8, i8* %5971, align 1, !tbaa !127
  br label %after_bb1450.us

after_bb1450.us:                                  ; preds = %true_bb1448.us, %after_bb1447.us
  %5973 = phi i8 [ %5972, %true_bb1448.us ], [ 0, %after_bb1447.us ]
  br i1 %5213, label %true_bb1451.us, label %after_bb1453.us

true_bb1451.us:                                   ; preds = %after_bb1450.us
  %5974 = sdiv i32 25, %5314
  %5975 = and i32 %5974, %5318
  %5976 = add nsw i32 %5975, %5382
  %5977 = getelementptr inbounds i8, i8* %8, i32 %5976
  %5978 = load i8, i8* %5977, align 1, !tbaa !127
  br label %after_bb1453.us

after_bb1453.us:                                  ; preds = %true_bb1451.us, %after_bb1450.us
  %5979 = phi i8 [ %5978, %true_bb1451.us ], [ 0, %after_bb1450.us ]
  br i1 %5214, label %true_bb1454.us, label %after_bb1456.us

true_bb1454.us:                                   ; preds = %after_bb1453.us
  %5980 = sdiv i32 26, %5314
  %5981 = and i32 %5980, %5318
  %5982 = add nsw i32 %5981, %5382
  %5983 = getelementptr inbounds i8, i8* %8, i32 %5982
  %5984 = load i8, i8* %5983, align 1, !tbaa !127
  br label %after_bb1456.us

after_bb1456.us:                                  ; preds = %true_bb1454.us, %after_bb1453.us
  %5985 = phi i8 [ %5984, %true_bb1454.us ], [ 0, %after_bb1453.us ]
  br i1 %5215, label %true_bb1457.us, label %after_bb1459.us

true_bb1457.us:                                   ; preds = %after_bb1456.us
  %5986 = sdiv i32 27, %5314
  %5987 = and i32 %5986, %5318
  %5988 = add nsw i32 %5987, %5382
  %5989 = getelementptr inbounds i8, i8* %8, i32 %5988
  %5990 = load i8, i8* %5989, align 1, !tbaa !127
  br label %after_bb1459.us

after_bb1459.us:                                  ; preds = %true_bb1457.us, %after_bb1456.us
  %5991 = phi i8 [ %5990, %true_bb1457.us ], [ 0, %after_bb1456.us ]
  br i1 %5216, label %true_bb1460.us, label %after_bb1462.us

true_bb1460.us:                                   ; preds = %after_bb1459.us
  %5992 = sdiv i32 28, %5314
  %5993 = and i32 %5992, %5318
  %5994 = add nsw i32 %5993, %5382
  %5995 = getelementptr inbounds i8, i8* %8, i32 %5994
  %5996 = load i8, i8* %5995, align 1, !tbaa !127
  br label %after_bb1462.us

after_bb1462.us:                                  ; preds = %true_bb1460.us, %after_bb1459.us
  %5997 = phi i8 [ %5996, %true_bb1460.us ], [ 0, %after_bb1459.us ]
  br i1 %5217, label %true_bb1463.us, label %after_bb1465.us

true_bb1463.us:                                   ; preds = %after_bb1462.us
  %5998 = sdiv i32 29, %5314
  %5999 = and i32 %5998, %5318
  %6000 = add nsw i32 %5999, %5382
  %6001 = getelementptr inbounds i8, i8* %8, i32 %6000
  %6002 = load i8, i8* %6001, align 1, !tbaa !127
  br label %after_bb1465.us

after_bb1465.us:                                  ; preds = %true_bb1463.us, %after_bb1462.us
  %6003 = phi i8 [ %6002, %true_bb1463.us ], [ 0, %after_bb1462.us ]
  br i1 %5218, label %true_bb1466.us, label %after_bb1468.us

true_bb1466.us:                                   ; preds = %after_bb1465.us
  %6004 = sdiv i32 30, %5314
  %6005 = and i32 %6004, %5318
  %6006 = add nsw i32 %6005, %5382
  %6007 = getelementptr inbounds i8, i8* %8, i32 %6006
  %6008 = load i8, i8* %6007, align 1, !tbaa !127
  br label %after_bb1468.us

after_bb1468.us:                                  ; preds = %true_bb1466.us, %after_bb1465.us
  %6009 = phi i8 [ %6008, %true_bb1466.us ], [ 0, %after_bb1465.us ]
  br i1 %5219, label %true_bb1469.us, label %after_bb1471.us

true_bb1469.us:                                   ; preds = %after_bb1468.us
  %6010 = sdiv i32 31, %5314
  %6011 = and i32 %6010, %5318
  %6012 = add nsw i32 %6011, %5382
  %6013 = getelementptr inbounds i8, i8* %8, i32 %6012
  %6014 = load i8, i8* %6013, align 1, !tbaa !127
  br label %after_bb1471.us

after_bb1471.us:                                  ; preds = %true_bb1469.us, %after_bb1468.us
  %6015 = phi i8 [ %6014, %true_bb1469.us ], [ 0, %after_bb1468.us ]
  br i1 %5220, label %true_bb1472.us, label %after_bb1474.us

true_bb1472.us:                                   ; preds = %after_bb1471.us
  %6016 = sdiv i32 32, %5314
  %6017 = and i32 %6016, %5318
  %6018 = add nsw i32 %6017, %5382
  %6019 = getelementptr inbounds i8, i8* %8, i32 %6018
  %6020 = load i8, i8* %6019, align 1, !tbaa !127
  br label %after_bb1474.us

after_bb1474.us:                                  ; preds = %true_bb1472.us, %after_bb1471.us
  %6021 = phi i8 [ %6020, %true_bb1472.us ], [ 0, %after_bb1471.us ]
  br i1 %5221, label %true_bb1475.us, label %after_bb1477.us

true_bb1475.us:                                   ; preds = %after_bb1474.us
  %6022 = sdiv i32 33, %5314
  %6023 = and i32 %6022, %5318
  %6024 = add nsw i32 %6023, %5382
  %6025 = getelementptr inbounds i8, i8* %8, i32 %6024
  %6026 = load i8, i8* %6025, align 1, !tbaa !127
  br label %after_bb1477.us

after_bb1477.us:                                  ; preds = %true_bb1475.us, %after_bb1474.us
  %6027 = phi i8 [ %6026, %true_bb1475.us ], [ 0, %after_bb1474.us ]
  br i1 %5222, label %true_bb1478.us, label %after_bb1480.us

true_bb1478.us:                                   ; preds = %after_bb1477.us
  %6028 = sdiv i32 34, %5314
  %6029 = and i32 %6028, %5318
  %6030 = add nsw i32 %6029, %5382
  %6031 = getelementptr inbounds i8, i8* %8, i32 %6030
  %6032 = load i8, i8* %6031, align 1, !tbaa !127
  br label %after_bb1480.us

after_bb1480.us:                                  ; preds = %true_bb1478.us, %after_bb1477.us
  %6033 = phi i8 [ %6032, %true_bb1478.us ], [ 0, %after_bb1477.us ]
  br i1 %5223, label %true_bb1481.us, label %after_bb1483.us

true_bb1481.us:                                   ; preds = %after_bb1480.us
  %6034 = sdiv i32 35, %5314
  %6035 = and i32 %6034, %5318
  %6036 = add nsw i32 %6035, %5382
  %6037 = getelementptr inbounds i8, i8* %8, i32 %6036
  %6038 = load i8, i8* %6037, align 1, !tbaa !127
  br label %after_bb1483.us

after_bb1483.us:                                  ; preds = %true_bb1481.us, %after_bb1480.us
  %6039 = phi i8 [ %6038, %true_bb1481.us ], [ 0, %after_bb1480.us ]
  br i1 %5224, label %true_bb1484.us, label %after_bb1486.us

true_bb1484.us:                                   ; preds = %after_bb1483.us
  %6040 = sdiv i32 36, %5314
  %6041 = and i32 %6040, %5318
  %6042 = add nsw i32 %6041, %5382
  %6043 = getelementptr inbounds i8, i8* %8, i32 %6042
  %6044 = load i8, i8* %6043, align 1, !tbaa !127
  br label %after_bb1486.us

after_bb1486.us:                                  ; preds = %true_bb1484.us, %after_bb1483.us
  %6045 = phi i8 [ %6044, %true_bb1484.us ], [ 0, %after_bb1483.us ]
  br i1 %5225, label %true_bb1487.us, label %after_bb1489.us

true_bb1487.us:                                   ; preds = %after_bb1486.us
  %6046 = sdiv i32 37, %5314
  %6047 = and i32 %6046, %5318
  %6048 = add nsw i32 %6047, %5382
  %6049 = getelementptr inbounds i8, i8* %8, i32 %6048
  %6050 = load i8, i8* %6049, align 1, !tbaa !127
  br label %after_bb1489.us

after_bb1489.us:                                  ; preds = %true_bb1487.us, %after_bb1486.us
  %6051 = phi i8 [ %6050, %true_bb1487.us ], [ 0, %after_bb1486.us ]
  br i1 %5226, label %true_bb1490.us, label %after_bb1492.us

true_bb1490.us:                                   ; preds = %after_bb1489.us
  %6052 = sdiv i32 38, %5314
  %6053 = and i32 %6052, %5318
  %6054 = add nsw i32 %6053, %5382
  %6055 = getelementptr inbounds i8, i8* %8, i32 %6054
  %6056 = load i8, i8* %6055, align 1, !tbaa !127
  br label %after_bb1492.us

after_bb1492.us:                                  ; preds = %true_bb1490.us, %after_bb1489.us
  %6057 = phi i8 [ %6056, %true_bb1490.us ], [ 0, %after_bb1489.us ]
  br i1 %5227, label %true_bb1493.us, label %after_bb1495.us

true_bb1493.us:                                   ; preds = %after_bb1492.us
  %6058 = sdiv i32 39, %5314
  %6059 = and i32 %6058, %5318
  %6060 = add nsw i32 %6059, %5382
  %6061 = getelementptr inbounds i8, i8* %8, i32 %6060
  %6062 = load i8, i8* %6061, align 1, !tbaa !127
  br label %after_bb1495.us

after_bb1495.us:                                  ; preds = %true_bb1493.us, %after_bb1492.us
  %6063 = phi i8 [ %6062, %true_bb1493.us ], [ 0, %after_bb1492.us ]
  br i1 %5228, label %true_bb1496.us, label %after_bb1498.us

true_bb1496.us:                                   ; preds = %after_bb1495.us
  %6064 = sdiv i32 40, %5314
  %6065 = and i32 %6064, %5318
  %6066 = add nsw i32 %6065, %5382
  %6067 = getelementptr inbounds i8, i8* %8, i32 %6066
  %6068 = load i8, i8* %6067, align 1, !tbaa !127
  br label %after_bb1498.us

after_bb1498.us:                                  ; preds = %true_bb1496.us, %after_bb1495.us
  %6069 = phi i8 [ %6068, %true_bb1496.us ], [ 0, %after_bb1495.us ]
  br i1 %5229, label %true_bb1499.us, label %after_bb1501.us

true_bb1499.us:                                   ; preds = %after_bb1498.us
  %6070 = sdiv i32 41, %5314
  %6071 = and i32 %6070, %5318
  %6072 = add nsw i32 %6071, %5382
  %6073 = getelementptr inbounds i8, i8* %8, i32 %6072
  %6074 = load i8, i8* %6073, align 1, !tbaa !127
  br label %after_bb1501.us

after_bb1501.us:                                  ; preds = %true_bb1499.us, %after_bb1498.us
  %6075 = phi i8 [ %6074, %true_bb1499.us ], [ 0, %after_bb1498.us ]
  br i1 %5230, label %true_bb1502.us, label %after_bb1504.us

true_bb1502.us:                                   ; preds = %after_bb1501.us
  %6076 = sdiv i32 42, %5314
  %6077 = and i32 %6076, %5318
  %6078 = add nsw i32 %6077, %5382
  %6079 = getelementptr inbounds i8, i8* %8, i32 %6078
  %6080 = load i8, i8* %6079, align 1, !tbaa !127
  br label %after_bb1504.us

after_bb1504.us:                                  ; preds = %true_bb1502.us, %after_bb1501.us
  %6081 = phi i8 [ %6080, %true_bb1502.us ], [ 0, %after_bb1501.us ]
  br i1 %5231, label %true_bb1505.us, label %after_bb1507.us

true_bb1505.us:                                   ; preds = %after_bb1504.us
  %6082 = sdiv i32 43, %5314
  %6083 = and i32 %6082, %5318
  %6084 = add nsw i32 %6083, %5382
  %6085 = getelementptr inbounds i8, i8* %8, i32 %6084
  %6086 = load i8, i8* %6085, align 1, !tbaa !127
  br label %after_bb1507.us

after_bb1507.us:                                  ; preds = %true_bb1505.us, %after_bb1504.us
  %6087 = phi i8 [ %6086, %true_bb1505.us ], [ 0, %after_bb1504.us ]
  br i1 %5232, label %true_bb1508.us, label %after_bb1510.us

true_bb1508.us:                                   ; preds = %after_bb1507.us
  %6088 = sdiv i32 44, %5314
  %6089 = and i32 %6088, %5318
  %6090 = add nsw i32 %6089, %5382
  %6091 = getelementptr inbounds i8, i8* %8, i32 %6090
  %6092 = load i8, i8* %6091, align 1, !tbaa !127
  br label %after_bb1510.us

after_bb1510.us:                                  ; preds = %true_bb1508.us, %after_bb1507.us
  %6093 = phi i8 [ %6092, %true_bb1508.us ], [ 0, %after_bb1507.us ]
  br i1 %5233, label %true_bb1511.us, label %after_bb1513.us

true_bb1511.us:                                   ; preds = %after_bb1510.us
  %6094 = sdiv i32 45, %5314
  %6095 = and i32 %6094, %5318
  %6096 = add nsw i32 %6095, %5382
  %6097 = getelementptr inbounds i8, i8* %8, i32 %6096
  %6098 = load i8, i8* %6097, align 1, !tbaa !127
  br label %after_bb1513.us

after_bb1513.us:                                  ; preds = %true_bb1511.us, %after_bb1510.us
  %6099 = phi i8 [ %6098, %true_bb1511.us ], [ 0, %after_bb1510.us ]
  br i1 %5234, label %true_bb1514.us, label %after_bb1516.us

true_bb1514.us:                                   ; preds = %after_bb1513.us
  %6100 = sdiv i32 46, %5314
  %6101 = and i32 %6100, %5318
  %6102 = add nsw i32 %6101, %5382
  %6103 = getelementptr inbounds i8, i8* %8, i32 %6102
  %6104 = load i8, i8* %6103, align 1, !tbaa !127
  br label %after_bb1516.us

after_bb1516.us:                                  ; preds = %true_bb1514.us, %after_bb1513.us
  %6105 = phi i8 [ %6104, %true_bb1514.us ], [ 0, %after_bb1513.us ]
  br i1 %5235, label %true_bb1517.us, label %after_bb1519.us

true_bb1517.us:                                   ; preds = %after_bb1516.us
  %6106 = sdiv i32 47, %5314
  %6107 = and i32 %6106, %5318
  %6108 = add nsw i32 %6107, %5382
  %6109 = getelementptr inbounds i8, i8* %8, i32 %6108
  %6110 = load i8, i8* %6109, align 1, !tbaa !127
  br label %after_bb1519.us

after_bb1519.us:                                  ; preds = %true_bb1517.us, %after_bb1516.us
  %6111 = phi i8 [ %6110, %true_bb1517.us ], [ 0, %after_bb1516.us ]
  br i1 %5236, label %true_bb1520.us, label %after_bb1522.us

true_bb1520.us:                                   ; preds = %after_bb1519.us
  %6112 = sdiv i32 48, %5314
  %6113 = and i32 %6112, %5318
  %6114 = add nsw i32 %6113, %5382
  %6115 = getelementptr inbounds i8, i8* %8, i32 %6114
  %6116 = load i8, i8* %6115, align 1, !tbaa !127
  br label %after_bb1522.us

after_bb1522.us:                                  ; preds = %true_bb1520.us, %after_bb1519.us
  %6117 = phi i8 [ %6116, %true_bb1520.us ], [ 0, %after_bb1519.us ]
  br i1 %5237, label %true_bb1523.us, label %after_bb1525.us

true_bb1523.us:                                   ; preds = %after_bb1522.us
  %6118 = sdiv i32 49, %5314
  %6119 = and i32 %6118, %5318
  %6120 = add nsw i32 %6119, %5382
  %6121 = getelementptr inbounds i8, i8* %8, i32 %6120
  %6122 = load i8, i8* %6121, align 1, !tbaa !127
  br label %after_bb1525.us

after_bb1525.us:                                  ; preds = %true_bb1523.us, %after_bb1522.us
  %6123 = phi i8 [ %6122, %true_bb1523.us ], [ 0, %after_bb1522.us ]
  br i1 %5238, label %true_bb1526.us, label %after_bb1528.us

true_bb1526.us:                                   ; preds = %after_bb1525.us
  %6124 = sdiv i32 50, %5314
  %6125 = and i32 %6124, %5318
  %6126 = add nsw i32 %6125, %5382
  %6127 = getelementptr inbounds i8, i8* %8, i32 %6126
  %6128 = load i8, i8* %6127, align 1, !tbaa !127
  br label %after_bb1528.us

after_bb1528.us:                                  ; preds = %true_bb1526.us, %after_bb1525.us
  %6129 = phi i8 [ %6128, %true_bb1526.us ], [ 0, %after_bb1525.us ]
  br i1 %5239, label %true_bb1529.us, label %after_bb1531.us

true_bb1529.us:                                   ; preds = %after_bb1528.us
  %6130 = sdiv i32 51, %5314
  %6131 = and i32 %6130, %5318
  %6132 = add nsw i32 %6131, %5382
  %6133 = getelementptr inbounds i8, i8* %8, i32 %6132
  %6134 = load i8, i8* %6133, align 1, !tbaa !127
  br label %after_bb1531.us

after_bb1531.us:                                  ; preds = %true_bb1529.us, %after_bb1528.us
  %6135 = phi i8 [ %6134, %true_bb1529.us ], [ 0, %after_bb1528.us ]
  br i1 %5240, label %true_bb1532.us, label %after_bb1534.us

true_bb1532.us:                                   ; preds = %after_bb1531.us
  %6136 = sdiv i32 52, %5314
  %6137 = and i32 %6136, %5318
  %6138 = add nsw i32 %6137, %5382
  %6139 = getelementptr inbounds i8, i8* %8, i32 %6138
  %6140 = load i8, i8* %6139, align 1, !tbaa !127
  br label %after_bb1534.us

after_bb1534.us:                                  ; preds = %true_bb1532.us, %after_bb1531.us
  %6141 = phi i8 [ %6140, %true_bb1532.us ], [ 0, %after_bb1531.us ]
  br i1 %5241, label %true_bb1535.us, label %after_bb1537.us

true_bb1535.us:                                   ; preds = %after_bb1534.us
  %6142 = sdiv i32 53, %5314
  %6143 = and i32 %6142, %5318
  %6144 = add nsw i32 %6143, %5382
  %6145 = getelementptr inbounds i8, i8* %8, i32 %6144
  %6146 = load i8, i8* %6145, align 1, !tbaa !127
  br label %after_bb1537.us

after_bb1537.us:                                  ; preds = %true_bb1535.us, %after_bb1534.us
  %6147 = phi i8 [ %6146, %true_bb1535.us ], [ 0, %after_bb1534.us ]
  br i1 %5242, label %true_bb1538.us, label %after_bb1540.us

true_bb1538.us:                                   ; preds = %after_bb1537.us
  %6148 = sdiv i32 54, %5314
  %6149 = and i32 %6148, %5318
  %6150 = add nsw i32 %6149, %5382
  %6151 = getelementptr inbounds i8, i8* %8, i32 %6150
  %6152 = load i8, i8* %6151, align 1, !tbaa !127
  br label %after_bb1540.us

after_bb1540.us:                                  ; preds = %true_bb1538.us, %after_bb1537.us
  %6153 = phi i8 [ %6152, %true_bb1538.us ], [ 0, %after_bb1537.us ]
  br i1 %5243, label %true_bb1541.us, label %after_bb1543.us

true_bb1541.us:                                   ; preds = %after_bb1540.us
  %6154 = sdiv i32 55, %5314
  %6155 = and i32 %6154, %5318
  %6156 = add nsw i32 %6155, %5382
  %6157 = getelementptr inbounds i8, i8* %8, i32 %6156
  %6158 = load i8, i8* %6157, align 1, !tbaa !127
  br label %after_bb1543.us

after_bb1543.us:                                  ; preds = %true_bb1541.us, %after_bb1540.us
  %6159 = phi i8 [ %6158, %true_bb1541.us ], [ 0, %after_bb1540.us ]
  br i1 %5244, label %true_bb1544.us, label %after_bb1546.us

true_bb1544.us:                                   ; preds = %after_bb1543.us
  %6160 = sdiv i32 56, %5314
  %6161 = and i32 %6160, %5318
  %6162 = add nsw i32 %6161, %5382
  %6163 = getelementptr inbounds i8, i8* %8, i32 %6162
  %6164 = load i8, i8* %6163, align 1, !tbaa !127
  br label %after_bb1546.us

after_bb1546.us:                                  ; preds = %true_bb1544.us, %after_bb1543.us
  %6165 = phi i8 [ %6164, %true_bb1544.us ], [ 0, %after_bb1543.us ]
  br i1 %5245, label %true_bb1547.us, label %after_bb1549.us

true_bb1547.us:                                   ; preds = %after_bb1546.us
  %6166 = sdiv i32 57, %5314
  %6167 = and i32 %6166, %5318
  %6168 = add nsw i32 %6167, %5382
  %6169 = getelementptr inbounds i8, i8* %8, i32 %6168
  %6170 = load i8, i8* %6169, align 1, !tbaa !127
  br label %after_bb1549.us

after_bb1549.us:                                  ; preds = %true_bb1547.us, %after_bb1546.us
  %6171 = phi i8 [ %6170, %true_bb1547.us ], [ 0, %after_bb1546.us ]
  br i1 %5246, label %true_bb1550.us, label %after_bb1552.us

true_bb1550.us:                                   ; preds = %after_bb1549.us
  %6172 = sdiv i32 58, %5314
  %6173 = and i32 %6172, %5318
  %6174 = add nsw i32 %6173, %5382
  %6175 = getelementptr inbounds i8, i8* %8, i32 %6174
  %6176 = load i8, i8* %6175, align 1, !tbaa !127
  br label %after_bb1552.us

after_bb1552.us:                                  ; preds = %true_bb1550.us, %after_bb1549.us
  %6177 = phi i8 [ %6176, %true_bb1550.us ], [ 0, %after_bb1549.us ]
  br i1 %5247, label %true_bb1553.us, label %after_bb1555.us

true_bb1553.us:                                   ; preds = %after_bb1552.us
  %6178 = sdiv i32 59, %5314
  %6179 = and i32 %6178, %5318
  %6180 = add nsw i32 %6179, %5382
  %6181 = getelementptr inbounds i8, i8* %8, i32 %6180
  %6182 = load i8, i8* %6181, align 1, !tbaa !127
  br label %after_bb1555.us

after_bb1555.us:                                  ; preds = %true_bb1553.us, %after_bb1552.us
  %6183 = phi i8 [ %6182, %true_bb1553.us ], [ 0, %after_bb1552.us ]
  br i1 %5248, label %true_bb1556.us, label %after_bb1558.us

true_bb1556.us:                                   ; preds = %after_bb1555.us
  %6184 = sdiv i32 60, %5314
  %6185 = and i32 %6184, %5318
  %6186 = add nsw i32 %6185, %5382
  %6187 = getelementptr inbounds i8, i8* %8, i32 %6186
  %6188 = load i8, i8* %6187, align 1, !tbaa !127
  br label %after_bb1558.us

after_bb1558.us:                                  ; preds = %true_bb1556.us, %after_bb1555.us
  %6189 = phi i8 [ %6188, %true_bb1556.us ], [ 0, %after_bb1555.us ]
  br i1 %5249, label %true_bb1559.us, label %after_bb1561.us

true_bb1559.us:                                   ; preds = %after_bb1558.us
  %6190 = sdiv i32 61, %5314
  %6191 = and i32 %6190, %5318
  %6192 = add nsw i32 %6191, %5382
  %6193 = getelementptr inbounds i8, i8* %8, i32 %6192
  %6194 = load i8, i8* %6193, align 1, !tbaa !127
  br label %after_bb1561.us

after_bb1561.us:                                  ; preds = %true_bb1559.us, %after_bb1558.us
  %6195 = phi i8 [ %6194, %true_bb1559.us ], [ 0, %after_bb1558.us ]
  br i1 %5250, label %true_bb1562.us, label %after_bb1564.us

true_bb1562.us:                                   ; preds = %after_bb1561.us
  %6196 = sdiv i32 62, %5314
  %6197 = and i32 %6196, %5318
  %6198 = add nsw i32 %6197, %5382
  %6199 = getelementptr inbounds i8, i8* %8, i32 %6198
  %6200 = load i8, i8* %6199, align 1, !tbaa !127
  br label %after_bb1564.us

after_bb1564.us:                                  ; preds = %true_bb1562.us, %after_bb1561.us
  %6201 = phi i8 [ %6200, %true_bb1562.us ], [ 0, %after_bb1561.us ]
  br i1 %t2398, label %true_bb1565.us, label %after_bb1567.us

true_bb1565.us:                                   ; preds = %after_bb1564.us
  %6202 = sdiv i32 63, %5314
  %6203 = and i32 %6202, %5318
  %6204 = add nsw i32 %6203, %5382
  %6205 = getelementptr inbounds i8, i8* %8, i32 %6204
  %6206 = load i8, i8* %6205, align 1, !tbaa !127
  br label %after_bb1567.us

after_bb1567.us:                                  ; preds = %true_bb1565.us, %after_bb1564.us
  %6207 = phi i8 [ %6206, %true_bb1565.us ], [ 0, %after_bb1564.us ]
  br i1 %t2399, label %true_bb1568.us, label %after_bb1570.us

true_bb1568.us:                                   ; preds = %after_bb1567.us
  %6208 = sdiv i32 64, %5314
  %6209 = and i32 %6208, %5318
  %6210 = add nsw i32 %6209, %5382
  %6211 = getelementptr inbounds i8, i8* %8, i32 %6210
  %6212 = load i8, i8* %6211, align 1, !tbaa !127
  br label %after_bb1570.us

after_bb1570.us:                                  ; preds = %true_bb1568.us, %after_bb1567.us
  %6213 = phi i8 [ %6212, %true_bb1568.us ], [ 0, %after_bb1567.us ]
  br i1 %5251, label %true_bb1571.us, label %after_bb1573.us

true_bb1571.us:                                   ; preds = %after_bb1570.us
  %6214 = sdiv i32 65, %5314
  %6215 = and i32 %6214, %5318
  %6216 = add nsw i32 %6215, %5382
  %6217 = getelementptr inbounds i8, i8* %8, i32 %6216
  %6218 = load i8, i8* %6217, align 1, !tbaa !127
  br label %after_bb1573.us

after_bb1573.us:                                  ; preds = %true_bb1571.us, %after_bb1570.us
  %6219 = phi i8 [ %6218, %true_bb1571.us ], [ 0, %after_bb1570.us ]
  br i1 %5252, label %true_bb1574.us, label %after_bb1576.us

true_bb1574.us:                                   ; preds = %after_bb1573.us
  %6220 = sdiv i32 66, %5314
  %6221 = and i32 %6220, %5318
  %6222 = add nsw i32 %6221, %5382
  %6223 = getelementptr inbounds i8, i8* %8, i32 %6222
  %6224 = load i8, i8* %6223, align 1, !tbaa !127
  br label %after_bb1576.us

after_bb1576.us:                                  ; preds = %true_bb1574.us, %after_bb1573.us
  %6225 = phi i8 [ %6224, %true_bb1574.us ], [ 0, %after_bb1573.us ]
  br i1 %5253, label %true_bb1577.us, label %after_bb1579.us

true_bb1577.us:                                   ; preds = %after_bb1576.us
  %6226 = sdiv i32 67, %5314
  %6227 = and i32 %6226, %5318
  %6228 = add nsw i32 %6227, %5382
  %6229 = getelementptr inbounds i8, i8* %8, i32 %6228
  %6230 = load i8, i8* %6229, align 1, !tbaa !127
  br label %after_bb1579.us

after_bb1579.us:                                  ; preds = %true_bb1577.us, %after_bb1576.us
  %6231 = phi i8 [ %6230, %true_bb1577.us ], [ 0, %after_bb1576.us ]
  br i1 %5254, label %true_bb1580.us, label %after_bb1582.us

true_bb1580.us:                                   ; preds = %after_bb1579.us
  %6232 = sdiv i32 68, %5314
  %6233 = and i32 %6232, %5318
  %6234 = add nsw i32 %6233, %5382
  %6235 = getelementptr inbounds i8, i8* %8, i32 %6234
  %6236 = load i8, i8* %6235, align 1, !tbaa !127
  br label %after_bb1582.us

after_bb1582.us:                                  ; preds = %true_bb1580.us, %after_bb1579.us
  %6237 = phi i8 [ %6236, %true_bb1580.us ], [ 0, %after_bb1579.us ]
  br i1 %5255, label %true_bb1583.us, label %after_bb1585.us

true_bb1583.us:                                   ; preds = %after_bb1582.us
  %6238 = sdiv i32 69, %5314
  %6239 = and i32 %6238, %5318
  %6240 = add nsw i32 %6239, %5382
  %6241 = getelementptr inbounds i8, i8* %8, i32 %6240
  %6242 = load i8, i8* %6241, align 1, !tbaa !127
  br label %after_bb1585.us

after_bb1585.us:                                  ; preds = %true_bb1583.us, %after_bb1582.us
  %6243 = phi i8 [ %6242, %true_bb1583.us ], [ 0, %after_bb1582.us ]
  br i1 %5256, label %true_bb1586.us, label %after_bb1588.us

true_bb1586.us:                                   ; preds = %after_bb1585.us
  %6244 = sdiv i32 70, %5314
  %6245 = and i32 %6244, %5318
  %6246 = add nsw i32 %6245, %5382
  %6247 = getelementptr inbounds i8, i8* %8, i32 %6246
  %6248 = load i8, i8* %6247, align 1, !tbaa !127
  br label %after_bb1588.us

after_bb1588.us:                                  ; preds = %true_bb1586.us, %after_bb1585.us
  %6249 = phi i8 [ %6248, %true_bb1586.us ], [ 0, %after_bb1585.us ]
  br i1 %5257, label %true_bb1589.us, label %after_bb1591.us

true_bb1589.us:                                   ; preds = %after_bb1588.us
  %6250 = sdiv i32 71, %5314
  %6251 = and i32 %6250, %5318
  %6252 = add nsw i32 %6251, %5382
  %6253 = getelementptr inbounds i8, i8* %8, i32 %6252
  %6254 = load i8, i8* %6253, align 1, !tbaa !127
  br label %after_bb1591.us

after_bb1591.us:                                  ; preds = %true_bb1589.us, %after_bb1588.us
  %6255 = phi i8 [ %6254, %true_bb1589.us ], [ 0, %after_bb1588.us ]
  br i1 %5258, label %true_bb1592.us, label %after_bb1594.us

true_bb1592.us:                                   ; preds = %after_bb1591.us
  %6256 = sdiv i32 72, %5314
  %6257 = and i32 %6256, %5318
  %6258 = add nsw i32 %6257, %5382
  %6259 = getelementptr inbounds i8, i8* %8, i32 %6258
  %6260 = load i8, i8* %6259, align 1, !tbaa !127
  br label %after_bb1594.us

after_bb1594.us:                                  ; preds = %true_bb1592.us, %after_bb1591.us
  %6261 = phi i8 [ %6260, %true_bb1592.us ], [ 0, %after_bb1591.us ]
  br i1 %5259, label %true_bb1595.us, label %after_bb1597.us

true_bb1595.us:                                   ; preds = %after_bb1594.us
  %6262 = sdiv i32 73, %5314
  %6263 = and i32 %6262, %5318
  %6264 = add nsw i32 %6263, %5382
  %6265 = getelementptr inbounds i8, i8* %8, i32 %6264
  %6266 = load i8, i8* %6265, align 1, !tbaa !127
  br label %after_bb1597.us

after_bb1597.us:                                  ; preds = %true_bb1595.us, %after_bb1594.us
  %6267 = phi i8 [ %6266, %true_bb1595.us ], [ 0, %after_bb1594.us ]
  br i1 %5260, label %true_bb1598.us, label %after_bb1600.us

true_bb1598.us:                                   ; preds = %after_bb1597.us
  %6268 = sdiv i32 74, %5314
  %6269 = and i32 %6268, %5318
  %6270 = add nsw i32 %6269, %5382
  %6271 = getelementptr inbounds i8, i8* %8, i32 %6270
  %6272 = load i8, i8* %6271, align 1, !tbaa !127
  br label %after_bb1600.us

after_bb1600.us:                                  ; preds = %true_bb1598.us, %after_bb1597.us
  %6273 = phi i8 [ %6272, %true_bb1598.us ], [ 0, %after_bb1597.us ]
  br i1 %5261, label %true_bb1601.us, label %after_bb1603.us

true_bb1601.us:                                   ; preds = %after_bb1600.us
  %6274 = sdiv i32 75, %5314
  %6275 = and i32 %6274, %5318
  %6276 = add nsw i32 %6275, %5382
  %6277 = getelementptr inbounds i8, i8* %8, i32 %6276
  %6278 = load i8, i8* %6277, align 1, !tbaa !127
  br label %after_bb1603.us

after_bb1603.us:                                  ; preds = %true_bb1601.us, %after_bb1600.us
  %6279 = phi i8 [ %6278, %true_bb1601.us ], [ 0, %after_bb1600.us ]
  br i1 %5262, label %true_bb1604.us, label %after_bb1606.us

true_bb1604.us:                                   ; preds = %after_bb1603.us
  %6280 = sdiv i32 76, %5314
  %6281 = and i32 %6280, %5318
  %6282 = add nsw i32 %6281, %5382
  %6283 = getelementptr inbounds i8, i8* %8, i32 %6282
  %6284 = load i8, i8* %6283, align 1, !tbaa !127
  br label %after_bb1606.us

after_bb1606.us:                                  ; preds = %true_bb1604.us, %after_bb1603.us
  %6285 = phi i8 [ %6284, %true_bb1604.us ], [ 0, %after_bb1603.us ]
  br i1 %5263, label %true_bb1607.us, label %after_bb1609.us

true_bb1607.us:                                   ; preds = %after_bb1606.us
  %6286 = sdiv i32 77, %5314
  %6287 = and i32 %6286, %5318
  %6288 = add nsw i32 %6287, %5382
  %6289 = getelementptr inbounds i8, i8* %8, i32 %6288
  %6290 = load i8, i8* %6289, align 1, !tbaa !127
  br label %after_bb1609.us

after_bb1609.us:                                  ; preds = %true_bb1607.us, %after_bb1606.us
  %6291 = phi i8 [ %6290, %true_bb1607.us ], [ 0, %after_bb1606.us ]
  br i1 %5264, label %true_bb1610.us, label %after_bb1612.us

true_bb1610.us:                                   ; preds = %after_bb1609.us
  %6292 = sdiv i32 78, %5314
  %6293 = and i32 %6292, %5318
  %6294 = add nsw i32 %6293, %5382
  %6295 = getelementptr inbounds i8, i8* %8, i32 %6294
  %6296 = load i8, i8* %6295, align 1, !tbaa !127
  br label %after_bb1612.us

after_bb1612.us:                                  ; preds = %true_bb1610.us, %after_bb1609.us
  %6297 = phi i8 [ %6296, %true_bb1610.us ], [ 0, %after_bb1609.us ]
  br i1 %5265, label %true_bb1613.us, label %after_bb1615.us

true_bb1613.us:                                   ; preds = %after_bb1612.us
  %6298 = sdiv i32 79, %5314
  %6299 = and i32 %6298, %5318
  %6300 = add nsw i32 %6299, %5382
  %6301 = getelementptr inbounds i8, i8* %8, i32 %6300
  %6302 = load i8, i8* %6301, align 1, !tbaa !127
  br label %after_bb1615.us

after_bb1615.us:                                  ; preds = %true_bb1613.us, %after_bb1612.us
  %6303 = phi i8 [ %6302, %true_bb1613.us ], [ 0, %after_bb1612.us ]
  br i1 %5266, label %true_bb1616.us, label %after_bb1618.us

true_bb1616.us:                                   ; preds = %after_bb1615.us
  %6304 = sdiv i32 80, %5314
  %6305 = and i32 %6304, %5318
  %6306 = add nsw i32 %6305, %5382
  %6307 = getelementptr inbounds i8, i8* %8, i32 %6306
  %6308 = load i8, i8* %6307, align 1, !tbaa !127
  br label %after_bb1618.us

after_bb1618.us:                                  ; preds = %true_bb1616.us, %after_bb1615.us
  %6309 = phi i8 [ %6308, %true_bb1616.us ], [ 0, %after_bb1615.us ]
  br i1 %5267, label %true_bb1619.us, label %after_bb1621.us

true_bb1619.us:                                   ; preds = %after_bb1618.us
  %6310 = sdiv i32 81, %5314
  %6311 = and i32 %6310, %5318
  %6312 = add nsw i32 %6311, %5382
  %6313 = getelementptr inbounds i8, i8* %8, i32 %6312
  %6314 = load i8, i8* %6313, align 1, !tbaa !127
  br label %after_bb1621.us

after_bb1621.us:                                  ; preds = %true_bb1619.us, %after_bb1618.us
  %6315 = phi i8 [ %6314, %true_bb1619.us ], [ 0, %after_bb1618.us ]
  br i1 %5268, label %true_bb1622.us, label %after_bb1624.us

true_bb1622.us:                                   ; preds = %after_bb1621.us
  %6316 = sdiv i32 82, %5314
  %6317 = and i32 %6316, %5318
  %6318 = add nsw i32 %6317, %5382
  %6319 = getelementptr inbounds i8, i8* %8, i32 %6318
  %6320 = load i8, i8* %6319, align 1, !tbaa !127
  br label %after_bb1624.us

after_bb1624.us:                                  ; preds = %true_bb1622.us, %after_bb1621.us
  %6321 = phi i8 [ %6320, %true_bb1622.us ], [ 0, %after_bb1621.us ]
  br i1 %5269, label %true_bb1625.us, label %after_bb1627.us

true_bb1625.us:                                   ; preds = %after_bb1624.us
  %6322 = sdiv i32 83, %5314
  %6323 = and i32 %6322, %5318
  %6324 = add nsw i32 %6323, %5382
  %6325 = getelementptr inbounds i8, i8* %8, i32 %6324
  %6326 = load i8, i8* %6325, align 1, !tbaa !127
  br label %after_bb1627.us

after_bb1627.us:                                  ; preds = %true_bb1625.us, %after_bb1624.us
  %6327 = phi i8 [ %6326, %true_bb1625.us ], [ 0, %after_bb1624.us ]
  br i1 %5270, label %true_bb1628.us, label %after_bb1630.us

true_bb1628.us:                                   ; preds = %after_bb1627.us
  %6328 = sdiv i32 84, %5314
  %6329 = and i32 %6328, %5318
  %6330 = add nsw i32 %6329, %5382
  %6331 = getelementptr inbounds i8, i8* %8, i32 %6330
  %6332 = load i8, i8* %6331, align 1, !tbaa !127
  br label %after_bb1630.us

after_bb1630.us:                                  ; preds = %true_bb1628.us, %after_bb1627.us
  %6333 = phi i8 [ %6332, %true_bb1628.us ], [ 0, %after_bb1627.us ]
  br i1 %5271, label %true_bb1631.us, label %after_bb1633.us

true_bb1631.us:                                   ; preds = %after_bb1630.us
  %6334 = sdiv i32 85, %5314
  %6335 = and i32 %6334, %5318
  %6336 = add nsw i32 %6335, %5382
  %6337 = getelementptr inbounds i8, i8* %8, i32 %6336
  %6338 = load i8, i8* %6337, align 1, !tbaa !127
  br label %after_bb1633.us

after_bb1633.us:                                  ; preds = %true_bb1631.us, %after_bb1630.us
  %6339 = phi i8 [ %6338, %true_bb1631.us ], [ 0, %after_bb1630.us ]
  br i1 %5272, label %true_bb1634.us, label %after_bb1636.us

true_bb1634.us:                                   ; preds = %after_bb1633.us
  %6340 = sdiv i32 86, %5314
  %6341 = and i32 %6340, %5318
  %6342 = add nsw i32 %6341, %5382
  %6343 = getelementptr inbounds i8, i8* %8, i32 %6342
  %6344 = load i8, i8* %6343, align 1, !tbaa !127
  br label %after_bb1636.us

after_bb1636.us:                                  ; preds = %true_bb1634.us, %after_bb1633.us
  %6345 = phi i8 [ %6344, %true_bb1634.us ], [ 0, %after_bb1633.us ]
  br i1 %5273, label %true_bb1637.us, label %after_bb1639.us

true_bb1637.us:                                   ; preds = %after_bb1636.us
  %6346 = sdiv i32 87, %5314
  %6347 = and i32 %6346, %5318
  %6348 = add nsw i32 %6347, %5382
  %6349 = getelementptr inbounds i8, i8* %8, i32 %6348
  %6350 = load i8, i8* %6349, align 1, !tbaa !127
  br label %after_bb1639.us

after_bb1639.us:                                  ; preds = %true_bb1637.us, %after_bb1636.us
  %6351 = phi i8 [ %6350, %true_bb1637.us ], [ 0, %after_bb1636.us ]
  br i1 %5274, label %true_bb1640.us, label %after_bb1642.us

true_bb1640.us:                                   ; preds = %after_bb1639.us
  %6352 = sdiv i32 88, %5314
  %6353 = and i32 %6352, %5318
  %6354 = add nsw i32 %6353, %5382
  %6355 = getelementptr inbounds i8, i8* %8, i32 %6354
  %6356 = load i8, i8* %6355, align 1, !tbaa !127
  br label %after_bb1642.us

after_bb1642.us:                                  ; preds = %true_bb1640.us, %after_bb1639.us
  %6357 = phi i8 [ %6356, %true_bb1640.us ], [ 0, %after_bb1639.us ]
  br i1 %5275, label %true_bb1643.us, label %after_bb1645.us

true_bb1643.us:                                   ; preds = %after_bb1642.us
  %6358 = sdiv i32 89, %5314
  %6359 = and i32 %6358, %5318
  %6360 = add nsw i32 %6359, %5382
  %6361 = getelementptr inbounds i8, i8* %8, i32 %6360
  %6362 = load i8, i8* %6361, align 1, !tbaa !127
  br label %after_bb1645.us

after_bb1645.us:                                  ; preds = %true_bb1643.us, %after_bb1642.us
  %6363 = phi i8 [ %6362, %true_bb1643.us ], [ 0, %after_bb1642.us ]
  br i1 %5276, label %true_bb1646.us, label %after_bb1648.us

true_bb1646.us:                                   ; preds = %after_bb1645.us
  %6364 = sdiv i32 90, %5314
  %6365 = and i32 %6364, %5318
  %6366 = add nsw i32 %6365, %5382
  %6367 = getelementptr inbounds i8, i8* %8, i32 %6366
  %6368 = load i8, i8* %6367, align 1, !tbaa !127
  br label %after_bb1648.us

after_bb1648.us:                                  ; preds = %true_bb1646.us, %after_bb1645.us
  %6369 = phi i8 [ %6368, %true_bb1646.us ], [ 0, %after_bb1645.us ]
  br i1 %5277, label %true_bb1649.us, label %after_bb1651.us

true_bb1649.us:                                   ; preds = %after_bb1648.us
  %6370 = sdiv i32 91, %5314
  %6371 = and i32 %6370, %5318
  %6372 = add nsw i32 %6371, %5382
  %6373 = getelementptr inbounds i8, i8* %8, i32 %6372
  %6374 = load i8, i8* %6373, align 1, !tbaa !127
  br label %after_bb1651.us

after_bb1651.us:                                  ; preds = %true_bb1649.us, %after_bb1648.us
  %6375 = phi i8 [ %6374, %true_bb1649.us ], [ 0, %after_bb1648.us ]
  br i1 %5278, label %true_bb1652.us, label %after_bb1654.us

true_bb1652.us:                                   ; preds = %after_bb1651.us
  %6376 = sdiv i32 92, %5314
  %6377 = and i32 %6376, %5318
  %6378 = add nsw i32 %6377, %5382
  %6379 = getelementptr inbounds i8, i8* %8, i32 %6378
  %6380 = load i8, i8* %6379, align 1, !tbaa !127
  br label %after_bb1654.us

after_bb1654.us:                                  ; preds = %true_bb1652.us, %after_bb1651.us
  %6381 = phi i8 [ %6380, %true_bb1652.us ], [ 0, %after_bb1651.us ]
  br i1 %5279, label %true_bb1655.us, label %after_bb1657.us

true_bb1655.us:                                   ; preds = %after_bb1654.us
  %6382 = sdiv i32 93, %5314
  %6383 = and i32 %6382, %5318
  %6384 = add nsw i32 %6383, %5382
  %6385 = getelementptr inbounds i8, i8* %8, i32 %6384
  %6386 = load i8, i8* %6385, align 1, !tbaa !127
  br label %after_bb1657.us

after_bb1657.us:                                  ; preds = %true_bb1655.us, %after_bb1654.us
  %6387 = phi i8 [ %6386, %true_bb1655.us ], [ 0, %after_bb1654.us ]
  br i1 %5280, label %true_bb1658.us, label %after_bb1660.us

true_bb1658.us:                                   ; preds = %after_bb1657.us
  %6388 = sdiv i32 94, %5314
  %6389 = and i32 %6388, %5318
  %6390 = add nsw i32 %6389, %5382
  %6391 = getelementptr inbounds i8, i8* %8, i32 %6390
  %6392 = load i8, i8* %6391, align 1, !tbaa !127
  br label %after_bb1660.us

after_bb1660.us:                                  ; preds = %true_bb1658.us, %after_bb1657.us
  %6393 = phi i8 [ %6392, %true_bb1658.us ], [ 0, %after_bb1657.us ]
  br i1 %5281, label %true_bb1661.us, label %after_bb1663.us

true_bb1661.us:                                   ; preds = %after_bb1660.us
  %6394 = sdiv i32 95, %5314
  %6395 = and i32 %6394, %5318
  %6396 = add nsw i32 %6395, %5382
  %6397 = getelementptr inbounds i8, i8* %8, i32 %6396
  %6398 = load i8, i8* %6397, align 1, !tbaa !127
  br label %after_bb1663.us

after_bb1663.us:                                  ; preds = %true_bb1661.us, %after_bb1660.us
  %6399 = phi i8 [ %6398, %true_bb1661.us ], [ 0, %after_bb1660.us ]
  br i1 %5282, label %true_bb1664.us, label %after_bb1666.us

true_bb1664.us:                                   ; preds = %after_bb1663.us
  %6400 = sdiv i32 96, %5314
  %6401 = and i32 %6400, %5318
  %6402 = add nsw i32 %6401, %5382
  %6403 = getelementptr inbounds i8, i8* %8, i32 %6402
  %6404 = load i8, i8* %6403, align 1, !tbaa !127
  br label %after_bb1666.us

after_bb1666.us:                                  ; preds = %true_bb1664.us, %after_bb1663.us
  %6405 = phi i8 [ %6404, %true_bb1664.us ], [ 0, %after_bb1663.us ]
  br i1 %5283, label %true_bb1667.us, label %after_bb1669.us

true_bb1667.us:                                   ; preds = %after_bb1666.us
  %6406 = sdiv i32 97, %5314
  %6407 = and i32 %6406, %5318
  %6408 = add nsw i32 %6407, %5382
  %6409 = getelementptr inbounds i8, i8* %8, i32 %6408
  %6410 = load i8, i8* %6409, align 1, !tbaa !127
  br label %after_bb1669.us

after_bb1669.us:                                  ; preds = %true_bb1667.us, %after_bb1666.us
  %6411 = phi i8 [ %6410, %true_bb1667.us ], [ 0, %after_bb1666.us ]
  br i1 %5284, label %true_bb1670.us, label %after_bb1672.us

true_bb1670.us:                                   ; preds = %after_bb1669.us
  %6412 = sdiv i32 98, %5314
  %6413 = and i32 %6412, %5318
  %6414 = add nsw i32 %6413, %5382
  %6415 = getelementptr inbounds i8, i8* %8, i32 %6414
  %6416 = load i8, i8* %6415, align 1, !tbaa !127
  br label %after_bb1672.us

after_bb1672.us:                                  ; preds = %true_bb1670.us, %after_bb1669.us
  %6417 = phi i8 [ %6416, %true_bb1670.us ], [ 0, %after_bb1669.us ]
  br i1 %5285, label %true_bb1673.us, label %after_bb1675.us

true_bb1673.us:                                   ; preds = %after_bb1672.us
  %6418 = sdiv i32 99, %5314
  %6419 = and i32 %6418, %5318
  %6420 = add nsw i32 %6419, %5382
  %6421 = getelementptr inbounds i8, i8* %8, i32 %6420
  %6422 = load i8, i8* %6421, align 1, !tbaa !127
  br label %after_bb1675.us

after_bb1675.us:                                  ; preds = %true_bb1673.us, %after_bb1672.us
  %6423 = phi i8 [ %6422, %true_bb1673.us ], [ 0, %after_bb1672.us ]
  br i1 %5286, label %true_bb1676.us, label %after_bb1678.us

true_bb1676.us:                                   ; preds = %after_bb1675.us
  %6424 = sdiv i32 100, %5314
  %6425 = and i32 %6424, %5318
  %6426 = add nsw i32 %6425, %5382
  %6427 = getelementptr inbounds i8, i8* %8, i32 %6426
  %6428 = load i8, i8* %6427, align 1, !tbaa !127
  br label %after_bb1678.us

after_bb1678.us:                                  ; preds = %true_bb1676.us, %after_bb1675.us
  %6429 = phi i8 [ %6428, %true_bb1676.us ], [ 0, %after_bb1675.us ]
  br i1 %5287, label %true_bb1679.us, label %after_bb1681.us

true_bb1679.us:                                   ; preds = %after_bb1678.us
  %6430 = sdiv i32 101, %5314
  %6431 = and i32 %6430, %5318
  %6432 = add nsw i32 %6431, %5382
  %6433 = getelementptr inbounds i8, i8* %8, i32 %6432
  %6434 = load i8, i8* %6433, align 1, !tbaa !127
  br label %after_bb1681.us

after_bb1681.us:                                  ; preds = %true_bb1679.us, %after_bb1678.us
  %6435 = phi i8 [ %6434, %true_bb1679.us ], [ 0, %after_bb1678.us ]
  br i1 %5288, label %true_bb1682.us, label %after_bb1684.us

true_bb1682.us:                                   ; preds = %after_bb1681.us
  %6436 = sdiv i32 102, %5314
  %6437 = and i32 %6436, %5318
  %6438 = add nsw i32 %6437, %5382
  %6439 = getelementptr inbounds i8, i8* %8, i32 %6438
  %6440 = load i8, i8* %6439, align 1, !tbaa !127
  br label %after_bb1684.us

after_bb1684.us:                                  ; preds = %true_bb1682.us, %after_bb1681.us
  %6441 = phi i8 [ %6440, %true_bb1682.us ], [ 0, %after_bb1681.us ]
  br i1 %5289, label %true_bb1685.us, label %after_bb1687.us

true_bb1685.us:                                   ; preds = %after_bb1684.us
  %6442 = sdiv i32 103, %5314
  %6443 = and i32 %6442, %5318
  %6444 = add nsw i32 %6443, %5382
  %6445 = getelementptr inbounds i8, i8* %8, i32 %6444
  %6446 = load i8, i8* %6445, align 1, !tbaa !127
  br label %after_bb1687.us

after_bb1687.us:                                  ; preds = %true_bb1685.us, %after_bb1684.us
  %6447 = phi i8 [ %6446, %true_bb1685.us ], [ 0, %after_bb1684.us ]
  br i1 %5290, label %true_bb1688.us, label %after_bb1690.us

true_bb1688.us:                                   ; preds = %after_bb1687.us
  %6448 = sdiv i32 104, %5314
  %6449 = and i32 %6448, %5318
  %6450 = add nsw i32 %6449, %5382
  %6451 = getelementptr inbounds i8, i8* %8, i32 %6450
  %6452 = load i8, i8* %6451, align 1, !tbaa !127
  br label %after_bb1690.us

after_bb1690.us:                                  ; preds = %true_bb1688.us, %after_bb1687.us
  %6453 = phi i8 [ %6452, %true_bb1688.us ], [ 0, %after_bb1687.us ]
  br i1 %5291, label %true_bb1691.us, label %after_bb1693.us

true_bb1691.us:                                   ; preds = %after_bb1690.us
  %6454 = sdiv i32 105, %5314
  %6455 = and i32 %6454, %5318
  %6456 = add nsw i32 %6455, %5382
  %6457 = getelementptr inbounds i8, i8* %8, i32 %6456
  %6458 = load i8, i8* %6457, align 1, !tbaa !127
  br label %after_bb1693.us

after_bb1693.us:                                  ; preds = %true_bb1691.us, %after_bb1690.us
  %6459 = phi i8 [ %6458, %true_bb1691.us ], [ 0, %after_bb1690.us ]
  br i1 %5292, label %true_bb1694.us, label %after_bb1696.us

true_bb1694.us:                                   ; preds = %after_bb1693.us
  %6460 = sdiv i32 106, %5314
  %6461 = and i32 %6460, %5318
  %6462 = add nsw i32 %6461, %5382
  %6463 = getelementptr inbounds i8, i8* %8, i32 %6462
  %6464 = load i8, i8* %6463, align 1, !tbaa !127
  br label %after_bb1696.us

after_bb1696.us:                                  ; preds = %true_bb1694.us, %after_bb1693.us
  %6465 = phi i8 [ %6464, %true_bb1694.us ], [ 0, %after_bb1693.us ]
  br i1 %5293, label %true_bb1697.us, label %after_bb1699.us

true_bb1697.us:                                   ; preds = %after_bb1696.us
  %6466 = sdiv i32 107, %5314
  %6467 = and i32 %6466, %5318
  %6468 = add nsw i32 %6467, %5382
  %6469 = getelementptr inbounds i8, i8* %8, i32 %6468
  %6470 = load i8, i8* %6469, align 1, !tbaa !127
  br label %after_bb1699.us

after_bb1699.us:                                  ; preds = %true_bb1697.us, %after_bb1696.us
  %6471 = phi i8 [ %6470, %true_bb1697.us ], [ 0, %after_bb1696.us ]
  br i1 %5294, label %true_bb1700.us, label %after_bb1702.us

true_bb1700.us:                                   ; preds = %after_bb1699.us
  %6472 = sdiv i32 108, %5314
  %6473 = and i32 %6472, %5318
  %6474 = add nsw i32 %6473, %5382
  %6475 = getelementptr inbounds i8, i8* %8, i32 %6474
  %6476 = load i8, i8* %6475, align 1, !tbaa !127
  br label %after_bb1702.us

after_bb1702.us:                                  ; preds = %true_bb1700.us, %after_bb1699.us
  %6477 = phi i8 [ %6476, %true_bb1700.us ], [ 0, %after_bb1699.us ]
  br i1 %5295, label %true_bb1703.us, label %after_bb1705.us

true_bb1703.us:                                   ; preds = %after_bb1702.us
  %6478 = sdiv i32 109, %5314
  %6479 = and i32 %6478, %5318
  %6480 = add nsw i32 %6479, %5382
  %6481 = getelementptr inbounds i8, i8* %8, i32 %6480
  %6482 = load i8, i8* %6481, align 1, !tbaa !127
  br label %after_bb1705.us

after_bb1705.us:                                  ; preds = %true_bb1703.us, %after_bb1702.us
  %6483 = phi i8 [ %6482, %true_bb1703.us ], [ 0, %after_bb1702.us ]
  br i1 %5296, label %true_bb1706.us, label %after_bb1708.us

true_bb1706.us:                                   ; preds = %after_bb1705.us
  %6484 = sdiv i32 110, %5314
  %6485 = and i32 %6484, %5318
  %6486 = add nsw i32 %6485, %5382
  %6487 = getelementptr inbounds i8, i8* %8, i32 %6486
  %6488 = load i8, i8* %6487, align 1, !tbaa !127
  br label %after_bb1708.us

after_bb1708.us:                                  ; preds = %true_bb1706.us, %after_bb1705.us
  %6489 = phi i8 [ %6488, %true_bb1706.us ], [ 0, %after_bb1705.us ]
  br i1 %5297, label %true_bb1709.us, label %after_bb1711.us

true_bb1709.us:                                   ; preds = %after_bb1708.us
  %6490 = sdiv i32 111, %5314
  %6491 = and i32 %6490, %5318
  %6492 = add nsw i32 %6491, %5382
  %6493 = getelementptr inbounds i8, i8* %8, i32 %6492
  %6494 = load i8, i8* %6493, align 1, !tbaa !127
  br label %after_bb1711.us

after_bb1711.us:                                  ; preds = %true_bb1709.us, %after_bb1708.us
  %6495 = phi i8 [ %6494, %true_bb1709.us ], [ 0, %after_bb1708.us ]
  br i1 %5298, label %true_bb1712.us, label %after_bb1714.us

true_bb1712.us:                                   ; preds = %after_bb1711.us
  %6496 = sdiv i32 112, %5314
  %6497 = and i32 %6496, %5318
  %6498 = add nsw i32 %6497, %5382
  %6499 = getelementptr inbounds i8, i8* %8, i32 %6498
  %6500 = load i8, i8* %6499, align 1, !tbaa !127
  br label %after_bb1714.us

after_bb1714.us:                                  ; preds = %true_bb1712.us, %after_bb1711.us
  %6501 = phi i8 [ %6500, %true_bb1712.us ], [ 0, %after_bb1711.us ]
  br i1 %5299, label %true_bb1715.us, label %after_bb1717.us

true_bb1715.us:                                   ; preds = %after_bb1714.us
  %6502 = sdiv i32 113, %5314
  %6503 = and i32 %6502, %5318
  %6504 = add nsw i32 %6503, %5382
  %6505 = getelementptr inbounds i8, i8* %8, i32 %6504
  %6506 = load i8, i8* %6505, align 1, !tbaa !127
  br label %after_bb1717.us

after_bb1717.us:                                  ; preds = %true_bb1715.us, %after_bb1714.us
  %6507 = phi i8 [ %6506, %true_bb1715.us ], [ 0, %after_bb1714.us ]
  br i1 %5300, label %true_bb1718.us, label %after_bb1720.us

true_bb1718.us:                                   ; preds = %after_bb1717.us
  %6508 = sdiv i32 114, %5314
  %6509 = and i32 %6508, %5318
  %6510 = add nsw i32 %6509, %5382
  %6511 = getelementptr inbounds i8, i8* %8, i32 %6510
  %6512 = load i8, i8* %6511, align 1, !tbaa !127
  br label %after_bb1720.us

after_bb1720.us:                                  ; preds = %true_bb1718.us, %after_bb1717.us
  %6513 = phi i8 [ %6512, %true_bb1718.us ], [ 0, %after_bb1717.us ]
  br i1 %5301, label %true_bb1721.us, label %after_bb1723.us

true_bb1721.us:                                   ; preds = %after_bb1720.us
  %6514 = sdiv i32 115, %5314
  %6515 = and i32 %6514, %5318
  %6516 = add nsw i32 %6515, %5382
  %6517 = getelementptr inbounds i8, i8* %8, i32 %6516
  %6518 = load i8, i8* %6517, align 1, !tbaa !127
  br label %after_bb1723.us

after_bb1723.us:                                  ; preds = %true_bb1721.us, %after_bb1720.us
  %6519 = phi i8 [ %6518, %true_bb1721.us ], [ 0, %after_bb1720.us ]
  br i1 %5302, label %true_bb1724.us, label %after_bb1726.us

true_bb1724.us:                                   ; preds = %after_bb1723.us
  %6520 = sdiv i32 116, %5314
  %6521 = and i32 %6520, %5318
  %6522 = add nsw i32 %6521, %5382
  %6523 = getelementptr inbounds i8, i8* %8, i32 %6522
  %6524 = load i8, i8* %6523, align 1, !tbaa !127
  br label %after_bb1726.us

after_bb1726.us:                                  ; preds = %true_bb1724.us, %after_bb1723.us
  %6525 = phi i8 [ %6524, %true_bb1724.us ], [ 0, %after_bb1723.us ]
  br i1 %5303, label %true_bb1727.us, label %after_bb1729.us

true_bb1727.us:                                   ; preds = %after_bb1726.us
  %6526 = sdiv i32 117, %5314
  %6527 = and i32 %6526, %5318
  %6528 = add nsw i32 %6527, %5382
  %6529 = getelementptr inbounds i8, i8* %8, i32 %6528
  %6530 = load i8, i8* %6529, align 1, !tbaa !127
  br label %after_bb1729.us

after_bb1729.us:                                  ; preds = %true_bb1727.us, %after_bb1726.us
  %6531 = phi i8 [ %6530, %true_bb1727.us ], [ 0, %after_bb1726.us ]
  br i1 %5304, label %true_bb1730.us, label %after_bb1732.us

true_bb1730.us:                                   ; preds = %after_bb1729.us
  %6532 = sdiv i32 118, %5314
  %6533 = and i32 %6532, %5318
  %6534 = add nsw i32 %6533, %5382
  %6535 = getelementptr inbounds i8, i8* %8, i32 %6534
  %6536 = load i8, i8* %6535, align 1, !tbaa !127
  br label %after_bb1732.us

after_bb1732.us:                                  ; preds = %true_bb1730.us, %after_bb1729.us
  %6537 = phi i8 [ %6536, %true_bb1730.us ], [ 0, %after_bb1729.us ]
  br i1 %5305, label %true_bb1733.us, label %after_bb1735.us

true_bb1733.us:                                   ; preds = %after_bb1732.us
  %6538 = sdiv i32 119, %5314
  %6539 = and i32 %6538, %5318
  %6540 = add nsw i32 %6539, %5382
  %6541 = getelementptr inbounds i8, i8* %8, i32 %6540
  %6542 = load i8, i8* %6541, align 1, !tbaa !127
  br label %after_bb1735.us

after_bb1735.us:                                  ; preds = %true_bb1733.us, %after_bb1732.us
  %6543 = phi i8 [ %6542, %true_bb1733.us ], [ 0, %after_bb1732.us ]
  br i1 %5306, label %true_bb1736.us, label %after_bb1738.us

true_bb1736.us:                                   ; preds = %after_bb1735.us
  %6544 = sdiv i32 120, %5314
  %6545 = and i32 %6544, %5318
  %6546 = add nsw i32 %6545, %5382
  %6547 = getelementptr inbounds i8, i8* %8, i32 %6546
  %6548 = load i8, i8* %6547, align 1, !tbaa !127
  br label %after_bb1738.us

after_bb1738.us:                                  ; preds = %true_bb1736.us, %after_bb1735.us
  %6549 = phi i8 [ %6548, %true_bb1736.us ], [ 0, %after_bb1735.us ]
  br i1 %5307, label %true_bb1739.us, label %after_bb1741.us

true_bb1739.us:                                   ; preds = %after_bb1738.us
  %6550 = sdiv i32 121, %5314
  %6551 = and i32 %6550, %5318
  %6552 = add nsw i32 %6551, %5382
  %6553 = getelementptr inbounds i8, i8* %8, i32 %6552
  %6554 = load i8, i8* %6553, align 1, !tbaa !127
  br label %after_bb1741.us

after_bb1741.us:                                  ; preds = %true_bb1739.us, %after_bb1738.us
  %6555 = phi i8 [ %6554, %true_bb1739.us ], [ 0, %after_bb1738.us ]
  br i1 %5308, label %true_bb1742.us, label %after_bb1744.us

true_bb1742.us:                                   ; preds = %after_bb1741.us
  %6556 = sdiv i32 122, %5314
  %6557 = and i32 %6556, %5318
  %6558 = add nsw i32 %6557, %5382
  %6559 = getelementptr inbounds i8, i8* %8, i32 %6558
  %6560 = load i8, i8* %6559, align 1, !tbaa !127
  br label %after_bb1744.us

after_bb1744.us:                                  ; preds = %true_bb1742.us, %after_bb1741.us
  %6561 = phi i8 [ %6560, %true_bb1742.us ], [ 0, %after_bb1741.us ]
  br i1 %5309, label %true_bb1745.us, label %after_bb1747.us

true_bb1745.us:                                   ; preds = %after_bb1744.us
  %6562 = sdiv i32 123, %5314
  %6563 = and i32 %6562, %5318
  %6564 = add nsw i32 %6563, %5382
  %6565 = getelementptr inbounds i8, i8* %8, i32 %6564
  %6566 = load i8, i8* %6565, align 1, !tbaa !127
  br label %after_bb1747.us

after_bb1747.us:                                  ; preds = %true_bb1745.us, %after_bb1744.us
  %6567 = phi i8 [ %6566, %true_bb1745.us ], [ 0, %after_bb1744.us ]
  br i1 %5310, label %true_bb1748.us, label %after_bb1750.us

true_bb1748.us:                                   ; preds = %after_bb1747.us
  %6568 = sdiv i32 124, %5314
  %6569 = and i32 %6568, %5318
  %6570 = add nsw i32 %6569, %5382
  %6571 = getelementptr inbounds i8, i8* %8, i32 %6570
  %6572 = load i8, i8* %6571, align 1, !tbaa !127
  br label %after_bb1750.us

after_bb1750.us:                                  ; preds = %true_bb1748.us, %after_bb1747.us
  %6573 = phi i8 [ %6572, %true_bb1748.us ], [ 0, %after_bb1747.us ]
  br i1 %5311, label %true_bb1751.us, label %after_bb1753.us

true_bb1751.us:                                   ; preds = %after_bb1750.us
  %6574 = sdiv i32 125, %5314
  %6575 = and i32 %6574, %5318
  %6576 = add nsw i32 %6575, %5382
  %6577 = getelementptr inbounds i8, i8* %8, i32 %6576
  %6578 = load i8, i8* %6577, align 1, !tbaa !127
  br label %after_bb1753.us

after_bb1753.us:                                  ; preds = %true_bb1751.us, %after_bb1750.us
  %6579 = phi i8 [ %6578, %true_bb1751.us ], [ 0, %after_bb1750.us ]
  br i1 %5312, label %true_bb1754.us, label %after_bb1759.us

true_bb1754.us:                                   ; preds = %after_bb1753.us
  %6580 = sdiv i32 126, %5314
  %6581 = and i32 %6580, %5318
  %6582 = add nsw i32 %6581, %5382
  %6583 = getelementptr inbounds i8, i8* %8, i32 %6582
  %6584 = load i8, i8* %6583, align 1, !tbaa !127
  br label %after_bb1759.us

after_bb1759.us:                                  ; preds = %true_bb1754.us, %after_bb1753.us
  %6585 = phi i8 [ %6584, %true_bb1754.us ], [ 0, %after_bb1753.us ]
  %6586 = insertelement <128 x i8> %5761, i8 %5835, i32 1
  %6587 = insertelement <128 x i8> %6586, i8 %5841, i32 2
  %6588 = insertelement <128 x i8> %6587, i8 %5847, i32 3
  %6589 = insertelement <128 x i8> %6588, i8 %5853, i32 4
  %6590 = insertelement <128 x i8> %6589, i8 %5859, i32 5
  %6591 = insertelement <128 x i8> %6590, i8 %5865, i32 6
  %6592 = insertelement <128 x i8> %6591, i8 %5871, i32 7
  %6593 = insertelement <128 x i8> %6592, i8 %5877, i32 8
  %6594 = insertelement <128 x i8> %6593, i8 %5883, i32 9
  %6595 = insertelement <128 x i8> %6594, i8 %5889, i32 10
  %6596 = insertelement <128 x i8> %6595, i8 %5895, i32 11
  %6597 = insertelement <128 x i8> %6596, i8 %5901, i32 12
  %6598 = insertelement <128 x i8> %6597, i8 %5907, i32 13
  %6599 = insertelement <128 x i8> %6598, i8 %5913, i32 14
  %6600 = insertelement <128 x i8> %6599, i8 %5919, i32 15
  %6601 = insertelement <128 x i8> %6600, i8 %5925, i32 16
  %6602 = insertelement <128 x i8> %6601, i8 %5931, i32 17
  %6603 = insertelement <128 x i8> %6602, i8 %5937, i32 18
  %6604 = insertelement <128 x i8> %6603, i8 %5943, i32 19
  %6605 = insertelement <128 x i8> %6604, i8 %5949, i32 20
  %6606 = insertelement <128 x i8> %6605, i8 %5955, i32 21
  %6607 = insertelement <128 x i8> %6606, i8 %5961, i32 22
  %6608 = insertelement <128 x i8> %6607, i8 %5967, i32 23
  %6609 = insertelement <128 x i8> %6608, i8 %5973, i32 24
  %6610 = insertelement <128 x i8> %6609, i8 %5979, i32 25
  %6611 = insertelement <128 x i8> %6610, i8 %5985, i32 26
  %6612 = insertelement <128 x i8> %6611, i8 %5991, i32 27
  %6613 = insertelement <128 x i8> %6612, i8 %5997, i32 28
  %6614 = insertelement <128 x i8> %6613, i8 %6003, i32 29
  %6615 = insertelement <128 x i8> %6614, i8 %6009, i32 30
  %6616 = insertelement <128 x i8> %6615, i8 %6015, i32 31
  %6617 = insertelement <128 x i8> %6616, i8 %6021, i32 32
  %6618 = insertelement <128 x i8> %6617, i8 %6027, i32 33
  %6619 = insertelement <128 x i8> %6618, i8 %6033, i32 34
  %6620 = insertelement <128 x i8> %6619, i8 %6039, i32 35
  %6621 = insertelement <128 x i8> %6620, i8 %6045, i32 36
  %6622 = insertelement <128 x i8> %6621, i8 %6051, i32 37
  %6623 = insertelement <128 x i8> %6622, i8 %6057, i32 38
  %6624 = insertelement <128 x i8> %6623, i8 %6063, i32 39
  %6625 = insertelement <128 x i8> %6624, i8 %6069, i32 40
  %6626 = insertelement <128 x i8> %6625, i8 %6075, i32 41
  %6627 = insertelement <128 x i8> %6626, i8 %6081, i32 42
  %6628 = insertelement <128 x i8> %6627, i8 %6087, i32 43
  %6629 = insertelement <128 x i8> %6628, i8 %6093, i32 44
  %6630 = insertelement <128 x i8> %6629, i8 %6099, i32 45
  %6631 = insertelement <128 x i8> %6630, i8 %6105, i32 46
  %6632 = insertelement <128 x i8> %6631, i8 %6111, i32 47
  %6633 = insertelement <128 x i8> %6632, i8 %6117, i32 48
  %6634 = insertelement <128 x i8> %6633, i8 %6123, i32 49
  %6635 = insertelement <128 x i8> %6634, i8 %6129, i32 50
  %6636 = insertelement <128 x i8> %6635, i8 %6135, i32 51
  %6637 = insertelement <128 x i8> %6636, i8 %6141, i32 52
  %6638 = insertelement <128 x i8> %6637, i8 %6147, i32 53
  %6639 = insertelement <128 x i8> %6638, i8 %6153, i32 54
  %6640 = insertelement <128 x i8> %6639, i8 %6159, i32 55
  %6641 = insertelement <128 x i8> %6640, i8 %6165, i32 56
  %6642 = insertelement <128 x i8> %6641, i8 %6171, i32 57
  %6643 = insertelement <128 x i8> %6642, i8 %6177, i32 58
  %6644 = insertelement <128 x i8> %6643, i8 %6183, i32 59
  %6645 = insertelement <128 x i8> %6644, i8 %6189, i32 60
  %6646 = insertelement <128 x i8> %6645, i8 %6195, i32 61
  %6647 = insertelement <128 x i8> %6646, i8 %6201, i32 62
  %6648 = insertelement <128 x i8> %6647, i8 %6207, i32 63
  %6649 = insertelement <128 x i8> %6648, i8 %6213, i32 64
  %6650 = insertelement <128 x i8> %6649, i8 %6219, i32 65
  %6651 = insertelement <128 x i8> %6650, i8 %6225, i32 66
  %6652 = insertelement <128 x i8> %6651, i8 %6231, i32 67
  %6653 = insertelement <128 x i8> %6652, i8 %6237, i32 68
  %6654 = insertelement <128 x i8> %6653, i8 %6243, i32 69
  %6655 = insertelement <128 x i8> %6654, i8 %6249, i32 70
  %6656 = insertelement <128 x i8> %6655, i8 %6255, i32 71
  %6657 = insertelement <128 x i8> %6656, i8 %6261, i32 72
  %6658 = insertelement <128 x i8> %6657, i8 %6267, i32 73
  %6659 = insertelement <128 x i8> %6658, i8 %6273, i32 74
  %6660 = insertelement <128 x i8> %6659, i8 %6279, i32 75
  %6661 = insertelement <128 x i8> %6660, i8 %6285, i32 76
  %6662 = insertelement <128 x i8> %6661, i8 %6291, i32 77
  %6663 = insertelement <128 x i8> %6662, i8 %6297, i32 78
  %6664 = insertelement <128 x i8> %6663, i8 %6303, i32 79
  %6665 = insertelement <128 x i8> %6664, i8 %6309, i32 80
  %6666 = insertelement <128 x i8> %6665, i8 %6315, i32 81
  %6667 = insertelement <128 x i8> %6666, i8 %6321, i32 82
  %6668 = insertelement <128 x i8> %6667, i8 %6327, i32 83
  %6669 = insertelement <128 x i8> %6668, i8 %6333, i32 84
  %6670 = insertelement <128 x i8> %6669, i8 %6339, i32 85
  %6671 = insertelement <128 x i8> %6670, i8 %6345, i32 86
  %6672 = insertelement <128 x i8> %6671, i8 %6351, i32 87
  %6673 = insertelement <128 x i8> %6672, i8 %6357, i32 88
  %6674 = insertelement <128 x i8> %6673, i8 %6363, i32 89
  %6675 = insertelement <128 x i8> %6674, i8 %6369, i32 90
  %6676 = insertelement <128 x i8> %6675, i8 %6375, i32 91
  %6677 = insertelement <128 x i8> %6676, i8 %6381, i32 92
  %6678 = insertelement <128 x i8> %6677, i8 %6387, i32 93
  %6679 = insertelement <128 x i8> %6678, i8 %6393, i32 94
  %6680 = insertelement <128 x i8> %6679, i8 %6399, i32 95
  %6681 = insertelement <128 x i8> %6680, i8 %6405, i32 96
  %6682 = insertelement <128 x i8> %6681, i8 %6411, i32 97
  %6683 = insertelement <128 x i8> %6682, i8 %6417, i32 98
  %6684 = insertelement <128 x i8> %6683, i8 %6423, i32 99
  %6685 = insertelement <128 x i8> %6684, i8 %6429, i32 100
  %6686 = insertelement <128 x i8> %6685, i8 %6435, i32 101
  %6687 = insertelement <128 x i8> %6686, i8 %6441, i32 102
  %6688 = insertelement <128 x i8> %6687, i8 %6447, i32 103
  %6689 = insertelement <128 x i8> %6688, i8 %6453, i32 104
  %6690 = insertelement <128 x i8> %6689, i8 %6459, i32 105
  %6691 = insertelement <128 x i8> %6690, i8 %6465, i32 106
  %6692 = insertelement <128 x i8> %6691, i8 %6471, i32 107
  %6693 = insertelement <128 x i8> %6692, i8 %6477, i32 108
  %6694 = insertelement <128 x i8> %6693, i8 %6483, i32 109
  %6695 = insertelement <128 x i8> %6694, i8 %6489, i32 110
  %6696 = insertelement <128 x i8> %6695, i8 %6495, i32 111
  %6697 = insertelement <128 x i8> %6696, i8 %6501, i32 112
  %6698 = insertelement <128 x i8> %6697, i8 %6507, i32 113
  %6699 = insertelement <128 x i8> %6698, i8 %6513, i32 114
  %6700 = insertelement <128 x i8> %6699, i8 %6519, i32 115
  %6701 = insertelement <128 x i8> %6700, i8 %6525, i32 116
  %6702 = insertelement <128 x i8> %6701, i8 %6531, i32 117
  %6703 = insertelement <128 x i8> %6702, i8 %6537, i32 118
  %6704 = insertelement <128 x i8> %6703, i8 %6543, i32 119
  %6705 = insertelement <128 x i8> %6704, i8 %6549, i32 120
  %6706 = insertelement <128 x i8> %6705, i8 %6555, i32 121
  %6707 = insertelement <128 x i8> %6706, i8 %6561, i32 122
  %6708 = insertelement <128 x i8> %6707, i8 %6567, i32 123
  %6709 = insertelement <128 x i8> %6708, i8 %6573, i32 124
  %6710 = insertelement <128 x i8> %6709, i8 %6579, i32 125
  %6711 = insertelement <128 x i8> %6710, i8 %6585, i32 126
  %6712 = bitcast <128 x i8> %6711 to <16 x i64>
  %6713 = shufflevector <16 x i64> %6712, <16 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6714 = bitcast <8 x i64> %6713 to <64 x i8>
  %6715 = getelementptr inbounds i8, i8* %5830, i32 64
  %6716 = bitcast i8* %6715 to <64 x i8>*
  call void @llvm.masked.store.v64i8.p0v64i8(<64 x i8> %6714, <64 x i8>* nonnull %6716, i32 64, <64 x i1> %4919), !tbaa !129
  %6717 = add nuw nsw i32 %resampled_input.s0.x.rebased223.us, 1
  %.not1825.us = icmp eq i32 %resampled_input.s0.x.rebased223.us, %t2448
  br i1 %.not1825.us, label %"end for resampled_input.s0.x.rebased222.loopexit.us", label %"for resampled_input.s0.x.rebased221.us"

"end for resampled_input.s0.x.rebased222.loopexit.us": ; preds = %after_bb1759.us
  %6718 = add nuw nsw i32 %resampled_input.s0.y.rebased220.us, 1
  %.not1824.us = icmp eq i32 %resampled_input.s0.y.rebased220.us, %t2447
  br i1 %.not1824.us, label %"consume resampled_input1760", label %"for resampled_input.s0.y.rebased218.us"

"consume resampled_input1760":                    ; preds = %"end for resampled_input.s0.x.rebased222.loopexit.us", %"end for resampled_input.s0.x.rebased216.loopexit.us", %"for resampled_input.s0.y.rebased218.preheader", %"for resampled_input.s0.y.rebased212.preheader", %next_bb211, %then_bb210
  br i1 %5320, label %"for output.s0.y.yo1761.preheader", label %"end for output.s0.y.yo1762", !prof !101

"for output.s0.y.yo1761.preheader":               ; preds = %"consume resampled_input1760"
  %6719 = add nsw i32 %output.s0.b.rebased204, %14
  %6720 = mul nsw i32 %6719, %25
  %6721 = load <32 x i32>, <32 x i32>* %5091, align 128
  %6722 = load <32 x i32>, <32 x i32>* %5094, align 128
  %6723 = load <32 x i32>, <32 x i32>* %5130, align 128
  %6724 = load <32 x i32>, <32 x i32>* %5133, align 128
  %6725 = sext <32 x i32> %6721 to <32 x i64>
  %a560 = mul nsw <32 x i64> %5327, %6725
  %6726 = icmp slt <32 x i64> %a560, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6727 = select <32 x i1> %6726, <32 x i64> %a560, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6728 = add nsw <32 x i64> %6727, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a559 = ashr <32 x i64> %6728, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6729 = icmp slt <32 x i64> %a559, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a558 = select <32 x i1> %6729, <32 x i64> %a559, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %6730 = sext <32 x i32> %6722 to <32 x i64>
  %a563 = mul nsw <32 x i64> %5327, %6730
  %6731 = icmp slt <32 x i64> %a563, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6732 = select <32 x i1> %6731, <32 x i64> %a563, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6733 = add nsw <32 x i64> %6732, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a562 = ashr <32 x i64> %6733, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6734 = icmp slt <32 x i64> %a562, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a561 = select <32 x i1> %6734, <32 x i64> %a562, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %6735 = sext <32 x i32> %6723 to <32 x i64>
  %a566 = mul nsw <32 x i64> %5327, %6735
  %6736 = icmp slt <32 x i64> %a566, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6737 = select <32 x i1> %6736, <32 x i64> %a566, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6738 = add nsw <32 x i64> %6737, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a565 = ashr <32 x i64> %6738, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6739 = icmp slt <32 x i64> %a565, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a564 = select <32 x i1> %6739, <32 x i64> %a565, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %6740 = sext <32 x i32> %6724 to <32 x i64>
  %a569 = mul nsw <32 x i64> %5327, %6740
  %6741 = icmp slt <32 x i64> %a569, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6742 = select <32 x i1> %6741, <32 x i64> %a569, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6743 = add nsw <32 x i64> %6742, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a568 = ashr <32 x i64> %6743, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6744 = icmp slt <32 x i64> %a568, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a567 = select <32 x i1> %6744, <32 x i64> %a568, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  br i1 %5321, label %"for output.s0.y.yo1761.preheader.split.us", label %"end for output.s0.y.yo1762", !prof !101

"for output.s0.y.yo1761.preheader.split.us":      ; preds = %"for output.s0.y.yo1761.preheader"
  %6745 = icmp sgt <32 x i64> %a567, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6746 = select <32 x i1> %6745, <32 x i64> %a567, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6747 = trunc <32 x i64> %6746 to <32 x i32>
  %6748 = icmp sgt <32 x i64> %a564, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6749 = select <32 x i1> %6748, <32 x i64> %a564, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6750 = trunc <32 x i64> %6749 to <32 x i32>
  %6751 = icmp sgt <32 x i64> %a561, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6752 = select <32 x i1> %6751, <32 x i64> %a561, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6753 = trunc <32 x i64> %6752 to <32 x i32>
  %6754 = icmp sgt <32 x i64> %a558, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6755 = select <32 x i1> %6754, <32 x i64> %a558, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6756 = trunc <32 x i64> %6755 to <32 x i32>
  %6757 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %6758 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5329) #11
  %6759 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6756, <32 x i32> %6758) #11
  %6760 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6759, <32 x i32> %6757) #11
  %6761 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %6760) #11
  %6762 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6753, <32 x i32> %6758) #11
  %6763 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6762, <32 x i32> %6757) #11
  %6764 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %6763, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %6765 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6761, <32 x i32> %6764) #11
  %6766 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6765) #11
  %6767 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6766) #11
  %6768 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6765) #11
  %6769 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6768) #11
  %6770 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6767, <32 x i32> %6769) #11
  %6771 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6770) #11
  %6772 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6770) #11
  %6773 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %6771, <32 x i32> %6772) #11
  %6774 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %5333, <32 x i32> %6773) #11
  %6775 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %6776 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %6774, <32 x i32> %6775) #11
  %6777 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4912, <32 x i32> %6776) #11
  %6778 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %6779 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6750, <32 x i32> %6758) #11
  %6780 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6779, <32 x i32> %6757) #11
  %6781 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %6780) #11
  %6782 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6747, <32 x i32> %6758) #11
  %6783 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6782, <32 x i32> %6757) #11
  %6784 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %6783, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %6785 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6781, <32 x i32> %6784) #11
  %6786 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6785) #11
  %6787 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6786) #11
  %6788 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6785) #11
  %6789 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6788) #11
  %6790 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6787, <32 x i32> %6789) #11
  %6791 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6790) #11
  %6792 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6790) #11
  %6793 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %6791, <32 x i32> %6792) #11
  %6794 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %5333, <32 x i32> %6793) #11
  %6795 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %6778, <32 x i32> %6794) #11
  %6796 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4915, <32 x i32> %6795) #11
  %6797 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6777, <32 x i32> %6796) #11
  %6798 = bitcast <64 x i32> %6797 to <32 x i64>
  %6799 = shufflevector <32 x i64> %6798, <32 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6800 = bitcast <8 x i64> %6799 to <32 x i16>
  %6801 = trunc <32 x i16> %6800 to <32 x i8>
  %6802 = shufflevector <32 x i8> %6801, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6803 = bitcast <128 x i8> %6802 to <32 x i32>
  %6804 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %6803, <32 x i32> %5336) #11
  %6805 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %6804, <32 x i32> %5339) #11
  %6806 = bitcast <32 x i32> %6805 to <128 x i8>
  %6807 = shufflevector <128 x i8> %6806, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6808 = shufflevector <32 x i64> %6798, <32 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6809 = bitcast <8 x i64> %6808 to <32 x i16>
  %6810 = trunc <32 x i16> %6809 to <32 x i8>
  %6811 = shufflevector <32 x i8> %6810, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6812 = bitcast <128 x i8> %6811 to <32 x i32>
  %6813 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %6812, <32 x i32> %5336) #11
  %6814 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %6813, <32 x i32> %5339) #11
  %6815 = bitcast <32 x i32> %6814 to <128 x i8>
  %6816 = shufflevector <128 x i8> %6815, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6817 = shufflevector <32 x i64> %6798, <32 x i64> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6818 = bitcast <8 x i64> %6817 to <32 x i16>
  %6819 = trunc <32 x i16> %6818 to <32 x i8>
  %6820 = shufflevector <32 x i8> %6819, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6821 = bitcast <128 x i8> %6820 to <32 x i32>
  %6822 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %6821, <32 x i32> %5336) #11
  %6823 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %6822, <32 x i32> %5339) #11
  %6824 = bitcast <32 x i32> %6823 to <128 x i8>
  %6825 = shufflevector <128 x i8> %6824, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6826 = shufflevector <32 x i64> %6798, <32 x i64> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6827 = bitcast <8 x i64> %6826 to <32 x i16>
  %6828 = trunc <32 x i16> %6827 to <32 x i8>
  %6829 = shufflevector <32 x i8> %6828, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6830 = bitcast <128 x i8> %6829 to <32 x i32>
  %6831 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %6830, <32 x i32> %5336) #11
  %6832 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %6831, <32 x i32> %5339) #11
  %6833 = bitcast <32 x i32> %6832 to <128 x i8>
  %6834 = shufflevector <128 x i8> %6833, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %"for output.s0.y.yo1761.us"

"for output.s0.y.yo1761.us":                      ; preds = %"end for output.s0.x.xo1765.loopexit.us", %"for output.s0.y.yo1761.preheader.split.us"
  %output.s0.y.yo1763.us = phi i32 [ %6970, %"end for output.s0.x.xo1765.loopexit.us" ], [ 0, %"for output.s0.y.yo1761.preheader.split.us" ]
  %6835 = add nsw i32 %output.s0.y.yo1763.us, %22
  %6836 = mul nsw i32 %6835, %24
  %6837 = add i32 %6836, %6720
  br i1 %brmerge, label %"for output.s0.x.xo1764.us.us.preheader", label %"for output.s0.x.xo1764.preheader.split.us2177", !prof !241

"for output.s0.x.xo1764.us.us.preheader":         ; preds = %"for output.s0.y.yo1761.us"
  br i1 %5346, label %"end for output.s0.x.xo1765.loopexit.us.loopexit.unr-lcssa", label %"for output.s0.x.xo1764.us.us"

"for output.s0.x.xo1764.us2172":                  ; preds = %"for output.s0.x.xo1764.us2172.preheader", %"for output.s0.x.xo1764.us2172"
  %output.s0.x.xo1766.us2173 = phi i32 [ %6933, %"for output.s0.x.xo1764.us2172" ], [ 0, %"for output.s0.x.xo1764.us2172.preheader" ]
  %niter3015 = phi i32 [ %niter3015.nsub.7, %"for output.s0.x.xo1764.us2172" ], [ %unroll_iter3014, %"for output.s0.x.xo1764.us2172.preheader" ]
  %6838 = add nsw i32 %output.s0.x.xo1766.us2173, %19
  %6839 = mul nsw i32 %6838, %21
  %t2473.us2174 = add i32 %6837, %6839
  %6840 = sub i32 %t2473.us2174, %reass.add2124
  %6841 = getelementptr inbounds i8, i8* %17, i32 %6840
  %6842 = bitcast i8* %6841 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6842, i32 1, <32 x i1> %5324), !tbaa !217
  %6843 = getelementptr inbounds i8, i8* %6841, i32 32
  %6844 = bitcast i8* %6843 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6844, i32 1, <32 x i1> %5340), !tbaa !217
  %6845 = getelementptr inbounds i8, i8* %6841, i32 64
  %6846 = bitcast i8* %6845 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6846, i32 1, <32 x i1> %5341), !tbaa !217
  %6847 = getelementptr inbounds i8, i8* %6841, i32 96
  %6848 = bitcast i8* %6847 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6848, i32 1, <32 x i1> %5342), !tbaa !217
  %6849 = or i32 %output.s0.x.xo1766.us2173, 1
  %6850 = add nsw i32 %6849, %19
  %6851 = mul nsw i32 %6850, %21
  %t2473.us2174.1 = add i32 %6837, %6851
  %6852 = sub i32 %t2473.us2174.1, %reass.add2124
  %6853 = getelementptr inbounds i8, i8* %17, i32 %6852
  %6854 = bitcast i8* %6853 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6854, i32 1, <32 x i1> %5324), !tbaa !217
  %6855 = getelementptr inbounds i8, i8* %6853, i32 32
  %6856 = bitcast i8* %6855 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6856, i32 1, <32 x i1> %5340), !tbaa !217
  %6857 = getelementptr inbounds i8, i8* %6853, i32 64
  %6858 = bitcast i8* %6857 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6858, i32 1, <32 x i1> %5341), !tbaa !217
  %6859 = getelementptr inbounds i8, i8* %6853, i32 96
  %6860 = bitcast i8* %6859 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6860, i32 1, <32 x i1> %5342), !tbaa !217
  %6861 = or i32 %output.s0.x.xo1766.us2173, 2
  %6862 = add nsw i32 %6861, %19
  %6863 = mul nsw i32 %6862, %21
  %t2473.us2174.2 = add i32 %6837, %6863
  %6864 = sub i32 %t2473.us2174.2, %reass.add2124
  %6865 = getelementptr inbounds i8, i8* %17, i32 %6864
  %6866 = bitcast i8* %6865 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6866, i32 1, <32 x i1> %5324), !tbaa !217
  %6867 = getelementptr inbounds i8, i8* %6865, i32 32
  %6868 = bitcast i8* %6867 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6868, i32 1, <32 x i1> %5340), !tbaa !217
  %6869 = getelementptr inbounds i8, i8* %6865, i32 64
  %6870 = bitcast i8* %6869 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6870, i32 1, <32 x i1> %5341), !tbaa !217
  %6871 = getelementptr inbounds i8, i8* %6865, i32 96
  %6872 = bitcast i8* %6871 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6872, i32 1, <32 x i1> %5342), !tbaa !217
  %6873 = or i32 %output.s0.x.xo1766.us2173, 3
  %6874 = add nsw i32 %6873, %19
  %6875 = mul nsw i32 %6874, %21
  %t2473.us2174.3 = add i32 %6837, %6875
  %6876 = sub i32 %t2473.us2174.3, %reass.add2124
  %6877 = getelementptr inbounds i8, i8* %17, i32 %6876
  %6878 = bitcast i8* %6877 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6878, i32 1, <32 x i1> %5324), !tbaa !217
  %6879 = getelementptr inbounds i8, i8* %6877, i32 32
  %6880 = bitcast i8* %6879 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6880, i32 1, <32 x i1> %5340), !tbaa !217
  %6881 = getelementptr inbounds i8, i8* %6877, i32 64
  %6882 = bitcast i8* %6881 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6882, i32 1, <32 x i1> %5341), !tbaa !217
  %6883 = getelementptr inbounds i8, i8* %6877, i32 96
  %6884 = bitcast i8* %6883 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6884, i32 1, <32 x i1> %5342), !tbaa !217
  %6885 = or i32 %output.s0.x.xo1766.us2173, 4
  %6886 = add nsw i32 %6885, %19
  %6887 = mul nsw i32 %6886, %21
  %t2473.us2174.4 = add i32 %6837, %6887
  %6888 = sub i32 %t2473.us2174.4, %reass.add2124
  %6889 = getelementptr inbounds i8, i8* %17, i32 %6888
  %6890 = bitcast i8* %6889 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6890, i32 1, <32 x i1> %5324), !tbaa !217
  %6891 = getelementptr inbounds i8, i8* %6889, i32 32
  %6892 = bitcast i8* %6891 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6892, i32 1, <32 x i1> %5340), !tbaa !217
  %6893 = getelementptr inbounds i8, i8* %6889, i32 64
  %6894 = bitcast i8* %6893 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6894, i32 1, <32 x i1> %5341), !tbaa !217
  %6895 = getelementptr inbounds i8, i8* %6889, i32 96
  %6896 = bitcast i8* %6895 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6896, i32 1, <32 x i1> %5342), !tbaa !217
  %6897 = or i32 %output.s0.x.xo1766.us2173, 5
  %6898 = add nsw i32 %6897, %19
  %6899 = mul nsw i32 %6898, %21
  %t2473.us2174.5 = add i32 %6837, %6899
  %6900 = sub i32 %t2473.us2174.5, %reass.add2124
  %6901 = getelementptr inbounds i8, i8* %17, i32 %6900
  %6902 = bitcast i8* %6901 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6902, i32 1, <32 x i1> %5324), !tbaa !217
  %6903 = getelementptr inbounds i8, i8* %6901, i32 32
  %6904 = bitcast i8* %6903 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6904, i32 1, <32 x i1> %5340), !tbaa !217
  %6905 = getelementptr inbounds i8, i8* %6901, i32 64
  %6906 = bitcast i8* %6905 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6906, i32 1, <32 x i1> %5341), !tbaa !217
  %6907 = getelementptr inbounds i8, i8* %6901, i32 96
  %6908 = bitcast i8* %6907 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6908, i32 1, <32 x i1> %5342), !tbaa !217
  %6909 = or i32 %output.s0.x.xo1766.us2173, 6
  %6910 = add nsw i32 %6909, %19
  %6911 = mul nsw i32 %6910, %21
  %t2473.us2174.6 = add i32 %6837, %6911
  %6912 = sub i32 %t2473.us2174.6, %reass.add2124
  %6913 = getelementptr inbounds i8, i8* %17, i32 %6912
  %6914 = bitcast i8* %6913 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6914, i32 1, <32 x i1> %5324), !tbaa !217
  %6915 = getelementptr inbounds i8, i8* %6913, i32 32
  %6916 = bitcast i8* %6915 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6916, i32 1, <32 x i1> %5340), !tbaa !217
  %6917 = getelementptr inbounds i8, i8* %6913, i32 64
  %6918 = bitcast i8* %6917 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6918, i32 1, <32 x i1> %5341), !tbaa !217
  %6919 = getelementptr inbounds i8, i8* %6913, i32 96
  %6920 = bitcast i8* %6919 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6920, i32 1, <32 x i1> %5342), !tbaa !217
  %6921 = or i32 %output.s0.x.xo1766.us2173, 7
  %6922 = add nsw i32 %6921, %19
  %6923 = mul nsw i32 %6922, %21
  %t2473.us2174.7 = add i32 %6837, %6923
  %6924 = sub i32 %t2473.us2174.7, %reass.add2124
  %6925 = getelementptr inbounds i8, i8* %17, i32 %6924
  %6926 = bitcast i8* %6925 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6926, i32 1, <32 x i1> %5324), !tbaa !217
  %6927 = getelementptr inbounds i8, i8* %6925, i32 32
  %6928 = bitcast i8* %6927 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6928, i32 1, <32 x i1> %5340), !tbaa !217
  %6929 = getelementptr inbounds i8, i8* %6925, i32 64
  %6930 = bitcast i8* %6929 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6930, i32 1, <32 x i1> %5341), !tbaa !217
  %6931 = getelementptr inbounds i8, i8* %6925, i32 96
  %6932 = bitcast i8* %6931 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6932, i32 1, <32 x i1> %5342), !tbaa !217
  %6933 = add nuw nsw i32 %output.s0.x.xo1766.us2173, 8
  %niter3015.nsub.7 = add i32 %niter3015, -8
  %niter3015.ncmp.7 = icmp eq i32 %niter3015.nsub.7, 0
  br i1 %niter3015.ncmp.7, label %"end for output.s0.x.xo1765.loopexit.us.loopexit2987.unr-lcssa", label %"for output.s0.x.xo1764.us2172"

"for output.s0.x.xo1764.preheader.split.us2177":  ; preds = %"for output.s0.y.yo1761.us"
  br i1 %4524, label %"for output.s0.x.xo1764.us2168.us.preheader", label %"for output.s0.x.xo1764.us2172.preheader", !prof !101

"for output.s0.x.xo1764.us2172.preheader":        ; preds = %"for output.s0.x.xo1764.preheader.split.us2177"
  br i1 %5344, label %"end for output.s0.x.xo1765.loopexit.us.loopexit2987.unr-lcssa", label %"for output.s0.x.xo1764.us2172"

"for output.s0.x.xo1764.us2168.us.preheader":     ; preds = %"for output.s0.x.xo1764.preheader.split.us2177"
  br i1 %5345, label %"end for output.s0.x.xo1765.loopexit.us.loopexit2986.unr-lcssa", label %"for output.s0.x.xo1764.us2168.us"

"end for output.s0.x.xo1765.loopexit.us.loopexit.unr-lcssa": ; preds = %"for output.s0.x.xo1764.us.us", %"for output.s0.x.xo1764.us.us.preheader"
  %output.s0.x.xo1766.us.us.unr = phi i32 [ 0, %"for output.s0.x.xo1764.us.us.preheader" ], [ %7066, %"for output.s0.x.xo1764.us.us" ]
  br i1 %lcmp.mod3023.not, label %"end for output.s0.x.xo1765.loopexit.us", label %"for output.s0.x.xo1764.us.us.epil"

"for output.s0.x.xo1764.us.us.epil":              ; preds = %"end for output.s0.x.xo1765.loopexit.us.loopexit.unr-lcssa", %"for output.s0.x.xo1764.us.us.epil"
  %output.s0.x.xo1766.us.us.epil = phi i32 [ %6945, %"for output.s0.x.xo1764.us.us.epil" ], [ %output.s0.x.xo1766.us.us.unr, %"end for output.s0.x.xo1765.loopexit.us.loopexit.unr-lcssa" ]
  %epil.iter3022 = phi i32 [ %epil.iter3022.sub, %"for output.s0.x.xo1764.us.us.epil" ], [ %xtraiter3021, %"end for output.s0.x.xo1765.loopexit.us.loopexit.unr-lcssa" ]
  %6934 = add nsw i32 %output.s0.x.xo1766.us.us.epil, %19
  %6935 = mul nsw i32 %6934, %21
  %t2473.us.us.epil = add i32 %6837, %6935
  %6936 = sub i32 %t2473.us.us.epil, %reass.add2124
  %6937 = getelementptr inbounds i8, i8* %17, i32 %6936
  %6938 = bitcast i8* %6937 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6938, i32 1, <32 x i1> %5324), !tbaa !217
  %6939 = getelementptr inbounds i8, i8* %6937, i32 32
  %6940 = bitcast i8* %6939 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6940, i32 1, <32 x i1> %5340), !tbaa !217
  %6941 = getelementptr inbounds i8, i8* %6937, i32 64
  %6942 = bitcast i8* %6941 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6942, i32 1, <32 x i1> %5341), !tbaa !217
  %6943 = getelementptr inbounds i8, i8* %6937, i32 96
  %6944 = bitcast i8* %6943 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6944, i32 1, <32 x i1> %5342), !tbaa !217
  %6945 = add nuw nsw i32 %output.s0.x.xo1766.us.us.epil, 1
  %epil.iter3022.sub = add i32 %epil.iter3022, -1
  %epil.iter3022.cmp.not = icmp eq i32 %epil.iter3022.sub, 0
  br i1 %epil.iter3022.cmp.not, label %"end for output.s0.x.xo1765.loopexit.us", label %"for output.s0.x.xo1764.us.us.epil", !llvm.loop !242

"end for output.s0.x.xo1765.loopexit.us.loopexit2986.unr-lcssa": ; preds = %"for output.s0.x.xo1764.us2168.us", %"for output.s0.x.xo1764.us2168.us.preheader"
  %output.s0.x.xo1766.us2169.us.unr = phi i32 [ 0, %"for output.s0.x.xo1764.us2168.us.preheader" ], [ %7162, %"for output.s0.x.xo1764.us2168.us" ]
  br i1 %lcmp.mod3018.not, label %"end for output.s0.x.xo1765.loopexit.us", label %"for output.s0.x.xo1764.us2168.us.epil"

"for output.s0.x.xo1764.us2168.us.epil":          ; preds = %"end for output.s0.x.xo1765.loopexit.us.loopexit2986.unr-lcssa", %"for output.s0.x.xo1764.us2168.us.epil"
  %output.s0.x.xo1766.us2169.us.epil = phi i32 [ %6957, %"for output.s0.x.xo1764.us2168.us.epil" ], [ %output.s0.x.xo1766.us2169.us.unr, %"end for output.s0.x.xo1765.loopexit.us.loopexit2986.unr-lcssa" ]
  %epil.iter3017 = phi i32 [ %epil.iter3017.sub, %"for output.s0.x.xo1764.us2168.us.epil" ], [ %xtraiter3016, %"end for output.s0.x.xo1765.loopexit.us.loopexit2986.unr-lcssa" ]
  %6946 = add nsw i32 %output.s0.x.xo1766.us2169.us.epil, %19
  %6947 = mul nsw i32 %6946, %21
  %t2473.us2170.us.epil = add i32 %6837, %6947
  %6948 = sub i32 %t2473.us2170.us.epil, %reass.add2124
  %6949 = getelementptr inbounds i8, i8* %17, i32 %6948
  %6950 = bitcast i8* %6949 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6950, i32 1, <32 x i1> %5324), !tbaa !217
  %6951 = getelementptr inbounds i8, i8* %6949, i32 32
  %6952 = bitcast i8* %6951 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6952, i32 1, <32 x i1> %5340), !tbaa !217
  %6953 = getelementptr inbounds i8, i8* %6949, i32 64
  %6954 = bitcast i8* %6953 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6954, i32 1, <32 x i1> %5341), !tbaa !217
  %6955 = getelementptr inbounds i8, i8* %6949, i32 96
  %6956 = bitcast i8* %6955 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6956, i32 1, <32 x i1> %5342), !tbaa !217
  %6957 = add nuw nsw i32 %output.s0.x.xo1766.us2169.us.epil, 1
  %epil.iter3017.sub = add i32 %epil.iter3017, -1
  %epil.iter3017.cmp.not = icmp eq i32 %epil.iter3017.sub, 0
  br i1 %epil.iter3017.cmp.not, label %"end for output.s0.x.xo1765.loopexit.us", label %"for output.s0.x.xo1764.us2168.us.epil", !llvm.loop !243

"end for output.s0.x.xo1765.loopexit.us.loopexit2987.unr-lcssa": ; preds = %"for output.s0.x.xo1764.us2172", %"for output.s0.x.xo1764.us2172.preheader"
  %output.s0.x.xo1766.us2173.unr = phi i32 [ 0, %"for output.s0.x.xo1764.us2172.preheader" ], [ %6933, %"for output.s0.x.xo1764.us2172" ]
  br i1 %lcmp.mod3013.not, label %"end for output.s0.x.xo1765.loopexit.us", label %"for output.s0.x.xo1764.us2172.epil"

"for output.s0.x.xo1764.us2172.epil":             ; preds = %"end for output.s0.x.xo1765.loopexit.us.loopexit2987.unr-lcssa", %"for output.s0.x.xo1764.us2172.epil"
  %output.s0.x.xo1766.us2173.epil = phi i32 [ %6969, %"for output.s0.x.xo1764.us2172.epil" ], [ %output.s0.x.xo1766.us2173.unr, %"end for output.s0.x.xo1765.loopexit.us.loopexit2987.unr-lcssa" ]
  %epil.iter3012 = phi i32 [ %epil.iter3012.sub, %"for output.s0.x.xo1764.us2172.epil" ], [ %xtraiter3011, %"end for output.s0.x.xo1765.loopexit.us.loopexit2987.unr-lcssa" ]
  %6958 = add nsw i32 %output.s0.x.xo1766.us2173.epil, %19
  %6959 = mul nsw i32 %6958, %21
  %t2473.us2174.epil = add i32 %6837, %6959
  %6960 = sub i32 %t2473.us2174.epil, %reass.add2124
  %6961 = getelementptr inbounds i8, i8* %17, i32 %6960
  %6962 = bitcast i8* %6961 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6962, i32 1, <32 x i1> %5324), !tbaa !217
  %6963 = getelementptr inbounds i8, i8* %6961, i32 32
  %6964 = bitcast i8* %6963 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6964, i32 1, <32 x i1> %5340), !tbaa !217
  %6965 = getelementptr inbounds i8, i8* %6961, i32 64
  %6966 = bitcast i8* %6965 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6966, i32 1, <32 x i1> %5341), !tbaa !217
  %6967 = getelementptr inbounds i8, i8* %6961, i32 96
  %6968 = bitcast i8* %6967 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6968, i32 1, <32 x i1> %5342), !tbaa !217
  %6969 = add nuw nsw i32 %output.s0.x.xo1766.us2173.epil, 1
  %epil.iter3012.sub = add i32 %epil.iter3012, -1
  %epil.iter3012.cmp.not = icmp eq i32 %epil.iter3012.sub, 0
  br i1 %epil.iter3012.cmp.not, label %"end for output.s0.x.xo1765.loopexit.us", label %"for output.s0.x.xo1764.us2172.epil", !llvm.loop !244

"end for output.s0.x.xo1765.loopexit.us":         ; preds = %"end for output.s0.x.xo1765.loopexit.us.loopexit2987.unr-lcssa", %"for output.s0.x.xo1764.us2172.epil", %"end for output.s0.x.xo1765.loopexit.us.loopexit2986.unr-lcssa", %"for output.s0.x.xo1764.us2168.us.epil", %"end for output.s0.x.xo1765.loopexit.us.loopexit.unr-lcssa", %"for output.s0.x.xo1764.us.us.epil"
  %6970 = add nuw nsw i32 %output.s0.y.yo1763.us, 1
  %.not1820.us = icmp eq i32 %6970, %23
  br i1 %.not1820.us, label %"end for output.s0.y.yo1762", label %"for output.s0.y.yo1761.us"

"for output.s0.x.xo1764.us.us":                   ; preds = %"for output.s0.x.xo1764.us.us.preheader", %"for output.s0.x.xo1764.us.us"
  %output.s0.x.xo1766.us.us = phi i32 [ %7066, %"for output.s0.x.xo1764.us.us" ], [ 0, %"for output.s0.x.xo1764.us.us.preheader" ]
  %niter3025 = phi i32 [ %niter3025.nsub.7, %"for output.s0.x.xo1764.us.us" ], [ %unroll_iter3024, %"for output.s0.x.xo1764.us.us.preheader" ]
  %6971 = add nsw i32 %output.s0.x.xo1766.us.us, %19
  %6972 = mul nsw i32 %6971, %21
  %t2473.us.us = add i32 %6837, %6972
  %6973 = sub i32 %t2473.us.us, %reass.add2124
  %6974 = getelementptr inbounds i8, i8* %17, i32 %6973
  %6975 = bitcast i8* %6974 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6975, i32 1, <32 x i1> %5324), !tbaa !217
  %6976 = getelementptr inbounds i8, i8* %6974, i32 32
  %6977 = bitcast i8* %6976 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6977, i32 1, <32 x i1> %5340), !tbaa !217
  %6978 = getelementptr inbounds i8, i8* %6974, i32 64
  %6979 = bitcast i8* %6978 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6979, i32 1, <32 x i1> %5341), !tbaa !217
  %6980 = getelementptr inbounds i8, i8* %6974, i32 96
  %6981 = bitcast i8* %6980 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6981, i32 1, <32 x i1> %5342), !tbaa !217
  %6982 = or i32 %output.s0.x.xo1766.us.us, 1
  %6983 = add nsw i32 %6982, %19
  %6984 = mul nsw i32 %6983, %21
  %t2473.us.us.1 = add i32 %6837, %6984
  %6985 = sub i32 %t2473.us.us.1, %reass.add2124
  %6986 = getelementptr inbounds i8, i8* %17, i32 %6985
  %6987 = bitcast i8* %6986 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6987, i32 1, <32 x i1> %5324), !tbaa !217
  %6988 = getelementptr inbounds i8, i8* %6986, i32 32
  %6989 = bitcast i8* %6988 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %6989, i32 1, <32 x i1> %5340), !tbaa !217
  %6990 = getelementptr inbounds i8, i8* %6986, i32 64
  %6991 = bitcast i8* %6990 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %6991, i32 1, <32 x i1> %5341), !tbaa !217
  %6992 = getelementptr inbounds i8, i8* %6986, i32 96
  %6993 = bitcast i8* %6992 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %6993, i32 1, <32 x i1> %5342), !tbaa !217
  %6994 = or i32 %output.s0.x.xo1766.us.us, 2
  %6995 = add nsw i32 %6994, %19
  %6996 = mul nsw i32 %6995, %21
  %t2473.us.us.2 = add i32 %6837, %6996
  %6997 = sub i32 %t2473.us.us.2, %reass.add2124
  %6998 = getelementptr inbounds i8, i8* %17, i32 %6997
  %6999 = bitcast i8* %6998 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %6999, i32 1, <32 x i1> %5324), !tbaa !217
  %7000 = getelementptr inbounds i8, i8* %6998, i32 32
  %7001 = bitcast i8* %7000 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7001, i32 1, <32 x i1> %5340), !tbaa !217
  %7002 = getelementptr inbounds i8, i8* %6998, i32 64
  %7003 = bitcast i8* %7002 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7003, i32 1, <32 x i1> %5341), !tbaa !217
  %7004 = getelementptr inbounds i8, i8* %6998, i32 96
  %7005 = bitcast i8* %7004 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7005, i32 1, <32 x i1> %5342), !tbaa !217
  %7006 = or i32 %output.s0.x.xo1766.us.us, 3
  %7007 = add nsw i32 %7006, %19
  %7008 = mul nsw i32 %7007, %21
  %t2473.us.us.3 = add i32 %6837, %7008
  %7009 = sub i32 %t2473.us.us.3, %reass.add2124
  %7010 = getelementptr inbounds i8, i8* %17, i32 %7009
  %7011 = bitcast i8* %7010 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7011, i32 1, <32 x i1> %5324), !tbaa !217
  %7012 = getelementptr inbounds i8, i8* %7010, i32 32
  %7013 = bitcast i8* %7012 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7013, i32 1, <32 x i1> %5340), !tbaa !217
  %7014 = getelementptr inbounds i8, i8* %7010, i32 64
  %7015 = bitcast i8* %7014 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7015, i32 1, <32 x i1> %5341), !tbaa !217
  %7016 = getelementptr inbounds i8, i8* %7010, i32 96
  %7017 = bitcast i8* %7016 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7017, i32 1, <32 x i1> %5342), !tbaa !217
  %7018 = or i32 %output.s0.x.xo1766.us.us, 4
  %7019 = add nsw i32 %7018, %19
  %7020 = mul nsw i32 %7019, %21
  %t2473.us.us.4 = add i32 %6837, %7020
  %7021 = sub i32 %t2473.us.us.4, %reass.add2124
  %7022 = getelementptr inbounds i8, i8* %17, i32 %7021
  %7023 = bitcast i8* %7022 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7023, i32 1, <32 x i1> %5324), !tbaa !217
  %7024 = getelementptr inbounds i8, i8* %7022, i32 32
  %7025 = bitcast i8* %7024 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7025, i32 1, <32 x i1> %5340), !tbaa !217
  %7026 = getelementptr inbounds i8, i8* %7022, i32 64
  %7027 = bitcast i8* %7026 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7027, i32 1, <32 x i1> %5341), !tbaa !217
  %7028 = getelementptr inbounds i8, i8* %7022, i32 96
  %7029 = bitcast i8* %7028 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7029, i32 1, <32 x i1> %5342), !tbaa !217
  %7030 = or i32 %output.s0.x.xo1766.us.us, 5
  %7031 = add nsw i32 %7030, %19
  %7032 = mul nsw i32 %7031, %21
  %t2473.us.us.5 = add i32 %6837, %7032
  %7033 = sub i32 %t2473.us.us.5, %reass.add2124
  %7034 = getelementptr inbounds i8, i8* %17, i32 %7033
  %7035 = bitcast i8* %7034 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7035, i32 1, <32 x i1> %5324), !tbaa !217
  %7036 = getelementptr inbounds i8, i8* %7034, i32 32
  %7037 = bitcast i8* %7036 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7037, i32 1, <32 x i1> %5340), !tbaa !217
  %7038 = getelementptr inbounds i8, i8* %7034, i32 64
  %7039 = bitcast i8* %7038 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7039, i32 1, <32 x i1> %5341), !tbaa !217
  %7040 = getelementptr inbounds i8, i8* %7034, i32 96
  %7041 = bitcast i8* %7040 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7041, i32 1, <32 x i1> %5342), !tbaa !217
  %7042 = or i32 %output.s0.x.xo1766.us.us, 6
  %7043 = add nsw i32 %7042, %19
  %7044 = mul nsw i32 %7043, %21
  %t2473.us.us.6 = add i32 %6837, %7044
  %7045 = sub i32 %t2473.us.us.6, %reass.add2124
  %7046 = getelementptr inbounds i8, i8* %17, i32 %7045
  %7047 = bitcast i8* %7046 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7047, i32 1, <32 x i1> %5324), !tbaa !217
  %7048 = getelementptr inbounds i8, i8* %7046, i32 32
  %7049 = bitcast i8* %7048 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7049, i32 1, <32 x i1> %5340), !tbaa !217
  %7050 = getelementptr inbounds i8, i8* %7046, i32 64
  %7051 = bitcast i8* %7050 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7051, i32 1, <32 x i1> %5341), !tbaa !217
  %7052 = getelementptr inbounds i8, i8* %7046, i32 96
  %7053 = bitcast i8* %7052 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7053, i32 1, <32 x i1> %5342), !tbaa !217
  %7054 = or i32 %output.s0.x.xo1766.us.us, 7
  %7055 = add nsw i32 %7054, %19
  %7056 = mul nsw i32 %7055, %21
  %t2473.us.us.7 = add i32 %6837, %7056
  %7057 = sub i32 %t2473.us.us.7, %reass.add2124
  %7058 = getelementptr inbounds i8, i8* %17, i32 %7057
  %7059 = bitcast i8* %7058 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7059, i32 1, <32 x i1> %5324), !tbaa !217
  %7060 = getelementptr inbounds i8, i8* %7058, i32 32
  %7061 = bitcast i8* %7060 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7061, i32 1, <32 x i1> %5340), !tbaa !217
  %7062 = getelementptr inbounds i8, i8* %7058, i32 64
  %7063 = bitcast i8* %7062 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7063, i32 1, <32 x i1> %5341), !tbaa !217
  %7064 = getelementptr inbounds i8, i8* %7058, i32 96
  %7065 = bitcast i8* %7064 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7065, i32 1, <32 x i1> %5342), !tbaa !217
  %7066 = add nuw nsw i32 %output.s0.x.xo1766.us.us, 8
  %niter3025.nsub.7 = add i32 %niter3025, -8
  %niter3025.ncmp.7 = icmp eq i32 %niter3025.nsub.7, 0
  br i1 %niter3025.ncmp.7, label %"end for output.s0.x.xo1765.loopexit.us.loopexit.unr-lcssa", label %"for output.s0.x.xo1764.us.us"

"for output.s0.x.xo1764.us2168.us":               ; preds = %"for output.s0.x.xo1764.us2168.us.preheader", %"for output.s0.x.xo1764.us2168.us"
  %output.s0.x.xo1766.us2169.us = phi i32 [ %7162, %"for output.s0.x.xo1764.us2168.us" ], [ 0, %"for output.s0.x.xo1764.us2168.us.preheader" ]
  %niter3020 = phi i32 [ %niter3020.nsub.7, %"for output.s0.x.xo1764.us2168.us" ], [ %unroll_iter3019, %"for output.s0.x.xo1764.us2168.us.preheader" ]
  %7067 = add nsw i32 %output.s0.x.xo1766.us2169.us, %19
  %7068 = mul nsw i32 %7067, %21
  %t2473.us2170.us = add i32 %6837, %7068
  %7069 = sub i32 %t2473.us2170.us, %reass.add2124
  %7070 = getelementptr inbounds i8, i8* %17, i32 %7069
  %7071 = bitcast i8* %7070 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7071, i32 1, <32 x i1> %5324), !tbaa !217
  %7072 = getelementptr inbounds i8, i8* %7070, i32 32
  %7073 = bitcast i8* %7072 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7073, i32 1, <32 x i1> %5340), !tbaa !217
  %7074 = getelementptr inbounds i8, i8* %7070, i32 64
  %7075 = bitcast i8* %7074 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7075, i32 1, <32 x i1> %5341), !tbaa !217
  %7076 = getelementptr inbounds i8, i8* %7070, i32 96
  %7077 = bitcast i8* %7076 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7077, i32 1, <32 x i1> %5342), !tbaa !217
  %7078 = or i32 %output.s0.x.xo1766.us2169.us, 1
  %7079 = add nsw i32 %7078, %19
  %7080 = mul nsw i32 %7079, %21
  %t2473.us2170.us.1 = add i32 %6837, %7080
  %7081 = sub i32 %t2473.us2170.us.1, %reass.add2124
  %7082 = getelementptr inbounds i8, i8* %17, i32 %7081
  %7083 = bitcast i8* %7082 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7083, i32 1, <32 x i1> %5324), !tbaa !217
  %7084 = getelementptr inbounds i8, i8* %7082, i32 32
  %7085 = bitcast i8* %7084 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7085, i32 1, <32 x i1> %5340), !tbaa !217
  %7086 = getelementptr inbounds i8, i8* %7082, i32 64
  %7087 = bitcast i8* %7086 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7087, i32 1, <32 x i1> %5341), !tbaa !217
  %7088 = getelementptr inbounds i8, i8* %7082, i32 96
  %7089 = bitcast i8* %7088 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7089, i32 1, <32 x i1> %5342), !tbaa !217
  %7090 = or i32 %output.s0.x.xo1766.us2169.us, 2
  %7091 = add nsw i32 %7090, %19
  %7092 = mul nsw i32 %7091, %21
  %t2473.us2170.us.2 = add i32 %6837, %7092
  %7093 = sub i32 %t2473.us2170.us.2, %reass.add2124
  %7094 = getelementptr inbounds i8, i8* %17, i32 %7093
  %7095 = bitcast i8* %7094 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7095, i32 1, <32 x i1> %5324), !tbaa !217
  %7096 = getelementptr inbounds i8, i8* %7094, i32 32
  %7097 = bitcast i8* %7096 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7097, i32 1, <32 x i1> %5340), !tbaa !217
  %7098 = getelementptr inbounds i8, i8* %7094, i32 64
  %7099 = bitcast i8* %7098 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7099, i32 1, <32 x i1> %5341), !tbaa !217
  %7100 = getelementptr inbounds i8, i8* %7094, i32 96
  %7101 = bitcast i8* %7100 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7101, i32 1, <32 x i1> %5342), !tbaa !217
  %7102 = or i32 %output.s0.x.xo1766.us2169.us, 3
  %7103 = add nsw i32 %7102, %19
  %7104 = mul nsw i32 %7103, %21
  %t2473.us2170.us.3 = add i32 %6837, %7104
  %7105 = sub i32 %t2473.us2170.us.3, %reass.add2124
  %7106 = getelementptr inbounds i8, i8* %17, i32 %7105
  %7107 = bitcast i8* %7106 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7107, i32 1, <32 x i1> %5324), !tbaa !217
  %7108 = getelementptr inbounds i8, i8* %7106, i32 32
  %7109 = bitcast i8* %7108 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7109, i32 1, <32 x i1> %5340), !tbaa !217
  %7110 = getelementptr inbounds i8, i8* %7106, i32 64
  %7111 = bitcast i8* %7110 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7111, i32 1, <32 x i1> %5341), !tbaa !217
  %7112 = getelementptr inbounds i8, i8* %7106, i32 96
  %7113 = bitcast i8* %7112 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7113, i32 1, <32 x i1> %5342), !tbaa !217
  %7114 = or i32 %output.s0.x.xo1766.us2169.us, 4
  %7115 = add nsw i32 %7114, %19
  %7116 = mul nsw i32 %7115, %21
  %t2473.us2170.us.4 = add i32 %6837, %7116
  %7117 = sub i32 %t2473.us2170.us.4, %reass.add2124
  %7118 = getelementptr inbounds i8, i8* %17, i32 %7117
  %7119 = bitcast i8* %7118 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7119, i32 1, <32 x i1> %5324), !tbaa !217
  %7120 = getelementptr inbounds i8, i8* %7118, i32 32
  %7121 = bitcast i8* %7120 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7121, i32 1, <32 x i1> %5340), !tbaa !217
  %7122 = getelementptr inbounds i8, i8* %7118, i32 64
  %7123 = bitcast i8* %7122 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7123, i32 1, <32 x i1> %5341), !tbaa !217
  %7124 = getelementptr inbounds i8, i8* %7118, i32 96
  %7125 = bitcast i8* %7124 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7125, i32 1, <32 x i1> %5342), !tbaa !217
  %7126 = or i32 %output.s0.x.xo1766.us2169.us, 5
  %7127 = add nsw i32 %7126, %19
  %7128 = mul nsw i32 %7127, %21
  %t2473.us2170.us.5 = add i32 %6837, %7128
  %7129 = sub i32 %t2473.us2170.us.5, %reass.add2124
  %7130 = getelementptr inbounds i8, i8* %17, i32 %7129
  %7131 = bitcast i8* %7130 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7131, i32 1, <32 x i1> %5324), !tbaa !217
  %7132 = getelementptr inbounds i8, i8* %7130, i32 32
  %7133 = bitcast i8* %7132 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7133, i32 1, <32 x i1> %5340), !tbaa !217
  %7134 = getelementptr inbounds i8, i8* %7130, i32 64
  %7135 = bitcast i8* %7134 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7135, i32 1, <32 x i1> %5341), !tbaa !217
  %7136 = getelementptr inbounds i8, i8* %7130, i32 96
  %7137 = bitcast i8* %7136 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7137, i32 1, <32 x i1> %5342), !tbaa !217
  %7138 = or i32 %output.s0.x.xo1766.us2169.us, 6
  %7139 = add nsw i32 %7138, %19
  %7140 = mul nsw i32 %7139, %21
  %t2473.us2170.us.6 = add i32 %6837, %7140
  %7141 = sub i32 %t2473.us2170.us.6, %reass.add2124
  %7142 = getelementptr inbounds i8, i8* %17, i32 %7141
  %7143 = bitcast i8* %7142 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7143, i32 1, <32 x i1> %5324), !tbaa !217
  %7144 = getelementptr inbounds i8, i8* %7142, i32 32
  %7145 = bitcast i8* %7144 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7145, i32 1, <32 x i1> %5340), !tbaa !217
  %7146 = getelementptr inbounds i8, i8* %7142, i32 64
  %7147 = bitcast i8* %7146 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7147, i32 1, <32 x i1> %5341), !tbaa !217
  %7148 = getelementptr inbounds i8, i8* %7142, i32 96
  %7149 = bitcast i8* %7148 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7149, i32 1, <32 x i1> %5342), !tbaa !217
  %7150 = or i32 %output.s0.x.xo1766.us2169.us, 7
  %7151 = add nsw i32 %7150, %19
  %7152 = mul nsw i32 %7151, %21
  %t2473.us2170.us.7 = add i32 %6837, %7152
  %7153 = sub i32 %t2473.us2170.us.7, %reass.add2124
  %7154 = getelementptr inbounds i8, i8* %17, i32 %7153
  %7155 = bitcast i8* %7154 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6807, <32 x i8>* %7155, i32 1, <32 x i1> %5324), !tbaa !217
  %7156 = getelementptr inbounds i8, i8* %7154, i32 32
  %7157 = bitcast i8* %7156 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6816, <32 x i8>* nonnull %7157, i32 1, <32 x i1> %5340), !tbaa !217
  %7158 = getelementptr inbounds i8, i8* %7154, i32 64
  %7159 = bitcast i8* %7158 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6825, <32 x i8>* nonnull %7159, i32 1, <32 x i1> %5341), !tbaa !217
  %7160 = getelementptr inbounds i8, i8* %7154, i32 96
  %7161 = bitcast i8* %7160 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %6834, <32 x i8>* nonnull %7161, i32 1, <32 x i1> %5342), !tbaa !217
  %7162 = add nuw nsw i32 %output.s0.x.xo1766.us2169.us, 8
  %niter3020.nsub.7 = add i32 %niter3020, -8
  %niter3020.ncmp.7 = icmp eq i32 %niter3020.nsub.7, 0
  br i1 %niter3020.ncmp.7, label %"end for output.s0.x.xo1765.loopexit.us.loopexit2986.unr-lcssa", label %"for output.s0.x.xo1764.us2168.us"

"end for output.s0.y.yo1762":                     ; preds = %"end for output.s0.x.xo1765.loopexit.us", %"for output.s0.y.yo1761.preheader", %"consume resampled_input1760"
  %7163 = add nuw nsw i32 %output.s0.b.rebased204, 1
  %.not1819 = icmp eq i32 %7163, %15
  br i1 %.not1819, label %if.then.i.loopexit, label %"for output.s0.b.rebased202"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i32 12
  %44 = load i8*, i8** %43, align 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i32 13
  %47 = load i8*, i8** %46, align 4
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i32 14
  %50 = load i8*, i8** %49, align 4
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i32 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 4
  %55 = tail call i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i16.p0v64i16(<64 x i16>, <64 x i16>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i32.p0v32i32(<32 x i32>, <32 x i32>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8 @llvm.vector.reduce.umax.v128i8(<128 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v128i8.p0v128i8(<128 x i8>, <128 x i8>*, i32 immarg, <128 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i8.p0v64i8(<64 x i8>, <64 x i8>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i8.p0v32i8(<32 x i8>, <32 x i8>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.0(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.1(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.2(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.3(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.4(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.5(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.6(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.7(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.8(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.9(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.10(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.11(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.12(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.13(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.14(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.15(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.16(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.17(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.18(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.19(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.20(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.21(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.22(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.23(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.24(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.25(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.26(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.27(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.28(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.29(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.30(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.31(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.32(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.33(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.34(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.35(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.36(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.37(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.38(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.39(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.40(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.41(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.42(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.43(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.44(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.45(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.46(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.47(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.48(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.49(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.50(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.51(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.52(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.53(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.54(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.55(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.56(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i32> @hydride.node.depthwise_conv_hvx_depth3.57(<32 x i32> returned %arg) local_unnamed_addr #12 {
entry:
  ret <32 x i32> %arg
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.58(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.59(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.60(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.61(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.4, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %4 = extractelement <1 x i32> %arg.2, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %7, <32 x i32> %5)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %8)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %arg)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vnot.128B(<32 x i32> %14)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %16)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %19, <32 x i32> %20)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %18, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2, <64 x i32> %22)
  ret <64 x i32> %23
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.62(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg.1, <64 x i32> <i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.63(<1 x i32> %arg, <64 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %1)
  %3 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2, <64 x i32> %arg.1)
  ret <64 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.64(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.65(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.66(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.67(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.68(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.69(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.70(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.71(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.72(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.73(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.74(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.75(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.76(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.77(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.78(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %4)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.79(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.80(<32 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <32 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <32 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <32 x i32> %arg.13, <32 x i32> %arg.14, <32 x i32> %arg.15, <32 x i32> %arg.16, <32 x i32> %arg.17, <32 x i32> %arg.18, <32 x i32> %arg.19, <32 x i32> %arg.20, <32 x i32> %arg.21, <32 x i32> %arg.22, <32 x i32> %arg.23, <32 x i32> %arg.24, <32 x i32> %arg.25, <32 x i32> %arg.26, <32 x i32> %arg.27, <32 x i32> %arg.28, <32 x i32> %arg.29, <32 x i32> %arg.30, <32 x i32> %arg.31, <64 x i32> %arg.32, <32 x i32> %arg.33, <32 x i32> %arg.34, <32 x i32> %arg.35, <32 x i32> %arg.36) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.34, <32 x i32> %arg.33)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.34, <32 x i32> %arg.33)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.36, <32 x i32> %arg.35)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.36, <32 x i32> %arg.35)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg.32)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.29, <32 x i32> %arg.28)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %arg.29, <32 x i32> %arg.28)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.31, <32 x i32> %arg.30)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %arg.31, <32 x i32> %arg.30)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5, <64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.25, <32 x i32> %arg.24)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %12, <32 x i32> %arg.25, <32 x i32> %arg.24)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.27, <32 x i32> %arg.26)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %arg.27, <32 x i32> %arg.26)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %13, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %11, <64 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.21, <32 x i32> %arg.20)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %18, <32 x i32> %arg.21, <32 x i32> %arg.20)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.23, <32 x i32> %arg.22)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %20, <32 x i32> %arg.23, <32 x i32> %arg.22)
  %22 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %19, <32 x i32> %21)
  %23 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %17, <64 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.17, <32 x i32> %arg.16)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %24, <32 x i32> %arg.17, <32 x i32> %arg.16)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.19, <32 x i32> %arg.18)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %26, <32 x i32> %arg.19, <32 x i32> %arg.18)
  %28 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %23, <64 x i32> %28)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.13, <32 x i32> %arg.12)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %30, <32 x i32> %arg.13, <32 x i32> %arg.12)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.15, <32 x i32> %arg.14)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %32, <32 x i32> %arg.15, <32 x i32> %arg.14)
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %31, <32 x i32> %33)
  %35 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.9, <32 x i32> %arg.8)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %arg.9, <32 x i32> %arg.8)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.11, <32 x i32> %arg.10)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %38, <32 x i32> %arg.11, <32 x i32> %arg.10)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %39)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %35, <64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.5, <32 x i32> %arg.4)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %42, <32 x i32> %arg.5, <32 x i32> %arg.4)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.7, <32 x i32> %arg.6)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %arg.7, <32 x i32> %arg.6)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %41, <64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.1, <32 x i32> %arg)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %48, <32 x i32> %arg.1, <32 x i32> %arg)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.3, <32 x i32> %arg.2)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %50, <32 x i32> %arg.3, <32 x i32> %arg.2)
  %52 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %49, <32 x i32> %51)
  %53 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %47, <64 x i32> %52)
  ret <64 x i32> %53
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.81(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.82(<64 x i32> %arg, <32 x i32> %arg.1, <32 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.2, <32 x i32> %arg.1)
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %0, <32 x i32> %arg.2, <32 x i32> %arg.1)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %arg.4, <32 x i32> %arg.3)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2, <32 x i32> %arg.4, <32 x i32> %arg.3)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1, <32 x i32> %3)
  %5 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %arg)
  ret <64 x i32> %5
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.83(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.84(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.85(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

; Function Attrs: nounwind readnone willreturn
define <256 x i8> @hydride.node.depthwise_conv_hvx_depth3.86(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <1 x i32> %arg.9, <64 x i16> %arg.10, <128 x i16> %arg.11, <128 x i16> %arg.12) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.12 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = extractelement <1 x i32> %arg.2, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = extractelement <1 x i32> %arg.1, i32 0
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6, <32 x i32> %3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %7)
  %9 = extractelement <1 x i32> %arg.4, i32 0
  %10 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %11, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %12, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %8, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %14)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %14)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %17)
  %19 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %16, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %23, <32 x i32> %22)
  %25 = bitcast <128 x i16> %arg.11 to <64 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %25)
  %31 = extractelement <1 x i32> %arg.7, i32 0
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.6, <32 x i32> %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %33, <32 x i32> %3)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %34)
  %36 = extractelement <1 x i32> %arg.9, i32 0
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.8, <32 x i32> %37)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %38, <32 x i32> %3)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %39, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %41 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %35, <32 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %41)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %44)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %43, <32 x i32> %45)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %46)
  %49 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %47, <32 x i32> %48)
  %50 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %51 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %50, <32 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %30, <32 x i32> %51)
  %53 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %29, <32 x i32> %52)
  %54 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %28, <32 x i32> %53)
  %55 = bitcast <64 x i32> %54 to <256 x i8>
  ret <256 x i8> %55
}

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!96, !11, i64 0}
!96 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !15, i64 4, !15, i64 8}
!97 = !{!96, !15, i64 8}
!98 = !{!96, !15, i64 4}
!99 = !{!"branch_weights", i32 1, i32 2000}
!100 = !{!"branch_weights", i32 0, i32 1073741824}
!101 = !{!"branch_weights", i32 1073741824, i32 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"filter", !104, i64 0}
!104 = !{!"Halide buffer"}
!105 = !{!106, !106, i64 0}
!106 = !{!"filter_zeroed", !104, i64 0}
!107 = distinct !{!107, !32}
!108 = distinct !{!108, !32}
!109 = !{!110, !110, i64 0}
!110 = !{!"bias", !104, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"offset_c.width32.base0", !113, i64 0}
!113 = !{!"offset_c.width64.base0", !114, i64 0}
!114 = !{!"offset_c.width128.base0", !115, i64 0}
!115 = !{!"offset_c.width256.base0", !116, i64 0}
!116 = !{!"offset_c.width512.base0", !117, i64 0}
!117 = !{!"offset_c.width1024.base0", !118, i64 0}
!118 = !{!"offset_c", !104, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"offset_c.width32.base32", !113, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"offset_c.width32.base64", !123, i64 0}
!123 = !{!"offset_c.width64.base64", !114, i64 0}
!124 = !{!125, !125, i64 0}
!125 = !{!"offset_c.width32.base96", !123, i64 0}
!126 = !{!"branch_weights", i32 0, i32 -2147483648}
!127 = !{!128, !128, i64 0}
!128 = !{!"input", !104, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"resampled_input", !104, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"convolved.width32.base0", !133, i64 0}
!133 = !{!"convolved.width64.base0", !134, i64 0}
!134 = !{!"convolved.width128.base0", !135, i64 0}
!135 = !{!"convolved.width256.base0", !136, i64 0}
!136 = !{!"convolved.width512.base0", !137, i64 0}
!137 = !{!"convolved.width1024.base0", !138, i64 0}
!138 = !{!"convolved", !104, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"convolved.width32.base32", !133, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"convolved.width32.base64", !143, i64 0}
!143 = !{!"convolved.width64.base64", !134, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"convolved.width32.base96", !143, i64 0}
!146 = !{!147, !147, i64 0}
!147 = !{!"convolved.width32.base128", !148, i64 0}
!148 = !{!"convolved.width64.base128", !149, i64 0}
!149 = !{!"convolved.width128.base128", !135, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"convolved.width32.base160", !148, i64 0}
!152 = !{!153, !153, i64 0}
!153 = !{!"convolved.width32.base192", !154, i64 0}
!154 = !{!"convolved.width64.base192", !149, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"convolved.width32.base224", !154, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"convolved.width32.base256", !159, i64 0}
!159 = !{!"convolved.width64.base256", !160, i64 0}
!160 = !{!"convolved.width128.base256", !161, i64 0}
!161 = !{!"convolved.width256.base256", !136, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"convolved.width32.base288", !159, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"convolved.width32.base320", !166, i64 0}
!166 = !{!"convolved.width64.base320", !160, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"convolved.width32.base352", !166, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"convolved.width32.base384", !171, i64 0}
!171 = !{!"convolved.width64.base384", !172, i64 0}
!172 = !{!"convolved.width128.base384", !161, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"convolved.width32.base416", !171, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"convolved.width32.base448", !177, i64 0}
!177 = !{!"convolved.width64.base448", !172, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"convolved.width32.base480", !177, i64 0}
!180 = !{!181, !181, i64 0}
!181 = !{!"filter_zeroed.width32.base256", !182, i64 0}
!182 = !{!"filter_zeroed.width64.base256", !183, i64 0}
!183 = !{!"filter_zeroed.width128.base256", !184, i64 0}
!184 = !{!"filter_zeroed.width256.base256", !185, i64 0}
!185 = !{!"filter_zeroed.width512.base0", !186, i64 0}
!186 = !{!"filter_zeroed.width1024.base0", !106, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"filter_zeroed.width32.base288", !182, i64 0}
!189 = !{!190, !190, i64 0}
!190 = !{!"filter_zeroed.width32.base128", !191, i64 0}
!191 = !{!"filter_zeroed.width64.base128", !192, i64 0}
!192 = !{!"filter_zeroed.width128.base128", !193, i64 0}
!193 = !{!"filter_zeroed.width256.base0", !185, i64 0}
!194 = !{!195, !195, i64 0}
!195 = !{!"filter_zeroed.width32.base160", !191, i64 0}
!196 = !{!197, !197, i64 0}
!197 = !{!"filter_zeroed.width32.base0", !198, i64 0}
!198 = !{!"filter_zeroed.width64.base0", !199, i64 0}
!199 = !{!"filter_zeroed.width128.base0", !193, i64 0}
!200 = !{!201, !201, i64 0}
!201 = !{!"filter_zeroed.width32.base32", !198, i64 0}
!202 = !{!203, !203, i64 0}
!203 = !{!"filter_zeroed.width32.base320", !204, i64 0}
!204 = !{!"filter_zeroed.width64.base320", !183, i64 0}
!205 = !{!206, !206, i64 0}
!206 = !{!"filter_zeroed.width32.base352", !204, i64 0}
!207 = !{!208, !208, i64 0}
!208 = !{!"filter_zeroed.width32.base192", !209, i64 0}
!209 = !{!"filter_zeroed.width64.base192", !192, i64 0}
!210 = !{!211, !211, i64 0}
!211 = !{!"filter_zeroed.width32.base224", !209, i64 0}
!212 = !{!213, !213, i64 0}
!213 = !{!"filter_zeroed.width32.base64", !214, i64 0}
!214 = !{!"filter_zeroed.width64.base64", !199, i64 0}
!215 = !{!216, !216, i64 0}
!216 = !{!"filter_zeroed.width32.base96", !214, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"output", !104, i64 0}
!219 = distinct !{!219, !32}
!220 = distinct !{!220, !32}
!221 = distinct !{!221, !32}
!222 = distinct !{!222, !32}
!223 = distinct !{!223, !32}
!224 = distinct !{!224, !32}
!225 = !{!"branch_weights", i32 -2147483648, i32 0}
!226 = distinct !{!226, !32}
!227 = !{!228, !228, i64 0}
!228 = !{!"bias.width32.base0", !229, i64 0}
!229 = !{!"bias.width64.base0", !230, i64 0}
!230 = !{!"bias.width128.base0", !231, i64 0}
!231 = !{!"bias.width256.base0", !232, i64 0}
!232 = !{!"bias.width512.base0", !233, i64 0}
!233 = !{!"bias.width1024.base0", !110, i64 0}
!234 = !{!235, !235, i64 0}
!235 = !{!"bias.width32.base32", !229, i64 0}
!236 = !{!237, !237, i64 0}
!237 = !{!"bias.width32.base64", !238, i64 0}
!238 = !{!"bias.width64.base64", !230, i64 0}
!239 = !{!240, !240, i64 0}
!240 = !{!"bias.width32.base96", !238, i64 0}
!241 = !{!"branch_weights", i32 1073741824, i32 1073741824}
!242 = distinct !{!242, !32}
!243 = distinct !{!243, !32}
!244 = distinct !{!244, !32}
