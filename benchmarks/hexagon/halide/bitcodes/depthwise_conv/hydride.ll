; ModuleID = 'depthwise_conv_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i32, i32 }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.107 = private constant [9 x i8] c"stride_x\00", align 32
@str.108 = private constant [9 x i8] c"stride_y\00", align 32
@str.109 = private constant [11 x i8] c"dilation_x\00", align 32
@str.110 = private constant [11 x i8] c"dilation_y\00", align 32
@str.111 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.112 = private constant [13 x i8] c"output_shift\00", align 32
@str.113 = private constant [12 x i8] c"output_zero\00", align 32
@str.114 = private constant [11 x i8] c"output_min\00", align 32
@str.115 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.116 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.115, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.116, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.117 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.118 = private constant [22 x i8] c"depthwise_conv_hvx128\00", align 32
@depthwise_conv_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.117, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.118, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #15
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #16
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #16
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #16
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #16
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #16
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #16
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #16
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #16
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #16
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #16
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #16
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #16
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #16
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #15
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #15
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #15
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #16
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #16
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #16
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #15
  %call.i = call i8* @malloc(i32 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #15
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #15
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a133, i32 %a128, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c639 = alloca [512 x i32], align 128
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep602 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep602, align 4
  %.fca.1.gep603 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep603, align 4
  %.fca.2.gep604 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep604, align 4
  %sum_filter641 = alloca [128 x i32], align 128
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep, align 4
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep, align 4
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep, align 4
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !43
  %host.i695 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %1 = load i8*, i8** %host.i695, align 4, !tbaa !43
  %dim.i696 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i696, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !49
  %extent.i704 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 1
  %4 = load i32, i32* %extent.i704, align 4, !tbaa !49
  %stride.i706 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 2
  %5 = load i32, i32* %stride.i706, align 4, !tbaa !50
  %extent.i710 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 1
  %6 = load i32, i32* %extent.i710, align 4, !tbaa !49
  %stride.i712 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 2
  %7 = load i32, i32* %stride.i712, align 4, !tbaa !50
  %host.i713 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %8 = load i8*, i8** %host.i713, align 4, !tbaa !43
  %dim.i714 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i714, align 8, !tbaa !46
  %min.i719 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 0
  %10 = load i32, i32* %min.i719, align 4, !tbaa !47
  %stride.i721 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 2
  %11 = load i32, i32* %stride.i721, align 4, !tbaa !50
  %min.i723 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 0
  %12 = load i32, i32* %min.i723, align 4, !tbaa !47
  %stride.i725 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 2
  %13 = load i32, i32* %stride.i725, align 4, !tbaa !50
  %min.i727 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 0
  %14 = load i32, i32* %min.i727, align 4, !tbaa !47
  %extent.i729 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 1
  %15 = load i32, i32* %extent.i729, align 4, !tbaa !49
  %stride.i731 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 2
  %16 = load i32, i32* %stride.i731, align 4, !tbaa !50
  %host.i732 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %17 = load i8*, i8** %host.i732, align 4, !tbaa !43
  %dim.i733 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %18 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i733, align 8, !tbaa !46
  %min.i740 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 0
  %19 = load i32, i32* %min.i740, align 4, !tbaa !47
  %extent.i742 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 1
  %20 = load i32, i32* %extent.i742, align 4, !tbaa !49
  %stride.i744 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 2
  %21 = load i32, i32* %stride.i744, align 4, !tbaa !50
  %min.i746 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 0
  %22 = load i32, i32* %min.i746, align 4, !tbaa !47
  %extent.i748 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 1
  %23 = load i32, i32* %extent.i748, align 4, !tbaa !49
  %stride.i750 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 2
  %24 = load i32, i32* %stride.i750, align 4, !tbaa !50
  %stride.i756 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 3, i32 2
  %25 = load i32, i32* %stride.i756, align 4, !tbaa !50
  %26 = icmp sgt i32 %20, 7
  %27 = and i32 %20, 1
  %28 = icmp eq i32 %27, 0
  %29 = or i1 %26, %28
  %30 = icmp sgt i32 %23, 7
  %31 = and i32 %23, 1
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %30, %32
  %34 = and i1 %29, %33
  %35 = icmp sgt i32 %3, 127
  %36 = and i1 %35, %34
  br i1 %36, label %then_bb, label %next_bb

after_bb.loopexit4985:                            ; preds = %"end for output.s0.b.rebased49"
  store i32 %2828, i32* %.fca.1.gep, align 4, !tbaa !95
  store i32 %2827, i32* %.fca.2.gep, align 4
  br label %after_bb

after_bb:                                         ; preds = %"end for output.s0.b.rebased", %after_bb.loopexit4985
  %.0892 = phi i8* [ %.4, %after_bb.loopexit4985 ], [ %.2, %"end for output.s0.b.rebased" ]
  %.0 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %tobool.not.i.not = icmp eq i8* %.0892, null
  br i1 %tobool.not.i.not, label %if.then.i758, label %if.then.i

if.then.i.loopexit:                               ; preds = %"end for output.s0.y.yo586"
  %37 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i

if.then.i:                                        ; preds = %if.then.i.loopexit, %after_bb
  %.0904 = phi i8* [ %.0, %after_bb ], [ %4286, %if.then.i.loopexit ]
  %.0892903 = phi i8* [ %.0892, %after_bb ], [ %37, %if.then.i.loopexit ]
  %ptr1.i = bitcast i8* %.0892903 to i8**
  %38 = load i8*, i8** %ptr1.i, align 4, !tbaa !97
  %tobool.not.i854 = icmp eq i8* %38, null
  br i1 %tobool.not.i854, label %pseudostack_free.exit, label %land.lhs.true.i857

land.lhs.true.i857:                               ; preds = %if.then.i
  %cumulative_size.i855 = getelementptr inbounds i8, i8* %.0892903, i32 8
  %39 = bitcast i8* %cumulative_size.i855 to i32*
  %40 = load i32, i32* %39, align 4, !tbaa !98
  %cmp.i856 = icmp ugt i32 %40, 16384
  br i1 %cmp.i856, label %if.then.i858, label %pseudostack_free.exit

if.then.i858:                                     ; preds = %land.lhs.true.i857
  call void @halide_free(i8* null, i8* nonnull %38) #15
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i, %land.lhs.true.i857, %if.then.i858
  store i8* null, i8** %ptr1.i, align 4, !tbaa !97
  %size.i859 = getelementptr inbounds i8, i8* %.0892903, i32 4
  %41 = bitcast i8* %size.i859 to i32*
  store i32 0, i32* %41, align 4, !tbaa !95
  %cumulative_size4.i = getelementptr inbounds i8, i8* %.0892903, i32 8
  %42 = bitcast i8* %cumulative_size4.i to i32*
  store i32 0, i32* %42, align 4, !tbaa !98
  br label %if.then.i758

if.then.i758:                                     ; preds = %pseudostack_free.exit, %after_bb, %after_bb175
  %.0897907 = phi i8* [ %4286, %after_bb175 ], [ %.0904, %pseudostack_free.exit ], [ %.0, %after_bb ]
  %ptr1.i861 = bitcast i8* %.0897907 to i8**
  %43 = load i8*, i8** %ptr1.i861, align 4, !tbaa !97
  %tobool.not.i862 = icmp eq i8* %43, null
  br i1 %tobool.not.i862, label %pseudostack_free.exit870, label %land.lhs.true.i865

land.lhs.true.i865:                               ; preds = %if.then.i758
  %cumulative_size.i863 = getelementptr inbounds i8, i8* %.0897907, i32 8
  %44 = bitcast i8* %cumulative_size.i863 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !98
  %cmp.i864 = icmp ugt i32 %45, 16384
  br i1 %cmp.i864, label %if.then.i866, label %pseudostack_free.exit870

if.then.i866:                                     ; preds = %land.lhs.true.i865
  call void @halide_free(i8* null, i8* nonnull %43) #15
  br label %pseudostack_free.exit870

pseudostack_free.exit870:                         ; preds = %if.then.i758, %land.lhs.true.i865, %if.then.i866
  store i8* null, i8** %ptr1.i861, align 4, !tbaa !97
  %size.i867 = getelementptr inbounds i8, i8* %.0897907, i32 4
  %46 = bitcast i8* %size.i867 to i32*
  store i32 0, i32* %46, align 4, !tbaa !95
  %cumulative_size4.i868 = getelementptr inbounds i8, i8* %.0897907, i32 8
  %47 = bitcast i8* %cumulative_size4.i868 to i32*
  store i32 0, i32* %47, align 4, !tbaa !98
  br label %call_destructor.exit762

call_destructor.exit762:                          ; preds = %next_bb20, %pseudostack_free.exit870
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #15
  ret i32 0

then_bb:                                          ; preds = %entry
  %t2201 = icmp slt i32 %a133, 0
  %t2203 = icmp slt i32 %stride_x, 0
  %48 = add nsw i32 %4, -1
  %49 = mul nsw i32 %48, %a133
  %t2207 = select i1 %t2201, i32 %49, i32 0
  %50 = add nsw i32 %20, -1
  %51 = icmp slt i32 %20, 2
  %52 = select i1 %51, i32 %20, i32 2
  %53 = add nsw i32 %52, -2
  %t2208.s = select i1 %t2203, i32 %50, i32 %53
  %t2209 = icmp slt i32 %a128, 0
  %t2211 = icmp slt i32 %stride_y, 0
  %54 = add nsw i32 %6, -1
  %55 = mul nsw i32 %54, %a128
  %t2215 = select i1 %t2209, i32 %55, i32 0
  %56 = add nsw i32 %23, -1
  %57 = icmp slt i32 %23, 2
  %58 = select i1 %57, i32 %23, i32 2
  %59 = add nsw i32 %58, -2
  %t2216.s = select i1 %t2211, i32 %56, i32 %59
  %60 = icmp eq i32 %4, 3
  %61 = icmp eq i32 %6, 3
  %t2217 = and i1 %60, %61
  %t2194 = icmp eq i32 %depth_multiplier, 1
  %a128.op674 = shl i32 %a128, 1
  %62 = select i1 %t2209, i32 %a128.op674, i32 0
  %63 = select i1 %t2217, i32 %62, i32 %t2215
  %64 = add nsw i32 %t2216.s, %22
  %65 = mul nsw i32 %64, %stride_y
  %b16 = add nsw i32 %65, %63
  %a133.op675 = shl i32 %a133, 1
  %66 = select i1 %t2201, i32 %a133.op675, i32 0
  %67 = select i1 %t2217, i32 %66, i32 %t2207
  %68 = add nsw i32 %t2208.s, %19
  %69 = mul nsw i32 %68, %stride_x
  %b15 = add nsw i32 %69, %67
  %70 = select i1 %t2209, i32 0, i32 %55
  %71 = select i1 %t2211, i32 %59, i32 %56
  %72 = add nsw i32 %71, %22
  %73 = mul nsw i32 %72, %stride_y
  %b23 = add nsw i32 %73, %70
  %74 = select i1 %t2201, i32 0, i32 %49
  %75 = select i1 %t2203, i32 %53, i32 %50
  %76 = add nsw i32 %75, %19
  %77 = mul nsw i32 %76, %stride_x
  %b17 = add nsw i32 %77, %74
  %78 = mul nsw i32 %13, %12
  %79 = mul nsw i32 %16, %14
  %80 = mul nsw i32 %11, %10
  %81 = add i32 %78, %80
  %t2195 = add i32 %81, %79
  %82 = add nuw nsw i32 %3, 127
  %83 = ashr i32 %82, 7
  %b10 = add nsw i32 %3, -128
  %84 = icmp sgt i32 %4, 0
  %85 = icmp sgt i32 %6, 0
  %86 = select i1 %85, i32 %6, i32 0
  %.op4903 = shl i32 %4, 8
  %87 = select i1 %84, i32 %.op4903, i32 0
  %88 = mul i32 %87, %86
  %89 = or i32 %88, 134
  %90 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %91 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %92 = shufflevector <64 x i8> %91, <64 x i8> undef, <64 x i32> zeroinitializer
  %93 = zext <64 x i8> %92 to <64 x i16>
  %94 = bitcast <64 x i16> %93 to <32 x i32>
  %95 = bitcast i8* %0 to i32*
  %96 = zext i8 %input_zero to i32
  %97 = bitcast [128 x i32]* %sum_filter641 to <32 x i32>*
  %98 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 32
  %99 = bitcast i32* %98 to <32 x i32>*
  %100 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 64
  %101 = bitcast i32* %100 to <32 x i32>*
  %102 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 96
  %103 = bitcast i32* %102 to <32 x i32>*
  %a13 = add nsw i32 %69, %t2207
  %104 = icmp slt i32 %t2207, %67
  %t2225 = select i1 %104, i32 %a13, i32 %b15
  %a14 = add nsw i32 %65, %t2215
  %105 = icmp slt i32 %t2215, %63
  %t2223 = select i1 %105, i32 %a14, i32 %b16
  %106 = icmp sgt i32 %a133, 0
  %107 = select i1 %106, i32 %a133, i32 0
  %108 = shl nuw nsw i32 %107, 1
  %109 = select i1 %t2217, i32 %108, i32 %74
  %a15 = add nsw i32 %77, %109
  %110 = icmp sgt i32 %109, %74
  %111 = select i1 %110, i32 %a15, i32 %b17
  %a29 = sub nsw i32 %111, %t2225
  %112 = icmp sgt i32 %a128, 0
  %113 = select i1 %112, i32 %a128, i32 0
  %114 = shl nuw nsw i32 %113, 1
  %115 = select i1 %t2217, i32 %114, i32 %70
  %a21 = add nsw i32 %73, %115
  %116 = icmp sgt i32 %115, %70
  %117 = select i1 %116, i32 %a21, i32 %b23
  %a30 = sub nsw i32 %117, %t2223
  %t2228 = sub nsw i32 %b17, %a13
  %t2227 = sub nsw i32 %b23, %a14
  %118 = icmp sgt i32 %15, 0
  %119 = icmp sgt i32 %a29, -1
  %t2531 = select i1 %119, i32 %a29, i32 -1
  %120 = icmp sgt i32 %a30, -1
  %t2532 = select i1 %120, i32 %a30, i32 -1
  %121 = add nsw i32 %t2532, 1
  %122 = shl i32 %t2531, 7
  %t2533 = add i32 %122, 128
  %123 = mul i32 %t2533, %121
  %124 = add i32 %123, 131
  %125 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %126 = icmp sgt i32 %t2227, -1
  %127 = sub i32 %a14, %t2223
  %128 = add nsw i32 %a29, 1
  %129 = sub i32 %a13, %t2225
  %130 = icmp sgt i32 %t2228, -1
  %131 = icmp eq i32 %depth_multiplier, 0
  %t2536 = select i1 %131, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit686 = ashr i32 %depth_multiplier, 31
  %132 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %133 = shufflevector <128 x i32> %132, <128 x i32> undef, <128 x i32> zeroinitializer
  %134 = sub nsw <128 x i32> %133, %t2536
  %135 = xor i32 %depth_multiplier.lobit686, -1
  %136 = sub nsw i32 %135, %depth_multiplier.lobit686
  %137 = insertelement <128 x i32> undef, i32 %136, i32 0
  %138 = shufflevector <128 x i32> %137, <128 x i32> undef, <128 x i32> zeroinitializer
  %139 = xor <128 x i32> %t2536, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg4709 = mul i32 %24, %22
  %.neg4710 = mul i32 %21, %19
  %.neg4711 = mul i32 %25, %14
  %reass.add4713 = add i32 %.neg4709, %.neg4710
  %reass.add4714 = add i32 %reass.add4713, %.neg4711
  %140 = add nuw nsw i32 %23, 1
  %141 = ashr i32 %140, 1
  %142 = icmp sgt i32 %23, 0
  %b33 = add nsw i32 %23, -2
  %143 = sub nsw i32 %a128.op674, %t2223
  %144 = sub nsw i32 %a128, %t2223
  %145 = add nuw nsw i32 %20, 1
  %146 = ashr i32 %145, 1
  %147 = icmp sgt i32 %20, 0
  %b34 = add nsw i32 %20, -2
  %148 = bitcast [512 x i32]* %offset_c639 to <32 x i32>*
  %149 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 32
  %150 = bitcast i32* %149 to <32 x i32>*
  %151 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 64
  %152 = bitcast i32* %151 to <32 x i32>*
  %153 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 96
  %154 = bitcast i32* %153 to <32 x i32>*
  %155 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 128
  %156 = bitcast i32* %155 to <32 x i32>*
  %157 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 160
  %158 = bitcast i32* %157 to <32 x i32>*
  %159 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 192
  %160 = bitcast i32* %159 to <32 x i32>*
  %161 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 224
  %162 = bitcast i32* %161 to <32 x i32>*
  %163 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 256
  %164 = bitcast i32* %163 to <32 x i32>*
  %165 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 288
  %166 = bitcast i32* %165 to <32 x i32>*
  %167 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 320
  %168 = bitcast i32* %167 to <32 x i32>*
  %169 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 352
  %170 = bitcast i32* %169 to <32 x i32>*
  %171 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 384
  %172 = bitcast i32* %171 to <32 x i32>*
  %173 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 416
  %174 = bitcast i32* %173 to <32 x i32>*
  %175 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 448
  %176 = bitcast i32* %175 to <32 x i32>*
  %177 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 480
  %178 = bitcast i32* %177 to <32 x i32>*
  %179 = sub nsw i32 %a133.op675, %t2225
  %180 = sub nsw i32 %a133, %t2225
  %181 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %182 = shufflevector <32 x i32> %181, <32 x i32> undef, <32 x i32> zeroinitializer
  %183 = sext <32 x i32> %182 to <32 x i64>
  %184 = shl nuw i32 1, %output_shift
  %185 = ashr i32 %184, 1
  %186 = zext i8 %output_zero to i16
  %187 = insertelement <128 x i16> undef, i16 %186, i32 0
  %188 = shufflevector <128 x i16> %187, <128 x i16> undef, <128 x i32> zeroinitializer
  %189 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %190 = shufflevector <128 x i8> %189, <128 x i8> undef, <128 x i32> zeroinitializer
  %191 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %192 = shufflevector <128 x i8> %191, <128 x i8> undef, <128 x i32> zeroinitializer
  %193 = bitcast <128 x i16> %188 to <64 x i32>
  %194 = bitcast <128 x i8> %190 to <32 x i32>
  %195 = bitcast <128 x i8> %192 to <32 x i32>
  %196 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %197 = add i32 %4, -1
  %xtraiter5158 = and i32 %4, 3
  %198 = icmp ult i32 %197, 3
  %unroll_iter5161 = and i32 %4, -4
  %lcmp.mod5160.not = icmp eq i32 %xtraiter5158, 0
  %xtraiter5163 = and i32 %4, 3
  %199 = icmp ult i32 %197, 3
  %unroll_iter5170 = and i32 %4, -4
  %lcmp.mod5165.not = icmp eq i32 %xtraiter5163, 0
  %200 = or i32 %t2227, %t2228
  %201 = icmp slt i32 %200, 0
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %35, label %then_bb19, label %next_bb20

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.1 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %500, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 7
  %202 = icmp slt i32 %a8, %b10
  %output.s0.c.c.base = select i1 %202, i32 %a8, i32 %b10
  %203 = load i32, i32* %.fca.1.gep, align 4, !tbaa !95
  %cmp.i = icmp ult i32 %203, %89
  %204 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !97
  br i1 %cmp.i, label %if.then.i763, label %pseudostack_alloc.exit, !prof !99

if.then.i763:                                     ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %204, null
  %205 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i = icmp ugt i32 %205, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i763
  call void @halide_free(i8* null, i8* nonnull %204) #15
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i763
  %add.i = add i32 %205, %89
  store i32 %add.i, i32* %.fca.2.gep, align 4, !tbaa !98
  %cmp7.i = icmp ugt i32 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i32 %89) #15
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 4, !tbaa !97
  store i32 %89, i32* %.fca.1.gep, align 4, !tbaa !95
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %206 = phi i8* [ %storemerge.i, %if.end11.i ], [ %204, %"for output.s0.c.co" ]
  %207 = bitcast i8* %206 to i16*
  %.not676 = icmp eq i8* %206, null
  br i1 %.not676, label %then_bb2, label %"produce filter_zeroed", !prof !100

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %208 = alloca i8*, i32 %89, align 128
  %209 = bitcast i8** %208 to i16*
  store i8** %208, i8*** %90, align 4
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %209, %then_bb2 ], [ %207, %pseudostack_alloc.exit ]
  br i1 %85, label %"for filter_zeroed.s0.y.preheader", label %"consume sum_filter", !prof !101

"for filter_zeroed.s0.y.preheader":               ; preds = %"produce filter_zeroed"
  br i1 %84, label %"for filter_zeroed.s0.y.us", label %"for sum_filter.s1.r19$y.preheader", !prof !101

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %filter_zeroed.s0.y.us = phi i32 [ %318, %"end for filter_zeroed.s0.x.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y.preheader" ]
  %210 = mul nsw i32 %filter_zeroed.s0.y.us, %7
  %211 = add nsw i32 %210, %output.s0.c.c.base
  %212 = mul nsw i32 %filter_zeroed.s0.y.us, %4
  br i1 %198, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %filter_zeroed.s0.x.us = phi i32 [ %296, %"for filter_zeroed.s0.x.us" ], [ 0, %"for filter_zeroed.s0.y.us" ]
  %niter5162 = phi i32 [ %niter5162.nsub.3, %"for filter_zeroed.s0.x.us" ], [ %unroll_iter5161, %"for filter_zeroed.s0.y.us" ]
  %213 = mul nsw i32 %filter_zeroed.s0.x.us, %5
  %214 = add nsw i32 %211, %213
  %215 = getelementptr inbounds i8, i8* %1, i32 %214
  %216 = bitcast i8* %215 to <64 x i8>*
  %217 = load <64 x i8>, <64 x i8>* %216, align 1, !tbaa !102
  %218 = zext <64 x i8> %217 to <64 x i16>
  %219 = bitcast <64 x i16> %218 to <32 x i32>
  %220 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %219, <32 x i32> %94) #11
  %221 = add nsw i32 %filter_zeroed.s0.x.us, %212
  %222 = shl nsw i32 %221, 7
  %223 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %222
  %224 = bitcast i16* %223 to <32 x i32>*
  store <32 x i32> %220, <32 x i32>* %224, align 128, !tbaa !105
  %225 = getelementptr inbounds i8, i8* %215, i32 64
  %226 = bitcast i8* %225 to <64 x i8>*
  %227 = load <64 x i8>, <64 x i8>* %226, align 1, !tbaa !102
  %228 = zext <64 x i8> %227 to <64 x i16>
  %229 = bitcast <64 x i16> %228 to <32 x i32>
  %230 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %229, <32 x i32> %94) #11
  %231 = getelementptr inbounds i16, i16* %223, i32 64
  %232 = bitcast i16* %231 to <32 x i32>*
  store <32 x i32> %230, <32 x i32>* %232, align 128, !tbaa !105
  %233 = or i32 %filter_zeroed.s0.x.us, 1
  %234 = mul nsw i32 %233, %5
  %235 = add nsw i32 %211, %234
  %236 = getelementptr inbounds i8, i8* %1, i32 %235
  %237 = bitcast i8* %236 to <64 x i8>*
  %238 = load <64 x i8>, <64 x i8>* %237, align 1, !tbaa !102
  %239 = zext <64 x i8> %238 to <64 x i16>
  %240 = bitcast <64 x i16> %239 to <32 x i32>
  %241 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %240, <32 x i32> %94) #11
  %242 = add nsw i32 %233, %212
  %243 = shl nsw i32 %242, 7
  %244 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %243
  %245 = bitcast i16* %244 to <32 x i32>*
  store <32 x i32> %241, <32 x i32>* %245, align 128, !tbaa !105
  %246 = getelementptr inbounds i8, i8* %236, i32 64
  %247 = bitcast i8* %246 to <64 x i8>*
  %248 = load <64 x i8>, <64 x i8>* %247, align 1, !tbaa !102
  %249 = zext <64 x i8> %248 to <64 x i16>
  %250 = bitcast <64 x i16> %249 to <32 x i32>
  %251 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %250, <32 x i32> %94) #11
  %252 = getelementptr inbounds i16, i16* %244, i32 64
  %253 = bitcast i16* %252 to <32 x i32>*
  store <32 x i32> %251, <32 x i32>* %253, align 128, !tbaa !105
  %254 = or i32 %filter_zeroed.s0.x.us, 2
  %255 = mul nsw i32 %254, %5
  %256 = add nsw i32 %211, %255
  %257 = getelementptr inbounds i8, i8* %1, i32 %256
  %258 = bitcast i8* %257 to <64 x i8>*
  %259 = load <64 x i8>, <64 x i8>* %258, align 1, !tbaa !102
  %260 = zext <64 x i8> %259 to <64 x i16>
  %261 = bitcast <64 x i16> %260 to <32 x i32>
  %262 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %261, <32 x i32> %94) #11
  %263 = add nsw i32 %254, %212
  %264 = shl nsw i32 %263, 7
  %265 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %264
  %266 = bitcast i16* %265 to <32 x i32>*
  store <32 x i32> %262, <32 x i32>* %266, align 128, !tbaa !105
  %267 = getelementptr inbounds i8, i8* %257, i32 64
  %268 = bitcast i8* %267 to <64 x i8>*
  %269 = load <64 x i8>, <64 x i8>* %268, align 1, !tbaa !102
  %270 = zext <64 x i8> %269 to <64 x i16>
  %271 = bitcast <64 x i16> %270 to <32 x i32>
  %272 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %271, <32 x i32> %94) #11
  %273 = getelementptr inbounds i16, i16* %265, i32 64
  %274 = bitcast i16* %273 to <32 x i32>*
  store <32 x i32> %272, <32 x i32>* %274, align 128, !tbaa !105
  %275 = or i32 %filter_zeroed.s0.x.us, 3
  %276 = mul nsw i32 %275, %5
  %277 = add nsw i32 %211, %276
  %278 = getelementptr inbounds i8, i8* %1, i32 %277
  %279 = bitcast i8* %278 to <64 x i8>*
  %280 = load <64 x i8>, <64 x i8>* %279, align 1, !tbaa !102
  %281 = zext <64 x i8> %280 to <64 x i16>
  %282 = bitcast <64 x i16> %281 to <32 x i32>
  %283 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %282, <32 x i32> %94) #11
  %284 = add nsw i32 %275, %212
  %285 = shl nsw i32 %284, 7
  %286 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %285
  %287 = bitcast i16* %286 to <32 x i32>*
  store <32 x i32> %283, <32 x i32>* %287, align 128, !tbaa !105
  %288 = getelementptr inbounds i8, i8* %278, i32 64
  %289 = bitcast i8* %288 to <64 x i8>*
  %290 = load <64 x i8>, <64 x i8>* %289, align 1, !tbaa !102
  %291 = zext <64 x i8> %290 to <64 x i16>
  %292 = bitcast <64 x i16> %291 to <32 x i32>
  %293 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %292, <32 x i32> %94) #11
  %294 = getelementptr inbounds i16, i16* %286, i32 64
  %295 = bitcast i16* %294 to <32 x i32>*
  store <32 x i32> %293, <32 x i32>* %295, align 128, !tbaa !105
  %296 = add nuw nsw i32 %filter_zeroed.s0.x.us, 4
  %niter5162.nsub.3 = add i32 %niter5162, -4
  %niter5162.ncmp.3 = icmp eq i32 %niter5162.nsub.3, 0
  br i1 %niter5162.ncmp.3, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x.us", %"for filter_zeroed.s0.y.us"
  %filter_zeroed.s0.x.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y.us" ], [ %296, %"for filter_zeroed.s0.x.us" ]
  br i1 %lcmp.mod5160.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil"

"for filter_zeroed.s0.x.us.epil":                 ; preds = %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x.us.epil"
  %filter_zeroed.s0.x.us.epil = phi i32 [ %317, %"for filter_zeroed.s0.x.us.epil" ], [ %filter_zeroed.s0.x.us.unr, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %epil.iter5159 = phi i32 [ %epil.iter5159.sub, %"for filter_zeroed.s0.x.us.epil" ], [ %xtraiter5158, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %297 = mul nsw i32 %filter_zeroed.s0.x.us.epil, %5
  %298 = add nsw i32 %211, %297
  %299 = getelementptr inbounds i8, i8* %1, i32 %298
  %300 = bitcast i8* %299 to <64 x i8>*
  %301 = load <64 x i8>, <64 x i8>* %300, align 1, !tbaa !102
  %302 = zext <64 x i8> %301 to <64 x i16>
  %303 = bitcast <64 x i16> %302 to <32 x i32>
  %304 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %303, <32 x i32> %94) #11
  %305 = add nsw i32 %filter_zeroed.s0.x.us.epil, %212
  %306 = shl nsw i32 %305, 7
  %307 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %306
  %308 = bitcast i16* %307 to <32 x i32>*
  store <32 x i32> %304, <32 x i32>* %308, align 128, !tbaa !105
  %309 = getelementptr inbounds i8, i8* %299, i32 64
  %310 = bitcast i8* %309 to <64 x i8>*
  %311 = load <64 x i8>, <64 x i8>* %310, align 1, !tbaa !102
  %312 = zext <64 x i8> %311 to <64 x i16>
  %313 = bitcast <64 x i16> %312 to <32 x i32>
  %314 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %313, <32 x i32> %94) #11
  %315 = getelementptr inbounds i16, i16* %307, i32 64
  %316 = bitcast i16* %315 to <32 x i32>*
  store <32 x i32> %314, <32 x i32>* %316, align 128, !tbaa !105
  %317 = add nuw nsw i32 %filter_zeroed.s0.x.us.epil, 1
  %epil.iter5159.sub = add i32 %epil.iter5159, -1
  %epil.iter5159.cmp.not = icmp eq i32 %epil.iter5159.sub, 0
  br i1 %epil.iter5159.cmp.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil", !llvm.loop !107

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us.epil", %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa"
  %318 = add nuw nsw i32 %filter_zeroed.s0.y.us, 1
  %.not692.us = icmp eq i32 %318, %6
  br i1 %.not692.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us", %"for filter_zeroed.s0.y.preheader"
  br label %"for sum_filter.s1.r19$y"

"for sum_filter.s1.r19$y":                        ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x"
  %convolved640.sroa.36.0 = phi <32 x i32> [ %convolved640.sroa.36.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved640.sroa.24.0 = phi <32 x i32> [ %convolved640.sroa.24.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved640.sroa.12.0 = phi <32 x i32> [ %convolved640.sroa.12.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved640.sroa.0.0 = phi <32 x i32> [ %convolved640.sroa.0.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %"sum_filter.s1.r19$y" = phi i32 [ %415, %"end for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  br i1 %84, label %"for sum_filter.s1.r19$x.preheader", label %"end for sum_filter.s1.r19$x", !prof !101

"for sum_filter.s1.r19$x.preheader":              ; preds = %"for sum_filter.s1.r19$y"
  %319 = mul nsw i32 %"sum_filter.s1.r19$y", %4
  br i1 %199, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"for sum_filter.s1.r19$x":                        ; preds = %"for sum_filter.s1.r19$x.preheader", %"for sum_filter.s1.r19$x"
  %convolved640.sroa.36.1 = phi <32 x i32> [ %394, %"for sum_filter.s1.r19$x" ], [ %convolved640.sroa.36.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved640.sroa.24.1 = phi <32 x i32> [ %393, %"for sum_filter.s1.r19$x" ], [ %convolved640.sroa.24.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved640.sroa.12.1 = phi <32 x i32> [ %392, %"for sum_filter.s1.r19$x" ], [ %convolved640.sroa.12.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved640.sroa.0.1 = phi <32 x i32> [ %391, %"for sum_filter.s1.r19$x" ], [ %convolved640.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ]
  %"sum_filter.s1.r19$x" = phi i32 [ %395, %"for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$x.preheader" ]
  %niter5171 = phi i32 [ %niter5171.nsub.3, %"for sum_filter.s1.r19$x" ], [ %unroll_iter5170, %"for sum_filter.s1.r19$x.preheader" ]
  %320 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.12.1, <32 x i32> %convolved640.sroa.0.1)
  %321 = add nsw i32 %"sum_filter.s1.r19$x", %319
  %322 = shl nsw i32 %321, 7
  %323 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %322
  %324 = bitcast i16* %323 to <32 x i32>*
  %325 = load <32 x i32>, <32 x i32>* %324, align 128, !tbaa !105
  %326 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %325) #11
  %327 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %326, <64 x i32> %320) #11
  %328 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.36.1, <32 x i32> %convolved640.sroa.24.1)
  %329 = getelementptr inbounds i16, i16* %323, i32 64
  %330 = bitcast i16* %329 to <32 x i32>*
  %331 = load <32 x i32>, <32 x i32>* %330, align 128, !tbaa !105
  %332 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %331) #11
  %333 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %332, <64 x i32> %328) #11
  %334 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %327)
  %335 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %327)
  %336 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %333)
  %337 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %333)
  %338 = or i32 %"sum_filter.s1.r19$x", 1
  %339 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %335, <32 x i32> %334)
  %340 = add nsw i32 %338, %319
  %341 = shl nsw i32 %340, 7
  %342 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %341
  %343 = bitcast i16* %342 to <32 x i32>*
  %344 = load <32 x i32>, <32 x i32>* %343, align 128, !tbaa !105
  %345 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %344) #11
  %346 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %345, <64 x i32> %339) #11
  %347 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %337, <32 x i32> %336)
  %348 = getelementptr inbounds i16, i16* %342, i32 64
  %349 = bitcast i16* %348 to <32 x i32>*
  %350 = load <32 x i32>, <32 x i32>* %349, align 128, !tbaa !105
  %351 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %350) #11
  %352 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %351, <64 x i32> %347) #11
  %353 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %346)
  %354 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %346)
  %355 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %352)
  %356 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %352)
  %357 = or i32 %"sum_filter.s1.r19$x", 2
  %358 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %354, <32 x i32> %353)
  %359 = add nsw i32 %357, %319
  %360 = shl nsw i32 %359, 7
  %361 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %360
  %362 = bitcast i16* %361 to <32 x i32>*
  %363 = load <32 x i32>, <32 x i32>* %362, align 128, !tbaa !105
  %364 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %363) #11
  %365 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %364, <64 x i32> %358) #11
  %366 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %356, <32 x i32> %355)
  %367 = getelementptr inbounds i16, i16* %361, i32 64
  %368 = bitcast i16* %367 to <32 x i32>*
  %369 = load <32 x i32>, <32 x i32>* %368, align 128, !tbaa !105
  %370 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %369) #11
  %371 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %370, <64 x i32> %366) #11
  %372 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %365)
  %373 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %365)
  %374 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %371)
  %375 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %371)
  %376 = or i32 %"sum_filter.s1.r19$x", 3
  %377 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %373, <32 x i32> %372)
  %378 = add nsw i32 %376, %319
  %379 = shl nsw i32 %378, 7
  %380 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %379
  %381 = bitcast i16* %380 to <32 x i32>*
  %382 = load <32 x i32>, <32 x i32>* %381, align 128, !tbaa !105
  %383 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %382) #11
  %384 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %383, <64 x i32> %377) #11
  %385 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %375, <32 x i32> %374)
  %386 = getelementptr inbounds i16, i16* %380, i32 64
  %387 = bitcast i16* %386 to <32 x i32>*
  %388 = load <32 x i32>, <32 x i32>* %387, align 128, !tbaa !105
  %389 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %388) #11
  %390 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %389, <64 x i32> %385) #11
  %391 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %384)
  %392 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %384)
  %393 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %390)
  %394 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %390)
  %395 = add nuw nsw i32 %"sum_filter.s1.r19$x", 4
  %niter5171.nsub.3 = add i32 %niter5171, -4
  %niter5171.ncmp.3 = icmp eq i32 %niter5171.nsub.3, 0
  br i1 %niter5171.ncmp.3, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"end for sum_filter.s1.r19$x.loopexit.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x", %"for sum_filter.s1.r19$x.preheader"
  %.lcssa5073.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %391, %"for sum_filter.s1.r19$x" ]
  %.lcssa5072.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %392, %"for sum_filter.s1.r19$x" ]
  %.lcssa5071.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %393, %"for sum_filter.s1.r19$x" ]
  %.lcssa.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %394, %"for sum_filter.s1.r19$x" ]
  %convolved640.sroa.36.1.unr = phi <32 x i32> [ %convolved640.sroa.36.0, %"for sum_filter.s1.r19$x.preheader" ], [ %394, %"for sum_filter.s1.r19$x" ]
  %convolved640.sroa.24.1.unr = phi <32 x i32> [ %convolved640.sroa.24.0, %"for sum_filter.s1.r19$x.preheader" ], [ %393, %"for sum_filter.s1.r19$x" ]
  %convolved640.sroa.12.1.unr = phi <32 x i32> [ %convolved640.sroa.12.0, %"for sum_filter.s1.r19$x.preheader" ], [ %392, %"for sum_filter.s1.r19$x" ]
  %convolved640.sroa.0.1.unr = phi <32 x i32> [ %convolved640.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ], [ %391, %"for sum_filter.s1.r19$x" ]
  %"sum_filter.s1.r19$x.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$x.preheader" ], [ %395, %"for sum_filter.s1.r19$x" ]
  br i1 %lcmp.mod5165.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil"

"for sum_filter.s1.r19$x.epil":                   ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil"
  %convolved640.sroa.36.1.epil = phi <32 x i32> [ %413, %"for sum_filter.s1.r19$x.epil" ], [ %convolved640.sroa.36.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved640.sroa.24.1.epil = phi <32 x i32> [ %412, %"for sum_filter.s1.r19$x.epil" ], [ %convolved640.sroa.24.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved640.sroa.12.1.epil = phi <32 x i32> [ %411, %"for sum_filter.s1.r19$x.epil" ], [ %convolved640.sroa.12.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved640.sroa.0.1.epil = phi <32 x i32> [ %410, %"for sum_filter.s1.r19$x.epil" ], [ %convolved640.sroa.0.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %"sum_filter.s1.r19$x.epil" = phi i32 [ %414, %"for sum_filter.s1.r19$x.epil" ], [ %"sum_filter.s1.r19$x.unr", %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %epil.iter5164 = phi i32 [ %epil.iter5164.sub, %"for sum_filter.s1.r19$x.epil" ], [ %xtraiter5163, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %396 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.12.1.epil, <32 x i32> %convolved640.sroa.0.1.epil)
  %397 = add nsw i32 %"sum_filter.s1.r19$x.epil", %319
  %398 = shl nsw i32 %397, 7
  %399 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %398
  %400 = bitcast i16* %399 to <32 x i32>*
  %401 = load <32 x i32>, <32 x i32>* %400, align 128, !tbaa !105
  %402 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %401) #11
  %403 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %402, <64 x i32> %396) #11
  %404 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.36.1.epil, <32 x i32> %convolved640.sroa.24.1.epil)
  %405 = getelementptr inbounds i16, i16* %399, i32 64
  %406 = bitcast i16* %405 to <32 x i32>*
  %407 = load <32 x i32>, <32 x i32>* %406, align 128, !tbaa !105
  %408 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %407) #11
  %409 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %408, <64 x i32> %404) #11
  %410 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %403)
  %411 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %403)
  %412 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %409)
  %413 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %409)
  %414 = add nuw nsw i32 %"sum_filter.s1.r19$x.epil", 1
  %epil.iter5164.sub = add i32 %epil.iter5164, -1
  %epil.iter5164.cmp.not = icmp eq i32 %epil.iter5164.sub, 0
  br i1 %epil.iter5164.cmp.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil", !llvm.loop !108

"end for sum_filter.s1.r19$x":                    ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil", %"for sum_filter.s1.r19$y"
  %convolved640.sroa.36.2 = phi <32 x i32> [ %convolved640.sroa.36.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %413, %"for sum_filter.s1.r19$x.epil" ]
  %convolved640.sroa.24.2 = phi <32 x i32> [ %convolved640.sroa.24.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5071.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %412, %"for sum_filter.s1.r19$x.epil" ]
  %convolved640.sroa.12.2 = phi <32 x i32> [ %convolved640.sroa.12.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5072.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %411, %"for sum_filter.s1.r19$x.epil" ]
  %convolved640.sroa.0.2 = phi <32 x i32> [ %convolved640.sroa.0.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5073.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %410, %"for sum_filter.s1.r19$x.epil" ]
  %415 = add nuw nsw i32 %"sum_filter.s1.r19$y", 1
  %.not690 = icmp eq i32 %415, %6
  br i1 %.not690, label %"consume sum_filter", label %"for sum_filter.s1.r19$y"

"consume sum_filter":                             ; preds = %"end for sum_filter.s1.r19$x", %"produce filter_zeroed"
  %convolved640.sroa.36.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved640.sroa.36.2, %"end for sum_filter.s1.r19$x" ]
  %convolved640.sroa.24.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved640.sroa.24.2, %"end for sum_filter.s1.r19$x" ]
  %convolved640.sroa.12.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved640.sroa.12.2, %"end for sum_filter.s1.r19$x" ]
  %convolved640.sroa.0.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved640.sroa.0.2, %"end for sum_filter.s1.r19$x" ]
  %416 = getelementptr inbounds i32, i32* %95, i32 %output.s0.c.c.base
  %417 = bitcast i32* %416 to <32 x i32>*
  %418 = load <32 x i32>, <32 x i32>* %417, align 4, !tbaa !109
  %419 = getelementptr inbounds i32, i32* %416, i32 32
  %420 = bitcast i32* %419 to <32 x i32>*
  %421 = load <32 x i32>, <32 x i32>* %420, align 4, !tbaa !109
  %422 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %421, <32 x i32> %418)
  %423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.12.3, <32 x i32> %convolved640.sroa.0.3)
  %424 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %96) #11
  %425 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %423) #11
  %426 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %424, <32 x i32> %425) #11
  %427 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %426, <32 x i32> %424, <32 x i32> %425) #11
  %428 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %423) #11
  %429 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %424, <32 x i32> %428) #11
  %430 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %429, <32 x i32> %424, <32 x i32> %428) #11
  %431 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %427, <32 x i32> %430) #11
  %432 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %422, <64 x i32> %431) #11
  %433 = getelementptr inbounds i32, i32* %416, i32 64
  %434 = bitcast i32* %433 to <32 x i32>*
  %435 = load <32 x i32>, <32 x i32>* %434, align 4, !tbaa !109
  %436 = getelementptr inbounds i32, i32* %416, i32 96
  %437 = bitcast i32* %436 to <32 x i32>*
  %438 = load <32 x i32>, <32 x i32>* %437, align 4, !tbaa !109
  %439 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %438, <32 x i32> %435)
  %440 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.36.3, <32 x i32> %convolved640.sroa.24.3)
  %441 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %440) #11
  %442 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %424, <32 x i32> %441) #11
  %443 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %442, <32 x i32> %424, <32 x i32> %441) #11
  %444 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %440) #11
  %445 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %424, <32 x i32> %444) #11
  %446 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %445, <32 x i32> %424, <32 x i32> %444) #11
  %447 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %443, <32 x i32> %446) #11
  %448 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %439, <64 x i32> %447) #11
  %449 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %432)
  store <32 x i32> %449, <32 x i32>* %97, align 128, !tbaa !111
  %450 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %432)
  store <32 x i32> %450, <32 x i32>* %99, align 128, !tbaa !119
  %451 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %448)
  store <32 x i32> %451, <32 x i32>* %101, align 128, !tbaa !121
  %452 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %448)
  store <32 x i32> %452, <32 x i32>* %103, align 128, !tbaa !124
  br i1 %118, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !101

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %453 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base, i32 0
  %454 = shufflevector <128 x i32> %453, <128 x i32> undef, <128 x i32> zeroinitializer
  %455 = add nsw <128 x i32> %454, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit685 = ashr <128 x i32> %455, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %456 = sub nsw <128 x i32> %455, %.lobit685
  %457 = and <128 x i32> %.lobit685, %138
  %458 = sub i32 %output.s0.c.c.base, %t2195
  %459 = sub i32 %output.s0.c.c.base, %reass.add4714
  %460 = getelementptr inbounds i16, i16* %filter_zeroed, i32 768
  %461 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1024
  %462 = bitcast i16* %461 to <32 x i32>*
  %463 = getelementptr inbounds i16, i16* %filter_zeroed, i32 896
  %464 = bitcast i16* %463 to <32 x i32>*
  %465 = bitcast i16* %460 to <32 x i32>*
  %466 = getelementptr inbounds i16, i16* %filter_zeroed, i32 384
  %467 = getelementptr inbounds i16, i16* %filter_zeroed, i32 640
  %468 = bitcast i16* %467 to <32 x i32>*
  %469 = getelementptr inbounds i16, i16* %filter_zeroed, i32 512
  %470 = bitcast i16* %469 to <32 x i32>*
  %471 = bitcast i16* %466 to <32 x i32>*
  %472 = getelementptr inbounds i16, i16* %filter_zeroed, i32 256
  %473 = bitcast i16* %472 to <32 x i32>*
  %474 = getelementptr inbounds i16, i16* %filter_zeroed, i32 128
  %475 = bitcast i16* %474 to <32 x i32>*
  %476 = bitcast i16* %filter_zeroed to <32 x i32>*
  %477 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1088
  %478 = bitcast i16* %477 to <32 x i32>*
  %479 = getelementptr inbounds i16, i16* %filter_zeroed, i32 960
  %480 = bitcast i16* %479 to <32 x i32>*
  %481 = getelementptr inbounds i16, i16* %filter_zeroed, i32 832
  %482 = bitcast i16* %481 to <32 x i32>*
  %483 = getelementptr inbounds i16, i16* %filter_zeroed, i32 704
  %484 = bitcast i16* %483 to <32 x i32>*
  %485 = getelementptr inbounds i16, i16* %filter_zeroed, i32 576
  %486 = bitcast i16* %485 to <32 x i32>*
  %487 = getelementptr inbounds i16, i16* %filter_zeroed, i32 448
  %488 = bitcast i16* %487 to <32 x i32>*
  %489 = getelementptr inbounds i16, i16* %filter_zeroed, i32 320
  %490 = bitcast i16* %489 to <32 x i32>*
  %491 = getelementptr inbounds i16, i16* %filter_zeroed, i32 192
  %492 = bitcast i16* %491 to <32 x i32>*
  %493 = getelementptr inbounds i16, i16* %filter_zeroed, i32 64
  %494 = bitcast i16* %493 to <32 x i32>*
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %output.s0.b.rebased = phi i32 [ %1095, %"end for output.s0.y.yo" ], [ 0, %"for output.s0.b.rebased.preheader" ]
  %495 = load i32, i32* %.fca.1.gep603, align 4, !tbaa !95
  %cmp.i765 = icmp ult i32 %495, %124
  %496 = load i8*, i8** %.fca.0.gep602, align 4, !tbaa !97
  br i1 %cmp.i765, label %if.then.i768, label %pseudostack_alloc.exit781, !prof !99

if.then.i768:                                     ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i767 = icmp ne i8* %496, null
  %497 = load i32, i32* %.fca.2.gep604, align 4
  %cmp2.i770 = icmp ugt i32 %497, 16384
  %or.cond4631 = and i1 %tobool1.not.i767, %cmp2.i770
  br i1 %or.cond4631, label %if.then3.i772, label %if.end.i776

if.then3.i772:                                    ; preds = %if.then.i768
  call void @halide_free(i8* null, i8* nonnull %496) #15
  %.pre4970 = load i32, i32* %.fca.2.gep604, align 4, !tbaa !98
  br label %if.end.i776

if.end.i776:                                      ; preds = %if.then3.i772, %if.then.i768
  %498 = phi i32 [ %.pre4970, %if.then3.i772 ], [ %497, %if.then.i768 ]
  %add.i774 = add i32 %498, %124
  store i32 %add.i774, i32* %.fca.2.gep604, align 4, !tbaa !98
  %cmp7.i775 = icmp ugt i32 %add.i774, 16384
  br i1 %cmp7.i775, label %if.then8.i778, label %if.end11.i780

if.then8.i778:                                    ; preds = %if.end.i776
  %call.i777 = call i8* @halide_malloc(i8* null, i32 %124) #15
  br label %if.end11.i780

if.end11.i780:                                    ; preds = %if.then8.i778, %if.end.i776
  %storemerge.i779 = phi i8* [ %call.i777, %if.then8.i778 ], [ null, %if.end.i776 ]
  store i8* %storemerge.i779, i8** %.fca.0.gep602, align 4, !tbaa !97
  store i32 %124, i32* %.fca.1.gep603, align 4, !tbaa !95
  br label %pseudostack_alloc.exit781

pseudostack_alloc.exit781:                        ; preds = %"for output.s0.b.rebased", %if.end11.i780
  %499 = phi i8* [ %storemerge.i779, %if.end11.i780 ], [ %496, %"for output.s0.b.rebased" ]
  %.not678 = icmp eq i8* %499, null
  br i1 %.not678, label %then_bb5, label %"produce resampled_input", !prof !100

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.1, %"consume sum_filter" ], [ %196, %"end for output.s0.y.yo" ]
  %500 = add nuw nsw i32 %output.s0.c.co, 1
  %.not677 = icmp eq i32 %500, %83
  br i1 %.not677, label %after_bb, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit781
  %501 = alloca i8*, i32 %124, align 128
  %502 = bitcast i8** %501 to i8*
  store i8** %501, i8*** %125, align 4
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit781, %then_bb5
  %resampled_input = phi i8* [ %502, %then_bb5 ], [ %499, %pseudostack_alloc.exit781 ]
  %503 = add nsw i32 %output.s0.b.rebased, %14
  br i1 %t2194, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %504 = mul nsw i32 %503, %16
  %t2239 = add nsw i32 %458, %504
  br i1 %201, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us", !prof !126

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %resampled_input.s0.y.rebased.us = phi i32 [ %521, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %505 = add nsw i32 %127, %resampled_input.s0.y.rebased.us
  %506 = mul nsw i32 %505, %128
  %t2243.us = add nsw i32 %129, %506
  %507 = add nsw i32 %resampled_input.s0.y.rebased.us, %a14
  %508 = mul nsw i32 %507, %13
  %509 = add nsw i32 %t2239, %508
  br label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %resampled_input.s0.x.rebased.us = phi i32 [ %520, %"for resampled_input.s0.x.rebased.us" ], [ 0, %"for resampled_input.s0.y.rebased.us" ]
  %510 = add nsw i32 %resampled_input.s0.x.rebased.us, %a13
  %511 = mul nsw i32 %510, %11
  %512 = add nsw i32 %509, %511
  %513 = getelementptr inbounds i8, i8* %8, i32 %512
  %514 = bitcast i8* %513 to <128 x i8>*
  %515 = load <128 x i8>, <128 x i8>* %514, align 1, !tbaa !127
  %516 = add nsw i32 %t2243.us, %resampled_input.s0.x.rebased.us
  %517 = shl nsw i32 %516, 7
  %518 = getelementptr inbounds i8, i8* %resampled_input, i32 %517
  %519 = bitcast i8* %518 to <128 x i8>*
  store <128 x i8> %515, <128 x i8>* %519, align 128, !tbaa !129
  %520 = add nuw nsw i32 %resampled_input.s0.x.rebased.us, 1
  %.not689.us = icmp eq i32 %resampled_input.s0.x.rebased.us, %t2228
  br i1 %.not689.us, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us"
  %521 = add nuw nsw i32 %resampled_input.s0.y.rebased.us, 1
  %.not688.us = icmp eq i32 %resampled_input.s0.y.rebased.us, %t2227
  br i1 %.not688.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  br i1 %126, label %"for resampled_input.s0.y.rebased9.preheader", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader":    ; preds = %next_bb8
  %522 = mul nsw i32 %503, %16
  %523 = sub i32 %522, %t2195
  br i1 %130, label %"for resampled_input.s0.y.rebased9.preheader.split.us", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased9.preheader"
  %524 = sdiv <128 x i32> %456, %134
  %525 = add nsw <128 x i32> %524, %457
  %526 = and <128 x i32> %525, %139
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %resampled_input.s0.y.rebased11.us = phi i32 [ %1054, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %527 = add nsw i32 %127, %resampled_input.s0.y.rebased11.us
  %528 = mul nsw i32 %527, %128
  %t2248.us = add nsw i32 %129, %528
  %529 = add nsw i32 %resampled_input.s0.y.rebased11.us, %a14
  %530 = mul nsw i32 %529, %13
  %t2247.us = add nsw i32 %523, %530
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %resampled_input.s0.x.rebased14.us = phi i32 [ %1053, %"for resampled_input.s0.x.rebased12.us" ], [ 0, %"for resampled_input.s0.y.rebased9.us" ]
  %531 = add nsw i32 %resampled_input.s0.x.rebased14.us, %a13
  %532 = mul nsw i32 %531, %11
  %533 = add nsw i32 %t2247.us, %532
  %534 = insertelement <128 x i32> undef, i32 %533, i32 0
  %535 = shufflevector <128 x i32> %534, <128 x i32> undef, <128 x i32> zeroinitializer
  %536 = add nsw <128 x i32> %535, %526
  %537 = extractelement <128 x i32> %536, i32 0
  %538 = getelementptr inbounds i8, i8* %8, i32 %537
  %539 = load i8, i8* %538, align 1, !tbaa !127
  %540 = insertelement <128 x i8> undef, i8 %539, i32 0
  %541 = extractelement <128 x i32> %536, i32 1
  %542 = getelementptr inbounds i8, i8* %8, i32 %541
  %543 = load i8, i8* %542, align 1, !tbaa !127
  %544 = insertelement <128 x i8> %540, i8 %543, i32 1
  %545 = extractelement <128 x i32> %536, i32 2
  %546 = getelementptr inbounds i8, i8* %8, i32 %545
  %547 = load i8, i8* %546, align 1, !tbaa !127
  %548 = insertelement <128 x i8> %544, i8 %547, i32 2
  %549 = extractelement <128 x i32> %536, i32 3
  %550 = getelementptr inbounds i8, i8* %8, i32 %549
  %551 = load i8, i8* %550, align 1, !tbaa !127
  %552 = insertelement <128 x i8> %548, i8 %551, i32 3
  %553 = extractelement <128 x i32> %536, i32 4
  %554 = getelementptr inbounds i8, i8* %8, i32 %553
  %555 = load i8, i8* %554, align 1, !tbaa !127
  %556 = insertelement <128 x i8> %552, i8 %555, i32 4
  %557 = extractelement <128 x i32> %536, i32 5
  %558 = getelementptr inbounds i8, i8* %8, i32 %557
  %559 = load i8, i8* %558, align 1, !tbaa !127
  %560 = insertelement <128 x i8> %556, i8 %559, i32 5
  %561 = extractelement <128 x i32> %536, i32 6
  %562 = getelementptr inbounds i8, i8* %8, i32 %561
  %563 = load i8, i8* %562, align 1, !tbaa !127
  %564 = insertelement <128 x i8> %560, i8 %563, i32 6
  %565 = extractelement <128 x i32> %536, i32 7
  %566 = getelementptr inbounds i8, i8* %8, i32 %565
  %567 = load i8, i8* %566, align 1, !tbaa !127
  %568 = insertelement <128 x i8> %564, i8 %567, i32 7
  %569 = extractelement <128 x i32> %536, i32 8
  %570 = getelementptr inbounds i8, i8* %8, i32 %569
  %571 = load i8, i8* %570, align 1, !tbaa !127
  %572 = insertelement <128 x i8> %568, i8 %571, i32 8
  %573 = extractelement <128 x i32> %536, i32 9
  %574 = getelementptr inbounds i8, i8* %8, i32 %573
  %575 = load i8, i8* %574, align 1, !tbaa !127
  %576 = insertelement <128 x i8> %572, i8 %575, i32 9
  %577 = extractelement <128 x i32> %536, i32 10
  %578 = getelementptr inbounds i8, i8* %8, i32 %577
  %579 = load i8, i8* %578, align 1, !tbaa !127
  %580 = insertelement <128 x i8> %576, i8 %579, i32 10
  %581 = extractelement <128 x i32> %536, i32 11
  %582 = getelementptr inbounds i8, i8* %8, i32 %581
  %583 = load i8, i8* %582, align 1, !tbaa !127
  %584 = insertelement <128 x i8> %580, i8 %583, i32 11
  %585 = extractelement <128 x i32> %536, i32 12
  %586 = getelementptr inbounds i8, i8* %8, i32 %585
  %587 = load i8, i8* %586, align 1, !tbaa !127
  %588 = insertelement <128 x i8> %584, i8 %587, i32 12
  %589 = extractelement <128 x i32> %536, i32 13
  %590 = getelementptr inbounds i8, i8* %8, i32 %589
  %591 = load i8, i8* %590, align 1, !tbaa !127
  %592 = insertelement <128 x i8> %588, i8 %591, i32 13
  %593 = extractelement <128 x i32> %536, i32 14
  %594 = getelementptr inbounds i8, i8* %8, i32 %593
  %595 = load i8, i8* %594, align 1, !tbaa !127
  %596 = insertelement <128 x i8> %592, i8 %595, i32 14
  %597 = extractelement <128 x i32> %536, i32 15
  %598 = getelementptr inbounds i8, i8* %8, i32 %597
  %599 = load i8, i8* %598, align 1, !tbaa !127
  %600 = insertelement <128 x i8> %596, i8 %599, i32 15
  %601 = extractelement <128 x i32> %536, i32 16
  %602 = getelementptr inbounds i8, i8* %8, i32 %601
  %603 = load i8, i8* %602, align 1, !tbaa !127
  %604 = insertelement <128 x i8> %600, i8 %603, i32 16
  %605 = extractelement <128 x i32> %536, i32 17
  %606 = getelementptr inbounds i8, i8* %8, i32 %605
  %607 = load i8, i8* %606, align 1, !tbaa !127
  %608 = insertelement <128 x i8> %604, i8 %607, i32 17
  %609 = extractelement <128 x i32> %536, i32 18
  %610 = getelementptr inbounds i8, i8* %8, i32 %609
  %611 = load i8, i8* %610, align 1, !tbaa !127
  %612 = insertelement <128 x i8> %608, i8 %611, i32 18
  %613 = extractelement <128 x i32> %536, i32 19
  %614 = getelementptr inbounds i8, i8* %8, i32 %613
  %615 = load i8, i8* %614, align 1, !tbaa !127
  %616 = insertelement <128 x i8> %612, i8 %615, i32 19
  %617 = extractelement <128 x i32> %536, i32 20
  %618 = getelementptr inbounds i8, i8* %8, i32 %617
  %619 = load i8, i8* %618, align 1, !tbaa !127
  %620 = insertelement <128 x i8> %616, i8 %619, i32 20
  %621 = extractelement <128 x i32> %536, i32 21
  %622 = getelementptr inbounds i8, i8* %8, i32 %621
  %623 = load i8, i8* %622, align 1, !tbaa !127
  %624 = insertelement <128 x i8> %620, i8 %623, i32 21
  %625 = extractelement <128 x i32> %536, i32 22
  %626 = getelementptr inbounds i8, i8* %8, i32 %625
  %627 = load i8, i8* %626, align 1, !tbaa !127
  %628 = insertelement <128 x i8> %624, i8 %627, i32 22
  %629 = extractelement <128 x i32> %536, i32 23
  %630 = getelementptr inbounds i8, i8* %8, i32 %629
  %631 = load i8, i8* %630, align 1, !tbaa !127
  %632 = insertelement <128 x i8> %628, i8 %631, i32 23
  %633 = extractelement <128 x i32> %536, i32 24
  %634 = getelementptr inbounds i8, i8* %8, i32 %633
  %635 = load i8, i8* %634, align 1, !tbaa !127
  %636 = insertelement <128 x i8> %632, i8 %635, i32 24
  %637 = extractelement <128 x i32> %536, i32 25
  %638 = getelementptr inbounds i8, i8* %8, i32 %637
  %639 = load i8, i8* %638, align 1, !tbaa !127
  %640 = insertelement <128 x i8> %636, i8 %639, i32 25
  %641 = extractelement <128 x i32> %536, i32 26
  %642 = getelementptr inbounds i8, i8* %8, i32 %641
  %643 = load i8, i8* %642, align 1, !tbaa !127
  %644 = insertelement <128 x i8> %640, i8 %643, i32 26
  %645 = extractelement <128 x i32> %536, i32 27
  %646 = getelementptr inbounds i8, i8* %8, i32 %645
  %647 = load i8, i8* %646, align 1, !tbaa !127
  %648 = insertelement <128 x i8> %644, i8 %647, i32 27
  %649 = extractelement <128 x i32> %536, i32 28
  %650 = getelementptr inbounds i8, i8* %8, i32 %649
  %651 = load i8, i8* %650, align 1, !tbaa !127
  %652 = insertelement <128 x i8> %648, i8 %651, i32 28
  %653 = extractelement <128 x i32> %536, i32 29
  %654 = getelementptr inbounds i8, i8* %8, i32 %653
  %655 = load i8, i8* %654, align 1, !tbaa !127
  %656 = insertelement <128 x i8> %652, i8 %655, i32 29
  %657 = extractelement <128 x i32> %536, i32 30
  %658 = getelementptr inbounds i8, i8* %8, i32 %657
  %659 = load i8, i8* %658, align 1, !tbaa !127
  %660 = insertelement <128 x i8> %656, i8 %659, i32 30
  %661 = extractelement <128 x i32> %536, i32 31
  %662 = getelementptr inbounds i8, i8* %8, i32 %661
  %663 = load i8, i8* %662, align 1, !tbaa !127
  %664 = insertelement <128 x i8> %660, i8 %663, i32 31
  %665 = extractelement <128 x i32> %536, i32 32
  %666 = getelementptr inbounds i8, i8* %8, i32 %665
  %667 = load i8, i8* %666, align 1, !tbaa !127
  %668 = insertelement <128 x i8> %664, i8 %667, i32 32
  %669 = extractelement <128 x i32> %536, i32 33
  %670 = getelementptr inbounds i8, i8* %8, i32 %669
  %671 = load i8, i8* %670, align 1, !tbaa !127
  %672 = insertelement <128 x i8> %668, i8 %671, i32 33
  %673 = extractelement <128 x i32> %536, i32 34
  %674 = getelementptr inbounds i8, i8* %8, i32 %673
  %675 = load i8, i8* %674, align 1, !tbaa !127
  %676 = insertelement <128 x i8> %672, i8 %675, i32 34
  %677 = extractelement <128 x i32> %536, i32 35
  %678 = getelementptr inbounds i8, i8* %8, i32 %677
  %679 = load i8, i8* %678, align 1, !tbaa !127
  %680 = insertelement <128 x i8> %676, i8 %679, i32 35
  %681 = extractelement <128 x i32> %536, i32 36
  %682 = getelementptr inbounds i8, i8* %8, i32 %681
  %683 = load i8, i8* %682, align 1, !tbaa !127
  %684 = insertelement <128 x i8> %680, i8 %683, i32 36
  %685 = extractelement <128 x i32> %536, i32 37
  %686 = getelementptr inbounds i8, i8* %8, i32 %685
  %687 = load i8, i8* %686, align 1, !tbaa !127
  %688 = insertelement <128 x i8> %684, i8 %687, i32 37
  %689 = extractelement <128 x i32> %536, i32 38
  %690 = getelementptr inbounds i8, i8* %8, i32 %689
  %691 = load i8, i8* %690, align 1, !tbaa !127
  %692 = insertelement <128 x i8> %688, i8 %691, i32 38
  %693 = extractelement <128 x i32> %536, i32 39
  %694 = getelementptr inbounds i8, i8* %8, i32 %693
  %695 = load i8, i8* %694, align 1, !tbaa !127
  %696 = insertelement <128 x i8> %692, i8 %695, i32 39
  %697 = extractelement <128 x i32> %536, i32 40
  %698 = getelementptr inbounds i8, i8* %8, i32 %697
  %699 = load i8, i8* %698, align 1, !tbaa !127
  %700 = insertelement <128 x i8> %696, i8 %699, i32 40
  %701 = extractelement <128 x i32> %536, i32 41
  %702 = getelementptr inbounds i8, i8* %8, i32 %701
  %703 = load i8, i8* %702, align 1, !tbaa !127
  %704 = insertelement <128 x i8> %700, i8 %703, i32 41
  %705 = extractelement <128 x i32> %536, i32 42
  %706 = getelementptr inbounds i8, i8* %8, i32 %705
  %707 = load i8, i8* %706, align 1, !tbaa !127
  %708 = insertelement <128 x i8> %704, i8 %707, i32 42
  %709 = extractelement <128 x i32> %536, i32 43
  %710 = getelementptr inbounds i8, i8* %8, i32 %709
  %711 = load i8, i8* %710, align 1, !tbaa !127
  %712 = insertelement <128 x i8> %708, i8 %711, i32 43
  %713 = extractelement <128 x i32> %536, i32 44
  %714 = getelementptr inbounds i8, i8* %8, i32 %713
  %715 = load i8, i8* %714, align 1, !tbaa !127
  %716 = insertelement <128 x i8> %712, i8 %715, i32 44
  %717 = extractelement <128 x i32> %536, i32 45
  %718 = getelementptr inbounds i8, i8* %8, i32 %717
  %719 = load i8, i8* %718, align 1, !tbaa !127
  %720 = insertelement <128 x i8> %716, i8 %719, i32 45
  %721 = extractelement <128 x i32> %536, i32 46
  %722 = getelementptr inbounds i8, i8* %8, i32 %721
  %723 = load i8, i8* %722, align 1, !tbaa !127
  %724 = insertelement <128 x i8> %720, i8 %723, i32 46
  %725 = extractelement <128 x i32> %536, i32 47
  %726 = getelementptr inbounds i8, i8* %8, i32 %725
  %727 = load i8, i8* %726, align 1, !tbaa !127
  %728 = insertelement <128 x i8> %724, i8 %727, i32 47
  %729 = extractelement <128 x i32> %536, i32 48
  %730 = getelementptr inbounds i8, i8* %8, i32 %729
  %731 = load i8, i8* %730, align 1, !tbaa !127
  %732 = insertelement <128 x i8> %728, i8 %731, i32 48
  %733 = extractelement <128 x i32> %536, i32 49
  %734 = getelementptr inbounds i8, i8* %8, i32 %733
  %735 = load i8, i8* %734, align 1, !tbaa !127
  %736 = insertelement <128 x i8> %732, i8 %735, i32 49
  %737 = extractelement <128 x i32> %536, i32 50
  %738 = getelementptr inbounds i8, i8* %8, i32 %737
  %739 = load i8, i8* %738, align 1, !tbaa !127
  %740 = insertelement <128 x i8> %736, i8 %739, i32 50
  %741 = extractelement <128 x i32> %536, i32 51
  %742 = getelementptr inbounds i8, i8* %8, i32 %741
  %743 = load i8, i8* %742, align 1, !tbaa !127
  %744 = insertelement <128 x i8> %740, i8 %743, i32 51
  %745 = extractelement <128 x i32> %536, i32 52
  %746 = getelementptr inbounds i8, i8* %8, i32 %745
  %747 = load i8, i8* %746, align 1, !tbaa !127
  %748 = insertelement <128 x i8> %744, i8 %747, i32 52
  %749 = extractelement <128 x i32> %536, i32 53
  %750 = getelementptr inbounds i8, i8* %8, i32 %749
  %751 = load i8, i8* %750, align 1, !tbaa !127
  %752 = insertelement <128 x i8> %748, i8 %751, i32 53
  %753 = extractelement <128 x i32> %536, i32 54
  %754 = getelementptr inbounds i8, i8* %8, i32 %753
  %755 = load i8, i8* %754, align 1, !tbaa !127
  %756 = insertelement <128 x i8> %752, i8 %755, i32 54
  %757 = extractelement <128 x i32> %536, i32 55
  %758 = getelementptr inbounds i8, i8* %8, i32 %757
  %759 = load i8, i8* %758, align 1, !tbaa !127
  %760 = insertelement <128 x i8> %756, i8 %759, i32 55
  %761 = extractelement <128 x i32> %536, i32 56
  %762 = getelementptr inbounds i8, i8* %8, i32 %761
  %763 = load i8, i8* %762, align 1, !tbaa !127
  %764 = insertelement <128 x i8> %760, i8 %763, i32 56
  %765 = extractelement <128 x i32> %536, i32 57
  %766 = getelementptr inbounds i8, i8* %8, i32 %765
  %767 = load i8, i8* %766, align 1, !tbaa !127
  %768 = insertelement <128 x i8> %764, i8 %767, i32 57
  %769 = extractelement <128 x i32> %536, i32 58
  %770 = getelementptr inbounds i8, i8* %8, i32 %769
  %771 = load i8, i8* %770, align 1, !tbaa !127
  %772 = insertelement <128 x i8> %768, i8 %771, i32 58
  %773 = extractelement <128 x i32> %536, i32 59
  %774 = getelementptr inbounds i8, i8* %8, i32 %773
  %775 = load i8, i8* %774, align 1, !tbaa !127
  %776 = insertelement <128 x i8> %772, i8 %775, i32 59
  %777 = extractelement <128 x i32> %536, i32 60
  %778 = getelementptr inbounds i8, i8* %8, i32 %777
  %779 = load i8, i8* %778, align 1, !tbaa !127
  %780 = insertelement <128 x i8> %776, i8 %779, i32 60
  %781 = extractelement <128 x i32> %536, i32 61
  %782 = getelementptr inbounds i8, i8* %8, i32 %781
  %783 = load i8, i8* %782, align 1, !tbaa !127
  %784 = insertelement <128 x i8> %780, i8 %783, i32 61
  %785 = extractelement <128 x i32> %536, i32 62
  %786 = getelementptr inbounds i8, i8* %8, i32 %785
  %787 = load i8, i8* %786, align 1, !tbaa !127
  %788 = insertelement <128 x i8> %784, i8 %787, i32 62
  %789 = extractelement <128 x i32> %536, i32 63
  %790 = getelementptr inbounds i8, i8* %8, i32 %789
  %791 = load i8, i8* %790, align 1, !tbaa !127
  %792 = insertelement <128 x i8> %788, i8 %791, i32 63
  %793 = extractelement <128 x i32> %536, i32 64
  %794 = getelementptr inbounds i8, i8* %8, i32 %793
  %795 = load i8, i8* %794, align 1, !tbaa !127
  %796 = insertelement <128 x i8> %792, i8 %795, i32 64
  %797 = extractelement <128 x i32> %536, i32 65
  %798 = getelementptr inbounds i8, i8* %8, i32 %797
  %799 = load i8, i8* %798, align 1, !tbaa !127
  %800 = insertelement <128 x i8> %796, i8 %799, i32 65
  %801 = extractelement <128 x i32> %536, i32 66
  %802 = getelementptr inbounds i8, i8* %8, i32 %801
  %803 = load i8, i8* %802, align 1, !tbaa !127
  %804 = insertelement <128 x i8> %800, i8 %803, i32 66
  %805 = extractelement <128 x i32> %536, i32 67
  %806 = getelementptr inbounds i8, i8* %8, i32 %805
  %807 = load i8, i8* %806, align 1, !tbaa !127
  %808 = insertelement <128 x i8> %804, i8 %807, i32 67
  %809 = extractelement <128 x i32> %536, i32 68
  %810 = getelementptr inbounds i8, i8* %8, i32 %809
  %811 = load i8, i8* %810, align 1, !tbaa !127
  %812 = insertelement <128 x i8> %808, i8 %811, i32 68
  %813 = extractelement <128 x i32> %536, i32 69
  %814 = getelementptr inbounds i8, i8* %8, i32 %813
  %815 = load i8, i8* %814, align 1, !tbaa !127
  %816 = insertelement <128 x i8> %812, i8 %815, i32 69
  %817 = extractelement <128 x i32> %536, i32 70
  %818 = getelementptr inbounds i8, i8* %8, i32 %817
  %819 = load i8, i8* %818, align 1, !tbaa !127
  %820 = insertelement <128 x i8> %816, i8 %819, i32 70
  %821 = extractelement <128 x i32> %536, i32 71
  %822 = getelementptr inbounds i8, i8* %8, i32 %821
  %823 = load i8, i8* %822, align 1, !tbaa !127
  %824 = insertelement <128 x i8> %820, i8 %823, i32 71
  %825 = extractelement <128 x i32> %536, i32 72
  %826 = getelementptr inbounds i8, i8* %8, i32 %825
  %827 = load i8, i8* %826, align 1, !tbaa !127
  %828 = insertelement <128 x i8> %824, i8 %827, i32 72
  %829 = extractelement <128 x i32> %536, i32 73
  %830 = getelementptr inbounds i8, i8* %8, i32 %829
  %831 = load i8, i8* %830, align 1, !tbaa !127
  %832 = insertelement <128 x i8> %828, i8 %831, i32 73
  %833 = extractelement <128 x i32> %536, i32 74
  %834 = getelementptr inbounds i8, i8* %8, i32 %833
  %835 = load i8, i8* %834, align 1, !tbaa !127
  %836 = insertelement <128 x i8> %832, i8 %835, i32 74
  %837 = extractelement <128 x i32> %536, i32 75
  %838 = getelementptr inbounds i8, i8* %8, i32 %837
  %839 = load i8, i8* %838, align 1, !tbaa !127
  %840 = insertelement <128 x i8> %836, i8 %839, i32 75
  %841 = extractelement <128 x i32> %536, i32 76
  %842 = getelementptr inbounds i8, i8* %8, i32 %841
  %843 = load i8, i8* %842, align 1, !tbaa !127
  %844 = insertelement <128 x i8> %840, i8 %843, i32 76
  %845 = extractelement <128 x i32> %536, i32 77
  %846 = getelementptr inbounds i8, i8* %8, i32 %845
  %847 = load i8, i8* %846, align 1, !tbaa !127
  %848 = insertelement <128 x i8> %844, i8 %847, i32 77
  %849 = extractelement <128 x i32> %536, i32 78
  %850 = getelementptr inbounds i8, i8* %8, i32 %849
  %851 = load i8, i8* %850, align 1, !tbaa !127
  %852 = insertelement <128 x i8> %848, i8 %851, i32 78
  %853 = extractelement <128 x i32> %536, i32 79
  %854 = getelementptr inbounds i8, i8* %8, i32 %853
  %855 = load i8, i8* %854, align 1, !tbaa !127
  %856 = insertelement <128 x i8> %852, i8 %855, i32 79
  %857 = extractelement <128 x i32> %536, i32 80
  %858 = getelementptr inbounds i8, i8* %8, i32 %857
  %859 = load i8, i8* %858, align 1, !tbaa !127
  %860 = insertelement <128 x i8> %856, i8 %859, i32 80
  %861 = extractelement <128 x i32> %536, i32 81
  %862 = getelementptr inbounds i8, i8* %8, i32 %861
  %863 = load i8, i8* %862, align 1, !tbaa !127
  %864 = insertelement <128 x i8> %860, i8 %863, i32 81
  %865 = extractelement <128 x i32> %536, i32 82
  %866 = getelementptr inbounds i8, i8* %8, i32 %865
  %867 = load i8, i8* %866, align 1, !tbaa !127
  %868 = insertelement <128 x i8> %864, i8 %867, i32 82
  %869 = extractelement <128 x i32> %536, i32 83
  %870 = getelementptr inbounds i8, i8* %8, i32 %869
  %871 = load i8, i8* %870, align 1, !tbaa !127
  %872 = insertelement <128 x i8> %868, i8 %871, i32 83
  %873 = extractelement <128 x i32> %536, i32 84
  %874 = getelementptr inbounds i8, i8* %8, i32 %873
  %875 = load i8, i8* %874, align 1, !tbaa !127
  %876 = insertelement <128 x i8> %872, i8 %875, i32 84
  %877 = extractelement <128 x i32> %536, i32 85
  %878 = getelementptr inbounds i8, i8* %8, i32 %877
  %879 = load i8, i8* %878, align 1, !tbaa !127
  %880 = insertelement <128 x i8> %876, i8 %879, i32 85
  %881 = extractelement <128 x i32> %536, i32 86
  %882 = getelementptr inbounds i8, i8* %8, i32 %881
  %883 = load i8, i8* %882, align 1, !tbaa !127
  %884 = insertelement <128 x i8> %880, i8 %883, i32 86
  %885 = extractelement <128 x i32> %536, i32 87
  %886 = getelementptr inbounds i8, i8* %8, i32 %885
  %887 = load i8, i8* %886, align 1, !tbaa !127
  %888 = insertelement <128 x i8> %884, i8 %887, i32 87
  %889 = extractelement <128 x i32> %536, i32 88
  %890 = getelementptr inbounds i8, i8* %8, i32 %889
  %891 = load i8, i8* %890, align 1, !tbaa !127
  %892 = insertelement <128 x i8> %888, i8 %891, i32 88
  %893 = extractelement <128 x i32> %536, i32 89
  %894 = getelementptr inbounds i8, i8* %8, i32 %893
  %895 = load i8, i8* %894, align 1, !tbaa !127
  %896 = insertelement <128 x i8> %892, i8 %895, i32 89
  %897 = extractelement <128 x i32> %536, i32 90
  %898 = getelementptr inbounds i8, i8* %8, i32 %897
  %899 = load i8, i8* %898, align 1, !tbaa !127
  %900 = insertelement <128 x i8> %896, i8 %899, i32 90
  %901 = extractelement <128 x i32> %536, i32 91
  %902 = getelementptr inbounds i8, i8* %8, i32 %901
  %903 = load i8, i8* %902, align 1, !tbaa !127
  %904 = insertelement <128 x i8> %900, i8 %903, i32 91
  %905 = extractelement <128 x i32> %536, i32 92
  %906 = getelementptr inbounds i8, i8* %8, i32 %905
  %907 = load i8, i8* %906, align 1, !tbaa !127
  %908 = insertelement <128 x i8> %904, i8 %907, i32 92
  %909 = extractelement <128 x i32> %536, i32 93
  %910 = getelementptr inbounds i8, i8* %8, i32 %909
  %911 = load i8, i8* %910, align 1, !tbaa !127
  %912 = insertelement <128 x i8> %908, i8 %911, i32 93
  %913 = extractelement <128 x i32> %536, i32 94
  %914 = getelementptr inbounds i8, i8* %8, i32 %913
  %915 = load i8, i8* %914, align 1, !tbaa !127
  %916 = insertelement <128 x i8> %912, i8 %915, i32 94
  %917 = extractelement <128 x i32> %536, i32 95
  %918 = getelementptr inbounds i8, i8* %8, i32 %917
  %919 = load i8, i8* %918, align 1, !tbaa !127
  %920 = insertelement <128 x i8> %916, i8 %919, i32 95
  %921 = extractelement <128 x i32> %536, i32 96
  %922 = getelementptr inbounds i8, i8* %8, i32 %921
  %923 = load i8, i8* %922, align 1, !tbaa !127
  %924 = insertelement <128 x i8> %920, i8 %923, i32 96
  %925 = extractelement <128 x i32> %536, i32 97
  %926 = getelementptr inbounds i8, i8* %8, i32 %925
  %927 = load i8, i8* %926, align 1, !tbaa !127
  %928 = insertelement <128 x i8> %924, i8 %927, i32 97
  %929 = extractelement <128 x i32> %536, i32 98
  %930 = getelementptr inbounds i8, i8* %8, i32 %929
  %931 = load i8, i8* %930, align 1, !tbaa !127
  %932 = insertelement <128 x i8> %928, i8 %931, i32 98
  %933 = extractelement <128 x i32> %536, i32 99
  %934 = getelementptr inbounds i8, i8* %8, i32 %933
  %935 = load i8, i8* %934, align 1, !tbaa !127
  %936 = insertelement <128 x i8> %932, i8 %935, i32 99
  %937 = extractelement <128 x i32> %536, i32 100
  %938 = getelementptr inbounds i8, i8* %8, i32 %937
  %939 = load i8, i8* %938, align 1, !tbaa !127
  %940 = insertelement <128 x i8> %936, i8 %939, i32 100
  %941 = extractelement <128 x i32> %536, i32 101
  %942 = getelementptr inbounds i8, i8* %8, i32 %941
  %943 = load i8, i8* %942, align 1, !tbaa !127
  %944 = insertelement <128 x i8> %940, i8 %943, i32 101
  %945 = extractelement <128 x i32> %536, i32 102
  %946 = getelementptr inbounds i8, i8* %8, i32 %945
  %947 = load i8, i8* %946, align 1, !tbaa !127
  %948 = insertelement <128 x i8> %944, i8 %947, i32 102
  %949 = extractelement <128 x i32> %536, i32 103
  %950 = getelementptr inbounds i8, i8* %8, i32 %949
  %951 = load i8, i8* %950, align 1, !tbaa !127
  %952 = insertelement <128 x i8> %948, i8 %951, i32 103
  %953 = extractelement <128 x i32> %536, i32 104
  %954 = getelementptr inbounds i8, i8* %8, i32 %953
  %955 = load i8, i8* %954, align 1, !tbaa !127
  %956 = insertelement <128 x i8> %952, i8 %955, i32 104
  %957 = extractelement <128 x i32> %536, i32 105
  %958 = getelementptr inbounds i8, i8* %8, i32 %957
  %959 = load i8, i8* %958, align 1, !tbaa !127
  %960 = insertelement <128 x i8> %956, i8 %959, i32 105
  %961 = extractelement <128 x i32> %536, i32 106
  %962 = getelementptr inbounds i8, i8* %8, i32 %961
  %963 = load i8, i8* %962, align 1, !tbaa !127
  %964 = insertelement <128 x i8> %960, i8 %963, i32 106
  %965 = extractelement <128 x i32> %536, i32 107
  %966 = getelementptr inbounds i8, i8* %8, i32 %965
  %967 = load i8, i8* %966, align 1, !tbaa !127
  %968 = insertelement <128 x i8> %964, i8 %967, i32 107
  %969 = extractelement <128 x i32> %536, i32 108
  %970 = getelementptr inbounds i8, i8* %8, i32 %969
  %971 = load i8, i8* %970, align 1, !tbaa !127
  %972 = insertelement <128 x i8> %968, i8 %971, i32 108
  %973 = extractelement <128 x i32> %536, i32 109
  %974 = getelementptr inbounds i8, i8* %8, i32 %973
  %975 = load i8, i8* %974, align 1, !tbaa !127
  %976 = insertelement <128 x i8> %972, i8 %975, i32 109
  %977 = extractelement <128 x i32> %536, i32 110
  %978 = getelementptr inbounds i8, i8* %8, i32 %977
  %979 = load i8, i8* %978, align 1, !tbaa !127
  %980 = insertelement <128 x i8> %976, i8 %979, i32 110
  %981 = extractelement <128 x i32> %536, i32 111
  %982 = getelementptr inbounds i8, i8* %8, i32 %981
  %983 = load i8, i8* %982, align 1, !tbaa !127
  %984 = insertelement <128 x i8> %980, i8 %983, i32 111
  %985 = extractelement <128 x i32> %536, i32 112
  %986 = getelementptr inbounds i8, i8* %8, i32 %985
  %987 = load i8, i8* %986, align 1, !tbaa !127
  %988 = insertelement <128 x i8> %984, i8 %987, i32 112
  %989 = extractelement <128 x i32> %536, i32 113
  %990 = getelementptr inbounds i8, i8* %8, i32 %989
  %991 = load i8, i8* %990, align 1, !tbaa !127
  %992 = insertelement <128 x i8> %988, i8 %991, i32 113
  %993 = extractelement <128 x i32> %536, i32 114
  %994 = getelementptr inbounds i8, i8* %8, i32 %993
  %995 = load i8, i8* %994, align 1, !tbaa !127
  %996 = insertelement <128 x i8> %992, i8 %995, i32 114
  %997 = extractelement <128 x i32> %536, i32 115
  %998 = getelementptr inbounds i8, i8* %8, i32 %997
  %999 = load i8, i8* %998, align 1, !tbaa !127
  %1000 = insertelement <128 x i8> %996, i8 %999, i32 115
  %1001 = extractelement <128 x i32> %536, i32 116
  %1002 = getelementptr inbounds i8, i8* %8, i32 %1001
  %1003 = load i8, i8* %1002, align 1, !tbaa !127
  %1004 = insertelement <128 x i8> %1000, i8 %1003, i32 116
  %1005 = extractelement <128 x i32> %536, i32 117
  %1006 = getelementptr inbounds i8, i8* %8, i32 %1005
  %1007 = load i8, i8* %1006, align 1, !tbaa !127
  %1008 = insertelement <128 x i8> %1004, i8 %1007, i32 117
  %1009 = extractelement <128 x i32> %536, i32 118
  %1010 = getelementptr inbounds i8, i8* %8, i32 %1009
  %1011 = load i8, i8* %1010, align 1, !tbaa !127
  %1012 = insertelement <128 x i8> %1008, i8 %1011, i32 118
  %1013 = extractelement <128 x i32> %536, i32 119
  %1014 = getelementptr inbounds i8, i8* %8, i32 %1013
  %1015 = load i8, i8* %1014, align 1, !tbaa !127
  %1016 = insertelement <128 x i8> %1012, i8 %1015, i32 119
  %1017 = extractelement <128 x i32> %536, i32 120
  %1018 = getelementptr inbounds i8, i8* %8, i32 %1017
  %1019 = load i8, i8* %1018, align 1, !tbaa !127
  %1020 = insertelement <128 x i8> %1016, i8 %1019, i32 120
  %1021 = extractelement <128 x i32> %536, i32 121
  %1022 = getelementptr inbounds i8, i8* %8, i32 %1021
  %1023 = load i8, i8* %1022, align 1, !tbaa !127
  %1024 = insertelement <128 x i8> %1020, i8 %1023, i32 121
  %1025 = extractelement <128 x i32> %536, i32 122
  %1026 = getelementptr inbounds i8, i8* %8, i32 %1025
  %1027 = load i8, i8* %1026, align 1, !tbaa !127
  %1028 = insertelement <128 x i8> %1024, i8 %1027, i32 122
  %1029 = extractelement <128 x i32> %536, i32 123
  %1030 = getelementptr inbounds i8, i8* %8, i32 %1029
  %1031 = load i8, i8* %1030, align 1, !tbaa !127
  %1032 = insertelement <128 x i8> %1028, i8 %1031, i32 123
  %1033 = extractelement <128 x i32> %536, i32 124
  %1034 = getelementptr inbounds i8, i8* %8, i32 %1033
  %1035 = load i8, i8* %1034, align 1, !tbaa !127
  %1036 = insertelement <128 x i8> %1032, i8 %1035, i32 124
  %1037 = extractelement <128 x i32> %536, i32 125
  %1038 = getelementptr inbounds i8, i8* %8, i32 %1037
  %1039 = load i8, i8* %1038, align 1, !tbaa !127
  %1040 = insertelement <128 x i8> %1036, i8 %1039, i32 125
  %1041 = extractelement <128 x i32> %536, i32 126
  %1042 = getelementptr inbounds i8, i8* %8, i32 %1041
  %1043 = load i8, i8* %1042, align 1, !tbaa !127
  %1044 = insertelement <128 x i8> %1040, i8 %1043, i32 126
  %1045 = extractelement <128 x i32> %536, i32 127
  %1046 = getelementptr inbounds i8, i8* %8, i32 %1045
  %1047 = load i8, i8* %1046, align 1, !tbaa !127
  %1048 = insertelement <128 x i8> %1044, i8 %1047, i32 127
  %1049 = add nsw i32 %t2248.us, %resampled_input.s0.x.rebased14.us
  %1050 = shl nsw i32 %1049, 7
  %1051 = getelementptr inbounds i8, i8* %resampled_input, i32 %1050
  %1052 = bitcast i8* %1051 to <128 x i8>*
  store <128 x i8> %1048, <128 x i8>* %1052, align 128, !tbaa !129
  %1053 = add nuw nsw i32 %resampled_input.s0.x.rebased14.us, 1
  %.not687.us = icmp eq i32 %resampled_input.s0.x.rebased14.us, %t2228
  br i1 %.not687.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %1054 = add nuw nsw i32 %resampled_input.s0.y.rebased11.us, 1
  %.not684.us = icmp eq i32 %resampled_input.s0.y.rebased11.us, %t2227
  br i1 %.not684.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7, %"for resampled_input.s0.y.rebased9.preheader"
  %1055 = mul nsw i32 %503, %25
  %t2255 = add i32 %459, %1055
  br i1 %142, label %"for output.s0.y.yo.preheader", label %"end for output.s0.y.yo", !prof !101

"for output.s0.y.yo.preheader":                   ; preds = %"consume resampled_input"
  %1056 = load <32 x i32>, <32 x i32>* %97, align 128
  %1057 = load <32 x i32>, <32 x i32>* %99, align 128
  %1058 = load <32 x i32>, <32 x i32>* %101, align 128
  %1059 = load <32 x i32>, <32 x i32>* %103, align 128
  br label %"for output.s0.y.yo"

"for output.s0.y.yo":                             ; preds = %"for output.s0.y.yo.preheader", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %1097, %"end for output.s0.x.xo" ], [ 0, %"for output.s0.y.yo.preheader" ]
  %a31 = shl nuw nsw i32 %output.s0.y.yo, 1
  %1060 = icmp slt i32 %a31, %b33
  %output.s0.y.y.base.s = select i1 %1060, i32 %a31, i32 %b33
  %1061 = add nsw i32 %output.s0.y.y.base.s, %22
  %1062 = mul nsw i32 %1061, %stride_y
  %1063 = add nsw i32 %1062, %143
  %t2283 = mul nsw i32 %1063, %128
  %1064 = add nsw i32 %1062, %144
  %t2286 = mul nsw i32 %1064, %128
  %1065 = add nsw i32 %1061, 1
  %1066 = mul nsw i32 %1065, %stride_y
  %1067 = add nsw i32 %1066, %143
  %t2288 = mul nsw i32 %1067, %128
  %1068 = add nsw i32 %1066, %144
  %t2289 = mul nsw i32 %1068, %128
  %1069 = sub nsw i32 %1062, %t2223
  %t2291 = mul nsw i32 %1069, %128
  %1070 = sub nsw i32 %1066, %t2223
  %t2293 = mul nsw i32 %1070, %128
  br i1 %147, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !101

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %1071 = add nsw i32 %t2283, %179
  %1072 = add nsw i32 %t2283, %180
  %1073 = sub nsw i32 %t2283, %t2225
  %1074 = add nsw i32 %t2286, %179
  %1075 = add nsw i32 %t2286, %180
  %1076 = sub nsw i32 %t2286, %t2225
  %1077 = add nsw i32 %t2291, %179
  %1078 = add nsw i32 %t2291, %180
  %1079 = sub nsw i32 %t2291, %t2225
  %1080 = add nsw i32 %t2288, %179
  %1081 = add nsw i32 %t2288, %180
  %1082 = sub nsw i32 %t2288, %t2225
  %1083 = add nsw i32 %t2289, %179
  %1084 = add nsw i32 %t2289, %180
  %1085 = sub nsw i32 %t2289, %t2225
  %1086 = add nsw i32 %t2293, %179
  %1087 = add nsw i32 %t2293, %180
  %1088 = sub nsw i32 %t2293, %t2225
  %1089 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %1090 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %185) #11
  %1091 = mul nsw i32 %1061, %24
  %1092 = add nsw i32 %1091, %t2255
  %1093 = mul nsw i32 %1065, %24
  %1094 = add nsw i32 %1093, %t2255
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %1095 = add nuw nsw i32 %output.s0.b.rebased, 1
  %.not679 = icmp eq i32 %1095, %15
  br i1 %.not679, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %2695, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a32 = shl nuw nsw i32 %output.s0.x.xo, 1
  %1096 = icmp slt i32 %a32, %b34
  %output.s0.x.x.base.s = select i1 %1096, i32 %a32, i32 %b34
  br i1 %t2217, label %then_bb17, label %next_bb18

"end for output.s0.x.xo.loopexit":                ; preds = %"consume convolved"
  store <32 x i32> %.lcssa4791.us.lcssa4855, <32 x i32>* %148, align 128, !tbaa !131
  store <32 x i32> %.lcssa4793.us.lcssa4858, <32 x i32>* %150, align 128, !tbaa !139
  store <32 x i32> %.lcssa4795.us.lcssa4861, <32 x i32>* %152, align 128, !tbaa !141
  store <32 x i32> %.lcssa4797.us.lcssa4864, <32 x i32>* %154, align 128, !tbaa !144
  store <32 x i32> %.lcssa4799.us.lcssa4867, <32 x i32>* %156, align 128, !tbaa !146
  store <32 x i32> %.lcssa4801.us.lcssa4870, <32 x i32>* %158, align 128, !tbaa !150
  store <32 x i32> %.lcssa4803.us.lcssa4873, <32 x i32>* %160, align 128, !tbaa !152
  store <32 x i32> %.lcssa4805.us.lcssa4876, <32 x i32>* %162, align 128, !tbaa !155
  store <32 x i32> %.lcssa4807.us.lcssa4879, <32 x i32>* %164, align 128, !tbaa !157
  store <32 x i32> %.lcssa4809.us.lcssa4882, <32 x i32>* %166, align 128, !tbaa !162
  store <32 x i32> %.lcssa4811.us.lcssa4885, <32 x i32>* %168, align 128, !tbaa !164
  store <32 x i32> %.lcssa4813.us.lcssa4888, <32 x i32>* %170, align 128, !tbaa !167
  store <32 x i32> %.lcssa4815.us.lcssa4891, <32 x i32>* %172, align 128, !tbaa !169
  store <32 x i32> %.lcssa4817.us.lcssa4894, <32 x i32>* %174, align 128, !tbaa !173
  store <32 x i32> %.lcssa4819.us.lcssa4897, <32 x i32>* %176, align 128, !tbaa !175
  store <32 x i32> %.lcssa4821.us.lcssa4900, <32 x i32>* %178, align 128, !tbaa !178
  br label %"end for output.s0.x.xo"

"end for output.s0.x.xo":                         ; preds = %"end for output.s0.x.xo.loopexit", %"for output.s0.y.yo"
  %1097 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not680 = icmp eq i32 %1097, %141
  br i1 %.not680, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb17:                                        ; preds = %"for output.s0.x.xo"
  %1098 = load <32 x i32>, <32 x i32>* %462, align 128, !tbaa !105
  %1099 = add nsw i32 %output.s0.x.x.base.s, %19
  %1100 = mul nsw i32 %1099, %stride_x
  %1101 = add nsw i32 %1100, %1071
  %1102 = shl nsw i32 %1101, 7
  %1103 = getelementptr inbounds i8, i8* %resampled_input, i32 %1102
  %1104 = bitcast i8* %1103 to <64 x i8>*
  %1105 = load <64 x i8>, <64 x i8>* %1104, align 128, !tbaa !129
  %1106 = zext <64 x i8> %1105 to <64 x i16>
  %1107 = load <32 x i32>, <32 x i32>* %464, align 128, !tbaa !105
  %1108 = add nsw i32 %1100, %1072
  %1109 = shl nsw i32 %1108, 7
  %1110 = getelementptr inbounds i8, i8* %resampled_input, i32 %1109
  %1111 = bitcast i8* %1110 to <64 x i8>*
  %1112 = load <64 x i8>, <64 x i8>* %1111, align 128, !tbaa !129
  %1113 = zext <64 x i8> %1112 to <64 x i16>
  %1114 = load <32 x i32>, <32 x i32>* %465, align 128, !tbaa !105
  %1115 = add nsw i32 %1100, %1073
  %1116 = shl nsw i32 %1115, 7
  %1117 = getelementptr inbounds i8, i8* %resampled_input, i32 %1116
  %1118 = bitcast i8* %1117 to <64 x i8>*
  %1119 = load <64 x i8>, <64 x i8>* %1118, align 128, !tbaa !129
  %1120 = zext <64 x i8> %1119 to <64 x i16>
  %1121 = load <32 x i32>, <32 x i32>* %468, align 128, !tbaa !105
  %1122 = add nsw i32 %1100, %1074
  %1123 = shl nsw i32 %1122, 7
  %1124 = getelementptr inbounds i8, i8* %resampled_input, i32 %1123
  %1125 = bitcast i8* %1124 to <64 x i8>*
  %1126 = load <64 x i8>, <64 x i8>* %1125, align 128, !tbaa !129
  %1127 = zext <64 x i8> %1126 to <64 x i16>
  %1128 = load <32 x i32>, <32 x i32>* %470, align 128, !tbaa !105
  %1129 = add nsw i32 %1100, %1075
  %1130 = shl nsw i32 %1129, 7
  %1131 = getelementptr inbounds i8, i8* %resampled_input, i32 %1130
  %1132 = bitcast i8* %1131 to <64 x i8>*
  %1133 = load <64 x i8>, <64 x i8>* %1132, align 128, !tbaa !129
  %1134 = zext <64 x i8> %1133 to <64 x i16>
  %1135 = load <32 x i32>, <32 x i32>* %471, align 128, !tbaa !105
  %1136 = add nsw i32 %1100, %1076
  %1137 = shl nsw i32 %1136, 7
  %1138 = getelementptr inbounds i8, i8* %resampled_input, i32 %1137
  %1139 = bitcast i8* %1138 to <64 x i8>*
  %1140 = load <64 x i8>, <64 x i8>* %1139, align 128, !tbaa !129
  %1141 = zext <64 x i8> %1140 to <64 x i16>
  %1142 = load <32 x i32>, <32 x i32>* %473, align 128, !tbaa !180
  %1143 = add nsw i32 %1100, %1077
  %1144 = shl nsw i32 %1143, 7
  %1145 = getelementptr inbounds i8, i8* %resampled_input, i32 %1144
  %1146 = bitcast i8* %1145 to <64 x i8>*
  %1147 = load <64 x i8>, <64 x i8>* %1146, align 128, !tbaa !129
  %1148 = zext <64 x i8> %1147 to <64 x i16>
  %1149 = load <32 x i32>, <32 x i32>* %475, align 128, !tbaa !186
  %1150 = add nsw i32 %1100, %1078
  %1151 = shl nsw i32 %1150, 7
  %1152 = getelementptr inbounds i8, i8* %resampled_input, i32 %1151
  %1153 = bitcast i8* %1152 to <64 x i8>*
  %1154 = load <64 x i8>, <64 x i8>* %1153, align 128, !tbaa !129
  %1155 = zext <64 x i8> %1154 to <64 x i16>
  %1156 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1057, <32 x i32> %1056)
  %1157 = load <32 x i32>, <32 x i32>* %476, align 128, !tbaa !190
  %1158 = add nsw i32 %1100, %1079
  %1159 = shl nsw i32 %1158, 7
  %1160 = getelementptr inbounds i8, i8* %resampled_input, i32 %1159
  %1161 = bitcast i8* %1160 to <64 x i8>*
  %1162 = load <64 x i8>, <64 x i8>* %1161, align 128, !tbaa !129
  %1163 = zext <64 x i8> %1162 to <64 x i16>
  %1164 = bitcast <64 x i16> %1106 to <32 x i32>
  %1165 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1164) #11
  %1166 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1165) #11
  %1167 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1098) #11
  %1168 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1167) #11
  %1169 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1166, <32 x i32> %1168) #11
  %1170 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1169, <32 x i32> %1166, <32 x i32> %1168) #11
  %1171 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1165) #11
  %1172 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1167) #11
  %1173 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1171, <32 x i32> %1172) #11
  %1174 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1173, <32 x i32> %1171, <32 x i32> %1172) #11
  %1175 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1170, <32 x i32> %1174) #11
  %1176 = bitcast <64 x i16> %1113 to <32 x i32>
  %1177 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1176) #11
  %1178 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1107) #11
  %1179 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1177, <32 x i32> %1178) #11
  %1180 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1179) #11
  %1181 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1179) #11
  %1182 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1180, <32 x i32> %1181) #11
  %1183 = bitcast <64 x i16> %1127 to <32 x i32>
  %1184 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1183) #11
  %1185 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1184) #11
  %1186 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1121) #11
  %1187 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1186) #11
  %1188 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1185, <32 x i32> %1187) #11
  %1189 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1188, <32 x i32> %1185, <32 x i32> %1187) #11
  %1190 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1184) #11
  %1191 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1186) #11
  %1192 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1190, <32 x i32> %1191) #11
  %1193 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1192, <32 x i32> %1190, <32 x i32> %1191) #11
  %1194 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1189, <32 x i32> %1193) #11
  %1195 = bitcast <64 x i16> %1134 to <32 x i32>
  %1196 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1195) #11
  %1197 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1128) #11
  %1198 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1196, <32 x i32> %1197) #11
  %1199 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1198) #11
  %1200 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1198) #11
  %1201 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1199, <32 x i32> %1200) #11
  %1202 = bitcast <64 x i16> %1148 to <32 x i32>
  %1203 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1202) #11
  %1204 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1203) #11
  %1205 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1142) #11
  %1206 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1205) #11
  %1207 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1204, <32 x i32> %1206) #11
  %1208 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1207, <32 x i32> %1204, <32 x i32> %1206) #11
  %1209 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1203) #11
  %1210 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1205) #11
  %1211 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1209, <32 x i32> %1210) #11
  %1212 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1211, <32 x i32> %1209, <32 x i32> %1210) #11
  %1213 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1208, <32 x i32> %1212) #11
  %1214 = bitcast <64 x i16> %1155 to <32 x i32>
  %1215 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1214) #11
  %1216 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1149) #11
  %1217 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1215, <32 x i32> %1216) #11
  %1218 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1217) #11
  %1219 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1217) #11
  %1220 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1218, <32 x i32> %1219) #11
  %1221 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1157) #11
  %1222 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1221) #11
  %1223 = bitcast <64 x i16> %1163 to <32 x i32>
  %1224 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1223) #11
  %1225 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1224) #11
  %1226 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1222, <32 x i32> %1225) #11
  %1227 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1226, <32 x i32> %1222, <32 x i32> %1225) #11
  %1228 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1221) #11
  %1229 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1224) #11
  %1230 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1228, <32 x i32> %1229) #11
  %1231 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1230, <32 x i32> %1228, <32 x i32> %1229) #11
  %1232 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1227, <32 x i32> %1231) #11
  %1233 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1232, <64 x i32> %1156) #11
  %1234 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1220, <64 x i32> %1233) #11
  %1235 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1213, <64 x i32> %1234) #11
  %1236 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1135) #11
  %1237 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1236) #11
  %1238 = bitcast <64 x i16> %1141 to <32 x i32>
  %1239 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1238) #11
  %1240 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1239) #11
  %1241 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1237, <32 x i32> %1240) #11
  %1242 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1241, <32 x i32> %1237, <32 x i32> %1240) #11
  %1243 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1236) #11
  %1244 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1239) #11
  %1245 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1243, <32 x i32> %1244) #11
  %1246 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1245, <32 x i32> %1243, <32 x i32> %1244) #11
  %1247 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1242, <32 x i32> %1246) #11
  %1248 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1235, <64 x i32> %1247) #11
  %1249 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1201, <64 x i32> %1248) #11
  %1250 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1194, <64 x i32> %1249) #11
  %1251 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1114) #11
  %1252 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1251) #11
  %1253 = bitcast <64 x i16> %1120 to <32 x i32>
  %1254 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1253) #11
  %1255 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1254) #11
  %1256 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1252, <32 x i32> %1255) #11
  %1257 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1256, <32 x i32> %1252, <32 x i32> %1255) #11
  %1258 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1251) #11
  %1259 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1254) #11
  %1260 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1258, <32 x i32> %1259) #11
  %1261 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1260, <32 x i32> %1258, <32 x i32> %1259) #11
  %1262 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1257, <32 x i32> %1261) #11
  %1263 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1250, <64 x i32> %1262) #11
  %1264 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1182, <64 x i32> %1263) #11
  %1265 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1175, <64 x i32> %1264) #11
  %1266 = load <32 x i32>, <32 x i32>* %478, align 128, !tbaa !105
  %1267 = getelementptr inbounds i8, i8* %1103, i32 64
  %1268 = bitcast i8* %1267 to <64 x i8>*
  %1269 = load <64 x i8>, <64 x i8>* %1268, align 64, !tbaa !129
  %1270 = zext <64 x i8> %1269 to <64 x i16>
  %1271 = load <32 x i32>, <32 x i32>* %480, align 128, !tbaa !105
  %1272 = getelementptr inbounds i8, i8* %1110, i32 64
  %1273 = bitcast i8* %1272 to <64 x i8>*
  %1274 = load <64 x i8>, <64 x i8>* %1273, align 64, !tbaa !129
  %1275 = zext <64 x i8> %1274 to <64 x i16>
  %1276 = load <32 x i32>, <32 x i32>* %482, align 128, !tbaa !105
  %1277 = getelementptr inbounds i8, i8* %1117, i32 64
  %1278 = bitcast i8* %1277 to <64 x i8>*
  %1279 = load <64 x i8>, <64 x i8>* %1278, align 64, !tbaa !129
  %1280 = zext <64 x i8> %1279 to <64 x i16>
  %1281 = load <32 x i32>, <32 x i32>* %484, align 128, !tbaa !105
  %1282 = getelementptr inbounds i8, i8* %1124, i32 64
  %1283 = bitcast i8* %1282 to <64 x i8>*
  %1284 = load <64 x i8>, <64 x i8>* %1283, align 64, !tbaa !129
  %1285 = zext <64 x i8> %1284 to <64 x i16>
  %1286 = load <32 x i32>, <32 x i32>* %486, align 128, !tbaa !105
  %1287 = getelementptr inbounds i8, i8* %1131, i32 64
  %1288 = bitcast i8* %1287 to <64 x i8>*
  %1289 = load <64 x i8>, <64 x i8>* %1288, align 64, !tbaa !129
  %1290 = zext <64 x i8> %1289 to <64 x i16>
  %1291 = load <32 x i32>, <32 x i32>* %488, align 128, !tbaa !105
  %1292 = getelementptr inbounds i8, i8* %1138, i32 64
  %1293 = bitcast i8* %1292 to <64 x i8>*
  %1294 = load <64 x i8>, <64 x i8>* %1293, align 64, !tbaa !129
  %1295 = zext <64 x i8> %1294 to <64 x i16>
  %1296 = load <32 x i32>, <32 x i32>* %490, align 128, !tbaa !193
  %1297 = getelementptr inbounds i8, i8* %1145, i32 64
  %1298 = bitcast i8* %1297 to <64 x i8>*
  %1299 = load <64 x i8>, <64 x i8>* %1298, align 64, !tbaa !129
  %1300 = zext <64 x i8> %1299 to <64 x i16>
  %1301 = load <32 x i32>, <32 x i32>* %492, align 128, !tbaa !195
  %1302 = getelementptr inbounds i8, i8* %1152, i32 64
  %1303 = bitcast i8* %1302 to <64 x i8>*
  %1304 = load <64 x i8>, <64 x i8>* %1303, align 64, !tbaa !129
  %1305 = zext <64 x i8> %1304 to <64 x i16>
  %1306 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1059, <32 x i32> %1058)
  %1307 = load <32 x i32>, <32 x i32>* %494, align 128, !tbaa !197
  %1308 = getelementptr inbounds i8, i8* %1160, i32 64
  %1309 = bitcast i8* %1308 to <64 x i8>*
  %1310 = load <64 x i8>, <64 x i8>* %1309, align 64, !tbaa !129
  %1311 = zext <64 x i8> %1310 to <64 x i16>
  %1312 = bitcast <64 x i16> %1270 to <32 x i32>
  %1313 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1312) #11
  %1314 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1313) #11
  %1315 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1266) #11
  %1316 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1315) #11
  %1317 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1314, <32 x i32> %1316) #11
  %1318 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1317, <32 x i32> %1314, <32 x i32> %1316) #11
  %1319 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1313) #11
  %1320 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1315) #11
  %1321 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1319, <32 x i32> %1320) #11
  %1322 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1321, <32 x i32> %1319, <32 x i32> %1320) #11
  %1323 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1318, <32 x i32> %1322) #11
  %1324 = bitcast <64 x i16> %1275 to <32 x i32>
  %1325 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1324) #11
  %1326 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1271) #11
  %1327 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1325, <32 x i32> %1326) #11
  %1328 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1327) #11
  %1329 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1327) #11
  %1330 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1328, <32 x i32> %1329) #11
  %1331 = bitcast <64 x i16> %1285 to <32 x i32>
  %1332 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1331) #11
  %1333 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1332) #11
  %1334 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1281) #11
  %1335 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1334) #11
  %1336 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1333, <32 x i32> %1335) #11
  %1337 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1336, <32 x i32> %1333, <32 x i32> %1335) #11
  %1338 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1332) #11
  %1339 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1334) #11
  %1340 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1338, <32 x i32> %1339) #11
  %1341 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1340, <32 x i32> %1338, <32 x i32> %1339) #11
  %1342 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1337, <32 x i32> %1341) #11
  %1343 = bitcast <64 x i16> %1290 to <32 x i32>
  %1344 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1343) #11
  %1345 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1286) #11
  %1346 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1344, <32 x i32> %1345) #11
  %1347 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1346) #11
  %1348 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1346) #11
  %1349 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1347, <32 x i32> %1348) #11
  %1350 = bitcast <64 x i16> %1300 to <32 x i32>
  %1351 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1350) #11
  %1352 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1351) #11
  %1353 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1296) #11
  %1354 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1353) #11
  %1355 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1352, <32 x i32> %1354) #11
  %1356 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1355, <32 x i32> %1352, <32 x i32> %1354) #11
  %1357 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1351) #11
  %1358 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1353) #11
  %1359 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1357, <32 x i32> %1358) #11
  %1360 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1359, <32 x i32> %1357, <32 x i32> %1358) #11
  %1361 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1356, <32 x i32> %1360) #11
  %1362 = bitcast <64 x i16> %1305 to <32 x i32>
  %1363 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1362) #11
  %1364 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1301) #11
  %1365 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1363, <32 x i32> %1364) #11
  %1366 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1365) #11
  %1367 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1365) #11
  %1368 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1366, <32 x i32> %1367) #11
  %1369 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1307) #11
  %1370 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1369) #11
  %1371 = bitcast <64 x i16> %1311 to <32 x i32>
  %1372 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1371) #11
  %1373 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1372) #11
  %1374 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1373) #11
  %1375 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1374, <32 x i32> %1370, <32 x i32> %1373) #11
  %1376 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1369) #11
  %1377 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1372) #11
  %1378 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %1377) #11
  %1379 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1378, <32 x i32> %1376, <32 x i32> %1377) #11
  %1380 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1375, <32 x i32> %1379) #11
  %1381 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1380, <64 x i32> %1306) #11
  %1382 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1368, <64 x i32> %1381) #11
  %1383 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1361, <64 x i32> %1382) #11
  %1384 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1291) #11
  %1385 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1384) #11
  %1386 = bitcast <64 x i16> %1295 to <32 x i32>
  %1387 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1386) #11
  %1388 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1387) #11
  %1389 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1385, <32 x i32> %1388) #11
  %1390 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1389, <32 x i32> %1385, <32 x i32> %1388) #11
  %1391 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1384) #11
  %1392 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1387) #11
  %1393 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1391, <32 x i32> %1392) #11
  %1394 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1393, <32 x i32> %1391, <32 x i32> %1392) #11
  %1395 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1390, <32 x i32> %1394) #11
  %1396 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1383, <64 x i32> %1395) #11
  %1397 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1349, <64 x i32> %1396) #11
  %1398 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1342, <64 x i32> %1397) #11
  %1399 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1276) #11
  %1400 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1399) #11
  %1401 = bitcast <64 x i16> %1280 to <32 x i32>
  %1402 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1401) #11
  %1403 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1402) #11
  %1404 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1400, <32 x i32> %1403) #11
  %1405 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1404, <32 x i32> %1400, <32 x i32> %1403) #11
  %1406 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1399) #11
  %1407 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1402) #11
  %1408 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1406, <32 x i32> %1407) #11
  %1409 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1408, <32 x i32> %1406, <32 x i32> %1407) #11
  %1410 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1405, <32 x i32> %1409) #11
  %1411 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1398, <64 x i32> %1410) #11
  %1412 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1330, <64 x i32> %1411) #11
  %1413 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1323, <64 x i32> %1412) #11
  %1414 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1265)
  %1415 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1265)
  %1416 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1413)
  %1417 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1413)
  %1418 = add nsw i32 %1099, 1
  %1419 = mul nsw i32 %1418, %stride_x
  %1420 = add nsw i32 %1419, %1071
  %1421 = shl nsw i32 %1420, 7
  %1422 = getelementptr inbounds i8, i8* %resampled_input, i32 %1421
  %1423 = bitcast i8* %1422 to <64 x i8>*
  %1424 = load <64 x i8>, <64 x i8>* %1423, align 128, !tbaa !129
  %1425 = zext <64 x i8> %1424 to <64 x i16>
  %1426 = add nsw i32 %1419, %1072
  %1427 = shl nsw i32 %1426, 7
  %1428 = getelementptr inbounds i8, i8* %resampled_input, i32 %1427
  %1429 = bitcast i8* %1428 to <64 x i8>*
  %1430 = load <64 x i8>, <64 x i8>* %1429, align 128, !tbaa !129
  %1431 = zext <64 x i8> %1430 to <64 x i16>
  %1432 = add nsw i32 %1419, %1073
  %1433 = shl nsw i32 %1432, 7
  %1434 = getelementptr inbounds i8, i8* %resampled_input, i32 %1433
  %1435 = bitcast i8* %1434 to <64 x i8>*
  %1436 = load <64 x i8>, <64 x i8>* %1435, align 128, !tbaa !129
  %1437 = zext <64 x i8> %1436 to <64 x i16>
  %1438 = add nsw i32 %1419, %1074
  %1439 = shl nsw i32 %1438, 7
  %1440 = getelementptr inbounds i8, i8* %resampled_input, i32 %1439
  %1441 = bitcast i8* %1440 to <64 x i8>*
  %1442 = load <64 x i8>, <64 x i8>* %1441, align 128, !tbaa !129
  %1443 = zext <64 x i8> %1442 to <64 x i16>
  %1444 = add nsw i32 %1419, %1075
  %1445 = shl nsw i32 %1444, 7
  %1446 = getelementptr inbounds i8, i8* %resampled_input, i32 %1445
  %1447 = bitcast i8* %1446 to <64 x i8>*
  %1448 = load <64 x i8>, <64 x i8>* %1447, align 128, !tbaa !129
  %1449 = zext <64 x i8> %1448 to <64 x i16>
  %1450 = add nsw i32 %1419, %1076
  %1451 = shl nsw i32 %1450, 7
  %1452 = getelementptr inbounds i8, i8* %resampled_input, i32 %1451
  %1453 = bitcast i8* %1452 to <64 x i8>*
  %1454 = load <64 x i8>, <64 x i8>* %1453, align 128, !tbaa !129
  %1455 = zext <64 x i8> %1454 to <64 x i16>
  %1456 = add nsw i32 %1419, %1077
  %1457 = shl nsw i32 %1456, 7
  %1458 = getelementptr inbounds i8, i8* %resampled_input, i32 %1457
  %1459 = bitcast i8* %1458 to <64 x i8>*
  %1460 = load <64 x i8>, <64 x i8>* %1459, align 128, !tbaa !129
  %1461 = zext <64 x i8> %1460 to <64 x i16>
  %1462 = add nsw i32 %1419, %1078
  %1463 = shl nsw i32 %1462, 7
  %1464 = getelementptr inbounds i8, i8* %resampled_input, i32 %1463
  %1465 = bitcast i8* %1464 to <64 x i8>*
  %1466 = load <64 x i8>, <64 x i8>* %1465, align 128, !tbaa !129
  %1467 = zext <64 x i8> %1466 to <64 x i16>
  %1468 = add nsw i32 %1419, %1079
  %1469 = shl nsw i32 %1468, 7
  %1470 = getelementptr inbounds i8, i8* %resampled_input, i32 %1469
  %1471 = bitcast i8* %1470 to <64 x i8>*
  %1472 = load <64 x i8>, <64 x i8>* %1471, align 128, !tbaa !129
  %1473 = zext <64 x i8> %1472 to <64 x i16>
  %1474 = bitcast <64 x i16> %1425 to <32 x i32>
  %1475 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1474) #11
  %1476 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1475) #11
  %1477 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1476, <32 x i32> %1168) #11
  %1478 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1477, <32 x i32> %1476, <32 x i32> %1168) #11
  %1479 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1475) #11
  %1480 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1479, <32 x i32> %1172) #11
  %1481 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1480, <32 x i32> %1479, <32 x i32> %1172) #11
  %1482 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1478, <32 x i32> %1481) #11
  %1483 = bitcast <64 x i16> %1431 to <32 x i32>
  %1484 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1483) #11
  %1485 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1484, <32 x i32> %1178) #11
  %1486 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1485) #11
  %1487 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1485) #11
  %1488 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1486, <32 x i32> %1487) #11
  %1489 = bitcast <64 x i16> %1443 to <32 x i32>
  %1490 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1489) #11
  %1491 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1490) #11
  %1492 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1491, <32 x i32> %1187) #11
  %1493 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1492, <32 x i32> %1491, <32 x i32> %1187) #11
  %1494 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1490) #11
  %1495 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1494, <32 x i32> %1191) #11
  %1496 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1495, <32 x i32> %1494, <32 x i32> %1191) #11
  %1497 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1493, <32 x i32> %1496) #11
  %1498 = bitcast <64 x i16> %1449 to <32 x i32>
  %1499 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1498) #11
  %1500 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1499, <32 x i32> %1197) #11
  %1501 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1500) #11
  %1502 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1500) #11
  %1503 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1501, <32 x i32> %1502) #11
  %1504 = bitcast <64 x i16> %1461 to <32 x i32>
  %1505 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1504) #11
  %1506 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1505) #11
  %1507 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1506, <32 x i32> %1206) #11
  %1508 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1507, <32 x i32> %1506, <32 x i32> %1206) #11
  %1509 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1505) #11
  %1510 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1509, <32 x i32> %1210) #11
  %1511 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1510, <32 x i32> %1509, <32 x i32> %1210) #11
  %1512 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1508, <32 x i32> %1511) #11
  %1513 = bitcast <64 x i16> %1467 to <32 x i32>
  %1514 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1513) #11
  %1515 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1514, <32 x i32> %1216) #11
  %1516 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1515) #11
  %1517 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1515) #11
  %1518 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1516, <32 x i32> %1517) #11
  %1519 = bitcast <64 x i16> %1473 to <32 x i32>
  %1520 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1519) #11
  %1521 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1520) #11
  %1522 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1222, <32 x i32> %1521) #11
  %1523 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1522, <32 x i32> %1222, <32 x i32> %1521) #11
  %1524 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1520) #11
  %1525 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1228, <32 x i32> %1524) #11
  %1526 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1525, <32 x i32> %1228, <32 x i32> %1524) #11
  %1527 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1523, <32 x i32> %1526) #11
  %1528 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1527, <64 x i32> %1156) #11
  %1529 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1518, <64 x i32> %1528) #11
  %1530 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1512, <64 x i32> %1529) #11
  %1531 = bitcast <64 x i16> %1455 to <32 x i32>
  %1532 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1531) #11
  %1533 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1532) #11
  %1534 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1237, <32 x i32> %1533) #11
  %1535 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1534, <32 x i32> %1237, <32 x i32> %1533) #11
  %1536 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1532) #11
  %1537 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1243, <32 x i32> %1536) #11
  %1538 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1537, <32 x i32> %1243, <32 x i32> %1536) #11
  %1539 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1535, <32 x i32> %1538) #11
  %1540 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1530, <64 x i32> %1539) #11
  %1541 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1503, <64 x i32> %1540) #11
  %1542 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1497, <64 x i32> %1541) #11
  %1543 = bitcast <64 x i16> %1437 to <32 x i32>
  %1544 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1543) #11
  %1545 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1544) #11
  %1546 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1252, <32 x i32> %1545) #11
  %1547 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1546, <32 x i32> %1252, <32 x i32> %1545) #11
  %1548 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1544) #11
  %1549 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1258, <32 x i32> %1548) #11
  %1550 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1549, <32 x i32> %1258, <32 x i32> %1548) #11
  %1551 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1547, <32 x i32> %1550) #11
  %1552 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1542, <64 x i32> %1551) #11
  %1553 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1488, <64 x i32> %1552) #11
  %1554 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1482, <64 x i32> %1553) #11
  %1555 = getelementptr inbounds i8, i8* %1422, i32 64
  %1556 = bitcast i8* %1555 to <64 x i8>*
  %1557 = load <64 x i8>, <64 x i8>* %1556, align 64, !tbaa !129
  %1558 = zext <64 x i8> %1557 to <64 x i16>
  %1559 = getelementptr inbounds i8, i8* %1428, i32 64
  %1560 = bitcast i8* %1559 to <64 x i8>*
  %1561 = load <64 x i8>, <64 x i8>* %1560, align 64, !tbaa !129
  %1562 = zext <64 x i8> %1561 to <64 x i16>
  %1563 = getelementptr inbounds i8, i8* %1434, i32 64
  %1564 = bitcast i8* %1563 to <64 x i8>*
  %1565 = load <64 x i8>, <64 x i8>* %1564, align 64, !tbaa !129
  %1566 = zext <64 x i8> %1565 to <64 x i16>
  %1567 = getelementptr inbounds i8, i8* %1440, i32 64
  %1568 = bitcast i8* %1567 to <64 x i8>*
  %1569 = load <64 x i8>, <64 x i8>* %1568, align 64, !tbaa !129
  %1570 = zext <64 x i8> %1569 to <64 x i16>
  %1571 = getelementptr inbounds i8, i8* %1446, i32 64
  %1572 = bitcast i8* %1571 to <64 x i8>*
  %1573 = load <64 x i8>, <64 x i8>* %1572, align 64, !tbaa !129
  %1574 = zext <64 x i8> %1573 to <64 x i16>
  %1575 = getelementptr inbounds i8, i8* %1452, i32 64
  %1576 = bitcast i8* %1575 to <64 x i8>*
  %1577 = load <64 x i8>, <64 x i8>* %1576, align 64, !tbaa !129
  %1578 = zext <64 x i8> %1577 to <64 x i16>
  %1579 = getelementptr inbounds i8, i8* %1458, i32 64
  %1580 = bitcast i8* %1579 to <64 x i8>*
  %1581 = load <64 x i8>, <64 x i8>* %1580, align 64, !tbaa !129
  %1582 = zext <64 x i8> %1581 to <64 x i16>
  %1583 = getelementptr inbounds i8, i8* %1464, i32 64
  %1584 = bitcast i8* %1583 to <64 x i8>*
  %1585 = load <64 x i8>, <64 x i8>* %1584, align 64, !tbaa !129
  %1586 = zext <64 x i8> %1585 to <64 x i16>
  %1587 = getelementptr inbounds i8, i8* %1470, i32 64
  %1588 = bitcast i8* %1587 to <64 x i8>*
  %1589 = load <64 x i8>, <64 x i8>* %1588, align 64, !tbaa !129
  %1590 = zext <64 x i8> %1589 to <64 x i16>
  %1591 = bitcast <64 x i16> %1558 to <32 x i32>
  %1592 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1591) #11
  %1593 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1592) #11
  %1594 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1593, <32 x i32> %1316) #11
  %1595 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1594, <32 x i32> %1593, <32 x i32> %1316) #11
  %1596 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1592) #11
  %1597 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1596, <32 x i32> %1320) #11
  %1598 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1597, <32 x i32> %1596, <32 x i32> %1320) #11
  %1599 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1595, <32 x i32> %1598) #11
  %1600 = bitcast <64 x i16> %1562 to <32 x i32>
  %1601 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1600) #11
  %1602 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1601, <32 x i32> %1326) #11
  %1603 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1602) #11
  %1604 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1602) #11
  %1605 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1603, <32 x i32> %1604) #11
  %1606 = bitcast <64 x i16> %1570 to <32 x i32>
  %1607 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1606) #11
  %1608 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1607) #11
  %1609 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1608, <32 x i32> %1335) #11
  %1610 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1609, <32 x i32> %1608, <32 x i32> %1335) #11
  %1611 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1607) #11
  %1612 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1611, <32 x i32> %1339) #11
  %1613 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1612, <32 x i32> %1611, <32 x i32> %1339) #11
  %1614 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1610, <32 x i32> %1613) #11
  %1615 = bitcast <64 x i16> %1574 to <32 x i32>
  %1616 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1615) #11
  %1617 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1616, <32 x i32> %1345) #11
  %1618 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1617) #11
  %1619 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1617) #11
  %1620 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1618, <32 x i32> %1619) #11
  %1621 = bitcast <64 x i16> %1582 to <32 x i32>
  %1622 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1621) #11
  %1623 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1622) #11
  %1624 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1623, <32 x i32> %1354) #11
  %1625 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1624, <32 x i32> %1623, <32 x i32> %1354) #11
  %1626 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1622) #11
  %1627 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1626, <32 x i32> %1358) #11
  %1628 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1627, <32 x i32> %1626, <32 x i32> %1358) #11
  %1629 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1625, <32 x i32> %1628) #11
  %1630 = bitcast <64 x i16> %1586 to <32 x i32>
  %1631 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1630) #11
  %1632 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1631, <32 x i32> %1364) #11
  %1633 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1632) #11
  %1634 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1632) #11
  %1635 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1633, <32 x i32> %1634) #11
  %1636 = bitcast <64 x i16> %1590 to <32 x i32>
  %1637 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1636) #11
  %1638 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1637) #11
  %1639 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1638) #11
  %1640 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1639, <32 x i32> %1370, <32 x i32> %1638) #11
  %1641 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1637) #11
  %1642 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %1641) #11
  %1643 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1642, <32 x i32> %1376, <32 x i32> %1641) #11
  %1644 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1640, <32 x i32> %1643) #11
  %1645 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1644, <64 x i32> %1306) #11
  %1646 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1635, <64 x i32> %1645) #11
  %1647 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1629, <64 x i32> %1646) #11
  %1648 = bitcast <64 x i16> %1578 to <32 x i32>
  %1649 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1648) #11
  %1650 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1649) #11
  %1651 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1385, <32 x i32> %1650) #11
  %1652 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1651, <32 x i32> %1385, <32 x i32> %1650) #11
  %1653 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1649) #11
  %1654 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1391, <32 x i32> %1653) #11
  %1655 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1654, <32 x i32> %1391, <32 x i32> %1653) #11
  %1656 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1652, <32 x i32> %1655) #11
  %1657 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1647, <64 x i32> %1656) #11
  %1658 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1620, <64 x i32> %1657) #11
  %1659 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1614, <64 x i32> %1658) #11
  %1660 = bitcast <64 x i16> %1566 to <32 x i32>
  %1661 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1660) #11
  %1662 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1661) #11
  %1663 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1400, <32 x i32> %1662) #11
  %1664 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1663, <32 x i32> %1400, <32 x i32> %1662) #11
  %1665 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1661) #11
  %1666 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1406, <32 x i32> %1665) #11
  %1667 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1666, <32 x i32> %1406, <32 x i32> %1665) #11
  %1668 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1664, <32 x i32> %1667) #11
  %1669 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1659, <64 x i32> %1668) #11
  %1670 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1605, <64 x i32> %1669) #11
  %1671 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1599, <64 x i32> %1670) #11
  %1672 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1554)
  %1673 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1554)
  %1674 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1671)
  %1675 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1671)
  %1676 = add nsw i32 %1100, %1080
  %1677 = shl nsw i32 %1676, 7
  %1678 = getelementptr inbounds i8, i8* %resampled_input, i32 %1677
  %1679 = bitcast i8* %1678 to <64 x i8>*
  %1680 = load <64 x i8>, <64 x i8>* %1679, align 128, !tbaa !129
  %1681 = zext <64 x i8> %1680 to <64 x i16>
  %1682 = add nsw i32 %1100, %1081
  %1683 = shl nsw i32 %1682, 7
  %1684 = getelementptr inbounds i8, i8* %resampled_input, i32 %1683
  %1685 = bitcast i8* %1684 to <64 x i8>*
  %1686 = load <64 x i8>, <64 x i8>* %1685, align 128, !tbaa !129
  %1687 = zext <64 x i8> %1686 to <64 x i16>
  %1688 = add nsw i32 %1100, %1082
  %1689 = shl nsw i32 %1688, 7
  %1690 = getelementptr inbounds i8, i8* %resampled_input, i32 %1689
  %1691 = bitcast i8* %1690 to <64 x i8>*
  %1692 = load <64 x i8>, <64 x i8>* %1691, align 128, !tbaa !129
  %1693 = zext <64 x i8> %1692 to <64 x i16>
  %1694 = add nsw i32 %1100, %1083
  %1695 = shl nsw i32 %1694, 7
  %1696 = getelementptr inbounds i8, i8* %resampled_input, i32 %1695
  %1697 = bitcast i8* %1696 to <64 x i8>*
  %1698 = load <64 x i8>, <64 x i8>* %1697, align 128, !tbaa !129
  %1699 = zext <64 x i8> %1698 to <64 x i16>
  %1700 = add nsw i32 %1100, %1084
  %1701 = shl nsw i32 %1700, 7
  %1702 = getelementptr inbounds i8, i8* %resampled_input, i32 %1701
  %1703 = bitcast i8* %1702 to <64 x i8>*
  %1704 = load <64 x i8>, <64 x i8>* %1703, align 128, !tbaa !129
  %1705 = zext <64 x i8> %1704 to <64 x i16>
  %1706 = add nsw i32 %1100, %1085
  %1707 = shl nsw i32 %1706, 7
  %1708 = getelementptr inbounds i8, i8* %resampled_input, i32 %1707
  %1709 = bitcast i8* %1708 to <64 x i8>*
  %1710 = load <64 x i8>, <64 x i8>* %1709, align 128, !tbaa !129
  %1711 = zext <64 x i8> %1710 to <64 x i16>
  %1712 = add nsw i32 %1100, %1086
  %1713 = shl nsw i32 %1712, 7
  %1714 = getelementptr inbounds i8, i8* %resampled_input, i32 %1713
  %1715 = bitcast i8* %1714 to <64 x i8>*
  %1716 = load <64 x i8>, <64 x i8>* %1715, align 128, !tbaa !129
  %1717 = zext <64 x i8> %1716 to <64 x i16>
  %1718 = add nsw i32 %1100, %1087
  %1719 = shl nsw i32 %1718, 7
  %1720 = getelementptr inbounds i8, i8* %resampled_input, i32 %1719
  %1721 = bitcast i8* %1720 to <64 x i8>*
  %1722 = load <64 x i8>, <64 x i8>* %1721, align 128, !tbaa !129
  %1723 = zext <64 x i8> %1722 to <64 x i16>
  %1724 = add nsw i32 %1100, %1088
  %1725 = shl nsw i32 %1724, 7
  %1726 = getelementptr inbounds i8, i8* %resampled_input, i32 %1725
  %1727 = bitcast i8* %1726 to <64 x i8>*
  %1728 = load <64 x i8>, <64 x i8>* %1727, align 128, !tbaa !129
  %1729 = zext <64 x i8> %1728 to <64 x i16>
  %1730 = bitcast <64 x i16> %1681 to <32 x i32>
  %1731 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1730) #11
  %1732 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1731) #11
  %1733 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1732, <32 x i32> %1168) #11
  %1734 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1733, <32 x i32> %1732, <32 x i32> %1168) #11
  %1735 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1731) #11
  %1736 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1735, <32 x i32> %1172) #11
  %1737 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1736, <32 x i32> %1735, <32 x i32> %1172) #11
  %1738 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1734, <32 x i32> %1737) #11
  %1739 = bitcast <64 x i16> %1687 to <32 x i32>
  %1740 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1739) #11
  %1741 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1740, <32 x i32> %1178) #11
  %1742 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1741) #11
  %1743 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1741) #11
  %1744 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1742, <32 x i32> %1743) #11
  %1745 = bitcast <64 x i16> %1699 to <32 x i32>
  %1746 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1745) #11
  %1747 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1746) #11
  %1748 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1747, <32 x i32> %1187) #11
  %1749 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1748, <32 x i32> %1747, <32 x i32> %1187) #11
  %1750 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1746) #11
  %1751 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1750, <32 x i32> %1191) #11
  %1752 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1751, <32 x i32> %1750, <32 x i32> %1191) #11
  %1753 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1749, <32 x i32> %1752) #11
  %1754 = bitcast <64 x i16> %1705 to <32 x i32>
  %1755 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1754) #11
  %1756 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1755, <32 x i32> %1197) #11
  %1757 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1756) #11
  %1758 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1756) #11
  %1759 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1757, <32 x i32> %1758) #11
  %1760 = bitcast <64 x i16> %1717 to <32 x i32>
  %1761 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1760) #11
  %1762 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1761) #11
  %1763 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1762, <32 x i32> %1206) #11
  %1764 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1763, <32 x i32> %1762, <32 x i32> %1206) #11
  %1765 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1761) #11
  %1766 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1765, <32 x i32> %1210) #11
  %1767 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1766, <32 x i32> %1765, <32 x i32> %1210) #11
  %1768 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1764, <32 x i32> %1767) #11
  %1769 = bitcast <64 x i16> %1723 to <32 x i32>
  %1770 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1769) #11
  %1771 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1770, <32 x i32> %1216) #11
  %1772 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1771) #11
  %1773 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1771) #11
  %1774 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1772, <32 x i32> %1773) #11
  %1775 = bitcast <64 x i16> %1729 to <32 x i32>
  %1776 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1775) #11
  %1777 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1776) #11
  %1778 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1222, <32 x i32> %1777) #11
  %1779 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1778, <32 x i32> %1222, <32 x i32> %1777) #11
  %1780 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1776) #11
  %1781 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1228, <32 x i32> %1780) #11
  %1782 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1781, <32 x i32> %1228, <32 x i32> %1780) #11
  %1783 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1779, <32 x i32> %1782) #11
  %1784 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1783, <64 x i32> %1156) #11
  %1785 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1774, <64 x i32> %1784) #11
  %1786 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1768, <64 x i32> %1785) #11
  %1787 = bitcast <64 x i16> %1711 to <32 x i32>
  %1788 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1787) #11
  %1789 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1788) #11
  %1790 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1237, <32 x i32> %1789) #11
  %1791 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1790, <32 x i32> %1237, <32 x i32> %1789) #11
  %1792 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1788) #11
  %1793 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1243, <32 x i32> %1792) #11
  %1794 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1793, <32 x i32> %1243, <32 x i32> %1792) #11
  %1795 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1791, <32 x i32> %1794) #11
  %1796 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1786, <64 x i32> %1795) #11
  %1797 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1759, <64 x i32> %1796) #11
  %1798 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1753, <64 x i32> %1797) #11
  %1799 = bitcast <64 x i16> %1693 to <32 x i32>
  %1800 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1799) #11
  %1801 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1800) #11
  %1802 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1252, <32 x i32> %1801) #11
  %1803 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1802, <32 x i32> %1252, <32 x i32> %1801) #11
  %1804 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1800) #11
  %1805 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1258, <32 x i32> %1804) #11
  %1806 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1805, <32 x i32> %1258, <32 x i32> %1804) #11
  %1807 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1803, <32 x i32> %1806) #11
  %1808 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1798, <64 x i32> %1807) #11
  %1809 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1744, <64 x i32> %1808) #11
  %1810 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1738, <64 x i32> %1809) #11
  %1811 = getelementptr inbounds i8, i8* %1678, i32 64
  %1812 = bitcast i8* %1811 to <64 x i8>*
  %1813 = load <64 x i8>, <64 x i8>* %1812, align 64, !tbaa !129
  %1814 = zext <64 x i8> %1813 to <64 x i16>
  %1815 = getelementptr inbounds i8, i8* %1684, i32 64
  %1816 = bitcast i8* %1815 to <64 x i8>*
  %1817 = load <64 x i8>, <64 x i8>* %1816, align 64, !tbaa !129
  %1818 = zext <64 x i8> %1817 to <64 x i16>
  %1819 = getelementptr inbounds i8, i8* %1690, i32 64
  %1820 = bitcast i8* %1819 to <64 x i8>*
  %1821 = load <64 x i8>, <64 x i8>* %1820, align 64, !tbaa !129
  %1822 = zext <64 x i8> %1821 to <64 x i16>
  %1823 = getelementptr inbounds i8, i8* %1696, i32 64
  %1824 = bitcast i8* %1823 to <64 x i8>*
  %1825 = load <64 x i8>, <64 x i8>* %1824, align 64, !tbaa !129
  %1826 = zext <64 x i8> %1825 to <64 x i16>
  %1827 = getelementptr inbounds i8, i8* %1702, i32 64
  %1828 = bitcast i8* %1827 to <64 x i8>*
  %1829 = load <64 x i8>, <64 x i8>* %1828, align 64, !tbaa !129
  %1830 = zext <64 x i8> %1829 to <64 x i16>
  %1831 = getelementptr inbounds i8, i8* %1708, i32 64
  %1832 = bitcast i8* %1831 to <64 x i8>*
  %1833 = load <64 x i8>, <64 x i8>* %1832, align 64, !tbaa !129
  %1834 = zext <64 x i8> %1833 to <64 x i16>
  %1835 = getelementptr inbounds i8, i8* %1714, i32 64
  %1836 = bitcast i8* %1835 to <64 x i8>*
  %1837 = load <64 x i8>, <64 x i8>* %1836, align 64, !tbaa !129
  %1838 = zext <64 x i8> %1837 to <64 x i16>
  %1839 = getelementptr inbounds i8, i8* %1720, i32 64
  %1840 = bitcast i8* %1839 to <64 x i8>*
  %1841 = load <64 x i8>, <64 x i8>* %1840, align 64, !tbaa !129
  %1842 = zext <64 x i8> %1841 to <64 x i16>
  %1843 = getelementptr inbounds i8, i8* %1726, i32 64
  %1844 = bitcast i8* %1843 to <64 x i8>*
  %1845 = load <64 x i8>, <64 x i8>* %1844, align 64, !tbaa !129
  %1846 = zext <64 x i8> %1845 to <64 x i16>
  %1847 = bitcast <64 x i16> %1814 to <32 x i32>
  %1848 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1847) #11
  %1849 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1848) #11
  %1850 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1849, <32 x i32> %1316) #11
  %1851 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1850, <32 x i32> %1849, <32 x i32> %1316) #11
  %1852 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1848) #11
  %1853 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1852, <32 x i32> %1320) #11
  %1854 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1853, <32 x i32> %1852, <32 x i32> %1320) #11
  %1855 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1851, <32 x i32> %1854) #11
  %1856 = bitcast <64 x i16> %1818 to <32 x i32>
  %1857 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1856) #11
  %1858 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1857, <32 x i32> %1326) #11
  %1859 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1858) #11
  %1860 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1858) #11
  %1861 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1859, <32 x i32> %1860) #11
  %1862 = bitcast <64 x i16> %1826 to <32 x i32>
  %1863 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1862) #11
  %1864 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1863) #11
  %1865 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1864, <32 x i32> %1335) #11
  %1866 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1865, <32 x i32> %1864, <32 x i32> %1335) #11
  %1867 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1863) #11
  %1868 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1867, <32 x i32> %1339) #11
  %1869 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1868, <32 x i32> %1867, <32 x i32> %1339) #11
  %1870 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1866, <32 x i32> %1869) #11
  %1871 = bitcast <64 x i16> %1830 to <32 x i32>
  %1872 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1871) #11
  %1873 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1872, <32 x i32> %1345) #11
  %1874 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1873) #11
  %1875 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1873) #11
  %1876 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1874, <32 x i32> %1875) #11
  %1877 = bitcast <64 x i16> %1838 to <32 x i32>
  %1878 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1877) #11
  %1879 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1878) #11
  %1880 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1879, <32 x i32> %1354) #11
  %1881 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1880, <32 x i32> %1879, <32 x i32> %1354) #11
  %1882 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1878) #11
  %1883 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1882, <32 x i32> %1358) #11
  %1884 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1883, <32 x i32> %1882, <32 x i32> %1358) #11
  %1885 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1881, <32 x i32> %1884) #11
  %1886 = bitcast <64 x i16> %1842 to <32 x i32>
  %1887 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1886) #11
  %1888 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1887, <32 x i32> %1364) #11
  %1889 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1888) #11
  %1890 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1888) #11
  %1891 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1889, <32 x i32> %1890) #11
  %1892 = bitcast <64 x i16> %1846 to <32 x i32>
  %1893 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1892) #11
  %1894 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1893) #11
  %1895 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1894) #11
  %1896 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1895, <32 x i32> %1370, <32 x i32> %1894) #11
  %1897 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1893) #11
  %1898 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %1897) #11
  %1899 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1898, <32 x i32> %1376, <32 x i32> %1897) #11
  %1900 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1896, <32 x i32> %1899) #11
  %1901 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1900, <64 x i32> %1306) #11
  %1902 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1891, <64 x i32> %1901) #11
  %1903 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1885, <64 x i32> %1902) #11
  %1904 = bitcast <64 x i16> %1834 to <32 x i32>
  %1905 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1904) #11
  %1906 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1905) #11
  %1907 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1385, <32 x i32> %1906) #11
  %1908 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1907, <32 x i32> %1385, <32 x i32> %1906) #11
  %1909 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1905) #11
  %1910 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1391, <32 x i32> %1909) #11
  %1911 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1910, <32 x i32> %1391, <32 x i32> %1909) #11
  %1912 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1908, <32 x i32> %1911) #11
  %1913 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1903, <64 x i32> %1912) #11
  %1914 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1876, <64 x i32> %1913) #11
  %1915 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1870, <64 x i32> %1914) #11
  %1916 = bitcast <64 x i16> %1822 to <32 x i32>
  %1917 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1916) #11
  %1918 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1917) #11
  %1919 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1400, <32 x i32> %1918) #11
  %1920 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1919, <32 x i32> %1400, <32 x i32> %1918) #11
  %1921 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1917) #11
  %1922 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1406, <32 x i32> %1921) #11
  %1923 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1922, <32 x i32> %1406, <32 x i32> %1921) #11
  %1924 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1920, <32 x i32> %1923) #11
  %1925 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1915, <64 x i32> %1924) #11
  %1926 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1861, <64 x i32> %1925) #11
  %1927 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1855, <64 x i32> %1926) #11
  %1928 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1810)
  %1929 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1810)
  %1930 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1927)
  %1931 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1927)
  %1932 = add nsw i32 %1419, %1080
  %1933 = shl nsw i32 %1932, 7
  %1934 = getelementptr inbounds i8, i8* %resampled_input, i32 %1933
  %1935 = bitcast i8* %1934 to <64 x i8>*
  %1936 = load <64 x i8>, <64 x i8>* %1935, align 128, !tbaa !129
  %1937 = zext <64 x i8> %1936 to <64 x i16>
  %1938 = add nsw i32 %1419, %1081
  %1939 = shl nsw i32 %1938, 7
  %1940 = getelementptr inbounds i8, i8* %resampled_input, i32 %1939
  %1941 = bitcast i8* %1940 to <64 x i8>*
  %1942 = load <64 x i8>, <64 x i8>* %1941, align 128, !tbaa !129
  %1943 = zext <64 x i8> %1942 to <64 x i16>
  %1944 = add nsw i32 %1419, %1082
  %1945 = shl nsw i32 %1944, 7
  %1946 = getelementptr inbounds i8, i8* %resampled_input, i32 %1945
  %1947 = bitcast i8* %1946 to <64 x i8>*
  %1948 = load <64 x i8>, <64 x i8>* %1947, align 128, !tbaa !129
  %1949 = zext <64 x i8> %1948 to <64 x i16>
  %1950 = add nsw i32 %1419, %1083
  %1951 = shl nsw i32 %1950, 7
  %1952 = getelementptr inbounds i8, i8* %resampled_input, i32 %1951
  %1953 = bitcast i8* %1952 to <64 x i8>*
  %1954 = load <64 x i8>, <64 x i8>* %1953, align 128, !tbaa !129
  %1955 = zext <64 x i8> %1954 to <64 x i16>
  %1956 = add nsw i32 %1419, %1084
  %1957 = shl nsw i32 %1956, 7
  %1958 = getelementptr inbounds i8, i8* %resampled_input, i32 %1957
  %1959 = bitcast i8* %1958 to <64 x i8>*
  %1960 = load <64 x i8>, <64 x i8>* %1959, align 128, !tbaa !129
  %1961 = zext <64 x i8> %1960 to <64 x i16>
  %1962 = add nsw i32 %1419, %1085
  %1963 = shl nsw i32 %1962, 7
  %1964 = getelementptr inbounds i8, i8* %resampled_input, i32 %1963
  %1965 = bitcast i8* %1964 to <64 x i8>*
  %1966 = load <64 x i8>, <64 x i8>* %1965, align 128, !tbaa !129
  %1967 = zext <64 x i8> %1966 to <64 x i16>
  %1968 = add nsw i32 %1419, %1086
  %1969 = shl nsw i32 %1968, 7
  %1970 = getelementptr inbounds i8, i8* %resampled_input, i32 %1969
  %1971 = bitcast i8* %1970 to <64 x i8>*
  %1972 = load <64 x i8>, <64 x i8>* %1971, align 128, !tbaa !129
  %1973 = zext <64 x i8> %1972 to <64 x i16>
  %1974 = add nsw i32 %1419, %1087
  %1975 = shl nsw i32 %1974, 7
  %1976 = getelementptr inbounds i8, i8* %resampled_input, i32 %1975
  %1977 = bitcast i8* %1976 to <64 x i8>*
  %1978 = load <64 x i8>, <64 x i8>* %1977, align 128, !tbaa !129
  %1979 = zext <64 x i8> %1978 to <64 x i16>
  %1980 = add nsw i32 %1419, %1088
  %1981 = shl nsw i32 %1980, 7
  %1982 = getelementptr inbounds i8, i8* %resampled_input, i32 %1981
  %1983 = bitcast i8* %1982 to <64 x i8>*
  %1984 = load <64 x i8>, <64 x i8>* %1983, align 128, !tbaa !129
  %1985 = zext <64 x i8> %1984 to <64 x i16>
  %1986 = bitcast <64 x i16> %1937 to <32 x i32>
  %1987 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %1986) #11
  %1988 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1987) #11
  %1989 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1988, <32 x i32> %1168) #11
  %1990 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1989, <32 x i32> %1988, <32 x i32> %1168) #11
  %1991 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1987) #11
  %1992 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1991, <32 x i32> %1172) #11
  %1993 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %1992, <32 x i32> %1991, <32 x i32> %1172) #11
  %1994 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1990, <32 x i32> %1993) #11
  %1995 = bitcast <64 x i16> %1943 to <32 x i32>
  %1996 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1995) #11
  %1997 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1996, <32 x i32> %1178) #11
  %1998 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1997) #11
  %1999 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1997) #11
  %2000 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1998, <32 x i32> %1999) #11
  %2001 = bitcast <64 x i16> %1955 to <32 x i32>
  %2002 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2001) #11
  %2003 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2002) #11
  %2004 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2003, <32 x i32> %1187) #11
  %2005 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2004, <32 x i32> %2003, <32 x i32> %1187) #11
  %2006 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2002) #11
  %2007 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2006, <32 x i32> %1191) #11
  %2008 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2007, <32 x i32> %2006, <32 x i32> %1191) #11
  %2009 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2005, <32 x i32> %2008) #11
  %2010 = bitcast <64 x i16> %1961 to <32 x i32>
  %2011 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2010) #11
  %2012 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %2011, <32 x i32> %1197) #11
  %2013 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2012) #11
  %2014 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2012) #11
  %2015 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2013, <32 x i32> %2014) #11
  %2016 = bitcast <64 x i16> %1973 to <32 x i32>
  %2017 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2016) #11
  %2018 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2017) #11
  %2019 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2018, <32 x i32> %1206) #11
  %2020 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2019, <32 x i32> %2018, <32 x i32> %1206) #11
  %2021 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2017) #11
  %2022 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2021, <32 x i32> %1210) #11
  %2023 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2022, <32 x i32> %2021, <32 x i32> %1210) #11
  %2024 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2020, <32 x i32> %2023) #11
  %2025 = bitcast <64 x i16> %1979 to <32 x i32>
  %2026 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2025) #11
  %2027 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %2026, <32 x i32> %1216) #11
  %2028 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2027) #11
  %2029 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2027) #11
  %2030 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2028, <32 x i32> %2029) #11
  %2031 = bitcast <64 x i16> %1985 to <32 x i32>
  %2032 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2031) #11
  %2033 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2032) #11
  %2034 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1222, <32 x i32> %2033) #11
  %2035 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2034, <32 x i32> %1222, <32 x i32> %2033) #11
  %2036 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2032) #11
  %2037 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1228, <32 x i32> %2036) #11
  %2038 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2037, <32 x i32> %1228, <32 x i32> %2036) #11
  %2039 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2035, <32 x i32> %2038) #11
  %2040 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2039, <64 x i32> %1156) #11
  %2041 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2030, <64 x i32> %2040) #11
  %2042 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2024, <64 x i32> %2041) #11
  %2043 = bitcast <64 x i16> %1967 to <32 x i32>
  %2044 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2043) #11
  %2045 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2044) #11
  %2046 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1237, <32 x i32> %2045) #11
  %2047 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2046, <32 x i32> %1237, <32 x i32> %2045) #11
  %2048 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2044) #11
  %2049 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1243, <32 x i32> %2048) #11
  %2050 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2049, <32 x i32> %1243, <32 x i32> %2048) #11
  %2051 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2047, <32 x i32> %2050) #11
  %2052 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2042, <64 x i32> %2051) #11
  %2053 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2015, <64 x i32> %2052) #11
  %2054 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2009, <64 x i32> %2053) #11
  %2055 = bitcast <64 x i16> %1949 to <32 x i32>
  %2056 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2055) #11
  %2057 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2056) #11
  %2058 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1252, <32 x i32> %2057) #11
  %2059 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2058, <32 x i32> %1252, <32 x i32> %2057) #11
  %2060 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2056) #11
  %2061 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1258, <32 x i32> %2060) #11
  %2062 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2061, <32 x i32> %1258, <32 x i32> %2060) #11
  %2063 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2059, <32 x i32> %2062) #11
  %2064 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2054, <64 x i32> %2063) #11
  %2065 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2000, <64 x i32> %2064) #11
  %2066 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1994, <64 x i32> %2065) #11
  %2067 = getelementptr inbounds i8, i8* %1934, i32 64
  %2068 = bitcast i8* %2067 to <64 x i8>*
  %2069 = load <64 x i8>, <64 x i8>* %2068, align 64, !tbaa !129
  %2070 = zext <64 x i8> %2069 to <64 x i16>
  %2071 = getelementptr inbounds i8, i8* %1940, i32 64
  %2072 = bitcast i8* %2071 to <64 x i8>*
  %2073 = load <64 x i8>, <64 x i8>* %2072, align 64, !tbaa !129
  %2074 = zext <64 x i8> %2073 to <64 x i16>
  %2075 = getelementptr inbounds i8, i8* %1946, i32 64
  %2076 = bitcast i8* %2075 to <64 x i8>*
  %2077 = load <64 x i8>, <64 x i8>* %2076, align 64, !tbaa !129
  %2078 = zext <64 x i8> %2077 to <64 x i16>
  %2079 = getelementptr inbounds i8, i8* %1952, i32 64
  %2080 = bitcast i8* %2079 to <64 x i8>*
  %2081 = load <64 x i8>, <64 x i8>* %2080, align 64, !tbaa !129
  %2082 = zext <64 x i8> %2081 to <64 x i16>
  %2083 = getelementptr inbounds i8, i8* %1958, i32 64
  %2084 = bitcast i8* %2083 to <64 x i8>*
  %2085 = load <64 x i8>, <64 x i8>* %2084, align 64, !tbaa !129
  %2086 = zext <64 x i8> %2085 to <64 x i16>
  %2087 = getelementptr inbounds i8, i8* %1964, i32 64
  %2088 = bitcast i8* %2087 to <64 x i8>*
  %2089 = load <64 x i8>, <64 x i8>* %2088, align 64, !tbaa !129
  %2090 = zext <64 x i8> %2089 to <64 x i16>
  %2091 = getelementptr inbounds i8, i8* %1970, i32 64
  %2092 = bitcast i8* %2091 to <64 x i8>*
  %2093 = load <64 x i8>, <64 x i8>* %2092, align 64, !tbaa !129
  %2094 = zext <64 x i8> %2093 to <64 x i16>
  %2095 = getelementptr inbounds i8, i8* %1976, i32 64
  %2096 = bitcast i8* %2095 to <64 x i8>*
  %2097 = load <64 x i8>, <64 x i8>* %2096, align 64, !tbaa !129
  %2098 = zext <64 x i8> %2097 to <64 x i16>
  %2099 = getelementptr inbounds i8, i8* %1982, i32 64
  %2100 = bitcast i8* %2099 to <64 x i8>*
  %2101 = load <64 x i8>, <64 x i8>* %2100, align 64, !tbaa !129
  %2102 = zext <64 x i8> %2101 to <64 x i16>
  %2103 = bitcast <64 x i16> %2070 to <32 x i32>
  %2104 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2103) #11
  %2105 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2104) #11
  %2106 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2105, <32 x i32> %1316) #11
  %2107 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2106, <32 x i32> %2105, <32 x i32> %1316) #11
  %2108 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2104) #11
  %2109 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2108, <32 x i32> %1320) #11
  %2110 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2109, <32 x i32> %2108, <32 x i32> %1320) #11
  %2111 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2107, <32 x i32> %2110) #11
  %2112 = bitcast <64 x i16> %2074 to <32 x i32>
  %2113 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2112) #11
  %2114 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %2113, <32 x i32> %1326) #11
  %2115 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2114) #11
  %2116 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2114) #11
  %2117 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2115, <32 x i32> %2116) #11
  %2118 = bitcast <64 x i16> %2082 to <32 x i32>
  %2119 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2118) #11
  %2120 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2119) #11
  %2121 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2120, <32 x i32> %1335) #11
  %2122 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2121, <32 x i32> %2120, <32 x i32> %1335) #11
  %2123 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2119) #11
  %2124 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2123, <32 x i32> %1339) #11
  %2125 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2124, <32 x i32> %2123, <32 x i32> %1339) #11
  %2126 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2122, <32 x i32> %2125) #11
  %2127 = bitcast <64 x i16> %2086 to <32 x i32>
  %2128 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2127) #11
  %2129 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %2128, <32 x i32> %1345) #11
  %2130 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2129) #11
  %2131 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2129) #11
  %2132 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2130, <32 x i32> %2131) #11
  %2133 = bitcast <64 x i16> %2094 to <32 x i32>
  %2134 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2133) #11
  %2135 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2134) #11
  %2136 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2135, <32 x i32> %1354) #11
  %2137 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2136, <32 x i32> %2135, <32 x i32> %1354) #11
  %2138 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2134) #11
  %2139 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2138, <32 x i32> %1358) #11
  %2140 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2139, <32 x i32> %2138, <32 x i32> %1358) #11
  %2141 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2137, <32 x i32> %2140) #11
  %2142 = bitcast <64 x i16> %2098 to <32 x i32>
  %2143 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2142) #11
  %2144 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %2143, <32 x i32> %1364) #11
  %2145 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2144) #11
  %2146 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2144) #11
  %2147 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2145, <32 x i32> %2146) #11
  %2148 = bitcast <64 x i16> %2102 to <32 x i32>
  %2149 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2148) #11
  %2150 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2149) #11
  %2151 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %2150) #11
  %2152 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2151, <32 x i32> %1370, <32 x i32> %2150) #11
  %2153 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2149) #11
  %2154 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %2153) #11
  %2155 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2154, <32 x i32> %1376, <32 x i32> %2153) #11
  %2156 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2152, <32 x i32> %2155) #11
  %2157 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2156, <64 x i32> %1306) #11
  %2158 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2147, <64 x i32> %2157) #11
  %2159 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2141, <64 x i32> %2158) #11
  %2160 = bitcast <64 x i16> %2090 to <32 x i32>
  %2161 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2160) #11
  %2162 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2161) #11
  %2163 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1385, <32 x i32> %2162) #11
  %2164 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2163, <32 x i32> %1385, <32 x i32> %2162) #11
  %2165 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2161) #11
  %2166 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1391, <32 x i32> %2165) #11
  %2167 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2166, <32 x i32> %1391, <32 x i32> %2165) #11
  %2168 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2164, <32 x i32> %2167) #11
  %2169 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2159, <64 x i32> %2168) #11
  %2170 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2132, <64 x i32> %2169) #11
  %2171 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2126, <64 x i32> %2170) #11
  %2172 = bitcast <64 x i16> %2078 to <32 x i32>
  %2173 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2172) #11
  %2174 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2173) #11
  %2175 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1400, <32 x i32> %2174) #11
  %2176 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2175, <32 x i32> %1400, <32 x i32> %2174) #11
  %2177 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2173) #11
  %2178 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1406, <32 x i32> %2177) #11
  %2179 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2178, <32 x i32> %1406, <32 x i32> %2177) #11
  %2180 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2176, <32 x i32> %2179) #11
  %2181 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2171, <64 x i32> %2180) #11
  %2182 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2117, <64 x i32> %2181) #11
  %2183 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2111, <64 x i32> %2182) #11
  %2184 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2066)
  %2185 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2066)
  %2186 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2183)
  %2187 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2183)
  br label %"consume convolved"

next_bb18:                                        ; preds = %"for output.s0.x.xo"
  %2188 = add nsw i32 %output.s0.x.x.base.s, %19
  br i1 %85, label %"for convolved.s1.r19$y.preheader", label %"next_bb18.consume convolved_crit_edge", !prof !101

"next_bb18.consume convolved_crit_edge":          ; preds = %next_bb18
  %.pre4974 = add nsw i32 %2188, 1
  br label %"consume convolved"

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb18
  %2189 = mul nsw i32 %2188, %stride_x
  %2190 = sub nsw i32 %2189, %t2225
  %2191 = add nsw i32 %2188, 1
  %2192 = mul nsw i32 %2191, %stride_x
  %2193 = sub nsw i32 %2192, %t2225
  br i1 %84, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !101

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %.lcssa4821.us4853 = phi <32 x i32> [ %2374, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1059, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4819.us4851 = phi <32 x i32> [ %2373, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1058, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4817.us4849 = phi <32 x i32> [ %2372, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1057, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4815.us4847 = phi <32 x i32> [ %2371, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4813.us4845 = phi <32 x i32> [ %2338, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1059, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4811.us4843 = phi <32 x i32> [ %2337, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1058, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4809.us4841 = phi <32 x i32> [ %2336, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1057, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4807.us4839 = phi <32 x i32> [ %2335, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4805.us4837 = phi <32 x i32> [ %2301, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1059, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4803.us4835 = phi <32 x i32> [ %2300, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1058, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4801.us4833 = phi <32 x i32> [ %2299, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1057, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4799.us4831 = phi <32 x i32> [ %2298, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4797.us4829 = phi <32 x i32> [ %2265, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1059, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4795.us4827 = phi <32 x i32> [ %2264, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1058, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4793.us4825 = phi <32 x i32> [ %2263, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1057, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4791.us4823 = phi <32 x i32> [ %2262, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %"convolved.s1.r19$y.us" = phi i32 [ %2376, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %2194 = mul nsw i32 %"convolved.s1.r19$y.us", %a128
  %2195 = add nsw i32 %2194, %1069
  %t2303.us = mul nsw i32 %2195, %128
  %2196 = add nsw i32 %2194, %1070
  %t2304.us = mul nsw i32 %2196, %128
  %2197 = mul nsw i32 %"convolved.s1.r19$y.us", %4
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %2198 = phi <32 x i32> [ %2374, %"for convolved.s1.r19$x.us" ], [ %.lcssa4821.us4853, %"for convolved.s1.r19$y.us" ]
  %2199 = phi <32 x i32> [ %2373, %"for convolved.s1.r19$x.us" ], [ %.lcssa4819.us4851, %"for convolved.s1.r19$y.us" ]
  %2200 = phi <32 x i32> [ %2372, %"for convolved.s1.r19$x.us" ], [ %.lcssa4817.us4849, %"for convolved.s1.r19$y.us" ]
  %2201 = phi <32 x i32> [ %2371, %"for convolved.s1.r19$x.us" ], [ %.lcssa4815.us4847, %"for convolved.s1.r19$y.us" ]
  %2202 = phi <32 x i32> [ %2338, %"for convolved.s1.r19$x.us" ], [ %.lcssa4813.us4845, %"for convolved.s1.r19$y.us" ]
  %2203 = phi <32 x i32> [ %2337, %"for convolved.s1.r19$x.us" ], [ %.lcssa4811.us4843, %"for convolved.s1.r19$y.us" ]
  %2204 = phi <32 x i32> [ %2336, %"for convolved.s1.r19$x.us" ], [ %.lcssa4809.us4841, %"for convolved.s1.r19$y.us" ]
  %2205 = phi <32 x i32> [ %2335, %"for convolved.s1.r19$x.us" ], [ %.lcssa4807.us4839, %"for convolved.s1.r19$y.us" ]
  %2206 = phi <32 x i32> [ %2301, %"for convolved.s1.r19$x.us" ], [ %.lcssa4805.us4837, %"for convolved.s1.r19$y.us" ]
  %2207 = phi <32 x i32> [ %2300, %"for convolved.s1.r19$x.us" ], [ %.lcssa4803.us4835, %"for convolved.s1.r19$y.us" ]
  %2208 = phi <32 x i32> [ %2299, %"for convolved.s1.r19$x.us" ], [ %.lcssa4801.us4833, %"for convolved.s1.r19$y.us" ]
  %2209 = phi <32 x i32> [ %2298, %"for convolved.s1.r19$x.us" ], [ %.lcssa4799.us4831, %"for convolved.s1.r19$y.us" ]
  %2210 = phi <32 x i32> [ %2265, %"for convolved.s1.r19$x.us" ], [ %.lcssa4797.us4829, %"for convolved.s1.r19$y.us" ]
  %2211 = phi <32 x i32> [ %2264, %"for convolved.s1.r19$x.us" ], [ %.lcssa4795.us4827, %"for convolved.s1.r19$y.us" ]
  %2212 = phi <32 x i32> [ %2263, %"for convolved.s1.r19$x.us" ], [ %.lcssa4793.us4825, %"for convolved.s1.r19$y.us" ]
  %2213 = phi <32 x i32> [ %2262, %"for convolved.s1.r19$x.us" ], [ %.lcssa4791.us4823, %"for convolved.s1.r19$y.us" ]
  %"convolved.s1.r19$x.us" = phi i32 [ %2375, %"for convolved.s1.r19$x.us" ], [ 0, %"for convolved.s1.r19$y.us" ]
  %2214 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2212, <32 x i32> %2213)
  %2215 = add nsw i32 %"convolved.s1.r19$x.us", %2197
  %2216 = shl nsw i32 %2215, 7
  %2217 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %2216
  %2218 = bitcast i16* %2217 to <32 x i32>*
  %2219 = load <32 x i32>, <32 x i32>* %2218, align 128, !tbaa !105
  %2220 = mul nsw i32 %"convolved.s1.r19$x.us", %a133
  %2221 = add i32 %2220, %t2303.us
  %2222 = add i32 %2221, %2190
  %2223 = shl nsw i32 %2222, 7
  %2224 = getelementptr inbounds i8, i8* %resampled_input, i32 %2223
  %2225 = bitcast i8* %2224 to <64 x i8>*
  %2226 = load <64 x i8>, <64 x i8>* %2225, align 128, !tbaa !129
  %2227 = zext <64 x i8> %2226 to <64 x i16>
  %2228 = bitcast <64 x i16> %2227 to <32 x i32>
  %2229 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2228) #11
  %2230 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2229) #11
  %2231 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2219) #11
  %2232 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2231) #11
  %2233 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2230, <32 x i32> %2232) #11
  %2234 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2233, <32 x i32> %2230, <32 x i32> %2232) #11
  %2235 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2229) #11
  %2236 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2231) #11
  %2237 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2235, <32 x i32> %2236) #11
  %2238 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2237, <32 x i32> %2235, <32 x i32> %2236) #11
  %2239 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2234, <32 x i32> %2238) #11
  %2240 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2214, <64 x i32> %2239) #11
  %2241 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2210, <32 x i32> %2211)
  %2242 = getelementptr inbounds i16, i16* %2217, i32 64
  %2243 = bitcast i16* %2242 to <32 x i32>*
  %2244 = load <32 x i32>, <32 x i32>* %2243, align 128, !tbaa !105
  %2245 = getelementptr inbounds i8, i8* %2224, i32 64
  %2246 = bitcast i8* %2245 to <64 x i8>*
  %2247 = load <64 x i8>, <64 x i8>* %2246, align 64, !tbaa !129
  %2248 = zext <64 x i8> %2247 to <64 x i16>
  %2249 = bitcast <64 x i16> %2248 to <32 x i32>
  %2250 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2249) #11
  %2251 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2250) #11
  %2252 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2244) #11
  %2253 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2252) #11
  %2254 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2251, <32 x i32> %2253) #11
  %2255 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2254, <32 x i32> %2251, <32 x i32> %2253) #11
  %2256 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2250) #11
  %2257 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2252) #11
  %2258 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2256, <32 x i32> %2257) #11
  %2259 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2258, <32 x i32> %2256, <32 x i32> %2257) #11
  %2260 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2255, <32 x i32> %2259) #11
  %2261 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2241, <64 x i32> %2260) #11
  %2262 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2240)
  %2263 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2240)
  %2264 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2261)
  %2265 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2261)
  %2266 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2208, <32 x i32> %2209)
  %2267 = add i32 %2221, %2193
  %2268 = shl nsw i32 %2267, 7
  %2269 = getelementptr inbounds i8, i8* %resampled_input, i32 %2268
  %2270 = bitcast i8* %2269 to <64 x i8>*
  %2271 = load <64 x i8>, <64 x i8>* %2270, align 128, !tbaa !129
  %2272 = zext <64 x i8> %2271 to <64 x i16>
  %2273 = bitcast <64 x i16> %2272 to <32 x i32>
  %2274 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2273) #11
  %2275 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2274) #11
  %2276 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2275, <32 x i32> %2232) #11
  %2277 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2276, <32 x i32> %2275, <32 x i32> %2232) #11
  %2278 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2274) #11
  %2279 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2278, <32 x i32> %2236) #11
  %2280 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2279, <32 x i32> %2278, <32 x i32> %2236) #11
  %2281 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2277, <32 x i32> %2280) #11
  %2282 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2266, <64 x i32> %2281) #11
  %2283 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2206, <32 x i32> %2207)
  %2284 = getelementptr inbounds i8, i8* %2269, i32 64
  %2285 = bitcast i8* %2284 to <64 x i8>*
  %2286 = load <64 x i8>, <64 x i8>* %2285, align 64, !tbaa !129
  %2287 = zext <64 x i8> %2286 to <64 x i16>
  %2288 = bitcast <64 x i16> %2287 to <32 x i32>
  %2289 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2288) #11
  %2290 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2289) #11
  %2291 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2290, <32 x i32> %2253) #11
  %2292 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2291, <32 x i32> %2290, <32 x i32> %2253) #11
  %2293 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2289) #11
  %2294 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2293, <32 x i32> %2257) #11
  %2295 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2294, <32 x i32> %2293, <32 x i32> %2257) #11
  %2296 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2292, <32 x i32> %2295) #11
  %2297 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2283, <64 x i32> %2296) #11
  %2298 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2282)
  %2299 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2282)
  %2300 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2297)
  %2301 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2297)
  %2302 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2204, <32 x i32> %2205)
  %2303 = add i32 %2220, %t2304.us
  %2304 = add i32 %2303, %2190
  %2305 = shl nsw i32 %2304, 7
  %2306 = getelementptr inbounds i8, i8* %resampled_input, i32 %2305
  %2307 = bitcast i8* %2306 to <64 x i8>*
  %2308 = load <64 x i8>, <64 x i8>* %2307, align 128, !tbaa !129
  %2309 = zext <64 x i8> %2308 to <64 x i16>
  %2310 = bitcast <64 x i16> %2309 to <32 x i32>
  %2311 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2310) #11
  %2312 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2311) #11
  %2313 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2312, <32 x i32> %2232) #11
  %2314 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2313, <32 x i32> %2312, <32 x i32> %2232) #11
  %2315 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2311) #11
  %2316 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2315, <32 x i32> %2236) #11
  %2317 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2316, <32 x i32> %2315, <32 x i32> %2236) #11
  %2318 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2314, <32 x i32> %2317) #11
  %2319 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2302, <64 x i32> %2318) #11
  %2320 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2202, <32 x i32> %2203)
  %2321 = getelementptr inbounds i8, i8* %2306, i32 64
  %2322 = bitcast i8* %2321 to <64 x i8>*
  %2323 = load <64 x i8>, <64 x i8>* %2322, align 64, !tbaa !129
  %2324 = zext <64 x i8> %2323 to <64 x i16>
  %2325 = bitcast <64 x i16> %2324 to <32 x i32>
  %2326 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2325) #11
  %2327 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2326) #11
  %2328 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2327, <32 x i32> %2253) #11
  %2329 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2328, <32 x i32> %2327, <32 x i32> %2253) #11
  %2330 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2326) #11
  %2331 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2330, <32 x i32> %2257) #11
  %2332 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2331, <32 x i32> %2330, <32 x i32> %2257) #11
  %2333 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2329, <32 x i32> %2332) #11
  %2334 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2320, <64 x i32> %2333) #11
  %2335 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2319)
  %2336 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2319)
  %2337 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2334)
  %2338 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2334)
  %2339 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2200, <32 x i32> %2201)
  %2340 = add i32 %2303, %2193
  %2341 = shl nsw i32 %2340, 7
  %2342 = getelementptr inbounds i8, i8* %resampled_input, i32 %2341
  %2343 = bitcast i8* %2342 to <64 x i8>*
  %2344 = load <64 x i8>, <64 x i8>* %2343, align 128, !tbaa !129
  %2345 = zext <64 x i8> %2344 to <64 x i16>
  %2346 = bitcast <64 x i16> %2345 to <32 x i32>
  %2347 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2346) #11
  %2348 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2347) #11
  %2349 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2348, <32 x i32> %2232) #11
  %2350 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2349, <32 x i32> %2348, <32 x i32> %2232) #11
  %2351 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2347) #11
  %2352 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2351, <32 x i32> %2236) #11
  %2353 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2352, <32 x i32> %2351, <32 x i32> %2236) #11
  %2354 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2350, <32 x i32> %2353) #11
  %2355 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2339, <64 x i32> %2354) #11
  %2356 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2198, <32 x i32> %2199)
  %2357 = getelementptr inbounds i8, i8* %2342, i32 64
  %2358 = bitcast i8* %2357 to <64 x i8>*
  %2359 = load <64 x i8>, <64 x i8>* %2358, align 64, !tbaa !129
  %2360 = zext <64 x i8> %2359 to <64 x i16>
  %2361 = bitcast <64 x i16> %2360 to <32 x i32>
  %2362 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2361) #11
  %2363 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2362) #11
  %2364 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2363, <32 x i32> %2253) #11
  %2365 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2364, <32 x i32> %2363, <32 x i32> %2253) #11
  %2366 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2362) #11
  %2367 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2366, <32 x i32> %2257) #11
  %2368 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2367, <32 x i32> %2366, <32 x i32> %2257) #11
  %2369 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2365, <32 x i32> %2368) #11
  %2370 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2356, <64 x i32> %2369) #11
  %2371 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2355)
  %2372 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2355)
  %2373 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2370)
  %2374 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2370)
  %2375 = add nuw nsw i32 %"convolved.s1.r19$x.us", 1
  %.not683.us = icmp eq i32 %2375, %4
  br i1 %.not683.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %2376 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not682.us = icmp eq i32 %2376, %6
  br i1 %.not682.us, label %"consume convolved", label %"for convolved.s1.r19$y.us"

"consume convolved":                              ; preds = %"end for convolved.s1.r19$x.loopexit.us", %"for convolved.s1.r19$y.preheader", %"next_bb18.consume convolved_crit_edge", %then_bb17
  %.pre-phi4975 = phi i32 [ %.pre4974, %"next_bb18.consume convolved_crit_edge" ], [ %1418, %then_bb17 ], [ %2191, %"for convolved.s1.r19$y.preheader" ], [ %2191, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.pre-phi4973 = phi i32 [ %2188, %"next_bb18.consume convolved_crit_edge" ], [ %1099, %then_bb17 ], [ %2188, %"for convolved.s1.r19$y.preheader" ], [ %2188, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4821.us.lcssa4900 = phi <32 x i32> [ %1059, %"next_bb18.consume convolved_crit_edge" ], [ %2187, %then_bb17 ], [ %1059, %"for convolved.s1.r19$y.preheader" ], [ %2374, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4819.us.lcssa4897 = phi <32 x i32> [ %1058, %"next_bb18.consume convolved_crit_edge" ], [ %2186, %then_bb17 ], [ %1058, %"for convolved.s1.r19$y.preheader" ], [ %2373, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4817.us.lcssa4894 = phi <32 x i32> [ %1057, %"next_bb18.consume convolved_crit_edge" ], [ %2185, %then_bb17 ], [ %1057, %"for convolved.s1.r19$y.preheader" ], [ %2372, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4815.us.lcssa4891 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %2184, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %2371, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4813.us.lcssa4888 = phi <32 x i32> [ %1059, %"next_bb18.consume convolved_crit_edge" ], [ %1931, %then_bb17 ], [ %1059, %"for convolved.s1.r19$y.preheader" ], [ %2338, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4811.us.lcssa4885 = phi <32 x i32> [ %1058, %"next_bb18.consume convolved_crit_edge" ], [ %1930, %then_bb17 ], [ %1058, %"for convolved.s1.r19$y.preheader" ], [ %2337, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4809.us.lcssa4882 = phi <32 x i32> [ %1057, %"next_bb18.consume convolved_crit_edge" ], [ %1929, %then_bb17 ], [ %1057, %"for convolved.s1.r19$y.preheader" ], [ %2336, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4807.us.lcssa4879 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %1928, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %2335, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4805.us.lcssa4876 = phi <32 x i32> [ %1059, %"next_bb18.consume convolved_crit_edge" ], [ %1675, %then_bb17 ], [ %1059, %"for convolved.s1.r19$y.preheader" ], [ %2301, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4803.us.lcssa4873 = phi <32 x i32> [ %1058, %"next_bb18.consume convolved_crit_edge" ], [ %1674, %then_bb17 ], [ %1058, %"for convolved.s1.r19$y.preheader" ], [ %2300, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4801.us.lcssa4870 = phi <32 x i32> [ %1057, %"next_bb18.consume convolved_crit_edge" ], [ %1673, %then_bb17 ], [ %1057, %"for convolved.s1.r19$y.preheader" ], [ %2299, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4799.us.lcssa4867 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %1672, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %2298, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4797.us.lcssa4864 = phi <32 x i32> [ %1059, %"next_bb18.consume convolved_crit_edge" ], [ %1417, %then_bb17 ], [ %1059, %"for convolved.s1.r19$y.preheader" ], [ %2265, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4795.us.lcssa4861 = phi <32 x i32> [ %1058, %"next_bb18.consume convolved_crit_edge" ], [ %1416, %then_bb17 ], [ %1058, %"for convolved.s1.r19$y.preheader" ], [ %2264, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4793.us.lcssa4858 = phi <32 x i32> [ %1057, %"next_bb18.consume convolved_crit_edge" ], [ %1415, %then_bb17 ], [ %1057, %"for convolved.s1.r19$y.preheader" ], [ %2263, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4791.us.lcssa4855 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %1414, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %2262, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2377 = sext <32 x i32> %.lcssa4791.us.lcssa4855 to <32 x i64>
  %a35 = mul nsw <32 x i64> %2377, %183
  %2378 = icmp slt <32 x i64> %a35, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2379 = select <32 x i1> %2378, <32 x i64> %a35, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2380 = add nsw <32 x i64> %2379, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a34 = ashr <32 x i64> %2380, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2381 = icmp slt <32 x i64> %a34, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a33 = select <32 x i1> %2381, <32 x i64> %a34, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2382 = icmp sgt <32 x i64> %a33, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2383 = select <32 x i1> %2382, <32 x i64> %a33, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2384 = trunc <32 x i64> %2383 to <32 x i32>
  %2385 = sext <32 x i32> %.lcssa4793.us.lcssa4858 to <32 x i64>
  %a38 = mul nsw <32 x i64> %2385, %183
  %2386 = icmp slt <32 x i64> %a38, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2387 = select <32 x i1> %2386, <32 x i64> %a38, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2388 = add nsw <32 x i64> %2387, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a37 = ashr <32 x i64> %2388, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2389 = icmp slt <32 x i64> %a37, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a36 = select <32 x i1> %2389, <32 x i64> %a37, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2390 = icmp sgt <32 x i64> %a36, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2391 = select <32 x i1> %2390, <32 x i64> %a36, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2392 = trunc <32 x i64> %2391 to <32 x i32>
  %2393 = sext <32 x i32> %.lcssa4795.us.lcssa4861 to <32 x i64>
  %a41 = mul nsw <32 x i64> %2393, %183
  %2394 = icmp slt <32 x i64> %a41, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2395 = select <32 x i1> %2394, <32 x i64> %a41, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2396 = add nsw <32 x i64> %2395, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a40 = ashr <32 x i64> %2396, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2397 = icmp slt <32 x i64> %a40, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a39 = select <32 x i1> %2397, <32 x i64> %a40, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2398 = icmp sgt <32 x i64> %a39, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2399 = select <32 x i1> %2398, <32 x i64> %a39, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2400 = trunc <32 x i64> %2399 to <32 x i32>
  %2401 = sext <32 x i32> %.lcssa4797.us.lcssa4864 to <32 x i64>
  %a44 = mul nsw <32 x i64> %2401, %183
  %2402 = icmp slt <32 x i64> %a44, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2403 = select <32 x i1> %2402, <32 x i64> %a44, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2404 = add nsw <32 x i64> %2403, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a43 = ashr <32 x i64> %2404, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2405 = icmp slt <32 x i64> %a43, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a42 = select <32 x i1> %2405, <32 x i64> %a43, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2406 = icmp sgt <32 x i64> %a42, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2407 = select <32 x i1> %2406, <32 x i64> %a42, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2408 = trunc <32 x i64> %2407 to <32 x i32>
  %2409 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2384, <32 x i32> %1090) #11
  %2410 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2409, <32 x i32> %1089) #11
  %2411 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2410) #11
  %2412 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2392, <32 x i32> %1090) #11
  %2413 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2412, <32 x i32> %1089) #11
  %2414 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2413, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2415 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2411, <32 x i32> %2414) #11
  %2416 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2415) #11
  %2417 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2416, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2418 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2415) #11
  %2419 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2418) #11
  %2420 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2417, <32 x i32> %2419) #11
  %2421 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2420) #11
  %2422 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2420) #11
  %2423 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2421, <32 x i32> %2422) #11
  %2424 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2400, <32 x i32> %1090) #11
  %2425 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2424, <32 x i32> %1089) #11
  %2426 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2425) #11
  %2427 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2408, <32 x i32> %1090) #11
  %2428 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2427, <32 x i32> %1089) #11
  %2429 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2428, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2430 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2426, <32 x i32> %2429) #11
  %2431 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2430) #11
  %2432 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2431, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2433 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2430) #11
  %2434 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2433) #11
  %2435 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2432, <32 x i32> %2434) #11
  %2436 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2435) #11
  %2437 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2435) #11
  %2438 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2436, <32 x i32> %2437) #11
  %2439 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2423, <32 x i32> %2438) #11
  %2440 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %193, <64 x i32> %2439) #11
  %2441 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2440) #11
  %2442 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2441, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2443 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2442, <32 x i32> zeroinitializer) #11
  %2444 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2440) #11
  %2445 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2444, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2446 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2445, <32 x i32> zeroinitializer) #11
  %2447 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2443, <32 x i32> %2446) #11
  %2448 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2447) #11
  %2449 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2447) #11
  %2450 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %2448, <32 x i32> %2449) #11
  %2451 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2450, <32 x i32> %194) #11
  %2452 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %195, <32 x i32> %2451) #11
  %2453 = mul nsw i32 %.pre-phi4973, %21
  %2454 = add nsw i32 %2453, %1092
  %2455 = getelementptr inbounds i8, i8* %17, i32 %2454
  %2456 = bitcast i8* %2455 to <32 x i32>*
  store <32 x i32> %2452, <32 x i32>* %2456, align 1, !tbaa !199
  %2457 = sext <32 x i32> %.lcssa4799.us.lcssa4867 to <32 x i64>
  %a47 = mul nsw <32 x i64> %2457, %183
  %2458 = icmp slt <32 x i64> %a47, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2459 = select <32 x i1> %2458, <32 x i64> %a47, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2460 = add nsw <32 x i64> %2459, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a46 = ashr <32 x i64> %2460, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2461 = icmp slt <32 x i64> %a46, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a45 = select <32 x i1> %2461, <32 x i64> %a46, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2462 = icmp sgt <32 x i64> %a45, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2463 = select <32 x i1> %2462, <32 x i64> %a45, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2464 = trunc <32 x i64> %2463 to <32 x i32>
  %2465 = sext <32 x i32> %.lcssa4801.us.lcssa4870 to <32 x i64>
  %a50 = mul nsw <32 x i64> %2465, %183
  %2466 = icmp slt <32 x i64> %a50, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2467 = select <32 x i1> %2466, <32 x i64> %a50, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2468 = add nsw <32 x i64> %2467, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a49 = ashr <32 x i64> %2468, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2469 = icmp slt <32 x i64> %a49, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a48 = select <32 x i1> %2469, <32 x i64> %a49, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2470 = icmp sgt <32 x i64> %a48, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2471 = select <32 x i1> %2470, <32 x i64> %a48, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2472 = trunc <32 x i64> %2471 to <32 x i32>
  %2473 = sext <32 x i32> %.lcssa4803.us.lcssa4873 to <32 x i64>
  %a53 = mul nsw <32 x i64> %2473, %183
  %2474 = icmp slt <32 x i64> %a53, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2475 = select <32 x i1> %2474, <32 x i64> %a53, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2476 = add nsw <32 x i64> %2475, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a52 = ashr <32 x i64> %2476, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2477 = icmp slt <32 x i64> %a52, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a51 = select <32 x i1> %2477, <32 x i64> %a52, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2478 = icmp sgt <32 x i64> %a51, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2479 = select <32 x i1> %2478, <32 x i64> %a51, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2480 = trunc <32 x i64> %2479 to <32 x i32>
  %2481 = sext <32 x i32> %.lcssa4805.us.lcssa4876 to <32 x i64>
  %a56 = mul nsw <32 x i64> %2481, %183
  %2482 = icmp slt <32 x i64> %a56, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2483 = select <32 x i1> %2482, <32 x i64> %a56, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2484 = add nsw <32 x i64> %2483, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a55 = ashr <32 x i64> %2484, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2485 = icmp slt <32 x i64> %a55, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a54 = select <32 x i1> %2485, <32 x i64> %a55, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2486 = icmp sgt <32 x i64> %a54, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2487 = select <32 x i1> %2486, <32 x i64> %a54, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2488 = trunc <32 x i64> %2487 to <32 x i32>
  %2489 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2464, <32 x i32> %1090) #11
  %2490 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2489, <32 x i32> %1089) #11
  %2491 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2490) #11
  %2492 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2472, <32 x i32> %1090) #11
  %2493 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2492, <32 x i32> %1089) #11
  %2494 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2493, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2495 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2491, <32 x i32> %2494) #11
  %2496 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2495) #11
  %2497 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2496, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2498 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2495) #11
  %2499 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2498) #11
  %2500 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2497, <32 x i32> %2499) #11
  %2501 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2500) #11
  %2502 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2500) #11
  %2503 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2501, <32 x i32> %2502) #11
  %2504 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2480, <32 x i32> %1090) #11
  %2505 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2504, <32 x i32> %1089) #11
  %2506 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2505) #11
  %2507 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2488, <32 x i32> %1090) #11
  %2508 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2507, <32 x i32> %1089) #11
  %2509 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2508, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2510 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2506, <32 x i32> %2509) #11
  %2511 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2510) #11
  %2512 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2511, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2513 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2510) #11
  %2514 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2513) #11
  %2515 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2512, <32 x i32> %2514) #11
  %2516 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2515) #11
  %2517 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2515) #11
  %2518 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2516, <32 x i32> %2517) #11
  %2519 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2503, <32 x i32> %2518) #11
  %2520 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %193, <64 x i32> %2519) #11
  %2521 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2520) #11
  %2522 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2521, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2523 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2522, <32 x i32> zeroinitializer) #11
  %2524 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2520) #11
  %2525 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2524, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2526 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2525, <32 x i32> zeroinitializer) #11
  %2527 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2523, <32 x i32> %2526) #11
  %2528 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2527) #11
  %2529 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2527) #11
  %2530 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %2528, <32 x i32> %2529) #11
  %2531 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2530, <32 x i32> %194) #11
  %2532 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %195, <32 x i32> %2531) #11
  %2533 = mul nsw i32 %.pre-phi4975, %21
  %2534 = add nsw i32 %2533, %1092
  %2535 = getelementptr inbounds i8, i8* %17, i32 %2534
  %2536 = bitcast i8* %2535 to <32 x i32>*
  store <32 x i32> %2532, <32 x i32>* %2536, align 1, !tbaa !199
  %2537 = sext <32 x i32> %.lcssa4807.us.lcssa4879 to <32 x i64>
  %a59 = mul nsw <32 x i64> %2537, %183
  %2538 = icmp slt <32 x i64> %a59, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2539 = select <32 x i1> %2538, <32 x i64> %a59, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2540 = add nsw <32 x i64> %2539, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a58 = ashr <32 x i64> %2540, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2541 = icmp slt <32 x i64> %a58, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a57 = select <32 x i1> %2541, <32 x i64> %a58, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2542 = icmp sgt <32 x i64> %a57, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2543 = select <32 x i1> %2542, <32 x i64> %a57, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2544 = trunc <32 x i64> %2543 to <32 x i32>
  %2545 = sext <32 x i32> %.lcssa4809.us.lcssa4882 to <32 x i64>
  %a62 = mul nsw <32 x i64> %2545, %183
  %2546 = icmp slt <32 x i64> %a62, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2547 = select <32 x i1> %2546, <32 x i64> %a62, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2548 = add nsw <32 x i64> %2547, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a61 = ashr <32 x i64> %2548, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2549 = icmp slt <32 x i64> %a61, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a60 = select <32 x i1> %2549, <32 x i64> %a61, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2550 = icmp sgt <32 x i64> %a60, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2551 = select <32 x i1> %2550, <32 x i64> %a60, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2552 = trunc <32 x i64> %2551 to <32 x i32>
  %2553 = sext <32 x i32> %.lcssa4811.us.lcssa4885 to <32 x i64>
  %a65 = mul nsw <32 x i64> %2553, %183
  %2554 = icmp slt <32 x i64> %a65, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2555 = select <32 x i1> %2554, <32 x i64> %a65, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2556 = add nsw <32 x i64> %2555, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a64 = ashr <32 x i64> %2556, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2557 = icmp slt <32 x i64> %a64, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a63 = select <32 x i1> %2557, <32 x i64> %a64, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2558 = icmp sgt <32 x i64> %a63, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2559 = select <32 x i1> %2558, <32 x i64> %a63, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2560 = trunc <32 x i64> %2559 to <32 x i32>
  %2561 = sext <32 x i32> %.lcssa4813.us.lcssa4888 to <32 x i64>
  %a68 = mul nsw <32 x i64> %2561, %183
  %2562 = icmp slt <32 x i64> %a68, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2563 = select <32 x i1> %2562, <32 x i64> %a68, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2564 = add nsw <32 x i64> %2563, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a67 = ashr <32 x i64> %2564, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2565 = icmp slt <32 x i64> %a67, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a66 = select <32 x i1> %2565, <32 x i64> %a67, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2566 = icmp sgt <32 x i64> %a66, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2567 = select <32 x i1> %2566, <32 x i64> %a66, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2568 = trunc <32 x i64> %2567 to <32 x i32>
  %2569 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2544, <32 x i32> %1090) #11
  %2570 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2569, <32 x i32> %1089) #11
  %2571 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2570) #11
  %2572 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2552, <32 x i32> %1090) #11
  %2573 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2572, <32 x i32> %1089) #11
  %2574 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2573, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2575 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2571, <32 x i32> %2574) #11
  %2576 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2575) #11
  %2577 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2576, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2578 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2575) #11
  %2579 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2578) #11
  %2580 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2577, <32 x i32> %2579) #11
  %2581 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2580) #11
  %2582 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2580) #11
  %2583 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2581, <32 x i32> %2582) #11
  %2584 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2560, <32 x i32> %1090) #11
  %2585 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2584, <32 x i32> %1089) #11
  %2586 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2585) #11
  %2587 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2568, <32 x i32> %1090) #11
  %2588 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2587, <32 x i32> %1089) #11
  %2589 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2588, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2590 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2586, <32 x i32> %2589) #11
  %2591 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2590) #11
  %2592 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2591, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2593 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2590) #11
  %2594 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2593) #11
  %2595 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2592, <32 x i32> %2594) #11
  %2596 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2595) #11
  %2597 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2595) #11
  %2598 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2596, <32 x i32> %2597) #11
  %2599 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2583, <32 x i32> %2598) #11
  %2600 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %193, <64 x i32> %2599) #11
  %2601 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2600) #11
  %2602 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2601, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2603 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2602, <32 x i32> zeroinitializer) #11
  %2604 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2600) #11
  %2605 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2604, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2606 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2605, <32 x i32> zeroinitializer) #11
  %2607 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2603, <32 x i32> %2606) #11
  %2608 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2607) #11
  %2609 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2607) #11
  %2610 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %2608, <32 x i32> %2609) #11
  %2611 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2610, <32 x i32> %194) #11
  %2612 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %195, <32 x i32> %2611) #11
  %2613 = add nsw i32 %2453, %1094
  %2614 = getelementptr inbounds i8, i8* %17, i32 %2613
  %2615 = bitcast i8* %2614 to <32 x i32>*
  store <32 x i32> %2612, <32 x i32>* %2615, align 1, !tbaa !199
  %2616 = sext <32 x i32> %.lcssa4815.us.lcssa4891 to <32 x i64>
  %a71 = mul nsw <32 x i64> %2616, %183
  %2617 = icmp slt <32 x i64> %a71, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2618 = select <32 x i1> %2617, <32 x i64> %a71, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2619 = add nsw <32 x i64> %2618, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a70 = ashr <32 x i64> %2619, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2620 = icmp slt <32 x i64> %a70, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a69 = select <32 x i1> %2620, <32 x i64> %a70, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2621 = icmp sgt <32 x i64> %a69, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2622 = select <32 x i1> %2621, <32 x i64> %a69, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2623 = trunc <32 x i64> %2622 to <32 x i32>
  %2624 = sext <32 x i32> %.lcssa4817.us.lcssa4894 to <32 x i64>
  %a74 = mul nsw <32 x i64> %2624, %183
  %2625 = icmp slt <32 x i64> %a74, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2626 = select <32 x i1> %2625, <32 x i64> %a74, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2627 = add nsw <32 x i64> %2626, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a73 = ashr <32 x i64> %2627, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2628 = icmp slt <32 x i64> %a73, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a72 = select <32 x i1> %2628, <32 x i64> %a73, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2629 = icmp sgt <32 x i64> %a72, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2630 = select <32 x i1> %2629, <32 x i64> %a72, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2631 = trunc <32 x i64> %2630 to <32 x i32>
  %2632 = sext <32 x i32> %.lcssa4819.us.lcssa4897 to <32 x i64>
  %a77 = mul nsw <32 x i64> %2632, %183
  %2633 = icmp slt <32 x i64> %a77, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2634 = select <32 x i1> %2633, <32 x i64> %a77, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2635 = add nsw <32 x i64> %2634, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a76 = ashr <32 x i64> %2635, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2636 = icmp slt <32 x i64> %a76, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a75 = select <32 x i1> %2636, <32 x i64> %a76, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2637 = icmp sgt <32 x i64> %a75, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2638 = select <32 x i1> %2637, <32 x i64> %a75, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2639 = trunc <32 x i64> %2638 to <32 x i32>
  %2640 = sext <32 x i32> %.lcssa4821.us.lcssa4900 to <32 x i64>
  %a80 = mul nsw <32 x i64> %2640, %183
  %2641 = icmp slt <32 x i64> %a80, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2642 = select <32 x i1> %2641, <32 x i64> %a80, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2643 = add nsw <32 x i64> %2642, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a79 = ashr <32 x i64> %2643, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2644 = icmp slt <32 x i64> %a79, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a78 = select <32 x i1> %2644, <32 x i64> %a79, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2645 = icmp sgt <32 x i64> %a78, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2646 = select <32 x i1> %2645, <32 x i64> %a78, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2647 = trunc <32 x i64> %2646 to <32 x i32>
  %2648 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2623, <32 x i32> %1090) #11
  %2649 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2648, <32 x i32> %1089) #11
  %2650 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2649) #11
  %2651 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2631, <32 x i32> %1090) #11
  %2652 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2651, <32 x i32> %1089) #11
  %2653 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2652, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2654 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2650, <32 x i32> %2653) #11
  %2655 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2654) #11
  %2656 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2655, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2657 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2654) #11
  %2658 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2657) #11
  %2659 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2656, <32 x i32> %2658) #11
  %2660 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2659) #11
  %2661 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2659) #11
  %2662 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2660, <32 x i32> %2661) #11
  %2663 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2639, <32 x i32> %1090) #11
  %2664 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2663, <32 x i32> %1089) #11
  %2665 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2664) #11
  %2666 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2647, <32 x i32> %1090) #11
  %2667 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2666, <32 x i32> %1089) #11
  %2668 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2667, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2669 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2665, <32 x i32> %2668) #11
  %2670 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2669) #11
  %2671 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2670, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2672 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2669) #11
  %2673 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2672) #11
  %2674 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2671, <32 x i32> %2673) #11
  %2675 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2674) #11
  %2676 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2674) #11
  %2677 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %2675, <32 x i32> %2676) #11
  %2678 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2662, <32 x i32> %2677) #11
  %2679 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %193, <64 x i32> %2678) #11
  %2680 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2679) #11
  %2681 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2680, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2682 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2681, <32 x i32> zeroinitializer) #11
  %2683 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2679) #11
  %2684 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2683, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2685 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2684, <32 x i32> zeroinitializer) #11
  %2686 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2682, <32 x i32> %2685) #11
  %2687 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2686) #11
  %2688 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2686) #11
  %2689 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %2687, <32 x i32> %2688) #11
  %2690 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2689, <32 x i32> %194) #11
  %2691 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %195, <32 x i32> %2690) #11
  %2692 = add nsw i32 %2533, %1094
  %2693 = getelementptr inbounds i8, i8* %17, i32 %2692
  %2694 = bitcast i8* %2693 to <32 x i32>*
  store <32 x i32> %2691, <32 x i32>* %2694, align 1, !tbaa !199
  %2695 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not681 = icmp eq i32 %2695, %146
  br i1 %.not681, label %"end for output.s0.x.xo.loopexit", label %"for output.s0.x.xo"

then_bb19:                                        ; preds = %next_bb
  %t2330 = icmp slt i32 %a133, 0
  %t2332 = icmp slt i32 %stride_x, 0
  %2696 = add nsw i32 %4, -1
  %2697 = mul nsw i32 %2696, %a133
  %t2333 = select i1 %t2330, i32 %2697, i32 0
  %t2334.s = select i1 %t2332, i32 %20, i32 1
  %t2335 = icmp slt i32 %a128, 0
  %t2337 = icmp slt i32 %stride_y, 0
  %2698 = add nsw i32 %6, -1
  %2699 = mul nsw i32 %2698, %a128
  %t2338 = select i1 %t2335, i32 %2699, i32 0
  %t2339.s = select i1 %t2337, i32 %23, i32 1
  %2700 = icmp eq i32 %4, 3
  %2701 = icmp eq i32 %6, 3
  %t2340 = and i1 %2700, %2701
  %t2325 = icmp eq i32 %depth_multiplier, 1
  %a128.op656 = shl i32 %a128, 1
  %2702 = select i1 %t2335, i32 %a128.op656, i32 0
  %2703 = select i1 %t2340, i32 %2702, i32 %t2338
  %2704 = add i32 %22, -1
  %2705 = add i32 %2704, %t2339.s
  %2706 = mul nsw i32 %2705, %stride_y
  %b93 = add nsw i32 %2706, %2703
  %a133.op657 = shl i32 %a133, 1
  %2707 = select i1 %t2330, i32 %a133.op657, i32 0
  %2708 = select i1 %t2340, i32 %2707, i32 %t2333
  %2709 = add i32 %19, -1
  %2710 = add i32 %2709, %t2334.s
  %2711 = mul nsw i32 %2710, %stride_x
  %b92 = add nsw i32 %2711, %2708
  %2712 = select i1 %t2335, i32 0, i32 %2699
  %2713 = add nsw i32 %23, -1
  %2714 = select i1 %t2337, i32 0, i32 %2713
  %2715 = add nsw i32 %2714, %22
  %2716 = mul nsw i32 %2715, %stride_y
  %b98 = add nsw i32 %2716, %2712
  %2717 = select i1 %t2330, i32 0, i32 %2697
  %2718 = add nsw i32 %20, -1
  %2719 = select i1 %t2332, i32 0, i32 %2718
  %2720 = add nsw i32 %2719, %19
  %2721 = mul nsw i32 %2720, %stride_x
  %b94 = add nsw i32 %2721, %2717
  %2722 = mul nsw i32 %13, %12
  %2723 = mul nsw i32 %16, %14
  %2724 = mul nsw i32 %11, %10
  %2725 = add i32 %2722, %2724
  %t2326 = add i32 %2725, %2723
  %2726 = add nuw nsw i32 %3, 127
  %2727 = ashr i32 %2726, 7
  %b87 = add nsw i32 %3, -128
  %2728 = icmp sgt i32 %4, 0
  %2729 = icmp sgt i32 %6, 0
  %2730 = select i1 %2729, i32 %6, i32 0
  %.op4902 = shl i32 %4, 8
  %2731 = select i1 %2728, i32 %.op4902, i32 0
  %2732 = mul i32 %2731, %2730
  %2733 = or i32 %2732, 134
  %2734 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %2735 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %2736 = shufflevector <64 x i8> %2735, <64 x i8> undef, <64 x i32> zeroinitializer
  %2737 = zext <64 x i8> %2736 to <64 x i16>
  %2738 = bitcast <64 x i16> %2737 to <32 x i32>
  %2739 = bitcast [512 x i32]* %offset_c639 to <32 x i32>*
  %2740 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 32
  %2741 = bitcast i32* %2740 to <32 x i32>*
  %2742 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 64
  %2743 = bitcast i32* %2742 to <32 x i32>*
  %2744 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 96
  %2745 = bitcast i32* %2744 to <32 x i32>*
  %2746 = bitcast i8* %0 to i32*
  %2747 = zext i8 %input_zero to i32
  %a90 = add nsw i32 %2711, %t2333
  %2748 = icmp slt i32 %t2333, %2708
  %t2348 = select i1 %2748, i32 %a90, i32 %b92
  %a91 = add nsw i32 %2706, %t2338
  %2749 = icmp slt i32 %t2338, %2703
  %t2346 = select i1 %2749, i32 %a91, i32 %b93
  %2750 = icmp sgt i32 %a133, 0
  %2751 = select i1 %2750, i32 %a133, i32 0
  %2752 = shl nuw nsw i32 %2751, 1
  %2753 = select i1 %t2340, i32 %2752, i32 %2717
  %a92 = add nsw i32 %2721, %2753
  %2754 = icmp sgt i32 %2753, %2717
  %2755 = select i1 %2754, i32 %a92, i32 %b94
  %a102 = sub nsw i32 %2755, %t2348
  %2756 = icmp sgt i32 %a128, 0
  %2757 = select i1 %2756, i32 %a128, i32 0
  %2758 = shl nuw nsw i32 %2757, 1
  %2759 = select i1 %t2340, i32 %2758, i32 %2712
  %a96 = add nsw i32 %2716, %2759
  %2760 = icmp sgt i32 %2759, %2712
  %2761 = select i1 %2760, i32 %a96, i32 %b98
  %a103 = sub nsw i32 %2761, %t2346
  %t2351 = sub nsw i32 %b94, %a90
  %t2350 = sub nsw i32 %b98, %a91
  %2762 = icmp sgt i32 %15, 0
  %2763 = icmp sgt i32 %a102, -1
  %t2540 = select i1 %2763, i32 %a102, i32 -1
  %2764 = icmp sgt i32 %a103, -1
  %t2541 = select i1 %2764, i32 %a103, i32 -1
  %2765 = add nsw i32 %t2541, 1
  %2766 = shl i32 %t2540, 7
  %t2542 = add i32 %2766, 128
  %2767 = mul i32 %t2542, %2765
  %2768 = add i32 %2767, 131
  %2769 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %2770 = icmp sgt i32 %t2350, -1
  %2771 = sub i32 %a91, %t2346
  %2772 = add nsw i32 %a102, 1
  %2773 = sub i32 %a90, %t2348
  %2774 = icmp sgt i32 %t2351, -1
  %2775 = icmp eq i32 %depth_multiplier, 0
  %t2545 = select i1 %2775, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %2776 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %2777 = shufflevector <128 x i32> %2776, <128 x i32> undef, <128 x i32> zeroinitializer
  %2778 = sub nsw <128 x i32> %2777, %t2545
  %2779 = xor i32 %depth_multiplier.lobit, -1
  %2780 = sub nsw i32 %2779, %depth_multiplier.lobit
  %2781 = insertelement <128 x i32> undef, i32 %2780, i32 0
  %2782 = shufflevector <128 x i32> %2781, <128 x i32> undef, <128 x i32> zeroinitializer
  %2783 = xor <128 x i32> %t2545, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg4702 = mul i32 %24, %22
  %.neg4703 = mul i32 %21, %19
  %.neg4704 = mul i32 %25, %14
  %2784 = icmp sgt i32 %23, 0
  %2785 = sub i32 %a128.op656, %t2346
  %2786 = sub i32 %a128, %t2346
  %2787 = icmp sgt i32 %20, 0
  %2788 = bitcast [128 x i32]* %sum_filter641 to <32 x i32>*
  %2789 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 32
  %2790 = bitcast i32* %2789 to <32 x i32>*
  %2791 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 64
  %2792 = bitcast i32* %2791 to <32 x i32>*
  %2793 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 96
  %2794 = bitcast i32* %2793 to <32 x i32>*
  %2795 = sub nsw i32 %a133.op657, %t2348
  %2796 = sub nsw i32 %a133, %t2348
  %2797 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %2798 = shufflevector <32 x i32> %2797, <32 x i32> undef, <32 x i32> zeroinitializer
  %2799 = sext <32 x i32> %2798 to <32 x i64>
  %2800 = shl nuw i32 1, %output_shift
  %2801 = ashr i32 %2800, 1
  %2802 = zext i8 %output_zero to i16
  %2803 = insertelement <128 x i16> undef, i16 %2802, i32 0
  %2804 = shufflevector <128 x i16> %2803, <128 x i16> undef, <128 x i32> zeroinitializer
  %2805 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %2806 = shufflevector <128 x i8> %2805, <128 x i8> undef, <128 x i32> zeroinitializer
  %2807 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %2808 = shufflevector <128 x i8> %2807, <128 x i8> undef, <128 x i32> zeroinitializer
  %2809 = bitcast <128 x i16> %2804 to <64 x i32>
  %2810 = bitcast <128 x i8> %2806 to <32 x i32>
  %2811 = bitcast <128 x i8> %2808 to <32 x i32>
  %reass.add4706 = add i32 %.neg4702, %.neg4703
  %reass.add4707 = add i32 %reass.add4706, %.neg4704
  %2812 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %2813 = bitcast [512 x i32]* %offset_c639 to i8*
  %2814 = bitcast [512 x i32]* %offset_c639 to i8*
  %2815 = bitcast [512 x i32]* %offset_c639 to i8*
  %.fca.1.gep.promoted = load i32, i32* %.fca.1.gep, align 4, !tbaa !95
  %.fca.2.gep.promoted = load i32, i32* %.fca.2.gep, align 4
  %2816 = add i32 %4, -1
  %xtraiter5133 = and i32 %4, 3
  %2817 = icmp ult i32 %2816, 3
  %unroll_iter5136 = and i32 %4, -4
  %lcmp.mod5135.not = icmp eq i32 %xtraiter5133, 0
  %xtraiter5138 = and i32 %4, 3
  %2818 = icmp ult i32 %2816, 3
  %unroll_iter5148 = and i32 %4, -4
  %lcmp.mod5143.not = icmp eq i32 %xtraiter5138, 0
  %2819 = or i32 %t2350, %t2351
  %2820 = icmp slt i32 %2819, 0
  %xtraiter5150 = and i32 %4, 1
  %2821 = icmp eq i32 %2816, 0
  %unroll_iter5156 = and i32 %4, -2
  %lcmp.mod5155.not = icmp eq i32 %xtraiter5150, 0
  br label %"for output.s0.c.co21"

next_bb20:                                        ; preds = %next_bb
  %2822 = icmp sgt i32 %3, 0
  br i1 %2822, label %if.end.i830, label %call_destructor.exit762

"for output.s0.c.co21":                           ; preds = %then_bb19, %"end for output.s0.b.rebased49"
  %2823 = phi i32 [ %.fca.2.gep.promoted, %then_bb19 ], [ %2827, %"end for output.s0.b.rebased49" ]
  %2824 = phi i32 [ %.fca.1.gep.promoted, %then_bb19 ], [ %2828, %"end for output.s0.b.rebased49" ]
  %.3 = phi i8* [ null, %then_bb19 ], [ %.4, %"end for output.s0.b.rebased49" ]
  %output.s0.c.co23 = phi i32 [ 0, %then_bb19 ], [ %3135, %"end for output.s0.b.rebased49" ]
  %a85 = shl nsw i32 %output.s0.c.co23, 7
  %2825 = icmp slt i32 %a85, %b87
  %output.s0.c.c.base24 = select i1 %2825, i32 %a85, i32 %b87
  %cmp.i783 = icmp ult i32 %2824, %2733
  %2826 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !97
  br i1 %cmp.i783, label %if.then.i786, label %pseudostack_alloc.exit799, !prof !99

if.then.i786:                                     ; preds = %"for output.s0.c.co21"
  %tobool1.not.i785 = icmp ne i8* %2826, null
  %cmp2.i788 = icmp ugt i32 %2823, 16384
  %or.cond4632 = and i1 %tobool1.not.i785, %cmp2.i788
  br i1 %or.cond4632, label %if.then3.i790, label %if.end.i794

if.then3.i790:                                    ; preds = %if.then.i786
  call void @halide_free(i8* null, i8* nonnull %2826) #15
  br label %if.end.i794

if.end.i794:                                      ; preds = %if.then3.i790, %if.then.i786
  %add.i792 = add i32 %2823, %2733
  %cmp7.i793 = icmp ugt i32 %add.i792, 16384
  br i1 %cmp7.i793, label %if.then8.i796, label %if.end11.i798

if.then8.i796:                                    ; preds = %if.end.i794
  %call.i795 = call i8* @halide_malloc(i8* null, i32 %2733) #15
  br label %if.end11.i798

if.end11.i798:                                    ; preds = %if.then8.i796, %if.end.i794
  %storemerge.i797 = phi i8* [ %call.i795, %if.then8.i796 ], [ null, %if.end.i794 ]
  store i8* %storemerge.i797, i8** %.fca.0.gep, align 4, !tbaa !97
  br label %pseudostack_alloc.exit799

pseudostack_alloc.exit799:                        ; preds = %"for output.s0.c.co21", %if.end11.i798
  %2827 = phi i32 [ %add.i792, %if.end11.i798 ], [ %2823, %"for output.s0.c.co21" ]
  %2828 = phi i32 [ %2733, %if.end11.i798 ], [ %2824, %"for output.s0.c.co21" ]
  %2829 = phi i8* [ %storemerge.i797, %if.end11.i798 ], [ %2826, %"for output.s0.c.co21" ]
  %2830 = bitcast i8* %2829 to i16*
  %.not658 = icmp eq i8* %2829, null
  br i1 %.not658, label %then_bb26, label %"produce filter_zeroed28", !prof !100

then_bb26:                                        ; preds = %pseudostack_alloc.exit799
  %2831 = alloca i8*, i32 %2733, align 128
  %2832 = bitcast i8** %2831 to i16*
  store i8** %2831, i8*** %2734, align 4
  br label %"produce filter_zeroed28"

"produce filter_zeroed28":                        ; preds = %pseudostack_alloc.exit799, %then_bb26
  %filter_zeroed27 = phi i16* [ %2832, %then_bb26 ], [ %2830, %pseudostack_alloc.exit799 ]
  br i1 %2729, label %"for filter_zeroed.s0.y29.preheader", label %"consume sum_filter45.critedge", !prof !101

"for filter_zeroed.s0.y29.preheader":             ; preds = %"produce filter_zeroed28"
  br i1 %2728, label %"for filter_zeroed.s0.y29.us", label %"for sum_filter.s1.r19$y39.preheader.thread", !prof !101

"for sum_filter.s1.r19$y39.preheader.thread":     ; preds = %"for filter_zeroed.s0.y29.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2814, i8 0, i64 512, i1 false)
  br label %"consume sum_filter45"

"for filter_zeroed.s0.y29.us":                    ; preds = %"for filter_zeroed.s0.y29.preheader", %"end for filter_zeroed.s0.x33.loopexit.us"
  %filter_zeroed.s0.y31.us = phi i32 [ %2941, %"end for filter_zeroed.s0.x33.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y29.preheader" ]
  %2833 = mul nsw i32 %filter_zeroed.s0.y31.us, %7
  %2834 = add nsw i32 %2833, %output.s0.c.c.base24
  %2835 = mul nsw i32 %filter_zeroed.s0.y31.us, %4
  br i1 %2817, label %"end for filter_zeroed.s0.x33.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x32.us"

"for filter_zeroed.s0.x32.us":                    ; preds = %"for filter_zeroed.s0.y29.us", %"for filter_zeroed.s0.x32.us"
  %filter_zeroed.s0.x34.us = phi i32 [ %2919, %"for filter_zeroed.s0.x32.us" ], [ 0, %"for filter_zeroed.s0.y29.us" ]
  %niter5137 = phi i32 [ %niter5137.nsub.3, %"for filter_zeroed.s0.x32.us" ], [ %unroll_iter5136, %"for filter_zeroed.s0.y29.us" ]
  %2836 = mul nsw i32 %filter_zeroed.s0.x34.us, %5
  %2837 = add nsw i32 %2834, %2836
  %2838 = getelementptr inbounds i8, i8* %1, i32 %2837
  %2839 = bitcast i8* %2838 to <64 x i8>*
  %2840 = load <64 x i8>, <64 x i8>* %2839, align 1, !tbaa !102
  %2841 = zext <64 x i8> %2840 to <64 x i16>
  %2842 = bitcast <64 x i16> %2841 to <32 x i32>
  %2843 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2842, <32 x i32> %2738) #11
  %2844 = add nsw i32 %filter_zeroed.s0.x34.us, %2835
  %2845 = shl nsw i32 %2844, 7
  %2846 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2845
  %2847 = bitcast i16* %2846 to <32 x i32>*
  store <32 x i32> %2843, <32 x i32>* %2847, align 128, !tbaa !105
  %2848 = getelementptr inbounds i8, i8* %2838, i32 64
  %2849 = bitcast i8* %2848 to <64 x i8>*
  %2850 = load <64 x i8>, <64 x i8>* %2849, align 1, !tbaa !102
  %2851 = zext <64 x i8> %2850 to <64 x i16>
  %2852 = bitcast <64 x i16> %2851 to <32 x i32>
  %2853 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2852, <32 x i32> %2738) #11
  %2854 = getelementptr inbounds i16, i16* %2846, i32 64
  %2855 = bitcast i16* %2854 to <32 x i32>*
  store <32 x i32> %2853, <32 x i32>* %2855, align 128, !tbaa !105
  %2856 = or i32 %filter_zeroed.s0.x34.us, 1
  %2857 = mul nsw i32 %2856, %5
  %2858 = add nsw i32 %2834, %2857
  %2859 = getelementptr inbounds i8, i8* %1, i32 %2858
  %2860 = bitcast i8* %2859 to <64 x i8>*
  %2861 = load <64 x i8>, <64 x i8>* %2860, align 1, !tbaa !102
  %2862 = zext <64 x i8> %2861 to <64 x i16>
  %2863 = bitcast <64 x i16> %2862 to <32 x i32>
  %2864 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2863, <32 x i32> %2738) #11
  %2865 = add nsw i32 %2856, %2835
  %2866 = shl nsw i32 %2865, 7
  %2867 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2866
  %2868 = bitcast i16* %2867 to <32 x i32>*
  store <32 x i32> %2864, <32 x i32>* %2868, align 128, !tbaa !105
  %2869 = getelementptr inbounds i8, i8* %2859, i32 64
  %2870 = bitcast i8* %2869 to <64 x i8>*
  %2871 = load <64 x i8>, <64 x i8>* %2870, align 1, !tbaa !102
  %2872 = zext <64 x i8> %2871 to <64 x i16>
  %2873 = bitcast <64 x i16> %2872 to <32 x i32>
  %2874 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2873, <32 x i32> %2738) #11
  %2875 = getelementptr inbounds i16, i16* %2867, i32 64
  %2876 = bitcast i16* %2875 to <32 x i32>*
  store <32 x i32> %2874, <32 x i32>* %2876, align 128, !tbaa !105
  %2877 = or i32 %filter_zeroed.s0.x34.us, 2
  %2878 = mul nsw i32 %2877, %5
  %2879 = add nsw i32 %2834, %2878
  %2880 = getelementptr inbounds i8, i8* %1, i32 %2879
  %2881 = bitcast i8* %2880 to <64 x i8>*
  %2882 = load <64 x i8>, <64 x i8>* %2881, align 1, !tbaa !102
  %2883 = zext <64 x i8> %2882 to <64 x i16>
  %2884 = bitcast <64 x i16> %2883 to <32 x i32>
  %2885 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2884, <32 x i32> %2738) #11
  %2886 = add nsw i32 %2877, %2835
  %2887 = shl nsw i32 %2886, 7
  %2888 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2887
  %2889 = bitcast i16* %2888 to <32 x i32>*
  store <32 x i32> %2885, <32 x i32>* %2889, align 128, !tbaa !105
  %2890 = getelementptr inbounds i8, i8* %2880, i32 64
  %2891 = bitcast i8* %2890 to <64 x i8>*
  %2892 = load <64 x i8>, <64 x i8>* %2891, align 1, !tbaa !102
  %2893 = zext <64 x i8> %2892 to <64 x i16>
  %2894 = bitcast <64 x i16> %2893 to <32 x i32>
  %2895 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2894, <32 x i32> %2738) #11
  %2896 = getelementptr inbounds i16, i16* %2888, i32 64
  %2897 = bitcast i16* %2896 to <32 x i32>*
  store <32 x i32> %2895, <32 x i32>* %2897, align 128, !tbaa !105
  %2898 = or i32 %filter_zeroed.s0.x34.us, 3
  %2899 = mul nsw i32 %2898, %5
  %2900 = add nsw i32 %2834, %2899
  %2901 = getelementptr inbounds i8, i8* %1, i32 %2900
  %2902 = bitcast i8* %2901 to <64 x i8>*
  %2903 = load <64 x i8>, <64 x i8>* %2902, align 1, !tbaa !102
  %2904 = zext <64 x i8> %2903 to <64 x i16>
  %2905 = bitcast <64 x i16> %2904 to <32 x i32>
  %2906 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2905, <32 x i32> %2738) #11
  %2907 = add nsw i32 %2898, %2835
  %2908 = shl nsw i32 %2907, 7
  %2909 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2908
  %2910 = bitcast i16* %2909 to <32 x i32>*
  store <32 x i32> %2906, <32 x i32>* %2910, align 128, !tbaa !105
  %2911 = getelementptr inbounds i8, i8* %2901, i32 64
  %2912 = bitcast i8* %2911 to <64 x i8>*
  %2913 = load <64 x i8>, <64 x i8>* %2912, align 1, !tbaa !102
  %2914 = zext <64 x i8> %2913 to <64 x i16>
  %2915 = bitcast <64 x i16> %2914 to <32 x i32>
  %2916 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2915, <32 x i32> %2738) #11
  %2917 = getelementptr inbounds i16, i16* %2909, i32 64
  %2918 = bitcast i16* %2917 to <32 x i32>*
  store <32 x i32> %2916, <32 x i32>* %2918, align 128, !tbaa !105
  %2919 = add nuw nsw i32 %filter_zeroed.s0.x34.us, 4
  %niter5137.nsub.3 = add i32 %niter5137, -4
  %niter5137.ncmp.3 = icmp eq i32 %niter5137.nsub.3, 0
  br i1 %niter5137.ncmp.3, label %"end for filter_zeroed.s0.x33.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x32.us"

"end for filter_zeroed.s0.x33.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x32.us", %"for filter_zeroed.s0.y29.us"
  %filter_zeroed.s0.x34.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y29.us" ], [ %2919, %"for filter_zeroed.s0.x32.us" ]
  br i1 %lcmp.mod5135.not, label %"end for filter_zeroed.s0.x33.loopexit.us", label %"for filter_zeroed.s0.x32.us.epil"

"for filter_zeroed.s0.x32.us.epil":               ; preds = %"end for filter_zeroed.s0.x33.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x32.us.epil"
  %filter_zeroed.s0.x34.us.epil = phi i32 [ %2940, %"for filter_zeroed.s0.x32.us.epil" ], [ %filter_zeroed.s0.x34.us.unr, %"end for filter_zeroed.s0.x33.loopexit.us.unr-lcssa" ]
  %epil.iter5134 = phi i32 [ %epil.iter5134.sub, %"for filter_zeroed.s0.x32.us.epil" ], [ %xtraiter5133, %"end for filter_zeroed.s0.x33.loopexit.us.unr-lcssa" ]
  %2920 = mul nsw i32 %filter_zeroed.s0.x34.us.epil, %5
  %2921 = add nsw i32 %2834, %2920
  %2922 = getelementptr inbounds i8, i8* %1, i32 %2921
  %2923 = bitcast i8* %2922 to <64 x i8>*
  %2924 = load <64 x i8>, <64 x i8>* %2923, align 1, !tbaa !102
  %2925 = zext <64 x i8> %2924 to <64 x i16>
  %2926 = bitcast <64 x i16> %2925 to <32 x i32>
  %2927 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2926, <32 x i32> %2738) #11
  %2928 = add nsw i32 %filter_zeroed.s0.x34.us.epil, %2835
  %2929 = shl nsw i32 %2928, 7
  %2930 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2929
  %2931 = bitcast i16* %2930 to <32 x i32>*
  store <32 x i32> %2927, <32 x i32>* %2931, align 128, !tbaa !105
  %2932 = getelementptr inbounds i8, i8* %2922, i32 64
  %2933 = bitcast i8* %2932 to <64 x i8>*
  %2934 = load <64 x i8>, <64 x i8>* %2933, align 1, !tbaa !102
  %2935 = zext <64 x i8> %2934 to <64 x i16>
  %2936 = bitcast <64 x i16> %2935 to <32 x i32>
  %2937 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2936, <32 x i32> %2738) #11
  %2938 = getelementptr inbounds i16, i16* %2930, i32 64
  %2939 = bitcast i16* %2938 to <32 x i32>*
  store <32 x i32> %2937, <32 x i32>* %2939, align 128, !tbaa !105
  %2940 = add nuw nsw i32 %filter_zeroed.s0.x34.us.epil, 1
  %epil.iter5134.sub = add i32 %epil.iter5134, -1
  %epil.iter5134.cmp.not = icmp eq i32 %epil.iter5134.sub, 0
  br i1 %epil.iter5134.cmp.not, label %"end for filter_zeroed.s0.x33.loopexit.us", label %"for filter_zeroed.s0.x32.us.epil", !llvm.loop !201

"end for filter_zeroed.s0.x33.loopexit.us":       ; preds = %"for filter_zeroed.s0.x32.us.epil", %"end for filter_zeroed.s0.x33.loopexit.us.unr-lcssa"
  %2941 = add nuw nsw i32 %filter_zeroed.s0.y31.us, 1
  %.not672.us = icmp eq i32 %2941, %6
  br i1 %.not672.us, label %"for sum_filter.s1.r19$y39.preheader", label %"for filter_zeroed.s0.y29.us"

"for sum_filter.s1.r19$y39.preheader":            ; preds = %"end for filter_zeroed.s0.x33.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2815, i8 0, i64 512, i1 false)
  br i1 %2728, label %"for sum_filter.s1.r19$y39.us", label %"consume sum_filter45", !prof !101

"for sum_filter.s1.r19$y39.us":                   ; preds = %"for sum_filter.s1.r19$y39.preheader", %"end for sum_filter.s1.r19$x43.loopexit.us"
  %.lcssa4754.us4761 = phi <32 x i32> [ %.lcssa5091, %"end for sum_filter.s1.r19$x43.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %.lcssa4752.us4759 = phi <32 x i32> [ %.lcssa5092, %"end for sum_filter.s1.r19$x43.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %.lcssa4750.us4757 = phi <32 x i32> [ %.lcssa5093, %"end for sum_filter.s1.r19$x43.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %.lcssa4748.us4755 = phi <32 x i32> [ %.lcssa5094, %"end for sum_filter.s1.r19$x43.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %"sum_filter.s1.r19$y41.us" = phi i32 [ %3046, %"end for sum_filter.s1.r19$x43.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y39.preheader" ]
  %2942 = mul nsw i32 %"sum_filter.s1.r19$y41.us", %4
  br i1 %2818, label %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x42.us"

"for sum_filter.s1.r19$x42.us":                   ; preds = %"for sum_filter.s1.r19$y39.us", %"for sum_filter.s1.r19$x42.us"
  %2943 = phi <32 x i32> [ %3021, %"for sum_filter.s1.r19$x42.us" ], [ %.lcssa4754.us4761, %"for sum_filter.s1.r19$y39.us" ]
  %2944 = phi <32 x i32> [ %3020, %"for sum_filter.s1.r19$x42.us" ], [ %.lcssa4752.us4759, %"for sum_filter.s1.r19$y39.us" ]
  %2945 = phi <32 x i32> [ %3019, %"for sum_filter.s1.r19$x42.us" ], [ %.lcssa4750.us4757, %"for sum_filter.s1.r19$y39.us" ]
  %2946 = phi <32 x i32> [ %3018, %"for sum_filter.s1.r19$x42.us" ], [ %.lcssa4748.us4755, %"for sum_filter.s1.r19$y39.us" ]
  %"sum_filter.s1.r19$x44.us" = phi i32 [ %3022, %"for sum_filter.s1.r19$x42.us" ], [ 0, %"for sum_filter.s1.r19$y39.us" ]
  %niter5149 = phi i32 [ %niter5149.nsub.3, %"for sum_filter.s1.r19$x42.us" ], [ %unroll_iter5148, %"for sum_filter.s1.r19$y39.us" ]
  %2947 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2945, <32 x i32> %2946)
  %2948 = add nsw i32 %"sum_filter.s1.r19$x44.us", %2942
  %2949 = shl nsw i32 %2948, 7
  %2950 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2949
  %2951 = bitcast i16* %2950 to <32 x i32>*
  %2952 = load <32 x i32>, <32 x i32>* %2951, align 128, !tbaa !105
  %2953 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2952) #11
  %2954 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2953, <64 x i32> %2947) #11
  %2955 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2943, <32 x i32> %2944)
  %2956 = getelementptr inbounds i16, i16* %2950, i32 64
  %2957 = bitcast i16* %2956 to <32 x i32>*
  %2958 = load <32 x i32>, <32 x i32>* %2957, align 128, !tbaa !105
  %2959 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2958) #11
  %2960 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2959, <64 x i32> %2955) #11
  %2961 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2954)
  %2962 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2954)
  %2963 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2960)
  %2964 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2960)
  %2965 = or i32 %"sum_filter.s1.r19$x44.us", 1
  %2966 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2962, <32 x i32> %2961)
  %2967 = add nsw i32 %2965, %2942
  %2968 = shl nsw i32 %2967, 7
  %2969 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2968
  %2970 = bitcast i16* %2969 to <32 x i32>*
  %2971 = load <32 x i32>, <32 x i32>* %2970, align 128, !tbaa !105
  %2972 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2971) #11
  %2973 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2972, <64 x i32> %2966) #11
  %2974 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2964, <32 x i32> %2963)
  %2975 = getelementptr inbounds i16, i16* %2969, i32 64
  %2976 = bitcast i16* %2975 to <32 x i32>*
  %2977 = load <32 x i32>, <32 x i32>* %2976, align 128, !tbaa !105
  %2978 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2977) #11
  %2979 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2978, <64 x i32> %2974) #11
  %2980 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2973)
  %2981 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2973)
  %2982 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2979)
  %2983 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2979)
  %2984 = or i32 %"sum_filter.s1.r19$x44.us", 2
  %2985 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2981, <32 x i32> %2980)
  %2986 = add nsw i32 %2984, %2942
  %2987 = shl nsw i32 %2986, 7
  %2988 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %2987
  %2989 = bitcast i16* %2988 to <32 x i32>*
  %2990 = load <32 x i32>, <32 x i32>* %2989, align 128, !tbaa !105
  %2991 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2990) #11
  %2992 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2991, <64 x i32> %2985) #11
  %2993 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2983, <32 x i32> %2982)
  %2994 = getelementptr inbounds i16, i16* %2988, i32 64
  %2995 = bitcast i16* %2994 to <32 x i32>*
  %2996 = load <32 x i32>, <32 x i32>* %2995, align 128, !tbaa !105
  %2997 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2996) #11
  %2998 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2997, <64 x i32> %2993) #11
  %2999 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2992)
  %3000 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2992)
  %3001 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2998)
  %3002 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2998)
  %3003 = or i32 %"sum_filter.s1.r19$x44.us", 3
  %3004 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3000, <32 x i32> %2999)
  %3005 = add nsw i32 %3003, %2942
  %3006 = shl nsw i32 %3005, 7
  %3007 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %3006
  %3008 = bitcast i16* %3007 to <32 x i32>*
  %3009 = load <32 x i32>, <32 x i32>* %3008, align 128, !tbaa !105
  %3010 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3009) #11
  %3011 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3010, <64 x i32> %3004) #11
  %3012 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3002, <32 x i32> %3001)
  %3013 = getelementptr inbounds i16, i16* %3007, i32 64
  %3014 = bitcast i16* %3013 to <32 x i32>*
  %3015 = load <32 x i32>, <32 x i32>* %3014, align 128, !tbaa !105
  %3016 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3015) #11
  %3017 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3016, <64 x i32> %3012) #11
  %3018 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3011)
  %3019 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3011)
  %3020 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3017)
  %3021 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3017)
  %3022 = add nuw nsw i32 %"sum_filter.s1.r19$x44.us", 4
  %niter5149.nsub.3 = add i32 %niter5149, -4
  %niter5149.ncmp.3 = icmp eq i32 %niter5149.nsub.3, 0
  br i1 %niter5149.ncmp.3, label %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x42.us"

"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x42.us", %"for sum_filter.s1.r19$y39.us"
  %.lcssa5094.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y39.us" ], [ %3018, %"for sum_filter.s1.r19$x42.us" ]
  %.lcssa5093.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y39.us" ], [ %3019, %"for sum_filter.s1.r19$x42.us" ]
  %.lcssa5092.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y39.us" ], [ %3020, %"for sum_filter.s1.r19$x42.us" ]
  %.lcssa5091.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y39.us" ], [ %3021, %"for sum_filter.s1.r19$x42.us" ]
  %.unr = phi <32 x i32> [ %.lcssa4754.us4761, %"for sum_filter.s1.r19$y39.us" ], [ %3021, %"for sum_filter.s1.r19$x42.us" ]
  %.unr5140 = phi <32 x i32> [ %.lcssa4752.us4759, %"for sum_filter.s1.r19$y39.us" ], [ %3020, %"for sum_filter.s1.r19$x42.us" ]
  %.unr5141 = phi <32 x i32> [ %.lcssa4750.us4757, %"for sum_filter.s1.r19$y39.us" ], [ %3019, %"for sum_filter.s1.r19$x42.us" ]
  %.unr5142 = phi <32 x i32> [ %.lcssa4748.us4755, %"for sum_filter.s1.r19$y39.us" ], [ %3018, %"for sum_filter.s1.r19$x42.us" ]
  %"sum_filter.s1.r19$x44.us.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y39.us" ], [ %3022, %"for sum_filter.s1.r19$x42.us" ]
  br i1 %lcmp.mod5143.not, label %"end for sum_filter.s1.r19$x43.loopexit.us", label %"for sum_filter.s1.r19$x42.us.epil"

"for sum_filter.s1.r19$x42.us.epil":              ; preds = %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x42.us.epil"
  %3023 = phi <32 x i32> [ %3044, %"for sum_filter.s1.r19$x42.us.epil" ], [ %.unr, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ]
  %3024 = phi <32 x i32> [ %3043, %"for sum_filter.s1.r19$x42.us.epil" ], [ %.unr5140, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ]
  %3025 = phi <32 x i32> [ %3042, %"for sum_filter.s1.r19$x42.us.epil" ], [ %.unr5141, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ]
  %3026 = phi <32 x i32> [ %3041, %"for sum_filter.s1.r19$x42.us.epil" ], [ %.unr5142, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ]
  %"sum_filter.s1.r19$x44.us.epil" = phi i32 [ %3045, %"for sum_filter.s1.r19$x42.us.epil" ], [ %"sum_filter.s1.r19$x44.us.unr", %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ]
  %epil.iter5139 = phi i32 [ %epil.iter5139.sub, %"for sum_filter.s1.r19$x42.us.epil" ], [ %xtraiter5138, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ]
  %3027 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3025, <32 x i32> %3026)
  %3028 = add nsw i32 %"sum_filter.s1.r19$x44.us.epil", %2942
  %3029 = shl nsw i32 %3028, 7
  %3030 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %3029
  %3031 = bitcast i16* %3030 to <32 x i32>*
  %3032 = load <32 x i32>, <32 x i32>* %3031, align 128, !tbaa !105
  %3033 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3032) #11
  %3034 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3033, <64 x i32> %3027) #11
  %3035 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3023, <32 x i32> %3024)
  %3036 = getelementptr inbounds i16, i16* %3030, i32 64
  %3037 = bitcast i16* %3036 to <32 x i32>*
  %3038 = load <32 x i32>, <32 x i32>* %3037, align 128, !tbaa !105
  %3039 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3038) #11
  %3040 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3039, <64 x i32> %3035) #11
  %3041 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3034)
  %3042 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3034)
  %3043 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3040)
  %3044 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3040)
  %3045 = add nuw nsw i32 %"sum_filter.s1.r19$x44.us.epil", 1
  %epil.iter5139.sub = add i32 %epil.iter5139, -1
  %epil.iter5139.cmp.not = icmp eq i32 %epil.iter5139.sub, 0
  br i1 %epil.iter5139.cmp.not, label %"end for sum_filter.s1.r19$x43.loopexit.us", label %"for sum_filter.s1.r19$x42.us.epil", !llvm.loop !202

"end for sum_filter.s1.r19$x43.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x42.us.epil", %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa"
  %.lcssa5094 = phi <32 x i32> [ %.lcssa5094.ph, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ], [ %3041, %"for sum_filter.s1.r19$x42.us.epil" ]
  %.lcssa5093 = phi <32 x i32> [ %.lcssa5093.ph, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ], [ %3042, %"for sum_filter.s1.r19$x42.us.epil" ]
  %.lcssa5092 = phi <32 x i32> [ %.lcssa5092.ph, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ], [ %3043, %"for sum_filter.s1.r19$x42.us.epil" ]
  %.lcssa5091 = phi <32 x i32> [ %.lcssa5091.ph, %"end for sum_filter.s1.r19$x43.loopexit.us.unr-lcssa" ], [ %3044, %"for sum_filter.s1.r19$x42.us.epil" ]
  %3046 = add nuw nsw i32 %"sum_filter.s1.r19$y41.us", 1
  %.not670.us = icmp eq i32 %3046, %6
  br i1 %.not670.us, label %"consume sum_filter45.loopexit.split.us", label %"for sum_filter.s1.r19$y39.us"

"consume sum_filter45.loopexit.split.us":         ; preds = %"end for sum_filter.s1.r19$x43.loopexit.us"
  store <32 x i32> %.lcssa5094, <32 x i32>* %2739, align 128, !tbaa !131
  store <32 x i32> %.lcssa5093, <32 x i32>* %2741, align 128, !tbaa !139
  store <32 x i32> %.lcssa5092, <32 x i32>* %2743, align 128, !tbaa !141
  store <32 x i32> %.lcssa5091, <32 x i32>* %2745, align 128, !tbaa !144
  br label %"consume sum_filter45"

"consume sum_filter45.critedge":                  ; preds = %"produce filter_zeroed28"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2813, i8 0, i64 512, i1 false)
  br label %"consume sum_filter45"

"consume sum_filter45":                           ; preds = %"for sum_filter.s1.r19$y39.preheader", %"for sum_filter.s1.r19$y39.preheader.thread", %"consume sum_filter45.loopexit.split.us", %"consume sum_filter45.critedge"
  %3047 = phi <32 x i32> [ %.lcssa5091, %"consume sum_filter45.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter45.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %3048 = phi <32 x i32> [ %.lcssa5092, %"consume sum_filter45.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter45.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %3049 = phi <32 x i32> [ %.lcssa5093, %"consume sum_filter45.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter45.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %3050 = phi <32 x i32> [ %.lcssa5094, %"consume sum_filter45.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter45.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y39.preheader" ]
  %3051 = getelementptr inbounds i32, i32* %2746, i32 %output.s0.c.c.base24
  %3052 = bitcast i32* %3051 to <32 x i32>*
  %3053 = load <32 x i32>, <32 x i32>* %3052, align 4, !tbaa !109
  %3054 = getelementptr inbounds i32, i32* %3051, i32 32
  %3055 = bitcast i32* %3054 to <32 x i32>*
  %3056 = load <32 x i32>, <32 x i32>* %3055, align 4, !tbaa !109
  %3057 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3056, <32 x i32> %3053)
  %3058 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3049, <32 x i32> %3050)
  %3059 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2747) #11
  %3060 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3058) #11
  %3061 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3059, <32 x i32> %3060) #11
  %3062 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3061, <32 x i32> %3059, <32 x i32> %3060) #11
  %3063 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3058) #11
  %3064 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3059, <32 x i32> %3063) #11
  %3065 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3064, <32 x i32> %3059, <32 x i32> %3063) #11
  %3066 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3062, <32 x i32> %3065) #11
  %3067 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3057, <64 x i32> %3066) #11
  %3068 = getelementptr inbounds i32, i32* %3051, i32 64
  %3069 = bitcast i32* %3068 to <32 x i32>*
  %3070 = load <32 x i32>, <32 x i32>* %3069, align 4, !tbaa !109
  %3071 = getelementptr inbounds i32, i32* %3051, i32 96
  %3072 = bitcast i32* %3071 to <32 x i32>*
  %3073 = load <32 x i32>, <32 x i32>* %3072, align 4, !tbaa !109
  %3074 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3073, <32 x i32> %3070)
  %3075 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3047, <32 x i32> %3048)
  %3076 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3075) #11
  %3077 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3059, <32 x i32> %3076) #11
  %3078 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3077, <32 x i32> %3059, <32 x i32> %3076) #11
  %3079 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3075) #11
  %3080 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3059, <32 x i32> %3079) #11
  %3081 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3080, <32 x i32> %3059, <32 x i32> %3079) #11
  %3082 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3078, <32 x i32> %3081) #11
  %3083 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %3074, <64 x i32> %3082) #11
  %3084 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3067)
  %3085 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3067)
  %3086 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3083)
  %3087 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3083)
  br i1 %2762, label %"for output.s0.b.rebased48.preheader", label %"end for output.s0.b.rebased49", !prof !101

"for output.s0.b.rebased48.preheader":            ; preds = %"consume sum_filter45"
  %3088 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base24, i32 0
  %3089 = shufflevector <128 x i32> %3088, <128 x i32> undef, <128 x i32> zeroinitializer
  %3090 = add nsw <128 x i32> %3089, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit = ashr <128 x i32> %3090, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %3091 = sub nsw <128 x i32> %3090, %.lobit
  %3092 = and <128 x i32> %.lobit, %2782
  %3093 = sub i32 %output.s0.c.c.base24, %t2326
  %3094 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 768
  %3095 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 1024
  %3096 = bitcast i16* %3095 to <32 x i32>*
  %3097 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 896
  %3098 = bitcast i16* %3097 to <32 x i32>*
  %3099 = bitcast i16* %3094 to <32 x i32>*
  %3100 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 384
  %3101 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 640
  %3102 = bitcast i16* %3101 to <32 x i32>*
  %3103 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 512
  %3104 = bitcast i16* %3103 to <32 x i32>*
  %3105 = bitcast i16* %3100 to <32 x i32>*
  %3106 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 256
  %3107 = bitcast i16* %3106 to <32 x i32>*
  %3108 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 128
  %3109 = bitcast i16* %3108 to <32 x i32>*
  %3110 = bitcast i16* %filter_zeroed27 to <32 x i32>*
  %3111 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 1088
  %3112 = bitcast i16* %3111 to <32 x i32>*
  %3113 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 960
  %3114 = bitcast i16* %3113 to <32 x i32>*
  %3115 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 832
  %3116 = bitcast i16* %3115 to <32 x i32>*
  %3117 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 704
  %3118 = bitcast i16* %3117 to <32 x i32>*
  %3119 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 576
  %3120 = bitcast i16* %3119 to <32 x i32>*
  %3121 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 448
  %3122 = bitcast i16* %3121 to <32 x i32>*
  %3123 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 320
  %3124 = bitcast i16* %3123 to <32 x i32>*
  %3125 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 192
  %3126 = bitcast i16* %3125 to <32 x i32>*
  %3127 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 64
  %3128 = bitcast i16* %3127 to <32 x i32>*
  %3129 = sub i32 %output.s0.c.c.base24, %reass.add4707
  br label %"for output.s0.b.rebased48"

"for output.s0.b.rebased48":                      ; preds = %"for output.s0.b.rebased48.preheader", %"end for output.s0.y.yo75"
  %output.s0.b.rebased50 = phi i32 [ %3702, %"end for output.s0.y.yo75" ], [ 0, %"for output.s0.b.rebased48.preheader" ]
  %3130 = load i32, i32* %.fca.1.gep603, align 4, !tbaa !95
  %cmp.i801 = icmp ult i32 %3130, %2768
  %3131 = load i8*, i8** %.fca.0.gep602, align 4, !tbaa !97
  br i1 %cmp.i801, label %if.then.i804, label %pseudostack_alloc.exit817, !prof !99

if.then.i804:                                     ; preds = %"for output.s0.b.rebased48"
  %tobool1.not.i803 = icmp ne i8* %3131, null
  %3132 = load i32, i32* %.fca.2.gep604, align 4
  %cmp2.i806 = icmp ugt i32 %3132, 16384
  %or.cond4633 = and i1 %tobool1.not.i803, %cmp2.i806
  br i1 %or.cond4633, label %if.then3.i808, label %if.end.i812

if.then3.i808:                                    ; preds = %if.then.i804
  call void @halide_free(i8* null, i8* nonnull %3131) #15
  %.pre4969 = load i32, i32* %.fca.2.gep604, align 4, !tbaa !98
  br label %if.end.i812

if.end.i812:                                      ; preds = %if.then3.i808, %if.then.i804
  %3133 = phi i32 [ %.pre4969, %if.then3.i808 ], [ %3132, %if.then.i804 ]
  %add.i810 = add i32 %3133, %2768
  store i32 %add.i810, i32* %.fca.2.gep604, align 4, !tbaa !98
  %cmp7.i811 = icmp ugt i32 %add.i810, 16384
  br i1 %cmp7.i811, label %if.then8.i814, label %if.end11.i816

if.then8.i814:                                    ; preds = %if.end.i812
  %call.i813 = call i8* @halide_malloc(i8* null, i32 %2768) #15
  br label %if.end11.i816

if.end11.i816:                                    ; preds = %if.then8.i814, %if.end.i812
  %storemerge.i815 = phi i8* [ %call.i813, %if.then8.i814 ], [ null, %if.end.i812 ]
  store i8* %storemerge.i815, i8** %.fca.0.gep602, align 4, !tbaa !97
  store i32 %2768, i32* %.fca.1.gep603, align 4, !tbaa !95
  br label %pseudostack_alloc.exit817

pseudostack_alloc.exit817:                        ; preds = %"for output.s0.b.rebased48", %if.end11.i816
  %3134 = phi i8* [ %storemerge.i815, %if.end11.i816 ], [ %3131, %"for output.s0.b.rebased48" ]
  %.not660 = icmp eq i8* %3134, null
  br i1 %.not660, label %then_bb52, label %"produce resampled_input54", !prof !100

"end for output.s0.b.rebased49":                  ; preds = %"end for output.s0.y.yo75", %"consume sum_filter45"
  %.4 = phi i8* [ %.3, %"consume sum_filter45" ], [ %2812, %"end for output.s0.y.yo75" ]
  %3135 = add nuw nsw i32 %output.s0.c.co23, 1
  %.not659 = icmp eq i32 %3135, %2727
  br i1 %.not659, label %after_bb.loopexit4985, label %"for output.s0.c.co21"

then_bb52:                                        ; preds = %pseudostack_alloc.exit817
  %3136 = alloca i8*, i32 %2768, align 128
  %3137 = bitcast i8** %3136 to i8*
  store i8** %3136, i8*** %2769, align 4
  br label %"produce resampled_input54"

"produce resampled_input54":                      ; preds = %pseudostack_alloc.exit817, %then_bb52
  %resampled_input53 = phi i8* [ %3137, %then_bb52 ], [ %3134, %pseudostack_alloc.exit817 ]
  br i1 %t2325, label %then_bb56, label %next_bb57

then_bb56:                                        ; preds = %"produce resampled_input54"
  %3138 = add nsw i32 %output.s0.b.rebased50, %14
  %3139 = mul nsw i32 %3138, %16
  %t2358 = add nsw i32 %3093, %3139
  br i1 %2820, label %"consume resampled_input73", label %"for resampled_input.s0.y.rebased58.us", !prof !126

"for resampled_input.s0.y.rebased58.us":          ; preds = %then_bb56, %"end for resampled_input.s0.x.rebased62.loopexit.us"
  %resampled_input.s0.y.rebased60.us = phi i32 [ %3156, %"end for resampled_input.s0.x.rebased62.loopexit.us" ], [ 0, %then_bb56 ]
  %3140 = add nsw i32 %2771, %resampled_input.s0.y.rebased60.us
  %3141 = mul nsw i32 %3140, %2772
  %t2362.us = add nsw i32 %2773, %3141
  %3142 = add nsw i32 %resampled_input.s0.y.rebased60.us, %a91
  %3143 = mul nsw i32 %3142, %13
  %3144 = add nsw i32 %t2358, %3143
  br label %"for resampled_input.s0.x.rebased61.us"

"for resampled_input.s0.x.rebased61.us":          ; preds = %"for resampled_input.s0.y.rebased58.us", %"for resampled_input.s0.x.rebased61.us"
  %resampled_input.s0.x.rebased63.us = phi i32 [ %3155, %"for resampled_input.s0.x.rebased61.us" ], [ 0, %"for resampled_input.s0.y.rebased58.us" ]
  %3145 = add nsw i32 %resampled_input.s0.x.rebased63.us, %a90
  %3146 = mul nsw i32 %3145, %11
  %3147 = add nsw i32 %3144, %3146
  %3148 = getelementptr inbounds i8, i8* %8, i32 %3147
  %3149 = bitcast i8* %3148 to <128 x i8>*
  %3150 = load <128 x i8>, <128 x i8>* %3149, align 1, !tbaa !127
  %3151 = add nsw i32 %t2362.us, %resampled_input.s0.x.rebased63.us
  %3152 = shl nsw i32 %3151, 7
  %3153 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3152
  %3154 = bitcast i8* %3153 to <128 x i8>*
  store <128 x i8> %3150, <128 x i8>* %3154, align 128, !tbaa !129
  %3155 = add nuw nsw i32 %resampled_input.s0.x.rebased63.us, 1
  %.not669.us = icmp eq i32 %resampled_input.s0.x.rebased63.us, %t2351
  br i1 %.not669.us, label %"end for resampled_input.s0.x.rebased62.loopexit.us", label %"for resampled_input.s0.x.rebased61.us"

"end for resampled_input.s0.x.rebased62.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased61.us"
  %3156 = add nuw nsw i32 %resampled_input.s0.y.rebased60.us, 1
  %.not668.us = icmp eq i32 %resampled_input.s0.y.rebased60.us, %t2350
  br i1 %.not668.us, label %"consume resampled_input73", label %"for resampled_input.s0.y.rebased58.us"

next_bb57:                                        ; preds = %"produce resampled_input54"
  br i1 %2770, label %"for resampled_input.s0.y.rebased64.preheader", label %"consume resampled_input73", !prof !101

"for resampled_input.s0.y.rebased64.preheader":   ; preds = %next_bb57
  %3157 = add nsw i32 %output.s0.b.rebased50, %14
  %3158 = mul nsw i32 %3157, %16
  %3159 = sub i32 %3158, %t2326
  br i1 %2774, label %"for resampled_input.s0.y.rebased64.preheader.split.us", label %"consume resampled_input73", !prof !101

"for resampled_input.s0.y.rebased64.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased64.preheader"
  %3160 = sdiv <128 x i32> %3091, %2778
  %3161 = add nsw <128 x i32> %3160, %3092
  %3162 = and <128 x i32> %3161, %2783
  br label %"for resampled_input.s0.y.rebased64.us"

"for resampled_input.s0.y.rebased64.us":          ; preds = %"end for resampled_input.s0.x.rebased68.loopexit.us", %"for resampled_input.s0.y.rebased64.preheader.split.us"
  %resampled_input.s0.y.rebased66.us = phi i32 [ %3690, %"end for resampled_input.s0.x.rebased68.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased64.preheader.split.us" ]
  %3163 = add nsw i32 %2771, %resampled_input.s0.y.rebased66.us
  %3164 = mul nsw i32 %3163, %2772
  %t2367.us = add nsw i32 %2773, %3164
  %3165 = add nsw i32 %resampled_input.s0.y.rebased66.us, %a91
  %3166 = mul nsw i32 %3165, %13
  %t2366.us = add nsw i32 %3159, %3166
  br label %"for resampled_input.s0.x.rebased67.us"

"for resampled_input.s0.x.rebased67.us":          ; preds = %"for resampled_input.s0.y.rebased64.us", %"for resampled_input.s0.x.rebased67.us"
  %resampled_input.s0.x.rebased69.us = phi i32 [ %3689, %"for resampled_input.s0.x.rebased67.us" ], [ 0, %"for resampled_input.s0.y.rebased64.us" ]
  %3167 = add nsw i32 %resampled_input.s0.x.rebased69.us, %a90
  %3168 = mul nsw i32 %3167, %11
  %3169 = add nsw i32 %t2366.us, %3168
  %3170 = insertelement <128 x i32> undef, i32 %3169, i32 0
  %3171 = shufflevector <128 x i32> %3170, <128 x i32> undef, <128 x i32> zeroinitializer
  %3172 = add nsw <128 x i32> %3171, %3162
  %3173 = extractelement <128 x i32> %3172, i32 0
  %3174 = getelementptr inbounds i8, i8* %8, i32 %3173
  %3175 = load i8, i8* %3174, align 1, !tbaa !127
  %3176 = insertelement <128 x i8> undef, i8 %3175, i32 0
  %3177 = extractelement <128 x i32> %3172, i32 1
  %3178 = getelementptr inbounds i8, i8* %8, i32 %3177
  %3179 = load i8, i8* %3178, align 1, !tbaa !127
  %3180 = insertelement <128 x i8> %3176, i8 %3179, i32 1
  %3181 = extractelement <128 x i32> %3172, i32 2
  %3182 = getelementptr inbounds i8, i8* %8, i32 %3181
  %3183 = load i8, i8* %3182, align 1, !tbaa !127
  %3184 = insertelement <128 x i8> %3180, i8 %3183, i32 2
  %3185 = extractelement <128 x i32> %3172, i32 3
  %3186 = getelementptr inbounds i8, i8* %8, i32 %3185
  %3187 = load i8, i8* %3186, align 1, !tbaa !127
  %3188 = insertelement <128 x i8> %3184, i8 %3187, i32 3
  %3189 = extractelement <128 x i32> %3172, i32 4
  %3190 = getelementptr inbounds i8, i8* %8, i32 %3189
  %3191 = load i8, i8* %3190, align 1, !tbaa !127
  %3192 = insertelement <128 x i8> %3188, i8 %3191, i32 4
  %3193 = extractelement <128 x i32> %3172, i32 5
  %3194 = getelementptr inbounds i8, i8* %8, i32 %3193
  %3195 = load i8, i8* %3194, align 1, !tbaa !127
  %3196 = insertelement <128 x i8> %3192, i8 %3195, i32 5
  %3197 = extractelement <128 x i32> %3172, i32 6
  %3198 = getelementptr inbounds i8, i8* %8, i32 %3197
  %3199 = load i8, i8* %3198, align 1, !tbaa !127
  %3200 = insertelement <128 x i8> %3196, i8 %3199, i32 6
  %3201 = extractelement <128 x i32> %3172, i32 7
  %3202 = getelementptr inbounds i8, i8* %8, i32 %3201
  %3203 = load i8, i8* %3202, align 1, !tbaa !127
  %3204 = insertelement <128 x i8> %3200, i8 %3203, i32 7
  %3205 = extractelement <128 x i32> %3172, i32 8
  %3206 = getelementptr inbounds i8, i8* %8, i32 %3205
  %3207 = load i8, i8* %3206, align 1, !tbaa !127
  %3208 = insertelement <128 x i8> %3204, i8 %3207, i32 8
  %3209 = extractelement <128 x i32> %3172, i32 9
  %3210 = getelementptr inbounds i8, i8* %8, i32 %3209
  %3211 = load i8, i8* %3210, align 1, !tbaa !127
  %3212 = insertelement <128 x i8> %3208, i8 %3211, i32 9
  %3213 = extractelement <128 x i32> %3172, i32 10
  %3214 = getelementptr inbounds i8, i8* %8, i32 %3213
  %3215 = load i8, i8* %3214, align 1, !tbaa !127
  %3216 = insertelement <128 x i8> %3212, i8 %3215, i32 10
  %3217 = extractelement <128 x i32> %3172, i32 11
  %3218 = getelementptr inbounds i8, i8* %8, i32 %3217
  %3219 = load i8, i8* %3218, align 1, !tbaa !127
  %3220 = insertelement <128 x i8> %3216, i8 %3219, i32 11
  %3221 = extractelement <128 x i32> %3172, i32 12
  %3222 = getelementptr inbounds i8, i8* %8, i32 %3221
  %3223 = load i8, i8* %3222, align 1, !tbaa !127
  %3224 = insertelement <128 x i8> %3220, i8 %3223, i32 12
  %3225 = extractelement <128 x i32> %3172, i32 13
  %3226 = getelementptr inbounds i8, i8* %8, i32 %3225
  %3227 = load i8, i8* %3226, align 1, !tbaa !127
  %3228 = insertelement <128 x i8> %3224, i8 %3227, i32 13
  %3229 = extractelement <128 x i32> %3172, i32 14
  %3230 = getelementptr inbounds i8, i8* %8, i32 %3229
  %3231 = load i8, i8* %3230, align 1, !tbaa !127
  %3232 = insertelement <128 x i8> %3228, i8 %3231, i32 14
  %3233 = extractelement <128 x i32> %3172, i32 15
  %3234 = getelementptr inbounds i8, i8* %8, i32 %3233
  %3235 = load i8, i8* %3234, align 1, !tbaa !127
  %3236 = insertelement <128 x i8> %3232, i8 %3235, i32 15
  %3237 = extractelement <128 x i32> %3172, i32 16
  %3238 = getelementptr inbounds i8, i8* %8, i32 %3237
  %3239 = load i8, i8* %3238, align 1, !tbaa !127
  %3240 = insertelement <128 x i8> %3236, i8 %3239, i32 16
  %3241 = extractelement <128 x i32> %3172, i32 17
  %3242 = getelementptr inbounds i8, i8* %8, i32 %3241
  %3243 = load i8, i8* %3242, align 1, !tbaa !127
  %3244 = insertelement <128 x i8> %3240, i8 %3243, i32 17
  %3245 = extractelement <128 x i32> %3172, i32 18
  %3246 = getelementptr inbounds i8, i8* %8, i32 %3245
  %3247 = load i8, i8* %3246, align 1, !tbaa !127
  %3248 = insertelement <128 x i8> %3244, i8 %3247, i32 18
  %3249 = extractelement <128 x i32> %3172, i32 19
  %3250 = getelementptr inbounds i8, i8* %8, i32 %3249
  %3251 = load i8, i8* %3250, align 1, !tbaa !127
  %3252 = insertelement <128 x i8> %3248, i8 %3251, i32 19
  %3253 = extractelement <128 x i32> %3172, i32 20
  %3254 = getelementptr inbounds i8, i8* %8, i32 %3253
  %3255 = load i8, i8* %3254, align 1, !tbaa !127
  %3256 = insertelement <128 x i8> %3252, i8 %3255, i32 20
  %3257 = extractelement <128 x i32> %3172, i32 21
  %3258 = getelementptr inbounds i8, i8* %8, i32 %3257
  %3259 = load i8, i8* %3258, align 1, !tbaa !127
  %3260 = insertelement <128 x i8> %3256, i8 %3259, i32 21
  %3261 = extractelement <128 x i32> %3172, i32 22
  %3262 = getelementptr inbounds i8, i8* %8, i32 %3261
  %3263 = load i8, i8* %3262, align 1, !tbaa !127
  %3264 = insertelement <128 x i8> %3260, i8 %3263, i32 22
  %3265 = extractelement <128 x i32> %3172, i32 23
  %3266 = getelementptr inbounds i8, i8* %8, i32 %3265
  %3267 = load i8, i8* %3266, align 1, !tbaa !127
  %3268 = insertelement <128 x i8> %3264, i8 %3267, i32 23
  %3269 = extractelement <128 x i32> %3172, i32 24
  %3270 = getelementptr inbounds i8, i8* %8, i32 %3269
  %3271 = load i8, i8* %3270, align 1, !tbaa !127
  %3272 = insertelement <128 x i8> %3268, i8 %3271, i32 24
  %3273 = extractelement <128 x i32> %3172, i32 25
  %3274 = getelementptr inbounds i8, i8* %8, i32 %3273
  %3275 = load i8, i8* %3274, align 1, !tbaa !127
  %3276 = insertelement <128 x i8> %3272, i8 %3275, i32 25
  %3277 = extractelement <128 x i32> %3172, i32 26
  %3278 = getelementptr inbounds i8, i8* %8, i32 %3277
  %3279 = load i8, i8* %3278, align 1, !tbaa !127
  %3280 = insertelement <128 x i8> %3276, i8 %3279, i32 26
  %3281 = extractelement <128 x i32> %3172, i32 27
  %3282 = getelementptr inbounds i8, i8* %8, i32 %3281
  %3283 = load i8, i8* %3282, align 1, !tbaa !127
  %3284 = insertelement <128 x i8> %3280, i8 %3283, i32 27
  %3285 = extractelement <128 x i32> %3172, i32 28
  %3286 = getelementptr inbounds i8, i8* %8, i32 %3285
  %3287 = load i8, i8* %3286, align 1, !tbaa !127
  %3288 = insertelement <128 x i8> %3284, i8 %3287, i32 28
  %3289 = extractelement <128 x i32> %3172, i32 29
  %3290 = getelementptr inbounds i8, i8* %8, i32 %3289
  %3291 = load i8, i8* %3290, align 1, !tbaa !127
  %3292 = insertelement <128 x i8> %3288, i8 %3291, i32 29
  %3293 = extractelement <128 x i32> %3172, i32 30
  %3294 = getelementptr inbounds i8, i8* %8, i32 %3293
  %3295 = load i8, i8* %3294, align 1, !tbaa !127
  %3296 = insertelement <128 x i8> %3292, i8 %3295, i32 30
  %3297 = extractelement <128 x i32> %3172, i32 31
  %3298 = getelementptr inbounds i8, i8* %8, i32 %3297
  %3299 = load i8, i8* %3298, align 1, !tbaa !127
  %3300 = insertelement <128 x i8> %3296, i8 %3299, i32 31
  %3301 = extractelement <128 x i32> %3172, i32 32
  %3302 = getelementptr inbounds i8, i8* %8, i32 %3301
  %3303 = load i8, i8* %3302, align 1, !tbaa !127
  %3304 = insertelement <128 x i8> %3300, i8 %3303, i32 32
  %3305 = extractelement <128 x i32> %3172, i32 33
  %3306 = getelementptr inbounds i8, i8* %8, i32 %3305
  %3307 = load i8, i8* %3306, align 1, !tbaa !127
  %3308 = insertelement <128 x i8> %3304, i8 %3307, i32 33
  %3309 = extractelement <128 x i32> %3172, i32 34
  %3310 = getelementptr inbounds i8, i8* %8, i32 %3309
  %3311 = load i8, i8* %3310, align 1, !tbaa !127
  %3312 = insertelement <128 x i8> %3308, i8 %3311, i32 34
  %3313 = extractelement <128 x i32> %3172, i32 35
  %3314 = getelementptr inbounds i8, i8* %8, i32 %3313
  %3315 = load i8, i8* %3314, align 1, !tbaa !127
  %3316 = insertelement <128 x i8> %3312, i8 %3315, i32 35
  %3317 = extractelement <128 x i32> %3172, i32 36
  %3318 = getelementptr inbounds i8, i8* %8, i32 %3317
  %3319 = load i8, i8* %3318, align 1, !tbaa !127
  %3320 = insertelement <128 x i8> %3316, i8 %3319, i32 36
  %3321 = extractelement <128 x i32> %3172, i32 37
  %3322 = getelementptr inbounds i8, i8* %8, i32 %3321
  %3323 = load i8, i8* %3322, align 1, !tbaa !127
  %3324 = insertelement <128 x i8> %3320, i8 %3323, i32 37
  %3325 = extractelement <128 x i32> %3172, i32 38
  %3326 = getelementptr inbounds i8, i8* %8, i32 %3325
  %3327 = load i8, i8* %3326, align 1, !tbaa !127
  %3328 = insertelement <128 x i8> %3324, i8 %3327, i32 38
  %3329 = extractelement <128 x i32> %3172, i32 39
  %3330 = getelementptr inbounds i8, i8* %8, i32 %3329
  %3331 = load i8, i8* %3330, align 1, !tbaa !127
  %3332 = insertelement <128 x i8> %3328, i8 %3331, i32 39
  %3333 = extractelement <128 x i32> %3172, i32 40
  %3334 = getelementptr inbounds i8, i8* %8, i32 %3333
  %3335 = load i8, i8* %3334, align 1, !tbaa !127
  %3336 = insertelement <128 x i8> %3332, i8 %3335, i32 40
  %3337 = extractelement <128 x i32> %3172, i32 41
  %3338 = getelementptr inbounds i8, i8* %8, i32 %3337
  %3339 = load i8, i8* %3338, align 1, !tbaa !127
  %3340 = insertelement <128 x i8> %3336, i8 %3339, i32 41
  %3341 = extractelement <128 x i32> %3172, i32 42
  %3342 = getelementptr inbounds i8, i8* %8, i32 %3341
  %3343 = load i8, i8* %3342, align 1, !tbaa !127
  %3344 = insertelement <128 x i8> %3340, i8 %3343, i32 42
  %3345 = extractelement <128 x i32> %3172, i32 43
  %3346 = getelementptr inbounds i8, i8* %8, i32 %3345
  %3347 = load i8, i8* %3346, align 1, !tbaa !127
  %3348 = insertelement <128 x i8> %3344, i8 %3347, i32 43
  %3349 = extractelement <128 x i32> %3172, i32 44
  %3350 = getelementptr inbounds i8, i8* %8, i32 %3349
  %3351 = load i8, i8* %3350, align 1, !tbaa !127
  %3352 = insertelement <128 x i8> %3348, i8 %3351, i32 44
  %3353 = extractelement <128 x i32> %3172, i32 45
  %3354 = getelementptr inbounds i8, i8* %8, i32 %3353
  %3355 = load i8, i8* %3354, align 1, !tbaa !127
  %3356 = insertelement <128 x i8> %3352, i8 %3355, i32 45
  %3357 = extractelement <128 x i32> %3172, i32 46
  %3358 = getelementptr inbounds i8, i8* %8, i32 %3357
  %3359 = load i8, i8* %3358, align 1, !tbaa !127
  %3360 = insertelement <128 x i8> %3356, i8 %3359, i32 46
  %3361 = extractelement <128 x i32> %3172, i32 47
  %3362 = getelementptr inbounds i8, i8* %8, i32 %3361
  %3363 = load i8, i8* %3362, align 1, !tbaa !127
  %3364 = insertelement <128 x i8> %3360, i8 %3363, i32 47
  %3365 = extractelement <128 x i32> %3172, i32 48
  %3366 = getelementptr inbounds i8, i8* %8, i32 %3365
  %3367 = load i8, i8* %3366, align 1, !tbaa !127
  %3368 = insertelement <128 x i8> %3364, i8 %3367, i32 48
  %3369 = extractelement <128 x i32> %3172, i32 49
  %3370 = getelementptr inbounds i8, i8* %8, i32 %3369
  %3371 = load i8, i8* %3370, align 1, !tbaa !127
  %3372 = insertelement <128 x i8> %3368, i8 %3371, i32 49
  %3373 = extractelement <128 x i32> %3172, i32 50
  %3374 = getelementptr inbounds i8, i8* %8, i32 %3373
  %3375 = load i8, i8* %3374, align 1, !tbaa !127
  %3376 = insertelement <128 x i8> %3372, i8 %3375, i32 50
  %3377 = extractelement <128 x i32> %3172, i32 51
  %3378 = getelementptr inbounds i8, i8* %8, i32 %3377
  %3379 = load i8, i8* %3378, align 1, !tbaa !127
  %3380 = insertelement <128 x i8> %3376, i8 %3379, i32 51
  %3381 = extractelement <128 x i32> %3172, i32 52
  %3382 = getelementptr inbounds i8, i8* %8, i32 %3381
  %3383 = load i8, i8* %3382, align 1, !tbaa !127
  %3384 = insertelement <128 x i8> %3380, i8 %3383, i32 52
  %3385 = extractelement <128 x i32> %3172, i32 53
  %3386 = getelementptr inbounds i8, i8* %8, i32 %3385
  %3387 = load i8, i8* %3386, align 1, !tbaa !127
  %3388 = insertelement <128 x i8> %3384, i8 %3387, i32 53
  %3389 = extractelement <128 x i32> %3172, i32 54
  %3390 = getelementptr inbounds i8, i8* %8, i32 %3389
  %3391 = load i8, i8* %3390, align 1, !tbaa !127
  %3392 = insertelement <128 x i8> %3388, i8 %3391, i32 54
  %3393 = extractelement <128 x i32> %3172, i32 55
  %3394 = getelementptr inbounds i8, i8* %8, i32 %3393
  %3395 = load i8, i8* %3394, align 1, !tbaa !127
  %3396 = insertelement <128 x i8> %3392, i8 %3395, i32 55
  %3397 = extractelement <128 x i32> %3172, i32 56
  %3398 = getelementptr inbounds i8, i8* %8, i32 %3397
  %3399 = load i8, i8* %3398, align 1, !tbaa !127
  %3400 = insertelement <128 x i8> %3396, i8 %3399, i32 56
  %3401 = extractelement <128 x i32> %3172, i32 57
  %3402 = getelementptr inbounds i8, i8* %8, i32 %3401
  %3403 = load i8, i8* %3402, align 1, !tbaa !127
  %3404 = insertelement <128 x i8> %3400, i8 %3403, i32 57
  %3405 = extractelement <128 x i32> %3172, i32 58
  %3406 = getelementptr inbounds i8, i8* %8, i32 %3405
  %3407 = load i8, i8* %3406, align 1, !tbaa !127
  %3408 = insertelement <128 x i8> %3404, i8 %3407, i32 58
  %3409 = extractelement <128 x i32> %3172, i32 59
  %3410 = getelementptr inbounds i8, i8* %8, i32 %3409
  %3411 = load i8, i8* %3410, align 1, !tbaa !127
  %3412 = insertelement <128 x i8> %3408, i8 %3411, i32 59
  %3413 = extractelement <128 x i32> %3172, i32 60
  %3414 = getelementptr inbounds i8, i8* %8, i32 %3413
  %3415 = load i8, i8* %3414, align 1, !tbaa !127
  %3416 = insertelement <128 x i8> %3412, i8 %3415, i32 60
  %3417 = extractelement <128 x i32> %3172, i32 61
  %3418 = getelementptr inbounds i8, i8* %8, i32 %3417
  %3419 = load i8, i8* %3418, align 1, !tbaa !127
  %3420 = insertelement <128 x i8> %3416, i8 %3419, i32 61
  %3421 = extractelement <128 x i32> %3172, i32 62
  %3422 = getelementptr inbounds i8, i8* %8, i32 %3421
  %3423 = load i8, i8* %3422, align 1, !tbaa !127
  %3424 = insertelement <128 x i8> %3420, i8 %3423, i32 62
  %3425 = extractelement <128 x i32> %3172, i32 63
  %3426 = getelementptr inbounds i8, i8* %8, i32 %3425
  %3427 = load i8, i8* %3426, align 1, !tbaa !127
  %3428 = insertelement <128 x i8> %3424, i8 %3427, i32 63
  %3429 = extractelement <128 x i32> %3172, i32 64
  %3430 = getelementptr inbounds i8, i8* %8, i32 %3429
  %3431 = load i8, i8* %3430, align 1, !tbaa !127
  %3432 = insertelement <128 x i8> %3428, i8 %3431, i32 64
  %3433 = extractelement <128 x i32> %3172, i32 65
  %3434 = getelementptr inbounds i8, i8* %8, i32 %3433
  %3435 = load i8, i8* %3434, align 1, !tbaa !127
  %3436 = insertelement <128 x i8> %3432, i8 %3435, i32 65
  %3437 = extractelement <128 x i32> %3172, i32 66
  %3438 = getelementptr inbounds i8, i8* %8, i32 %3437
  %3439 = load i8, i8* %3438, align 1, !tbaa !127
  %3440 = insertelement <128 x i8> %3436, i8 %3439, i32 66
  %3441 = extractelement <128 x i32> %3172, i32 67
  %3442 = getelementptr inbounds i8, i8* %8, i32 %3441
  %3443 = load i8, i8* %3442, align 1, !tbaa !127
  %3444 = insertelement <128 x i8> %3440, i8 %3443, i32 67
  %3445 = extractelement <128 x i32> %3172, i32 68
  %3446 = getelementptr inbounds i8, i8* %8, i32 %3445
  %3447 = load i8, i8* %3446, align 1, !tbaa !127
  %3448 = insertelement <128 x i8> %3444, i8 %3447, i32 68
  %3449 = extractelement <128 x i32> %3172, i32 69
  %3450 = getelementptr inbounds i8, i8* %8, i32 %3449
  %3451 = load i8, i8* %3450, align 1, !tbaa !127
  %3452 = insertelement <128 x i8> %3448, i8 %3451, i32 69
  %3453 = extractelement <128 x i32> %3172, i32 70
  %3454 = getelementptr inbounds i8, i8* %8, i32 %3453
  %3455 = load i8, i8* %3454, align 1, !tbaa !127
  %3456 = insertelement <128 x i8> %3452, i8 %3455, i32 70
  %3457 = extractelement <128 x i32> %3172, i32 71
  %3458 = getelementptr inbounds i8, i8* %8, i32 %3457
  %3459 = load i8, i8* %3458, align 1, !tbaa !127
  %3460 = insertelement <128 x i8> %3456, i8 %3459, i32 71
  %3461 = extractelement <128 x i32> %3172, i32 72
  %3462 = getelementptr inbounds i8, i8* %8, i32 %3461
  %3463 = load i8, i8* %3462, align 1, !tbaa !127
  %3464 = insertelement <128 x i8> %3460, i8 %3463, i32 72
  %3465 = extractelement <128 x i32> %3172, i32 73
  %3466 = getelementptr inbounds i8, i8* %8, i32 %3465
  %3467 = load i8, i8* %3466, align 1, !tbaa !127
  %3468 = insertelement <128 x i8> %3464, i8 %3467, i32 73
  %3469 = extractelement <128 x i32> %3172, i32 74
  %3470 = getelementptr inbounds i8, i8* %8, i32 %3469
  %3471 = load i8, i8* %3470, align 1, !tbaa !127
  %3472 = insertelement <128 x i8> %3468, i8 %3471, i32 74
  %3473 = extractelement <128 x i32> %3172, i32 75
  %3474 = getelementptr inbounds i8, i8* %8, i32 %3473
  %3475 = load i8, i8* %3474, align 1, !tbaa !127
  %3476 = insertelement <128 x i8> %3472, i8 %3475, i32 75
  %3477 = extractelement <128 x i32> %3172, i32 76
  %3478 = getelementptr inbounds i8, i8* %8, i32 %3477
  %3479 = load i8, i8* %3478, align 1, !tbaa !127
  %3480 = insertelement <128 x i8> %3476, i8 %3479, i32 76
  %3481 = extractelement <128 x i32> %3172, i32 77
  %3482 = getelementptr inbounds i8, i8* %8, i32 %3481
  %3483 = load i8, i8* %3482, align 1, !tbaa !127
  %3484 = insertelement <128 x i8> %3480, i8 %3483, i32 77
  %3485 = extractelement <128 x i32> %3172, i32 78
  %3486 = getelementptr inbounds i8, i8* %8, i32 %3485
  %3487 = load i8, i8* %3486, align 1, !tbaa !127
  %3488 = insertelement <128 x i8> %3484, i8 %3487, i32 78
  %3489 = extractelement <128 x i32> %3172, i32 79
  %3490 = getelementptr inbounds i8, i8* %8, i32 %3489
  %3491 = load i8, i8* %3490, align 1, !tbaa !127
  %3492 = insertelement <128 x i8> %3488, i8 %3491, i32 79
  %3493 = extractelement <128 x i32> %3172, i32 80
  %3494 = getelementptr inbounds i8, i8* %8, i32 %3493
  %3495 = load i8, i8* %3494, align 1, !tbaa !127
  %3496 = insertelement <128 x i8> %3492, i8 %3495, i32 80
  %3497 = extractelement <128 x i32> %3172, i32 81
  %3498 = getelementptr inbounds i8, i8* %8, i32 %3497
  %3499 = load i8, i8* %3498, align 1, !tbaa !127
  %3500 = insertelement <128 x i8> %3496, i8 %3499, i32 81
  %3501 = extractelement <128 x i32> %3172, i32 82
  %3502 = getelementptr inbounds i8, i8* %8, i32 %3501
  %3503 = load i8, i8* %3502, align 1, !tbaa !127
  %3504 = insertelement <128 x i8> %3500, i8 %3503, i32 82
  %3505 = extractelement <128 x i32> %3172, i32 83
  %3506 = getelementptr inbounds i8, i8* %8, i32 %3505
  %3507 = load i8, i8* %3506, align 1, !tbaa !127
  %3508 = insertelement <128 x i8> %3504, i8 %3507, i32 83
  %3509 = extractelement <128 x i32> %3172, i32 84
  %3510 = getelementptr inbounds i8, i8* %8, i32 %3509
  %3511 = load i8, i8* %3510, align 1, !tbaa !127
  %3512 = insertelement <128 x i8> %3508, i8 %3511, i32 84
  %3513 = extractelement <128 x i32> %3172, i32 85
  %3514 = getelementptr inbounds i8, i8* %8, i32 %3513
  %3515 = load i8, i8* %3514, align 1, !tbaa !127
  %3516 = insertelement <128 x i8> %3512, i8 %3515, i32 85
  %3517 = extractelement <128 x i32> %3172, i32 86
  %3518 = getelementptr inbounds i8, i8* %8, i32 %3517
  %3519 = load i8, i8* %3518, align 1, !tbaa !127
  %3520 = insertelement <128 x i8> %3516, i8 %3519, i32 86
  %3521 = extractelement <128 x i32> %3172, i32 87
  %3522 = getelementptr inbounds i8, i8* %8, i32 %3521
  %3523 = load i8, i8* %3522, align 1, !tbaa !127
  %3524 = insertelement <128 x i8> %3520, i8 %3523, i32 87
  %3525 = extractelement <128 x i32> %3172, i32 88
  %3526 = getelementptr inbounds i8, i8* %8, i32 %3525
  %3527 = load i8, i8* %3526, align 1, !tbaa !127
  %3528 = insertelement <128 x i8> %3524, i8 %3527, i32 88
  %3529 = extractelement <128 x i32> %3172, i32 89
  %3530 = getelementptr inbounds i8, i8* %8, i32 %3529
  %3531 = load i8, i8* %3530, align 1, !tbaa !127
  %3532 = insertelement <128 x i8> %3528, i8 %3531, i32 89
  %3533 = extractelement <128 x i32> %3172, i32 90
  %3534 = getelementptr inbounds i8, i8* %8, i32 %3533
  %3535 = load i8, i8* %3534, align 1, !tbaa !127
  %3536 = insertelement <128 x i8> %3532, i8 %3535, i32 90
  %3537 = extractelement <128 x i32> %3172, i32 91
  %3538 = getelementptr inbounds i8, i8* %8, i32 %3537
  %3539 = load i8, i8* %3538, align 1, !tbaa !127
  %3540 = insertelement <128 x i8> %3536, i8 %3539, i32 91
  %3541 = extractelement <128 x i32> %3172, i32 92
  %3542 = getelementptr inbounds i8, i8* %8, i32 %3541
  %3543 = load i8, i8* %3542, align 1, !tbaa !127
  %3544 = insertelement <128 x i8> %3540, i8 %3543, i32 92
  %3545 = extractelement <128 x i32> %3172, i32 93
  %3546 = getelementptr inbounds i8, i8* %8, i32 %3545
  %3547 = load i8, i8* %3546, align 1, !tbaa !127
  %3548 = insertelement <128 x i8> %3544, i8 %3547, i32 93
  %3549 = extractelement <128 x i32> %3172, i32 94
  %3550 = getelementptr inbounds i8, i8* %8, i32 %3549
  %3551 = load i8, i8* %3550, align 1, !tbaa !127
  %3552 = insertelement <128 x i8> %3548, i8 %3551, i32 94
  %3553 = extractelement <128 x i32> %3172, i32 95
  %3554 = getelementptr inbounds i8, i8* %8, i32 %3553
  %3555 = load i8, i8* %3554, align 1, !tbaa !127
  %3556 = insertelement <128 x i8> %3552, i8 %3555, i32 95
  %3557 = extractelement <128 x i32> %3172, i32 96
  %3558 = getelementptr inbounds i8, i8* %8, i32 %3557
  %3559 = load i8, i8* %3558, align 1, !tbaa !127
  %3560 = insertelement <128 x i8> %3556, i8 %3559, i32 96
  %3561 = extractelement <128 x i32> %3172, i32 97
  %3562 = getelementptr inbounds i8, i8* %8, i32 %3561
  %3563 = load i8, i8* %3562, align 1, !tbaa !127
  %3564 = insertelement <128 x i8> %3560, i8 %3563, i32 97
  %3565 = extractelement <128 x i32> %3172, i32 98
  %3566 = getelementptr inbounds i8, i8* %8, i32 %3565
  %3567 = load i8, i8* %3566, align 1, !tbaa !127
  %3568 = insertelement <128 x i8> %3564, i8 %3567, i32 98
  %3569 = extractelement <128 x i32> %3172, i32 99
  %3570 = getelementptr inbounds i8, i8* %8, i32 %3569
  %3571 = load i8, i8* %3570, align 1, !tbaa !127
  %3572 = insertelement <128 x i8> %3568, i8 %3571, i32 99
  %3573 = extractelement <128 x i32> %3172, i32 100
  %3574 = getelementptr inbounds i8, i8* %8, i32 %3573
  %3575 = load i8, i8* %3574, align 1, !tbaa !127
  %3576 = insertelement <128 x i8> %3572, i8 %3575, i32 100
  %3577 = extractelement <128 x i32> %3172, i32 101
  %3578 = getelementptr inbounds i8, i8* %8, i32 %3577
  %3579 = load i8, i8* %3578, align 1, !tbaa !127
  %3580 = insertelement <128 x i8> %3576, i8 %3579, i32 101
  %3581 = extractelement <128 x i32> %3172, i32 102
  %3582 = getelementptr inbounds i8, i8* %8, i32 %3581
  %3583 = load i8, i8* %3582, align 1, !tbaa !127
  %3584 = insertelement <128 x i8> %3580, i8 %3583, i32 102
  %3585 = extractelement <128 x i32> %3172, i32 103
  %3586 = getelementptr inbounds i8, i8* %8, i32 %3585
  %3587 = load i8, i8* %3586, align 1, !tbaa !127
  %3588 = insertelement <128 x i8> %3584, i8 %3587, i32 103
  %3589 = extractelement <128 x i32> %3172, i32 104
  %3590 = getelementptr inbounds i8, i8* %8, i32 %3589
  %3591 = load i8, i8* %3590, align 1, !tbaa !127
  %3592 = insertelement <128 x i8> %3588, i8 %3591, i32 104
  %3593 = extractelement <128 x i32> %3172, i32 105
  %3594 = getelementptr inbounds i8, i8* %8, i32 %3593
  %3595 = load i8, i8* %3594, align 1, !tbaa !127
  %3596 = insertelement <128 x i8> %3592, i8 %3595, i32 105
  %3597 = extractelement <128 x i32> %3172, i32 106
  %3598 = getelementptr inbounds i8, i8* %8, i32 %3597
  %3599 = load i8, i8* %3598, align 1, !tbaa !127
  %3600 = insertelement <128 x i8> %3596, i8 %3599, i32 106
  %3601 = extractelement <128 x i32> %3172, i32 107
  %3602 = getelementptr inbounds i8, i8* %8, i32 %3601
  %3603 = load i8, i8* %3602, align 1, !tbaa !127
  %3604 = insertelement <128 x i8> %3600, i8 %3603, i32 107
  %3605 = extractelement <128 x i32> %3172, i32 108
  %3606 = getelementptr inbounds i8, i8* %8, i32 %3605
  %3607 = load i8, i8* %3606, align 1, !tbaa !127
  %3608 = insertelement <128 x i8> %3604, i8 %3607, i32 108
  %3609 = extractelement <128 x i32> %3172, i32 109
  %3610 = getelementptr inbounds i8, i8* %8, i32 %3609
  %3611 = load i8, i8* %3610, align 1, !tbaa !127
  %3612 = insertelement <128 x i8> %3608, i8 %3611, i32 109
  %3613 = extractelement <128 x i32> %3172, i32 110
  %3614 = getelementptr inbounds i8, i8* %8, i32 %3613
  %3615 = load i8, i8* %3614, align 1, !tbaa !127
  %3616 = insertelement <128 x i8> %3612, i8 %3615, i32 110
  %3617 = extractelement <128 x i32> %3172, i32 111
  %3618 = getelementptr inbounds i8, i8* %8, i32 %3617
  %3619 = load i8, i8* %3618, align 1, !tbaa !127
  %3620 = insertelement <128 x i8> %3616, i8 %3619, i32 111
  %3621 = extractelement <128 x i32> %3172, i32 112
  %3622 = getelementptr inbounds i8, i8* %8, i32 %3621
  %3623 = load i8, i8* %3622, align 1, !tbaa !127
  %3624 = insertelement <128 x i8> %3620, i8 %3623, i32 112
  %3625 = extractelement <128 x i32> %3172, i32 113
  %3626 = getelementptr inbounds i8, i8* %8, i32 %3625
  %3627 = load i8, i8* %3626, align 1, !tbaa !127
  %3628 = insertelement <128 x i8> %3624, i8 %3627, i32 113
  %3629 = extractelement <128 x i32> %3172, i32 114
  %3630 = getelementptr inbounds i8, i8* %8, i32 %3629
  %3631 = load i8, i8* %3630, align 1, !tbaa !127
  %3632 = insertelement <128 x i8> %3628, i8 %3631, i32 114
  %3633 = extractelement <128 x i32> %3172, i32 115
  %3634 = getelementptr inbounds i8, i8* %8, i32 %3633
  %3635 = load i8, i8* %3634, align 1, !tbaa !127
  %3636 = insertelement <128 x i8> %3632, i8 %3635, i32 115
  %3637 = extractelement <128 x i32> %3172, i32 116
  %3638 = getelementptr inbounds i8, i8* %8, i32 %3637
  %3639 = load i8, i8* %3638, align 1, !tbaa !127
  %3640 = insertelement <128 x i8> %3636, i8 %3639, i32 116
  %3641 = extractelement <128 x i32> %3172, i32 117
  %3642 = getelementptr inbounds i8, i8* %8, i32 %3641
  %3643 = load i8, i8* %3642, align 1, !tbaa !127
  %3644 = insertelement <128 x i8> %3640, i8 %3643, i32 117
  %3645 = extractelement <128 x i32> %3172, i32 118
  %3646 = getelementptr inbounds i8, i8* %8, i32 %3645
  %3647 = load i8, i8* %3646, align 1, !tbaa !127
  %3648 = insertelement <128 x i8> %3644, i8 %3647, i32 118
  %3649 = extractelement <128 x i32> %3172, i32 119
  %3650 = getelementptr inbounds i8, i8* %8, i32 %3649
  %3651 = load i8, i8* %3650, align 1, !tbaa !127
  %3652 = insertelement <128 x i8> %3648, i8 %3651, i32 119
  %3653 = extractelement <128 x i32> %3172, i32 120
  %3654 = getelementptr inbounds i8, i8* %8, i32 %3653
  %3655 = load i8, i8* %3654, align 1, !tbaa !127
  %3656 = insertelement <128 x i8> %3652, i8 %3655, i32 120
  %3657 = extractelement <128 x i32> %3172, i32 121
  %3658 = getelementptr inbounds i8, i8* %8, i32 %3657
  %3659 = load i8, i8* %3658, align 1, !tbaa !127
  %3660 = insertelement <128 x i8> %3656, i8 %3659, i32 121
  %3661 = extractelement <128 x i32> %3172, i32 122
  %3662 = getelementptr inbounds i8, i8* %8, i32 %3661
  %3663 = load i8, i8* %3662, align 1, !tbaa !127
  %3664 = insertelement <128 x i8> %3660, i8 %3663, i32 122
  %3665 = extractelement <128 x i32> %3172, i32 123
  %3666 = getelementptr inbounds i8, i8* %8, i32 %3665
  %3667 = load i8, i8* %3666, align 1, !tbaa !127
  %3668 = insertelement <128 x i8> %3664, i8 %3667, i32 123
  %3669 = extractelement <128 x i32> %3172, i32 124
  %3670 = getelementptr inbounds i8, i8* %8, i32 %3669
  %3671 = load i8, i8* %3670, align 1, !tbaa !127
  %3672 = insertelement <128 x i8> %3668, i8 %3671, i32 124
  %3673 = extractelement <128 x i32> %3172, i32 125
  %3674 = getelementptr inbounds i8, i8* %8, i32 %3673
  %3675 = load i8, i8* %3674, align 1, !tbaa !127
  %3676 = insertelement <128 x i8> %3672, i8 %3675, i32 125
  %3677 = extractelement <128 x i32> %3172, i32 126
  %3678 = getelementptr inbounds i8, i8* %8, i32 %3677
  %3679 = load i8, i8* %3678, align 1, !tbaa !127
  %3680 = insertelement <128 x i8> %3676, i8 %3679, i32 126
  %3681 = extractelement <128 x i32> %3172, i32 127
  %3682 = getelementptr inbounds i8, i8* %8, i32 %3681
  %3683 = load i8, i8* %3682, align 1, !tbaa !127
  %3684 = insertelement <128 x i8> %3680, i8 %3683, i32 127
  %3685 = add nsw i32 %t2367.us, %resampled_input.s0.x.rebased69.us
  %3686 = shl nsw i32 %3685, 7
  %3687 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3686
  %3688 = bitcast i8* %3687 to <128 x i8>*
  store <128 x i8> %3684, <128 x i8>* %3688, align 128, !tbaa !129
  %3689 = add nuw nsw i32 %resampled_input.s0.x.rebased69.us, 1
  %.not667.us = icmp eq i32 %resampled_input.s0.x.rebased69.us, %t2351
  br i1 %.not667.us, label %"end for resampled_input.s0.x.rebased68.loopexit.us", label %"for resampled_input.s0.x.rebased67.us"

"end for resampled_input.s0.x.rebased68.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased67.us"
  %3690 = add nuw nsw i32 %resampled_input.s0.y.rebased66.us, 1
  %.not666.us = icmp eq i32 %resampled_input.s0.y.rebased66.us, %t2350
  br i1 %.not666.us, label %"consume resampled_input73", label %"for resampled_input.s0.y.rebased64.us"

"consume resampled_input73":                      ; preds = %"end for resampled_input.s0.x.rebased68.loopexit.us", %"end for resampled_input.s0.x.rebased62.loopexit.us", %then_bb56, %"for resampled_input.s0.y.rebased64.preheader", %next_bb57
  br i1 %2784, label %"for output.s0.y.yo74.preheader", label %"end for output.s0.y.yo75", !prof !101

"for output.s0.y.yo74.preheader":                 ; preds = %"consume resampled_input73"
  %3691 = add nsw i32 %output.s0.b.rebased50, %14
  %3692 = mul nsw i32 %3691, %25
  %t2374 = add i32 %3129, %3692
  br label %"for output.s0.y.yo74"

"for output.s0.y.yo74":                           ; preds = %"for output.s0.y.yo74.preheader", %"end for output.s0.x.xo78"
  %output.s0.y.yo76 = phi i32 [ %3703, %"end for output.s0.x.xo78" ], [ 0, %"for output.s0.y.yo74.preheader" ]
  %3693 = add nsw i32 %output.s0.y.yo76, %22
  %3694 = mul nsw i32 %3693, %stride_y
  %3695 = add nsw i32 %2785, %3694
  %t2390 = mul nsw i32 %3695, %2772
  %3696 = add nsw i32 %2786, %3694
  %t2392 = mul nsw i32 %3696, %2772
  %3697 = sub nsw i32 %3694, %t2346
  %t2394 = mul nsw i32 %3697, %2772
  br i1 %2787, label %"for output.s0.x.xo77.preheader", label %"end for output.s0.x.xo78", !prof !101

"for output.s0.x.xo77.preheader":                 ; preds = %"for output.s0.y.yo74"
  %3698 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %3699 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2801) #11
  %3700 = mul nsw i32 %3693, %24
  %3701 = add i32 %t2374, %3700
  br label %"for output.s0.x.xo77"

"end for output.s0.y.yo75":                       ; preds = %"end for output.s0.x.xo78", %"consume resampled_input73"
  %3702 = add nuw nsw i32 %output.s0.b.rebased50, 1
  %.not661 = icmp eq i32 %3702, %15
  br i1 %.not661, label %"end for output.s0.b.rebased49", label %"for output.s0.b.rebased48"

"for output.s0.x.xo77":                           ; preds = %"for output.s0.x.xo77.preheader", %"consume convolved90"
  %output.s0.x.xo79 = phi i32 [ %4276, %"consume convolved90" ], [ 0, %"for output.s0.x.xo77.preheader" ]
  br i1 %t2340, label %then_bb82, label %next_bb83

"end for output.s0.x.xo78.loopexit":              ; preds = %"consume convolved90"
  store <32 x i32> %.lcssa4763.us.lcssa4779, <32 x i32>* %2788, align 128, !tbaa !111
  store <32 x i32> %.lcssa4765.us.lcssa4782, <32 x i32>* %2790, align 128, !tbaa !119
  store <32 x i32> %.lcssa4767.us.lcssa4785, <32 x i32>* %2792, align 128, !tbaa !121
  store <32 x i32> %.lcssa4769.us.lcssa4788, <32 x i32>* %2794, align 128, !tbaa !124
  br label %"end for output.s0.x.xo78"

"end for output.s0.x.xo78":                       ; preds = %"end for output.s0.x.xo78.loopexit", %"for output.s0.y.yo74"
  %3703 = add nuw nsw i32 %output.s0.y.yo76, 1
  %.not662 = icmp eq i32 %3703, %23
  br i1 %.not662, label %"end for output.s0.y.yo75", label %"for output.s0.y.yo74"

then_bb82:                                        ; preds = %"for output.s0.x.xo77"
  %3704 = load <32 x i32>, <32 x i32>* %3096, align 128, !tbaa !105
  %3705 = add nsw i32 %output.s0.x.xo79, %19
  %3706 = mul nsw i32 %3705, %stride_x
  %3707 = add i32 %3706, %2795
  %3708 = add i32 %3707, %t2390
  %3709 = shl nsw i32 %3708, 7
  %3710 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3709
  %3711 = bitcast i8* %3710 to <64 x i8>*
  %3712 = load <64 x i8>, <64 x i8>* %3711, align 128, !tbaa !129
  %3713 = zext <64 x i8> %3712 to <64 x i16>
  %3714 = load <32 x i32>, <32 x i32>* %3098, align 128, !tbaa !105
  %3715 = add i32 %3706, %2796
  %3716 = add i32 %3715, %t2390
  %3717 = shl nsw i32 %3716, 7
  %3718 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3717
  %3719 = bitcast i8* %3718 to <64 x i8>*
  %3720 = load <64 x i8>, <64 x i8>* %3719, align 128, !tbaa !129
  %3721 = zext <64 x i8> %3720 to <64 x i16>
  %3722 = load <32 x i32>, <32 x i32>* %3099, align 128, !tbaa !105
  %3723 = add i32 %3706, %t2390
  %3724 = sub i32 %3723, %t2348
  %3725 = shl nsw i32 %3724, 7
  %3726 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3725
  %3727 = bitcast i8* %3726 to <64 x i8>*
  %3728 = load <64 x i8>, <64 x i8>* %3727, align 128, !tbaa !129
  %3729 = zext <64 x i8> %3728 to <64 x i16>
  %3730 = load <32 x i32>, <32 x i32>* %3102, align 128, !tbaa !105
  %3731 = add i32 %3707, %t2392
  %3732 = shl nsw i32 %3731, 7
  %3733 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3732
  %3734 = bitcast i8* %3733 to <64 x i8>*
  %3735 = load <64 x i8>, <64 x i8>* %3734, align 128, !tbaa !129
  %3736 = zext <64 x i8> %3735 to <64 x i16>
  %3737 = load <32 x i32>, <32 x i32>* %3104, align 128, !tbaa !105
  %3738 = add i32 %3715, %t2392
  %3739 = shl nsw i32 %3738, 7
  %3740 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3739
  %3741 = bitcast i8* %3740 to <64 x i8>*
  %3742 = load <64 x i8>, <64 x i8>* %3741, align 128, !tbaa !129
  %3743 = zext <64 x i8> %3742 to <64 x i16>
  %3744 = load <32 x i32>, <32 x i32>* %3105, align 128, !tbaa !105
  %3745 = add i32 %3706, %t2392
  %3746 = sub i32 %3745, %t2348
  %3747 = shl nsw i32 %3746, 7
  %3748 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3747
  %3749 = bitcast i8* %3748 to <64 x i8>*
  %3750 = load <64 x i8>, <64 x i8>* %3749, align 128, !tbaa !129
  %3751 = zext <64 x i8> %3750 to <64 x i16>
  %3752 = load <32 x i32>, <32 x i32>* %3107, align 128, !tbaa !180
  %3753 = add i32 %3707, %t2394
  %3754 = shl nsw i32 %3753, 7
  %3755 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3754
  %3756 = bitcast i8* %3755 to <64 x i8>*
  %3757 = load <64 x i8>, <64 x i8>* %3756, align 128, !tbaa !129
  %3758 = zext <64 x i8> %3757 to <64 x i16>
  %3759 = load <32 x i32>, <32 x i32>* %3109, align 128, !tbaa !186
  %3760 = add i32 %3715, %t2394
  %3761 = shl nsw i32 %3760, 7
  %3762 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3761
  %3763 = bitcast i8* %3762 to <64 x i8>*
  %3764 = load <64 x i8>, <64 x i8>* %3763, align 128, !tbaa !129
  %3765 = zext <64 x i8> %3764 to <64 x i16>
  %3766 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3085, <32 x i32> %3084)
  %3767 = load <32 x i32>, <32 x i32>* %3110, align 128, !tbaa !190
  %3768 = add i32 %3706, %t2394
  %3769 = sub i32 %3768, %t2348
  %3770 = shl nsw i32 %3769, 7
  %3771 = getelementptr inbounds i8, i8* %resampled_input53, i32 %3770
  %3772 = bitcast i8* %3771 to <64 x i8>*
  %3773 = load <64 x i8>, <64 x i8>* %3772, align 128, !tbaa !129
  %3774 = zext <64 x i8> %3773 to <64 x i16>
  %3775 = bitcast <64 x i16> %3713 to <32 x i32>
  %3776 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3775) #11
  %3777 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3776) #11
  %3778 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3704) #11
  %3779 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3778) #11
  %3780 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3777, <32 x i32> %3779) #11
  %3781 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3780, <32 x i32> %3777, <32 x i32> %3779) #11
  %3782 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3776) #11
  %3783 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3778) #11
  %3784 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3782, <32 x i32> %3783) #11
  %3785 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3784, <32 x i32> %3782, <32 x i32> %3783) #11
  %3786 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3781, <32 x i32> %3785) #11
  %3787 = bitcast <64 x i16> %3721 to <32 x i32>
  %3788 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3787) #11
  %3789 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3714) #11
  %3790 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3788, <32 x i32> %3789) #11
  %3791 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3790) #11
  %3792 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3790) #11
  %3793 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3791, <32 x i32> %3792) #11
  %3794 = bitcast <64 x i16> %3736 to <32 x i32>
  %3795 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3794) #11
  %3796 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3795) #11
  %3797 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3730) #11
  %3798 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3797) #11
  %3799 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3796, <32 x i32> %3798) #11
  %3800 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3799, <32 x i32> %3796, <32 x i32> %3798) #11
  %3801 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3795) #11
  %3802 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3797) #11
  %3803 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3801, <32 x i32> %3802) #11
  %3804 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3803, <32 x i32> %3801, <32 x i32> %3802) #11
  %3805 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3800, <32 x i32> %3804) #11
  %3806 = bitcast <64 x i16> %3743 to <32 x i32>
  %3807 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3806) #11
  %3808 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3737) #11
  %3809 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3807, <32 x i32> %3808) #11
  %3810 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3809) #11
  %3811 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3809) #11
  %3812 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3810, <32 x i32> %3811) #11
  %3813 = bitcast <64 x i16> %3758 to <32 x i32>
  %3814 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3813) #11
  %3815 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3814) #11
  %3816 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3752) #11
  %3817 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3816) #11
  %3818 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3815, <32 x i32> %3817) #11
  %3819 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3818, <32 x i32> %3815, <32 x i32> %3817) #11
  %3820 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3814) #11
  %3821 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3816) #11
  %3822 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3820, <32 x i32> %3821) #11
  %3823 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3822, <32 x i32> %3820, <32 x i32> %3821) #11
  %3824 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3819, <32 x i32> %3823) #11
  %3825 = bitcast <64 x i16> %3765 to <32 x i32>
  %3826 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3825) #11
  %3827 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3759) #11
  %3828 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3826, <32 x i32> %3827) #11
  %3829 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3828) #11
  %3830 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3828) #11
  %3831 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3829, <32 x i32> %3830) #11
  %3832 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3767) #11
  %3833 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3832) #11
  %3834 = bitcast <64 x i16> %3774 to <32 x i32>
  %3835 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3834) #11
  %3836 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3835) #11
  %3837 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3833, <32 x i32> %3836) #11
  %3838 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3837, <32 x i32> %3833, <32 x i32> %3836) #11
  %3839 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3832) #11
  %3840 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3835) #11
  %3841 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3839, <32 x i32> %3840) #11
  %3842 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3841, <32 x i32> %3839, <32 x i32> %3840) #11
  %3843 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3838, <32 x i32> %3842) #11
  %3844 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3843, <64 x i32> %3766) #11
  %3845 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3831, <64 x i32> %3844) #11
  %3846 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3824, <64 x i32> %3845) #11
  %3847 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3744) #11
  %3848 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3847) #11
  %3849 = bitcast <64 x i16> %3751 to <32 x i32>
  %3850 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3849) #11
  %3851 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3850) #11
  %3852 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3848, <32 x i32> %3851) #11
  %3853 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3852, <32 x i32> %3848, <32 x i32> %3851) #11
  %3854 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3847) #11
  %3855 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3850) #11
  %3856 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3854, <32 x i32> %3855) #11
  %3857 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3856, <32 x i32> %3854, <32 x i32> %3855) #11
  %3858 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3853, <32 x i32> %3857) #11
  %3859 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3846, <64 x i32> %3858) #11
  %3860 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3812, <64 x i32> %3859) #11
  %3861 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3805, <64 x i32> %3860) #11
  %3862 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3722) #11
  %3863 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3862) #11
  %3864 = bitcast <64 x i16> %3729 to <32 x i32>
  %3865 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3864) #11
  %3866 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3865) #11
  %3867 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3863, <32 x i32> %3866) #11
  %3868 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3867, <32 x i32> %3863, <32 x i32> %3866) #11
  %3869 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3862) #11
  %3870 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3865) #11
  %3871 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3869, <32 x i32> %3870) #11
  %3872 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3871, <32 x i32> %3869, <32 x i32> %3870) #11
  %3873 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3868, <32 x i32> %3872) #11
  %3874 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3861, <64 x i32> %3873) #11
  %3875 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3793, <64 x i32> %3874) #11
  %3876 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3786, <64 x i32> %3875) #11
  %3877 = load <32 x i32>, <32 x i32>* %3112, align 128, !tbaa !105
  %3878 = getelementptr inbounds i8, i8* %3710, i32 64
  %3879 = bitcast i8* %3878 to <64 x i8>*
  %3880 = load <64 x i8>, <64 x i8>* %3879, align 64, !tbaa !129
  %3881 = zext <64 x i8> %3880 to <64 x i16>
  %3882 = load <32 x i32>, <32 x i32>* %3114, align 128, !tbaa !105
  %3883 = getelementptr inbounds i8, i8* %3718, i32 64
  %3884 = bitcast i8* %3883 to <64 x i8>*
  %3885 = load <64 x i8>, <64 x i8>* %3884, align 64, !tbaa !129
  %3886 = zext <64 x i8> %3885 to <64 x i16>
  %3887 = load <32 x i32>, <32 x i32>* %3116, align 128, !tbaa !105
  %3888 = getelementptr inbounds i8, i8* %3726, i32 64
  %3889 = bitcast i8* %3888 to <64 x i8>*
  %3890 = load <64 x i8>, <64 x i8>* %3889, align 64, !tbaa !129
  %3891 = zext <64 x i8> %3890 to <64 x i16>
  %3892 = load <32 x i32>, <32 x i32>* %3118, align 128, !tbaa !105
  %3893 = getelementptr inbounds i8, i8* %3733, i32 64
  %3894 = bitcast i8* %3893 to <64 x i8>*
  %3895 = load <64 x i8>, <64 x i8>* %3894, align 64, !tbaa !129
  %3896 = zext <64 x i8> %3895 to <64 x i16>
  %3897 = load <32 x i32>, <32 x i32>* %3120, align 128, !tbaa !105
  %3898 = getelementptr inbounds i8, i8* %3740, i32 64
  %3899 = bitcast i8* %3898 to <64 x i8>*
  %3900 = load <64 x i8>, <64 x i8>* %3899, align 64, !tbaa !129
  %3901 = zext <64 x i8> %3900 to <64 x i16>
  %3902 = load <32 x i32>, <32 x i32>* %3122, align 128, !tbaa !105
  %3903 = getelementptr inbounds i8, i8* %3748, i32 64
  %3904 = bitcast i8* %3903 to <64 x i8>*
  %3905 = load <64 x i8>, <64 x i8>* %3904, align 64, !tbaa !129
  %3906 = zext <64 x i8> %3905 to <64 x i16>
  %3907 = load <32 x i32>, <32 x i32>* %3124, align 128, !tbaa !193
  %3908 = getelementptr inbounds i8, i8* %3755, i32 64
  %3909 = bitcast i8* %3908 to <64 x i8>*
  %3910 = load <64 x i8>, <64 x i8>* %3909, align 64, !tbaa !129
  %3911 = zext <64 x i8> %3910 to <64 x i16>
  %3912 = load <32 x i32>, <32 x i32>* %3126, align 128, !tbaa !195
  %3913 = getelementptr inbounds i8, i8* %3762, i32 64
  %3914 = bitcast i8* %3913 to <64 x i8>*
  %3915 = load <64 x i8>, <64 x i8>* %3914, align 64, !tbaa !129
  %3916 = zext <64 x i8> %3915 to <64 x i16>
  %3917 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3087, <32 x i32> %3086)
  %3918 = load <32 x i32>, <32 x i32>* %3128, align 128, !tbaa !197
  %3919 = getelementptr inbounds i8, i8* %3771, i32 64
  %3920 = bitcast i8* %3919 to <64 x i8>*
  %3921 = load <64 x i8>, <64 x i8>* %3920, align 64, !tbaa !129
  %3922 = zext <64 x i8> %3921 to <64 x i16>
  %3923 = bitcast <64 x i16> %3881 to <32 x i32>
  %3924 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3923) #11
  %3925 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3924) #11
  %3926 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3877) #11
  %3927 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3926) #11
  %3928 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3925, <32 x i32> %3927) #11
  %3929 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3928, <32 x i32> %3925, <32 x i32> %3927) #11
  %3930 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3924) #11
  %3931 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3926) #11
  %3932 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3930, <32 x i32> %3931) #11
  %3933 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3932, <32 x i32> %3930, <32 x i32> %3931) #11
  %3934 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3929, <32 x i32> %3933) #11
  %3935 = bitcast <64 x i16> %3886 to <32 x i32>
  %3936 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3935) #11
  %3937 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3882) #11
  %3938 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3936, <32 x i32> %3937) #11
  %3939 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3938) #11
  %3940 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3938) #11
  %3941 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3939, <32 x i32> %3940) #11
  %3942 = bitcast <64 x i16> %3896 to <32 x i32>
  %3943 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3942) #11
  %3944 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3943) #11
  %3945 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3892) #11
  %3946 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3945) #11
  %3947 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3944, <32 x i32> %3946) #11
  %3948 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3947, <32 x i32> %3944, <32 x i32> %3946) #11
  %3949 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3943) #11
  %3950 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3945) #11
  %3951 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3949, <32 x i32> %3950) #11
  %3952 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3951, <32 x i32> %3949, <32 x i32> %3950) #11
  %3953 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3948, <32 x i32> %3952) #11
  %3954 = bitcast <64 x i16> %3901 to <32 x i32>
  %3955 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3954) #11
  %3956 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3897) #11
  %3957 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3955, <32 x i32> %3956) #11
  %3958 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3957) #11
  %3959 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3957) #11
  %3960 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3958, <32 x i32> %3959) #11
  %3961 = bitcast <64 x i16> %3911 to <32 x i32>
  %3962 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3961) #11
  %3963 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3962) #11
  %3964 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3907) #11
  %3965 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3964) #11
  %3966 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3963, <32 x i32> %3965) #11
  %3967 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3966, <32 x i32> %3963, <32 x i32> %3965) #11
  %3968 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3962) #11
  %3969 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3964) #11
  %3970 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3968, <32 x i32> %3969) #11
  %3971 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3970, <32 x i32> %3968, <32 x i32> %3969) #11
  %3972 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3967, <32 x i32> %3971) #11
  %3973 = bitcast <64 x i16> %3916 to <32 x i32>
  %3974 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3973) #11
  %3975 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3912) #11
  %3976 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3974, <32 x i32> %3975) #11
  %3977 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3976) #11
  %3978 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3976) #11
  %3979 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3977, <32 x i32> %3978) #11
  %3980 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3918) #11
  %3981 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3980) #11
  %3982 = bitcast <64 x i16> %3922 to <32 x i32>
  %3983 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3982) #11
  %3984 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3983) #11
  %3985 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3981, <32 x i32> %3984) #11
  %3986 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3985, <32 x i32> %3981, <32 x i32> %3984) #11
  %3987 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3980) #11
  %3988 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3983) #11
  %3989 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3987, <32 x i32> %3988) #11
  %3990 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3989, <32 x i32> %3987, <32 x i32> %3988) #11
  %3991 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3986, <32 x i32> %3990) #11
  %3992 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3991, <64 x i32> %3917) #11
  %3993 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3979, <64 x i32> %3992) #11
  %3994 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3972, <64 x i32> %3993) #11
  %3995 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3902) #11
  %3996 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3995) #11
  %3997 = bitcast <64 x i16> %3906 to <32 x i32>
  %3998 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3997) #11
  %3999 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3998) #11
  %4000 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3996, <32 x i32> %3999) #11
  %4001 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4000, <32 x i32> %3996, <32 x i32> %3999) #11
  %4002 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3995) #11
  %4003 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3998) #11
  %4004 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4002, <32 x i32> %4003) #11
  %4005 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4004, <32 x i32> %4002, <32 x i32> %4003) #11
  %4006 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4001, <32 x i32> %4005) #11
  %4007 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3994, <64 x i32> %4006) #11
  %4008 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3960, <64 x i32> %4007) #11
  %4009 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3953, <64 x i32> %4008) #11
  %4010 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3887) #11
  %4011 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4010) #11
  %4012 = bitcast <64 x i16> %3891 to <32 x i32>
  %4013 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4012) #11
  %4014 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4013) #11
  %4015 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4011, <32 x i32> %4014) #11
  %4016 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4015, <32 x i32> %4011, <32 x i32> %4014) #11
  %4017 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4010) #11
  %4018 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4013) #11
  %4019 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4017, <32 x i32> %4018) #11
  %4020 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4019, <32 x i32> %4017, <32 x i32> %4018) #11
  %4021 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4016, <32 x i32> %4020) #11
  %4022 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4009, <64 x i32> %4021) #11
  %4023 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3941, <64 x i32> %4022) #11
  %4024 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3934, <64 x i32> %4023) #11
  %4025 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3876)
  %4026 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3876)
  %4027 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4024)
  %4028 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4024)
  br label %"consume convolved90"

next_bb83:                                        ; preds = %"for output.s0.x.xo77"
  %4029 = add nsw i32 %output.s0.x.xo79, %19
  br i1 %2729, label %"for convolved.s1.r19$y84.preheader", label %"consume convolved90", !prof !101

"for convolved.s1.r19$y84.preheader":             ; preds = %next_bb83
  %4030 = mul nsw i32 %4029, %stride_x
  %4031 = sub i32 %4030, %t2348
  br i1 %2728, label %"for convolved.s1.r19$y84.us", label %"consume convolved90", !prof !101

"for convolved.s1.r19$y84.us":                    ; preds = %"for convolved.s1.r19$y84.preheader", %"end for convolved.s1.r19$x88.loopexit.us"
  %.lcssa4769.us4777 = phi <32 x i32> [ %.lcssa5095, %"end for convolved.s1.r19$x88.loopexit.us" ], [ %3087, %"for convolved.s1.r19$y84.preheader" ]
  %.lcssa4767.us4775 = phi <32 x i32> [ %.lcssa5096, %"end for convolved.s1.r19$x88.loopexit.us" ], [ %3086, %"for convolved.s1.r19$y84.preheader" ]
  %.lcssa4765.us4773 = phi <32 x i32> [ %.lcssa5097, %"end for convolved.s1.r19$x88.loopexit.us" ], [ %3085, %"for convolved.s1.r19$y84.preheader" ]
  %.lcssa4763.us4771 = phi <32 x i32> [ %.lcssa5098, %"end for convolved.s1.r19$x88.loopexit.us" ], [ %3084, %"for convolved.s1.r19$y84.preheader" ]
  %"convolved.s1.r19$y86.us" = phi i32 [ %4195, %"end for convolved.s1.r19$x88.loopexit.us" ], [ 0, %"for convolved.s1.r19$y84.preheader" ]
  %4032 = mul nsw i32 %"convolved.s1.r19$y86.us", %a128
  %4033 = add nsw i32 %4032, %3697
  %4034 = mul nsw i32 %4033, %2772
  %t2397.us = add nsw i32 %4031, %4034
  %4035 = mul nsw i32 %"convolved.s1.r19$y86.us", %4
  br i1 %2821, label %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x87.us"

"for convolved.s1.r19$x87.us":                    ; preds = %"for convolved.s1.r19$y84.us", %"for convolved.s1.r19$x87.us"
  %4036 = phi <32 x i32> [ %4142, %"for convolved.s1.r19$x87.us" ], [ %.lcssa4769.us4777, %"for convolved.s1.r19$y84.us" ]
  %4037 = phi <32 x i32> [ %4141, %"for convolved.s1.r19$x87.us" ], [ %.lcssa4767.us4775, %"for convolved.s1.r19$y84.us" ]
  %4038 = phi <32 x i32> [ %4140, %"for convolved.s1.r19$x87.us" ], [ %.lcssa4765.us4773, %"for convolved.s1.r19$y84.us" ]
  %4039 = phi <32 x i32> [ %4139, %"for convolved.s1.r19$x87.us" ], [ %.lcssa4763.us4771, %"for convolved.s1.r19$y84.us" ]
  %"convolved.s1.r19$x89.us" = phi i32 [ %4143, %"for convolved.s1.r19$x87.us" ], [ 0, %"for convolved.s1.r19$y84.us" ]
  %niter5157 = phi i32 [ %niter5157.nsub.1, %"for convolved.s1.r19$x87.us" ], [ %unroll_iter5156, %"for convolved.s1.r19$y84.us" ]
  %4040 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4038, <32 x i32> %4039)
  %4041 = add nsw i32 %"convolved.s1.r19$x89.us", %4035
  %4042 = shl nsw i32 %4041, 7
  %4043 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %4042
  %4044 = bitcast i16* %4043 to <32 x i32>*
  %4045 = load <32 x i32>, <32 x i32>* %4044, align 128, !tbaa !105
  %4046 = mul nsw i32 %"convolved.s1.r19$x89.us", %a133
  %4047 = add nsw i32 %t2397.us, %4046
  %4048 = shl nsw i32 %4047, 7
  %4049 = getelementptr inbounds i8, i8* %resampled_input53, i32 %4048
  %4050 = bitcast i8* %4049 to <64 x i8>*
  %4051 = load <64 x i8>, <64 x i8>* %4050, align 128, !tbaa !129
  %4052 = zext <64 x i8> %4051 to <64 x i16>
  %4053 = bitcast <64 x i16> %4052 to <32 x i32>
  %4054 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4053) #11
  %4055 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4054) #11
  %4056 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4045) #11
  %4057 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4056) #11
  %4058 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4055, <32 x i32> %4057) #11
  %4059 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4058, <32 x i32> %4055, <32 x i32> %4057) #11
  %4060 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4054) #11
  %4061 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4056) #11
  %4062 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4060, <32 x i32> %4061) #11
  %4063 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4062, <32 x i32> %4060, <32 x i32> %4061) #11
  %4064 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4059, <32 x i32> %4063) #11
  %4065 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4040, <64 x i32> %4064) #11
  %4066 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4036, <32 x i32> %4037)
  %4067 = getelementptr inbounds i16, i16* %4043, i32 64
  %4068 = bitcast i16* %4067 to <32 x i32>*
  %4069 = load <32 x i32>, <32 x i32>* %4068, align 128, !tbaa !105
  %4070 = getelementptr inbounds i8, i8* %4049, i32 64
  %4071 = bitcast i8* %4070 to <64 x i8>*
  %4072 = load <64 x i8>, <64 x i8>* %4071, align 64, !tbaa !129
  %4073 = zext <64 x i8> %4072 to <64 x i16>
  %4074 = bitcast <64 x i16> %4073 to <32 x i32>
  %4075 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4074) #11
  %4076 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4075) #11
  %4077 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4069) #11
  %4078 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4077) #11
  %4079 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4076, <32 x i32> %4078) #11
  %4080 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4079, <32 x i32> %4076, <32 x i32> %4078) #11
  %4081 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4075) #11
  %4082 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4077) #11
  %4083 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4081, <32 x i32> %4082) #11
  %4084 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4083, <32 x i32> %4081, <32 x i32> %4082) #11
  %4085 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4080, <32 x i32> %4084) #11
  %4086 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4066, <64 x i32> %4085) #11
  %4087 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4065)
  %4088 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4065)
  %4089 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4086)
  %4090 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4086)
  %4091 = or i32 %"convolved.s1.r19$x89.us", 1
  %4092 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4088, <32 x i32> %4087)
  %4093 = add nsw i32 %4091, %4035
  %4094 = shl nsw i32 %4093, 7
  %4095 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %4094
  %4096 = bitcast i16* %4095 to <32 x i32>*
  %4097 = load <32 x i32>, <32 x i32>* %4096, align 128, !tbaa !105
  %4098 = mul nsw i32 %4091, %a133
  %4099 = add nsw i32 %t2397.us, %4098
  %4100 = shl nsw i32 %4099, 7
  %4101 = getelementptr inbounds i8, i8* %resampled_input53, i32 %4100
  %4102 = bitcast i8* %4101 to <64 x i8>*
  %4103 = load <64 x i8>, <64 x i8>* %4102, align 128, !tbaa !129
  %4104 = zext <64 x i8> %4103 to <64 x i16>
  %4105 = bitcast <64 x i16> %4104 to <32 x i32>
  %4106 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4105) #11
  %4107 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4106) #11
  %4108 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4097) #11
  %4109 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4108) #11
  %4110 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4107, <32 x i32> %4109) #11
  %4111 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4110, <32 x i32> %4107, <32 x i32> %4109) #11
  %4112 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4106) #11
  %4113 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4108) #11
  %4114 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4112, <32 x i32> %4113) #11
  %4115 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4114, <32 x i32> %4112, <32 x i32> %4113) #11
  %4116 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4111, <32 x i32> %4115) #11
  %4117 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4092, <64 x i32> %4116) #11
  %4118 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4090, <32 x i32> %4089)
  %4119 = getelementptr inbounds i16, i16* %4095, i32 64
  %4120 = bitcast i16* %4119 to <32 x i32>*
  %4121 = load <32 x i32>, <32 x i32>* %4120, align 128, !tbaa !105
  %4122 = getelementptr inbounds i8, i8* %4101, i32 64
  %4123 = bitcast i8* %4122 to <64 x i8>*
  %4124 = load <64 x i8>, <64 x i8>* %4123, align 64, !tbaa !129
  %4125 = zext <64 x i8> %4124 to <64 x i16>
  %4126 = bitcast <64 x i16> %4125 to <32 x i32>
  %4127 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4126) #11
  %4128 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4127) #11
  %4129 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4121) #11
  %4130 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4129) #11
  %4131 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4128, <32 x i32> %4130) #11
  %4132 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4131, <32 x i32> %4128, <32 x i32> %4130) #11
  %4133 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4127) #11
  %4134 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4129) #11
  %4135 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4133, <32 x i32> %4134) #11
  %4136 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4135, <32 x i32> %4133, <32 x i32> %4134) #11
  %4137 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4132, <32 x i32> %4136) #11
  %4138 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4118, <64 x i32> %4137) #11
  %4139 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4117)
  %4140 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4117)
  %4141 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4138)
  %4142 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4138)
  %4143 = add nuw nsw i32 %"convolved.s1.r19$x89.us", 2
  %niter5157.nsub.1 = add i32 %niter5157, -2
  %niter5157.ncmp.1 = icmp eq i32 %niter5157.nsub.1, 0
  br i1 %niter5157.ncmp.1, label %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x87.us"

"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x87.us", %"for convolved.s1.r19$y84.us"
  %.lcssa5098.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y84.us" ], [ %4139, %"for convolved.s1.r19$x87.us" ]
  %.lcssa5097.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y84.us" ], [ %4140, %"for convolved.s1.r19$x87.us" ]
  %.lcssa5096.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y84.us" ], [ %4141, %"for convolved.s1.r19$x87.us" ]
  %.lcssa5095.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y84.us" ], [ %4142, %"for convolved.s1.r19$x87.us" ]
  %.unr5151 = phi <32 x i32> [ %.lcssa4769.us4777, %"for convolved.s1.r19$y84.us" ], [ %4142, %"for convolved.s1.r19$x87.us" ]
  %.unr5152 = phi <32 x i32> [ %.lcssa4767.us4775, %"for convolved.s1.r19$y84.us" ], [ %4141, %"for convolved.s1.r19$x87.us" ]
  %.unr5153 = phi <32 x i32> [ %.lcssa4765.us4773, %"for convolved.s1.r19$y84.us" ], [ %4140, %"for convolved.s1.r19$x87.us" ]
  %.unr5154 = phi <32 x i32> [ %.lcssa4763.us4771, %"for convolved.s1.r19$y84.us" ], [ %4139, %"for convolved.s1.r19$x87.us" ]
  %"convolved.s1.r19$x89.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y84.us" ], [ %4143, %"for convolved.s1.r19$x87.us" ]
  br i1 %lcmp.mod5155.not, label %"end for convolved.s1.r19$x88.loopexit.us", label %"for convolved.s1.r19$x87.us.epil"

"for convolved.s1.r19$x87.us.epil":               ; preds = %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa"
  %4144 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr5153, <32 x i32> %.unr5154)
  %4145 = add nsw i32 %"convolved.s1.r19$x89.us.unr", %4035
  %4146 = shl nsw i32 %4145, 7
  %4147 = getelementptr inbounds i16, i16* %filter_zeroed27, i32 %4146
  %4148 = bitcast i16* %4147 to <32 x i32>*
  %4149 = load <32 x i32>, <32 x i32>* %4148, align 128, !tbaa !105
  %4150 = mul nsw i32 %"convolved.s1.r19$x89.us.unr", %a133
  %4151 = add nsw i32 %t2397.us, %4150
  %4152 = shl nsw i32 %4151, 7
  %4153 = getelementptr inbounds i8, i8* %resampled_input53, i32 %4152
  %4154 = bitcast i8* %4153 to <64 x i8>*
  %4155 = load <64 x i8>, <64 x i8>* %4154, align 128, !tbaa !129
  %4156 = zext <64 x i8> %4155 to <64 x i16>
  %4157 = bitcast <64 x i16> %4156 to <32 x i32>
  %4158 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4157) #11
  %4159 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4158) #11
  %4160 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4149) #11
  %4161 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4160) #11
  %4162 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4159, <32 x i32> %4161) #11
  %4163 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4162, <32 x i32> %4159, <32 x i32> %4161) #11
  %4164 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4158) #11
  %4165 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4160) #11
  %4166 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4164, <32 x i32> %4165) #11
  %4167 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4166, <32 x i32> %4164, <32 x i32> %4165) #11
  %4168 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4163, <32 x i32> %4167) #11
  %4169 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4144, <64 x i32> %4168) #11
  %4170 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr5151, <32 x i32> %.unr5152)
  %4171 = getelementptr inbounds i16, i16* %4147, i32 64
  %4172 = bitcast i16* %4171 to <32 x i32>*
  %4173 = load <32 x i32>, <32 x i32>* %4172, align 128, !tbaa !105
  %4174 = getelementptr inbounds i8, i8* %4153, i32 64
  %4175 = bitcast i8* %4174 to <64 x i8>*
  %4176 = load <64 x i8>, <64 x i8>* %4175, align 64, !tbaa !129
  %4177 = zext <64 x i8> %4176 to <64 x i16>
  %4178 = bitcast <64 x i16> %4177 to <32 x i32>
  %4179 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4178) #11
  %4180 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4179) #11
  %4181 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %4173) #11
  %4182 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4181) #11
  %4183 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4180, <32 x i32> %4182) #11
  %4184 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4183, <32 x i32> %4180, <32 x i32> %4182) #11
  %4185 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4179) #11
  %4186 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4181) #11
  %4187 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4185, <32 x i32> %4186) #11
  %4188 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4187, <32 x i32> %4185, <32 x i32> %4186) #11
  %4189 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4184, <32 x i32> %4188) #11
  %4190 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4170, <64 x i32> %4189) #11
  %4191 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4190)
  %4192 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4190)
  %4193 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4169)
  %4194 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4169)
  br label %"end for convolved.s1.r19$x88.loopexit.us"

"end for convolved.s1.r19$x88.loopexit.us":       ; preds = %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x87.us.epil"
  %.lcssa5098 = phi <32 x i32> [ %.lcssa5098.ph, %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa" ], [ %4194, %"for convolved.s1.r19$x87.us.epil" ]
  %.lcssa5097 = phi <32 x i32> [ %.lcssa5097.ph, %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa" ], [ %4193, %"for convolved.s1.r19$x87.us.epil" ]
  %.lcssa5096 = phi <32 x i32> [ %.lcssa5096.ph, %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa" ], [ %4192, %"for convolved.s1.r19$x87.us.epil" ]
  %.lcssa5095 = phi <32 x i32> [ %.lcssa5095.ph, %"end for convolved.s1.r19$x88.loopexit.us.unr-lcssa" ], [ %4191, %"for convolved.s1.r19$x87.us.epil" ]
  %4195 = add nuw nsw i32 %"convolved.s1.r19$y86.us", 1
  %.not664.us = icmp eq i32 %4195, %6
  br i1 %.not664.us, label %"consume convolved90", label %"for convolved.s1.r19$y84.us"

"consume convolved90":                            ; preds = %"end for convolved.s1.r19$x88.loopexit.us", %next_bb83, %"for convolved.s1.r19$y84.preheader", %then_bb82
  %.pre-phi4977 = phi i32 [ %3705, %then_bb82 ], [ %4029, %"for convolved.s1.r19$y84.preheader" ], [ %4029, %next_bb83 ], [ %4029, %"end for convolved.s1.r19$x88.loopexit.us" ]
  %.lcssa4769.us.lcssa4788 = phi <32 x i32> [ %4028, %then_bb82 ], [ %3087, %"for convolved.s1.r19$y84.preheader" ], [ %3087, %next_bb83 ], [ %.lcssa5095, %"end for convolved.s1.r19$x88.loopexit.us" ]
  %.lcssa4767.us.lcssa4785 = phi <32 x i32> [ %4027, %then_bb82 ], [ %3086, %"for convolved.s1.r19$y84.preheader" ], [ %3086, %next_bb83 ], [ %.lcssa5096, %"end for convolved.s1.r19$x88.loopexit.us" ]
  %.lcssa4765.us.lcssa4782 = phi <32 x i32> [ %4026, %then_bb82 ], [ %3085, %"for convolved.s1.r19$y84.preheader" ], [ %3085, %next_bb83 ], [ %.lcssa5097, %"end for convolved.s1.r19$x88.loopexit.us" ]
  %.lcssa4763.us.lcssa4779 = phi <32 x i32> [ %4025, %then_bb82 ], [ %3084, %"for convolved.s1.r19$y84.preheader" ], [ %3084, %next_bb83 ], [ %.lcssa5098, %"end for convolved.s1.r19$x88.loopexit.us" ]
  %4196 = sext <32 x i32> %.lcssa4763.us.lcssa4779 to <32 x i64>
  %a106 = mul nsw <32 x i64> %4196, %2799
  %4197 = icmp slt <32 x i64> %a106, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4198 = select <32 x i1> %4197, <32 x i64> %a106, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4199 = add nsw <32 x i64> %4198, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a105 = ashr <32 x i64> %4199, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4200 = icmp slt <32 x i64> %a105, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a104 = select <32 x i1> %4200, <32 x i64> %a105, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4201 = icmp sgt <32 x i64> %a104, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4202 = select <32 x i1> %4201, <32 x i64> %a104, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4203 = trunc <32 x i64> %4202 to <32 x i32>
  %4204 = sext <32 x i32> %.lcssa4765.us.lcssa4782 to <32 x i64>
  %a109 = mul nsw <32 x i64> %4204, %2799
  %4205 = icmp slt <32 x i64> %a109, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4206 = select <32 x i1> %4205, <32 x i64> %a109, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4207 = add nsw <32 x i64> %4206, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a108 = ashr <32 x i64> %4207, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4208 = icmp slt <32 x i64> %a108, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a107 = select <32 x i1> %4208, <32 x i64> %a108, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4209 = icmp sgt <32 x i64> %a107, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4210 = select <32 x i1> %4209, <32 x i64> %a107, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4211 = trunc <32 x i64> %4210 to <32 x i32>
  %4212 = sext <32 x i32> %.lcssa4767.us.lcssa4785 to <32 x i64>
  %a112 = mul nsw <32 x i64> %4212, %2799
  %4213 = icmp slt <32 x i64> %a112, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4214 = select <32 x i1> %4213, <32 x i64> %a112, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4215 = add nsw <32 x i64> %4214, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a111 = ashr <32 x i64> %4215, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4216 = icmp slt <32 x i64> %a111, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a110 = select <32 x i1> %4216, <32 x i64> %a111, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4217 = icmp sgt <32 x i64> %a110, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4218 = select <32 x i1> %4217, <32 x i64> %a110, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4219 = trunc <32 x i64> %4218 to <32 x i32>
  %4220 = sext <32 x i32> %.lcssa4769.us.lcssa4788 to <32 x i64>
  %a115 = mul nsw <32 x i64> %4220, %2799
  %4221 = icmp slt <32 x i64> %a115, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4222 = select <32 x i1> %4221, <32 x i64> %a115, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %4223 = add nsw <32 x i64> %4222, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a114 = ashr <32 x i64> %4223, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %4224 = icmp slt <32 x i64> %a114, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a113 = select <32 x i1> %4224, <32 x i64> %a114, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4225 = icmp sgt <32 x i64> %a113, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4226 = select <32 x i1> %4225, <32 x i64> %a113, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4227 = trunc <32 x i64> %4226 to <32 x i32>
  %4228 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4203, <32 x i32> %3699) #11
  %4229 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4228, <32 x i32> %3698) #11
  %4230 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %4229) #11
  %4231 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4211, <32 x i32> %3699) #11
  %4232 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4231, <32 x i32> %3698) #11
  %4233 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4232, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4234 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4230, <32 x i32> %4233) #11
  %4235 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4234) #11
  %4236 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %4235, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %4237 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4234) #11
  %4238 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4237) #11
  %4239 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4236, <32 x i32> %4238) #11
  %4240 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4239) #11
  %4241 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4239) #11
  %4242 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %4240, <32 x i32> %4241) #11
  %4243 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4219, <32 x i32> %3699) #11
  %4244 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4243, <32 x i32> %3698) #11
  %4245 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %4244) #11
  %4246 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %4227, <32 x i32> %3699) #11
  %4247 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4246, <32 x i32> %3698) #11
  %4248 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4247, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4249 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4245, <32 x i32> %4248) #11
  %4250 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4249) #11
  %4251 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %4250, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %4252 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4249) #11
  %4253 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4252) #11
  %4254 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4251, <32 x i32> %4253) #11
  %4255 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4254) #11
  %4256 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4254) #11
  %4257 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %4255, <32 x i32> %4256) #11
  %4258 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4242, <32 x i32> %4257) #11
  %4259 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2809, <64 x i32> %4258) #11
  %4260 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4259) #11
  %4261 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %4260, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %4262 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4261, <32 x i32> zeroinitializer) #11
  %4263 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4259) #11
  %4264 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %4263, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %4265 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4264, <32 x i32> zeroinitializer) #11
  %4266 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4262, <32 x i32> %4265) #11
  %4267 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4266) #11
  %4268 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4266) #11
  %4269 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %4267, <32 x i32> %4268) #11
  %4270 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %4269, <32 x i32> %2810) #11
  %4271 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2811, <32 x i32> %4270) #11
  %4272 = mul nsw i32 %.pre-phi4977, %21
  %4273 = add i32 %3701, %4272
  %4274 = getelementptr inbounds i8, i8* %17, i32 %4273
  %4275 = bitcast i8* %4274 to <32 x i32>*
  store <32 x i32> %4271, <32 x i32>* %4275, align 1, !tbaa !199
  %4276 = add nuw nsw i32 %output.s0.x.xo79, 1
  %.not663 = icmp eq i32 %4276, %20
  br i1 %.not663, label %"end for output.s0.x.xo78.loopexit", label %"for output.s0.x.xo77"

if.end.i830:                                      ; preds = %next_bb20
  %4277 = icmp eq i32 %4, 3
  %4278 = icmp eq i32 %6, 3
  %4279 = and i1 %4277, %4278
  %4280 = icmp sgt i32 %4, 0
  %4281 = icmp sgt i32 %6, 0
  %4282 = select i1 %4281, i32 %6, i32 0
  %.op = shl i32 %4, 8
  %4283 = select i1 %4280, i32 %.op, i32 0
  %4284 = mul i32 %4283, %4282
  %4285 = or i32 %4284, 134
  %4286 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i32 %4285, i32* %.fca.2.gep, align 4, !tbaa !98
  %cmp7.i829 = icmp ugt i32 %4285, 16384
  br i1 %cmp7.i829, label %pseudostack_alloc.exit835, label %pseudostack_alloc.exit835.thread

pseudostack_alloc.exit835.thread:                 ; preds = %if.end.i830
  store i32 %4285, i32* %.fca.1.gep, align 4, !tbaa !95
  br label %then_bb94

pseudostack_alloc.exit835:                        ; preds = %if.end.i830
  %call.i831 = tail call i8* @halide_malloc(i8* null, i32 %4285) #15
  store i8* %call.i831, i8** %.fca.0.gep, align 4, !tbaa !97
  store i32 %4285, i32* %.fca.1.gep, align 4, !tbaa !95
  %4287 = bitcast i8* %call.i831 to i16*
  %.not = icmp eq i8* %call.i831, null
  br i1 %.not, label %then_bb94, label %"produce filter_zeroed96", !prof !100

then_bb94:                                        ; preds = %pseudostack_alloc.exit835.thread, %pseudostack_alloc.exit835
  %4288 = alloca i8*, i32 %4285, align 128
  %4289 = bitcast i8** %4288 to i16*
  %4290 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %4288, i8*** %4290, align 4
  br label %"produce filter_zeroed96"

"produce filter_zeroed96":                        ; preds = %pseudostack_alloc.exit835, %then_bb94
  %filter_zeroed95 = phi i16* [ %4289, %then_bb94 ], [ %4287, %pseudostack_alloc.exit835 ]
  %t2399 = icmp sgt i32 %3, 64
  %t2398 = icmp sgt i32 %3, 63
  br i1 %4281, label %"for filter_zeroed.s0.y97.preheader", label %"produce sum_filter114", !prof !101

"for filter_zeroed.s0.y97.preheader":             ; preds = %"produce filter_zeroed96"
  %4291 = insertelement <64 x i32> undef, i32 %3, i32 0
  %4292 = shufflevector <64 x i32> %4291, <64 x i32> undef, <64 x i32> zeroinitializer
  %4293 = icmp sgt <64 x i32> %4292, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4294 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %4295 = shufflevector <64 x i8> %4294, <64 x i8> undef, <64 x i32> zeroinitializer
  %4296 = zext <64 x i8> %4295 to <64 x i16>
  %4297 = bitcast <64 x i16> %4296 to <32 x i32>
  %4298 = icmp sgt <64 x i32> %4292, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br i1 %4280, label %"for filter_zeroed.s0.y97.preheader.split.us", label %"produce sum_filter114", !prof !101

"for filter_zeroed.s0.y97.preheader.split.us":    ; preds = %"for filter_zeroed.s0.y97.preheader"
  br i1 %t2398, label %"for filter_zeroed.s0.y97.preheader.split.us.split.us", label %"for filter_zeroed.s0.y97.us.preheader"

"for filter_zeroed.s0.y97.us.preheader":          ; preds = %"for filter_zeroed.s0.y97.preheader.split.us"
  %4299 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %4300 = icmp ult i32 %4299, 7
  %unroll_iter = and i32 %4, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %"for filter_zeroed.s0.y97.us"

"for filter_zeroed.s0.y97.preheader.split.us.split.us": ; preds = %"for filter_zeroed.s0.y97.preheader.split.us"
  br i1 %t2399, label %"for filter_zeroed.s0.y97.us.us.us.preheader", label %"for filter_zeroed.s0.y97.us.us.preheader"

"for filter_zeroed.s0.y97.us.us.preheader":       ; preds = %"for filter_zeroed.s0.y97.preheader.split.us.split.us"
  %4301 = add i32 %4, -1
  %xtraiter5109 = and i32 %4, 7
  %4302 = icmp ult i32 %4301, 7
  %unroll_iter5112 = and i32 %4, -8
  %lcmp.mod5111.not = icmp eq i32 %xtraiter5109, 0
  br label %"for filter_zeroed.s0.y97.us.us"

"for filter_zeroed.s0.y97.us.us.us.preheader":    ; preds = %"for filter_zeroed.s0.y97.preheader.split.us.split.us"
  %4303 = add i32 %4, -1
  %xtraiter5114 = and i32 %4, 3
  %4304 = icmp ult i32 %4303, 3
  %unroll_iter5117 = and i32 %4, -4
  %lcmp.mod5116.not = icmp eq i32 %xtraiter5114, 0
  br label %"for filter_zeroed.s0.y97.us.us.us"

"for filter_zeroed.s0.y97.us.us.us":              ; preds = %"for filter_zeroed.s0.y97.us.us.us.preheader", %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us"
  %filter_zeroed.s0.y99.us.us.us = phi i32 [ %4417, %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y97.us.us.us.preheader" ]
  %4305 = mul nsw i32 %filter_zeroed.s0.y99.us.us.us, %7
  %4306 = mul nsw i32 %filter_zeroed.s0.y99.us.us.us, %4
  br i1 %4304, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x100.us.us.us.us.us"

"for filter_zeroed.s0.x100.us.us.us.us.us":       ; preds = %"for filter_zeroed.s0.y97.us.us.us", %"for filter_zeroed.s0.x100.us.us.us.us.us"
  %filter_zeroed.s0.x102.us.us.us.us.us = phi i32 [ %4394, %"for filter_zeroed.s0.x100.us.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y97.us.us.us" ]
  %niter5118 = phi i32 [ %niter5118.nsub.3, %"for filter_zeroed.s0.x100.us.us.us.us.us" ], [ %unroll_iter5117, %"for filter_zeroed.s0.y97.us.us.us" ]
  %4307 = mul nsw i32 %filter_zeroed.s0.x102.us.us.us.us.us, %5
  %4308 = add nsw i32 %4307, %4305
  %4309 = getelementptr inbounds i8, i8* %1, i32 %4308
  %4310 = bitcast i8* %4309 to <64 x i8>*
  %4311 = load <64 x i8>, <64 x i8>* %4310, align 1, !tbaa !102
  %4312 = zext <64 x i8> %4311 to <64 x i16>
  %4313 = bitcast <64 x i16> %4312 to <32 x i32>
  %4314 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4313, <32 x i32> %4297) #11
  %4315 = add nsw i32 %filter_zeroed.s0.x102.us.us.us.us.us, %4306
  %4316 = shl nsw i32 %4315, 7
  %4317 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4316
  %4318 = bitcast i16* %4317 to <32 x i32>*
  store <32 x i32> %4314, <32 x i32>* %4318, align 128, !tbaa !105
  %4319 = getelementptr inbounds i8, i8* %4309, i32 64
  %4320 = bitcast i8* %4319 to <64 x i8>*
  %4321 = load <64 x i8>, <64 x i8>* %4320, align 1, !tbaa !102
  %4322 = zext <64 x i8> %4321 to <64 x i16>
  %4323 = bitcast <64 x i16> %4322 to <32 x i32>
  %4324 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4323, <32 x i32> %4297) #11
  %4325 = bitcast <32 x i32> %4324 to <64 x i16>
  %4326 = getelementptr inbounds i16, i16* %4317, i32 64
  %4327 = bitcast i16* %4326 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4325, <64 x i16>* nonnull %4327, i32 128, <64 x i1> %4298), !tbaa !105
  %4328 = or i32 %filter_zeroed.s0.x102.us.us.us.us.us, 1
  %4329 = mul nsw i32 %4328, %5
  %4330 = add nsw i32 %4329, %4305
  %4331 = getelementptr inbounds i8, i8* %1, i32 %4330
  %4332 = bitcast i8* %4331 to <64 x i8>*
  %4333 = load <64 x i8>, <64 x i8>* %4332, align 1, !tbaa !102
  %4334 = zext <64 x i8> %4333 to <64 x i16>
  %4335 = bitcast <64 x i16> %4334 to <32 x i32>
  %4336 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4335, <32 x i32> %4297) #11
  %4337 = add nsw i32 %4328, %4306
  %4338 = shl nsw i32 %4337, 7
  %4339 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4338
  %4340 = bitcast i16* %4339 to <32 x i32>*
  store <32 x i32> %4336, <32 x i32>* %4340, align 128, !tbaa !105
  %4341 = getelementptr inbounds i8, i8* %4331, i32 64
  %4342 = bitcast i8* %4341 to <64 x i8>*
  %4343 = load <64 x i8>, <64 x i8>* %4342, align 1, !tbaa !102
  %4344 = zext <64 x i8> %4343 to <64 x i16>
  %4345 = bitcast <64 x i16> %4344 to <32 x i32>
  %4346 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4345, <32 x i32> %4297) #11
  %4347 = bitcast <32 x i32> %4346 to <64 x i16>
  %4348 = getelementptr inbounds i16, i16* %4339, i32 64
  %4349 = bitcast i16* %4348 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4347, <64 x i16>* nonnull %4349, i32 128, <64 x i1> %4298), !tbaa !105
  %4350 = or i32 %filter_zeroed.s0.x102.us.us.us.us.us, 2
  %4351 = mul nsw i32 %4350, %5
  %4352 = add nsw i32 %4351, %4305
  %4353 = getelementptr inbounds i8, i8* %1, i32 %4352
  %4354 = bitcast i8* %4353 to <64 x i8>*
  %4355 = load <64 x i8>, <64 x i8>* %4354, align 1, !tbaa !102
  %4356 = zext <64 x i8> %4355 to <64 x i16>
  %4357 = bitcast <64 x i16> %4356 to <32 x i32>
  %4358 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4357, <32 x i32> %4297) #11
  %4359 = add nsw i32 %4350, %4306
  %4360 = shl nsw i32 %4359, 7
  %4361 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4360
  %4362 = bitcast i16* %4361 to <32 x i32>*
  store <32 x i32> %4358, <32 x i32>* %4362, align 128, !tbaa !105
  %4363 = getelementptr inbounds i8, i8* %4353, i32 64
  %4364 = bitcast i8* %4363 to <64 x i8>*
  %4365 = load <64 x i8>, <64 x i8>* %4364, align 1, !tbaa !102
  %4366 = zext <64 x i8> %4365 to <64 x i16>
  %4367 = bitcast <64 x i16> %4366 to <32 x i32>
  %4368 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4367, <32 x i32> %4297) #11
  %4369 = bitcast <32 x i32> %4368 to <64 x i16>
  %4370 = getelementptr inbounds i16, i16* %4361, i32 64
  %4371 = bitcast i16* %4370 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4369, <64 x i16>* nonnull %4371, i32 128, <64 x i1> %4298), !tbaa !105
  %4372 = or i32 %filter_zeroed.s0.x102.us.us.us.us.us, 3
  %4373 = mul nsw i32 %4372, %5
  %4374 = add nsw i32 %4373, %4305
  %4375 = getelementptr inbounds i8, i8* %1, i32 %4374
  %4376 = bitcast i8* %4375 to <64 x i8>*
  %4377 = load <64 x i8>, <64 x i8>* %4376, align 1, !tbaa !102
  %4378 = zext <64 x i8> %4377 to <64 x i16>
  %4379 = bitcast <64 x i16> %4378 to <32 x i32>
  %4380 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4379, <32 x i32> %4297) #11
  %4381 = add nsw i32 %4372, %4306
  %4382 = shl nsw i32 %4381, 7
  %4383 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4382
  %4384 = bitcast i16* %4383 to <32 x i32>*
  store <32 x i32> %4380, <32 x i32>* %4384, align 128, !tbaa !105
  %4385 = getelementptr inbounds i8, i8* %4375, i32 64
  %4386 = bitcast i8* %4385 to <64 x i8>*
  %4387 = load <64 x i8>, <64 x i8>* %4386, align 1, !tbaa !102
  %4388 = zext <64 x i8> %4387 to <64 x i16>
  %4389 = bitcast <64 x i16> %4388 to <32 x i32>
  %4390 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4389, <32 x i32> %4297) #11
  %4391 = bitcast <32 x i32> %4390 to <64 x i16>
  %4392 = getelementptr inbounds i16, i16* %4383, i32 64
  %4393 = bitcast i16* %4392 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4391, <64 x i16>* nonnull %4393, i32 128, <64 x i1> %4298), !tbaa !105
  %4394 = add nuw nsw i32 %filter_zeroed.s0.x102.us.us.us.us.us, 4
  %niter5118.nsub.3 = add i32 %niter5118, -4
  %niter5118.ncmp.3 = icmp eq i32 %niter5118.nsub.3, 0
  br i1 %niter5118.ncmp.3, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x100.us.us.us.us.us"

"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x100.us.us.us.us.us", %"for filter_zeroed.s0.y97.us.us.us"
  %filter_zeroed.s0.x102.us.us.us.us.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y97.us.us.us" ], [ %4394, %"for filter_zeroed.s0.x100.us.us.us.us.us" ]
  br i1 %lcmp.mod5116.not, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x100.us.us.us.us.us.epil"

"for filter_zeroed.s0.x100.us.us.us.us.us.epil":  ; preds = %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us.unr-lcssa", %"for filter_zeroed.s0.x100.us.us.us.us.us.epil"
  %filter_zeroed.s0.x102.us.us.us.us.us.epil = phi i32 [ %4416, %"for filter_zeroed.s0.x100.us.us.us.us.us.epil" ], [ %filter_zeroed.s0.x102.us.us.us.us.us.unr, %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %epil.iter5115 = phi i32 [ %epil.iter5115.sub, %"for filter_zeroed.s0.x100.us.us.us.us.us.epil" ], [ %xtraiter5114, %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %4395 = mul nsw i32 %filter_zeroed.s0.x102.us.us.us.us.us.epil, %5
  %4396 = add nsw i32 %4395, %4305
  %4397 = getelementptr inbounds i8, i8* %1, i32 %4396
  %4398 = bitcast i8* %4397 to <64 x i8>*
  %4399 = load <64 x i8>, <64 x i8>* %4398, align 1, !tbaa !102
  %4400 = zext <64 x i8> %4399 to <64 x i16>
  %4401 = bitcast <64 x i16> %4400 to <32 x i32>
  %4402 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4401, <32 x i32> %4297) #11
  %4403 = add nsw i32 %filter_zeroed.s0.x102.us.us.us.us.us.epil, %4306
  %4404 = shl nsw i32 %4403, 7
  %4405 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4404
  %4406 = bitcast i16* %4405 to <32 x i32>*
  store <32 x i32> %4402, <32 x i32>* %4406, align 128, !tbaa !105
  %4407 = getelementptr inbounds i8, i8* %4397, i32 64
  %4408 = bitcast i8* %4407 to <64 x i8>*
  %4409 = load <64 x i8>, <64 x i8>* %4408, align 1, !tbaa !102
  %4410 = zext <64 x i8> %4409 to <64 x i16>
  %4411 = bitcast <64 x i16> %4410 to <32 x i32>
  %4412 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4411, <32 x i32> %4297) #11
  %4413 = bitcast <32 x i32> %4412 to <64 x i16>
  %4414 = getelementptr inbounds i16, i16* %4405, i32 64
  %4415 = bitcast i16* %4414 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4413, <64 x i16>* nonnull %4415, i32 128, <64 x i1> %4298), !tbaa !105
  %4416 = add nuw nsw i32 %filter_zeroed.s0.x102.us.us.us.us.us.epil, 1
  %epil.iter5115.sub = add i32 %epil.iter5115, -1
  %epil.iter5115.cmp.not = icmp eq i32 %epil.iter5115.sub, 0
  br i1 %epil.iter5115.cmp.not, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x100.us.us.us.us.us.epil", !llvm.loop !203

"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us": ; preds = %"for filter_zeroed.s0.x100.us.us.us.us.us.epil", %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us.unr-lcssa"
  %4417 = add nuw nsw i32 %filter_zeroed.s0.y99.us.us.us, 1
  %.not654.us.us.us = icmp eq i32 %4417, %6
  br i1 %.not654.us.us.us, label %"produce sum_filter114", label %"for filter_zeroed.s0.y97.us.us.us"

"for filter_zeroed.s0.y97.us.us":                 ; preds = %"for filter_zeroed.s0.y97.us.us.preheader", %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us"
  %filter_zeroed.s0.y99.us.us = phi i32 [ %4537, %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us" ], [ 0, %"for filter_zeroed.s0.y97.us.us.preheader" ]
  %4418 = mul nsw i32 %filter_zeroed.s0.y99.us.us, %7
  %4419 = mul nsw i32 %filter_zeroed.s0.y99.us.us, %4
  br i1 %4302, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us.unr-lcssa", label %"for filter_zeroed.s0.x100.us.us4735.us"

"for filter_zeroed.s0.x100.us.us4735.us":         ; preds = %"for filter_zeroed.s0.y97.us.us", %"for filter_zeroed.s0.x100.us.us4735.us"
  %filter_zeroed.s0.x102.us.us4736.us = phi i32 [ %4523, %"for filter_zeroed.s0.x100.us.us4735.us" ], [ 0, %"for filter_zeroed.s0.y97.us.us" ]
  %niter5113 = phi i32 [ %niter5113.nsub.7, %"for filter_zeroed.s0.x100.us.us4735.us" ], [ %unroll_iter5112, %"for filter_zeroed.s0.y97.us.us" ]
  %4420 = mul nsw i32 %filter_zeroed.s0.x102.us.us4736.us, %5
  %4421 = add nsw i32 %4420, %4418
  %4422 = getelementptr inbounds i8, i8* %1, i32 %4421
  %4423 = bitcast i8* %4422 to <64 x i8>*
  %4424 = load <64 x i8>, <64 x i8>* %4423, align 1, !tbaa !102
  %4425 = zext <64 x i8> %4424 to <64 x i16>
  %4426 = bitcast <64 x i16> %4425 to <32 x i32>
  %4427 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4426, <32 x i32> %4297) #11
  %4428 = add nsw i32 %filter_zeroed.s0.x102.us.us4736.us, %4419
  %4429 = shl nsw i32 %4428, 7
  %4430 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4429
  %4431 = bitcast i16* %4430 to <32 x i32>*
  store <32 x i32> %4427, <32 x i32>* %4431, align 128, !tbaa !105
  %4432 = or i32 %filter_zeroed.s0.x102.us.us4736.us, 1
  %4433 = mul nsw i32 %4432, %5
  %4434 = add nsw i32 %4433, %4418
  %4435 = getelementptr inbounds i8, i8* %1, i32 %4434
  %4436 = bitcast i8* %4435 to <64 x i8>*
  %4437 = load <64 x i8>, <64 x i8>* %4436, align 1, !tbaa !102
  %4438 = zext <64 x i8> %4437 to <64 x i16>
  %4439 = bitcast <64 x i16> %4438 to <32 x i32>
  %4440 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4439, <32 x i32> %4297) #11
  %4441 = add nsw i32 %4432, %4419
  %4442 = shl nsw i32 %4441, 7
  %4443 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4442
  %4444 = bitcast i16* %4443 to <32 x i32>*
  store <32 x i32> %4440, <32 x i32>* %4444, align 128, !tbaa !105
  %4445 = or i32 %filter_zeroed.s0.x102.us.us4736.us, 2
  %4446 = mul nsw i32 %4445, %5
  %4447 = add nsw i32 %4446, %4418
  %4448 = getelementptr inbounds i8, i8* %1, i32 %4447
  %4449 = bitcast i8* %4448 to <64 x i8>*
  %4450 = load <64 x i8>, <64 x i8>* %4449, align 1, !tbaa !102
  %4451 = zext <64 x i8> %4450 to <64 x i16>
  %4452 = bitcast <64 x i16> %4451 to <32 x i32>
  %4453 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4452, <32 x i32> %4297) #11
  %4454 = add nsw i32 %4445, %4419
  %4455 = shl nsw i32 %4454, 7
  %4456 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4455
  %4457 = bitcast i16* %4456 to <32 x i32>*
  store <32 x i32> %4453, <32 x i32>* %4457, align 128, !tbaa !105
  %4458 = or i32 %filter_zeroed.s0.x102.us.us4736.us, 3
  %4459 = mul nsw i32 %4458, %5
  %4460 = add nsw i32 %4459, %4418
  %4461 = getelementptr inbounds i8, i8* %1, i32 %4460
  %4462 = bitcast i8* %4461 to <64 x i8>*
  %4463 = load <64 x i8>, <64 x i8>* %4462, align 1, !tbaa !102
  %4464 = zext <64 x i8> %4463 to <64 x i16>
  %4465 = bitcast <64 x i16> %4464 to <32 x i32>
  %4466 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4465, <32 x i32> %4297) #11
  %4467 = add nsw i32 %4458, %4419
  %4468 = shl nsw i32 %4467, 7
  %4469 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4468
  %4470 = bitcast i16* %4469 to <32 x i32>*
  store <32 x i32> %4466, <32 x i32>* %4470, align 128, !tbaa !105
  %4471 = or i32 %filter_zeroed.s0.x102.us.us4736.us, 4
  %4472 = mul nsw i32 %4471, %5
  %4473 = add nsw i32 %4472, %4418
  %4474 = getelementptr inbounds i8, i8* %1, i32 %4473
  %4475 = bitcast i8* %4474 to <64 x i8>*
  %4476 = load <64 x i8>, <64 x i8>* %4475, align 1, !tbaa !102
  %4477 = zext <64 x i8> %4476 to <64 x i16>
  %4478 = bitcast <64 x i16> %4477 to <32 x i32>
  %4479 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4478, <32 x i32> %4297) #11
  %4480 = add nsw i32 %4471, %4419
  %4481 = shl nsw i32 %4480, 7
  %4482 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4481
  %4483 = bitcast i16* %4482 to <32 x i32>*
  store <32 x i32> %4479, <32 x i32>* %4483, align 128, !tbaa !105
  %4484 = or i32 %filter_zeroed.s0.x102.us.us4736.us, 5
  %4485 = mul nsw i32 %4484, %5
  %4486 = add nsw i32 %4485, %4418
  %4487 = getelementptr inbounds i8, i8* %1, i32 %4486
  %4488 = bitcast i8* %4487 to <64 x i8>*
  %4489 = load <64 x i8>, <64 x i8>* %4488, align 1, !tbaa !102
  %4490 = zext <64 x i8> %4489 to <64 x i16>
  %4491 = bitcast <64 x i16> %4490 to <32 x i32>
  %4492 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4491, <32 x i32> %4297) #11
  %4493 = add nsw i32 %4484, %4419
  %4494 = shl nsw i32 %4493, 7
  %4495 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4494
  %4496 = bitcast i16* %4495 to <32 x i32>*
  store <32 x i32> %4492, <32 x i32>* %4496, align 128, !tbaa !105
  %4497 = or i32 %filter_zeroed.s0.x102.us.us4736.us, 6
  %4498 = mul nsw i32 %4497, %5
  %4499 = add nsw i32 %4498, %4418
  %4500 = getelementptr inbounds i8, i8* %1, i32 %4499
  %4501 = bitcast i8* %4500 to <64 x i8>*
  %4502 = load <64 x i8>, <64 x i8>* %4501, align 1, !tbaa !102
  %4503 = zext <64 x i8> %4502 to <64 x i16>
  %4504 = bitcast <64 x i16> %4503 to <32 x i32>
  %4505 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4504, <32 x i32> %4297) #11
  %4506 = add nsw i32 %4497, %4419
  %4507 = shl nsw i32 %4506, 7
  %4508 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4507
  %4509 = bitcast i16* %4508 to <32 x i32>*
  store <32 x i32> %4505, <32 x i32>* %4509, align 128, !tbaa !105
  %4510 = or i32 %filter_zeroed.s0.x102.us.us4736.us, 7
  %4511 = mul nsw i32 %4510, %5
  %4512 = add nsw i32 %4511, %4418
  %4513 = getelementptr inbounds i8, i8* %1, i32 %4512
  %4514 = bitcast i8* %4513 to <64 x i8>*
  %4515 = load <64 x i8>, <64 x i8>* %4514, align 1, !tbaa !102
  %4516 = zext <64 x i8> %4515 to <64 x i16>
  %4517 = bitcast <64 x i16> %4516 to <32 x i32>
  %4518 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4517, <32 x i32> %4297) #11
  %4519 = add nsw i32 %4510, %4419
  %4520 = shl nsw i32 %4519, 7
  %4521 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4520
  %4522 = bitcast i16* %4521 to <32 x i32>*
  store <32 x i32> %4518, <32 x i32>* %4522, align 128, !tbaa !105
  %4523 = add nuw nsw i32 %filter_zeroed.s0.x102.us.us4736.us, 8
  %niter5113.nsub.7 = add i32 %niter5113, -8
  %niter5113.ncmp.7 = icmp eq i32 %niter5113.nsub.7, 0
  br i1 %niter5113.ncmp.7, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us.unr-lcssa", label %"for filter_zeroed.s0.x100.us.us4735.us"

"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x100.us.us4735.us", %"for filter_zeroed.s0.y97.us.us"
  %filter_zeroed.s0.x102.us.us4736.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y97.us.us" ], [ %4523, %"for filter_zeroed.s0.x100.us.us4735.us" ]
  br i1 %lcmp.mod5111.not, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us", label %"for filter_zeroed.s0.x100.us.us4735.us.epil"

"for filter_zeroed.s0.x100.us.us4735.us.epil":    ; preds = %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us.unr-lcssa", %"for filter_zeroed.s0.x100.us.us4735.us.epil"
  %filter_zeroed.s0.x102.us.us4736.us.epil = phi i32 [ %4536, %"for filter_zeroed.s0.x100.us.us4735.us.epil" ], [ %filter_zeroed.s0.x102.us.us4736.us.unr, %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us.unr-lcssa" ]
  %epil.iter5110 = phi i32 [ %epil.iter5110.sub, %"for filter_zeroed.s0.x100.us.us4735.us.epil" ], [ %xtraiter5109, %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us.unr-lcssa" ]
  %4524 = mul nsw i32 %filter_zeroed.s0.x102.us.us4736.us.epil, %5
  %4525 = add nsw i32 %4524, %4418
  %4526 = getelementptr inbounds i8, i8* %1, i32 %4525
  %4527 = bitcast i8* %4526 to <64 x i8>*
  %4528 = load <64 x i8>, <64 x i8>* %4527, align 1, !tbaa !102
  %4529 = zext <64 x i8> %4528 to <64 x i16>
  %4530 = bitcast <64 x i16> %4529 to <32 x i32>
  %4531 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4530, <32 x i32> %4297) #11
  %4532 = add nsw i32 %filter_zeroed.s0.x102.us.us4736.us.epil, %4419
  %4533 = shl nsw i32 %4532, 7
  %4534 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4533
  %4535 = bitcast i16* %4534 to <32 x i32>*
  store <32 x i32> %4531, <32 x i32>* %4535, align 128, !tbaa !105
  %4536 = add nuw nsw i32 %filter_zeroed.s0.x102.us.us4736.us.epil, 1
  %epil.iter5110.sub = add i32 %epil.iter5110, -1
  %epil.iter5110.cmp.not = icmp eq i32 %epil.iter5110.sub, 0
  br i1 %epil.iter5110.cmp.not, label %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us", label %"for filter_zeroed.s0.x100.us.us4735.us.epil", !llvm.loop !204

"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us": ; preds = %"for filter_zeroed.s0.x100.us.us4735.us.epil", %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us.unr-lcssa"
  %4537 = add nuw nsw i32 %filter_zeroed.s0.y99.us.us, 1
  %.not654.us.us = icmp eq i32 %4537, %6
  br i1 %.not654.us.us, label %"produce sum_filter114", label %"for filter_zeroed.s0.y97.us.us"

"for filter_zeroed.s0.y97.us":                    ; preds = %"for filter_zeroed.s0.y97.us.preheader", %"end for filter_zeroed.s0.x101.loopexit.split.us4733"
  %filter_zeroed.s0.y99.us = phi i32 [ %4666, %"end for filter_zeroed.s0.x101.loopexit.split.us4733" ], [ 0, %"for filter_zeroed.s0.y97.us.preheader" ]
  %4538 = mul nsw i32 %filter_zeroed.s0.y99.us, %7
  %4539 = mul nsw i32 %filter_zeroed.s0.y99.us, %4
  br i1 %4300, label %"end for filter_zeroed.s0.x101.loopexit.split.us4733.unr-lcssa", label %"for filter_zeroed.s0.x100.us4730"

"for filter_zeroed.s0.x100.us4730":               ; preds = %"for filter_zeroed.s0.y97.us", %"for filter_zeroed.s0.x100.us4730"
  %filter_zeroed.s0.x102.us4731 = phi i32 [ %4651, %"for filter_zeroed.s0.x100.us4730" ], [ 0, %"for filter_zeroed.s0.y97.us" ]
  %niter = phi i32 [ %niter.nsub.7, %"for filter_zeroed.s0.x100.us4730" ], [ %unroll_iter, %"for filter_zeroed.s0.y97.us" ]
  %4540 = mul nsw i32 %filter_zeroed.s0.x102.us4731, %5
  %4541 = add nsw i32 %4540, %4538
  %4542 = getelementptr inbounds i8, i8* %1, i32 %4541
  %4543 = bitcast i8* %4542 to <64 x i8>*
  %4544 = load <64 x i8>, <64 x i8>* %4543, align 1, !tbaa !102
  %4545 = zext <64 x i8> %4544 to <64 x i16>
  %4546 = bitcast <64 x i16> %4545 to <32 x i32>
  %4547 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4546, <32 x i32> %4297) #11
  %4548 = bitcast <32 x i32> %4547 to <64 x i16>
  %4549 = add nsw i32 %filter_zeroed.s0.x102.us4731, %4539
  %4550 = shl nsw i32 %4549, 7
  %4551 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4550
  %4552 = bitcast i16* %4551 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4548, <64 x i16>* %4552, i32 128, <64 x i1> %4293), !tbaa !105
  %4553 = or i32 %filter_zeroed.s0.x102.us4731, 1
  %4554 = mul nsw i32 %4553, %5
  %4555 = add nsw i32 %4554, %4538
  %4556 = getelementptr inbounds i8, i8* %1, i32 %4555
  %4557 = bitcast i8* %4556 to <64 x i8>*
  %4558 = load <64 x i8>, <64 x i8>* %4557, align 1, !tbaa !102
  %4559 = zext <64 x i8> %4558 to <64 x i16>
  %4560 = bitcast <64 x i16> %4559 to <32 x i32>
  %4561 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4560, <32 x i32> %4297) #11
  %4562 = bitcast <32 x i32> %4561 to <64 x i16>
  %4563 = add nsw i32 %4553, %4539
  %4564 = shl nsw i32 %4563, 7
  %4565 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4564
  %4566 = bitcast i16* %4565 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4562, <64 x i16>* %4566, i32 128, <64 x i1> %4293), !tbaa !105
  %4567 = or i32 %filter_zeroed.s0.x102.us4731, 2
  %4568 = mul nsw i32 %4567, %5
  %4569 = add nsw i32 %4568, %4538
  %4570 = getelementptr inbounds i8, i8* %1, i32 %4569
  %4571 = bitcast i8* %4570 to <64 x i8>*
  %4572 = load <64 x i8>, <64 x i8>* %4571, align 1, !tbaa !102
  %4573 = zext <64 x i8> %4572 to <64 x i16>
  %4574 = bitcast <64 x i16> %4573 to <32 x i32>
  %4575 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4574, <32 x i32> %4297) #11
  %4576 = bitcast <32 x i32> %4575 to <64 x i16>
  %4577 = add nsw i32 %4567, %4539
  %4578 = shl nsw i32 %4577, 7
  %4579 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4578
  %4580 = bitcast i16* %4579 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4576, <64 x i16>* %4580, i32 128, <64 x i1> %4293), !tbaa !105
  %4581 = or i32 %filter_zeroed.s0.x102.us4731, 3
  %4582 = mul nsw i32 %4581, %5
  %4583 = add nsw i32 %4582, %4538
  %4584 = getelementptr inbounds i8, i8* %1, i32 %4583
  %4585 = bitcast i8* %4584 to <64 x i8>*
  %4586 = load <64 x i8>, <64 x i8>* %4585, align 1, !tbaa !102
  %4587 = zext <64 x i8> %4586 to <64 x i16>
  %4588 = bitcast <64 x i16> %4587 to <32 x i32>
  %4589 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4588, <32 x i32> %4297) #11
  %4590 = bitcast <32 x i32> %4589 to <64 x i16>
  %4591 = add nsw i32 %4581, %4539
  %4592 = shl nsw i32 %4591, 7
  %4593 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4592
  %4594 = bitcast i16* %4593 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4590, <64 x i16>* %4594, i32 128, <64 x i1> %4293), !tbaa !105
  %4595 = or i32 %filter_zeroed.s0.x102.us4731, 4
  %4596 = mul nsw i32 %4595, %5
  %4597 = add nsw i32 %4596, %4538
  %4598 = getelementptr inbounds i8, i8* %1, i32 %4597
  %4599 = bitcast i8* %4598 to <64 x i8>*
  %4600 = load <64 x i8>, <64 x i8>* %4599, align 1, !tbaa !102
  %4601 = zext <64 x i8> %4600 to <64 x i16>
  %4602 = bitcast <64 x i16> %4601 to <32 x i32>
  %4603 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4602, <32 x i32> %4297) #11
  %4604 = bitcast <32 x i32> %4603 to <64 x i16>
  %4605 = add nsw i32 %4595, %4539
  %4606 = shl nsw i32 %4605, 7
  %4607 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4606
  %4608 = bitcast i16* %4607 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4604, <64 x i16>* %4608, i32 128, <64 x i1> %4293), !tbaa !105
  %4609 = or i32 %filter_zeroed.s0.x102.us4731, 5
  %4610 = mul nsw i32 %4609, %5
  %4611 = add nsw i32 %4610, %4538
  %4612 = getelementptr inbounds i8, i8* %1, i32 %4611
  %4613 = bitcast i8* %4612 to <64 x i8>*
  %4614 = load <64 x i8>, <64 x i8>* %4613, align 1, !tbaa !102
  %4615 = zext <64 x i8> %4614 to <64 x i16>
  %4616 = bitcast <64 x i16> %4615 to <32 x i32>
  %4617 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4616, <32 x i32> %4297) #11
  %4618 = bitcast <32 x i32> %4617 to <64 x i16>
  %4619 = add nsw i32 %4609, %4539
  %4620 = shl nsw i32 %4619, 7
  %4621 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4620
  %4622 = bitcast i16* %4621 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4618, <64 x i16>* %4622, i32 128, <64 x i1> %4293), !tbaa !105
  %4623 = or i32 %filter_zeroed.s0.x102.us4731, 6
  %4624 = mul nsw i32 %4623, %5
  %4625 = add nsw i32 %4624, %4538
  %4626 = getelementptr inbounds i8, i8* %1, i32 %4625
  %4627 = bitcast i8* %4626 to <64 x i8>*
  %4628 = load <64 x i8>, <64 x i8>* %4627, align 1, !tbaa !102
  %4629 = zext <64 x i8> %4628 to <64 x i16>
  %4630 = bitcast <64 x i16> %4629 to <32 x i32>
  %4631 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4630, <32 x i32> %4297) #11
  %4632 = bitcast <32 x i32> %4631 to <64 x i16>
  %4633 = add nsw i32 %4623, %4539
  %4634 = shl nsw i32 %4633, 7
  %4635 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4634
  %4636 = bitcast i16* %4635 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4632, <64 x i16>* %4636, i32 128, <64 x i1> %4293), !tbaa !105
  %4637 = or i32 %filter_zeroed.s0.x102.us4731, 7
  %4638 = mul nsw i32 %4637, %5
  %4639 = add nsw i32 %4638, %4538
  %4640 = getelementptr inbounds i8, i8* %1, i32 %4639
  %4641 = bitcast i8* %4640 to <64 x i8>*
  %4642 = load <64 x i8>, <64 x i8>* %4641, align 1, !tbaa !102
  %4643 = zext <64 x i8> %4642 to <64 x i16>
  %4644 = bitcast <64 x i16> %4643 to <32 x i32>
  %4645 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4644, <32 x i32> %4297) #11
  %4646 = bitcast <32 x i32> %4645 to <64 x i16>
  %4647 = add nsw i32 %4637, %4539
  %4648 = shl nsw i32 %4647, 7
  %4649 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4648
  %4650 = bitcast i16* %4649 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4646, <64 x i16>* %4650, i32 128, <64 x i1> %4293), !tbaa !105
  %4651 = add nuw nsw i32 %filter_zeroed.s0.x102.us4731, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for filter_zeroed.s0.x101.loopexit.split.us4733.unr-lcssa", label %"for filter_zeroed.s0.x100.us4730"

"end for filter_zeroed.s0.x101.loopexit.split.us4733.unr-lcssa": ; preds = %"for filter_zeroed.s0.x100.us4730", %"for filter_zeroed.s0.y97.us"
  %filter_zeroed.s0.x102.us4731.unr = phi i32 [ 0, %"for filter_zeroed.s0.y97.us" ], [ %4651, %"for filter_zeroed.s0.x100.us4730" ]
  br i1 %lcmp.mod.not, label %"end for filter_zeroed.s0.x101.loopexit.split.us4733", label %"for filter_zeroed.s0.x100.us4730.epil"

"for filter_zeroed.s0.x100.us4730.epil":          ; preds = %"end for filter_zeroed.s0.x101.loopexit.split.us4733.unr-lcssa", %"for filter_zeroed.s0.x100.us4730.epil"
  %filter_zeroed.s0.x102.us4731.epil = phi i32 [ %4665, %"for filter_zeroed.s0.x100.us4730.epil" ], [ %filter_zeroed.s0.x102.us4731.unr, %"end for filter_zeroed.s0.x101.loopexit.split.us4733.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for filter_zeroed.s0.x100.us4730.epil" ], [ %xtraiter, %"end for filter_zeroed.s0.x101.loopexit.split.us4733.unr-lcssa" ]
  %4652 = mul nsw i32 %filter_zeroed.s0.x102.us4731.epil, %5
  %4653 = add nsw i32 %4652, %4538
  %4654 = getelementptr inbounds i8, i8* %1, i32 %4653
  %4655 = bitcast i8* %4654 to <64 x i8>*
  %4656 = load <64 x i8>, <64 x i8>* %4655, align 1, !tbaa !102
  %4657 = zext <64 x i8> %4656 to <64 x i16>
  %4658 = bitcast <64 x i16> %4657 to <32 x i32>
  %4659 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %4658, <32 x i32> %4297) #11
  %4660 = bitcast <32 x i32> %4659 to <64 x i16>
  %4661 = add nsw i32 %filter_zeroed.s0.x102.us4731.epil, %4539
  %4662 = shl nsw i32 %4661, 7
  %4663 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4662
  %4664 = bitcast i16* %4663 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4660, <64 x i16>* %4664, i32 128, <64 x i1> %4293), !tbaa !105
  %4665 = add nuw nsw i32 %filter_zeroed.s0.x102.us4731.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for filter_zeroed.s0.x101.loopexit.split.us4733", label %"for filter_zeroed.s0.x100.us4730.epil", !llvm.loop !205

"end for filter_zeroed.s0.x101.loopexit.split.us4733": ; preds = %"for filter_zeroed.s0.x100.us4730.epil", %"end for filter_zeroed.s0.x101.loopexit.split.us4733.unr-lcssa"
  %4666 = add nuw nsw i32 %filter_zeroed.s0.y99.us, 1
  %.not654.us = icmp eq i32 %4666, %6
  br i1 %.not654.us, label %"produce sum_filter114", label %"for filter_zeroed.s0.y97.us"

"produce sum_filter114":                          ; preds = %"end for filter_zeroed.s0.x101.loopexit.split.us4733", %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us4738.us", %"end for filter_zeroed.s0.x101.loopexit.split.us.split.us.us.us.us", %"for filter_zeroed.s0.y97.preheader", %"produce filter_zeroed96"
  %4667 = insertelement <128 x i32> undef, i32 %3, i32 0
  %4668 = shufflevector <128 x i32> %4667, <128 x i32> undef, <128 x i32> zeroinitializer
  %4669 = icmp sgt <128 x i32> %4668, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4670 = bitcast [128 x i32]* %sum_filter641 to <32 x i32>*
  %4671 = shufflevector <128 x i1> %4669, <128 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  %4672 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 32
  %4673 = bitcast i32* %4672 to <32 x i32>*
  %4674 = shufflevector <128 x i1> %4669, <128 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  %4675 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 64
  %4676 = bitcast i32* %4675 to <32 x i32>*
  %4677 = shufflevector <128 x i1> %4669, <128 x i1> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  %4678 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter641, i32 0, i32 96
  %4679 = bitcast i32* %4678 to <32 x i32>*
  %4680 = shufflevector <128 x i1> %4669, <128 x i1> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %brmerge5030.demorgan = and i1 %4281, %4280
  br i1 %brmerge5030.demorgan, label %"for sum_filter.s1.r19$y115.preheader.split.us", label %"consume sum_filter139", !prof !206

"for sum_filter.s1.r19$y115.preheader.split.us":  ; preds = %"produce sum_filter114"
  %4681 = zext <128 x i1> %4669 to <128 x i8>
  %4682 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %4681) #9
  %4683 = and i8 %4682, 1
  %t2486.not.us = icmp eq i8 %4683, 0
  br i1 %t2486.not.us, label %"for sum_filter.s1.r19$y115.preheader.split.us.split.us", label %"for sum_filter.s1.r19$y115.us.preheader"

"for sum_filter.s1.r19$y115.us.preheader":        ; preds = %"for sum_filter.s1.r19$y115.preheader.split.us"
  %4684 = add i32 %4, -1
  %xtraiter5119 = and i32 %4, 3
  %4685 = icmp ult i32 %4684, 3
  %unroll_iter5122 = and i32 %4, -4
  %lcmp.mod5121.not = icmp eq i32 %xtraiter5119, 0
  br label %"for sum_filter.s1.r19$y115.us"

"for sum_filter.s1.r19$y115.preheader.split.us.split.us": ; preds = %"for sum_filter.s1.r19$y115.preheader.split.us"
  %4686 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %4687 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> zeroinitializer, <32 x i32> zeroinitializer, <32 x i32> %4686) #11
  %4688 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %4689 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %4688, <32 x i32> zeroinitializer) #11
  %4690 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4687)
  %4691 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4687)
  %4692 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4689)
  %4693 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4689)
  %4694 = add i32 %4, -1
  %xtraiter5124 = and i32 %4, 7
  %4695 = icmp ult i32 %4694, 7
  %unroll_iter5127 = and i32 %4, -8
  %lcmp.mod5126.not = icmp eq i32 %xtraiter5124, 0
  br label %"for sum_filter.s1.r19$y115.us.us"

"for sum_filter.s1.r19$y115.us.us":               ; preds = %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us", %"for sum_filter.s1.r19$y115.preheader.split.us.split.us"
  %"sum_filter.s1.r19$y117.us.us" = phi i32 [ %4696, %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us" ], [ 0, %"for sum_filter.s1.r19$y115.preheader.split.us.split.us" ]
  br i1 %4695, label %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x118.us.us.us"

"for sum_filter.s1.r19$x118.us.us.us":            ; preds = %"for sum_filter.s1.r19$y115.us.us", %"for sum_filter.s1.r19$x118.us.us.us"
  %niter5128 = phi i32 [ %niter5128.nsub.7, %"for sum_filter.s1.r19$x118.us.us.us" ], [ %unroll_iter5127, %"for sum_filter.s1.r19$y115.us.us" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %niter5128.nsub.7 = add i32 %niter5128, -8
  %niter5128.ncmp.7 = icmp eq i32 %niter5128.nsub.7, 0
  br i1 %niter5128.ncmp.7, label %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x118.us.us.us"

"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x118.us.us.us", %"for sum_filter.s1.r19$y115.us.us"
  br i1 %lcmp.mod5126.not, label %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x118.us.us.us.epil"

"for sum_filter.s1.r19$x118.us.us.us.epil":       ; preds = %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us.unr-lcssa", %"for sum_filter.s1.r19$x118.us.us.us.epil"
  %epil.iter5125 = phi i32 [ %epil.iter5125.sub, %"for sum_filter.s1.r19$x118.us.us.us.epil" ], [ %xtraiter5124, %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us.unr-lcssa" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4690, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4691, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4692, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4693, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %epil.iter5125.sub = add i32 %epil.iter5125, -1
  %epil.iter5125.cmp.not = icmp eq i32 %epil.iter5125.sub, 0
  br i1 %epil.iter5125.cmp.not, label %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x118.us.us.us.epil", !llvm.loop !207

"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us": ; preds = %"for sum_filter.s1.r19$x118.us.us.us.epil", %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us.unr-lcssa"
  %4696 = add nuw nsw i32 %"sum_filter.s1.r19$y117.us.us", 1
  %.not652.us.us = icmp eq i32 %4696, %6
  br i1 %.not652.us.us, label %"consume sum_filter139", label %"for sum_filter.s1.r19$y115.us.us"

"for sum_filter.s1.r19$y115.us":                  ; preds = %"for sum_filter.s1.r19$y115.us.preheader", %"end for sum_filter.s1.r19$x119.loopexit.split.us4743"
  %"sum_filter.s1.r19$y117.us" = phi i32 [ %4858, %"end for sum_filter.s1.r19$x119.loopexit.split.us4743" ], [ 0, %"for sum_filter.s1.r19$y115.us.preheader" ]
  %4697 = mul nsw i32 %"sum_filter.s1.r19$y117.us", %4
  br i1 %4685, label %"end for sum_filter.s1.r19$x119.loopexit.split.us4743.unr-lcssa", label %"for sum_filter.s1.r19$x118.us4740"

"for sum_filter.s1.r19$x118.us4740":              ; preds = %"for sum_filter.s1.r19$y115.us", %"for sum_filter.s1.r19$x118.us4740"
  %"sum_filter.s1.r19$x120.us4741" = phi i32 [ %4825, %"for sum_filter.s1.r19$x118.us4740" ], [ 0, %"for sum_filter.s1.r19$y115.us" ]
  %niter5123 = phi i32 [ %niter5123.nsub.3, %"for sum_filter.s1.r19$x118.us4740" ], [ %unroll_iter5122, %"for sum_filter.s1.r19$y115.us" ]
  %4698 = load <32 x i32>, <32 x i32>* %4670, align 128, !tbaa !111
  %4699 = load <32 x i32>, <32 x i32>* %4673, align 128, !tbaa !119
  %4700 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4699, <32 x i32> %4698)
  %4701 = shufflevector <64 x i32> %4700, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4702 = bitcast <128 x i32> %4701 to <64 x i64>
  %4703 = shufflevector <64 x i64> %4702, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4704 = bitcast <32 x i64> %4703 to <64 x i32>
  %4705 = add nsw i32 %"sum_filter.s1.r19$x120.us4741", %4697
  %4706 = shl nsw i32 %4705, 7
  %4707 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4706
  %4708 = bitcast i16* %4707 to <32 x i32>*
  %4709 = load <32 x i32>, <32 x i32>* %4708, align 128, !tbaa !105
  %4710 = getelementptr inbounds i16, i16* %4707, i32 64
  %4711 = bitcast i16* %4710 to <32 x i32>*
  %4712 = load <32 x i32>, <32 x i32>* %4711, align 128, !tbaa !105
  %4713 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4712, <32 x i32> %4709)
  %4714 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4713) #11
  %4715 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4704, <32 x i32> zeroinitializer, <32 x i32> %4714) #11
  %4716 = load <32 x i32>, <32 x i32>* %4676, align 128, !tbaa !121
  %4717 = load <32 x i32>, <32 x i32>* %4679, align 128, !tbaa !124
  %4718 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4717, <32 x i32> %4716)
  %4719 = shufflevector <64 x i32> %4718, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4720 = bitcast <128 x i32> %4719 to <64 x i64>
  %4721 = shufflevector <64 x i64> %4720, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4722 = bitcast <32 x i64> %4721 to <64 x i32>
  %4723 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4713) #11
  %4724 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4722, <32 x i32> %4723, <32 x i32> zeroinitializer) #11
  %4725 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4715)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4725, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  %4726 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4715)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4726, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  %4727 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4724)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4727, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  %4728 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4724)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4728, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %4729 = or i32 %"sum_filter.s1.r19$x120.us4741", 1
  %4730 = load <32 x i32>, <32 x i32>* %4670, align 128, !tbaa !111
  %4731 = load <32 x i32>, <32 x i32>* %4673, align 128, !tbaa !119
  %4732 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4731, <32 x i32> %4730)
  %4733 = shufflevector <64 x i32> %4732, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4734 = bitcast <128 x i32> %4733 to <64 x i64>
  %4735 = shufflevector <64 x i64> %4734, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4736 = bitcast <32 x i64> %4735 to <64 x i32>
  %4737 = add nsw i32 %4729, %4697
  %4738 = shl nsw i32 %4737, 7
  %4739 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4738
  %4740 = bitcast i16* %4739 to <32 x i32>*
  %4741 = load <32 x i32>, <32 x i32>* %4740, align 128, !tbaa !105
  %4742 = getelementptr inbounds i16, i16* %4739, i32 64
  %4743 = bitcast i16* %4742 to <32 x i32>*
  %4744 = load <32 x i32>, <32 x i32>* %4743, align 128, !tbaa !105
  %4745 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4744, <32 x i32> %4741)
  %4746 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4745) #11
  %4747 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4736, <32 x i32> zeroinitializer, <32 x i32> %4746) #11
  %4748 = load <32 x i32>, <32 x i32>* %4676, align 128, !tbaa !121
  %4749 = load <32 x i32>, <32 x i32>* %4679, align 128, !tbaa !124
  %4750 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4749, <32 x i32> %4748)
  %4751 = shufflevector <64 x i32> %4750, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4752 = bitcast <128 x i32> %4751 to <64 x i64>
  %4753 = shufflevector <64 x i64> %4752, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4754 = bitcast <32 x i64> %4753 to <64 x i32>
  %4755 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4745) #11
  %4756 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4754, <32 x i32> %4755, <32 x i32> zeroinitializer) #11
  %4757 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4747)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4757, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  %4758 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4747)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4758, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  %4759 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4756)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4759, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  %4760 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4756)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4760, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %4761 = or i32 %"sum_filter.s1.r19$x120.us4741", 2
  %4762 = load <32 x i32>, <32 x i32>* %4670, align 128, !tbaa !111
  %4763 = load <32 x i32>, <32 x i32>* %4673, align 128, !tbaa !119
  %4764 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4763, <32 x i32> %4762)
  %4765 = shufflevector <64 x i32> %4764, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4766 = bitcast <128 x i32> %4765 to <64 x i64>
  %4767 = shufflevector <64 x i64> %4766, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4768 = bitcast <32 x i64> %4767 to <64 x i32>
  %4769 = add nsw i32 %4761, %4697
  %4770 = shl nsw i32 %4769, 7
  %4771 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4770
  %4772 = bitcast i16* %4771 to <32 x i32>*
  %4773 = load <32 x i32>, <32 x i32>* %4772, align 128, !tbaa !105
  %4774 = getelementptr inbounds i16, i16* %4771, i32 64
  %4775 = bitcast i16* %4774 to <32 x i32>*
  %4776 = load <32 x i32>, <32 x i32>* %4775, align 128, !tbaa !105
  %4777 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4776, <32 x i32> %4773)
  %4778 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4777) #11
  %4779 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4768, <32 x i32> zeroinitializer, <32 x i32> %4778) #11
  %4780 = load <32 x i32>, <32 x i32>* %4676, align 128, !tbaa !121
  %4781 = load <32 x i32>, <32 x i32>* %4679, align 128, !tbaa !124
  %4782 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4781, <32 x i32> %4780)
  %4783 = shufflevector <64 x i32> %4782, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4784 = bitcast <128 x i32> %4783 to <64 x i64>
  %4785 = shufflevector <64 x i64> %4784, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4786 = bitcast <32 x i64> %4785 to <64 x i32>
  %4787 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4777) #11
  %4788 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4786, <32 x i32> %4787, <32 x i32> zeroinitializer) #11
  %4789 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4779)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4789, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  %4790 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4779)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4790, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  %4791 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4788)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4791, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  %4792 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4788)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4792, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %4793 = or i32 %"sum_filter.s1.r19$x120.us4741", 3
  %4794 = load <32 x i32>, <32 x i32>* %4670, align 128, !tbaa !111
  %4795 = load <32 x i32>, <32 x i32>* %4673, align 128, !tbaa !119
  %4796 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4795, <32 x i32> %4794)
  %4797 = shufflevector <64 x i32> %4796, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4798 = bitcast <128 x i32> %4797 to <64 x i64>
  %4799 = shufflevector <64 x i64> %4798, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4800 = bitcast <32 x i64> %4799 to <64 x i32>
  %4801 = add nsw i32 %4793, %4697
  %4802 = shl nsw i32 %4801, 7
  %4803 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4802
  %4804 = bitcast i16* %4803 to <32 x i32>*
  %4805 = load <32 x i32>, <32 x i32>* %4804, align 128, !tbaa !105
  %4806 = getelementptr inbounds i16, i16* %4803, i32 64
  %4807 = bitcast i16* %4806 to <32 x i32>*
  %4808 = load <32 x i32>, <32 x i32>* %4807, align 128, !tbaa !105
  %4809 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4808, <32 x i32> %4805)
  %4810 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4809) #11
  %4811 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4800, <32 x i32> zeroinitializer, <32 x i32> %4810) #11
  %4812 = load <32 x i32>, <32 x i32>* %4676, align 128, !tbaa !121
  %4813 = load <32 x i32>, <32 x i32>* %4679, align 128, !tbaa !124
  %4814 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4813, <32 x i32> %4812)
  %4815 = shufflevector <64 x i32> %4814, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4816 = bitcast <128 x i32> %4815 to <64 x i64>
  %4817 = shufflevector <64 x i64> %4816, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4818 = bitcast <32 x i64> %4817 to <64 x i32>
  %4819 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4809) #11
  %4820 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4818, <32 x i32> %4819, <32 x i32> zeroinitializer) #11
  %4821 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4811)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4821, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  %4822 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4811)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4822, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  %4823 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4820)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4823, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  %4824 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4820)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4824, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %4825 = add nuw nsw i32 %"sum_filter.s1.r19$x120.us4741", 4
  %niter5123.nsub.3 = add i32 %niter5123, -4
  %niter5123.ncmp.3 = icmp eq i32 %niter5123.nsub.3, 0
  br i1 %niter5123.ncmp.3, label %"end for sum_filter.s1.r19$x119.loopexit.split.us4743.unr-lcssa", label %"for sum_filter.s1.r19$x118.us4740"

"end for sum_filter.s1.r19$x119.loopexit.split.us4743.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x118.us4740", %"for sum_filter.s1.r19$y115.us"
  %"sum_filter.s1.r19$x120.us4741.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y115.us" ], [ %4825, %"for sum_filter.s1.r19$x118.us4740" ]
  br i1 %lcmp.mod5121.not, label %"end for sum_filter.s1.r19$x119.loopexit.split.us4743", label %"for sum_filter.s1.r19$x118.us4740.epil"

"for sum_filter.s1.r19$x118.us4740.epil":         ; preds = %"end for sum_filter.s1.r19$x119.loopexit.split.us4743.unr-lcssa", %"for sum_filter.s1.r19$x118.us4740.epil"
  %"sum_filter.s1.r19$x120.us4741.epil" = phi i32 [ %4857, %"for sum_filter.s1.r19$x118.us4740.epil" ], [ %"sum_filter.s1.r19$x120.us4741.unr", %"end for sum_filter.s1.r19$x119.loopexit.split.us4743.unr-lcssa" ]
  %epil.iter5120 = phi i32 [ %epil.iter5120.sub, %"for sum_filter.s1.r19$x118.us4740.epil" ], [ %xtraiter5119, %"end for sum_filter.s1.r19$x119.loopexit.split.us4743.unr-lcssa" ]
  %4826 = load <32 x i32>, <32 x i32>* %4670, align 128, !tbaa !111
  %4827 = load <32 x i32>, <32 x i32>* %4673, align 128, !tbaa !119
  %4828 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4827, <32 x i32> %4826)
  %4829 = shufflevector <64 x i32> %4828, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4830 = bitcast <128 x i32> %4829 to <64 x i64>
  %4831 = shufflevector <64 x i64> %4830, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4832 = bitcast <32 x i64> %4831 to <64 x i32>
  %4833 = add nsw i32 %"sum_filter.s1.r19$x120.us4741.epil", %4697
  %4834 = shl nsw i32 %4833, 7
  %4835 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %4834
  %4836 = bitcast i16* %4835 to <32 x i32>*
  %4837 = load <32 x i32>, <32 x i32>* %4836, align 128, !tbaa !105
  %4838 = getelementptr inbounds i16, i16* %4835, i32 64
  %4839 = bitcast i16* %4838 to <32 x i32>*
  %4840 = load <32 x i32>, <32 x i32>* %4839, align 128, !tbaa !105
  %4841 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4840, <32 x i32> %4837)
  %4842 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4841) #11
  %4843 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4832, <32 x i32> zeroinitializer, <32 x i32> %4842) #11
  %4844 = load <32 x i32>, <32 x i32>* %4676, align 128, !tbaa !121
  %4845 = load <32 x i32>, <32 x i32>* %4679, align 128, !tbaa !124
  %4846 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4845, <32 x i32> %4844)
  %4847 = shufflevector <64 x i32> %4846, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4848 = bitcast <128 x i32> %4847 to <64 x i64>
  %4849 = shufflevector <64 x i64> %4848, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4850 = bitcast <32 x i64> %4849 to <64 x i32>
  %4851 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4841) #11
  %4852 = call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %4850, <32 x i32> %4851, <32 x i32> zeroinitializer) #11
  %4853 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4843)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4853, <32 x i32>* nonnull %4670, i32 128, <32 x i1> %4671), !tbaa !111
  %4854 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4843)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4854, <32 x i32>* nonnull %4673, i32 128, <32 x i1> %4674), !tbaa !119
  %4855 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4852)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4855, <32 x i32>* nonnull %4676, i32 128, <32 x i1> %4677), !tbaa !121
  %4856 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4852)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4856, <32 x i32>* nonnull %4679, i32 128, <32 x i1> %4680), !tbaa !124
  %4857 = add nuw nsw i32 %"sum_filter.s1.r19$x120.us4741.epil", 1
  %epil.iter5120.sub = add i32 %epil.iter5120, -1
  %epil.iter5120.cmp.not = icmp eq i32 %epil.iter5120.sub, 0
  br i1 %epil.iter5120.cmp.not, label %"end for sum_filter.s1.r19$x119.loopexit.split.us4743", label %"for sum_filter.s1.r19$x118.us4740.epil", !llvm.loop !208

"end for sum_filter.s1.r19$x119.loopexit.split.us4743": ; preds = %"for sum_filter.s1.r19$x118.us4740.epil", %"end for sum_filter.s1.r19$x119.loopexit.split.us4743.unr-lcssa"
  %4858 = add nuw nsw i32 %"sum_filter.s1.r19$y117.us", 1
  %.not652.us = icmp eq i32 %4858, %6
  br i1 %.not652.us, label %"consume sum_filter139", label %"for sum_filter.s1.r19$y115.us"

"consume sum_filter139":                          ; preds = %"end for sum_filter.s1.r19$x119.loopexit.split.us4743", %"end for sum_filter.s1.r19$x119.loopexit.split.us.us.us", %"produce sum_filter114"
  %4859 = zext <128 x i1> %4669 to <128 x i8>
  %4860 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %4859) #9
  %4861 = and i8 %4860, 1
  %t2487.not = icmp eq i8 %4861, 0
  br i1 %t2487.not, label %after_bb157, label %true_bb152

true_bb152:                                       ; preds = %"consume sum_filter139"
  %4862 = bitcast i8* %0 to <32 x i32>*
  %4863 = load <32 x i32>, <32 x i32>* %4862, align 4, !tbaa !209
  %4864 = getelementptr inbounds i8, i8* %0, i32 128
  %4865 = bitcast i8* %4864 to <32 x i32>*
  %4866 = load <32 x i32>, <32 x i32>* %4865, align 4, !tbaa !216
  %4867 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4866, <32 x i32> %4863)
  %4868 = shufflevector <64 x i32> %4867, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4869 = bitcast <128 x i32> %4868 to <64 x i64>
  %4870 = shufflevector <64 x i64> %4869, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4871 = bitcast <32 x i64> %4870 to <64 x i32>
  %4872 = load <32 x i32>, <32 x i32>* %4670, align 128, !tbaa !111
  %4873 = load <32 x i32>, <32 x i32>* %4673, align 128, !tbaa !119
  %4874 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4873, <32 x i32> %4872)
  %4875 = shufflevector <64 x i32> %4874, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4876 = bitcast <128 x i32> %4875 to <64 x i64>
  %4877 = shufflevector <64 x i64> %4876, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4878 = bitcast <32 x i64> %4877 to <64 x i32>
  %4879 = load <32 x i32>, <32 x i32>* %4676, align 128, !tbaa !121
  %4880 = load <32 x i32>, <32 x i32>* %4679, align 128, !tbaa !124
  %4881 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4880, <32 x i32> %4879)
  %4882 = shufflevector <64 x i32> %4874, <64 x i32> %4881, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast = bitcast <128 x i32> %4882 to <64 x i64>
  br label %after_bb157

after_bb157:                                      ; preds = %"consume sum_filter139", %true_bb152
  %4883 = phi <64 x i32> [ %4878, %true_bb152 ], [ zeroinitializer, %"consume sum_filter139" ]
  %4884 = phi <64 x i32> [ %4871, %true_bb152 ], [ zeroinitializer, %"consume sum_filter139" ]
  %4885 = phi <64 x i64> [ %phi.cast, %true_bb152 ], [ zeroinitializer, %"consume sum_filter139" ]
  %4886 = zext i8 %input_zero to i32
  %4887 = shufflevector <64 x i64> %4885, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4888 = bitcast <32 x i64> %4887 to <64 x i32>
  %4889 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4886) #11
  %4890 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4883) #11
  %4891 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4889, <32 x i32> %4890) #11
  %4892 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4891, <32 x i32> %4889, <32 x i32> %4890) #11
  %4893 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4888) #11
  %4894 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4889, <32 x i32> %4893) #11
  %4895 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4894, <32 x i32> %4889, <32 x i32> %4893) #11
  %4896 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4892, <32 x i32> %4895) #11
  %4897 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %4884, <64 x i32> %4896) #11
  br i1 %t2487.not, label %after_bb175, label %true_bb170

true_bb170:                                       ; preds = %after_bb157
  %4898 = getelementptr inbounds i8, i8* %0, i32 256
  %4899 = bitcast i8* %4898 to <32 x i32>*
  %4900 = load <32 x i32>, <32 x i32>* %4899, align 4, !tbaa !218
  %4901 = getelementptr inbounds i8, i8* %0, i32 384
  %4902 = bitcast i8* %4901 to <32 x i32>*
  %4903 = load <32 x i32>, <32 x i32>* %4902, align 4, !tbaa !221
  %4904 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4903, <32 x i32> %4900)
  %4905 = shufflevector <64 x i32> %4904, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4906 = bitcast <128 x i32> %4905 to <64 x i64>
  %4907 = shufflevector <64 x i64> %4906, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4908 = bitcast <32 x i64> %4907 to <64 x i32>
  %4909 = load <32 x i32>, <32 x i32>* %4676, align 128, !tbaa !121
  %4910 = load <32 x i32>, <32 x i32>* %4679, align 128, !tbaa !124
  %4911 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4910, <32 x i32> %4909)
  %4912 = shufflevector <64 x i32> %4911, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4913 = bitcast <128 x i32> %4912 to <64 x i64>
  %4914 = shufflevector <64 x i64> %4913, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4915 = bitcast <32 x i64> %4914 to <64 x i32>
  %4916 = load <32 x i32>, <32 x i32>* %4670, align 128, !tbaa !111
  %4917 = load <32 x i32>, <32 x i32>* %4673, align 128, !tbaa !119
  %4918 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4917, <32 x i32> %4916)
  %4919 = shufflevector <64 x i32> %4918, <64 x i32> %4911, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast4980 = bitcast <128 x i32> %4919 to <64 x i64>
  br label %after_bb175

after_bb175:                                      ; preds = %after_bb157, %true_bb170
  %4920 = phi <64 x i32> [ %4915, %true_bb170 ], [ zeroinitializer, %after_bb157 ]
  %4921 = phi <64 x i32> [ %4908, %true_bb170 ], [ zeroinitializer, %after_bb157 ]
  %4922 = phi <64 x i64> [ %phi.cast4980, %true_bb170 ], [ zeroinitializer, %after_bb157 ]
  %4923 = shufflevector <64 x i64> %4922, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4924 = bitcast <32 x i64> %4923 to <64 x i32>
  %4925 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4920) #11
  %4926 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4889, <32 x i32> %4925) #11
  %4927 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4926, <32 x i32> %4889, <32 x i32> %4925) #11
  %4928 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4924) #11
  %4929 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4889, <32 x i32> %4928) #11
  %4930 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4929, <32 x i32> %4889, <32 x i32> %4928) #11
  %4931 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4927, <32 x i32> %4930) #11
  %4932 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %4921, <64 x i32> %4931) #11
  %4933 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4897)
  %4934 = bitcast [512 x i32]* %offset_c639 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4933, <32 x i32>* nonnull %4934, i32 128, <32 x i1> %4671), !tbaa !131
  %4935 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4897)
  %4936 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 32
  %4937 = bitcast i32* %4936 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4935, <32 x i32>* nonnull %4937, i32 128, <32 x i1> %4674), !tbaa !139
  %4938 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4932)
  %4939 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 64
  %4940 = bitcast i32* %4939 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4938, <32 x i32>* nonnull %4940, i32 128, <32 x i1> %4677), !tbaa !141
  %4941 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4932)
  %4942 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c639, i32 0, i32 96
  %4943 = bitcast i32* %4942 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4941, <32 x i32>* nonnull %4943, i32 128, <32 x i1> %4680), !tbaa !144
  %t2427 = icmp slt i32 %a133, 0
  %t2429 = icmp slt i32 %stride_x, 0
  %4944 = add nsw i32 %4, -1
  %4945 = mul nsw i32 %4944, %a133
  %t2430 = select i1 %t2427, i32 %4945, i32 0
  %t2431.s = select i1 %t2429, i32 %20, i32 1
  %t2432 = icmp slt i32 %a128, 0
  %t2434 = icmp slt i32 %stride_y, 0
  %4946 = add nsw i32 %6, -1
  %4947 = mul nsw i32 %4946, %a128
  %t2435 = select i1 %t2432, i32 %4947, i32 0
  %t2436.s = select i1 %t2434, i32 %23, i32 1
  %t2420 = icmp eq i32 %depth_multiplier, 1
  %a128.op = shl i32 %a128, 1
  %4948 = select i1 %t2432, i32 %a128.op, i32 0
  %4949 = select i1 %4279, i32 %4948, i32 %t2435
  %4950 = add i32 %22, -1
  %4951 = add i32 %4950, %t2436.s
  %4952 = mul nsw i32 %4951, %stride_y
  %a133.op = shl i32 %a133, 1
  %4953 = select i1 %t2427, i32 %a133.op, i32 0
  %4954 = select i1 %4279, i32 %4953, i32 %t2430
  %4955 = add i32 %19, -1
  %4956 = add i32 %4955, %t2431.s
  %4957 = mul nsw i32 %4956, %stride_x
  %4958 = select i1 %t2432, i32 0, i32 %4947
  %4959 = add nsw i32 %23, -1
  %4960 = select i1 %t2434, i32 0, i32 %4959
  %4961 = add nsw i32 %4960, %22
  %4962 = mul nsw i32 %4961, %stride_y
  %b127 = add nsw i32 %4962, %4958
  %4963 = select i1 %t2427, i32 0, i32 %4945
  %4964 = add nsw i32 %20, -1
  %4965 = select i1 %t2429, i32 0, i32 %4964
  %4966 = add nsw i32 %4965, %19
  %4967 = mul nsw i32 %4966, %stride_x
  %b132 = add nsw i32 %4967, %4963
  %4968 = mul nsw i32 %13, %12
  %4969 = mul nsw i32 %16, %14
  %4970 = mul nsw i32 %11, %10
  %4971 = add i32 %4968, %4970
  %t2421 = add i32 %4971, %4969
  %4972 = icmp sgt i32 %15, 0
  br i1 %4972, label %"for output.s0.b.rebased178.preheader", label %if.then.i758, !prof !101

"for output.s0.b.rebased178.preheader":           ; preds = %after_bb175
  %b131 = add nsw i32 %4957, %4954
  %b126 = add nsw i32 %4952, %4949
  %a124 = add nsw i32 %4952, %t2435
  %4973 = icmp slt i32 %t2435, %4949
  %resampled_input.y.min_realized = select i1 %4973, i32 %a124, i32 %b126
  %4974 = icmp sgt i32 %a128, 0
  %4975 = select i1 %4974, i32 %a128, i32 0
  %4976 = shl nuw nsw i32 %4975, 1
  %4977 = select i1 %4279, i32 %4976, i32 %4958
  %a125 = add nsw i32 %4962, %4977
  %4978 = icmp sgt i32 %4977, %4958
  %4979 = select i1 %4978, i32 %a125, i32 %b127
  %a137 = sub nsw i32 %4979, %resampled_input.y.min_realized
  %a129 = add nsw i32 %4957, %t2430
  %4980 = icmp slt i32 %t2430, %4954
  %resampled_input.x.min_realized = select i1 %4980, i32 %a129, i32 %b131
  %4981 = icmp sgt i32 %a133, 0
  %4982 = select i1 %4981, i32 %a133, i32 0
  %4983 = shl nuw nsw i32 %4982, 1
  %4984 = select i1 %4279, i32 %4983, i32 %4963
  %a130 = add nsw i32 %4967, %4984
  %4985 = icmp sgt i32 %4984, %4963
  %4986 = select i1 %4985, i32 %a130, i32 %b132
  %a136 = sub nsw i32 %4986, %resampled_input.x.min_realized
  %4987 = icmp sgt i32 %a136, -1
  %t2549 = select i1 %4987, i32 %a136, i32 -1
  %4988 = icmp sgt i32 %a137, -1
  %t2550 = select i1 %4988, i32 %a137, i32 -1
  %4989 = add nsw i32 %t2550, 1
  %4990 = shl i32 %t2549, 7
  %t2551 = add i32 %4990, 128
  %4991 = mul i32 %t2551, %4989
  %4992 = add i32 %4991, 131
  %4993 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2448 = sub nsw i32 %b132, %a129
  %t2447 = sub nsw i32 %b127, %a124
  %4994 = icmp sgt i32 %t2447, -1
  %4995 = sub i32 %a124, %resampled_input.y.min_realized
  %4996 = add nsw i32 %a136, 1
  %4997 = sub i32 %a129, %resampled_input.x.min_realized
  %4998 = icmp sgt i32 %t2448, -1
  %4999 = icmp sgt i32 %3, 1
  %5000 = icmp eq i32 %depth_multiplier, 0
  %t2553 = sext i1 %5000 to i32
  %5001 = sub nsw i32 %depth_multiplier, %t2553
  %5002 = add i32 %5001, 1
  %5003 = icmp ult i32 %5002, 3
  %5004 = select i1 %5003, i32 %5001, i32 0
  %5005 = xor i32 %t2553, -1
  %5006 = and i32 %5004, %5005
  %.not4667 = icmp eq i32 %3, 2
  %5007 = icmp sgt i32 %3, 3
  %.not4668 = icmp eq i32 %3, 4
  %5008 = icmp sgt i32 %3, 5
  %.not4669 = icmp eq i32 %3, 6
  %5009 = icmp sgt i32 %3, 7
  %.not4670 = icmp eq i32 %3, 8
  %5010 = icmp sgt i32 %3, 9
  %.not4671 = icmp eq i32 %3, 10
  %5011 = icmp sgt i32 %3, 11
  %.not4672 = icmp eq i32 %3, 12
  %5012 = icmp sgt i32 %3, 13
  %.not4673 = icmp eq i32 %3, 14
  %5013 = icmp sgt i32 %3, 15
  %.not4674 = icmp eq i32 %3, 16
  %5014 = icmp sgt i32 %3, 17
  %.not4675 = icmp eq i32 %3, 18
  %5015 = icmp sgt i32 %3, 19
  %.not4676 = icmp eq i32 %3, 20
  %5016 = icmp sgt i32 %3, 21
  %.not4677 = icmp eq i32 %3, 22
  %5017 = icmp sgt i32 %3, 23
  %.not4678 = icmp eq i32 %3, 24
  %5018 = icmp sgt i32 %3, 25
  %.not4679 = icmp eq i32 %3, 26
  %5019 = icmp sgt i32 %3, 27
  %.not4680 = icmp eq i32 %3, 28
  %5020 = icmp sgt i32 %3, 29
  %.not4681 = icmp eq i32 %3, 30
  %5021 = icmp sgt i32 %3, 31
  %.not4682 = icmp eq i32 %3, 32
  %5022 = icmp sgt i32 %3, 33
  %.not4683 = icmp eq i32 %3, 34
  %5023 = icmp sgt i32 %3, 35
  %.not4684 = icmp eq i32 %3, 36
  %5024 = icmp sgt i32 %3, 37
  %.not4685 = icmp eq i32 %3, 38
  %5025 = icmp sgt i32 %3, 39
  %.not4686 = icmp eq i32 %3, 40
  %5026 = icmp sgt i32 %3, 41
  %.not4687 = icmp eq i32 %3, 42
  %5027 = icmp sgt i32 %3, 43
  %.not4688 = icmp eq i32 %3, 44
  %5028 = icmp sgt i32 %3, 45
  %.not4689 = icmp eq i32 %3, 46
  %5029 = icmp sgt i32 %3, 47
  %.not4690 = icmp eq i32 %3, 48
  %5030 = icmp sgt i32 %3, 49
  %.not4691 = icmp eq i32 %3, 50
  %5031 = icmp sgt i32 %3, 51
  %.not4692 = icmp eq i32 %3, 52
  %5032 = icmp sgt i32 %3, 53
  %.not4693 = icmp eq i32 %3, 54
  %5033 = icmp sgt i32 %3, 55
  %.not4694 = icmp eq i32 %3, 56
  %5034 = icmp sgt i32 %3, 57
  %.not4695 = icmp eq i32 %3, 58
  %5035 = icmp sgt i32 %3, 59
  %.not4696 = icmp eq i32 %3, 60
  %5036 = icmp sgt i32 %3, 61
  %.not4697 = icmp eq i32 %3, 62
  %.not4636 = icmp eq i32 %3, 65
  %5037 = icmp sgt i32 %3, 66
  %.not4637 = icmp eq i32 %3, 67
  %5038 = icmp sgt i32 %3, 68
  %.not4638 = icmp eq i32 %3, 69
  %5039 = icmp sgt i32 %3, 70
  %.not4639 = icmp eq i32 %3, 71
  %5040 = icmp sgt i32 %3, 72
  %.not4640 = icmp eq i32 %3, 73
  %5041 = icmp sgt i32 %3, 74
  %.not4641 = icmp eq i32 %3, 75
  %5042 = icmp sgt i32 %3, 76
  %.not4642 = icmp eq i32 %3, 77
  %5043 = icmp sgt i32 %3, 78
  %.not4643 = icmp eq i32 %3, 79
  %5044 = icmp sgt i32 %3, 80
  %.not4644 = icmp eq i32 %3, 81
  %5045 = icmp sgt i32 %3, 82
  %.not4645 = icmp eq i32 %3, 83
  %5046 = icmp sgt i32 %3, 84
  %.not4646 = icmp eq i32 %3, 85
  %5047 = icmp sgt i32 %3, 86
  %.not4647 = icmp eq i32 %3, 87
  %5048 = icmp sgt i32 %3, 88
  %.not4648 = icmp eq i32 %3, 89
  %5049 = icmp sgt i32 %3, 90
  %.not4649 = icmp eq i32 %3, 91
  %5050 = icmp sgt i32 %3, 92
  %.not4650 = icmp eq i32 %3, 93
  %5051 = icmp sgt i32 %3, 94
  %.not4651 = icmp eq i32 %3, 95
  %5052 = icmp sgt i32 %3, 96
  %.not4652 = icmp eq i32 %3, 97
  %5053 = icmp sgt i32 %3, 98
  %.not4653 = icmp eq i32 %3, 99
  %5054 = icmp sgt i32 %3, 100
  %.not4654 = icmp eq i32 %3, 101
  %5055 = icmp sgt i32 %3, 102
  %.not4655 = icmp eq i32 %3, 103
  %5056 = icmp sgt i32 %3, 104
  %.not4656 = icmp eq i32 %3, 105
  %5057 = icmp sgt i32 %3, 106
  %.not4657 = icmp eq i32 %3, 107
  %5058 = icmp sgt i32 %3, 108
  %.not4658 = icmp eq i32 %3, 109
  %5059 = icmp sgt i32 %3, 110
  %.not4659 = icmp eq i32 %3, 111
  %5060 = icmp sgt i32 %3, 112
  %.not4660 = icmp eq i32 %3, 113
  %5061 = icmp sgt i32 %3, 114
  %.not4661 = icmp eq i32 %3, 115
  %5062 = icmp sgt i32 %3, 116
  %.not4662 = icmp eq i32 %3, 117
  %5063 = icmp sgt i32 %3, 118
  %.not4663 = icmp eq i32 %3, 119
  %5064 = icmp sgt i32 %3, 120
  %.not4664 = icmp eq i32 %3, 121
  %5065 = icmp sgt i32 %3, 122
  %.not4665 = icmp eq i32 %3, 123
  %5066 = icmp sgt i32 %3, 124
  %.not4666 = icmp eq i32 %3, 125
  %5067 = icmp sgt i32 %3, 126
  %5068 = icmp sgt i32 %23, 0
  %5069 = sub i32 %a128.op, %resampled_input.y.min_realized
  %5070 = sub i32 %a128, %resampled_input.y.min_realized
  %.neg = mul i32 %24, %22
  %.neg4698 = mul i32 %21, %19
  %.neg4699 = mul i32 %25, %14
  %5071 = icmp sgt i32 %20, 0
  %5072 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 768
  %5073 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 1024
  %5074 = bitcast i16* %5073 to <32 x i32>*
  %5075 = sub nsw i32 %a133.op, %resampled_input.x.min_realized
  %5076 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 896
  %5077 = bitcast i16* %5076 to <32 x i32>*
  %5078 = sub nsw i32 %a133, %resampled_input.x.min_realized
  %5079 = bitcast i16* %5072 to <32 x i32>*
  %5080 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 384
  %5081 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 640
  %5082 = bitcast i16* %5081 to <32 x i32>*
  %5083 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 512
  %5084 = bitcast i16* %5083 to <32 x i32>*
  %5085 = bitcast i16* %5080 to <32 x i32>*
  %5086 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 256
  %5087 = bitcast i16* %5086 to <32 x i32>*
  %5088 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 128
  %5089 = bitcast i16* %5088 to <32 x i32>*
  %5090 = bitcast i16* %filter_zeroed95 to <32 x i32>*
  %5091 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 1088
  %5092 = bitcast i16* %5091 to <32 x i32>*
  %5093 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 960
  %5094 = bitcast i16* %5093 to <32 x i32>*
  %5095 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 832
  %5096 = bitcast i16* %5095 to <32 x i32>*
  %5097 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 704
  %5098 = bitcast i16* %5097 to <32 x i32>*
  %5099 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 576
  %5100 = bitcast i16* %5099 to <32 x i32>*
  %5101 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 448
  %5102 = bitcast i16* %5101 to <32 x i32>*
  %5103 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 320
  %5104 = bitcast i16* %5103 to <32 x i32>*
  %5105 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 192
  %5106 = bitcast i16* %5105 to <32 x i32>*
  %5107 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 64
  %5108 = bitcast i16* %5107 to <32 x i32>*
  %5109 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %5110 = shufflevector <32 x i32> %5109, <32 x i32> undef, <32 x i32> zeroinitializer
  %5111 = sext <32 x i32> %5110 to <32 x i64>
  %5112 = shl nuw i32 1, %output_shift
  %5113 = ashr i32 %5112, 1
  %5114 = zext i8 %output_zero to i16
  %5115 = insertelement <128 x i16> undef, i16 %5114, i32 0
  %5116 = shufflevector <128 x i16> %5115, <128 x i16> undef, <128 x i32> zeroinitializer
  %5117 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %5118 = shufflevector <128 x i8> %5117, <128 x i8> undef, <128 x i32> zeroinitializer
  %5119 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %5120 = shufflevector <128 x i8> %5119, <128 x i8> undef, <128 x i32> zeroinitializer
  %5121 = bitcast <128 x i16> %5116 to <64 x i32>
  %5122 = bitcast <128 x i8> %5118 to <32 x i32>
  %5123 = bitcast <128 x i8> %5120 to <32 x i32>
  %reass.add = add i32 %.neg, %.neg4698
  %reass.add4701 = add i32 %reass.add, %.neg4699
  %xtraiter5129 = and i32 %4, 1
  %5124 = icmp eq i32 %4, 1
  %unroll_iter5131 = and i32 %4, -2
  %lcmp.mod5130.not = icmp eq i32 %xtraiter5129, 0
  br label %"for output.s0.b.rebased178"

"for output.s0.b.rebased178":                     ; preds = %"for output.s0.b.rebased178.preheader", %"end for output.s0.y.yo586"
  %output.s0.b.rebased180 = phi i32 [ %6065, %"end for output.s0.y.yo586" ], [ 0, %"for output.s0.b.rebased178.preheader" ]
  %5125 = load i32, i32* %.fca.1.gep603, align 4, !tbaa !95
  %cmp.i837 = icmp ult i32 %5125, %4992
  %5126 = load i8*, i8** %.fca.0.gep602, align 4, !tbaa !97
  br i1 %cmp.i837, label %if.then.i840, label %pseudostack_alloc.exit853, !prof !99

if.then.i840:                                     ; preds = %"for output.s0.b.rebased178"
  %tobool1.not.i839 = icmp ne i8* %5126, null
  %5127 = load i32, i32* %.fca.2.gep604, align 4
  %cmp2.i842 = icmp ugt i32 %5127, 16384
  %or.cond4635 = and i1 %tobool1.not.i839, %cmp2.i842
  br i1 %or.cond4635, label %if.then3.i844, label %if.end.i848

if.then3.i844:                                    ; preds = %if.then.i840
  call void @halide_free(i8* null, i8* nonnull %5126) #15
  %.pre = load i32, i32* %.fca.2.gep604, align 4, !tbaa !98
  br label %if.end.i848

if.end.i848:                                      ; preds = %if.then3.i844, %if.then.i840
  %5128 = phi i32 [ %.pre, %if.then3.i844 ], [ %5127, %if.then.i840 ]
  %add.i846 = add i32 %5128, %4992
  store i32 %add.i846, i32* %.fca.2.gep604, align 4, !tbaa !98
  %cmp7.i847 = icmp ugt i32 %add.i846, 16384
  br i1 %cmp7.i847, label %if.then8.i850, label %if.end11.i852

if.then8.i850:                                    ; preds = %if.end.i848
  %call.i849 = call i8* @halide_malloc(i8* null, i32 %4992) #15
  br label %if.end11.i852

if.end11.i852:                                    ; preds = %if.then8.i850, %if.end.i848
  %storemerge.i851 = phi i8* [ %call.i849, %if.then8.i850 ], [ null, %if.end.i848 ]
  store i8* %storemerge.i851, i8** %.fca.0.gep602, align 4, !tbaa !97
  store i32 %4992, i32* %.fca.1.gep603, align 4, !tbaa !95
  br label %pseudostack_alloc.exit853

pseudostack_alloc.exit853:                        ; preds = %"for output.s0.b.rebased178", %if.end11.i852
  %5129 = phi i8* [ %storemerge.i851, %if.end11.i852 ], [ %5126, %"for output.s0.b.rebased178" ]
  %.not642 = icmp eq i8* %5129, null
  br i1 %.not642, label %then_bb182, label %"produce resampled_input184", !prof !100

then_bb182:                                       ; preds = %pseudostack_alloc.exit853
  %5130 = alloca i8*, i32 %4992, align 128
  %5131 = bitcast i8** %5130 to i8*
  store i8** %5130, i8*** %4993, align 4
  br label %"produce resampled_input184"

"produce resampled_input184":                     ; preds = %pseudostack_alloc.exit853, %then_bb182
  %resampled_input183 = phi i8* [ %5131, %then_bb182 ], [ %5129, %pseudostack_alloc.exit853 ]
  br i1 %t2420, label %then_bb186, label %next_bb187

then_bb186:                                       ; preds = %"produce resampled_input184"
  br i1 %4994, label %"for resampled_input.s0.y.rebased188.preheader", label %"consume resampled_input584", !prof !101

"for resampled_input.s0.y.rebased188.preheader":  ; preds = %then_bb186
  %5132 = add nsw i32 %output.s0.b.rebased180, %14
  %5133 = mul nsw i32 %5132, %16
  %5134 = sub i32 %5133, %t2421
  br i1 %4998, label %"for resampled_input.s0.y.rebased188.us", label %"consume resampled_input584", !prof !101

"for resampled_input.s0.y.rebased188.us":         ; preds = %"for resampled_input.s0.y.rebased188.preheader", %"end for resampled_input.s0.x.rebased192.loopexit.us"
  %resampled_input.s0.y.rebased190.us = phi i32 [ %5150, %"end for resampled_input.s0.x.rebased192.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased188.preheader" ]
  %5135 = add nsw i32 %4995, %resampled_input.s0.y.rebased190.us
  %5136 = mul nsw i32 %5135, %4996
  %t2446.us = add nsw i32 %4997, %5136
  %5137 = add nsw i32 %resampled_input.s0.y.rebased190.us, %a124
  %5138 = mul nsw i32 %5137, %13
  %t2445.us = add nsw i32 %5134, %5138
  br label %"for resampled_input.s0.x.rebased191.us"

"for resampled_input.s0.x.rebased191.us":         ; preds = %"for resampled_input.s0.y.rebased188.us", %"for resampled_input.s0.x.rebased191.us"
  %resampled_input.s0.x.rebased193.us = phi i32 [ %5149, %"for resampled_input.s0.x.rebased191.us" ], [ 0, %"for resampled_input.s0.y.rebased188.us" ]
  %5139 = add nsw i32 %resampled_input.s0.x.rebased193.us, %a129
  %5140 = mul nsw i32 %5139, %11
  %5141 = add nsw i32 %t2445.us, %5140
  %5142 = getelementptr inbounds i8, i8* %8, i32 %5141
  %5143 = bitcast i8* %5142 to <128 x i8>*
  %5144 = load <128 x i8>, <128 x i8>* %5143, align 1, !tbaa !127
  %5145 = add nsw i32 %t2446.us, %resampled_input.s0.x.rebased193.us
  %5146 = shl nsw i32 %5145, 7
  %5147 = getelementptr inbounds i8, i8* %resampled_input183, i32 %5146
  %5148 = bitcast i8* %5147 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5144, <128 x i8>* %5148, i32 128, <128 x i1> %4669), !tbaa !129
  %5149 = add nuw nsw i32 %resampled_input.s0.x.rebased193.us, 1
  %.not651.us = icmp eq i32 %resampled_input.s0.x.rebased193.us, %t2448
  br i1 %.not651.us, label %"end for resampled_input.s0.x.rebased192.loopexit.us", label %"for resampled_input.s0.x.rebased191.us"

"end for resampled_input.s0.x.rebased192.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased191.us"
  %5150 = add nuw nsw i32 %resampled_input.s0.y.rebased190.us, 1
  %.not650.us = icmp eq i32 %resampled_input.s0.y.rebased190.us, %t2447
  br i1 %.not650.us, label %"consume resampled_input584", label %"for resampled_input.s0.y.rebased188.us"

next_bb187:                                       ; preds = %"produce resampled_input184"
  br i1 %4994, label %"for resampled_input.s0.y.rebased194.preheader", label %"consume resampled_input584", !prof !101

"for resampled_input.s0.y.rebased194.preheader":  ; preds = %next_bb187
  %5151 = add nsw i32 %output.s0.b.rebased180, %14
  %5152 = mul nsw i32 %5151, %16
  %5153 = sub i32 %5152, %t2421
  br i1 %4998, label %"for resampled_input.s0.y.rebased194.us", label %"consume resampled_input584", !prof !101

"for resampled_input.s0.y.rebased194.us":         ; preds = %"for resampled_input.s0.y.rebased194.preheader", %"end for resampled_input.s0.x.rebased198.loopexit.us"
  %resampled_input.s0.y.rebased196.us = phi i32 [ %6049, %"end for resampled_input.s0.x.rebased198.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased194.preheader" ]
  %5154 = add nsw i32 %4995, %resampled_input.s0.y.rebased196.us
  %5155 = mul nsw i32 %5154, %4996
  %t2453.us = add nsw i32 %4997, %5155
  %5156 = add nsw i32 %resampled_input.s0.y.rebased196.us, %a124
  %5157 = mul nsw i32 %5156, %13
  %t2452.us = add nsw i32 %5153, %5157
  br label %"for resampled_input.s0.x.rebased197.us"

"for resampled_input.s0.x.rebased197.us":         ; preds = %"for resampled_input.s0.y.rebased194.us", %after_bb583.us
  %resampled_input.s0.x.rebased199.us = phi i32 [ %6048, %after_bb583.us ], [ 0, %"for resampled_input.s0.y.rebased194.us" ]
  %5158 = add nsw i32 %resampled_input.s0.x.rebased199.us, %a129
  %5159 = mul nsw i32 %5158, %11
  %5160 = add nsw i32 %t2452.us, %5159
  %5161 = getelementptr inbounds i8, i8* %8, i32 %5160
  %5162 = load i8, i8* %5161, align 1, !tbaa !127
  br i1 %4999, label %after_bb205.us, label %after_bb388.us

after_bb205.us:                                   ; preds = %"for resampled_input.s0.x.rebased197.us"
  %5163 = add nsw i32 %5160, %5006
  %5164 = getelementptr inbounds i8, i8* %8, i32 %5163
  %5165 = load i8, i8* %5164, align 1, !tbaa !127
  br i1 %.not4667, label %after_bb388.us, label %after_bb208.us

after_bb208.us:                                   ; preds = %after_bb205.us
  %5166 = sdiv i32 2, %5001
  %5167 = and i32 %5166, %5005
  %5168 = add nsw i32 %5167, %5160
  %5169 = getelementptr inbounds i8, i8* %8, i32 %5168
  %5170 = load i8, i8* %5169, align 1, !tbaa !127
  br i1 %5007, label %after_bb211.us, label %after_bb388.us

after_bb211.us:                                   ; preds = %after_bb208.us
  %5171 = sdiv i32 3, %5001
  %5172 = and i32 %5171, %5005
  %5173 = add nsw i32 %5172, %5160
  %5174 = getelementptr inbounds i8, i8* %8, i32 %5173
  %5175 = load i8, i8* %5174, align 1, !tbaa !127
  br i1 %.not4668, label %after_bb388.us, label %after_bb214.us

after_bb214.us:                                   ; preds = %after_bb211.us
  %5176 = sdiv i32 4, %5001
  %5177 = and i32 %5176, %5005
  %5178 = add nsw i32 %5177, %5160
  %5179 = getelementptr inbounds i8, i8* %8, i32 %5178
  %5180 = load i8, i8* %5179, align 1, !tbaa !127
  br i1 %5008, label %after_bb217.us, label %after_bb388.us

after_bb217.us:                                   ; preds = %after_bb214.us
  %5181 = sdiv i32 5, %5001
  %5182 = and i32 %5181, %5005
  %5183 = add nsw i32 %5182, %5160
  %5184 = getelementptr inbounds i8, i8* %8, i32 %5183
  %5185 = load i8, i8* %5184, align 1, !tbaa !127
  br i1 %.not4669, label %after_bb388.us, label %after_bb220.us

after_bb220.us:                                   ; preds = %after_bb217.us
  %5186 = sdiv i32 6, %5001
  %5187 = and i32 %5186, %5005
  %5188 = add nsw i32 %5187, %5160
  %5189 = getelementptr inbounds i8, i8* %8, i32 %5188
  %5190 = load i8, i8* %5189, align 1, !tbaa !127
  br i1 %5009, label %after_bb223.us, label %after_bb388.us

after_bb223.us:                                   ; preds = %after_bb220.us
  %5191 = sdiv i32 7, %5001
  %5192 = and i32 %5191, %5005
  %5193 = add nsw i32 %5192, %5160
  %5194 = getelementptr inbounds i8, i8* %8, i32 %5193
  %5195 = load i8, i8* %5194, align 1, !tbaa !127
  br i1 %.not4670, label %after_bb388.us, label %after_bb226.us

after_bb226.us:                                   ; preds = %after_bb223.us
  %5196 = sdiv i32 8, %5001
  %5197 = and i32 %5196, %5005
  %5198 = add nsw i32 %5197, %5160
  %5199 = getelementptr inbounds i8, i8* %8, i32 %5198
  %5200 = load i8, i8* %5199, align 1, !tbaa !127
  br i1 %5010, label %after_bb229.us, label %after_bb388.us

after_bb229.us:                                   ; preds = %after_bb226.us
  %5201 = sdiv i32 9, %5001
  %5202 = and i32 %5201, %5005
  %5203 = add nsw i32 %5202, %5160
  %5204 = getelementptr inbounds i8, i8* %8, i32 %5203
  %5205 = load i8, i8* %5204, align 1, !tbaa !127
  br i1 %.not4671, label %after_bb388.us, label %after_bb232.us

after_bb232.us:                                   ; preds = %after_bb229.us
  %5206 = sdiv i32 10, %5001
  %5207 = and i32 %5206, %5005
  %5208 = add nsw i32 %5207, %5160
  %5209 = getelementptr inbounds i8, i8* %8, i32 %5208
  %5210 = load i8, i8* %5209, align 1, !tbaa !127
  br i1 %5011, label %after_bb235.us, label %after_bb388.us

after_bb235.us:                                   ; preds = %after_bb232.us
  %5211 = sdiv i32 11, %5001
  %5212 = and i32 %5211, %5005
  %5213 = add nsw i32 %5212, %5160
  %5214 = getelementptr inbounds i8, i8* %8, i32 %5213
  %5215 = load i8, i8* %5214, align 1, !tbaa !127
  br i1 %.not4672, label %after_bb388.us, label %after_bb238.us

after_bb238.us:                                   ; preds = %after_bb235.us
  %5216 = sdiv i32 12, %5001
  %5217 = and i32 %5216, %5005
  %5218 = add nsw i32 %5217, %5160
  %5219 = getelementptr inbounds i8, i8* %8, i32 %5218
  %5220 = load i8, i8* %5219, align 1, !tbaa !127
  br i1 %5012, label %after_bb241.us, label %after_bb388.us

after_bb241.us:                                   ; preds = %after_bb238.us
  %5221 = sdiv i32 13, %5001
  %5222 = and i32 %5221, %5005
  %5223 = add nsw i32 %5222, %5160
  %5224 = getelementptr inbounds i8, i8* %8, i32 %5223
  %5225 = load i8, i8* %5224, align 1, !tbaa !127
  br i1 %.not4673, label %after_bb388.us, label %after_bb244.us

after_bb244.us:                                   ; preds = %after_bb241.us
  %5226 = sdiv i32 14, %5001
  %5227 = and i32 %5226, %5005
  %5228 = add nsw i32 %5227, %5160
  %5229 = getelementptr inbounds i8, i8* %8, i32 %5228
  %5230 = load i8, i8* %5229, align 1, !tbaa !127
  br i1 %5013, label %after_bb247.us, label %after_bb388.us

after_bb247.us:                                   ; preds = %after_bb244.us
  %5231 = sdiv i32 15, %5001
  %5232 = and i32 %5231, %5005
  %5233 = add nsw i32 %5232, %5160
  %5234 = getelementptr inbounds i8, i8* %8, i32 %5233
  %5235 = load i8, i8* %5234, align 1, !tbaa !127
  br i1 %.not4674, label %after_bb388.us, label %after_bb250.us

after_bb250.us:                                   ; preds = %after_bb247.us
  %5236 = sdiv i32 16, %5001
  %5237 = and i32 %5236, %5005
  %5238 = add nsw i32 %5237, %5160
  %5239 = getelementptr inbounds i8, i8* %8, i32 %5238
  %5240 = load i8, i8* %5239, align 1, !tbaa !127
  br i1 %5014, label %after_bb253.us, label %after_bb388.us

after_bb253.us:                                   ; preds = %after_bb250.us
  %5241 = sdiv i32 17, %5001
  %5242 = and i32 %5241, %5005
  %5243 = add nsw i32 %5242, %5160
  %5244 = getelementptr inbounds i8, i8* %8, i32 %5243
  %5245 = load i8, i8* %5244, align 1, !tbaa !127
  br i1 %.not4675, label %after_bb388.us, label %after_bb256.us

after_bb256.us:                                   ; preds = %after_bb253.us
  %5246 = sdiv i32 18, %5001
  %5247 = and i32 %5246, %5005
  %5248 = add nsw i32 %5247, %5160
  %5249 = getelementptr inbounds i8, i8* %8, i32 %5248
  %5250 = load i8, i8* %5249, align 1, !tbaa !127
  br i1 %5015, label %after_bb259.us, label %after_bb388.us

after_bb259.us:                                   ; preds = %after_bb256.us
  %5251 = sdiv i32 19, %5001
  %5252 = and i32 %5251, %5005
  %5253 = add nsw i32 %5252, %5160
  %5254 = getelementptr inbounds i8, i8* %8, i32 %5253
  %5255 = load i8, i8* %5254, align 1, !tbaa !127
  br i1 %.not4676, label %after_bb388.us, label %after_bb262.us

after_bb262.us:                                   ; preds = %after_bb259.us
  %5256 = sdiv i32 20, %5001
  %5257 = and i32 %5256, %5005
  %5258 = add nsw i32 %5257, %5160
  %5259 = getelementptr inbounds i8, i8* %8, i32 %5258
  %5260 = load i8, i8* %5259, align 1, !tbaa !127
  br i1 %5016, label %after_bb265.us, label %after_bb388.us

after_bb265.us:                                   ; preds = %after_bb262.us
  %5261 = sdiv i32 21, %5001
  %5262 = and i32 %5261, %5005
  %5263 = add nsw i32 %5262, %5160
  %5264 = getelementptr inbounds i8, i8* %8, i32 %5263
  %5265 = load i8, i8* %5264, align 1, !tbaa !127
  br i1 %.not4677, label %after_bb388.us, label %after_bb268.us

after_bb268.us:                                   ; preds = %after_bb265.us
  %5266 = sdiv i32 22, %5001
  %5267 = and i32 %5266, %5005
  %5268 = add nsw i32 %5267, %5160
  %5269 = getelementptr inbounds i8, i8* %8, i32 %5268
  %5270 = load i8, i8* %5269, align 1, !tbaa !127
  br i1 %5017, label %after_bb271.us, label %after_bb388.us

after_bb271.us:                                   ; preds = %after_bb268.us
  %5271 = sdiv i32 23, %5001
  %5272 = and i32 %5271, %5005
  %5273 = add nsw i32 %5272, %5160
  %5274 = getelementptr inbounds i8, i8* %8, i32 %5273
  %5275 = load i8, i8* %5274, align 1, !tbaa !127
  br i1 %.not4678, label %after_bb388.us, label %after_bb274.us

after_bb274.us:                                   ; preds = %after_bb271.us
  %5276 = sdiv i32 24, %5001
  %5277 = and i32 %5276, %5005
  %5278 = add nsw i32 %5277, %5160
  %5279 = getelementptr inbounds i8, i8* %8, i32 %5278
  %5280 = load i8, i8* %5279, align 1, !tbaa !127
  br i1 %5018, label %after_bb277.us, label %after_bb388.us

after_bb277.us:                                   ; preds = %after_bb274.us
  %5281 = sdiv i32 25, %5001
  %5282 = and i32 %5281, %5005
  %5283 = add nsw i32 %5282, %5160
  %5284 = getelementptr inbounds i8, i8* %8, i32 %5283
  %5285 = load i8, i8* %5284, align 1, !tbaa !127
  br i1 %.not4679, label %after_bb388.us, label %after_bb280.us

after_bb280.us:                                   ; preds = %after_bb277.us
  %5286 = sdiv i32 26, %5001
  %5287 = and i32 %5286, %5005
  %5288 = add nsw i32 %5287, %5160
  %5289 = getelementptr inbounds i8, i8* %8, i32 %5288
  %5290 = load i8, i8* %5289, align 1, !tbaa !127
  br i1 %5019, label %after_bb283.us, label %after_bb388.us

after_bb283.us:                                   ; preds = %after_bb280.us
  %5291 = sdiv i32 27, %5001
  %5292 = and i32 %5291, %5005
  %5293 = add nsw i32 %5292, %5160
  %5294 = getelementptr inbounds i8, i8* %8, i32 %5293
  %5295 = load i8, i8* %5294, align 1, !tbaa !127
  br i1 %.not4680, label %after_bb388.us, label %after_bb286.us

after_bb286.us:                                   ; preds = %after_bb283.us
  %5296 = sdiv i32 28, %5001
  %5297 = and i32 %5296, %5005
  %5298 = add nsw i32 %5297, %5160
  %5299 = getelementptr inbounds i8, i8* %8, i32 %5298
  %5300 = load i8, i8* %5299, align 1, !tbaa !127
  br i1 %5020, label %after_bb289.us, label %after_bb388.us

after_bb289.us:                                   ; preds = %after_bb286.us
  %5301 = sdiv i32 29, %5001
  %5302 = and i32 %5301, %5005
  %5303 = add nsw i32 %5302, %5160
  %5304 = getelementptr inbounds i8, i8* %8, i32 %5303
  %5305 = load i8, i8* %5304, align 1, !tbaa !127
  br i1 %.not4681, label %after_bb388.us, label %after_bb292.us

after_bb292.us:                                   ; preds = %after_bb289.us
  %5306 = sdiv i32 30, %5001
  %5307 = and i32 %5306, %5005
  %5308 = add nsw i32 %5307, %5160
  %5309 = getelementptr inbounds i8, i8* %8, i32 %5308
  %5310 = load i8, i8* %5309, align 1, !tbaa !127
  br i1 %5021, label %after_bb295.us, label %after_bb388.us

after_bb295.us:                                   ; preds = %after_bb292.us
  %5311 = sdiv i32 31, %5001
  %5312 = and i32 %5311, %5005
  %5313 = add nsw i32 %5312, %5160
  %5314 = getelementptr inbounds i8, i8* %8, i32 %5313
  %5315 = load i8, i8* %5314, align 1, !tbaa !127
  br i1 %.not4682, label %after_bb388.us, label %after_bb298.us

after_bb298.us:                                   ; preds = %after_bb295.us
  %5316 = sdiv i32 32, %5001
  %5317 = and i32 %5316, %5005
  %5318 = add nsw i32 %5317, %5160
  %5319 = getelementptr inbounds i8, i8* %8, i32 %5318
  %5320 = load i8, i8* %5319, align 1, !tbaa !127
  br i1 %5022, label %after_bb301.us, label %after_bb388.us

after_bb301.us:                                   ; preds = %after_bb298.us
  %5321 = sdiv i32 33, %5001
  %5322 = and i32 %5321, %5005
  %5323 = add nsw i32 %5322, %5160
  %5324 = getelementptr inbounds i8, i8* %8, i32 %5323
  %5325 = load i8, i8* %5324, align 1, !tbaa !127
  br i1 %.not4683, label %after_bb388.us, label %after_bb304.us

after_bb304.us:                                   ; preds = %after_bb301.us
  %5326 = sdiv i32 34, %5001
  %5327 = and i32 %5326, %5005
  %5328 = add nsw i32 %5327, %5160
  %5329 = getelementptr inbounds i8, i8* %8, i32 %5328
  %5330 = load i8, i8* %5329, align 1, !tbaa !127
  br i1 %5023, label %after_bb307.us, label %after_bb388.us

after_bb307.us:                                   ; preds = %after_bb304.us
  %5331 = sdiv i32 35, %5001
  %5332 = and i32 %5331, %5005
  %5333 = add nsw i32 %5332, %5160
  %5334 = getelementptr inbounds i8, i8* %8, i32 %5333
  %5335 = load i8, i8* %5334, align 1, !tbaa !127
  br i1 %.not4684, label %after_bb388.us, label %after_bb310.us

after_bb310.us:                                   ; preds = %after_bb307.us
  %5336 = sdiv i32 36, %5001
  %5337 = and i32 %5336, %5005
  %5338 = add nsw i32 %5337, %5160
  %5339 = getelementptr inbounds i8, i8* %8, i32 %5338
  %5340 = load i8, i8* %5339, align 1, !tbaa !127
  br i1 %5024, label %after_bb313.us, label %after_bb388.us

after_bb313.us:                                   ; preds = %after_bb310.us
  %5341 = sdiv i32 37, %5001
  %5342 = and i32 %5341, %5005
  %5343 = add nsw i32 %5342, %5160
  %5344 = getelementptr inbounds i8, i8* %8, i32 %5343
  %5345 = load i8, i8* %5344, align 1, !tbaa !127
  br i1 %.not4685, label %after_bb388.us, label %after_bb316.us

after_bb316.us:                                   ; preds = %after_bb313.us
  %5346 = sdiv i32 38, %5001
  %5347 = and i32 %5346, %5005
  %5348 = add nsw i32 %5347, %5160
  %5349 = getelementptr inbounds i8, i8* %8, i32 %5348
  %5350 = load i8, i8* %5349, align 1, !tbaa !127
  br i1 %5025, label %after_bb319.us, label %after_bb388.us

after_bb319.us:                                   ; preds = %after_bb316.us
  %5351 = sdiv i32 39, %5001
  %5352 = and i32 %5351, %5005
  %5353 = add nsw i32 %5352, %5160
  %5354 = getelementptr inbounds i8, i8* %8, i32 %5353
  %5355 = load i8, i8* %5354, align 1, !tbaa !127
  br i1 %.not4686, label %after_bb388.us, label %after_bb322.us

after_bb322.us:                                   ; preds = %after_bb319.us
  %5356 = sdiv i32 40, %5001
  %5357 = and i32 %5356, %5005
  %5358 = add nsw i32 %5357, %5160
  %5359 = getelementptr inbounds i8, i8* %8, i32 %5358
  %5360 = load i8, i8* %5359, align 1, !tbaa !127
  br i1 %5026, label %after_bb325.us, label %after_bb388.us

after_bb325.us:                                   ; preds = %after_bb322.us
  %5361 = sdiv i32 41, %5001
  %5362 = and i32 %5361, %5005
  %5363 = add nsw i32 %5362, %5160
  %5364 = getelementptr inbounds i8, i8* %8, i32 %5363
  %5365 = load i8, i8* %5364, align 1, !tbaa !127
  br i1 %.not4687, label %after_bb388.us, label %after_bb328.us

after_bb328.us:                                   ; preds = %after_bb325.us
  %5366 = sdiv i32 42, %5001
  %5367 = and i32 %5366, %5005
  %5368 = add nsw i32 %5367, %5160
  %5369 = getelementptr inbounds i8, i8* %8, i32 %5368
  %5370 = load i8, i8* %5369, align 1, !tbaa !127
  br i1 %5027, label %after_bb331.us, label %after_bb388.us

after_bb331.us:                                   ; preds = %after_bb328.us
  %5371 = sdiv i32 43, %5001
  %5372 = and i32 %5371, %5005
  %5373 = add nsw i32 %5372, %5160
  %5374 = getelementptr inbounds i8, i8* %8, i32 %5373
  %5375 = load i8, i8* %5374, align 1, !tbaa !127
  br i1 %.not4688, label %after_bb388.us, label %after_bb334.us

after_bb334.us:                                   ; preds = %after_bb331.us
  %5376 = sdiv i32 44, %5001
  %5377 = and i32 %5376, %5005
  %5378 = add nsw i32 %5377, %5160
  %5379 = getelementptr inbounds i8, i8* %8, i32 %5378
  %5380 = load i8, i8* %5379, align 1, !tbaa !127
  br i1 %5028, label %after_bb337.us, label %after_bb388.us

after_bb337.us:                                   ; preds = %after_bb334.us
  %5381 = sdiv i32 45, %5001
  %5382 = and i32 %5381, %5005
  %5383 = add nsw i32 %5382, %5160
  %5384 = getelementptr inbounds i8, i8* %8, i32 %5383
  %5385 = load i8, i8* %5384, align 1, !tbaa !127
  br i1 %.not4689, label %after_bb388.us, label %after_bb340.us

after_bb340.us:                                   ; preds = %after_bb337.us
  %5386 = sdiv i32 46, %5001
  %5387 = and i32 %5386, %5005
  %5388 = add nsw i32 %5387, %5160
  %5389 = getelementptr inbounds i8, i8* %8, i32 %5388
  %5390 = load i8, i8* %5389, align 1, !tbaa !127
  br i1 %5029, label %after_bb343.us, label %after_bb388.us

after_bb343.us:                                   ; preds = %after_bb340.us
  %5391 = sdiv i32 47, %5001
  %5392 = and i32 %5391, %5005
  %5393 = add nsw i32 %5392, %5160
  %5394 = getelementptr inbounds i8, i8* %8, i32 %5393
  %5395 = load i8, i8* %5394, align 1, !tbaa !127
  br i1 %.not4690, label %after_bb388.us, label %after_bb346.us

after_bb346.us:                                   ; preds = %after_bb343.us
  %5396 = sdiv i32 48, %5001
  %5397 = and i32 %5396, %5005
  %5398 = add nsw i32 %5397, %5160
  %5399 = getelementptr inbounds i8, i8* %8, i32 %5398
  %5400 = load i8, i8* %5399, align 1, !tbaa !127
  br i1 %5030, label %after_bb349.us, label %after_bb388.us

after_bb349.us:                                   ; preds = %after_bb346.us
  %5401 = sdiv i32 49, %5001
  %5402 = and i32 %5401, %5005
  %5403 = add nsw i32 %5402, %5160
  %5404 = getelementptr inbounds i8, i8* %8, i32 %5403
  %5405 = load i8, i8* %5404, align 1, !tbaa !127
  br i1 %.not4691, label %after_bb388.us, label %after_bb352.us

after_bb352.us:                                   ; preds = %after_bb349.us
  %5406 = sdiv i32 50, %5001
  %5407 = and i32 %5406, %5005
  %5408 = add nsw i32 %5407, %5160
  %5409 = getelementptr inbounds i8, i8* %8, i32 %5408
  %5410 = load i8, i8* %5409, align 1, !tbaa !127
  br i1 %5031, label %after_bb355.us, label %after_bb388.us

after_bb355.us:                                   ; preds = %after_bb352.us
  %5411 = sdiv i32 51, %5001
  %5412 = and i32 %5411, %5005
  %5413 = add nsw i32 %5412, %5160
  %5414 = getelementptr inbounds i8, i8* %8, i32 %5413
  %5415 = load i8, i8* %5414, align 1, !tbaa !127
  br i1 %.not4692, label %after_bb388.us, label %after_bb358.us

after_bb358.us:                                   ; preds = %after_bb355.us
  %5416 = sdiv i32 52, %5001
  %5417 = and i32 %5416, %5005
  %5418 = add nsw i32 %5417, %5160
  %5419 = getelementptr inbounds i8, i8* %8, i32 %5418
  %5420 = load i8, i8* %5419, align 1, !tbaa !127
  br i1 %5032, label %after_bb361.us, label %after_bb388.us

after_bb361.us:                                   ; preds = %after_bb358.us
  %5421 = sdiv i32 53, %5001
  %5422 = and i32 %5421, %5005
  %5423 = add nsw i32 %5422, %5160
  %5424 = getelementptr inbounds i8, i8* %8, i32 %5423
  %5425 = load i8, i8* %5424, align 1, !tbaa !127
  br i1 %.not4693, label %after_bb388.us, label %after_bb364.us

after_bb364.us:                                   ; preds = %after_bb361.us
  %5426 = sdiv i32 54, %5001
  %5427 = and i32 %5426, %5005
  %5428 = add nsw i32 %5427, %5160
  %5429 = getelementptr inbounds i8, i8* %8, i32 %5428
  %5430 = load i8, i8* %5429, align 1, !tbaa !127
  br i1 %5033, label %after_bb367.us, label %after_bb388.us

after_bb367.us:                                   ; preds = %after_bb364.us
  %5431 = sdiv i32 55, %5001
  %5432 = and i32 %5431, %5005
  %5433 = add nsw i32 %5432, %5160
  %5434 = getelementptr inbounds i8, i8* %8, i32 %5433
  %5435 = load i8, i8* %5434, align 1, !tbaa !127
  br i1 %.not4694, label %after_bb388.us, label %after_bb370.us

after_bb370.us:                                   ; preds = %after_bb367.us
  %5436 = sdiv i32 56, %5001
  %5437 = and i32 %5436, %5005
  %5438 = add nsw i32 %5437, %5160
  %5439 = getelementptr inbounds i8, i8* %8, i32 %5438
  %5440 = load i8, i8* %5439, align 1, !tbaa !127
  br i1 %5034, label %after_bb373.us, label %after_bb388.us

after_bb373.us:                                   ; preds = %after_bb370.us
  %5441 = sdiv i32 57, %5001
  %5442 = and i32 %5441, %5005
  %5443 = add nsw i32 %5442, %5160
  %5444 = getelementptr inbounds i8, i8* %8, i32 %5443
  %5445 = load i8, i8* %5444, align 1, !tbaa !127
  br i1 %.not4695, label %after_bb388.us, label %after_bb376.us

after_bb376.us:                                   ; preds = %after_bb373.us
  %5446 = sdiv i32 58, %5001
  %5447 = and i32 %5446, %5005
  %5448 = add nsw i32 %5447, %5160
  %5449 = getelementptr inbounds i8, i8* %8, i32 %5448
  %5450 = load i8, i8* %5449, align 1, !tbaa !127
  br i1 %5035, label %after_bb379.us, label %after_bb388.us

after_bb379.us:                                   ; preds = %after_bb376.us
  %5451 = sdiv i32 59, %5001
  %5452 = and i32 %5451, %5005
  %5453 = add nsw i32 %5452, %5160
  %5454 = getelementptr inbounds i8, i8* %8, i32 %5453
  %5455 = load i8, i8* %5454, align 1, !tbaa !127
  br i1 %.not4696, label %after_bb388.us, label %after_bb382.us

after_bb382.us:                                   ; preds = %after_bb379.us
  %5456 = sdiv i32 60, %5001
  %5457 = and i32 %5456, %5005
  %5458 = add nsw i32 %5457, %5160
  %5459 = getelementptr inbounds i8, i8* %8, i32 %5458
  %5460 = load i8, i8* %5459, align 1, !tbaa !127
  br i1 %5036, label %after_bb385.us, label %after_bb388.us

after_bb385.us:                                   ; preds = %after_bb382.us
  %5461 = sdiv i32 61, %5001
  %5462 = and i32 %5461, %5005
  %5463 = add nsw i32 %5462, %5160
  %5464 = getelementptr inbounds i8, i8* %8, i32 %5463
  %5465 = load i8, i8* %5464, align 1, !tbaa !127
  br i1 %.not4697, label %after_bb388.us, label %true_bb386.us

true_bb386.us:                                    ; preds = %after_bb385.us
  %5466 = sdiv i32 62, %5001
  %5467 = and i32 %5466, %5005
  %5468 = add nsw i32 %5467, %5160
  %5469 = getelementptr inbounds i8, i8* %8, i32 %5468
  %5470 = load i8, i8* %5469, align 1, !tbaa !127
  br label %after_bb388.us

after_bb388.us:                                   ; preds = %true_bb386.us, %after_bb385.us, %after_bb382.us, %after_bb379.us, %after_bb376.us, %after_bb373.us, %after_bb370.us, %after_bb367.us, %after_bb364.us, %after_bb361.us, %after_bb358.us, %after_bb355.us, %after_bb352.us, %after_bb349.us, %after_bb346.us, %after_bb343.us, %after_bb340.us, %after_bb337.us, %after_bb334.us, %after_bb331.us, %after_bb328.us, %after_bb325.us, %after_bb322.us, %after_bb319.us, %after_bb316.us, %after_bb313.us, %after_bb310.us, %after_bb307.us, %after_bb304.us, %after_bb301.us, %after_bb298.us, %after_bb295.us, %after_bb292.us, %after_bb289.us, %after_bb286.us, %after_bb283.us, %after_bb280.us, %after_bb277.us, %after_bb274.us, %after_bb271.us, %after_bb268.us, %after_bb265.us, %after_bb262.us, %after_bb259.us, %after_bb256.us, %after_bb253.us, %after_bb250.us, %after_bb247.us, %after_bb244.us, %after_bb241.us, %after_bb238.us, %after_bb235.us, %after_bb232.us, %after_bb229.us, %after_bb226.us, %after_bb223.us, %after_bb220.us, %after_bb217.us, %after_bb214.us, %after_bb211.us, %after_bb208.us, %after_bb205.us, %"for resampled_input.s0.x.rebased197.us"
  %5471 = phi i8 [ %5465, %true_bb386.us ], [ %5465, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5472 = phi i8 [ %5455, %true_bb386.us ], [ %5455, %after_bb385.us ], [ %5455, %after_bb382.us ], [ %5455, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5473 = phi i8 [ %5445, %true_bb386.us ], [ %5445, %after_bb385.us ], [ %5445, %after_bb382.us ], [ %5445, %after_bb379.us ], [ %5445, %after_bb376.us ], [ %5445, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5474 = phi i8 [ %5435, %true_bb386.us ], [ %5435, %after_bb385.us ], [ %5435, %after_bb382.us ], [ %5435, %after_bb379.us ], [ %5435, %after_bb376.us ], [ %5435, %after_bb373.us ], [ %5435, %after_bb370.us ], [ %5435, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5475 = phi i8 [ %5425, %true_bb386.us ], [ %5425, %after_bb385.us ], [ %5425, %after_bb382.us ], [ %5425, %after_bb379.us ], [ %5425, %after_bb376.us ], [ %5425, %after_bb373.us ], [ %5425, %after_bb370.us ], [ %5425, %after_bb367.us ], [ %5425, %after_bb364.us ], [ %5425, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5476 = phi i8 [ %5415, %true_bb386.us ], [ %5415, %after_bb385.us ], [ %5415, %after_bb382.us ], [ %5415, %after_bb379.us ], [ %5415, %after_bb376.us ], [ %5415, %after_bb373.us ], [ %5415, %after_bb370.us ], [ %5415, %after_bb367.us ], [ %5415, %after_bb364.us ], [ %5415, %after_bb361.us ], [ %5415, %after_bb358.us ], [ %5415, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5477 = phi i8 [ %5405, %true_bb386.us ], [ %5405, %after_bb385.us ], [ %5405, %after_bb382.us ], [ %5405, %after_bb379.us ], [ %5405, %after_bb376.us ], [ %5405, %after_bb373.us ], [ %5405, %after_bb370.us ], [ %5405, %after_bb367.us ], [ %5405, %after_bb364.us ], [ %5405, %after_bb361.us ], [ %5405, %after_bb358.us ], [ %5405, %after_bb355.us ], [ %5405, %after_bb352.us ], [ %5405, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5478 = phi i8 [ %5395, %true_bb386.us ], [ %5395, %after_bb385.us ], [ %5395, %after_bb382.us ], [ %5395, %after_bb379.us ], [ %5395, %after_bb376.us ], [ %5395, %after_bb373.us ], [ %5395, %after_bb370.us ], [ %5395, %after_bb367.us ], [ %5395, %after_bb364.us ], [ %5395, %after_bb361.us ], [ %5395, %after_bb358.us ], [ %5395, %after_bb355.us ], [ %5395, %after_bb352.us ], [ %5395, %after_bb349.us ], [ %5395, %after_bb346.us ], [ %5395, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5479 = phi i8 [ %5385, %true_bb386.us ], [ %5385, %after_bb385.us ], [ %5385, %after_bb382.us ], [ %5385, %after_bb379.us ], [ %5385, %after_bb376.us ], [ %5385, %after_bb373.us ], [ %5385, %after_bb370.us ], [ %5385, %after_bb367.us ], [ %5385, %after_bb364.us ], [ %5385, %after_bb361.us ], [ %5385, %after_bb358.us ], [ %5385, %after_bb355.us ], [ %5385, %after_bb352.us ], [ %5385, %after_bb349.us ], [ %5385, %after_bb346.us ], [ %5385, %after_bb343.us ], [ %5385, %after_bb340.us ], [ %5385, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5480 = phi i8 [ %5375, %true_bb386.us ], [ %5375, %after_bb385.us ], [ %5375, %after_bb382.us ], [ %5375, %after_bb379.us ], [ %5375, %after_bb376.us ], [ %5375, %after_bb373.us ], [ %5375, %after_bb370.us ], [ %5375, %after_bb367.us ], [ %5375, %after_bb364.us ], [ %5375, %after_bb361.us ], [ %5375, %after_bb358.us ], [ %5375, %after_bb355.us ], [ %5375, %after_bb352.us ], [ %5375, %after_bb349.us ], [ %5375, %after_bb346.us ], [ %5375, %after_bb343.us ], [ %5375, %after_bb340.us ], [ %5375, %after_bb337.us ], [ %5375, %after_bb334.us ], [ %5375, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5481 = phi i8 [ %5365, %true_bb386.us ], [ %5365, %after_bb385.us ], [ %5365, %after_bb382.us ], [ %5365, %after_bb379.us ], [ %5365, %after_bb376.us ], [ %5365, %after_bb373.us ], [ %5365, %after_bb370.us ], [ %5365, %after_bb367.us ], [ %5365, %after_bb364.us ], [ %5365, %after_bb361.us ], [ %5365, %after_bb358.us ], [ %5365, %after_bb355.us ], [ %5365, %after_bb352.us ], [ %5365, %after_bb349.us ], [ %5365, %after_bb346.us ], [ %5365, %after_bb343.us ], [ %5365, %after_bb340.us ], [ %5365, %after_bb337.us ], [ %5365, %after_bb334.us ], [ %5365, %after_bb331.us ], [ %5365, %after_bb328.us ], [ %5365, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5482 = phi i8 [ %5355, %true_bb386.us ], [ %5355, %after_bb385.us ], [ %5355, %after_bb382.us ], [ %5355, %after_bb379.us ], [ %5355, %after_bb376.us ], [ %5355, %after_bb373.us ], [ %5355, %after_bb370.us ], [ %5355, %after_bb367.us ], [ %5355, %after_bb364.us ], [ %5355, %after_bb361.us ], [ %5355, %after_bb358.us ], [ %5355, %after_bb355.us ], [ %5355, %after_bb352.us ], [ %5355, %after_bb349.us ], [ %5355, %after_bb346.us ], [ %5355, %after_bb343.us ], [ %5355, %after_bb340.us ], [ %5355, %after_bb337.us ], [ %5355, %after_bb334.us ], [ %5355, %after_bb331.us ], [ %5355, %after_bb328.us ], [ %5355, %after_bb325.us ], [ %5355, %after_bb322.us ], [ %5355, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5483 = phi i8 [ %5345, %true_bb386.us ], [ %5345, %after_bb385.us ], [ %5345, %after_bb382.us ], [ %5345, %after_bb379.us ], [ %5345, %after_bb376.us ], [ %5345, %after_bb373.us ], [ %5345, %after_bb370.us ], [ %5345, %after_bb367.us ], [ %5345, %after_bb364.us ], [ %5345, %after_bb361.us ], [ %5345, %after_bb358.us ], [ %5345, %after_bb355.us ], [ %5345, %after_bb352.us ], [ %5345, %after_bb349.us ], [ %5345, %after_bb346.us ], [ %5345, %after_bb343.us ], [ %5345, %after_bb340.us ], [ %5345, %after_bb337.us ], [ %5345, %after_bb334.us ], [ %5345, %after_bb331.us ], [ %5345, %after_bb328.us ], [ %5345, %after_bb325.us ], [ %5345, %after_bb322.us ], [ %5345, %after_bb319.us ], [ %5345, %after_bb316.us ], [ %5345, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5484 = phi i8 [ %5335, %true_bb386.us ], [ %5335, %after_bb385.us ], [ %5335, %after_bb382.us ], [ %5335, %after_bb379.us ], [ %5335, %after_bb376.us ], [ %5335, %after_bb373.us ], [ %5335, %after_bb370.us ], [ %5335, %after_bb367.us ], [ %5335, %after_bb364.us ], [ %5335, %after_bb361.us ], [ %5335, %after_bb358.us ], [ %5335, %after_bb355.us ], [ %5335, %after_bb352.us ], [ %5335, %after_bb349.us ], [ %5335, %after_bb346.us ], [ %5335, %after_bb343.us ], [ %5335, %after_bb340.us ], [ %5335, %after_bb337.us ], [ %5335, %after_bb334.us ], [ %5335, %after_bb331.us ], [ %5335, %after_bb328.us ], [ %5335, %after_bb325.us ], [ %5335, %after_bb322.us ], [ %5335, %after_bb319.us ], [ %5335, %after_bb316.us ], [ %5335, %after_bb313.us ], [ %5335, %after_bb310.us ], [ %5335, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5485 = phi i8 [ %5325, %true_bb386.us ], [ %5325, %after_bb385.us ], [ %5325, %after_bb382.us ], [ %5325, %after_bb379.us ], [ %5325, %after_bb376.us ], [ %5325, %after_bb373.us ], [ %5325, %after_bb370.us ], [ %5325, %after_bb367.us ], [ %5325, %after_bb364.us ], [ %5325, %after_bb361.us ], [ %5325, %after_bb358.us ], [ %5325, %after_bb355.us ], [ %5325, %after_bb352.us ], [ %5325, %after_bb349.us ], [ %5325, %after_bb346.us ], [ %5325, %after_bb343.us ], [ %5325, %after_bb340.us ], [ %5325, %after_bb337.us ], [ %5325, %after_bb334.us ], [ %5325, %after_bb331.us ], [ %5325, %after_bb328.us ], [ %5325, %after_bb325.us ], [ %5325, %after_bb322.us ], [ %5325, %after_bb319.us ], [ %5325, %after_bb316.us ], [ %5325, %after_bb313.us ], [ %5325, %after_bb310.us ], [ %5325, %after_bb307.us ], [ %5325, %after_bb304.us ], [ %5325, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5486 = phi i8 [ %5315, %true_bb386.us ], [ %5315, %after_bb385.us ], [ %5315, %after_bb382.us ], [ %5315, %after_bb379.us ], [ %5315, %after_bb376.us ], [ %5315, %after_bb373.us ], [ %5315, %after_bb370.us ], [ %5315, %after_bb367.us ], [ %5315, %after_bb364.us ], [ %5315, %after_bb361.us ], [ %5315, %after_bb358.us ], [ %5315, %after_bb355.us ], [ %5315, %after_bb352.us ], [ %5315, %after_bb349.us ], [ %5315, %after_bb346.us ], [ %5315, %after_bb343.us ], [ %5315, %after_bb340.us ], [ %5315, %after_bb337.us ], [ %5315, %after_bb334.us ], [ %5315, %after_bb331.us ], [ %5315, %after_bb328.us ], [ %5315, %after_bb325.us ], [ %5315, %after_bb322.us ], [ %5315, %after_bb319.us ], [ %5315, %after_bb316.us ], [ %5315, %after_bb313.us ], [ %5315, %after_bb310.us ], [ %5315, %after_bb307.us ], [ %5315, %after_bb304.us ], [ %5315, %after_bb301.us ], [ %5315, %after_bb298.us ], [ %5315, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5487 = phi i8 [ %5305, %true_bb386.us ], [ %5305, %after_bb385.us ], [ %5305, %after_bb382.us ], [ %5305, %after_bb379.us ], [ %5305, %after_bb376.us ], [ %5305, %after_bb373.us ], [ %5305, %after_bb370.us ], [ %5305, %after_bb367.us ], [ %5305, %after_bb364.us ], [ %5305, %after_bb361.us ], [ %5305, %after_bb358.us ], [ %5305, %after_bb355.us ], [ %5305, %after_bb352.us ], [ %5305, %after_bb349.us ], [ %5305, %after_bb346.us ], [ %5305, %after_bb343.us ], [ %5305, %after_bb340.us ], [ %5305, %after_bb337.us ], [ %5305, %after_bb334.us ], [ %5305, %after_bb331.us ], [ %5305, %after_bb328.us ], [ %5305, %after_bb325.us ], [ %5305, %after_bb322.us ], [ %5305, %after_bb319.us ], [ %5305, %after_bb316.us ], [ %5305, %after_bb313.us ], [ %5305, %after_bb310.us ], [ %5305, %after_bb307.us ], [ %5305, %after_bb304.us ], [ %5305, %after_bb301.us ], [ %5305, %after_bb298.us ], [ %5305, %after_bb295.us ], [ %5305, %after_bb292.us ], [ %5305, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5488 = phi i8 [ %5295, %true_bb386.us ], [ %5295, %after_bb385.us ], [ %5295, %after_bb382.us ], [ %5295, %after_bb379.us ], [ %5295, %after_bb376.us ], [ %5295, %after_bb373.us ], [ %5295, %after_bb370.us ], [ %5295, %after_bb367.us ], [ %5295, %after_bb364.us ], [ %5295, %after_bb361.us ], [ %5295, %after_bb358.us ], [ %5295, %after_bb355.us ], [ %5295, %after_bb352.us ], [ %5295, %after_bb349.us ], [ %5295, %after_bb346.us ], [ %5295, %after_bb343.us ], [ %5295, %after_bb340.us ], [ %5295, %after_bb337.us ], [ %5295, %after_bb334.us ], [ %5295, %after_bb331.us ], [ %5295, %after_bb328.us ], [ %5295, %after_bb325.us ], [ %5295, %after_bb322.us ], [ %5295, %after_bb319.us ], [ %5295, %after_bb316.us ], [ %5295, %after_bb313.us ], [ %5295, %after_bb310.us ], [ %5295, %after_bb307.us ], [ %5295, %after_bb304.us ], [ %5295, %after_bb301.us ], [ %5295, %after_bb298.us ], [ %5295, %after_bb295.us ], [ %5295, %after_bb292.us ], [ %5295, %after_bb289.us ], [ %5295, %after_bb286.us ], [ %5295, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5489 = phi i8 [ %5285, %true_bb386.us ], [ %5285, %after_bb385.us ], [ %5285, %after_bb382.us ], [ %5285, %after_bb379.us ], [ %5285, %after_bb376.us ], [ %5285, %after_bb373.us ], [ %5285, %after_bb370.us ], [ %5285, %after_bb367.us ], [ %5285, %after_bb364.us ], [ %5285, %after_bb361.us ], [ %5285, %after_bb358.us ], [ %5285, %after_bb355.us ], [ %5285, %after_bb352.us ], [ %5285, %after_bb349.us ], [ %5285, %after_bb346.us ], [ %5285, %after_bb343.us ], [ %5285, %after_bb340.us ], [ %5285, %after_bb337.us ], [ %5285, %after_bb334.us ], [ %5285, %after_bb331.us ], [ %5285, %after_bb328.us ], [ %5285, %after_bb325.us ], [ %5285, %after_bb322.us ], [ %5285, %after_bb319.us ], [ %5285, %after_bb316.us ], [ %5285, %after_bb313.us ], [ %5285, %after_bb310.us ], [ %5285, %after_bb307.us ], [ %5285, %after_bb304.us ], [ %5285, %after_bb301.us ], [ %5285, %after_bb298.us ], [ %5285, %after_bb295.us ], [ %5285, %after_bb292.us ], [ %5285, %after_bb289.us ], [ %5285, %after_bb286.us ], [ %5285, %after_bb283.us ], [ %5285, %after_bb280.us ], [ %5285, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5490 = phi i8 [ %5275, %true_bb386.us ], [ %5275, %after_bb385.us ], [ %5275, %after_bb382.us ], [ %5275, %after_bb379.us ], [ %5275, %after_bb376.us ], [ %5275, %after_bb373.us ], [ %5275, %after_bb370.us ], [ %5275, %after_bb367.us ], [ %5275, %after_bb364.us ], [ %5275, %after_bb361.us ], [ %5275, %after_bb358.us ], [ %5275, %after_bb355.us ], [ %5275, %after_bb352.us ], [ %5275, %after_bb349.us ], [ %5275, %after_bb346.us ], [ %5275, %after_bb343.us ], [ %5275, %after_bb340.us ], [ %5275, %after_bb337.us ], [ %5275, %after_bb334.us ], [ %5275, %after_bb331.us ], [ %5275, %after_bb328.us ], [ %5275, %after_bb325.us ], [ %5275, %after_bb322.us ], [ %5275, %after_bb319.us ], [ %5275, %after_bb316.us ], [ %5275, %after_bb313.us ], [ %5275, %after_bb310.us ], [ %5275, %after_bb307.us ], [ %5275, %after_bb304.us ], [ %5275, %after_bb301.us ], [ %5275, %after_bb298.us ], [ %5275, %after_bb295.us ], [ %5275, %after_bb292.us ], [ %5275, %after_bb289.us ], [ %5275, %after_bb286.us ], [ %5275, %after_bb283.us ], [ %5275, %after_bb280.us ], [ %5275, %after_bb277.us ], [ %5275, %after_bb274.us ], [ %5275, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5491 = phi i8 [ %5265, %true_bb386.us ], [ %5265, %after_bb385.us ], [ %5265, %after_bb382.us ], [ %5265, %after_bb379.us ], [ %5265, %after_bb376.us ], [ %5265, %after_bb373.us ], [ %5265, %after_bb370.us ], [ %5265, %after_bb367.us ], [ %5265, %after_bb364.us ], [ %5265, %after_bb361.us ], [ %5265, %after_bb358.us ], [ %5265, %after_bb355.us ], [ %5265, %after_bb352.us ], [ %5265, %after_bb349.us ], [ %5265, %after_bb346.us ], [ %5265, %after_bb343.us ], [ %5265, %after_bb340.us ], [ %5265, %after_bb337.us ], [ %5265, %after_bb334.us ], [ %5265, %after_bb331.us ], [ %5265, %after_bb328.us ], [ %5265, %after_bb325.us ], [ %5265, %after_bb322.us ], [ %5265, %after_bb319.us ], [ %5265, %after_bb316.us ], [ %5265, %after_bb313.us ], [ %5265, %after_bb310.us ], [ %5265, %after_bb307.us ], [ %5265, %after_bb304.us ], [ %5265, %after_bb301.us ], [ %5265, %after_bb298.us ], [ %5265, %after_bb295.us ], [ %5265, %after_bb292.us ], [ %5265, %after_bb289.us ], [ %5265, %after_bb286.us ], [ %5265, %after_bb283.us ], [ %5265, %after_bb280.us ], [ %5265, %after_bb277.us ], [ %5265, %after_bb274.us ], [ %5265, %after_bb271.us ], [ %5265, %after_bb268.us ], [ %5265, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5492 = phi i8 [ %5255, %true_bb386.us ], [ %5255, %after_bb385.us ], [ %5255, %after_bb382.us ], [ %5255, %after_bb379.us ], [ %5255, %after_bb376.us ], [ %5255, %after_bb373.us ], [ %5255, %after_bb370.us ], [ %5255, %after_bb367.us ], [ %5255, %after_bb364.us ], [ %5255, %after_bb361.us ], [ %5255, %after_bb358.us ], [ %5255, %after_bb355.us ], [ %5255, %after_bb352.us ], [ %5255, %after_bb349.us ], [ %5255, %after_bb346.us ], [ %5255, %after_bb343.us ], [ %5255, %after_bb340.us ], [ %5255, %after_bb337.us ], [ %5255, %after_bb334.us ], [ %5255, %after_bb331.us ], [ %5255, %after_bb328.us ], [ %5255, %after_bb325.us ], [ %5255, %after_bb322.us ], [ %5255, %after_bb319.us ], [ %5255, %after_bb316.us ], [ %5255, %after_bb313.us ], [ %5255, %after_bb310.us ], [ %5255, %after_bb307.us ], [ %5255, %after_bb304.us ], [ %5255, %after_bb301.us ], [ %5255, %after_bb298.us ], [ %5255, %after_bb295.us ], [ %5255, %after_bb292.us ], [ %5255, %after_bb289.us ], [ %5255, %after_bb286.us ], [ %5255, %after_bb283.us ], [ %5255, %after_bb280.us ], [ %5255, %after_bb277.us ], [ %5255, %after_bb274.us ], [ %5255, %after_bb271.us ], [ %5255, %after_bb268.us ], [ %5255, %after_bb265.us ], [ %5255, %after_bb262.us ], [ %5255, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5493 = phi i8 [ %5245, %true_bb386.us ], [ %5245, %after_bb385.us ], [ %5245, %after_bb382.us ], [ %5245, %after_bb379.us ], [ %5245, %after_bb376.us ], [ %5245, %after_bb373.us ], [ %5245, %after_bb370.us ], [ %5245, %after_bb367.us ], [ %5245, %after_bb364.us ], [ %5245, %after_bb361.us ], [ %5245, %after_bb358.us ], [ %5245, %after_bb355.us ], [ %5245, %after_bb352.us ], [ %5245, %after_bb349.us ], [ %5245, %after_bb346.us ], [ %5245, %after_bb343.us ], [ %5245, %after_bb340.us ], [ %5245, %after_bb337.us ], [ %5245, %after_bb334.us ], [ %5245, %after_bb331.us ], [ %5245, %after_bb328.us ], [ %5245, %after_bb325.us ], [ %5245, %after_bb322.us ], [ %5245, %after_bb319.us ], [ %5245, %after_bb316.us ], [ %5245, %after_bb313.us ], [ %5245, %after_bb310.us ], [ %5245, %after_bb307.us ], [ %5245, %after_bb304.us ], [ %5245, %after_bb301.us ], [ %5245, %after_bb298.us ], [ %5245, %after_bb295.us ], [ %5245, %after_bb292.us ], [ %5245, %after_bb289.us ], [ %5245, %after_bb286.us ], [ %5245, %after_bb283.us ], [ %5245, %after_bb280.us ], [ %5245, %after_bb277.us ], [ %5245, %after_bb274.us ], [ %5245, %after_bb271.us ], [ %5245, %after_bb268.us ], [ %5245, %after_bb265.us ], [ %5245, %after_bb262.us ], [ %5245, %after_bb259.us ], [ %5245, %after_bb256.us ], [ %5245, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5494 = phi i8 [ %5235, %true_bb386.us ], [ %5235, %after_bb385.us ], [ %5235, %after_bb382.us ], [ %5235, %after_bb379.us ], [ %5235, %after_bb376.us ], [ %5235, %after_bb373.us ], [ %5235, %after_bb370.us ], [ %5235, %after_bb367.us ], [ %5235, %after_bb364.us ], [ %5235, %after_bb361.us ], [ %5235, %after_bb358.us ], [ %5235, %after_bb355.us ], [ %5235, %after_bb352.us ], [ %5235, %after_bb349.us ], [ %5235, %after_bb346.us ], [ %5235, %after_bb343.us ], [ %5235, %after_bb340.us ], [ %5235, %after_bb337.us ], [ %5235, %after_bb334.us ], [ %5235, %after_bb331.us ], [ %5235, %after_bb328.us ], [ %5235, %after_bb325.us ], [ %5235, %after_bb322.us ], [ %5235, %after_bb319.us ], [ %5235, %after_bb316.us ], [ %5235, %after_bb313.us ], [ %5235, %after_bb310.us ], [ %5235, %after_bb307.us ], [ %5235, %after_bb304.us ], [ %5235, %after_bb301.us ], [ %5235, %after_bb298.us ], [ %5235, %after_bb295.us ], [ %5235, %after_bb292.us ], [ %5235, %after_bb289.us ], [ %5235, %after_bb286.us ], [ %5235, %after_bb283.us ], [ %5235, %after_bb280.us ], [ %5235, %after_bb277.us ], [ %5235, %after_bb274.us ], [ %5235, %after_bb271.us ], [ %5235, %after_bb268.us ], [ %5235, %after_bb265.us ], [ %5235, %after_bb262.us ], [ %5235, %after_bb259.us ], [ %5235, %after_bb256.us ], [ %5235, %after_bb253.us ], [ %5235, %after_bb250.us ], [ %5235, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5495 = phi i8 [ %5225, %true_bb386.us ], [ %5225, %after_bb385.us ], [ %5225, %after_bb382.us ], [ %5225, %after_bb379.us ], [ %5225, %after_bb376.us ], [ %5225, %after_bb373.us ], [ %5225, %after_bb370.us ], [ %5225, %after_bb367.us ], [ %5225, %after_bb364.us ], [ %5225, %after_bb361.us ], [ %5225, %after_bb358.us ], [ %5225, %after_bb355.us ], [ %5225, %after_bb352.us ], [ %5225, %after_bb349.us ], [ %5225, %after_bb346.us ], [ %5225, %after_bb343.us ], [ %5225, %after_bb340.us ], [ %5225, %after_bb337.us ], [ %5225, %after_bb334.us ], [ %5225, %after_bb331.us ], [ %5225, %after_bb328.us ], [ %5225, %after_bb325.us ], [ %5225, %after_bb322.us ], [ %5225, %after_bb319.us ], [ %5225, %after_bb316.us ], [ %5225, %after_bb313.us ], [ %5225, %after_bb310.us ], [ %5225, %after_bb307.us ], [ %5225, %after_bb304.us ], [ %5225, %after_bb301.us ], [ %5225, %after_bb298.us ], [ %5225, %after_bb295.us ], [ %5225, %after_bb292.us ], [ %5225, %after_bb289.us ], [ %5225, %after_bb286.us ], [ %5225, %after_bb283.us ], [ %5225, %after_bb280.us ], [ %5225, %after_bb277.us ], [ %5225, %after_bb274.us ], [ %5225, %after_bb271.us ], [ %5225, %after_bb268.us ], [ %5225, %after_bb265.us ], [ %5225, %after_bb262.us ], [ %5225, %after_bb259.us ], [ %5225, %after_bb256.us ], [ %5225, %after_bb253.us ], [ %5225, %after_bb250.us ], [ %5225, %after_bb247.us ], [ %5225, %after_bb244.us ], [ %5225, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5496 = phi i8 [ %5215, %true_bb386.us ], [ %5215, %after_bb385.us ], [ %5215, %after_bb382.us ], [ %5215, %after_bb379.us ], [ %5215, %after_bb376.us ], [ %5215, %after_bb373.us ], [ %5215, %after_bb370.us ], [ %5215, %after_bb367.us ], [ %5215, %after_bb364.us ], [ %5215, %after_bb361.us ], [ %5215, %after_bb358.us ], [ %5215, %after_bb355.us ], [ %5215, %after_bb352.us ], [ %5215, %after_bb349.us ], [ %5215, %after_bb346.us ], [ %5215, %after_bb343.us ], [ %5215, %after_bb340.us ], [ %5215, %after_bb337.us ], [ %5215, %after_bb334.us ], [ %5215, %after_bb331.us ], [ %5215, %after_bb328.us ], [ %5215, %after_bb325.us ], [ %5215, %after_bb322.us ], [ %5215, %after_bb319.us ], [ %5215, %after_bb316.us ], [ %5215, %after_bb313.us ], [ %5215, %after_bb310.us ], [ %5215, %after_bb307.us ], [ %5215, %after_bb304.us ], [ %5215, %after_bb301.us ], [ %5215, %after_bb298.us ], [ %5215, %after_bb295.us ], [ %5215, %after_bb292.us ], [ %5215, %after_bb289.us ], [ %5215, %after_bb286.us ], [ %5215, %after_bb283.us ], [ %5215, %after_bb280.us ], [ %5215, %after_bb277.us ], [ %5215, %after_bb274.us ], [ %5215, %after_bb271.us ], [ %5215, %after_bb268.us ], [ %5215, %after_bb265.us ], [ %5215, %after_bb262.us ], [ %5215, %after_bb259.us ], [ %5215, %after_bb256.us ], [ %5215, %after_bb253.us ], [ %5215, %after_bb250.us ], [ %5215, %after_bb247.us ], [ %5215, %after_bb244.us ], [ %5215, %after_bb241.us ], [ %5215, %after_bb238.us ], [ %5215, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5497 = phi i8 [ %5205, %true_bb386.us ], [ %5205, %after_bb385.us ], [ %5205, %after_bb382.us ], [ %5205, %after_bb379.us ], [ %5205, %after_bb376.us ], [ %5205, %after_bb373.us ], [ %5205, %after_bb370.us ], [ %5205, %after_bb367.us ], [ %5205, %after_bb364.us ], [ %5205, %after_bb361.us ], [ %5205, %after_bb358.us ], [ %5205, %after_bb355.us ], [ %5205, %after_bb352.us ], [ %5205, %after_bb349.us ], [ %5205, %after_bb346.us ], [ %5205, %after_bb343.us ], [ %5205, %after_bb340.us ], [ %5205, %after_bb337.us ], [ %5205, %after_bb334.us ], [ %5205, %after_bb331.us ], [ %5205, %after_bb328.us ], [ %5205, %after_bb325.us ], [ %5205, %after_bb322.us ], [ %5205, %after_bb319.us ], [ %5205, %after_bb316.us ], [ %5205, %after_bb313.us ], [ %5205, %after_bb310.us ], [ %5205, %after_bb307.us ], [ %5205, %after_bb304.us ], [ %5205, %after_bb301.us ], [ %5205, %after_bb298.us ], [ %5205, %after_bb295.us ], [ %5205, %after_bb292.us ], [ %5205, %after_bb289.us ], [ %5205, %after_bb286.us ], [ %5205, %after_bb283.us ], [ %5205, %after_bb280.us ], [ %5205, %after_bb277.us ], [ %5205, %after_bb274.us ], [ %5205, %after_bb271.us ], [ %5205, %after_bb268.us ], [ %5205, %after_bb265.us ], [ %5205, %after_bb262.us ], [ %5205, %after_bb259.us ], [ %5205, %after_bb256.us ], [ %5205, %after_bb253.us ], [ %5205, %after_bb250.us ], [ %5205, %after_bb247.us ], [ %5205, %after_bb244.us ], [ %5205, %after_bb241.us ], [ %5205, %after_bb238.us ], [ %5205, %after_bb235.us ], [ %5205, %after_bb232.us ], [ %5205, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5498 = phi i8 [ %5195, %true_bb386.us ], [ %5195, %after_bb385.us ], [ %5195, %after_bb382.us ], [ %5195, %after_bb379.us ], [ %5195, %after_bb376.us ], [ %5195, %after_bb373.us ], [ %5195, %after_bb370.us ], [ %5195, %after_bb367.us ], [ %5195, %after_bb364.us ], [ %5195, %after_bb361.us ], [ %5195, %after_bb358.us ], [ %5195, %after_bb355.us ], [ %5195, %after_bb352.us ], [ %5195, %after_bb349.us ], [ %5195, %after_bb346.us ], [ %5195, %after_bb343.us ], [ %5195, %after_bb340.us ], [ %5195, %after_bb337.us ], [ %5195, %after_bb334.us ], [ %5195, %after_bb331.us ], [ %5195, %after_bb328.us ], [ %5195, %after_bb325.us ], [ %5195, %after_bb322.us ], [ %5195, %after_bb319.us ], [ %5195, %after_bb316.us ], [ %5195, %after_bb313.us ], [ %5195, %after_bb310.us ], [ %5195, %after_bb307.us ], [ %5195, %after_bb304.us ], [ %5195, %after_bb301.us ], [ %5195, %after_bb298.us ], [ %5195, %after_bb295.us ], [ %5195, %after_bb292.us ], [ %5195, %after_bb289.us ], [ %5195, %after_bb286.us ], [ %5195, %after_bb283.us ], [ %5195, %after_bb280.us ], [ %5195, %after_bb277.us ], [ %5195, %after_bb274.us ], [ %5195, %after_bb271.us ], [ %5195, %after_bb268.us ], [ %5195, %after_bb265.us ], [ %5195, %after_bb262.us ], [ %5195, %after_bb259.us ], [ %5195, %after_bb256.us ], [ %5195, %after_bb253.us ], [ %5195, %after_bb250.us ], [ %5195, %after_bb247.us ], [ %5195, %after_bb244.us ], [ %5195, %after_bb241.us ], [ %5195, %after_bb238.us ], [ %5195, %after_bb235.us ], [ %5195, %after_bb232.us ], [ %5195, %after_bb229.us ], [ %5195, %after_bb226.us ], [ %5195, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5499 = phi i8 [ %5185, %true_bb386.us ], [ %5185, %after_bb385.us ], [ %5185, %after_bb382.us ], [ %5185, %after_bb379.us ], [ %5185, %after_bb376.us ], [ %5185, %after_bb373.us ], [ %5185, %after_bb370.us ], [ %5185, %after_bb367.us ], [ %5185, %after_bb364.us ], [ %5185, %after_bb361.us ], [ %5185, %after_bb358.us ], [ %5185, %after_bb355.us ], [ %5185, %after_bb352.us ], [ %5185, %after_bb349.us ], [ %5185, %after_bb346.us ], [ %5185, %after_bb343.us ], [ %5185, %after_bb340.us ], [ %5185, %after_bb337.us ], [ %5185, %after_bb334.us ], [ %5185, %after_bb331.us ], [ %5185, %after_bb328.us ], [ %5185, %after_bb325.us ], [ %5185, %after_bb322.us ], [ %5185, %after_bb319.us ], [ %5185, %after_bb316.us ], [ %5185, %after_bb313.us ], [ %5185, %after_bb310.us ], [ %5185, %after_bb307.us ], [ %5185, %after_bb304.us ], [ %5185, %after_bb301.us ], [ %5185, %after_bb298.us ], [ %5185, %after_bb295.us ], [ %5185, %after_bb292.us ], [ %5185, %after_bb289.us ], [ %5185, %after_bb286.us ], [ %5185, %after_bb283.us ], [ %5185, %after_bb280.us ], [ %5185, %after_bb277.us ], [ %5185, %after_bb274.us ], [ %5185, %after_bb271.us ], [ %5185, %after_bb268.us ], [ %5185, %after_bb265.us ], [ %5185, %after_bb262.us ], [ %5185, %after_bb259.us ], [ %5185, %after_bb256.us ], [ %5185, %after_bb253.us ], [ %5185, %after_bb250.us ], [ %5185, %after_bb247.us ], [ %5185, %after_bb244.us ], [ %5185, %after_bb241.us ], [ %5185, %after_bb238.us ], [ %5185, %after_bb235.us ], [ %5185, %after_bb232.us ], [ %5185, %after_bb229.us ], [ %5185, %after_bb226.us ], [ %5185, %after_bb223.us ], [ %5185, %after_bb220.us ], [ %5185, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5500 = phi i8 [ %5175, %true_bb386.us ], [ %5175, %after_bb385.us ], [ %5175, %after_bb382.us ], [ %5175, %after_bb379.us ], [ %5175, %after_bb376.us ], [ %5175, %after_bb373.us ], [ %5175, %after_bb370.us ], [ %5175, %after_bb367.us ], [ %5175, %after_bb364.us ], [ %5175, %after_bb361.us ], [ %5175, %after_bb358.us ], [ %5175, %after_bb355.us ], [ %5175, %after_bb352.us ], [ %5175, %after_bb349.us ], [ %5175, %after_bb346.us ], [ %5175, %after_bb343.us ], [ %5175, %after_bb340.us ], [ %5175, %after_bb337.us ], [ %5175, %after_bb334.us ], [ %5175, %after_bb331.us ], [ %5175, %after_bb328.us ], [ %5175, %after_bb325.us ], [ %5175, %after_bb322.us ], [ %5175, %after_bb319.us ], [ %5175, %after_bb316.us ], [ %5175, %after_bb313.us ], [ %5175, %after_bb310.us ], [ %5175, %after_bb307.us ], [ %5175, %after_bb304.us ], [ %5175, %after_bb301.us ], [ %5175, %after_bb298.us ], [ %5175, %after_bb295.us ], [ %5175, %after_bb292.us ], [ %5175, %after_bb289.us ], [ %5175, %after_bb286.us ], [ %5175, %after_bb283.us ], [ %5175, %after_bb280.us ], [ %5175, %after_bb277.us ], [ %5175, %after_bb274.us ], [ %5175, %after_bb271.us ], [ %5175, %after_bb268.us ], [ %5175, %after_bb265.us ], [ %5175, %after_bb262.us ], [ %5175, %after_bb259.us ], [ %5175, %after_bb256.us ], [ %5175, %after_bb253.us ], [ %5175, %after_bb250.us ], [ %5175, %after_bb247.us ], [ %5175, %after_bb244.us ], [ %5175, %after_bb241.us ], [ %5175, %after_bb238.us ], [ %5175, %after_bb235.us ], [ %5175, %after_bb232.us ], [ %5175, %after_bb229.us ], [ %5175, %after_bb226.us ], [ %5175, %after_bb223.us ], [ %5175, %after_bb220.us ], [ %5175, %after_bb217.us ], [ %5175, %after_bb214.us ], [ %5175, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5501 = phi i8 [ %5165, %true_bb386.us ], [ %5165, %after_bb385.us ], [ %5165, %after_bb382.us ], [ %5165, %after_bb379.us ], [ %5165, %after_bb376.us ], [ %5165, %after_bb373.us ], [ %5165, %after_bb370.us ], [ %5165, %after_bb367.us ], [ %5165, %after_bb364.us ], [ %5165, %after_bb361.us ], [ %5165, %after_bb358.us ], [ %5165, %after_bb355.us ], [ %5165, %after_bb352.us ], [ %5165, %after_bb349.us ], [ %5165, %after_bb346.us ], [ %5165, %after_bb343.us ], [ %5165, %after_bb340.us ], [ %5165, %after_bb337.us ], [ %5165, %after_bb334.us ], [ %5165, %after_bb331.us ], [ %5165, %after_bb328.us ], [ %5165, %after_bb325.us ], [ %5165, %after_bb322.us ], [ %5165, %after_bb319.us ], [ %5165, %after_bb316.us ], [ %5165, %after_bb313.us ], [ %5165, %after_bb310.us ], [ %5165, %after_bb307.us ], [ %5165, %after_bb304.us ], [ %5165, %after_bb301.us ], [ %5165, %after_bb298.us ], [ %5165, %after_bb295.us ], [ %5165, %after_bb292.us ], [ %5165, %after_bb289.us ], [ %5165, %after_bb286.us ], [ %5165, %after_bb283.us ], [ %5165, %after_bb280.us ], [ %5165, %after_bb277.us ], [ %5165, %after_bb274.us ], [ %5165, %after_bb271.us ], [ %5165, %after_bb268.us ], [ %5165, %after_bb265.us ], [ %5165, %after_bb262.us ], [ %5165, %after_bb259.us ], [ %5165, %after_bb256.us ], [ %5165, %after_bb253.us ], [ %5165, %after_bb250.us ], [ %5165, %after_bb247.us ], [ %5165, %after_bb244.us ], [ %5165, %after_bb241.us ], [ %5165, %after_bb238.us ], [ %5165, %after_bb235.us ], [ %5165, %after_bb232.us ], [ %5165, %after_bb229.us ], [ %5165, %after_bb226.us ], [ %5165, %after_bb223.us ], [ %5165, %after_bb220.us ], [ %5165, %after_bb217.us ], [ %5165, %after_bb214.us ], [ %5165, %after_bb211.us ], [ %5165, %after_bb208.us ], [ %5165, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5502 = phi i8 [ %5170, %true_bb386.us ], [ %5170, %after_bb385.us ], [ %5170, %after_bb382.us ], [ %5170, %after_bb379.us ], [ %5170, %after_bb376.us ], [ %5170, %after_bb373.us ], [ %5170, %after_bb370.us ], [ %5170, %after_bb367.us ], [ %5170, %after_bb364.us ], [ %5170, %after_bb361.us ], [ %5170, %after_bb358.us ], [ %5170, %after_bb355.us ], [ %5170, %after_bb352.us ], [ %5170, %after_bb349.us ], [ %5170, %after_bb346.us ], [ %5170, %after_bb343.us ], [ %5170, %after_bb340.us ], [ %5170, %after_bb337.us ], [ %5170, %after_bb334.us ], [ %5170, %after_bb331.us ], [ %5170, %after_bb328.us ], [ %5170, %after_bb325.us ], [ %5170, %after_bb322.us ], [ %5170, %after_bb319.us ], [ %5170, %after_bb316.us ], [ %5170, %after_bb313.us ], [ %5170, %after_bb310.us ], [ %5170, %after_bb307.us ], [ %5170, %after_bb304.us ], [ %5170, %after_bb301.us ], [ %5170, %after_bb298.us ], [ %5170, %after_bb295.us ], [ %5170, %after_bb292.us ], [ %5170, %after_bb289.us ], [ %5170, %after_bb286.us ], [ %5170, %after_bb283.us ], [ %5170, %after_bb280.us ], [ %5170, %after_bb277.us ], [ %5170, %after_bb274.us ], [ %5170, %after_bb271.us ], [ %5170, %after_bb268.us ], [ %5170, %after_bb265.us ], [ %5170, %after_bb262.us ], [ %5170, %after_bb259.us ], [ %5170, %after_bb256.us ], [ %5170, %after_bb253.us ], [ %5170, %after_bb250.us ], [ %5170, %after_bb247.us ], [ %5170, %after_bb244.us ], [ %5170, %after_bb241.us ], [ %5170, %after_bb238.us ], [ %5170, %after_bb235.us ], [ %5170, %after_bb232.us ], [ %5170, %after_bb229.us ], [ %5170, %after_bb226.us ], [ %5170, %after_bb223.us ], [ %5170, %after_bb220.us ], [ %5170, %after_bb217.us ], [ %5170, %after_bb214.us ], [ %5170, %after_bb211.us ], [ %5170, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5503 = phi i8 [ %5180, %true_bb386.us ], [ %5180, %after_bb385.us ], [ %5180, %after_bb382.us ], [ %5180, %after_bb379.us ], [ %5180, %after_bb376.us ], [ %5180, %after_bb373.us ], [ %5180, %after_bb370.us ], [ %5180, %after_bb367.us ], [ %5180, %after_bb364.us ], [ %5180, %after_bb361.us ], [ %5180, %after_bb358.us ], [ %5180, %after_bb355.us ], [ %5180, %after_bb352.us ], [ %5180, %after_bb349.us ], [ %5180, %after_bb346.us ], [ %5180, %after_bb343.us ], [ %5180, %after_bb340.us ], [ %5180, %after_bb337.us ], [ %5180, %after_bb334.us ], [ %5180, %after_bb331.us ], [ %5180, %after_bb328.us ], [ %5180, %after_bb325.us ], [ %5180, %after_bb322.us ], [ %5180, %after_bb319.us ], [ %5180, %after_bb316.us ], [ %5180, %after_bb313.us ], [ %5180, %after_bb310.us ], [ %5180, %after_bb307.us ], [ %5180, %after_bb304.us ], [ %5180, %after_bb301.us ], [ %5180, %after_bb298.us ], [ %5180, %after_bb295.us ], [ %5180, %after_bb292.us ], [ %5180, %after_bb289.us ], [ %5180, %after_bb286.us ], [ %5180, %after_bb283.us ], [ %5180, %after_bb280.us ], [ %5180, %after_bb277.us ], [ %5180, %after_bb274.us ], [ %5180, %after_bb271.us ], [ %5180, %after_bb268.us ], [ %5180, %after_bb265.us ], [ %5180, %after_bb262.us ], [ %5180, %after_bb259.us ], [ %5180, %after_bb256.us ], [ %5180, %after_bb253.us ], [ %5180, %after_bb250.us ], [ %5180, %after_bb247.us ], [ %5180, %after_bb244.us ], [ %5180, %after_bb241.us ], [ %5180, %after_bb238.us ], [ %5180, %after_bb235.us ], [ %5180, %after_bb232.us ], [ %5180, %after_bb229.us ], [ %5180, %after_bb226.us ], [ %5180, %after_bb223.us ], [ %5180, %after_bb220.us ], [ %5180, %after_bb217.us ], [ %5180, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5504 = phi i8 [ %5190, %true_bb386.us ], [ %5190, %after_bb385.us ], [ %5190, %after_bb382.us ], [ %5190, %after_bb379.us ], [ %5190, %after_bb376.us ], [ %5190, %after_bb373.us ], [ %5190, %after_bb370.us ], [ %5190, %after_bb367.us ], [ %5190, %after_bb364.us ], [ %5190, %after_bb361.us ], [ %5190, %after_bb358.us ], [ %5190, %after_bb355.us ], [ %5190, %after_bb352.us ], [ %5190, %after_bb349.us ], [ %5190, %after_bb346.us ], [ %5190, %after_bb343.us ], [ %5190, %after_bb340.us ], [ %5190, %after_bb337.us ], [ %5190, %after_bb334.us ], [ %5190, %after_bb331.us ], [ %5190, %after_bb328.us ], [ %5190, %after_bb325.us ], [ %5190, %after_bb322.us ], [ %5190, %after_bb319.us ], [ %5190, %after_bb316.us ], [ %5190, %after_bb313.us ], [ %5190, %after_bb310.us ], [ %5190, %after_bb307.us ], [ %5190, %after_bb304.us ], [ %5190, %after_bb301.us ], [ %5190, %after_bb298.us ], [ %5190, %after_bb295.us ], [ %5190, %after_bb292.us ], [ %5190, %after_bb289.us ], [ %5190, %after_bb286.us ], [ %5190, %after_bb283.us ], [ %5190, %after_bb280.us ], [ %5190, %after_bb277.us ], [ %5190, %after_bb274.us ], [ %5190, %after_bb271.us ], [ %5190, %after_bb268.us ], [ %5190, %after_bb265.us ], [ %5190, %after_bb262.us ], [ %5190, %after_bb259.us ], [ %5190, %after_bb256.us ], [ %5190, %after_bb253.us ], [ %5190, %after_bb250.us ], [ %5190, %after_bb247.us ], [ %5190, %after_bb244.us ], [ %5190, %after_bb241.us ], [ %5190, %after_bb238.us ], [ %5190, %after_bb235.us ], [ %5190, %after_bb232.us ], [ %5190, %after_bb229.us ], [ %5190, %after_bb226.us ], [ %5190, %after_bb223.us ], [ %5190, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5505 = phi i8 [ %5200, %true_bb386.us ], [ %5200, %after_bb385.us ], [ %5200, %after_bb382.us ], [ %5200, %after_bb379.us ], [ %5200, %after_bb376.us ], [ %5200, %after_bb373.us ], [ %5200, %after_bb370.us ], [ %5200, %after_bb367.us ], [ %5200, %after_bb364.us ], [ %5200, %after_bb361.us ], [ %5200, %after_bb358.us ], [ %5200, %after_bb355.us ], [ %5200, %after_bb352.us ], [ %5200, %after_bb349.us ], [ %5200, %after_bb346.us ], [ %5200, %after_bb343.us ], [ %5200, %after_bb340.us ], [ %5200, %after_bb337.us ], [ %5200, %after_bb334.us ], [ %5200, %after_bb331.us ], [ %5200, %after_bb328.us ], [ %5200, %after_bb325.us ], [ %5200, %after_bb322.us ], [ %5200, %after_bb319.us ], [ %5200, %after_bb316.us ], [ %5200, %after_bb313.us ], [ %5200, %after_bb310.us ], [ %5200, %after_bb307.us ], [ %5200, %after_bb304.us ], [ %5200, %after_bb301.us ], [ %5200, %after_bb298.us ], [ %5200, %after_bb295.us ], [ %5200, %after_bb292.us ], [ %5200, %after_bb289.us ], [ %5200, %after_bb286.us ], [ %5200, %after_bb283.us ], [ %5200, %after_bb280.us ], [ %5200, %after_bb277.us ], [ %5200, %after_bb274.us ], [ %5200, %after_bb271.us ], [ %5200, %after_bb268.us ], [ %5200, %after_bb265.us ], [ %5200, %after_bb262.us ], [ %5200, %after_bb259.us ], [ %5200, %after_bb256.us ], [ %5200, %after_bb253.us ], [ %5200, %after_bb250.us ], [ %5200, %after_bb247.us ], [ %5200, %after_bb244.us ], [ %5200, %after_bb241.us ], [ %5200, %after_bb238.us ], [ %5200, %after_bb235.us ], [ %5200, %after_bb232.us ], [ %5200, %after_bb229.us ], [ %5200, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5506 = phi i8 [ %5210, %true_bb386.us ], [ %5210, %after_bb385.us ], [ %5210, %after_bb382.us ], [ %5210, %after_bb379.us ], [ %5210, %after_bb376.us ], [ %5210, %after_bb373.us ], [ %5210, %after_bb370.us ], [ %5210, %after_bb367.us ], [ %5210, %after_bb364.us ], [ %5210, %after_bb361.us ], [ %5210, %after_bb358.us ], [ %5210, %after_bb355.us ], [ %5210, %after_bb352.us ], [ %5210, %after_bb349.us ], [ %5210, %after_bb346.us ], [ %5210, %after_bb343.us ], [ %5210, %after_bb340.us ], [ %5210, %after_bb337.us ], [ %5210, %after_bb334.us ], [ %5210, %after_bb331.us ], [ %5210, %after_bb328.us ], [ %5210, %after_bb325.us ], [ %5210, %after_bb322.us ], [ %5210, %after_bb319.us ], [ %5210, %after_bb316.us ], [ %5210, %after_bb313.us ], [ %5210, %after_bb310.us ], [ %5210, %after_bb307.us ], [ %5210, %after_bb304.us ], [ %5210, %after_bb301.us ], [ %5210, %after_bb298.us ], [ %5210, %after_bb295.us ], [ %5210, %after_bb292.us ], [ %5210, %after_bb289.us ], [ %5210, %after_bb286.us ], [ %5210, %after_bb283.us ], [ %5210, %after_bb280.us ], [ %5210, %after_bb277.us ], [ %5210, %after_bb274.us ], [ %5210, %after_bb271.us ], [ %5210, %after_bb268.us ], [ %5210, %after_bb265.us ], [ %5210, %after_bb262.us ], [ %5210, %after_bb259.us ], [ %5210, %after_bb256.us ], [ %5210, %after_bb253.us ], [ %5210, %after_bb250.us ], [ %5210, %after_bb247.us ], [ %5210, %after_bb244.us ], [ %5210, %after_bb241.us ], [ %5210, %after_bb238.us ], [ %5210, %after_bb235.us ], [ %5210, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5507 = phi i8 [ %5220, %true_bb386.us ], [ %5220, %after_bb385.us ], [ %5220, %after_bb382.us ], [ %5220, %after_bb379.us ], [ %5220, %after_bb376.us ], [ %5220, %after_bb373.us ], [ %5220, %after_bb370.us ], [ %5220, %after_bb367.us ], [ %5220, %after_bb364.us ], [ %5220, %after_bb361.us ], [ %5220, %after_bb358.us ], [ %5220, %after_bb355.us ], [ %5220, %after_bb352.us ], [ %5220, %after_bb349.us ], [ %5220, %after_bb346.us ], [ %5220, %after_bb343.us ], [ %5220, %after_bb340.us ], [ %5220, %after_bb337.us ], [ %5220, %after_bb334.us ], [ %5220, %after_bb331.us ], [ %5220, %after_bb328.us ], [ %5220, %after_bb325.us ], [ %5220, %after_bb322.us ], [ %5220, %after_bb319.us ], [ %5220, %after_bb316.us ], [ %5220, %after_bb313.us ], [ %5220, %after_bb310.us ], [ %5220, %after_bb307.us ], [ %5220, %after_bb304.us ], [ %5220, %after_bb301.us ], [ %5220, %after_bb298.us ], [ %5220, %after_bb295.us ], [ %5220, %after_bb292.us ], [ %5220, %after_bb289.us ], [ %5220, %after_bb286.us ], [ %5220, %after_bb283.us ], [ %5220, %after_bb280.us ], [ %5220, %after_bb277.us ], [ %5220, %after_bb274.us ], [ %5220, %after_bb271.us ], [ %5220, %after_bb268.us ], [ %5220, %after_bb265.us ], [ %5220, %after_bb262.us ], [ %5220, %after_bb259.us ], [ %5220, %after_bb256.us ], [ %5220, %after_bb253.us ], [ %5220, %after_bb250.us ], [ %5220, %after_bb247.us ], [ %5220, %after_bb244.us ], [ %5220, %after_bb241.us ], [ %5220, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5508 = phi i8 [ %5230, %true_bb386.us ], [ %5230, %after_bb385.us ], [ %5230, %after_bb382.us ], [ %5230, %after_bb379.us ], [ %5230, %after_bb376.us ], [ %5230, %after_bb373.us ], [ %5230, %after_bb370.us ], [ %5230, %after_bb367.us ], [ %5230, %after_bb364.us ], [ %5230, %after_bb361.us ], [ %5230, %after_bb358.us ], [ %5230, %after_bb355.us ], [ %5230, %after_bb352.us ], [ %5230, %after_bb349.us ], [ %5230, %after_bb346.us ], [ %5230, %after_bb343.us ], [ %5230, %after_bb340.us ], [ %5230, %after_bb337.us ], [ %5230, %after_bb334.us ], [ %5230, %after_bb331.us ], [ %5230, %after_bb328.us ], [ %5230, %after_bb325.us ], [ %5230, %after_bb322.us ], [ %5230, %after_bb319.us ], [ %5230, %after_bb316.us ], [ %5230, %after_bb313.us ], [ %5230, %after_bb310.us ], [ %5230, %after_bb307.us ], [ %5230, %after_bb304.us ], [ %5230, %after_bb301.us ], [ %5230, %after_bb298.us ], [ %5230, %after_bb295.us ], [ %5230, %after_bb292.us ], [ %5230, %after_bb289.us ], [ %5230, %after_bb286.us ], [ %5230, %after_bb283.us ], [ %5230, %after_bb280.us ], [ %5230, %after_bb277.us ], [ %5230, %after_bb274.us ], [ %5230, %after_bb271.us ], [ %5230, %after_bb268.us ], [ %5230, %after_bb265.us ], [ %5230, %after_bb262.us ], [ %5230, %after_bb259.us ], [ %5230, %after_bb256.us ], [ %5230, %after_bb253.us ], [ %5230, %after_bb250.us ], [ %5230, %after_bb247.us ], [ %5230, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5509 = phi i8 [ %5240, %true_bb386.us ], [ %5240, %after_bb385.us ], [ %5240, %after_bb382.us ], [ %5240, %after_bb379.us ], [ %5240, %after_bb376.us ], [ %5240, %after_bb373.us ], [ %5240, %after_bb370.us ], [ %5240, %after_bb367.us ], [ %5240, %after_bb364.us ], [ %5240, %after_bb361.us ], [ %5240, %after_bb358.us ], [ %5240, %after_bb355.us ], [ %5240, %after_bb352.us ], [ %5240, %after_bb349.us ], [ %5240, %after_bb346.us ], [ %5240, %after_bb343.us ], [ %5240, %after_bb340.us ], [ %5240, %after_bb337.us ], [ %5240, %after_bb334.us ], [ %5240, %after_bb331.us ], [ %5240, %after_bb328.us ], [ %5240, %after_bb325.us ], [ %5240, %after_bb322.us ], [ %5240, %after_bb319.us ], [ %5240, %after_bb316.us ], [ %5240, %after_bb313.us ], [ %5240, %after_bb310.us ], [ %5240, %after_bb307.us ], [ %5240, %after_bb304.us ], [ %5240, %after_bb301.us ], [ %5240, %after_bb298.us ], [ %5240, %after_bb295.us ], [ %5240, %after_bb292.us ], [ %5240, %after_bb289.us ], [ %5240, %after_bb286.us ], [ %5240, %after_bb283.us ], [ %5240, %after_bb280.us ], [ %5240, %after_bb277.us ], [ %5240, %after_bb274.us ], [ %5240, %after_bb271.us ], [ %5240, %after_bb268.us ], [ %5240, %after_bb265.us ], [ %5240, %after_bb262.us ], [ %5240, %after_bb259.us ], [ %5240, %after_bb256.us ], [ %5240, %after_bb253.us ], [ %5240, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5510 = phi i8 [ %5250, %true_bb386.us ], [ %5250, %after_bb385.us ], [ %5250, %after_bb382.us ], [ %5250, %after_bb379.us ], [ %5250, %after_bb376.us ], [ %5250, %after_bb373.us ], [ %5250, %after_bb370.us ], [ %5250, %after_bb367.us ], [ %5250, %after_bb364.us ], [ %5250, %after_bb361.us ], [ %5250, %after_bb358.us ], [ %5250, %after_bb355.us ], [ %5250, %after_bb352.us ], [ %5250, %after_bb349.us ], [ %5250, %after_bb346.us ], [ %5250, %after_bb343.us ], [ %5250, %after_bb340.us ], [ %5250, %after_bb337.us ], [ %5250, %after_bb334.us ], [ %5250, %after_bb331.us ], [ %5250, %after_bb328.us ], [ %5250, %after_bb325.us ], [ %5250, %after_bb322.us ], [ %5250, %after_bb319.us ], [ %5250, %after_bb316.us ], [ %5250, %after_bb313.us ], [ %5250, %after_bb310.us ], [ %5250, %after_bb307.us ], [ %5250, %after_bb304.us ], [ %5250, %after_bb301.us ], [ %5250, %after_bb298.us ], [ %5250, %after_bb295.us ], [ %5250, %after_bb292.us ], [ %5250, %after_bb289.us ], [ %5250, %after_bb286.us ], [ %5250, %after_bb283.us ], [ %5250, %after_bb280.us ], [ %5250, %after_bb277.us ], [ %5250, %after_bb274.us ], [ %5250, %after_bb271.us ], [ %5250, %after_bb268.us ], [ %5250, %after_bb265.us ], [ %5250, %after_bb262.us ], [ %5250, %after_bb259.us ], [ %5250, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5511 = phi i8 [ %5260, %true_bb386.us ], [ %5260, %after_bb385.us ], [ %5260, %after_bb382.us ], [ %5260, %after_bb379.us ], [ %5260, %after_bb376.us ], [ %5260, %after_bb373.us ], [ %5260, %after_bb370.us ], [ %5260, %after_bb367.us ], [ %5260, %after_bb364.us ], [ %5260, %after_bb361.us ], [ %5260, %after_bb358.us ], [ %5260, %after_bb355.us ], [ %5260, %after_bb352.us ], [ %5260, %after_bb349.us ], [ %5260, %after_bb346.us ], [ %5260, %after_bb343.us ], [ %5260, %after_bb340.us ], [ %5260, %after_bb337.us ], [ %5260, %after_bb334.us ], [ %5260, %after_bb331.us ], [ %5260, %after_bb328.us ], [ %5260, %after_bb325.us ], [ %5260, %after_bb322.us ], [ %5260, %after_bb319.us ], [ %5260, %after_bb316.us ], [ %5260, %after_bb313.us ], [ %5260, %after_bb310.us ], [ %5260, %after_bb307.us ], [ %5260, %after_bb304.us ], [ %5260, %after_bb301.us ], [ %5260, %after_bb298.us ], [ %5260, %after_bb295.us ], [ %5260, %after_bb292.us ], [ %5260, %after_bb289.us ], [ %5260, %after_bb286.us ], [ %5260, %after_bb283.us ], [ %5260, %after_bb280.us ], [ %5260, %after_bb277.us ], [ %5260, %after_bb274.us ], [ %5260, %after_bb271.us ], [ %5260, %after_bb268.us ], [ %5260, %after_bb265.us ], [ %5260, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5512 = phi i8 [ %5270, %true_bb386.us ], [ %5270, %after_bb385.us ], [ %5270, %after_bb382.us ], [ %5270, %after_bb379.us ], [ %5270, %after_bb376.us ], [ %5270, %after_bb373.us ], [ %5270, %after_bb370.us ], [ %5270, %after_bb367.us ], [ %5270, %after_bb364.us ], [ %5270, %after_bb361.us ], [ %5270, %after_bb358.us ], [ %5270, %after_bb355.us ], [ %5270, %after_bb352.us ], [ %5270, %after_bb349.us ], [ %5270, %after_bb346.us ], [ %5270, %after_bb343.us ], [ %5270, %after_bb340.us ], [ %5270, %after_bb337.us ], [ %5270, %after_bb334.us ], [ %5270, %after_bb331.us ], [ %5270, %after_bb328.us ], [ %5270, %after_bb325.us ], [ %5270, %after_bb322.us ], [ %5270, %after_bb319.us ], [ %5270, %after_bb316.us ], [ %5270, %after_bb313.us ], [ %5270, %after_bb310.us ], [ %5270, %after_bb307.us ], [ %5270, %after_bb304.us ], [ %5270, %after_bb301.us ], [ %5270, %after_bb298.us ], [ %5270, %after_bb295.us ], [ %5270, %after_bb292.us ], [ %5270, %after_bb289.us ], [ %5270, %after_bb286.us ], [ %5270, %after_bb283.us ], [ %5270, %after_bb280.us ], [ %5270, %after_bb277.us ], [ %5270, %after_bb274.us ], [ %5270, %after_bb271.us ], [ %5270, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5513 = phi i8 [ %5280, %true_bb386.us ], [ %5280, %after_bb385.us ], [ %5280, %after_bb382.us ], [ %5280, %after_bb379.us ], [ %5280, %after_bb376.us ], [ %5280, %after_bb373.us ], [ %5280, %after_bb370.us ], [ %5280, %after_bb367.us ], [ %5280, %after_bb364.us ], [ %5280, %after_bb361.us ], [ %5280, %after_bb358.us ], [ %5280, %after_bb355.us ], [ %5280, %after_bb352.us ], [ %5280, %after_bb349.us ], [ %5280, %after_bb346.us ], [ %5280, %after_bb343.us ], [ %5280, %after_bb340.us ], [ %5280, %after_bb337.us ], [ %5280, %after_bb334.us ], [ %5280, %after_bb331.us ], [ %5280, %after_bb328.us ], [ %5280, %after_bb325.us ], [ %5280, %after_bb322.us ], [ %5280, %after_bb319.us ], [ %5280, %after_bb316.us ], [ %5280, %after_bb313.us ], [ %5280, %after_bb310.us ], [ %5280, %after_bb307.us ], [ %5280, %after_bb304.us ], [ %5280, %after_bb301.us ], [ %5280, %after_bb298.us ], [ %5280, %after_bb295.us ], [ %5280, %after_bb292.us ], [ %5280, %after_bb289.us ], [ %5280, %after_bb286.us ], [ %5280, %after_bb283.us ], [ %5280, %after_bb280.us ], [ %5280, %after_bb277.us ], [ %5280, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5514 = phi i8 [ %5290, %true_bb386.us ], [ %5290, %after_bb385.us ], [ %5290, %after_bb382.us ], [ %5290, %after_bb379.us ], [ %5290, %after_bb376.us ], [ %5290, %after_bb373.us ], [ %5290, %after_bb370.us ], [ %5290, %after_bb367.us ], [ %5290, %after_bb364.us ], [ %5290, %after_bb361.us ], [ %5290, %after_bb358.us ], [ %5290, %after_bb355.us ], [ %5290, %after_bb352.us ], [ %5290, %after_bb349.us ], [ %5290, %after_bb346.us ], [ %5290, %after_bb343.us ], [ %5290, %after_bb340.us ], [ %5290, %after_bb337.us ], [ %5290, %after_bb334.us ], [ %5290, %after_bb331.us ], [ %5290, %after_bb328.us ], [ %5290, %after_bb325.us ], [ %5290, %after_bb322.us ], [ %5290, %after_bb319.us ], [ %5290, %after_bb316.us ], [ %5290, %after_bb313.us ], [ %5290, %after_bb310.us ], [ %5290, %after_bb307.us ], [ %5290, %after_bb304.us ], [ %5290, %after_bb301.us ], [ %5290, %after_bb298.us ], [ %5290, %after_bb295.us ], [ %5290, %after_bb292.us ], [ %5290, %after_bb289.us ], [ %5290, %after_bb286.us ], [ %5290, %after_bb283.us ], [ %5290, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5515 = phi i8 [ %5300, %true_bb386.us ], [ %5300, %after_bb385.us ], [ %5300, %after_bb382.us ], [ %5300, %after_bb379.us ], [ %5300, %after_bb376.us ], [ %5300, %after_bb373.us ], [ %5300, %after_bb370.us ], [ %5300, %after_bb367.us ], [ %5300, %after_bb364.us ], [ %5300, %after_bb361.us ], [ %5300, %after_bb358.us ], [ %5300, %after_bb355.us ], [ %5300, %after_bb352.us ], [ %5300, %after_bb349.us ], [ %5300, %after_bb346.us ], [ %5300, %after_bb343.us ], [ %5300, %after_bb340.us ], [ %5300, %after_bb337.us ], [ %5300, %after_bb334.us ], [ %5300, %after_bb331.us ], [ %5300, %after_bb328.us ], [ %5300, %after_bb325.us ], [ %5300, %after_bb322.us ], [ %5300, %after_bb319.us ], [ %5300, %after_bb316.us ], [ %5300, %after_bb313.us ], [ %5300, %after_bb310.us ], [ %5300, %after_bb307.us ], [ %5300, %after_bb304.us ], [ %5300, %after_bb301.us ], [ %5300, %after_bb298.us ], [ %5300, %after_bb295.us ], [ %5300, %after_bb292.us ], [ %5300, %after_bb289.us ], [ %5300, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5516 = phi i8 [ %5310, %true_bb386.us ], [ %5310, %after_bb385.us ], [ %5310, %after_bb382.us ], [ %5310, %after_bb379.us ], [ %5310, %after_bb376.us ], [ %5310, %after_bb373.us ], [ %5310, %after_bb370.us ], [ %5310, %after_bb367.us ], [ %5310, %after_bb364.us ], [ %5310, %after_bb361.us ], [ %5310, %after_bb358.us ], [ %5310, %after_bb355.us ], [ %5310, %after_bb352.us ], [ %5310, %after_bb349.us ], [ %5310, %after_bb346.us ], [ %5310, %after_bb343.us ], [ %5310, %after_bb340.us ], [ %5310, %after_bb337.us ], [ %5310, %after_bb334.us ], [ %5310, %after_bb331.us ], [ %5310, %after_bb328.us ], [ %5310, %after_bb325.us ], [ %5310, %after_bb322.us ], [ %5310, %after_bb319.us ], [ %5310, %after_bb316.us ], [ %5310, %after_bb313.us ], [ %5310, %after_bb310.us ], [ %5310, %after_bb307.us ], [ %5310, %after_bb304.us ], [ %5310, %after_bb301.us ], [ %5310, %after_bb298.us ], [ %5310, %after_bb295.us ], [ %5310, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5517 = phi i8 [ %5320, %true_bb386.us ], [ %5320, %after_bb385.us ], [ %5320, %after_bb382.us ], [ %5320, %after_bb379.us ], [ %5320, %after_bb376.us ], [ %5320, %after_bb373.us ], [ %5320, %after_bb370.us ], [ %5320, %after_bb367.us ], [ %5320, %after_bb364.us ], [ %5320, %after_bb361.us ], [ %5320, %after_bb358.us ], [ %5320, %after_bb355.us ], [ %5320, %after_bb352.us ], [ %5320, %after_bb349.us ], [ %5320, %after_bb346.us ], [ %5320, %after_bb343.us ], [ %5320, %after_bb340.us ], [ %5320, %after_bb337.us ], [ %5320, %after_bb334.us ], [ %5320, %after_bb331.us ], [ %5320, %after_bb328.us ], [ %5320, %after_bb325.us ], [ %5320, %after_bb322.us ], [ %5320, %after_bb319.us ], [ %5320, %after_bb316.us ], [ %5320, %after_bb313.us ], [ %5320, %after_bb310.us ], [ %5320, %after_bb307.us ], [ %5320, %after_bb304.us ], [ %5320, %after_bb301.us ], [ %5320, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5518 = phi i8 [ %5330, %true_bb386.us ], [ %5330, %after_bb385.us ], [ %5330, %after_bb382.us ], [ %5330, %after_bb379.us ], [ %5330, %after_bb376.us ], [ %5330, %after_bb373.us ], [ %5330, %after_bb370.us ], [ %5330, %after_bb367.us ], [ %5330, %after_bb364.us ], [ %5330, %after_bb361.us ], [ %5330, %after_bb358.us ], [ %5330, %after_bb355.us ], [ %5330, %after_bb352.us ], [ %5330, %after_bb349.us ], [ %5330, %after_bb346.us ], [ %5330, %after_bb343.us ], [ %5330, %after_bb340.us ], [ %5330, %after_bb337.us ], [ %5330, %after_bb334.us ], [ %5330, %after_bb331.us ], [ %5330, %after_bb328.us ], [ %5330, %after_bb325.us ], [ %5330, %after_bb322.us ], [ %5330, %after_bb319.us ], [ %5330, %after_bb316.us ], [ %5330, %after_bb313.us ], [ %5330, %after_bb310.us ], [ %5330, %after_bb307.us ], [ %5330, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5519 = phi i8 [ %5340, %true_bb386.us ], [ %5340, %after_bb385.us ], [ %5340, %after_bb382.us ], [ %5340, %after_bb379.us ], [ %5340, %after_bb376.us ], [ %5340, %after_bb373.us ], [ %5340, %after_bb370.us ], [ %5340, %after_bb367.us ], [ %5340, %after_bb364.us ], [ %5340, %after_bb361.us ], [ %5340, %after_bb358.us ], [ %5340, %after_bb355.us ], [ %5340, %after_bb352.us ], [ %5340, %after_bb349.us ], [ %5340, %after_bb346.us ], [ %5340, %after_bb343.us ], [ %5340, %after_bb340.us ], [ %5340, %after_bb337.us ], [ %5340, %after_bb334.us ], [ %5340, %after_bb331.us ], [ %5340, %after_bb328.us ], [ %5340, %after_bb325.us ], [ %5340, %after_bb322.us ], [ %5340, %after_bb319.us ], [ %5340, %after_bb316.us ], [ %5340, %after_bb313.us ], [ %5340, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5520 = phi i8 [ %5350, %true_bb386.us ], [ %5350, %after_bb385.us ], [ %5350, %after_bb382.us ], [ %5350, %after_bb379.us ], [ %5350, %after_bb376.us ], [ %5350, %after_bb373.us ], [ %5350, %after_bb370.us ], [ %5350, %after_bb367.us ], [ %5350, %after_bb364.us ], [ %5350, %after_bb361.us ], [ %5350, %after_bb358.us ], [ %5350, %after_bb355.us ], [ %5350, %after_bb352.us ], [ %5350, %after_bb349.us ], [ %5350, %after_bb346.us ], [ %5350, %after_bb343.us ], [ %5350, %after_bb340.us ], [ %5350, %after_bb337.us ], [ %5350, %after_bb334.us ], [ %5350, %after_bb331.us ], [ %5350, %after_bb328.us ], [ %5350, %after_bb325.us ], [ %5350, %after_bb322.us ], [ %5350, %after_bb319.us ], [ %5350, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5521 = phi i8 [ %5360, %true_bb386.us ], [ %5360, %after_bb385.us ], [ %5360, %after_bb382.us ], [ %5360, %after_bb379.us ], [ %5360, %after_bb376.us ], [ %5360, %after_bb373.us ], [ %5360, %after_bb370.us ], [ %5360, %after_bb367.us ], [ %5360, %after_bb364.us ], [ %5360, %after_bb361.us ], [ %5360, %after_bb358.us ], [ %5360, %after_bb355.us ], [ %5360, %after_bb352.us ], [ %5360, %after_bb349.us ], [ %5360, %after_bb346.us ], [ %5360, %after_bb343.us ], [ %5360, %after_bb340.us ], [ %5360, %after_bb337.us ], [ %5360, %after_bb334.us ], [ %5360, %after_bb331.us ], [ %5360, %after_bb328.us ], [ %5360, %after_bb325.us ], [ %5360, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5522 = phi i8 [ %5370, %true_bb386.us ], [ %5370, %after_bb385.us ], [ %5370, %after_bb382.us ], [ %5370, %after_bb379.us ], [ %5370, %after_bb376.us ], [ %5370, %after_bb373.us ], [ %5370, %after_bb370.us ], [ %5370, %after_bb367.us ], [ %5370, %after_bb364.us ], [ %5370, %after_bb361.us ], [ %5370, %after_bb358.us ], [ %5370, %after_bb355.us ], [ %5370, %after_bb352.us ], [ %5370, %after_bb349.us ], [ %5370, %after_bb346.us ], [ %5370, %after_bb343.us ], [ %5370, %after_bb340.us ], [ %5370, %after_bb337.us ], [ %5370, %after_bb334.us ], [ %5370, %after_bb331.us ], [ %5370, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5523 = phi i8 [ %5380, %true_bb386.us ], [ %5380, %after_bb385.us ], [ %5380, %after_bb382.us ], [ %5380, %after_bb379.us ], [ %5380, %after_bb376.us ], [ %5380, %after_bb373.us ], [ %5380, %after_bb370.us ], [ %5380, %after_bb367.us ], [ %5380, %after_bb364.us ], [ %5380, %after_bb361.us ], [ %5380, %after_bb358.us ], [ %5380, %after_bb355.us ], [ %5380, %after_bb352.us ], [ %5380, %after_bb349.us ], [ %5380, %after_bb346.us ], [ %5380, %after_bb343.us ], [ %5380, %after_bb340.us ], [ %5380, %after_bb337.us ], [ %5380, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5524 = phi i8 [ %5390, %true_bb386.us ], [ %5390, %after_bb385.us ], [ %5390, %after_bb382.us ], [ %5390, %after_bb379.us ], [ %5390, %after_bb376.us ], [ %5390, %after_bb373.us ], [ %5390, %after_bb370.us ], [ %5390, %after_bb367.us ], [ %5390, %after_bb364.us ], [ %5390, %after_bb361.us ], [ %5390, %after_bb358.us ], [ %5390, %after_bb355.us ], [ %5390, %after_bb352.us ], [ %5390, %after_bb349.us ], [ %5390, %after_bb346.us ], [ %5390, %after_bb343.us ], [ %5390, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5525 = phi i8 [ %5400, %true_bb386.us ], [ %5400, %after_bb385.us ], [ %5400, %after_bb382.us ], [ %5400, %after_bb379.us ], [ %5400, %after_bb376.us ], [ %5400, %after_bb373.us ], [ %5400, %after_bb370.us ], [ %5400, %after_bb367.us ], [ %5400, %after_bb364.us ], [ %5400, %after_bb361.us ], [ %5400, %after_bb358.us ], [ %5400, %after_bb355.us ], [ %5400, %after_bb352.us ], [ %5400, %after_bb349.us ], [ %5400, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5526 = phi i8 [ %5410, %true_bb386.us ], [ %5410, %after_bb385.us ], [ %5410, %after_bb382.us ], [ %5410, %after_bb379.us ], [ %5410, %after_bb376.us ], [ %5410, %after_bb373.us ], [ %5410, %after_bb370.us ], [ %5410, %after_bb367.us ], [ %5410, %after_bb364.us ], [ %5410, %after_bb361.us ], [ %5410, %after_bb358.us ], [ %5410, %after_bb355.us ], [ %5410, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5527 = phi i8 [ %5420, %true_bb386.us ], [ %5420, %after_bb385.us ], [ %5420, %after_bb382.us ], [ %5420, %after_bb379.us ], [ %5420, %after_bb376.us ], [ %5420, %after_bb373.us ], [ %5420, %after_bb370.us ], [ %5420, %after_bb367.us ], [ %5420, %after_bb364.us ], [ %5420, %after_bb361.us ], [ %5420, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5528 = phi i8 [ %5430, %true_bb386.us ], [ %5430, %after_bb385.us ], [ %5430, %after_bb382.us ], [ %5430, %after_bb379.us ], [ %5430, %after_bb376.us ], [ %5430, %after_bb373.us ], [ %5430, %after_bb370.us ], [ %5430, %after_bb367.us ], [ %5430, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5529 = phi i8 [ %5440, %true_bb386.us ], [ %5440, %after_bb385.us ], [ %5440, %after_bb382.us ], [ %5440, %after_bb379.us ], [ %5440, %after_bb376.us ], [ %5440, %after_bb373.us ], [ %5440, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5530 = phi i8 [ %5450, %true_bb386.us ], [ %5450, %after_bb385.us ], [ %5450, %after_bb382.us ], [ %5450, %after_bb379.us ], [ %5450, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5531 = phi i8 [ %5460, %true_bb386.us ], [ %5460, %after_bb385.us ], [ %5460, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  %5532 = phi i8 [ %5470, %true_bb386.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %"for resampled_input.s0.x.rebased197.us" ]
  br i1 %t2398, label %true_bb389.us, label %after_bb391.us

true_bb389.us:                                    ; preds = %after_bb388.us
  %5533 = sdiv i32 63, %5001
  %5534 = and i32 %5533, %5005
  %5535 = add nsw i32 %5534, %5160
  %5536 = getelementptr inbounds i8, i8* %8, i32 %5535
  %5537 = load i8, i8* %5536, align 1, !tbaa !127
  br label %after_bb391.us

after_bb391.us:                                   ; preds = %true_bb389.us, %after_bb388.us
  %5538 = phi i8 [ %5537, %true_bb389.us ], [ 0, %after_bb388.us ]
  br i1 %t2399, label %after_bb394.us, label %after_bb583.us

after_bb394.us:                                   ; preds = %after_bb391.us
  %5539 = sdiv i32 64, %5001
  %5540 = and i32 %5539, %5005
  %5541 = add nsw i32 %5540, %5160
  %5542 = getelementptr inbounds i8, i8* %8, i32 %5541
  %5543 = load i8, i8* %5542, align 1, !tbaa !127
  br i1 %.not4636, label %after_bb583.us, label %after_bb397.us

after_bb397.us:                                   ; preds = %after_bb394.us
  %5544 = sdiv i32 65, %5001
  %5545 = and i32 %5544, %5005
  %5546 = add nsw i32 %5545, %5160
  %5547 = getelementptr inbounds i8, i8* %8, i32 %5546
  %5548 = load i8, i8* %5547, align 1, !tbaa !127
  br i1 %5037, label %after_bb400.us, label %after_bb583.us

after_bb400.us:                                   ; preds = %after_bb397.us
  %5549 = sdiv i32 66, %5001
  %5550 = and i32 %5549, %5005
  %5551 = add nsw i32 %5550, %5160
  %5552 = getelementptr inbounds i8, i8* %8, i32 %5551
  %5553 = load i8, i8* %5552, align 1, !tbaa !127
  br i1 %.not4637, label %after_bb583.us, label %after_bb403.us

after_bb403.us:                                   ; preds = %after_bb400.us
  %5554 = sdiv i32 67, %5001
  %5555 = and i32 %5554, %5005
  %5556 = add nsw i32 %5555, %5160
  %5557 = getelementptr inbounds i8, i8* %8, i32 %5556
  %5558 = load i8, i8* %5557, align 1, !tbaa !127
  br i1 %5038, label %after_bb406.us, label %after_bb583.us

after_bb406.us:                                   ; preds = %after_bb403.us
  %5559 = sdiv i32 68, %5001
  %5560 = and i32 %5559, %5005
  %5561 = add nsw i32 %5560, %5160
  %5562 = getelementptr inbounds i8, i8* %8, i32 %5561
  %5563 = load i8, i8* %5562, align 1, !tbaa !127
  br i1 %.not4638, label %after_bb583.us, label %after_bb409.us

after_bb409.us:                                   ; preds = %after_bb406.us
  %5564 = sdiv i32 69, %5001
  %5565 = and i32 %5564, %5005
  %5566 = add nsw i32 %5565, %5160
  %5567 = getelementptr inbounds i8, i8* %8, i32 %5566
  %5568 = load i8, i8* %5567, align 1, !tbaa !127
  br i1 %5039, label %after_bb412.us, label %after_bb583.us

after_bb412.us:                                   ; preds = %after_bb409.us
  %5569 = sdiv i32 70, %5001
  %5570 = and i32 %5569, %5005
  %5571 = add nsw i32 %5570, %5160
  %5572 = getelementptr inbounds i8, i8* %8, i32 %5571
  %5573 = load i8, i8* %5572, align 1, !tbaa !127
  br i1 %.not4639, label %after_bb583.us, label %after_bb415.us

after_bb415.us:                                   ; preds = %after_bb412.us
  %5574 = sdiv i32 71, %5001
  %5575 = and i32 %5574, %5005
  %5576 = add nsw i32 %5575, %5160
  %5577 = getelementptr inbounds i8, i8* %8, i32 %5576
  %5578 = load i8, i8* %5577, align 1, !tbaa !127
  br i1 %5040, label %after_bb418.us, label %after_bb583.us

after_bb418.us:                                   ; preds = %after_bb415.us
  %5579 = sdiv i32 72, %5001
  %5580 = and i32 %5579, %5005
  %5581 = add nsw i32 %5580, %5160
  %5582 = getelementptr inbounds i8, i8* %8, i32 %5581
  %5583 = load i8, i8* %5582, align 1, !tbaa !127
  br i1 %.not4640, label %after_bb583.us, label %after_bb421.us

after_bb421.us:                                   ; preds = %after_bb418.us
  %5584 = sdiv i32 73, %5001
  %5585 = and i32 %5584, %5005
  %5586 = add nsw i32 %5585, %5160
  %5587 = getelementptr inbounds i8, i8* %8, i32 %5586
  %5588 = load i8, i8* %5587, align 1, !tbaa !127
  br i1 %5041, label %after_bb424.us, label %after_bb583.us

after_bb424.us:                                   ; preds = %after_bb421.us
  %5589 = sdiv i32 74, %5001
  %5590 = and i32 %5589, %5005
  %5591 = add nsw i32 %5590, %5160
  %5592 = getelementptr inbounds i8, i8* %8, i32 %5591
  %5593 = load i8, i8* %5592, align 1, !tbaa !127
  br i1 %.not4641, label %after_bb583.us, label %after_bb427.us

after_bb427.us:                                   ; preds = %after_bb424.us
  %5594 = sdiv i32 75, %5001
  %5595 = and i32 %5594, %5005
  %5596 = add nsw i32 %5595, %5160
  %5597 = getelementptr inbounds i8, i8* %8, i32 %5596
  %5598 = load i8, i8* %5597, align 1, !tbaa !127
  br i1 %5042, label %after_bb430.us, label %after_bb583.us

after_bb430.us:                                   ; preds = %after_bb427.us
  %5599 = sdiv i32 76, %5001
  %5600 = and i32 %5599, %5005
  %5601 = add nsw i32 %5600, %5160
  %5602 = getelementptr inbounds i8, i8* %8, i32 %5601
  %5603 = load i8, i8* %5602, align 1, !tbaa !127
  br i1 %.not4642, label %after_bb583.us, label %after_bb433.us

after_bb433.us:                                   ; preds = %after_bb430.us
  %5604 = sdiv i32 77, %5001
  %5605 = and i32 %5604, %5005
  %5606 = add nsw i32 %5605, %5160
  %5607 = getelementptr inbounds i8, i8* %8, i32 %5606
  %5608 = load i8, i8* %5607, align 1, !tbaa !127
  br i1 %5043, label %after_bb436.us, label %after_bb583.us

after_bb436.us:                                   ; preds = %after_bb433.us
  %5609 = sdiv i32 78, %5001
  %5610 = and i32 %5609, %5005
  %5611 = add nsw i32 %5610, %5160
  %5612 = getelementptr inbounds i8, i8* %8, i32 %5611
  %5613 = load i8, i8* %5612, align 1, !tbaa !127
  br i1 %.not4643, label %after_bb583.us, label %after_bb439.us

after_bb439.us:                                   ; preds = %after_bb436.us
  %5614 = sdiv i32 79, %5001
  %5615 = and i32 %5614, %5005
  %5616 = add nsw i32 %5615, %5160
  %5617 = getelementptr inbounds i8, i8* %8, i32 %5616
  %5618 = load i8, i8* %5617, align 1, !tbaa !127
  br i1 %5044, label %after_bb442.us, label %after_bb583.us

after_bb442.us:                                   ; preds = %after_bb439.us
  %5619 = sdiv i32 80, %5001
  %5620 = and i32 %5619, %5005
  %5621 = add nsw i32 %5620, %5160
  %5622 = getelementptr inbounds i8, i8* %8, i32 %5621
  %5623 = load i8, i8* %5622, align 1, !tbaa !127
  br i1 %.not4644, label %after_bb583.us, label %after_bb445.us

after_bb445.us:                                   ; preds = %after_bb442.us
  %5624 = sdiv i32 81, %5001
  %5625 = and i32 %5624, %5005
  %5626 = add nsw i32 %5625, %5160
  %5627 = getelementptr inbounds i8, i8* %8, i32 %5626
  %5628 = load i8, i8* %5627, align 1, !tbaa !127
  br i1 %5045, label %after_bb448.us, label %after_bb583.us

after_bb448.us:                                   ; preds = %after_bb445.us
  %5629 = sdiv i32 82, %5001
  %5630 = and i32 %5629, %5005
  %5631 = add nsw i32 %5630, %5160
  %5632 = getelementptr inbounds i8, i8* %8, i32 %5631
  %5633 = load i8, i8* %5632, align 1, !tbaa !127
  br i1 %.not4645, label %after_bb583.us, label %after_bb451.us

after_bb451.us:                                   ; preds = %after_bb448.us
  %5634 = sdiv i32 83, %5001
  %5635 = and i32 %5634, %5005
  %5636 = add nsw i32 %5635, %5160
  %5637 = getelementptr inbounds i8, i8* %8, i32 %5636
  %5638 = load i8, i8* %5637, align 1, !tbaa !127
  br i1 %5046, label %after_bb454.us, label %after_bb583.us

after_bb454.us:                                   ; preds = %after_bb451.us
  %5639 = sdiv i32 84, %5001
  %5640 = and i32 %5639, %5005
  %5641 = add nsw i32 %5640, %5160
  %5642 = getelementptr inbounds i8, i8* %8, i32 %5641
  %5643 = load i8, i8* %5642, align 1, !tbaa !127
  br i1 %.not4646, label %after_bb583.us, label %after_bb457.us

after_bb457.us:                                   ; preds = %after_bb454.us
  %5644 = sdiv i32 85, %5001
  %5645 = and i32 %5644, %5005
  %5646 = add nsw i32 %5645, %5160
  %5647 = getelementptr inbounds i8, i8* %8, i32 %5646
  %5648 = load i8, i8* %5647, align 1, !tbaa !127
  br i1 %5047, label %after_bb460.us, label %after_bb583.us

after_bb460.us:                                   ; preds = %after_bb457.us
  %5649 = sdiv i32 86, %5001
  %5650 = and i32 %5649, %5005
  %5651 = add nsw i32 %5650, %5160
  %5652 = getelementptr inbounds i8, i8* %8, i32 %5651
  %5653 = load i8, i8* %5652, align 1, !tbaa !127
  br i1 %.not4647, label %after_bb583.us, label %after_bb463.us

after_bb463.us:                                   ; preds = %after_bb460.us
  %5654 = sdiv i32 87, %5001
  %5655 = and i32 %5654, %5005
  %5656 = add nsw i32 %5655, %5160
  %5657 = getelementptr inbounds i8, i8* %8, i32 %5656
  %5658 = load i8, i8* %5657, align 1, !tbaa !127
  br i1 %5048, label %after_bb466.us, label %after_bb583.us

after_bb466.us:                                   ; preds = %after_bb463.us
  %5659 = sdiv i32 88, %5001
  %5660 = and i32 %5659, %5005
  %5661 = add nsw i32 %5660, %5160
  %5662 = getelementptr inbounds i8, i8* %8, i32 %5661
  %5663 = load i8, i8* %5662, align 1, !tbaa !127
  br i1 %.not4648, label %after_bb583.us, label %after_bb469.us

after_bb469.us:                                   ; preds = %after_bb466.us
  %5664 = sdiv i32 89, %5001
  %5665 = and i32 %5664, %5005
  %5666 = add nsw i32 %5665, %5160
  %5667 = getelementptr inbounds i8, i8* %8, i32 %5666
  %5668 = load i8, i8* %5667, align 1, !tbaa !127
  br i1 %5049, label %after_bb472.us, label %after_bb583.us

after_bb472.us:                                   ; preds = %after_bb469.us
  %5669 = sdiv i32 90, %5001
  %5670 = and i32 %5669, %5005
  %5671 = add nsw i32 %5670, %5160
  %5672 = getelementptr inbounds i8, i8* %8, i32 %5671
  %5673 = load i8, i8* %5672, align 1, !tbaa !127
  br i1 %.not4649, label %after_bb583.us, label %after_bb475.us

after_bb475.us:                                   ; preds = %after_bb472.us
  %5674 = sdiv i32 91, %5001
  %5675 = and i32 %5674, %5005
  %5676 = add nsw i32 %5675, %5160
  %5677 = getelementptr inbounds i8, i8* %8, i32 %5676
  %5678 = load i8, i8* %5677, align 1, !tbaa !127
  br i1 %5050, label %after_bb478.us, label %after_bb583.us

after_bb478.us:                                   ; preds = %after_bb475.us
  %5679 = sdiv i32 92, %5001
  %5680 = and i32 %5679, %5005
  %5681 = add nsw i32 %5680, %5160
  %5682 = getelementptr inbounds i8, i8* %8, i32 %5681
  %5683 = load i8, i8* %5682, align 1, !tbaa !127
  br i1 %.not4650, label %after_bb583.us, label %after_bb481.us

after_bb481.us:                                   ; preds = %after_bb478.us
  %5684 = sdiv i32 93, %5001
  %5685 = and i32 %5684, %5005
  %5686 = add nsw i32 %5685, %5160
  %5687 = getelementptr inbounds i8, i8* %8, i32 %5686
  %5688 = load i8, i8* %5687, align 1, !tbaa !127
  br i1 %5051, label %after_bb484.us, label %after_bb583.us

after_bb484.us:                                   ; preds = %after_bb481.us
  %5689 = sdiv i32 94, %5001
  %5690 = and i32 %5689, %5005
  %5691 = add nsw i32 %5690, %5160
  %5692 = getelementptr inbounds i8, i8* %8, i32 %5691
  %5693 = load i8, i8* %5692, align 1, !tbaa !127
  br i1 %.not4651, label %after_bb583.us, label %after_bb487.us

after_bb487.us:                                   ; preds = %after_bb484.us
  %5694 = sdiv i32 95, %5001
  %5695 = and i32 %5694, %5005
  %5696 = add nsw i32 %5695, %5160
  %5697 = getelementptr inbounds i8, i8* %8, i32 %5696
  %5698 = load i8, i8* %5697, align 1, !tbaa !127
  br i1 %5052, label %after_bb490.us, label %after_bb583.us

after_bb490.us:                                   ; preds = %after_bb487.us
  %5699 = sdiv i32 96, %5001
  %5700 = and i32 %5699, %5005
  %5701 = add nsw i32 %5700, %5160
  %5702 = getelementptr inbounds i8, i8* %8, i32 %5701
  %5703 = load i8, i8* %5702, align 1, !tbaa !127
  br i1 %.not4652, label %after_bb583.us, label %after_bb493.us

after_bb493.us:                                   ; preds = %after_bb490.us
  %5704 = sdiv i32 97, %5001
  %5705 = and i32 %5704, %5005
  %5706 = add nsw i32 %5705, %5160
  %5707 = getelementptr inbounds i8, i8* %8, i32 %5706
  %5708 = load i8, i8* %5707, align 1, !tbaa !127
  br i1 %5053, label %after_bb496.us, label %after_bb583.us

after_bb496.us:                                   ; preds = %after_bb493.us
  %5709 = sdiv i32 98, %5001
  %5710 = and i32 %5709, %5005
  %5711 = add nsw i32 %5710, %5160
  %5712 = getelementptr inbounds i8, i8* %8, i32 %5711
  %5713 = load i8, i8* %5712, align 1, !tbaa !127
  br i1 %.not4653, label %after_bb583.us, label %after_bb499.us

after_bb499.us:                                   ; preds = %after_bb496.us
  %5714 = sdiv i32 99, %5001
  %5715 = and i32 %5714, %5005
  %5716 = add nsw i32 %5715, %5160
  %5717 = getelementptr inbounds i8, i8* %8, i32 %5716
  %5718 = load i8, i8* %5717, align 1, !tbaa !127
  br i1 %5054, label %after_bb502.us, label %after_bb583.us

after_bb502.us:                                   ; preds = %after_bb499.us
  %5719 = sdiv i32 100, %5001
  %5720 = and i32 %5719, %5005
  %5721 = add nsw i32 %5720, %5160
  %5722 = getelementptr inbounds i8, i8* %8, i32 %5721
  %5723 = load i8, i8* %5722, align 1, !tbaa !127
  br i1 %.not4654, label %after_bb583.us, label %after_bb505.us

after_bb505.us:                                   ; preds = %after_bb502.us
  %5724 = sdiv i32 101, %5001
  %5725 = and i32 %5724, %5005
  %5726 = add nsw i32 %5725, %5160
  %5727 = getelementptr inbounds i8, i8* %8, i32 %5726
  %5728 = load i8, i8* %5727, align 1, !tbaa !127
  br i1 %5055, label %after_bb508.us, label %after_bb583.us

after_bb508.us:                                   ; preds = %after_bb505.us
  %5729 = sdiv i32 102, %5001
  %5730 = and i32 %5729, %5005
  %5731 = add nsw i32 %5730, %5160
  %5732 = getelementptr inbounds i8, i8* %8, i32 %5731
  %5733 = load i8, i8* %5732, align 1, !tbaa !127
  br i1 %.not4655, label %after_bb583.us, label %after_bb511.us

after_bb511.us:                                   ; preds = %after_bb508.us
  %5734 = sdiv i32 103, %5001
  %5735 = and i32 %5734, %5005
  %5736 = add nsw i32 %5735, %5160
  %5737 = getelementptr inbounds i8, i8* %8, i32 %5736
  %5738 = load i8, i8* %5737, align 1, !tbaa !127
  br i1 %5056, label %after_bb514.us, label %after_bb583.us

after_bb514.us:                                   ; preds = %after_bb511.us
  %5739 = sdiv i32 104, %5001
  %5740 = and i32 %5739, %5005
  %5741 = add nsw i32 %5740, %5160
  %5742 = getelementptr inbounds i8, i8* %8, i32 %5741
  %5743 = load i8, i8* %5742, align 1, !tbaa !127
  br i1 %.not4656, label %after_bb583.us, label %after_bb517.us

after_bb517.us:                                   ; preds = %after_bb514.us
  %5744 = sdiv i32 105, %5001
  %5745 = and i32 %5744, %5005
  %5746 = add nsw i32 %5745, %5160
  %5747 = getelementptr inbounds i8, i8* %8, i32 %5746
  %5748 = load i8, i8* %5747, align 1, !tbaa !127
  br i1 %5057, label %after_bb520.us, label %after_bb583.us

after_bb520.us:                                   ; preds = %after_bb517.us
  %5749 = sdiv i32 106, %5001
  %5750 = and i32 %5749, %5005
  %5751 = add nsw i32 %5750, %5160
  %5752 = getelementptr inbounds i8, i8* %8, i32 %5751
  %5753 = load i8, i8* %5752, align 1, !tbaa !127
  br i1 %.not4657, label %after_bb583.us, label %after_bb523.us

after_bb523.us:                                   ; preds = %after_bb520.us
  %5754 = sdiv i32 107, %5001
  %5755 = and i32 %5754, %5005
  %5756 = add nsw i32 %5755, %5160
  %5757 = getelementptr inbounds i8, i8* %8, i32 %5756
  %5758 = load i8, i8* %5757, align 1, !tbaa !127
  br i1 %5058, label %after_bb526.us, label %after_bb583.us

after_bb526.us:                                   ; preds = %after_bb523.us
  %5759 = sdiv i32 108, %5001
  %5760 = and i32 %5759, %5005
  %5761 = add nsw i32 %5760, %5160
  %5762 = getelementptr inbounds i8, i8* %8, i32 %5761
  %5763 = load i8, i8* %5762, align 1, !tbaa !127
  br i1 %.not4658, label %after_bb583.us, label %after_bb529.us

after_bb529.us:                                   ; preds = %after_bb526.us
  %5764 = sdiv i32 109, %5001
  %5765 = and i32 %5764, %5005
  %5766 = add nsw i32 %5765, %5160
  %5767 = getelementptr inbounds i8, i8* %8, i32 %5766
  %5768 = load i8, i8* %5767, align 1, !tbaa !127
  br i1 %5059, label %after_bb532.us, label %after_bb583.us

after_bb532.us:                                   ; preds = %after_bb529.us
  %5769 = sdiv i32 110, %5001
  %5770 = and i32 %5769, %5005
  %5771 = add nsw i32 %5770, %5160
  %5772 = getelementptr inbounds i8, i8* %8, i32 %5771
  %5773 = load i8, i8* %5772, align 1, !tbaa !127
  br i1 %.not4659, label %after_bb583.us, label %after_bb535.us

after_bb535.us:                                   ; preds = %after_bb532.us
  %5774 = sdiv i32 111, %5001
  %5775 = and i32 %5774, %5005
  %5776 = add nsw i32 %5775, %5160
  %5777 = getelementptr inbounds i8, i8* %8, i32 %5776
  %5778 = load i8, i8* %5777, align 1, !tbaa !127
  br i1 %5060, label %after_bb538.us, label %after_bb583.us

after_bb538.us:                                   ; preds = %after_bb535.us
  %5779 = sdiv i32 112, %5001
  %5780 = and i32 %5779, %5005
  %5781 = add nsw i32 %5780, %5160
  %5782 = getelementptr inbounds i8, i8* %8, i32 %5781
  %5783 = load i8, i8* %5782, align 1, !tbaa !127
  br i1 %.not4660, label %after_bb583.us, label %after_bb541.us

after_bb541.us:                                   ; preds = %after_bb538.us
  %5784 = sdiv i32 113, %5001
  %5785 = and i32 %5784, %5005
  %5786 = add nsw i32 %5785, %5160
  %5787 = getelementptr inbounds i8, i8* %8, i32 %5786
  %5788 = load i8, i8* %5787, align 1, !tbaa !127
  br i1 %5061, label %after_bb544.us, label %after_bb583.us

after_bb544.us:                                   ; preds = %after_bb541.us
  %5789 = sdiv i32 114, %5001
  %5790 = and i32 %5789, %5005
  %5791 = add nsw i32 %5790, %5160
  %5792 = getelementptr inbounds i8, i8* %8, i32 %5791
  %5793 = load i8, i8* %5792, align 1, !tbaa !127
  br i1 %.not4661, label %after_bb583.us, label %after_bb547.us

after_bb547.us:                                   ; preds = %after_bb544.us
  %5794 = sdiv i32 115, %5001
  %5795 = and i32 %5794, %5005
  %5796 = add nsw i32 %5795, %5160
  %5797 = getelementptr inbounds i8, i8* %8, i32 %5796
  %5798 = load i8, i8* %5797, align 1, !tbaa !127
  br i1 %5062, label %after_bb550.us, label %after_bb583.us

after_bb550.us:                                   ; preds = %after_bb547.us
  %5799 = sdiv i32 116, %5001
  %5800 = and i32 %5799, %5005
  %5801 = add nsw i32 %5800, %5160
  %5802 = getelementptr inbounds i8, i8* %8, i32 %5801
  %5803 = load i8, i8* %5802, align 1, !tbaa !127
  br i1 %.not4662, label %after_bb583.us, label %after_bb553.us

after_bb553.us:                                   ; preds = %after_bb550.us
  %5804 = sdiv i32 117, %5001
  %5805 = and i32 %5804, %5005
  %5806 = add nsw i32 %5805, %5160
  %5807 = getelementptr inbounds i8, i8* %8, i32 %5806
  %5808 = load i8, i8* %5807, align 1, !tbaa !127
  br i1 %5063, label %after_bb556.us, label %after_bb583.us

after_bb556.us:                                   ; preds = %after_bb553.us
  %5809 = sdiv i32 118, %5001
  %5810 = and i32 %5809, %5005
  %5811 = add nsw i32 %5810, %5160
  %5812 = getelementptr inbounds i8, i8* %8, i32 %5811
  %5813 = load i8, i8* %5812, align 1, !tbaa !127
  br i1 %.not4663, label %after_bb583.us, label %after_bb559.us

after_bb559.us:                                   ; preds = %after_bb556.us
  %5814 = sdiv i32 119, %5001
  %5815 = and i32 %5814, %5005
  %5816 = add nsw i32 %5815, %5160
  %5817 = getelementptr inbounds i8, i8* %8, i32 %5816
  %5818 = load i8, i8* %5817, align 1, !tbaa !127
  br i1 %5064, label %after_bb562.us, label %after_bb583.us

after_bb562.us:                                   ; preds = %after_bb559.us
  %5819 = sdiv i32 120, %5001
  %5820 = and i32 %5819, %5005
  %5821 = add nsw i32 %5820, %5160
  %5822 = getelementptr inbounds i8, i8* %8, i32 %5821
  %5823 = load i8, i8* %5822, align 1, !tbaa !127
  br i1 %.not4664, label %after_bb583.us, label %after_bb565.us

after_bb565.us:                                   ; preds = %after_bb562.us
  %5824 = sdiv i32 121, %5001
  %5825 = and i32 %5824, %5005
  %5826 = add nsw i32 %5825, %5160
  %5827 = getelementptr inbounds i8, i8* %8, i32 %5826
  %5828 = load i8, i8* %5827, align 1, !tbaa !127
  br i1 %5065, label %after_bb568.us, label %after_bb583.us

after_bb568.us:                                   ; preds = %after_bb565.us
  %5829 = sdiv i32 122, %5001
  %5830 = and i32 %5829, %5005
  %5831 = add nsw i32 %5830, %5160
  %5832 = getelementptr inbounds i8, i8* %8, i32 %5831
  %5833 = load i8, i8* %5832, align 1, !tbaa !127
  br i1 %.not4665, label %after_bb583.us, label %after_bb571.us

after_bb571.us:                                   ; preds = %after_bb568.us
  %5834 = sdiv i32 123, %5001
  %5835 = and i32 %5834, %5005
  %5836 = add nsw i32 %5835, %5160
  %5837 = getelementptr inbounds i8, i8* %8, i32 %5836
  %5838 = load i8, i8* %5837, align 1, !tbaa !127
  br i1 %5066, label %after_bb574.us, label %after_bb583.us

after_bb574.us:                                   ; preds = %after_bb571.us
  %5839 = sdiv i32 124, %5001
  %5840 = and i32 %5839, %5005
  %5841 = add nsw i32 %5840, %5160
  %5842 = getelementptr inbounds i8, i8* %8, i32 %5841
  %5843 = load i8, i8* %5842, align 1, !tbaa !127
  br i1 %.not4666, label %after_bb583.us, label %after_bb577.us

after_bb577.us:                                   ; preds = %after_bb574.us
  %5844 = sdiv i32 125, %5001
  %5845 = and i32 %5844, %5005
  %5846 = add nsw i32 %5845, %5160
  %5847 = getelementptr inbounds i8, i8* %8, i32 %5846
  %5848 = load i8, i8* %5847, align 1, !tbaa !127
  br i1 %5067, label %true_bb578.us, label %after_bb583.us

true_bb578.us:                                    ; preds = %after_bb577.us
  %5849 = sdiv i32 126, %5001
  %5850 = and i32 %5849, %5005
  %5851 = add nsw i32 %5850, %5160
  %5852 = getelementptr inbounds i8, i8* %8, i32 %5851
  %5853 = load i8, i8* %5852, align 1, !tbaa !127
  br label %after_bb583.us

after_bb583.us:                                   ; preds = %true_bb578.us, %after_bb577.us, %after_bb574.us, %after_bb571.us, %after_bb568.us, %after_bb565.us, %after_bb562.us, %after_bb559.us, %after_bb556.us, %after_bb553.us, %after_bb550.us, %after_bb547.us, %after_bb544.us, %after_bb541.us, %after_bb538.us, %after_bb535.us, %after_bb532.us, %after_bb529.us, %after_bb526.us, %after_bb523.us, %after_bb520.us, %after_bb517.us, %after_bb514.us, %after_bb511.us, %after_bb508.us, %after_bb505.us, %after_bb502.us, %after_bb499.us, %after_bb496.us, %after_bb493.us, %after_bb490.us, %after_bb487.us, %after_bb484.us, %after_bb481.us, %after_bb478.us, %after_bb475.us, %after_bb472.us, %after_bb469.us, %after_bb466.us, %after_bb463.us, %after_bb460.us, %after_bb457.us, %after_bb454.us, %after_bb451.us, %after_bb448.us, %after_bb445.us, %after_bb442.us, %after_bb439.us, %after_bb436.us, %after_bb433.us, %after_bb430.us, %after_bb427.us, %after_bb424.us, %after_bb421.us, %after_bb418.us, %after_bb415.us, %after_bb412.us, %after_bb409.us, %after_bb406.us, %after_bb403.us, %after_bb400.us, %after_bb397.us, %after_bb394.us, %after_bb391.us
  %5854 = phi i8 [ %5848, %true_bb578.us ], [ %5848, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5855 = phi i8 [ %5838, %true_bb578.us ], [ %5838, %after_bb577.us ], [ %5838, %after_bb574.us ], [ %5838, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5856 = phi i8 [ %5828, %true_bb578.us ], [ %5828, %after_bb577.us ], [ %5828, %after_bb574.us ], [ %5828, %after_bb571.us ], [ %5828, %after_bb568.us ], [ %5828, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5857 = phi i8 [ %5818, %true_bb578.us ], [ %5818, %after_bb577.us ], [ %5818, %after_bb574.us ], [ %5818, %after_bb571.us ], [ %5818, %after_bb568.us ], [ %5818, %after_bb565.us ], [ %5818, %after_bb562.us ], [ %5818, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5858 = phi i8 [ %5808, %true_bb578.us ], [ %5808, %after_bb577.us ], [ %5808, %after_bb574.us ], [ %5808, %after_bb571.us ], [ %5808, %after_bb568.us ], [ %5808, %after_bb565.us ], [ %5808, %after_bb562.us ], [ %5808, %after_bb559.us ], [ %5808, %after_bb556.us ], [ %5808, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5859 = phi i8 [ %5798, %true_bb578.us ], [ %5798, %after_bb577.us ], [ %5798, %after_bb574.us ], [ %5798, %after_bb571.us ], [ %5798, %after_bb568.us ], [ %5798, %after_bb565.us ], [ %5798, %after_bb562.us ], [ %5798, %after_bb559.us ], [ %5798, %after_bb556.us ], [ %5798, %after_bb553.us ], [ %5798, %after_bb550.us ], [ %5798, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5860 = phi i8 [ %5788, %true_bb578.us ], [ %5788, %after_bb577.us ], [ %5788, %after_bb574.us ], [ %5788, %after_bb571.us ], [ %5788, %after_bb568.us ], [ %5788, %after_bb565.us ], [ %5788, %after_bb562.us ], [ %5788, %after_bb559.us ], [ %5788, %after_bb556.us ], [ %5788, %after_bb553.us ], [ %5788, %after_bb550.us ], [ %5788, %after_bb547.us ], [ %5788, %after_bb544.us ], [ %5788, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5861 = phi i8 [ %5778, %true_bb578.us ], [ %5778, %after_bb577.us ], [ %5778, %after_bb574.us ], [ %5778, %after_bb571.us ], [ %5778, %after_bb568.us ], [ %5778, %after_bb565.us ], [ %5778, %after_bb562.us ], [ %5778, %after_bb559.us ], [ %5778, %after_bb556.us ], [ %5778, %after_bb553.us ], [ %5778, %after_bb550.us ], [ %5778, %after_bb547.us ], [ %5778, %after_bb544.us ], [ %5778, %after_bb541.us ], [ %5778, %after_bb538.us ], [ %5778, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5862 = phi i8 [ %5768, %true_bb578.us ], [ %5768, %after_bb577.us ], [ %5768, %after_bb574.us ], [ %5768, %after_bb571.us ], [ %5768, %after_bb568.us ], [ %5768, %after_bb565.us ], [ %5768, %after_bb562.us ], [ %5768, %after_bb559.us ], [ %5768, %after_bb556.us ], [ %5768, %after_bb553.us ], [ %5768, %after_bb550.us ], [ %5768, %after_bb547.us ], [ %5768, %after_bb544.us ], [ %5768, %after_bb541.us ], [ %5768, %after_bb538.us ], [ %5768, %after_bb535.us ], [ %5768, %after_bb532.us ], [ %5768, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5863 = phi i8 [ %5758, %true_bb578.us ], [ %5758, %after_bb577.us ], [ %5758, %after_bb574.us ], [ %5758, %after_bb571.us ], [ %5758, %after_bb568.us ], [ %5758, %after_bb565.us ], [ %5758, %after_bb562.us ], [ %5758, %after_bb559.us ], [ %5758, %after_bb556.us ], [ %5758, %after_bb553.us ], [ %5758, %after_bb550.us ], [ %5758, %after_bb547.us ], [ %5758, %after_bb544.us ], [ %5758, %after_bb541.us ], [ %5758, %after_bb538.us ], [ %5758, %after_bb535.us ], [ %5758, %after_bb532.us ], [ %5758, %after_bb529.us ], [ %5758, %after_bb526.us ], [ %5758, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5864 = phi i8 [ %5748, %true_bb578.us ], [ %5748, %after_bb577.us ], [ %5748, %after_bb574.us ], [ %5748, %after_bb571.us ], [ %5748, %after_bb568.us ], [ %5748, %after_bb565.us ], [ %5748, %after_bb562.us ], [ %5748, %after_bb559.us ], [ %5748, %after_bb556.us ], [ %5748, %after_bb553.us ], [ %5748, %after_bb550.us ], [ %5748, %after_bb547.us ], [ %5748, %after_bb544.us ], [ %5748, %after_bb541.us ], [ %5748, %after_bb538.us ], [ %5748, %after_bb535.us ], [ %5748, %after_bb532.us ], [ %5748, %after_bb529.us ], [ %5748, %after_bb526.us ], [ %5748, %after_bb523.us ], [ %5748, %after_bb520.us ], [ %5748, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5865 = phi i8 [ %5738, %true_bb578.us ], [ %5738, %after_bb577.us ], [ %5738, %after_bb574.us ], [ %5738, %after_bb571.us ], [ %5738, %after_bb568.us ], [ %5738, %after_bb565.us ], [ %5738, %after_bb562.us ], [ %5738, %after_bb559.us ], [ %5738, %after_bb556.us ], [ %5738, %after_bb553.us ], [ %5738, %after_bb550.us ], [ %5738, %after_bb547.us ], [ %5738, %after_bb544.us ], [ %5738, %after_bb541.us ], [ %5738, %after_bb538.us ], [ %5738, %after_bb535.us ], [ %5738, %after_bb532.us ], [ %5738, %after_bb529.us ], [ %5738, %after_bb526.us ], [ %5738, %after_bb523.us ], [ %5738, %after_bb520.us ], [ %5738, %after_bb517.us ], [ %5738, %after_bb514.us ], [ %5738, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5866 = phi i8 [ %5728, %true_bb578.us ], [ %5728, %after_bb577.us ], [ %5728, %after_bb574.us ], [ %5728, %after_bb571.us ], [ %5728, %after_bb568.us ], [ %5728, %after_bb565.us ], [ %5728, %after_bb562.us ], [ %5728, %after_bb559.us ], [ %5728, %after_bb556.us ], [ %5728, %after_bb553.us ], [ %5728, %after_bb550.us ], [ %5728, %after_bb547.us ], [ %5728, %after_bb544.us ], [ %5728, %after_bb541.us ], [ %5728, %after_bb538.us ], [ %5728, %after_bb535.us ], [ %5728, %after_bb532.us ], [ %5728, %after_bb529.us ], [ %5728, %after_bb526.us ], [ %5728, %after_bb523.us ], [ %5728, %after_bb520.us ], [ %5728, %after_bb517.us ], [ %5728, %after_bb514.us ], [ %5728, %after_bb511.us ], [ %5728, %after_bb508.us ], [ %5728, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5867 = phi i8 [ %5718, %true_bb578.us ], [ %5718, %after_bb577.us ], [ %5718, %after_bb574.us ], [ %5718, %after_bb571.us ], [ %5718, %after_bb568.us ], [ %5718, %after_bb565.us ], [ %5718, %after_bb562.us ], [ %5718, %after_bb559.us ], [ %5718, %after_bb556.us ], [ %5718, %after_bb553.us ], [ %5718, %after_bb550.us ], [ %5718, %after_bb547.us ], [ %5718, %after_bb544.us ], [ %5718, %after_bb541.us ], [ %5718, %after_bb538.us ], [ %5718, %after_bb535.us ], [ %5718, %after_bb532.us ], [ %5718, %after_bb529.us ], [ %5718, %after_bb526.us ], [ %5718, %after_bb523.us ], [ %5718, %after_bb520.us ], [ %5718, %after_bb517.us ], [ %5718, %after_bb514.us ], [ %5718, %after_bb511.us ], [ %5718, %after_bb508.us ], [ %5718, %after_bb505.us ], [ %5718, %after_bb502.us ], [ %5718, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5868 = phi i8 [ %5708, %true_bb578.us ], [ %5708, %after_bb577.us ], [ %5708, %after_bb574.us ], [ %5708, %after_bb571.us ], [ %5708, %after_bb568.us ], [ %5708, %after_bb565.us ], [ %5708, %after_bb562.us ], [ %5708, %after_bb559.us ], [ %5708, %after_bb556.us ], [ %5708, %after_bb553.us ], [ %5708, %after_bb550.us ], [ %5708, %after_bb547.us ], [ %5708, %after_bb544.us ], [ %5708, %after_bb541.us ], [ %5708, %after_bb538.us ], [ %5708, %after_bb535.us ], [ %5708, %after_bb532.us ], [ %5708, %after_bb529.us ], [ %5708, %after_bb526.us ], [ %5708, %after_bb523.us ], [ %5708, %after_bb520.us ], [ %5708, %after_bb517.us ], [ %5708, %after_bb514.us ], [ %5708, %after_bb511.us ], [ %5708, %after_bb508.us ], [ %5708, %after_bb505.us ], [ %5708, %after_bb502.us ], [ %5708, %after_bb499.us ], [ %5708, %after_bb496.us ], [ %5708, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5869 = phi i8 [ %5698, %true_bb578.us ], [ %5698, %after_bb577.us ], [ %5698, %after_bb574.us ], [ %5698, %after_bb571.us ], [ %5698, %after_bb568.us ], [ %5698, %after_bb565.us ], [ %5698, %after_bb562.us ], [ %5698, %after_bb559.us ], [ %5698, %after_bb556.us ], [ %5698, %after_bb553.us ], [ %5698, %after_bb550.us ], [ %5698, %after_bb547.us ], [ %5698, %after_bb544.us ], [ %5698, %after_bb541.us ], [ %5698, %after_bb538.us ], [ %5698, %after_bb535.us ], [ %5698, %after_bb532.us ], [ %5698, %after_bb529.us ], [ %5698, %after_bb526.us ], [ %5698, %after_bb523.us ], [ %5698, %after_bb520.us ], [ %5698, %after_bb517.us ], [ %5698, %after_bb514.us ], [ %5698, %after_bb511.us ], [ %5698, %after_bb508.us ], [ %5698, %after_bb505.us ], [ %5698, %after_bb502.us ], [ %5698, %after_bb499.us ], [ %5698, %after_bb496.us ], [ %5698, %after_bb493.us ], [ %5698, %after_bb490.us ], [ %5698, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5870 = phi i8 [ %5688, %true_bb578.us ], [ %5688, %after_bb577.us ], [ %5688, %after_bb574.us ], [ %5688, %after_bb571.us ], [ %5688, %after_bb568.us ], [ %5688, %after_bb565.us ], [ %5688, %after_bb562.us ], [ %5688, %after_bb559.us ], [ %5688, %after_bb556.us ], [ %5688, %after_bb553.us ], [ %5688, %after_bb550.us ], [ %5688, %after_bb547.us ], [ %5688, %after_bb544.us ], [ %5688, %after_bb541.us ], [ %5688, %after_bb538.us ], [ %5688, %after_bb535.us ], [ %5688, %after_bb532.us ], [ %5688, %after_bb529.us ], [ %5688, %after_bb526.us ], [ %5688, %after_bb523.us ], [ %5688, %after_bb520.us ], [ %5688, %after_bb517.us ], [ %5688, %after_bb514.us ], [ %5688, %after_bb511.us ], [ %5688, %after_bb508.us ], [ %5688, %after_bb505.us ], [ %5688, %after_bb502.us ], [ %5688, %after_bb499.us ], [ %5688, %after_bb496.us ], [ %5688, %after_bb493.us ], [ %5688, %after_bb490.us ], [ %5688, %after_bb487.us ], [ %5688, %after_bb484.us ], [ %5688, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5871 = phi i8 [ %5678, %true_bb578.us ], [ %5678, %after_bb577.us ], [ %5678, %after_bb574.us ], [ %5678, %after_bb571.us ], [ %5678, %after_bb568.us ], [ %5678, %after_bb565.us ], [ %5678, %after_bb562.us ], [ %5678, %after_bb559.us ], [ %5678, %after_bb556.us ], [ %5678, %after_bb553.us ], [ %5678, %after_bb550.us ], [ %5678, %after_bb547.us ], [ %5678, %after_bb544.us ], [ %5678, %after_bb541.us ], [ %5678, %after_bb538.us ], [ %5678, %after_bb535.us ], [ %5678, %after_bb532.us ], [ %5678, %after_bb529.us ], [ %5678, %after_bb526.us ], [ %5678, %after_bb523.us ], [ %5678, %after_bb520.us ], [ %5678, %after_bb517.us ], [ %5678, %after_bb514.us ], [ %5678, %after_bb511.us ], [ %5678, %after_bb508.us ], [ %5678, %after_bb505.us ], [ %5678, %after_bb502.us ], [ %5678, %after_bb499.us ], [ %5678, %after_bb496.us ], [ %5678, %after_bb493.us ], [ %5678, %after_bb490.us ], [ %5678, %after_bb487.us ], [ %5678, %after_bb484.us ], [ %5678, %after_bb481.us ], [ %5678, %after_bb478.us ], [ %5678, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5872 = phi i8 [ %5668, %true_bb578.us ], [ %5668, %after_bb577.us ], [ %5668, %after_bb574.us ], [ %5668, %after_bb571.us ], [ %5668, %after_bb568.us ], [ %5668, %after_bb565.us ], [ %5668, %after_bb562.us ], [ %5668, %after_bb559.us ], [ %5668, %after_bb556.us ], [ %5668, %after_bb553.us ], [ %5668, %after_bb550.us ], [ %5668, %after_bb547.us ], [ %5668, %after_bb544.us ], [ %5668, %after_bb541.us ], [ %5668, %after_bb538.us ], [ %5668, %after_bb535.us ], [ %5668, %after_bb532.us ], [ %5668, %after_bb529.us ], [ %5668, %after_bb526.us ], [ %5668, %after_bb523.us ], [ %5668, %after_bb520.us ], [ %5668, %after_bb517.us ], [ %5668, %after_bb514.us ], [ %5668, %after_bb511.us ], [ %5668, %after_bb508.us ], [ %5668, %after_bb505.us ], [ %5668, %after_bb502.us ], [ %5668, %after_bb499.us ], [ %5668, %after_bb496.us ], [ %5668, %after_bb493.us ], [ %5668, %after_bb490.us ], [ %5668, %after_bb487.us ], [ %5668, %after_bb484.us ], [ %5668, %after_bb481.us ], [ %5668, %after_bb478.us ], [ %5668, %after_bb475.us ], [ %5668, %after_bb472.us ], [ %5668, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5873 = phi i8 [ %5658, %true_bb578.us ], [ %5658, %after_bb577.us ], [ %5658, %after_bb574.us ], [ %5658, %after_bb571.us ], [ %5658, %after_bb568.us ], [ %5658, %after_bb565.us ], [ %5658, %after_bb562.us ], [ %5658, %after_bb559.us ], [ %5658, %after_bb556.us ], [ %5658, %after_bb553.us ], [ %5658, %after_bb550.us ], [ %5658, %after_bb547.us ], [ %5658, %after_bb544.us ], [ %5658, %after_bb541.us ], [ %5658, %after_bb538.us ], [ %5658, %after_bb535.us ], [ %5658, %after_bb532.us ], [ %5658, %after_bb529.us ], [ %5658, %after_bb526.us ], [ %5658, %after_bb523.us ], [ %5658, %after_bb520.us ], [ %5658, %after_bb517.us ], [ %5658, %after_bb514.us ], [ %5658, %after_bb511.us ], [ %5658, %after_bb508.us ], [ %5658, %after_bb505.us ], [ %5658, %after_bb502.us ], [ %5658, %after_bb499.us ], [ %5658, %after_bb496.us ], [ %5658, %after_bb493.us ], [ %5658, %after_bb490.us ], [ %5658, %after_bb487.us ], [ %5658, %after_bb484.us ], [ %5658, %after_bb481.us ], [ %5658, %after_bb478.us ], [ %5658, %after_bb475.us ], [ %5658, %after_bb472.us ], [ %5658, %after_bb469.us ], [ %5658, %after_bb466.us ], [ %5658, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5874 = phi i8 [ %5648, %true_bb578.us ], [ %5648, %after_bb577.us ], [ %5648, %after_bb574.us ], [ %5648, %after_bb571.us ], [ %5648, %after_bb568.us ], [ %5648, %after_bb565.us ], [ %5648, %after_bb562.us ], [ %5648, %after_bb559.us ], [ %5648, %after_bb556.us ], [ %5648, %after_bb553.us ], [ %5648, %after_bb550.us ], [ %5648, %after_bb547.us ], [ %5648, %after_bb544.us ], [ %5648, %after_bb541.us ], [ %5648, %after_bb538.us ], [ %5648, %after_bb535.us ], [ %5648, %after_bb532.us ], [ %5648, %after_bb529.us ], [ %5648, %after_bb526.us ], [ %5648, %after_bb523.us ], [ %5648, %after_bb520.us ], [ %5648, %after_bb517.us ], [ %5648, %after_bb514.us ], [ %5648, %after_bb511.us ], [ %5648, %after_bb508.us ], [ %5648, %after_bb505.us ], [ %5648, %after_bb502.us ], [ %5648, %after_bb499.us ], [ %5648, %after_bb496.us ], [ %5648, %after_bb493.us ], [ %5648, %after_bb490.us ], [ %5648, %after_bb487.us ], [ %5648, %after_bb484.us ], [ %5648, %after_bb481.us ], [ %5648, %after_bb478.us ], [ %5648, %after_bb475.us ], [ %5648, %after_bb472.us ], [ %5648, %after_bb469.us ], [ %5648, %after_bb466.us ], [ %5648, %after_bb463.us ], [ %5648, %after_bb460.us ], [ %5648, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5875 = phi i8 [ %5638, %true_bb578.us ], [ %5638, %after_bb577.us ], [ %5638, %after_bb574.us ], [ %5638, %after_bb571.us ], [ %5638, %after_bb568.us ], [ %5638, %after_bb565.us ], [ %5638, %after_bb562.us ], [ %5638, %after_bb559.us ], [ %5638, %after_bb556.us ], [ %5638, %after_bb553.us ], [ %5638, %after_bb550.us ], [ %5638, %after_bb547.us ], [ %5638, %after_bb544.us ], [ %5638, %after_bb541.us ], [ %5638, %after_bb538.us ], [ %5638, %after_bb535.us ], [ %5638, %after_bb532.us ], [ %5638, %after_bb529.us ], [ %5638, %after_bb526.us ], [ %5638, %after_bb523.us ], [ %5638, %after_bb520.us ], [ %5638, %after_bb517.us ], [ %5638, %after_bb514.us ], [ %5638, %after_bb511.us ], [ %5638, %after_bb508.us ], [ %5638, %after_bb505.us ], [ %5638, %after_bb502.us ], [ %5638, %after_bb499.us ], [ %5638, %after_bb496.us ], [ %5638, %after_bb493.us ], [ %5638, %after_bb490.us ], [ %5638, %after_bb487.us ], [ %5638, %after_bb484.us ], [ %5638, %after_bb481.us ], [ %5638, %after_bb478.us ], [ %5638, %after_bb475.us ], [ %5638, %after_bb472.us ], [ %5638, %after_bb469.us ], [ %5638, %after_bb466.us ], [ %5638, %after_bb463.us ], [ %5638, %after_bb460.us ], [ %5638, %after_bb457.us ], [ %5638, %after_bb454.us ], [ %5638, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5876 = phi i8 [ %5628, %true_bb578.us ], [ %5628, %after_bb577.us ], [ %5628, %after_bb574.us ], [ %5628, %after_bb571.us ], [ %5628, %after_bb568.us ], [ %5628, %after_bb565.us ], [ %5628, %after_bb562.us ], [ %5628, %after_bb559.us ], [ %5628, %after_bb556.us ], [ %5628, %after_bb553.us ], [ %5628, %after_bb550.us ], [ %5628, %after_bb547.us ], [ %5628, %after_bb544.us ], [ %5628, %after_bb541.us ], [ %5628, %after_bb538.us ], [ %5628, %after_bb535.us ], [ %5628, %after_bb532.us ], [ %5628, %after_bb529.us ], [ %5628, %after_bb526.us ], [ %5628, %after_bb523.us ], [ %5628, %after_bb520.us ], [ %5628, %after_bb517.us ], [ %5628, %after_bb514.us ], [ %5628, %after_bb511.us ], [ %5628, %after_bb508.us ], [ %5628, %after_bb505.us ], [ %5628, %after_bb502.us ], [ %5628, %after_bb499.us ], [ %5628, %after_bb496.us ], [ %5628, %after_bb493.us ], [ %5628, %after_bb490.us ], [ %5628, %after_bb487.us ], [ %5628, %after_bb484.us ], [ %5628, %after_bb481.us ], [ %5628, %after_bb478.us ], [ %5628, %after_bb475.us ], [ %5628, %after_bb472.us ], [ %5628, %after_bb469.us ], [ %5628, %after_bb466.us ], [ %5628, %after_bb463.us ], [ %5628, %after_bb460.us ], [ %5628, %after_bb457.us ], [ %5628, %after_bb454.us ], [ %5628, %after_bb451.us ], [ %5628, %after_bb448.us ], [ %5628, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5877 = phi i8 [ %5618, %true_bb578.us ], [ %5618, %after_bb577.us ], [ %5618, %after_bb574.us ], [ %5618, %after_bb571.us ], [ %5618, %after_bb568.us ], [ %5618, %after_bb565.us ], [ %5618, %after_bb562.us ], [ %5618, %after_bb559.us ], [ %5618, %after_bb556.us ], [ %5618, %after_bb553.us ], [ %5618, %after_bb550.us ], [ %5618, %after_bb547.us ], [ %5618, %after_bb544.us ], [ %5618, %after_bb541.us ], [ %5618, %after_bb538.us ], [ %5618, %after_bb535.us ], [ %5618, %after_bb532.us ], [ %5618, %after_bb529.us ], [ %5618, %after_bb526.us ], [ %5618, %after_bb523.us ], [ %5618, %after_bb520.us ], [ %5618, %after_bb517.us ], [ %5618, %after_bb514.us ], [ %5618, %after_bb511.us ], [ %5618, %after_bb508.us ], [ %5618, %after_bb505.us ], [ %5618, %after_bb502.us ], [ %5618, %after_bb499.us ], [ %5618, %after_bb496.us ], [ %5618, %after_bb493.us ], [ %5618, %after_bb490.us ], [ %5618, %after_bb487.us ], [ %5618, %after_bb484.us ], [ %5618, %after_bb481.us ], [ %5618, %after_bb478.us ], [ %5618, %after_bb475.us ], [ %5618, %after_bb472.us ], [ %5618, %after_bb469.us ], [ %5618, %after_bb466.us ], [ %5618, %after_bb463.us ], [ %5618, %after_bb460.us ], [ %5618, %after_bb457.us ], [ %5618, %after_bb454.us ], [ %5618, %after_bb451.us ], [ %5618, %after_bb448.us ], [ %5618, %after_bb445.us ], [ %5618, %after_bb442.us ], [ %5618, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5878 = phi i8 [ %5608, %true_bb578.us ], [ %5608, %after_bb577.us ], [ %5608, %after_bb574.us ], [ %5608, %after_bb571.us ], [ %5608, %after_bb568.us ], [ %5608, %after_bb565.us ], [ %5608, %after_bb562.us ], [ %5608, %after_bb559.us ], [ %5608, %after_bb556.us ], [ %5608, %after_bb553.us ], [ %5608, %after_bb550.us ], [ %5608, %after_bb547.us ], [ %5608, %after_bb544.us ], [ %5608, %after_bb541.us ], [ %5608, %after_bb538.us ], [ %5608, %after_bb535.us ], [ %5608, %after_bb532.us ], [ %5608, %after_bb529.us ], [ %5608, %after_bb526.us ], [ %5608, %after_bb523.us ], [ %5608, %after_bb520.us ], [ %5608, %after_bb517.us ], [ %5608, %after_bb514.us ], [ %5608, %after_bb511.us ], [ %5608, %after_bb508.us ], [ %5608, %after_bb505.us ], [ %5608, %after_bb502.us ], [ %5608, %after_bb499.us ], [ %5608, %after_bb496.us ], [ %5608, %after_bb493.us ], [ %5608, %after_bb490.us ], [ %5608, %after_bb487.us ], [ %5608, %after_bb484.us ], [ %5608, %after_bb481.us ], [ %5608, %after_bb478.us ], [ %5608, %after_bb475.us ], [ %5608, %after_bb472.us ], [ %5608, %after_bb469.us ], [ %5608, %after_bb466.us ], [ %5608, %after_bb463.us ], [ %5608, %after_bb460.us ], [ %5608, %after_bb457.us ], [ %5608, %after_bb454.us ], [ %5608, %after_bb451.us ], [ %5608, %after_bb448.us ], [ %5608, %after_bb445.us ], [ %5608, %after_bb442.us ], [ %5608, %after_bb439.us ], [ %5608, %after_bb436.us ], [ %5608, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5879 = phi i8 [ %5598, %true_bb578.us ], [ %5598, %after_bb577.us ], [ %5598, %after_bb574.us ], [ %5598, %after_bb571.us ], [ %5598, %after_bb568.us ], [ %5598, %after_bb565.us ], [ %5598, %after_bb562.us ], [ %5598, %after_bb559.us ], [ %5598, %after_bb556.us ], [ %5598, %after_bb553.us ], [ %5598, %after_bb550.us ], [ %5598, %after_bb547.us ], [ %5598, %after_bb544.us ], [ %5598, %after_bb541.us ], [ %5598, %after_bb538.us ], [ %5598, %after_bb535.us ], [ %5598, %after_bb532.us ], [ %5598, %after_bb529.us ], [ %5598, %after_bb526.us ], [ %5598, %after_bb523.us ], [ %5598, %after_bb520.us ], [ %5598, %after_bb517.us ], [ %5598, %after_bb514.us ], [ %5598, %after_bb511.us ], [ %5598, %after_bb508.us ], [ %5598, %after_bb505.us ], [ %5598, %after_bb502.us ], [ %5598, %after_bb499.us ], [ %5598, %after_bb496.us ], [ %5598, %after_bb493.us ], [ %5598, %after_bb490.us ], [ %5598, %after_bb487.us ], [ %5598, %after_bb484.us ], [ %5598, %after_bb481.us ], [ %5598, %after_bb478.us ], [ %5598, %after_bb475.us ], [ %5598, %after_bb472.us ], [ %5598, %after_bb469.us ], [ %5598, %after_bb466.us ], [ %5598, %after_bb463.us ], [ %5598, %after_bb460.us ], [ %5598, %after_bb457.us ], [ %5598, %after_bb454.us ], [ %5598, %after_bb451.us ], [ %5598, %after_bb448.us ], [ %5598, %after_bb445.us ], [ %5598, %after_bb442.us ], [ %5598, %after_bb439.us ], [ %5598, %after_bb436.us ], [ %5598, %after_bb433.us ], [ %5598, %after_bb430.us ], [ %5598, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5880 = phi i8 [ %5588, %true_bb578.us ], [ %5588, %after_bb577.us ], [ %5588, %after_bb574.us ], [ %5588, %after_bb571.us ], [ %5588, %after_bb568.us ], [ %5588, %after_bb565.us ], [ %5588, %after_bb562.us ], [ %5588, %after_bb559.us ], [ %5588, %after_bb556.us ], [ %5588, %after_bb553.us ], [ %5588, %after_bb550.us ], [ %5588, %after_bb547.us ], [ %5588, %after_bb544.us ], [ %5588, %after_bb541.us ], [ %5588, %after_bb538.us ], [ %5588, %after_bb535.us ], [ %5588, %after_bb532.us ], [ %5588, %after_bb529.us ], [ %5588, %after_bb526.us ], [ %5588, %after_bb523.us ], [ %5588, %after_bb520.us ], [ %5588, %after_bb517.us ], [ %5588, %after_bb514.us ], [ %5588, %after_bb511.us ], [ %5588, %after_bb508.us ], [ %5588, %after_bb505.us ], [ %5588, %after_bb502.us ], [ %5588, %after_bb499.us ], [ %5588, %after_bb496.us ], [ %5588, %after_bb493.us ], [ %5588, %after_bb490.us ], [ %5588, %after_bb487.us ], [ %5588, %after_bb484.us ], [ %5588, %after_bb481.us ], [ %5588, %after_bb478.us ], [ %5588, %after_bb475.us ], [ %5588, %after_bb472.us ], [ %5588, %after_bb469.us ], [ %5588, %after_bb466.us ], [ %5588, %after_bb463.us ], [ %5588, %after_bb460.us ], [ %5588, %after_bb457.us ], [ %5588, %after_bb454.us ], [ %5588, %after_bb451.us ], [ %5588, %after_bb448.us ], [ %5588, %after_bb445.us ], [ %5588, %after_bb442.us ], [ %5588, %after_bb439.us ], [ %5588, %after_bb436.us ], [ %5588, %after_bb433.us ], [ %5588, %after_bb430.us ], [ %5588, %after_bb427.us ], [ %5588, %after_bb424.us ], [ %5588, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5881 = phi i8 [ %5578, %true_bb578.us ], [ %5578, %after_bb577.us ], [ %5578, %after_bb574.us ], [ %5578, %after_bb571.us ], [ %5578, %after_bb568.us ], [ %5578, %after_bb565.us ], [ %5578, %after_bb562.us ], [ %5578, %after_bb559.us ], [ %5578, %after_bb556.us ], [ %5578, %after_bb553.us ], [ %5578, %after_bb550.us ], [ %5578, %after_bb547.us ], [ %5578, %after_bb544.us ], [ %5578, %after_bb541.us ], [ %5578, %after_bb538.us ], [ %5578, %after_bb535.us ], [ %5578, %after_bb532.us ], [ %5578, %after_bb529.us ], [ %5578, %after_bb526.us ], [ %5578, %after_bb523.us ], [ %5578, %after_bb520.us ], [ %5578, %after_bb517.us ], [ %5578, %after_bb514.us ], [ %5578, %after_bb511.us ], [ %5578, %after_bb508.us ], [ %5578, %after_bb505.us ], [ %5578, %after_bb502.us ], [ %5578, %after_bb499.us ], [ %5578, %after_bb496.us ], [ %5578, %after_bb493.us ], [ %5578, %after_bb490.us ], [ %5578, %after_bb487.us ], [ %5578, %after_bb484.us ], [ %5578, %after_bb481.us ], [ %5578, %after_bb478.us ], [ %5578, %after_bb475.us ], [ %5578, %after_bb472.us ], [ %5578, %after_bb469.us ], [ %5578, %after_bb466.us ], [ %5578, %after_bb463.us ], [ %5578, %after_bb460.us ], [ %5578, %after_bb457.us ], [ %5578, %after_bb454.us ], [ %5578, %after_bb451.us ], [ %5578, %after_bb448.us ], [ %5578, %after_bb445.us ], [ %5578, %after_bb442.us ], [ %5578, %after_bb439.us ], [ %5578, %after_bb436.us ], [ %5578, %after_bb433.us ], [ %5578, %after_bb430.us ], [ %5578, %after_bb427.us ], [ %5578, %after_bb424.us ], [ %5578, %after_bb421.us ], [ %5578, %after_bb418.us ], [ %5578, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5882 = phi i8 [ %5568, %true_bb578.us ], [ %5568, %after_bb577.us ], [ %5568, %after_bb574.us ], [ %5568, %after_bb571.us ], [ %5568, %after_bb568.us ], [ %5568, %after_bb565.us ], [ %5568, %after_bb562.us ], [ %5568, %after_bb559.us ], [ %5568, %after_bb556.us ], [ %5568, %after_bb553.us ], [ %5568, %after_bb550.us ], [ %5568, %after_bb547.us ], [ %5568, %after_bb544.us ], [ %5568, %after_bb541.us ], [ %5568, %after_bb538.us ], [ %5568, %after_bb535.us ], [ %5568, %after_bb532.us ], [ %5568, %after_bb529.us ], [ %5568, %after_bb526.us ], [ %5568, %after_bb523.us ], [ %5568, %after_bb520.us ], [ %5568, %after_bb517.us ], [ %5568, %after_bb514.us ], [ %5568, %after_bb511.us ], [ %5568, %after_bb508.us ], [ %5568, %after_bb505.us ], [ %5568, %after_bb502.us ], [ %5568, %after_bb499.us ], [ %5568, %after_bb496.us ], [ %5568, %after_bb493.us ], [ %5568, %after_bb490.us ], [ %5568, %after_bb487.us ], [ %5568, %after_bb484.us ], [ %5568, %after_bb481.us ], [ %5568, %after_bb478.us ], [ %5568, %after_bb475.us ], [ %5568, %after_bb472.us ], [ %5568, %after_bb469.us ], [ %5568, %after_bb466.us ], [ %5568, %after_bb463.us ], [ %5568, %after_bb460.us ], [ %5568, %after_bb457.us ], [ %5568, %after_bb454.us ], [ %5568, %after_bb451.us ], [ %5568, %after_bb448.us ], [ %5568, %after_bb445.us ], [ %5568, %after_bb442.us ], [ %5568, %after_bb439.us ], [ %5568, %after_bb436.us ], [ %5568, %after_bb433.us ], [ %5568, %after_bb430.us ], [ %5568, %after_bb427.us ], [ %5568, %after_bb424.us ], [ %5568, %after_bb421.us ], [ %5568, %after_bb418.us ], [ %5568, %after_bb415.us ], [ %5568, %after_bb412.us ], [ %5568, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5883 = phi i8 [ %5558, %true_bb578.us ], [ %5558, %after_bb577.us ], [ %5558, %after_bb574.us ], [ %5558, %after_bb571.us ], [ %5558, %after_bb568.us ], [ %5558, %after_bb565.us ], [ %5558, %after_bb562.us ], [ %5558, %after_bb559.us ], [ %5558, %after_bb556.us ], [ %5558, %after_bb553.us ], [ %5558, %after_bb550.us ], [ %5558, %after_bb547.us ], [ %5558, %after_bb544.us ], [ %5558, %after_bb541.us ], [ %5558, %after_bb538.us ], [ %5558, %after_bb535.us ], [ %5558, %after_bb532.us ], [ %5558, %after_bb529.us ], [ %5558, %after_bb526.us ], [ %5558, %after_bb523.us ], [ %5558, %after_bb520.us ], [ %5558, %after_bb517.us ], [ %5558, %after_bb514.us ], [ %5558, %after_bb511.us ], [ %5558, %after_bb508.us ], [ %5558, %after_bb505.us ], [ %5558, %after_bb502.us ], [ %5558, %after_bb499.us ], [ %5558, %after_bb496.us ], [ %5558, %after_bb493.us ], [ %5558, %after_bb490.us ], [ %5558, %after_bb487.us ], [ %5558, %after_bb484.us ], [ %5558, %after_bb481.us ], [ %5558, %after_bb478.us ], [ %5558, %after_bb475.us ], [ %5558, %after_bb472.us ], [ %5558, %after_bb469.us ], [ %5558, %after_bb466.us ], [ %5558, %after_bb463.us ], [ %5558, %after_bb460.us ], [ %5558, %after_bb457.us ], [ %5558, %after_bb454.us ], [ %5558, %after_bb451.us ], [ %5558, %after_bb448.us ], [ %5558, %after_bb445.us ], [ %5558, %after_bb442.us ], [ %5558, %after_bb439.us ], [ %5558, %after_bb436.us ], [ %5558, %after_bb433.us ], [ %5558, %after_bb430.us ], [ %5558, %after_bb427.us ], [ %5558, %after_bb424.us ], [ %5558, %after_bb421.us ], [ %5558, %after_bb418.us ], [ %5558, %after_bb415.us ], [ %5558, %after_bb412.us ], [ %5558, %after_bb409.us ], [ %5558, %after_bb406.us ], [ %5558, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5884 = phi i8 [ %5548, %true_bb578.us ], [ %5548, %after_bb577.us ], [ %5548, %after_bb574.us ], [ %5548, %after_bb571.us ], [ %5548, %after_bb568.us ], [ %5548, %after_bb565.us ], [ %5548, %after_bb562.us ], [ %5548, %after_bb559.us ], [ %5548, %after_bb556.us ], [ %5548, %after_bb553.us ], [ %5548, %after_bb550.us ], [ %5548, %after_bb547.us ], [ %5548, %after_bb544.us ], [ %5548, %after_bb541.us ], [ %5548, %after_bb538.us ], [ %5548, %after_bb535.us ], [ %5548, %after_bb532.us ], [ %5548, %after_bb529.us ], [ %5548, %after_bb526.us ], [ %5548, %after_bb523.us ], [ %5548, %after_bb520.us ], [ %5548, %after_bb517.us ], [ %5548, %after_bb514.us ], [ %5548, %after_bb511.us ], [ %5548, %after_bb508.us ], [ %5548, %after_bb505.us ], [ %5548, %after_bb502.us ], [ %5548, %after_bb499.us ], [ %5548, %after_bb496.us ], [ %5548, %after_bb493.us ], [ %5548, %after_bb490.us ], [ %5548, %after_bb487.us ], [ %5548, %after_bb484.us ], [ %5548, %after_bb481.us ], [ %5548, %after_bb478.us ], [ %5548, %after_bb475.us ], [ %5548, %after_bb472.us ], [ %5548, %after_bb469.us ], [ %5548, %after_bb466.us ], [ %5548, %after_bb463.us ], [ %5548, %after_bb460.us ], [ %5548, %after_bb457.us ], [ %5548, %after_bb454.us ], [ %5548, %after_bb451.us ], [ %5548, %after_bb448.us ], [ %5548, %after_bb445.us ], [ %5548, %after_bb442.us ], [ %5548, %after_bb439.us ], [ %5548, %after_bb436.us ], [ %5548, %after_bb433.us ], [ %5548, %after_bb430.us ], [ %5548, %after_bb427.us ], [ %5548, %after_bb424.us ], [ %5548, %after_bb421.us ], [ %5548, %after_bb418.us ], [ %5548, %after_bb415.us ], [ %5548, %after_bb412.us ], [ %5548, %after_bb409.us ], [ %5548, %after_bb406.us ], [ %5548, %after_bb403.us ], [ %5548, %after_bb400.us ], [ %5548, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5885 = phi i8 [ %5543, %true_bb578.us ], [ %5543, %after_bb577.us ], [ %5543, %after_bb574.us ], [ %5543, %after_bb571.us ], [ %5543, %after_bb568.us ], [ %5543, %after_bb565.us ], [ %5543, %after_bb562.us ], [ %5543, %after_bb559.us ], [ %5543, %after_bb556.us ], [ %5543, %after_bb553.us ], [ %5543, %after_bb550.us ], [ %5543, %after_bb547.us ], [ %5543, %after_bb544.us ], [ %5543, %after_bb541.us ], [ %5543, %after_bb538.us ], [ %5543, %after_bb535.us ], [ %5543, %after_bb532.us ], [ %5543, %after_bb529.us ], [ %5543, %after_bb526.us ], [ %5543, %after_bb523.us ], [ %5543, %after_bb520.us ], [ %5543, %after_bb517.us ], [ %5543, %after_bb514.us ], [ %5543, %after_bb511.us ], [ %5543, %after_bb508.us ], [ %5543, %after_bb505.us ], [ %5543, %after_bb502.us ], [ %5543, %after_bb499.us ], [ %5543, %after_bb496.us ], [ %5543, %after_bb493.us ], [ %5543, %after_bb490.us ], [ %5543, %after_bb487.us ], [ %5543, %after_bb484.us ], [ %5543, %after_bb481.us ], [ %5543, %after_bb478.us ], [ %5543, %after_bb475.us ], [ %5543, %after_bb472.us ], [ %5543, %after_bb469.us ], [ %5543, %after_bb466.us ], [ %5543, %after_bb463.us ], [ %5543, %after_bb460.us ], [ %5543, %after_bb457.us ], [ %5543, %after_bb454.us ], [ %5543, %after_bb451.us ], [ %5543, %after_bb448.us ], [ %5543, %after_bb445.us ], [ %5543, %after_bb442.us ], [ %5543, %after_bb439.us ], [ %5543, %after_bb436.us ], [ %5543, %after_bb433.us ], [ %5543, %after_bb430.us ], [ %5543, %after_bb427.us ], [ %5543, %after_bb424.us ], [ %5543, %after_bb421.us ], [ %5543, %after_bb418.us ], [ %5543, %after_bb415.us ], [ %5543, %after_bb412.us ], [ %5543, %after_bb409.us ], [ %5543, %after_bb406.us ], [ %5543, %after_bb403.us ], [ %5543, %after_bb400.us ], [ %5543, %after_bb397.us ], [ %5543, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5886 = phi i8 [ %5553, %true_bb578.us ], [ %5553, %after_bb577.us ], [ %5553, %after_bb574.us ], [ %5553, %after_bb571.us ], [ %5553, %after_bb568.us ], [ %5553, %after_bb565.us ], [ %5553, %after_bb562.us ], [ %5553, %after_bb559.us ], [ %5553, %after_bb556.us ], [ %5553, %after_bb553.us ], [ %5553, %after_bb550.us ], [ %5553, %after_bb547.us ], [ %5553, %after_bb544.us ], [ %5553, %after_bb541.us ], [ %5553, %after_bb538.us ], [ %5553, %after_bb535.us ], [ %5553, %after_bb532.us ], [ %5553, %after_bb529.us ], [ %5553, %after_bb526.us ], [ %5553, %after_bb523.us ], [ %5553, %after_bb520.us ], [ %5553, %after_bb517.us ], [ %5553, %after_bb514.us ], [ %5553, %after_bb511.us ], [ %5553, %after_bb508.us ], [ %5553, %after_bb505.us ], [ %5553, %after_bb502.us ], [ %5553, %after_bb499.us ], [ %5553, %after_bb496.us ], [ %5553, %after_bb493.us ], [ %5553, %after_bb490.us ], [ %5553, %after_bb487.us ], [ %5553, %after_bb484.us ], [ %5553, %after_bb481.us ], [ %5553, %after_bb478.us ], [ %5553, %after_bb475.us ], [ %5553, %after_bb472.us ], [ %5553, %after_bb469.us ], [ %5553, %after_bb466.us ], [ %5553, %after_bb463.us ], [ %5553, %after_bb460.us ], [ %5553, %after_bb457.us ], [ %5553, %after_bb454.us ], [ %5553, %after_bb451.us ], [ %5553, %after_bb448.us ], [ %5553, %after_bb445.us ], [ %5553, %after_bb442.us ], [ %5553, %after_bb439.us ], [ %5553, %after_bb436.us ], [ %5553, %after_bb433.us ], [ %5553, %after_bb430.us ], [ %5553, %after_bb427.us ], [ %5553, %after_bb424.us ], [ %5553, %after_bb421.us ], [ %5553, %after_bb418.us ], [ %5553, %after_bb415.us ], [ %5553, %after_bb412.us ], [ %5553, %after_bb409.us ], [ %5553, %after_bb406.us ], [ %5553, %after_bb403.us ], [ %5553, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5887 = phi i8 [ %5563, %true_bb578.us ], [ %5563, %after_bb577.us ], [ %5563, %after_bb574.us ], [ %5563, %after_bb571.us ], [ %5563, %after_bb568.us ], [ %5563, %after_bb565.us ], [ %5563, %after_bb562.us ], [ %5563, %after_bb559.us ], [ %5563, %after_bb556.us ], [ %5563, %after_bb553.us ], [ %5563, %after_bb550.us ], [ %5563, %after_bb547.us ], [ %5563, %after_bb544.us ], [ %5563, %after_bb541.us ], [ %5563, %after_bb538.us ], [ %5563, %after_bb535.us ], [ %5563, %after_bb532.us ], [ %5563, %after_bb529.us ], [ %5563, %after_bb526.us ], [ %5563, %after_bb523.us ], [ %5563, %after_bb520.us ], [ %5563, %after_bb517.us ], [ %5563, %after_bb514.us ], [ %5563, %after_bb511.us ], [ %5563, %after_bb508.us ], [ %5563, %after_bb505.us ], [ %5563, %after_bb502.us ], [ %5563, %after_bb499.us ], [ %5563, %after_bb496.us ], [ %5563, %after_bb493.us ], [ %5563, %after_bb490.us ], [ %5563, %after_bb487.us ], [ %5563, %after_bb484.us ], [ %5563, %after_bb481.us ], [ %5563, %after_bb478.us ], [ %5563, %after_bb475.us ], [ %5563, %after_bb472.us ], [ %5563, %after_bb469.us ], [ %5563, %after_bb466.us ], [ %5563, %after_bb463.us ], [ %5563, %after_bb460.us ], [ %5563, %after_bb457.us ], [ %5563, %after_bb454.us ], [ %5563, %after_bb451.us ], [ %5563, %after_bb448.us ], [ %5563, %after_bb445.us ], [ %5563, %after_bb442.us ], [ %5563, %after_bb439.us ], [ %5563, %after_bb436.us ], [ %5563, %after_bb433.us ], [ %5563, %after_bb430.us ], [ %5563, %after_bb427.us ], [ %5563, %after_bb424.us ], [ %5563, %after_bb421.us ], [ %5563, %after_bb418.us ], [ %5563, %after_bb415.us ], [ %5563, %after_bb412.us ], [ %5563, %after_bb409.us ], [ %5563, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5888 = phi i8 [ %5573, %true_bb578.us ], [ %5573, %after_bb577.us ], [ %5573, %after_bb574.us ], [ %5573, %after_bb571.us ], [ %5573, %after_bb568.us ], [ %5573, %after_bb565.us ], [ %5573, %after_bb562.us ], [ %5573, %after_bb559.us ], [ %5573, %after_bb556.us ], [ %5573, %after_bb553.us ], [ %5573, %after_bb550.us ], [ %5573, %after_bb547.us ], [ %5573, %after_bb544.us ], [ %5573, %after_bb541.us ], [ %5573, %after_bb538.us ], [ %5573, %after_bb535.us ], [ %5573, %after_bb532.us ], [ %5573, %after_bb529.us ], [ %5573, %after_bb526.us ], [ %5573, %after_bb523.us ], [ %5573, %after_bb520.us ], [ %5573, %after_bb517.us ], [ %5573, %after_bb514.us ], [ %5573, %after_bb511.us ], [ %5573, %after_bb508.us ], [ %5573, %after_bb505.us ], [ %5573, %after_bb502.us ], [ %5573, %after_bb499.us ], [ %5573, %after_bb496.us ], [ %5573, %after_bb493.us ], [ %5573, %after_bb490.us ], [ %5573, %after_bb487.us ], [ %5573, %after_bb484.us ], [ %5573, %after_bb481.us ], [ %5573, %after_bb478.us ], [ %5573, %after_bb475.us ], [ %5573, %after_bb472.us ], [ %5573, %after_bb469.us ], [ %5573, %after_bb466.us ], [ %5573, %after_bb463.us ], [ %5573, %after_bb460.us ], [ %5573, %after_bb457.us ], [ %5573, %after_bb454.us ], [ %5573, %after_bb451.us ], [ %5573, %after_bb448.us ], [ %5573, %after_bb445.us ], [ %5573, %after_bb442.us ], [ %5573, %after_bb439.us ], [ %5573, %after_bb436.us ], [ %5573, %after_bb433.us ], [ %5573, %after_bb430.us ], [ %5573, %after_bb427.us ], [ %5573, %after_bb424.us ], [ %5573, %after_bb421.us ], [ %5573, %after_bb418.us ], [ %5573, %after_bb415.us ], [ %5573, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5889 = phi i8 [ %5583, %true_bb578.us ], [ %5583, %after_bb577.us ], [ %5583, %after_bb574.us ], [ %5583, %after_bb571.us ], [ %5583, %after_bb568.us ], [ %5583, %after_bb565.us ], [ %5583, %after_bb562.us ], [ %5583, %after_bb559.us ], [ %5583, %after_bb556.us ], [ %5583, %after_bb553.us ], [ %5583, %after_bb550.us ], [ %5583, %after_bb547.us ], [ %5583, %after_bb544.us ], [ %5583, %after_bb541.us ], [ %5583, %after_bb538.us ], [ %5583, %after_bb535.us ], [ %5583, %after_bb532.us ], [ %5583, %after_bb529.us ], [ %5583, %after_bb526.us ], [ %5583, %after_bb523.us ], [ %5583, %after_bb520.us ], [ %5583, %after_bb517.us ], [ %5583, %after_bb514.us ], [ %5583, %after_bb511.us ], [ %5583, %after_bb508.us ], [ %5583, %after_bb505.us ], [ %5583, %after_bb502.us ], [ %5583, %after_bb499.us ], [ %5583, %after_bb496.us ], [ %5583, %after_bb493.us ], [ %5583, %after_bb490.us ], [ %5583, %after_bb487.us ], [ %5583, %after_bb484.us ], [ %5583, %after_bb481.us ], [ %5583, %after_bb478.us ], [ %5583, %after_bb475.us ], [ %5583, %after_bb472.us ], [ %5583, %after_bb469.us ], [ %5583, %after_bb466.us ], [ %5583, %after_bb463.us ], [ %5583, %after_bb460.us ], [ %5583, %after_bb457.us ], [ %5583, %after_bb454.us ], [ %5583, %after_bb451.us ], [ %5583, %after_bb448.us ], [ %5583, %after_bb445.us ], [ %5583, %after_bb442.us ], [ %5583, %after_bb439.us ], [ %5583, %after_bb436.us ], [ %5583, %after_bb433.us ], [ %5583, %after_bb430.us ], [ %5583, %after_bb427.us ], [ %5583, %after_bb424.us ], [ %5583, %after_bb421.us ], [ %5583, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5890 = phi i8 [ %5593, %true_bb578.us ], [ %5593, %after_bb577.us ], [ %5593, %after_bb574.us ], [ %5593, %after_bb571.us ], [ %5593, %after_bb568.us ], [ %5593, %after_bb565.us ], [ %5593, %after_bb562.us ], [ %5593, %after_bb559.us ], [ %5593, %after_bb556.us ], [ %5593, %after_bb553.us ], [ %5593, %after_bb550.us ], [ %5593, %after_bb547.us ], [ %5593, %after_bb544.us ], [ %5593, %after_bb541.us ], [ %5593, %after_bb538.us ], [ %5593, %after_bb535.us ], [ %5593, %after_bb532.us ], [ %5593, %after_bb529.us ], [ %5593, %after_bb526.us ], [ %5593, %after_bb523.us ], [ %5593, %after_bb520.us ], [ %5593, %after_bb517.us ], [ %5593, %after_bb514.us ], [ %5593, %after_bb511.us ], [ %5593, %after_bb508.us ], [ %5593, %after_bb505.us ], [ %5593, %after_bb502.us ], [ %5593, %after_bb499.us ], [ %5593, %after_bb496.us ], [ %5593, %after_bb493.us ], [ %5593, %after_bb490.us ], [ %5593, %after_bb487.us ], [ %5593, %after_bb484.us ], [ %5593, %after_bb481.us ], [ %5593, %after_bb478.us ], [ %5593, %after_bb475.us ], [ %5593, %after_bb472.us ], [ %5593, %after_bb469.us ], [ %5593, %after_bb466.us ], [ %5593, %after_bb463.us ], [ %5593, %after_bb460.us ], [ %5593, %after_bb457.us ], [ %5593, %after_bb454.us ], [ %5593, %after_bb451.us ], [ %5593, %after_bb448.us ], [ %5593, %after_bb445.us ], [ %5593, %after_bb442.us ], [ %5593, %after_bb439.us ], [ %5593, %after_bb436.us ], [ %5593, %after_bb433.us ], [ %5593, %after_bb430.us ], [ %5593, %after_bb427.us ], [ %5593, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5891 = phi i8 [ %5603, %true_bb578.us ], [ %5603, %after_bb577.us ], [ %5603, %after_bb574.us ], [ %5603, %after_bb571.us ], [ %5603, %after_bb568.us ], [ %5603, %after_bb565.us ], [ %5603, %after_bb562.us ], [ %5603, %after_bb559.us ], [ %5603, %after_bb556.us ], [ %5603, %after_bb553.us ], [ %5603, %after_bb550.us ], [ %5603, %after_bb547.us ], [ %5603, %after_bb544.us ], [ %5603, %after_bb541.us ], [ %5603, %after_bb538.us ], [ %5603, %after_bb535.us ], [ %5603, %after_bb532.us ], [ %5603, %after_bb529.us ], [ %5603, %after_bb526.us ], [ %5603, %after_bb523.us ], [ %5603, %after_bb520.us ], [ %5603, %after_bb517.us ], [ %5603, %after_bb514.us ], [ %5603, %after_bb511.us ], [ %5603, %after_bb508.us ], [ %5603, %after_bb505.us ], [ %5603, %after_bb502.us ], [ %5603, %after_bb499.us ], [ %5603, %after_bb496.us ], [ %5603, %after_bb493.us ], [ %5603, %after_bb490.us ], [ %5603, %after_bb487.us ], [ %5603, %after_bb484.us ], [ %5603, %after_bb481.us ], [ %5603, %after_bb478.us ], [ %5603, %after_bb475.us ], [ %5603, %after_bb472.us ], [ %5603, %after_bb469.us ], [ %5603, %after_bb466.us ], [ %5603, %after_bb463.us ], [ %5603, %after_bb460.us ], [ %5603, %after_bb457.us ], [ %5603, %after_bb454.us ], [ %5603, %after_bb451.us ], [ %5603, %after_bb448.us ], [ %5603, %after_bb445.us ], [ %5603, %after_bb442.us ], [ %5603, %after_bb439.us ], [ %5603, %after_bb436.us ], [ %5603, %after_bb433.us ], [ %5603, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5892 = phi i8 [ %5613, %true_bb578.us ], [ %5613, %after_bb577.us ], [ %5613, %after_bb574.us ], [ %5613, %after_bb571.us ], [ %5613, %after_bb568.us ], [ %5613, %after_bb565.us ], [ %5613, %after_bb562.us ], [ %5613, %after_bb559.us ], [ %5613, %after_bb556.us ], [ %5613, %after_bb553.us ], [ %5613, %after_bb550.us ], [ %5613, %after_bb547.us ], [ %5613, %after_bb544.us ], [ %5613, %after_bb541.us ], [ %5613, %after_bb538.us ], [ %5613, %after_bb535.us ], [ %5613, %after_bb532.us ], [ %5613, %after_bb529.us ], [ %5613, %after_bb526.us ], [ %5613, %after_bb523.us ], [ %5613, %after_bb520.us ], [ %5613, %after_bb517.us ], [ %5613, %after_bb514.us ], [ %5613, %after_bb511.us ], [ %5613, %after_bb508.us ], [ %5613, %after_bb505.us ], [ %5613, %after_bb502.us ], [ %5613, %after_bb499.us ], [ %5613, %after_bb496.us ], [ %5613, %after_bb493.us ], [ %5613, %after_bb490.us ], [ %5613, %after_bb487.us ], [ %5613, %after_bb484.us ], [ %5613, %after_bb481.us ], [ %5613, %after_bb478.us ], [ %5613, %after_bb475.us ], [ %5613, %after_bb472.us ], [ %5613, %after_bb469.us ], [ %5613, %after_bb466.us ], [ %5613, %after_bb463.us ], [ %5613, %after_bb460.us ], [ %5613, %after_bb457.us ], [ %5613, %after_bb454.us ], [ %5613, %after_bb451.us ], [ %5613, %after_bb448.us ], [ %5613, %after_bb445.us ], [ %5613, %after_bb442.us ], [ %5613, %after_bb439.us ], [ %5613, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5893 = phi i8 [ %5623, %true_bb578.us ], [ %5623, %after_bb577.us ], [ %5623, %after_bb574.us ], [ %5623, %after_bb571.us ], [ %5623, %after_bb568.us ], [ %5623, %after_bb565.us ], [ %5623, %after_bb562.us ], [ %5623, %after_bb559.us ], [ %5623, %after_bb556.us ], [ %5623, %after_bb553.us ], [ %5623, %after_bb550.us ], [ %5623, %after_bb547.us ], [ %5623, %after_bb544.us ], [ %5623, %after_bb541.us ], [ %5623, %after_bb538.us ], [ %5623, %after_bb535.us ], [ %5623, %after_bb532.us ], [ %5623, %after_bb529.us ], [ %5623, %after_bb526.us ], [ %5623, %after_bb523.us ], [ %5623, %after_bb520.us ], [ %5623, %after_bb517.us ], [ %5623, %after_bb514.us ], [ %5623, %after_bb511.us ], [ %5623, %after_bb508.us ], [ %5623, %after_bb505.us ], [ %5623, %after_bb502.us ], [ %5623, %after_bb499.us ], [ %5623, %after_bb496.us ], [ %5623, %after_bb493.us ], [ %5623, %after_bb490.us ], [ %5623, %after_bb487.us ], [ %5623, %after_bb484.us ], [ %5623, %after_bb481.us ], [ %5623, %after_bb478.us ], [ %5623, %after_bb475.us ], [ %5623, %after_bb472.us ], [ %5623, %after_bb469.us ], [ %5623, %after_bb466.us ], [ %5623, %after_bb463.us ], [ %5623, %after_bb460.us ], [ %5623, %after_bb457.us ], [ %5623, %after_bb454.us ], [ %5623, %after_bb451.us ], [ %5623, %after_bb448.us ], [ %5623, %after_bb445.us ], [ %5623, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5894 = phi i8 [ %5633, %true_bb578.us ], [ %5633, %after_bb577.us ], [ %5633, %after_bb574.us ], [ %5633, %after_bb571.us ], [ %5633, %after_bb568.us ], [ %5633, %after_bb565.us ], [ %5633, %after_bb562.us ], [ %5633, %after_bb559.us ], [ %5633, %after_bb556.us ], [ %5633, %after_bb553.us ], [ %5633, %after_bb550.us ], [ %5633, %after_bb547.us ], [ %5633, %after_bb544.us ], [ %5633, %after_bb541.us ], [ %5633, %after_bb538.us ], [ %5633, %after_bb535.us ], [ %5633, %after_bb532.us ], [ %5633, %after_bb529.us ], [ %5633, %after_bb526.us ], [ %5633, %after_bb523.us ], [ %5633, %after_bb520.us ], [ %5633, %after_bb517.us ], [ %5633, %after_bb514.us ], [ %5633, %after_bb511.us ], [ %5633, %after_bb508.us ], [ %5633, %after_bb505.us ], [ %5633, %after_bb502.us ], [ %5633, %after_bb499.us ], [ %5633, %after_bb496.us ], [ %5633, %after_bb493.us ], [ %5633, %after_bb490.us ], [ %5633, %after_bb487.us ], [ %5633, %after_bb484.us ], [ %5633, %after_bb481.us ], [ %5633, %after_bb478.us ], [ %5633, %after_bb475.us ], [ %5633, %after_bb472.us ], [ %5633, %after_bb469.us ], [ %5633, %after_bb466.us ], [ %5633, %after_bb463.us ], [ %5633, %after_bb460.us ], [ %5633, %after_bb457.us ], [ %5633, %after_bb454.us ], [ %5633, %after_bb451.us ], [ %5633, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5895 = phi i8 [ %5643, %true_bb578.us ], [ %5643, %after_bb577.us ], [ %5643, %after_bb574.us ], [ %5643, %after_bb571.us ], [ %5643, %after_bb568.us ], [ %5643, %after_bb565.us ], [ %5643, %after_bb562.us ], [ %5643, %after_bb559.us ], [ %5643, %after_bb556.us ], [ %5643, %after_bb553.us ], [ %5643, %after_bb550.us ], [ %5643, %after_bb547.us ], [ %5643, %after_bb544.us ], [ %5643, %after_bb541.us ], [ %5643, %after_bb538.us ], [ %5643, %after_bb535.us ], [ %5643, %after_bb532.us ], [ %5643, %after_bb529.us ], [ %5643, %after_bb526.us ], [ %5643, %after_bb523.us ], [ %5643, %after_bb520.us ], [ %5643, %after_bb517.us ], [ %5643, %after_bb514.us ], [ %5643, %after_bb511.us ], [ %5643, %after_bb508.us ], [ %5643, %after_bb505.us ], [ %5643, %after_bb502.us ], [ %5643, %after_bb499.us ], [ %5643, %after_bb496.us ], [ %5643, %after_bb493.us ], [ %5643, %after_bb490.us ], [ %5643, %after_bb487.us ], [ %5643, %after_bb484.us ], [ %5643, %after_bb481.us ], [ %5643, %after_bb478.us ], [ %5643, %after_bb475.us ], [ %5643, %after_bb472.us ], [ %5643, %after_bb469.us ], [ %5643, %after_bb466.us ], [ %5643, %after_bb463.us ], [ %5643, %after_bb460.us ], [ %5643, %after_bb457.us ], [ %5643, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5896 = phi i8 [ %5653, %true_bb578.us ], [ %5653, %after_bb577.us ], [ %5653, %after_bb574.us ], [ %5653, %after_bb571.us ], [ %5653, %after_bb568.us ], [ %5653, %after_bb565.us ], [ %5653, %after_bb562.us ], [ %5653, %after_bb559.us ], [ %5653, %after_bb556.us ], [ %5653, %after_bb553.us ], [ %5653, %after_bb550.us ], [ %5653, %after_bb547.us ], [ %5653, %after_bb544.us ], [ %5653, %after_bb541.us ], [ %5653, %after_bb538.us ], [ %5653, %after_bb535.us ], [ %5653, %after_bb532.us ], [ %5653, %after_bb529.us ], [ %5653, %after_bb526.us ], [ %5653, %after_bb523.us ], [ %5653, %after_bb520.us ], [ %5653, %after_bb517.us ], [ %5653, %after_bb514.us ], [ %5653, %after_bb511.us ], [ %5653, %after_bb508.us ], [ %5653, %after_bb505.us ], [ %5653, %after_bb502.us ], [ %5653, %after_bb499.us ], [ %5653, %after_bb496.us ], [ %5653, %after_bb493.us ], [ %5653, %after_bb490.us ], [ %5653, %after_bb487.us ], [ %5653, %after_bb484.us ], [ %5653, %after_bb481.us ], [ %5653, %after_bb478.us ], [ %5653, %after_bb475.us ], [ %5653, %after_bb472.us ], [ %5653, %after_bb469.us ], [ %5653, %after_bb466.us ], [ %5653, %after_bb463.us ], [ %5653, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5897 = phi i8 [ %5663, %true_bb578.us ], [ %5663, %after_bb577.us ], [ %5663, %after_bb574.us ], [ %5663, %after_bb571.us ], [ %5663, %after_bb568.us ], [ %5663, %after_bb565.us ], [ %5663, %after_bb562.us ], [ %5663, %after_bb559.us ], [ %5663, %after_bb556.us ], [ %5663, %after_bb553.us ], [ %5663, %after_bb550.us ], [ %5663, %after_bb547.us ], [ %5663, %after_bb544.us ], [ %5663, %after_bb541.us ], [ %5663, %after_bb538.us ], [ %5663, %after_bb535.us ], [ %5663, %after_bb532.us ], [ %5663, %after_bb529.us ], [ %5663, %after_bb526.us ], [ %5663, %after_bb523.us ], [ %5663, %after_bb520.us ], [ %5663, %after_bb517.us ], [ %5663, %after_bb514.us ], [ %5663, %after_bb511.us ], [ %5663, %after_bb508.us ], [ %5663, %after_bb505.us ], [ %5663, %after_bb502.us ], [ %5663, %after_bb499.us ], [ %5663, %after_bb496.us ], [ %5663, %after_bb493.us ], [ %5663, %after_bb490.us ], [ %5663, %after_bb487.us ], [ %5663, %after_bb484.us ], [ %5663, %after_bb481.us ], [ %5663, %after_bb478.us ], [ %5663, %after_bb475.us ], [ %5663, %after_bb472.us ], [ %5663, %after_bb469.us ], [ %5663, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5898 = phi i8 [ %5673, %true_bb578.us ], [ %5673, %after_bb577.us ], [ %5673, %after_bb574.us ], [ %5673, %after_bb571.us ], [ %5673, %after_bb568.us ], [ %5673, %after_bb565.us ], [ %5673, %after_bb562.us ], [ %5673, %after_bb559.us ], [ %5673, %after_bb556.us ], [ %5673, %after_bb553.us ], [ %5673, %after_bb550.us ], [ %5673, %after_bb547.us ], [ %5673, %after_bb544.us ], [ %5673, %after_bb541.us ], [ %5673, %after_bb538.us ], [ %5673, %after_bb535.us ], [ %5673, %after_bb532.us ], [ %5673, %after_bb529.us ], [ %5673, %after_bb526.us ], [ %5673, %after_bb523.us ], [ %5673, %after_bb520.us ], [ %5673, %after_bb517.us ], [ %5673, %after_bb514.us ], [ %5673, %after_bb511.us ], [ %5673, %after_bb508.us ], [ %5673, %after_bb505.us ], [ %5673, %after_bb502.us ], [ %5673, %after_bb499.us ], [ %5673, %after_bb496.us ], [ %5673, %after_bb493.us ], [ %5673, %after_bb490.us ], [ %5673, %after_bb487.us ], [ %5673, %after_bb484.us ], [ %5673, %after_bb481.us ], [ %5673, %after_bb478.us ], [ %5673, %after_bb475.us ], [ %5673, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5899 = phi i8 [ %5683, %true_bb578.us ], [ %5683, %after_bb577.us ], [ %5683, %after_bb574.us ], [ %5683, %after_bb571.us ], [ %5683, %after_bb568.us ], [ %5683, %after_bb565.us ], [ %5683, %after_bb562.us ], [ %5683, %after_bb559.us ], [ %5683, %after_bb556.us ], [ %5683, %after_bb553.us ], [ %5683, %after_bb550.us ], [ %5683, %after_bb547.us ], [ %5683, %after_bb544.us ], [ %5683, %after_bb541.us ], [ %5683, %after_bb538.us ], [ %5683, %after_bb535.us ], [ %5683, %after_bb532.us ], [ %5683, %after_bb529.us ], [ %5683, %after_bb526.us ], [ %5683, %after_bb523.us ], [ %5683, %after_bb520.us ], [ %5683, %after_bb517.us ], [ %5683, %after_bb514.us ], [ %5683, %after_bb511.us ], [ %5683, %after_bb508.us ], [ %5683, %after_bb505.us ], [ %5683, %after_bb502.us ], [ %5683, %after_bb499.us ], [ %5683, %after_bb496.us ], [ %5683, %after_bb493.us ], [ %5683, %after_bb490.us ], [ %5683, %after_bb487.us ], [ %5683, %after_bb484.us ], [ %5683, %after_bb481.us ], [ %5683, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5900 = phi i8 [ %5693, %true_bb578.us ], [ %5693, %after_bb577.us ], [ %5693, %after_bb574.us ], [ %5693, %after_bb571.us ], [ %5693, %after_bb568.us ], [ %5693, %after_bb565.us ], [ %5693, %after_bb562.us ], [ %5693, %after_bb559.us ], [ %5693, %after_bb556.us ], [ %5693, %after_bb553.us ], [ %5693, %after_bb550.us ], [ %5693, %after_bb547.us ], [ %5693, %after_bb544.us ], [ %5693, %after_bb541.us ], [ %5693, %after_bb538.us ], [ %5693, %after_bb535.us ], [ %5693, %after_bb532.us ], [ %5693, %after_bb529.us ], [ %5693, %after_bb526.us ], [ %5693, %after_bb523.us ], [ %5693, %after_bb520.us ], [ %5693, %after_bb517.us ], [ %5693, %after_bb514.us ], [ %5693, %after_bb511.us ], [ %5693, %after_bb508.us ], [ %5693, %after_bb505.us ], [ %5693, %after_bb502.us ], [ %5693, %after_bb499.us ], [ %5693, %after_bb496.us ], [ %5693, %after_bb493.us ], [ %5693, %after_bb490.us ], [ %5693, %after_bb487.us ], [ %5693, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5901 = phi i8 [ %5703, %true_bb578.us ], [ %5703, %after_bb577.us ], [ %5703, %after_bb574.us ], [ %5703, %after_bb571.us ], [ %5703, %after_bb568.us ], [ %5703, %after_bb565.us ], [ %5703, %after_bb562.us ], [ %5703, %after_bb559.us ], [ %5703, %after_bb556.us ], [ %5703, %after_bb553.us ], [ %5703, %after_bb550.us ], [ %5703, %after_bb547.us ], [ %5703, %after_bb544.us ], [ %5703, %after_bb541.us ], [ %5703, %after_bb538.us ], [ %5703, %after_bb535.us ], [ %5703, %after_bb532.us ], [ %5703, %after_bb529.us ], [ %5703, %after_bb526.us ], [ %5703, %after_bb523.us ], [ %5703, %after_bb520.us ], [ %5703, %after_bb517.us ], [ %5703, %after_bb514.us ], [ %5703, %after_bb511.us ], [ %5703, %after_bb508.us ], [ %5703, %after_bb505.us ], [ %5703, %after_bb502.us ], [ %5703, %after_bb499.us ], [ %5703, %after_bb496.us ], [ %5703, %after_bb493.us ], [ %5703, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5902 = phi i8 [ %5713, %true_bb578.us ], [ %5713, %after_bb577.us ], [ %5713, %after_bb574.us ], [ %5713, %after_bb571.us ], [ %5713, %after_bb568.us ], [ %5713, %after_bb565.us ], [ %5713, %after_bb562.us ], [ %5713, %after_bb559.us ], [ %5713, %after_bb556.us ], [ %5713, %after_bb553.us ], [ %5713, %after_bb550.us ], [ %5713, %after_bb547.us ], [ %5713, %after_bb544.us ], [ %5713, %after_bb541.us ], [ %5713, %after_bb538.us ], [ %5713, %after_bb535.us ], [ %5713, %after_bb532.us ], [ %5713, %after_bb529.us ], [ %5713, %after_bb526.us ], [ %5713, %after_bb523.us ], [ %5713, %after_bb520.us ], [ %5713, %after_bb517.us ], [ %5713, %after_bb514.us ], [ %5713, %after_bb511.us ], [ %5713, %after_bb508.us ], [ %5713, %after_bb505.us ], [ %5713, %after_bb502.us ], [ %5713, %after_bb499.us ], [ %5713, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5903 = phi i8 [ %5723, %true_bb578.us ], [ %5723, %after_bb577.us ], [ %5723, %after_bb574.us ], [ %5723, %after_bb571.us ], [ %5723, %after_bb568.us ], [ %5723, %after_bb565.us ], [ %5723, %after_bb562.us ], [ %5723, %after_bb559.us ], [ %5723, %after_bb556.us ], [ %5723, %after_bb553.us ], [ %5723, %after_bb550.us ], [ %5723, %after_bb547.us ], [ %5723, %after_bb544.us ], [ %5723, %after_bb541.us ], [ %5723, %after_bb538.us ], [ %5723, %after_bb535.us ], [ %5723, %after_bb532.us ], [ %5723, %after_bb529.us ], [ %5723, %after_bb526.us ], [ %5723, %after_bb523.us ], [ %5723, %after_bb520.us ], [ %5723, %after_bb517.us ], [ %5723, %after_bb514.us ], [ %5723, %after_bb511.us ], [ %5723, %after_bb508.us ], [ %5723, %after_bb505.us ], [ %5723, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5904 = phi i8 [ %5733, %true_bb578.us ], [ %5733, %after_bb577.us ], [ %5733, %after_bb574.us ], [ %5733, %after_bb571.us ], [ %5733, %after_bb568.us ], [ %5733, %after_bb565.us ], [ %5733, %after_bb562.us ], [ %5733, %after_bb559.us ], [ %5733, %after_bb556.us ], [ %5733, %after_bb553.us ], [ %5733, %after_bb550.us ], [ %5733, %after_bb547.us ], [ %5733, %after_bb544.us ], [ %5733, %after_bb541.us ], [ %5733, %after_bb538.us ], [ %5733, %after_bb535.us ], [ %5733, %after_bb532.us ], [ %5733, %after_bb529.us ], [ %5733, %after_bb526.us ], [ %5733, %after_bb523.us ], [ %5733, %after_bb520.us ], [ %5733, %after_bb517.us ], [ %5733, %after_bb514.us ], [ %5733, %after_bb511.us ], [ %5733, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5905 = phi i8 [ %5743, %true_bb578.us ], [ %5743, %after_bb577.us ], [ %5743, %after_bb574.us ], [ %5743, %after_bb571.us ], [ %5743, %after_bb568.us ], [ %5743, %after_bb565.us ], [ %5743, %after_bb562.us ], [ %5743, %after_bb559.us ], [ %5743, %after_bb556.us ], [ %5743, %after_bb553.us ], [ %5743, %after_bb550.us ], [ %5743, %after_bb547.us ], [ %5743, %after_bb544.us ], [ %5743, %after_bb541.us ], [ %5743, %after_bb538.us ], [ %5743, %after_bb535.us ], [ %5743, %after_bb532.us ], [ %5743, %after_bb529.us ], [ %5743, %after_bb526.us ], [ %5743, %after_bb523.us ], [ %5743, %after_bb520.us ], [ %5743, %after_bb517.us ], [ %5743, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5906 = phi i8 [ %5753, %true_bb578.us ], [ %5753, %after_bb577.us ], [ %5753, %after_bb574.us ], [ %5753, %after_bb571.us ], [ %5753, %after_bb568.us ], [ %5753, %after_bb565.us ], [ %5753, %after_bb562.us ], [ %5753, %after_bb559.us ], [ %5753, %after_bb556.us ], [ %5753, %after_bb553.us ], [ %5753, %after_bb550.us ], [ %5753, %after_bb547.us ], [ %5753, %after_bb544.us ], [ %5753, %after_bb541.us ], [ %5753, %after_bb538.us ], [ %5753, %after_bb535.us ], [ %5753, %after_bb532.us ], [ %5753, %after_bb529.us ], [ %5753, %after_bb526.us ], [ %5753, %after_bb523.us ], [ %5753, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5907 = phi i8 [ %5763, %true_bb578.us ], [ %5763, %after_bb577.us ], [ %5763, %after_bb574.us ], [ %5763, %after_bb571.us ], [ %5763, %after_bb568.us ], [ %5763, %after_bb565.us ], [ %5763, %after_bb562.us ], [ %5763, %after_bb559.us ], [ %5763, %after_bb556.us ], [ %5763, %after_bb553.us ], [ %5763, %after_bb550.us ], [ %5763, %after_bb547.us ], [ %5763, %after_bb544.us ], [ %5763, %after_bb541.us ], [ %5763, %after_bb538.us ], [ %5763, %after_bb535.us ], [ %5763, %after_bb532.us ], [ %5763, %after_bb529.us ], [ %5763, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5908 = phi i8 [ %5773, %true_bb578.us ], [ %5773, %after_bb577.us ], [ %5773, %after_bb574.us ], [ %5773, %after_bb571.us ], [ %5773, %after_bb568.us ], [ %5773, %after_bb565.us ], [ %5773, %after_bb562.us ], [ %5773, %after_bb559.us ], [ %5773, %after_bb556.us ], [ %5773, %after_bb553.us ], [ %5773, %after_bb550.us ], [ %5773, %after_bb547.us ], [ %5773, %after_bb544.us ], [ %5773, %after_bb541.us ], [ %5773, %after_bb538.us ], [ %5773, %after_bb535.us ], [ %5773, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5909 = phi i8 [ %5783, %true_bb578.us ], [ %5783, %after_bb577.us ], [ %5783, %after_bb574.us ], [ %5783, %after_bb571.us ], [ %5783, %after_bb568.us ], [ %5783, %after_bb565.us ], [ %5783, %after_bb562.us ], [ %5783, %after_bb559.us ], [ %5783, %after_bb556.us ], [ %5783, %after_bb553.us ], [ %5783, %after_bb550.us ], [ %5783, %after_bb547.us ], [ %5783, %after_bb544.us ], [ %5783, %after_bb541.us ], [ %5783, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5910 = phi i8 [ %5793, %true_bb578.us ], [ %5793, %after_bb577.us ], [ %5793, %after_bb574.us ], [ %5793, %after_bb571.us ], [ %5793, %after_bb568.us ], [ %5793, %after_bb565.us ], [ %5793, %after_bb562.us ], [ %5793, %after_bb559.us ], [ %5793, %after_bb556.us ], [ %5793, %after_bb553.us ], [ %5793, %after_bb550.us ], [ %5793, %after_bb547.us ], [ %5793, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5911 = phi i8 [ %5803, %true_bb578.us ], [ %5803, %after_bb577.us ], [ %5803, %after_bb574.us ], [ %5803, %after_bb571.us ], [ %5803, %after_bb568.us ], [ %5803, %after_bb565.us ], [ %5803, %after_bb562.us ], [ %5803, %after_bb559.us ], [ %5803, %after_bb556.us ], [ %5803, %after_bb553.us ], [ %5803, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5912 = phi i8 [ %5813, %true_bb578.us ], [ %5813, %after_bb577.us ], [ %5813, %after_bb574.us ], [ %5813, %after_bb571.us ], [ %5813, %after_bb568.us ], [ %5813, %after_bb565.us ], [ %5813, %after_bb562.us ], [ %5813, %after_bb559.us ], [ %5813, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5913 = phi i8 [ %5823, %true_bb578.us ], [ %5823, %after_bb577.us ], [ %5823, %after_bb574.us ], [ %5823, %after_bb571.us ], [ %5823, %after_bb568.us ], [ %5823, %after_bb565.us ], [ %5823, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5914 = phi i8 [ %5833, %true_bb578.us ], [ %5833, %after_bb577.us ], [ %5833, %after_bb574.us ], [ %5833, %after_bb571.us ], [ %5833, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5915 = phi i8 [ %5843, %true_bb578.us ], [ %5843, %after_bb577.us ], [ %5843, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5916 = phi i8 [ %5853, %true_bb578.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ]
  %5917 = insertelement <128 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %5162, i32 0
  %5918 = insertelement <128 x i8> %5917, i8 %5501, i32 1
  %5919 = insertelement <128 x i8> %5918, i8 %5502, i32 2
  %5920 = insertelement <128 x i8> %5919, i8 %5500, i32 3
  %5921 = insertelement <128 x i8> %5920, i8 %5503, i32 4
  %5922 = insertelement <128 x i8> %5921, i8 %5499, i32 5
  %5923 = insertelement <128 x i8> %5922, i8 %5504, i32 6
  %5924 = insertelement <128 x i8> %5923, i8 %5498, i32 7
  %5925 = insertelement <128 x i8> %5924, i8 %5505, i32 8
  %5926 = insertelement <128 x i8> %5925, i8 %5497, i32 9
  %5927 = insertelement <128 x i8> %5926, i8 %5506, i32 10
  %5928 = insertelement <128 x i8> %5927, i8 %5496, i32 11
  %5929 = insertelement <128 x i8> %5928, i8 %5507, i32 12
  %5930 = insertelement <128 x i8> %5929, i8 %5495, i32 13
  %5931 = insertelement <128 x i8> %5930, i8 %5508, i32 14
  %5932 = insertelement <128 x i8> %5931, i8 %5494, i32 15
  %5933 = insertelement <128 x i8> %5932, i8 %5509, i32 16
  %5934 = insertelement <128 x i8> %5933, i8 %5493, i32 17
  %5935 = insertelement <128 x i8> %5934, i8 %5510, i32 18
  %5936 = insertelement <128 x i8> %5935, i8 %5492, i32 19
  %5937 = insertelement <128 x i8> %5936, i8 %5511, i32 20
  %5938 = insertelement <128 x i8> %5937, i8 %5491, i32 21
  %5939 = insertelement <128 x i8> %5938, i8 %5512, i32 22
  %5940 = insertelement <128 x i8> %5939, i8 %5490, i32 23
  %5941 = insertelement <128 x i8> %5940, i8 %5513, i32 24
  %5942 = insertelement <128 x i8> %5941, i8 %5489, i32 25
  %5943 = insertelement <128 x i8> %5942, i8 %5514, i32 26
  %5944 = insertelement <128 x i8> %5943, i8 %5488, i32 27
  %5945 = insertelement <128 x i8> %5944, i8 %5515, i32 28
  %5946 = insertelement <128 x i8> %5945, i8 %5487, i32 29
  %5947 = insertelement <128 x i8> %5946, i8 %5516, i32 30
  %5948 = insertelement <128 x i8> %5947, i8 %5486, i32 31
  %5949 = insertelement <128 x i8> %5948, i8 %5517, i32 32
  %5950 = insertelement <128 x i8> %5949, i8 %5485, i32 33
  %5951 = insertelement <128 x i8> %5950, i8 %5518, i32 34
  %5952 = insertelement <128 x i8> %5951, i8 %5484, i32 35
  %5953 = insertelement <128 x i8> %5952, i8 %5519, i32 36
  %5954 = insertelement <128 x i8> %5953, i8 %5483, i32 37
  %5955 = insertelement <128 x i8> %5954, i8 %5520, i32 38
  %5956 = insertelement <128 x i8> %5955, i8 %5482, i32 39
  %5957 = insertelement <128 x i8> %5956, i8 %5521, i32 40
  %5958 = insertelement <128 x i8> %5957, i8 %5481, i32 41
  %5959 = insertelement <128 x i8> %5958, i8 %5522, i32 42
  %5960 = insertelement <128 x i8> %5959, i8 %5480, i32 43
  %5961 = insertelement <128 x i8> %5960, i8 %5523, i32 44
  %5962 = insertelement <128 x i8> %5961, i8 %5479, i32 45
  %5963 = insertelement <128 x i8> %5962, i8 %5524, i32 46
  %5964 = insertelement <128 x i8> %5963, i8 %5478, i32 47
  %5965 = insertelement <128 x i8> %5964, i8 %5525, i32 48
  %5966 = insertelement <128 x i8> %5965, i8 %5477, i32 49
  %5967 = insertelement <128 x i8> %5966, i8 %5526, i32 50
  %5968 = insertelement <128 x i8> %5967, i8 %5476, i32 51
  %5969 = insertelement <128 x i8> %5968, i8 %5527, i32 52
  %5970 = insertelement <128 x i8> %5969, i8 %5475, i32 53
  %5971 = insertelement <128 x i8> %5970, i8 %5528, i32 54
  %5972 = insertelement <128 x i8> %5971, i8 %5474, i32 55
  %5973 = insertelement <128 x i8> %5972, i8 %5529, i32 56
  %5974 = insertelement <128 x i8> %5973, i8 %5473, i32 57
  %5975 = insertelement <128 x i8> %5974, i8 %5530, i32 58
  %5976 = insertelement <128 x i8> %5975, i8 %5472, i32 59
  %5977 = insertelement <128 x i8> %5976, i8 %5531, i32 60
  %5978 = insertelement <128 x i8> %5977, i8 %5471, i32 61
  %5979 = insertelement <128 x i8> %5978, i8 %5532, i32 62
  %5980 = insertelement <128 x i8> %5979, i8 %5538, i32 63
  %5981 = insertelement <128 x i8> %5980, i8 %5885, i32 64
  %5982 = insertelement <128 x i8> %5981, i8 %5884, i32 65
  %5983 = insertelement <128 x i8> %5982, i8 %5886, i32 66
  %5984 = insertelement <128 x i8> %5983, i8 %5883, i32 67
  %5985 = insertelement <128 x i8> %5984, i8 %5887, i32 68
  %5986 = insertelement <128 x i8> %5985, i8 %5882, i32 69
  %5987 = insertelement <128 x i8> %5986, i8 %5888, i32 70
  %5988 = insertelement <128 x i8> %5987, i8 %5881, i32 71
  %5989 = insertelement <128 x i8> %5988, i8 %5889, i32 72
  %5990 = insertelement <128 x i8> %5989, i8 %5880, i32 73
  %5991 = insertelement <128 x i8> %5990, i8 %5890, i32 74
  %5992 = insertelement <128 x i8> %5991, i8 %5879, i32 75
  %5993 = insertelement <128 x i8> %5992, i8 %5891, i32 76
  %5994 = insertelement <128 x i8> %5993, i8 %5878, i32 77
  %5995 = insertelement <128 x i8> %5994, i8 %5892, i32 78
  %5996 = insertelement <128 x i8> %5995, i8 %5877, i32 79
  %5997 = insertelement <128 x i8> %5996, i8 %5893, i32 80
  %5998 = insertelement <128 x i8> %5997, i8 %5876, i32 81
  %5999 = insertelement <128 x i8> %5998, i8 %5894, i32 82
  %6000 = insertelement <128 x i8> %5999, i8 %5875, i32 83
  %6001 = insertelement <128 x i8> %6000, i8 %5895, i32 84
  %6002 = insertelement <128 x i8> %6001, i8 %5874, i32 85
  %6003 = insertelement <128 x i8> %6002, i8 %5896, i32 86
  %6004 = insertelement <128 x i8> %6003, i8 %5873, i32 87
  %6005 = insertelement <128 x i8> %6004, i8 %5897, i32 88
  %6006 = insertelement <128 x i8> %6005, i8 %5872, i32 89
  %6007 = insertelement <128 x i8> %6006, i8 %5898, i32 90
  %6008 = insertelement <128 x i8> %6007, i8 %5871, i32 91
  %6009 = insertelement <128 x i8> %6008, i8 %5899, i32 92
  %6010 = insertelement <128 x i8> %6009, i8 %5870, i32 93
  %6011 = insertelement <128 x i8> %6010, i8 %5900, i32 94
  %6012 = insertelement <128 x i8> %6011, i8 %5869, i32 95
  %6013 = insertelement <128 x i8> %6012, i8 %5901, i32 96
  %6014 = insertelement <128 x i8> %6013, i8 %5868, i32 97
  %6015 = insertelement <128 x i8> %6014, i8 %5902, i32 98
  %6016 = insertelement <128 x i8> %6015, i8 %5867, i32 99
  %6017 = insertelement <128 x i8> %6016, i8 %5903, i32 100
  %6018 = insertelement <128 x i8> %6017, i8 %5866, i32 101
  %6019 = insertelement <128 x i8> %6018, i8 %5904, i32 102
  %6020 = insertelement <128 x i8> %6019, i8 %5865, i32 103
  %6021 = insertelement <128 x i8> %6020, i8 %5905, i32 104
  %6022 = insertelement <128 x i8> %6021, i8 %5864, i32 105
  %6023 = insertelement <128 x i8> %6022, i8 %5906, i32 106
  %6024 = insertelement <128 x i8> %6023, i8 %5863, i32 107
  %6025 = insertelement <128 x i8> %6024, i8 %5907, i32 108
  %6026 = insertelement <128 x i8> %6025, i8 %5862, i32 109
  %6027 = insertelement <128 x i8> %6026, i8 %5908, i32 110
  %6028 = insertelement <128 x i8> %6027, i8 %5861, i32 111
  %6029 = insertelement <128 x i8> %6028, i8 %5909, i32 112
  %6030 = insertelement <128 x i8> %6029, i8 %5860, i32 113
  %6031 = insertelement <128 x i8> %6030, i8 %5910, i32 114
  %6032 = insertelement <128 x i8> %6031, i8 %5859, i32 115
  %6033 = insertelement <128 x i8> %6032, i8 %5911, i32 116
  %6034 = insertelement <128 x i8> %6033, i8 %5858, i32 117
  %6035 = insertelement <128 x i8> %6034, i8 %5912, i32 118
  %6036 = insertelement <128 x i8> %6035, i8 %5857, i32 119
  %6037 = insertelement <128 x i8> %6036, i8 %5913, i32 120
  %6038 = insertelement <128 x i8> %6037, i8 %5856, i32 121
  %6039 = insertelement <128 x i8> %6038, i8 %5914, i32 122
  %6040 = insertelement <128 x i8> %6039, i8 %5855, i32 123
  %6041 = insertelement <128 x i8> %6040, i8 %5915, i32 124
  %6042 = insertelement <128 x i8> %6041, i8 %5854, i32 125
  %6043 = insertelement <128 x i8> %6042, i8 %5916, i32 126
  %6044 = add nsw i32 %t2453.us, %resampled_input.s0.x.rebased199.us
  %6045 = shl nsw i32 %6044, 7
  %6046 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6045
  %6047 = bitcast i8* %6046 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %6043, <128 x i8>* %6047, i32 128, <128 x i1> %4669), !tbaa !129
  %6048 = add nuw nsw i32 %resampled_input.s0.x.rebased199.us, 1
  %.not649.us = icmp eq i32 %resampled_input.s0.x.rebased199.us, %t2448
  br i1 %.not649.us, label %"end for resampled_input.s0.x.rebased198.loopexit.us", label %"for resampled_input.s0.x.rebased197.us"

"end for resampled_input.s0.x.rebased198.loopexit.us": ; preds = %after_bb583.us
  %6049 = add nuw nsw i32 %resampled_input.s0.y.rebased196.us, 1
  %.not648.us = icmp eq i32 %resampled_input.s0.y.rebased196.us, %t2447
  br i1 %.not648.us, label %"consume resampled_input584", label %"for resampled_input.s0.y.rebased194.us"

"consume resampled_input584":                     ; preds = %"end for resampled_input.s0.x.rebased198.loopexit.us", %"end for resampled_input.s0.x.rebased192.loopexit.us", %"for resampled_input.s0.y.rebased194.preheader", %"for resampled_input.s0.y.rebased188.preheader", %next_bb187, %then_bb186
  br i1 %5068, label %"for output.s0.y.yo585.preheader", label %"end for output.s0.y.yo586", !prof !101

"for output.s0.y.yo585.preheader":                ; preds = %"consume resampled_input584"
  %6050 = add nsw i32 %output.s0.b.rebased180, %14
  %6051 = mul nsw i32 %6050, %25
  %6052 = load <32 x i32>, <32 x i32>* %4934, align 128
  %6053 = load <32 x i32>, <32 x i32>* %4937, align 128
  %6054 = load <32 x i32>, <32 x i32>* %4940, align 128
  %6055 = load <32 x i32>, <32 x i32>* %4943, align 128
  br label %"for output.s0.y.yo585"

"for output.s0.y.yo585":                          ; preds = %"for output.s0.y.yo585.preheader", %"end for output.s0.x.xo589"
  %output.s0.y.yo587 = phi i32 [ %6066, %"end for output.s0.x.xo589" ], [ 0, %"for output.s0.y.yo585.preheader" ]
  %6056 = add nsw i32 %output.s0.y.yo587, %22
  %6057 = mul nsw i32 %6056, %stride_y
  %6058 = add nsw i32 %5069, %6057
  %t2476 = mul nsw i32 %6058, %4996
  %6059 = add nsw i32 %5070, %6057
  %t2478 = mul nsw i32 %6059, %4996
  %6060 = sub nsw i32 %6057, %resampled_input.y.min_realized
  %t2480 = mul nsw i32 %6060, %4996
  br i1 %5071, label %"for output.s0.x.xo588.preheader", label %"end for output.s0.x.xo589", !prof !101

"for output.s0.x.xo588.preheader":                ; preds = %"for output.s0.y.yo585"
  %6061 = mul nsw i32 %6056, %24
  %6062 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %6063 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5113) #11
  %6064 = add i32 %6061, %6051
  br label %"for output.s0.x.xo588"

"end for output.s0.y.yo586":                      ; preds = %"end for output.s0.x.xo589", %"consume resampled_input584"
  %6065 = add nuw nsw i32 %output.s0.b.rebased180, 1
  %.not643 = icmp eq i32 %6065, %15
  br i1 %.not643, label %if.then.i.loopexit, label %"for output.s0.b.rebased178"

"for output.s0.x.xo588":                          ; preds = %"for output.s0.x.xo588.preheader", %"consume convolved601"
  %output.s0.x.xo590 = phi i32 [ %6636, %"consume convolved601" ], [ 0, %"for output.s0.x.xo588.preheader" ]
  br i1 %4279, label %then_bb593, label %next_bb594

"end for output.s0.x.xo589":                      ; preds = %"consume convolved601", %"for output.s0.y.yo585"
  %6066 = add nuw nsw i32 %output.s0.y.yo587, 1
  %.not644 = icmp eq i32 %6066, %23
  br i1 %.not644, label %"end for output.s0.y.yo586", label %"for output.s0.y.yo585"

then_bb593:                                       ; preds = %"for output.s0.x.xo588"
  %6067 = load <32 x i32>, <32 x i32>* %5074, align 128, !tbaa !105
  %6068 = add nsw i32 %output.s0.x.xo590, %19
  %6069 = mul nsw i32 %6068, %stride_x
  %6070 = add i32 %6069, %5075
  %6071 = add i32 %6070, %t2476
  %6072 = shl nsw i32 %6071, 7
  %6073 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6072
  %6074 = bitcast i8* %6073 to <64 x i8>*
  %6075 = load <64 x i8>, <64 x i8>* %6074, align 128, !tbaa !129
  %6076 = zext <64 x i8> %6075 to <64 x i16>
  %6077 = load <32 x i32>, <32 x i32>* %5077, align 128, !tbaa !105
  %6078 = add i32 %6069, %5078
  %6079 = add i32 %6078, %t2476
  %6080 = shl nsw i32 %6079, 7
  %6081 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6080
  %6082 = bitcast i8* %6081 to <64 x i8>*
  %6083 = load <64 x i8>, <64 x i8>* %6082, align 128, !tbaa !129
  %6084 = zext <64 x i8> %6083 to <64 x i16>
  %6085 = load <32 x i32>, <32 x i32>* %5079, align 128, !tbaa !105
  %6086 = add i32 %6069, %t2476
  %6087 = sub i32 %6086, %resampled_input.x.min_realized
  %6088 = shl nsw i32 %6087, 7
  %6089 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6088
  %6090 = bitcast i8* %6089 to <64 x i8>*
  %6091 = load <64 x i8>, <64 x i8>* %6090, align 128, !tbaa !129
  %6092 = zext <64 x i8> %6091 to <64 x i16>
  %6093 = load <32 x i32>, <32 x i32>* %5082, align 128, !tbaa !105
  %6094 = add i32 %6070, %t2478
  %6095 = shl nsw i32 %6094, 7
  %6096 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6095
  %6097 = bitcast i8* %6096 to <64 x i8>*
  %6098 = load <64 x i8>, <64 x i8>* %6097, align 128, !tbaa !129
  %6099 = zext <64 x i8> %6098 to <64 x i16>
  %6100 = load <32 x i32>, <32 x i32>* %5084, align 128, !tbaa !105
  %6101 = add i32 %6078, %t2478
  %6102 = shl nsw i32 %6101, 7
  %6103 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6102
  %6104 = bitcast i8* %6103 to <64 x i8>*
  %6105 = load <64 x i8>, <64 x i8>* %6104, align 128, !tbaa !129
  %6106 = zext <64 x i8> %6105 to <64 x i16>
  %6107 = load <32 x i32>, <32 x i32>* %5085, align 128, !tbaa !105
  %6108 = add i32 %6069, %t2478
  %6109 = sub i32 %6108, %resampled_input.x.min_realized
  %6110 = shl nsw i32 %6109, 7
  %6111 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6110
  %6112 = bitcast i8* %6111 to <64 x i8>*
  %6113 = load <64 x i8>, <64 x i8>* %6112, align 128, !tbaa !129
  %6114 = zext <64 x i8> %6113 to <64 x i16>
  %6115 = load <32 x i32>, <32 x i32>* %5087, align 128, !tbaa !180
  %6116 = add i32 %6070, %t2480
  %6117 = shl nsw i32 %6116, 7
  %6118 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6117
  %6119 = bitcast i8* %6118 to <64 x i8>*
  %6120 = load <64 x i8>, <64 x i8>* %6119, align 128, !tbaa !129
  %6121 = zext <64 x i8> %6120 to <64 x i16>
  %6122 = load <32 x i32>, <32 x i32>* %5089, align 128, !tbaa !186
  %6123 = add i32 %6078, %t2480
  %6124 = shl nsw i32 %6123, 7
  %6125 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6124
  %6126 = bitcast i8* %6125 to <64 x i8>*
  %6127 = load <64 x i8>, <64 x i8>* %6126, align 128, !tbaa !129
  %6128 = zext <64 x i8> %6127 to <64 x i16>
  %6129 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6053, <32 x i32> %6052)
  %6130 = load <32 x i32>, <32 x i32>* %5090, align 128, !tbaa !190
  %6131 = add i32 %6069, %t2480
  %6132 = sub i32 %6131, %resampled_input.x.min_realized
  %6133 = shl nsw i32 %6132, 7
  %6134 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6133
  %6135 = bitcast i8* %6134 to <64 x i8>*
  %6136 = load <64 x i8>, <64 x i8>* %6135, align 128, !tbaa !129
  %6137 = zext <64 x i8> %6136 to <64 x i16>
  %6138 = bitcast <64 x i16> %6076 to <32 x i32>
  %6139 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6138) #11
  %6140 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6139) #11
  %6141 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6067) #11
  %6142 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6141) #11
  %6143 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6140, <32 x i32> %6142) #11
  %6144 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6143, <32 x i32> %6140, <32 x i32> %6142) #11
  %6145 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6139) #11
  %6146 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6141) #11
  %6147 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6145, <32 x i32> %6146) #11
  %6148 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6147, <32 x i32> %6145, <32 x i32> %6146) #11
  %6149 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6144, <32 x i32> %6148) #11
  %6150 = bitcast <64 x i16> %6084 to <32 x i32>
  %6151 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6150) #11
  %6152 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6077) #11
  %6153 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6151, <32 x i32> %6152) #11
  %6154 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6153) #11
  %6155 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6153) #11
  %6156 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6154, <32 x i32> %6155) #11
  %6157 = bitcast <64 x i16> %6099 to <32 x i32>
  %6158 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6157) #11
  %6159 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6158) #11
  %6160 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6093) #11
  %6161 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6160) #11
  %6162 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6159, <32 x i32> %6161) #11
  %6163 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6162, <32 x i32> %6159, <32 x i32> %6161) #11
  %6164 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6158) #11
  %6165 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6160) #11
  %6166 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6164, <32 x i32> %6165) #11
  %6167 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6166, <32 x i32> %6164, <32 x i32> %6165) #11
  %6168 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6163, <32 x i32> %6167) #11
  %6169 = bitcast <64 x i16> %6106 to <32 x i32>
  %6170 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6169) #11
  %6171 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6100) #11
  %6172 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6170, <32 x i32> %6171) #11
  %6173 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6172) #11
  %6174 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6172) #11
  %6175 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6173, <32 x i32> %6174) #11
  %6176 = bitcast <64 x i16> %6121 to <32 x i32>
  %6177 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6176) #11
  %6178 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6177) #11
  %6179 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6115) #11
  %6180 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6179) #11
  %6181 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6178, <32 x i32> %6180) #11
  %6182 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6181, <32 x i32> %6178, <32 x i32> %6180) #11
  %6183 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6177) #11
  %6184 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6179) #11
  %6185 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6183, <32 x i32> %6184) #11
  %6186 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6185, <32 x i32> %6183, <32 x i32> %6184) #11
  %6187 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6182, <32 x i32> %6186) #11
  %6188 = bitcast <64 x i16> %6128 to <32 x i32>
  %6189 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6188) #11
  %6190 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6122) #11
  %6191 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6189, <32 x i32> %6190) #11
  %6192 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6191) #11
  %6193 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6191) #11
  %6194 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6192, <32 x i32> %6193) #11
  %6195 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6130) #11
  %6196 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6195) #11
  %6197 = bitcast <64 x i16> %6137 to <32 x i32>
  %6198 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6197) #11
  %6199 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6198) #11
  %6200 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6196, <32 x i32> %6199) #11
  %6201 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6200, <32 x i32> %6196, <32 x i32> %6199) #11
  %6202 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6195) #11
  %6203 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6198) #11
  %6204 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6202, <32 x i32> %6203) #11
  %6205 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6204, <32 x i32> %6202, <32 x i32> %6203) #11
  %6206 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6201, <32 x i32> %6205) #11
  %6207 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6206, <64 x i32> %6129) #11
  %6208 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6194, <64 x i32> %6207) #11
  %6209 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6187, <64 x i32> %6208) #11
  %6210 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6107) #11
  %6211 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6210) #11
  %6212 = bitcast <64 x i16> %6114 to <32 x i32>
  %6213 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6212) #11
  %6214 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6213) #11
  %6215 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6211, <32 x i32> %6214) #11
  %6216 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6215, <32 x i32> %6211, <32 x i32> %6214) #11
  %6217 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6210) #11
  %6218 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6213) #11
  %6219 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6217, <32 x i32> %6218) #11
  %6220 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6219, <32 x i32> %6217, <32 x i32> %6218) #11
  %6221 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6216, <32 x i32> %6220) #11
  %6222 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6209, <64 x i32> %6221) #11
  %6223 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6175, <64 x i32> %6222) #11
  %6224 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6168, <64 x i32> %6223) #11
  %6225 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6085) #11
  %6226 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6225) #11
  %6227 = bitcast <64 x i16> %6092 to <32 x i32>
  %6228 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6227) #11
  %6229 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6228) #11
  %6230 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6226, <32 x i32> %6229) #11
  %6231 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6230, <32 x i32> %6226, <32 x i32> %6229) #11
  %6232 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6225) #11
  %6233 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6228) #11
  %6234 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6232, <32 x i32> %6233) #11
  %6235 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6234, <32 x i32> %6232, <32 x i32> %6233) #11
  %6236 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6231, <32 x i32> %6235) #11
  %6237 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6224, <64 x i32> %6236) #11
  %6238 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6156, <64 x i32> %6237) #11
  %6239 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6149, <64 x i32> %6238) #11
  %6240 = load <32 x i32>, <32 x i32>* %5092, align 128, !tbaa !105
  %6241 = getelementptr inbounds i8, i8* %6073, i32 64
  %6242 = bitcast i8* %6241 to <64 x i8>*
  %6243 = load <64 x i8>, <64 x i8>* %6242, align 64, !tbaa !129
  %6244 = zext <64 x i8> %6243 to <64 x i16>
  %6245 = load <32 x i32>, <32 x i32>* %5094, align 128, !tbaa !105
  %6246 = getelementptr inbounds i8, i8* %6081, i32 64
  %6247 = bitcast i8* %6246 to <64 x i8>*
  %6248 = load <64 x i8>, <64 x i8>* %6247, align 64, !tbaa !129
  %6249 = zext <64 x i8> %6248 to <64 x i16>
  %6250 = load <32 x i32>, <32 x i32>* %5096, align 128, !tbaa !105
  %6251 = getelementptr inbounds i8, i8* %6089, i32 64
  %6252 = bitcast i8* %6251 to <64 x i8>*
  %6253 = load <64 x i8>, <64 x i8>* %6252, align 64, !tbaa !129
  %6254 = zext <64 x i8> %6253 to <64 x i16>
  %6255 = load <32 x i32>, <32 x i32>* %5098, align 128, !tbaa !105
  %6256 = getelementptr inbounds i8, i8* %6096, i32 64
  %6257 = bitcast i8* %6256 to <64 x i8>*
  %6258 = load <64 x i8>, <64 x i8>* %6257, align 64, !tbaa !129
  %6259 = zext <64 x i8> %6258 to <64 x i16>
  %6260 = load <32 x i32>, <32 x i32>* %5100, align 128, !tbaa !105
  %6261 = getelementptr inbounds i8, i8* %6103, i32 64
  %6262 = bitcast i8* %6261 to <64 x i8>*
  %6263 = load <64 x i8>, <64 x i8>* %6262, align 64, !tbaa !129
  %6264 = zext <64 x i8> %6263 to <64 x i16>
  %6265 = load <32 x i32>, <32 x i32>* %5102, align 128, !tbaa !105
  %6266 = getelementptr inbounds i8, i8* %6111, i32 64
  %6267 = bitcast i8* %6266 to <64 x i8>*
  %6268 = load <64 x i8>, <64 x i8>* %6267, align 64, !tbaa !129
  %6269 = zext <64 x i8> %6268 to <64 x i16>
  %6270 = load <32 x i32>, <32 x i32>* %5104, align 128, !tbaa !193
  %6271 = getelementptr inbounds i8, i8* %6118, i32 64
  %6272 = bitcast i8* %6271 to <64 x i8>*
  %6273 = load <64 x i8>, <64 x i8>* %6272, align 64, !tbaa !129
  %6274 = zext <64 x i8> %6273 to <64 x i16>
  %6275 = load <32 x i32>, <32 x i32>* %5106, align 128, !tbaa !195
  %6276 = getelementptr inbounds i8, i8* %6125, i32 64
  %6277 = bitcast i8* %6276 to <64 x i8>*
  %6278 = load <64 x i8>, <64 x i8>* %6277, align 64, !tbaa !129
  %6279 = zext <64 x i8> %6278 to <64 x i16>
  %6280 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6055, <32 x i32> %6054)
  %6281 = load <32 x i32>, <32 x i32>* %5108, align 128, !tbaa !197
  %6282 = getelementptr inbounds i8, i8* %6134, i32 64
  %6283 = bitcast i8* %6282 to <64 x i8>*
  %6284 = load <64 x i8>, <64 x i8>* %6283, align 64, !tbaa !129
  %6285 = zext <64 x i8> %6284 to <64 x i16>
  %6286 = bitcast <64 x i16> %6244 to <32 x i32>
  %6287 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6286) #11
  %6288 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6287) #11
  %6289 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6240) #11
  %6290 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6289) #11
  %6291 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6288, <32 x i32> %6290) #11
  %6292 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6291, <32 x i32> %6288, <32 x i32> %6290) #11
  %6293 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6287) #11
  %6294 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6289) #11
  %6295 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6293, <32 x i32> %6294) #11
  %6296 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6295, <32 x i32> %6293, <32 x i32> %6294) #11
  %6297 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6292, <32 x i32> %6296) #11
  %6298 = bitcast <64 x i16> %6249 to <32 x i32>
  %6299 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6298) #11
  %6300 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6245) #11
  %6301 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6299, <32 x i32> %6300) #11
  %6302 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6301) #11
  %6303 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6301) #11
  %6304 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6302, <32 x i32> %6303) #11
  %6305 = bitcast <64 x i16> %6259 to <32 x i32>
  %6306 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6305) #11
  %6307 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6306) #11
  %6308 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6255) #11
  %6309 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6308) #11
  %6310 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6307, <32 x i32> %6309) #11
  %6311 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6310, <32 x i32> %6307, <32 x i32> %6309) #11
  %6312 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6306) #11
  %6313 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6308) #11
  %6314 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6312, <32 x i32> %6313) #11
  %6315 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6314, <32 x i32> %6312, <32 x i32> %6313) #11
  %6316 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6311, <32 x i32> %6315) #11
  %6317 = bitcast <64 x i16> %6264 to <32 x i32>
  %6318 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6317) #11
  %6319 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6260) #11
  %6320 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6318, <32 x i32> %6319) #11
  %6321 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6320) #11
  %6322 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6320) #11
  %6323 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6321, <32 x i32> %6322) #11
  %6324 = bitcast <64 x i16> %6274 to <32 x i32>
  %6325 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6324) #11
  %6326 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6325) #11
  %6327 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6270) #11
  %6328 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6327) #11
  %6329 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6326, <32 x i32> %6328) #11
  %6330 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6329, <32 x i32> %6326, <32 x i32> %6328) #11
  %6331 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6325) #11
  %6332 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6327) #11
  %6333 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6331, <32 x i32> %6332) #11
  %6334 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6333, <32 x i32> %6331, <32 x i32> %6332) #11
  %6335 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6330, <32 x i32> %6334) #11
  %6336 = bitcast <64 x i16> %6279 to <32 x i32>
  %6337 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6336) #11
  %6338 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %6275) #11
  %6339 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6337, <32 x i32> %6338) #11
  %6340 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6339) #11
  %6341 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6339) #11
  %6342 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6340, <32 x i32> %6341) #11
  %6343 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6281) #11
  %6344 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6343) #11
  %6345 = bitcast <64 x i16> %6285 to <32 x i32>
  %6346 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6345) #11
  %6347 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6346) #11
  %6348 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6344, <32 x i32> %6347) #11
  %6349 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6348, <32 x i32> %6344, <32 x i32> %6347) #11
  %6350 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6343) #11
  %6351 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6346) #11
  %6352 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6350, <32 x i32> %6351) #11
  %6353 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6352, <32 x i32> %6350, <32 x i32> %6351) #11
  %6354 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6349, <32 x i32> %6353) #11
  %6355 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6354, <64 x i32> %6280) #11
  %6356 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6342, <64 x i32> %6355) #11
  %6357 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6335, <64 x i32> %6356) #11
  %6358 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6265) #11
  %6359 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6358) #11
  %6360 = bitcast <64 x i16> %6269 to <32 x i32>
  %6361 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6360) #11
  %6362 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6361) #11
  %6363 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6359, <32 x i32> %6362) #11
  %6364 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6363, <32 x i32> %6359, <32 x i32> %6362) #11
  %6365 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6358) #11
  %6366 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6361) #11
  %6367 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6365, <32 x i32> %6366) #11
  %6368 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6367, <32 x i32> %6365, <32 x i32> %6366) #11
  %6369 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6364, <32 x i32> %6368) #11
  %6370 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6357, <64 x i32> %6369) #11
  %6371 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6323, <64 x i32> %6370) #11
  %6372 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6316, <64 x i32> %6371) #11
  %6373 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6250) #11
  %6374 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6373) #11
  %6375 = bitcast <64 x i16> %6254 to <32 x i32>
  %6376 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6375) #11
  %6377 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6376) #11
  %6378 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6374, <32 x i32> %6377) #11
  %6379 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6378, <32 x i32> %6374, <32 x i32> %6377) #11
  %6380 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6373) #11
  %6381 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6376) #11
  %6382 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6380, <32 x i32> %6381) #11
  %6383 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6382, <32 x i32> %6380, <32 x i32> %6381) #11
  %6384 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6379, <32 x i32> %6383) #11
  %6385 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6372, <64 x i32> %6384) #11
  %6386 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6304, <64 x i32> %6385) #11
  %6387 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6297, <64 x i32> %6386) #11
  %6388 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6239)
  %6389 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6239)
  %6390 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6387)
  %6391 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6387)
  br label %"consume convolved601"

next_bb594:                                       ; preds = %"for output.s0.x.xo588"
  %6392 = add nsw i32 %output.s0.x.xo590, %19
  br i1 %4281, label %"for convolved.s1.r19$y595.preheader", label %"consume convolved601", !prof !101

"for convolved.s1.r19$y595.preheader":            ; preds = %next_bb594
  %6393 = mul nsw i32 %6392, %stride_x
  %6394 = sub i32 %6393, %resampled_input.x.min_realized
  br i1 %4280, label %"for convolved.s1.r19$y595.us", label %"consume convolved601", !prof !101

"for convolved.s1.r19$y595.us":                   ; preds = %"for convolved.s1.r19$y595.preheader", %"end for convolved.s1.r19$x599.loopexit.us"
  %convolved640.sroa.36.4.us = phi <32 x i32> [ %.lcssa5102, %"end for convolved.s1.r19$x599.loopexit.us" ], [ %6055, %"for convolved.s1.r19$y595.preheader" ]
  %convolved640.sroa.24.4.us = phi <32 x i32> [ %.lcssa5103, %"end for convolved.s1.r19$x599.loopexit.us" ], [ %6054, %"for convolved.s1.r19$y595.preheader" ]
  %convolved640.sroa.12.4.us = phi <32 x i32> [ %.lcssa5104, %"end for convolved.s1.r19$x599.loopexit.us" ], [ %6053, %"for convolved.s1.r19$y595.preheader" ]
  %convolved640.sroa.0.4.us = phi <32 x i32> [ %.lcssa5105, %"end for convolved.s1.r19$x599.loopexit.us" ], [ %6052, %"for convolved.s1.r19$y595.preheader" ]
  %"convolved.s1.r19$y597.us" = phi i32 [ %6554, %"end for convolved.s1.r19$x599.loopexit.us" ], [ 0, %"for convolved.s1.r19$y595.preheader" ]
  %6395 = mul nsw i32 %"convolved.s1.r19$y597.us", %a128
  %6396 = add nsw i32 %6395, %6060
  %6397 = mul nsw i32 %6396, %4996
  %t2483.us = add nsw i32 %6394, %6397
  %6398 = mul nsw i32 %"convolved.s1.r19$y597.us", %4
  br i1 %5124, label %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x598.us"

"for convolved.s1.r19$x598.us":                   ; preds = %"for convolved.s1.r19$y595.us", %"for convolved.s1.r19$x598.us"
  %convolved640.sroa.36.5.us = phi <32 x i32> [ %6501, %"for convolved.s1.r19$x598.us" ], [ %convolved640.sroa.36.4.us, %"for convolved.s1.r19$y595.us" ]
  %convolved640.sroa.24.5.us = phi <32 x i32> [ %6500, %"for convolved.s1.r19$x598.us" ], [ %convolved640.sroa.24.4.us, %"for convolved.s1.r19$y595.us" ]
  %convolved640.sroa.12.5.us = phi <32 x i32> [ %6499, %"for convolved.s1.r19$x598.us" ], [ %convolved640.sroa.12.4.us, %"for convolved.s1.r19$y595.us" ]
  %convolved640.sroa.0.5.us = phi <32 x i32> [ %6498, %"for convolved.s1.r19$x598.us" ], [ %convolved640.sroa.0.4.us, %"for convolved.s1.r19$y595.us" ]
  %"convolved.s1.r19$x600.us" = phi i32 [ %6502, %"for convolved.s1.r19$x598.us" ], [ 0, %"for convolved.s1.r19$y595.us" ]
  %niter5132 = phi i32 [ %niter5132.nsub.1, %"for convolved.s1.r19$x598.us" ], [ %unroll_iter5131, %"for convolved.s1.r19$y595.us" ]
  %6399 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.12.5.us, <32 x i32> %convolved640.sroa.0.5.us)
  %6400 = add nsw i32 %"convolved.s1.r19$x600.us", %6398
  %6401 = shl nsw i32 %6400, 7
  %6402 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %6401
  %6403 = bitcast i16* %6402 to <32 x i32>*
  %6404 = load <32 x i32>, <32 x i32>* %6403, align 128, !tbaa !105
  %6405 = mul nsw i32 %"convolved.s1.r19$x600.us", %a133
  %6406 = add nsw i32 %t2483.us, %6405
  %6407 = shl nsw i32 %6406, 7
  %6408 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6407
  %6409 = bitcast i8* %6408 to <64 x i8>*
  %6410 = load <64 x i8>, <64 x i8>* %6409, align 128, !tbaa !129
  %6411 = zext <64 x i8> %6410 to <64 x i16>
  %6412 = bitcast <64 x i16> %6411 to <32 x i32>
  %6413 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6412) #11
  %6414 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6413) #11
  %6415 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6404) #11
  %6416 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6415) #11
  %6417 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6414, <32 x i32> %6416) #11
  %6418 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6417, <32 x i32> %6414, <32 x i32> %6416) #11
  %6419 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6413) #11
  %6420 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6415) #11
  %6421 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6419, <32 x i32> %6420) #11
  %6422 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6421, <32 x i32> %6419, <32 x i32> %6420) #11
  %6423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6418, <32 x i32> %6422) #11
  %6424 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6399, <64 x i32> %6423) #11
  %6425 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.36.5.us, <32 x i32> %convolved640.sroa.24.5.us)
  %6426 = getelementptr inbounds i16, i16* %6402, i32 64
  %6427 = bitcast i16* %6426 to <32 x i32>*
  %6428 = load <32 x i32>, <32 x i32>* %6427, align 128, !tbaa !105
  %6429 = getelementptr inbounds i8, i8* %6408, i32 64
  %6430 = bitcast i8* %6429 to <64 x i8>*
  %6431 = load <64 x i8>, <64 x i8>* %6430, align 64, !tbaa !129
  %6432 = zext <64 x i8> %6431 to <64 x i16>
  %6433 = bitcast <64 x i16> %6432 to <32 x i32>
  %6434 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6433) #11
  %6435 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6434) #11
  %6436 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6428) #11
  %6437 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6436) #11
  %6438 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6435, <32 x i32> %6437) #11
  %6439 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6438, <32 x i32> %6435, <32 x i32> %6437) #11
  %6440 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6434) #11
  %6441 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6436) #11
  %6442 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6440, <32 x i32> %6441) #11
  %6443 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6442, <32 x i32> %6440, <32 x i32> %6441) #11
  %6444 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6439, <32 x i32> %6443) #11
  %6445 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6425, <64 x i32> %6444) #11
  %6446 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6424)
  %6447 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6424)
  %6448 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6445)
  %6449 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6445)
  %6450 = or i32 %"convolved.s1.r19$x600.us", 1
  %6451 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6447, <32 x i32> %6446)
  %6452 = add nsw i32 %6450, %6398
  %6453 = shl nsw i32 %6452, 7
  %6454 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %6453
  %6455 = bitcast i16* %6454 to <32 x i32>*
  %6456 = load <32 x i32>, <32 x i32>* %6455, align 128, !tbaa !105
  %6457 = mul nsw i32 %6450, %a133
  %6458 = add nsw i32 %t2483.us, %6457
  %6459 = shl nsw i32 %6458, 7
  %6460 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6459
  %6461 = bitcast i8* %6460 to <64 x i8>*
  %6462 = load <64 x i8>, <64 x i8>* %6461, align 128, !tbaa !129
  %6463 = zext <64 x i8> %6462 to <64 x i16>
  %6464 = bitcast <64 x i16> %6463 to <32 x i32>
  %6465 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6464) #11
  %6466 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6465) #11
  %6467 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6456) #11
  %6468 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6467) #11
  %6469 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6466, <32 x i32> %6468) #11
  %6470 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6469, <32 x i32> %6466, <32 x i32> %6468) #11
  %6471 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6465) #11
  %6472 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6467) #11
  %6473 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6471, <32 x i32> %6472) #11
  %6474 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6473, <32 x i32> %6471, <32 x i32> %6472) #11
  %6475 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6470, <32 x i32> %6474) #11
  %6476 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6451, <64 x i32> %6475) #11
  %6477 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6449, <32 x i32> %6448)
  %6478 = getelementptr inbounds i16, i16* %6454, i32 64
  %6479 = bitcast i16* %6478 to <32 x i32>*
  %6480 = load <32 x i32>, <32 x i32>* %6479, align 128, !tbaa !105
  %6481 = getelementptr inbounds i8, i8* %6460, i32 64
  %6482 = bitcast i8* %6481 to <64 x i8>*
  %6483 = load <64 x i8>, <64 x i8>* %6482, align 64, !tbaa !129
  %6484 = zext <64 x i8> %6483 to <64 x i16>
  %6485 = bitcast <64 x i16> %6484 to <32 x i32>
  %6486 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6485) #11
  %6487 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6486) #11
  %6488 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6480) #11
  %6489 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6488) #11
  %6490 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6487, <32 x i32> %6489) #11
  %6491 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6490, <32 x i32> %6487, <32 x i32> %6489) #11
  %6492 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6486) #11
  %6493 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6488) #11
  %6494 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6492, <32 x i32> %6493) #11
  %6495 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6494, <32 x i32> %6492, <32 x i32> %6493) #11
  %6496 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6491, <32 x i32> %6495) #11
  %6497 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6477, <64 x i32> %6496) #11
  %6498 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6476)
  %6499 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6476)
  %6500 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6497)
  %6501 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6497)
  %6502 = add nuw nsw i32 %"convolved.s1.r19$x600.us", 2
  %niter5132.nsub.1 = add i32 %niter5132, -2
  %niter5132.ncmp.1 = icmp eq i32 %niter5132.nsub.1, 0
  br i1 %niter5132.ncmp.1, label %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x598.us"

"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x598.us", %"for convolved.s1.r19$y595.us"
  %.lcssa5105.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y595.us" ], [ %6498, %"for convolved.s1.r19$x598.us" ]
  %.lcssa5104.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y595.us" ], [ %6499, %"for convolved.s1.r19$x598.us" ]
  %.lcssa5103.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y595.us" ], [ %6500, %"for convolved.s1.r19$x598.us" ]
  %.lcssa5102.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y595.us" ], [ %6501, %"for convolved.s1.r19$x598.us" ]
  %convolved640.sroa.36.5.us.unr = phi <32 x i32> [ %convolved640.sroa.36.4.us, %"for convolved.s1.r19$y595.us" ], [ %6501, %"for convolved.s1.r19$x598.us" ]
  %convolved640.sroa.24.5.us.unr = phi <32 x i32> [ %convolved640.sroa.24.4.us, %"for convolved.s1.r19$y595.us" ], [ %6500, %"for convolved.s1.r19$x598.us" ]
  %convolved640.sroa.12.5.us.unr = phi <32 x i32> [ %convolved640.sroa.12.4.us, %"for convolved.s1.r19$y595.us" ], [ %6499, %"for convolved.s1.r19$x598.us" ]
  %convolved640.sroa.0.5.us.unr = phi <32 x i32> [ %convolved640.sroa.0.4.us, %"for convolved.s1.r19$y595.us" ], [ %6498, %"for convolved.s1.r19$x598.us" ]
  %"convolved.s1.r19$x600.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y595.us" ], [ %6502, %"for convolved.s1.r19$x598.us" ]
  br i1 %lcmp.mod5130.not, label %"end for convolved.s1.r19$x599.loopexit.us", label %"for convolved.s1.r19$x598.us.epil"

"for convolved.s1.r19$x598.us.epil":              ; preds = %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa"
  %6503 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.12.5.us.unr, <32 x i32> %convolved640.sroa.0.5.us.unr)
  %6504 = add nsw i32 %"convolved.s1.r19$x600.us.unr", %6398
  %6505 = shl nsw i32 %6504, 7
  %6506 = getelementptr inbounds i16, i16* %filter_zeroed95, i32 %6505
  %6507 = bitcast i16* %6506 to <32 x i32>*
  %6508 = load <32 x i32>, <32 x i32>* %6507, align 128, !tbaa !105
  %6509 = mul nsw i32 %"convolved.s1.r19$x600.us.unr", %a133
  %6510 = add nsw i32 %t2483.us, %6509
  %6511 = shl nsw i32 %6510, 7
  %6512 = getelementptr inbounds i8, i8* %resampled_input183, i32 %6511
  %6513 = bitcast i8* %6512 to <64 x i8>*
  %6514 = load <64 x i8>, <64 x i8>* %6513, align 128, !tbaa !129
  %6515 = zext <64 x i8> %6514 to <64 x i16>
  %6516 = bitcast <64 x i16> %6515 to <32 x i32>
  %6517 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6516) #11
  %6518 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6517) #11
  %6519 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6508) #11
  %6520 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6519) #11
  %6521 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6518, <32 x i32> %6520) #11
  %6522 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6521, <32 x i32> %6518, <32 x i32> %6520) #11
  %6523 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6517) #11
  %6524 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6519) #11
  %6525 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6523, <32 x i32> %6524) #11
  %6526 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6525, <32 x i32> %6523, <32 x i32> %6524) #11
  %6527 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6522, <32 x i32> %6526) #11
  %6528 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6503, <64 x i32> %6527) #11
  %6529 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved640.sroa.36.5.us.unr, <32 x i32> %convolved640.sroa.24.5.us.unr)
  %6530 = getelementptr inbounds i16, i16* %6506, i32 64
  %6531 = bitcast i16* %6530 to <32 x i32>*
  %6532 = load <32 x i32>, <32 x i32>* %6531, align 128, !tbaa !105
  %6533 = getelementptr inbounds i8, i8* %6512, i32 64
  %6534 = bitcast i8* %6533 to <64 x i8>*
  %6535 = load <64 x i8>, <64 x i8>* %6534, align 64, !tbaa !129
  %6536 = zext <64 x i8> %6535 to <64 x i16>
  %6537 = bitcast <64 x i16> %6536 to <32 x i32>
  %6538 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6537) #11
  %6539 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6538) #11
  %6540 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %6532) #11
  %6541 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6540) #11
  %6542 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6539, <32 x i32> %6541) #11
  %6543 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6542, <32 x i32> %6539, <32 x i32> %6541) #11
  %6544 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6538) #11
  %6545 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6540) #11
  %6546 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6544, <32 x i32> %6545) #11
  %6547 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6546, <32 x i32> %6544, <32 x i32> %6545) #11
  %6548 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6543, <32 x i32> %6547) #11
  %6549 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %6529, <64 x i32> %6548) #11
  %6550 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6549)
  %6551 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6549)
  %6552 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6528)
  %6553 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6528)
  br label %"end for convolved.s1.r19$x599.loopexit.us"

"end for convolved.s1.r19$x599.loopexit.us":      ; preds = %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x598.us.epil"
  %.lcssa5105 = phi <32 x i32> [ %.lcssa5105.ph, %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa" ], [ %6553, %"for convolved.s1.r19$x598.us.epil" ]
  %.lcssa5104 = phi <32 x i32> [ %.lcssa5104.ph, %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa" ], [ %6552, %"for convolved.s1.r19$x598.us.epil" ]
  %.lcssa5103 = phi <32 x i32> [ %.lcssa5103.ph, %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa" ], [ %6551, %"for convolved.s1.r19$x598.us.epil" ]
  %.lcssa5102 = phi <32 x i32> [ %.lcssa5102.ph, %"end for convolved.s1.r19$x599.loopexit.us.unr-lcssa" ], [ %6550, %"for convolved.s1.r19$x598.us.epil" ]
  %6554 = add nuw nsw i32 %"convolved.s1.r19$y597.us", 1
  %.not646.us = icmp eq i32 %6554, %6
  br i1 %.not646.us, label %"consume convolved601", label %"for convolved.s1.r19$y595.us"

"consume convolved601":                           ; preds = %"end for convolved.s1.r19$x599.loopexit.us", %next_bb594, %"for convolved.s1.r19$y595.preheader", %then_bb593
  %.pre-phi4979 = phi i32 [ %6068, %then_bb593 ], [ %6392, %"for convolved.s1.r19$y595.preheader" ], [ %6392, %next_bb594 ], [ %6392, %"end for convolved.s1.r19$x599.loopexit.us" ]
  %convolved640.sroa.36.7 = phi <32 x i32> [ %6391, %then_bb593 ], [ %6055, %"for convolved.s1.r19$y595.preheader" ], [ %6055, %next_bb594 ], [ %.lcssa5102, %"end for convolved.s1.r19$x599.loopexit.us" ]
  %convolved640.sroa.24.7 = phi <32 x i32> [ %6390, %then_bb593 ], [ %6054, %"for convolved.s1.r19$y595.preheader" ], [ %6054, %next_bb594 ], [ %.lcssa5103, %"end for convolved.s1.r19$x599.loopexit.us" ]
  %convolved640.sroa.12.7 = phi <32 x i32> [ %6389, %then_bb593 ], [ %6053, %"for convolved.s1.r19$y595.preheader" ], [ %6053, %next_bb594 ], [ %.lcssa5104, %"end for convolved.s1.r19$x599.loopexit.us" ]
  %convolved640.sroa.0.7 = phi <32 x i32> [ %6388, %then_bb593 ], [ %6052, %"for convolved.s1.r19$y595.preheader" ], [ %6052, %next_bb594 ], [ %.lcssa5105, %"end for convolved.s1.r19$x599.loopexit.us" ]
  %6555 = sext <32 x i32> %convolved640.sroa.0.7 to <32 x i64>
  %a140 = mul nsw <32 x i64> %6555, %5111
  %6556 = icmp slt <32 x i64> %a140, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6557 = select <32 x i1> %6556, <32 x i64> %a140, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6558 = add nsw <32 x i64> %6557, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a139 = ashr <32 x i64> %6558, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6559 = icmp slt <32 x i64> %a139, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a138 = select <32 x i1> %6559, <32 x i64> %a139, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %6560 = icmp sgt <32 x i64> %a138, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6561 = select <32 x i1> %6560, <32 x i64> %a138, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6562 = trunc <32 x i64> %6561 to <32 x i32>
  %6563 = sext <32 x i32> %convolved640.sroa.12.7 to <32 x i64>
  %a143 = mul nsw <32 x i64> %6563, %5111
  %6564 = icmp slt <32 x i64> %a143, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6565 = select <32 x i1> %6564, <32 x i64> %a143, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6566 = add nsw <32 x i64> %6565, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a142 = ashr <32 x i64> %6566, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6567 = icmp slt <32 x i64> %a142, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a141 = select <32 x i1> %6567, <32 x i64> %a142, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %6568 = icmp sgt <32 x i64> %a141, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6569 = select <32 x i1> %6568, <32 x i64> %a141, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6570 = trunc <32 x i64> %6569 to <32 x i32>
  %6571 = sext <32 x i32> %convolved640.sroa.24.7 to <32 x i64>
  %a146 = mul nsw <32 x i64> %6571, %5111
  %6572 = icmp slt <32 x i64> %a146, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6573 = select <32 x i1> %6572, <32 x i64> %a146, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6574 = add nsw <32 x i64> %6573, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a145 = ashr <32 x i64> %6574, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6575 = icmp slt <32 x i64> %a145, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a144 = select <32 x i1> %6575, <32 x i64> %a145, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %6576 = icmp sgt <32 x i64> %a144, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6577 = select <32 x i1> %6576, <32 x i64> %a144, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6578 = trunc <32 x i64> %6577 to <32 x i32>
  %6579 = sext <32 x i32> %convolved640.sroa.36.7 to <32 x i64>
  %a149 = mul nsw <32 x i64> %6579, %5111
  %6580 = icmp slt <32 x i64> %a149, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6581 = select <32 x i1> %6580, <32 x i64> %a149, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %6582 = add nsw <32 x i64> %6581, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a148 = ashr <32 x i64> %6582, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %6583 = icmp slt <32 x i64> %a148, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a147 = select <32 x i1> %6583, <32 x i64> %a148, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %6584 = icmp sgt <32 x i64> %a147, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6585 = select <32 x i1> %6584, <32 x i64> %a147, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %6586 = trunc <32 x i64> %6585 to <32 x i32>
  %6587 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6562, <32 x i32> %6063) #11
  %6588 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6587, <32 x i32> %6062) #11
  %6589 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %6588) #11
  %6590 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6570, <32 x i32> %6063) #11
  %6591 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6590, <32 x i32> %6062) #11
  %6592 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %6591, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %6593 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6589, <32 x i32> %6592) #11
  %6594 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6593) #11
  %6595 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %6594, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %6596 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6593) #11
  %6597 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6596) #11
  %6598 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6595, <32 x i32> %6597) #11
  %6599 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6598) #11
  %6600 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6598) #11
  %6601 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %6599, <32 x i32> %6600) #11
  %6602 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6578, <32 x i32> %6063) #11
  %6603 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6602, <32 x i32> %6062) #11
  %6604 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %6603) #11
  %6605 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %6586, <32 x i32> %6063) #11
  %6606 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %6605, <32 x i32> %6062) #11
  %6607 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %6606, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %6608 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6604, <32 x i32> %6607) #11
  %6609 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6608) #11
  %6610 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %6609, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %6611 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6608) #11
  %6612 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6611) #11
  %6613 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6610, <32 x i32> %6612) #11
  %6614 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6613) #11
  %6615 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6613) #11
  %6616 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %6614, <32 x i32> %6615) #11
  %6617 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6601, <32 x i32> %6616) #11
  %6618 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %5121, <64 x i32> %6617) #11
  %6619 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6618) #11
  %6620 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %6619, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %6621 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %6620, <32 x i32> zeroinitializer) #11
  %6622 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6618) #11
  %6623 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %6622, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %6624 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %6623, <32 x i32> zeroinitializer) #11
  %6625 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6621, <32 x i32> %6624) #11
  %6626 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %6625) #11
  %6627 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %6625) #11
  %6628 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %6626, <32 x i32> %6627) #11
  %6629 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %6628, <32 x i32> %5122) #11
  %6630 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %5123, <32 x i32> %6629) #11
  %6631 = bitcast <32 x i32> %6630 to <128 x i8>
  %6632 = mul nsw i32 %.pre-phi4979, %21
  %t2473 = add i32 %6064, %6632
  %6633 = sub i32 %t2473, %reass.add4701
  %6634 = getelementptr inbounds i8, i8* %17, i32 %6633
  %6635 = bitcast i8* %6634 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %6631, <128 x i8>* %6635, i32 1, <128 x i1> %4669), !tbaa !199
  %6636 = add nuw nsw i32 %output.s0.x.xo590, 1
  %.not645 = icmp eq i32 %6636, %20
  br i1 %.not645, label %"end for output.s0.x.xo589", label %"for output.s0.x.xo588"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i32 12
  %44 = load i8*, i8** %43, align 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i32 13
  %47 = load i8*, i8** %46, align 4
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i32 14
  %50 = load i8*, i8** %49, align 4
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i32 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 4
  %55 = tail call i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i16.p0v64i16(<64 x i16>, <64 x i16>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i32.p0v32i32(<32 x i32>, <32 x i32>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8 @llvm.vector.reduce.umax.v128i8(<128 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v128i8.p0v128i8(<128 x i8>, <128 x i8>*, i32 immarg, <128 x i1>) #5

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.0(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.1(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.2(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.3(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.4(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <1 x i32> %arg.3) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = extractelement <1 x i32> %arg.3, i32 0
  %6 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %6, <32 x i32> %7)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %10)
  ret <64 x i32> %11
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.5(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <1 x i32> %arg.3) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = extractelement <1 x i32> %arg.3, i32 0
  %6 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %6, <32 x i32> %7)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %10)
  ret <64 x i32> %11
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.6(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.7(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.8(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.9(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.10(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.11(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.12(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.13(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.14(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.15(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.16(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.17(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.18(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.19(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.20(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.21(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.22(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %5)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %24)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %41, <64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %43, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %44, <32 x i32> zeroinitializer)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %46, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %47, <32 x i32> zeroinitializer)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %52, <32 x i32> %53)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %55, <32 x i32> %54)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.23(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %5)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %24)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %41, <64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %43, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %44, <32 x i32> zeroinitializer)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %46, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %47, <32 x i32> zeroinitializer)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %52, <32 x i32> %53)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %55, <32 x i32> %54)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.24(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %5)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %24)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %41, <64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %43, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %44, <32 x i32> zeroinitializer)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %46, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %47, <32 x i32> zeroinitializer)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %52, <32 x i32> %53)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %55, <32 x i32> %54)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.25(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %5)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %24)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %41, <64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %43, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %44, <32 x i32> zeroinitializer)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %46, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %47, <32 x i32> zeroinitializer)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %52, <32 x i32> %53)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %55, <32 x i32> %54)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.26(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.27(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.28(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.29(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.30(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <1 x i32> %arg.3) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = extractelement <1 x i32> %arg.3, i32 0
  %6 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %6, <32 x i32> %7)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %10)
  ret <64 x i32> %11
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.31(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <1 x i32> %arg.3) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = extractelement <1 x i32> %arg.3, i32 0
  %6 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %6, <32 x i32> %7)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %10)
  ret <64 x i32> %11
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.32(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.33(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.34(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.35(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.36(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %5)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %24)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %41, <64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %43, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %44, <32 x i32> zeroinitializer)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %46, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %47, <32 x i32> zeroinitializer)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %52, <32 x i32> %53)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %55, <32 x i32> %54)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.37(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.38(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.39(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.40(<64 x i32> %arg, <128 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.1 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %arg, <32 x i32> zeroinitializer, <32 x i32> %1)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.41(<64 x i32> %arg, <128 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.1 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vadduhw.acc.128B(<64 x i32> %arg, <32 x i32> %1, <32 x i32> zeroinitializer)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.42(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = extractelement <1 x i32> %arg.4, i32 0
  %6 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %6, <32 x i32> %7)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %10)
  ret <64 x i32> %11
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.43(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2, <64 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = extractelement <1 x i32> %arg.4, i32 0
  %6 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.3)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %6, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %8, <32 x i32> %6, <32 x i32> %7)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %9)
  %11 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %10)
  ret <64 x i32> %11
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.44(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.45(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i16> %arg.18, <64 x i16> %arg.19, <64 x i16> %arg.20, <64 x i16> %arg.21, <64 x i16> %arg.22, <64 x i16> %arg.23, <64 x i16> %arg.24, <64 x i16> %arg.25, <64 x i16> %arg.26, <64 x i16> %arg.27, <64 x i16> %arg.28, <64 x i16> %arg.29, <64 x i32> %arg.30, <64 x i16> %arg.31, <64 x i16> %arg.32, <64 x i16> %arg.33) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %17)
  %19 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %19)
  %21 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %18, <32 x i32> %20)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %21)
  %23 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %24, <32 x i32> %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %27)
  %29 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %22, <32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %34)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %32, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %36, <32 x i32> %32, <32 x i32> %35)
  %38 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %38)
  %40 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %39)
  %41 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %40, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %44, <32 x i32> %40, <32 x i32> %43)
  %46 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %37, <32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %50 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %49)
  %51 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %48, <32 x i32> %50)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %51)
  %53 = bitcast <64 x i16> %arg.19 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %53)
  %55 = bitcast <64 x i16> %arg.18 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %55)
  %57 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %54, <32 x i32> %56)
  %58 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %57)
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %52, <32 x i32> %58)
  %60 = bitcast <64 x i16> %arg.25 to <32 x i32>
  %61 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %60)
  %62 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %61)
  %63 = bitcast <64 x i16> %arg.24 to <32 x i32>
  %64 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %63)
  %65 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %64)
  %66 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %62, <32 x i32> %65)
  %67 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %66, <32 x i32> %62, <32 x i32> %65)
  %68 = bitcast <64 x i16> %arg.26 to <32 x i32>
  %69 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %68)
  %70 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %69)
  %71 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %64)
  %72 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %70, <32 x i32> %71)
  %73 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %72, <32 x i32> %70, <32 x i32> %71)
  %74 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %73)
  %75 = bitcast <64 x i16> %arg.28 to <32 x i32>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %75)
  %77 = bitcast <64 x i16> %arg.27 to <32 x i32>
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %77)
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %76, <32 x i32> %78)
  %80 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %79)
  %81 = bitcast <64 x i16> %arg.29 to <32 x i32>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %81)
  %83 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %82, <32 x i32> %78)
  %84 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %83)
  %85 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %80, <32 x i32> %84)
  %86 = bitcast <64 x i16> %arg.31 to <32 x i32>
  %87 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %86)
  %88 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %87)
  %89 = bitcast <64 x i16> %arg.32 to <32 x i32>
  %90 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %89)
  %91 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %90)
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %88, <32 x i32> %91)
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %92, <32 x i32> %88, <32 x i32> %91)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %87)
  %95 = bitcast <64 x i16> %arg.33 to <32 x i32>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %95)
  %97 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %96)
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %94, <32 x i32> %97)
  %99 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %98, <32 x i32> %94, <32 x i32> %97)
  %100 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %93, <32 x i32> %99)
  %101 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %100, <64 x i32> %arg.30)
  %102 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %85, <64 x i32> %101)
  %103 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %74, <64 x i32> %102)
  %104 = bitcast <64 x i16> %arg.20 to <32 x i32>
  %105 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %104)
  %106 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %105)
  %107 = bitcast <64 x i16> %arg.21 to <32 x i32>
  %108 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %107)
  %109 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %108)
  %110 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %106, <32 x i32> %109)
  %111 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %110, <32 x i32> %106, <32 x i32> %109)
  %112 = bitcast <64 x i16> %arg.22 to <32 x i32>
  %113 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %112)
  %114 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %113)
  %115 = bitcast <64 x i16> %arg.23 to <32 x i32>
  %116 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %115)
  %117 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %116)
  %118 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %114, <32 x i32> %117)
  %119 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %118, <32 x i32> %114, <32 x i32> %117)
  %120 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %111, <32 x i32> %119)
  %121 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %103, <64 x i32> %120)
  %122 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %59, <64 x i32> %121)
  %123 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %46, <64 x i32> %122)
  %124 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %125 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %124)
  %126 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %125)
  %127 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %128 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %127)
  %129 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %128)
  %130 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %126, <32 x i32> %129)
  %131 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %130, <32 x i32> %126, <32 x i32> %129)
  %132 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %133 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %132)
  %134 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %133)
  %135 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %136 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %135)
  %137 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %136)
  %138 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %134, <32 x i32> %137)
  %139 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %138, <32 x i32> %134, <32 x i32> %137)
  %140 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %131, <32 x i32> %139)
  %141 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %123, <64 x i32> %140)
  %142 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %29, <64 x i32> %141)
  %143 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %16, <64 x i32> %142)
  ret <64 x i32> %143
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.46(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.47(<64 x i32> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1)
  %3 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %2, <32 x i32> %5)
  %8 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %9)
  %11 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %10, <32 x i32> %13)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %14, <32 x i32> %10, <32 x i32> %13)
  %16 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %7, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %arg, <64 x i32> %16)
  ret <64 x i32> %17
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.48(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %5)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %24)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %41, <64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %43, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %44, <32 x i32> zeroinitializer)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %46, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %47, <32 x i32> zeroinitializer)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %52, <32 x i32> %53)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %55, <32 x i32> %54)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!96, !15, i64 4}
!96 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !15, i64 4, !15, i64 8}
!97 = !{!96, !11, i64 0}
!98 = !{!96, !15, i64 8}
!99 = !{!"branch_weights", i32 1, i32 2000}
!100 = !{!"branch_weights", i32 0, i32 1073741824}
!101 = !{!"branch_weights", i32 1073741824, i32 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"filter", !104, i64 0}
!104 = !{!"Halide buffer"}
!105 = !{!106, !106, i64 0}
!106 = !{!"filter_zeroed", !104, i64 0}
!107 = distinct !{!107, !32}
!108 = distinct !{!108, !32}
!109 = !{!110, !110, i64 0}
!110 = !{!"bias", !104, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"offset_c.width32.base0", !113, i64 0}
!113 = !{!"offset_c.width64.base0", !114, i64 0}
!114 = !{!"offset_c.width128.base0", !115, i64 0}
!115 = !{!"offset_c.width256.base0", !116, i64 0}
!116 = !{!"offset_c.width512.base0", !117, i64 0}
!117 = !{!"offset_c.width1024.base0", !118, i64 0}
!118 = !{!"offset_c", !104, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"offset_c.width32.base32", !113, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"offset_c.width32.base64", !123, i64 0}
!123 = !{!"offset_c.width64.base64", !114, i64 0}
!124 = !{!125, !125, i64 0}
!125 = !{!"offset_c.width32.base96", !123, i64 0}
!126 = !{!"branch_weights", i32 0, i32 -2147483648}
!127 = !{!128, !128, i64 0}
!128 = !{!"input", !104, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"resampled_input", !104, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"convolved.width32.base0", !133, i64 0}
!133 = !{!"convolved.width64.base0", !134, i64 0}
!134 = !{!"convolved.width128.base0", !135, i64 0}
!135 = !{!"convolved.width256.base0", !136, i64 0}
!136 = !{!"convolved.width512.base0", !137, i64 0}
!137 = !{!"convolved.width1024.base0", !138, i64 0}
!138 = !{!"convolved", !104, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"convolved.width32.base32", !133, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"convolved.width32.base64", !143, i64 0}
!143 = !{!"convolved.width64.base64", !134, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"convolved.width32.base96", !143, i64 0}
!146 = !{!147, !147, i64 0}
!147 = !{!"convolved.width32.base128", !148, i64 0}
!148 = !{!"convolved.width64.base128", !149, i64 0}
!149 = !{!"convolved.width128.base128", !135, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"convolved.width32.base160", !148, i64 0}
!152 = !{!153, !153, i64 0}
!153 = !{!"convolved.width32.base192", !154, i64 0}
!154 = !{!"convolved.width64.base192", !149, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"convolved.width32.base224", !154, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"convolved.width32.base256", !159, i64 0}
!159 = !{!"convolved.width64.base256", !160, i64 0}
!160 = !{!"convolved.width128.base256", !161, i64 0}
!161 = !{!"convolved.width256.base256", !136, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"convolved.width32.base288", !159, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"convolved.width32.base320", !166, i64 0}
!166 = !{!"convolved.width64.base320", !160, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"convolved.width32.base352", !166, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"convolved.width32.base384", !171, i64 0}
!171 = !{!"convolved.width64.base384", !172, i64 0}
!172 = !{!"convolved.width128.base384", !161, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"convolved.width32.base416", !171, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"convolved.width32.base448", !177, i64 0}
!177 = !{!"convolved.width64.base448", !172, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"convolved.width32.base480", !177, i64 0}
!180 = !{!181, !181, i64 0}
!181 = !{!"filter_zeroed.width64.base256", !182, i64 0}
!182 = !{!"filter_zeroed.width128.base256", !183, i64 0}
!183 = !{!"filter_zeroed.width256.base256", !184, i64 0}
!184 = !{!"filter_zeroed.width512.base0", !185, i64 0}
!185 = !{!"filter_zeroed.width1024.base0", !106, i64 0}
!186 = !{!187, !187, i64 0}
!187 = !{!"filter_zeroed.width64.base128", !188, i64 0}
!188 = !{!"filter_zeroed.width128.base128", !189, i64 0}
!189 = !{!"filter_zeroed.width256.base0", !184, i64 0}
!190 = !{!191, !191, i64 0}
!191 = !{!"filter_zeroed.width64.base0", !192, i64 0}
!192 = !{!"filter_zeroed.width128.base0", !189, i64 0}
!193 = !{!194, !194, i64 0}
!194 = !{!"filter_zeroed.width64.base320", !182, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"filter_zeroed.width64.base192", !188, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"filter_zeroed.width64.base64", !192, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"output", !104, i64 0}
!201 = distinct !{!201, !32}
!202 = distinct !{!202, !32}
!203 = distinct !{!203, !32}
!204 = distinct !{!204, !32}
!205 = distinct !{!205, !32}
!206 = !{!"branch_weights", i32 -2147483648, i32 0}
!207 = distinct !{!207, !32}
!208 = distinct !{!208, !32}
!209 = !{!210, !210, i64 0}
!210 = !{!"bias.width32.base0", !211, i64 0}
!211 = !{!"bias.width64.base0", !212, i64 0}
!212 = !{!"bias.width128.base0", !213, i64 0}
!213 = !{!"bias.width256.base0", !214, i64 0}
!214 = !{!"bias.width512.base0", !215, i64 0}
!215 = !{!"bias.width1024.base0", !110, i64 0}
!216 = !{!217, !217, i64 0}
!217 = !{!"bias.width32.base32", !211, i64 0}
!218 = !{!219, !219, i64 0}
!219 = !{!"bias.width32.base64", !220, i64 0}
!220 = !{!"bias.width64.base64", !212, i64 0}
!221 = !{!222, !222, i64 0}
!222 = !{!"bias.width32.base96", !220, i64 0}
