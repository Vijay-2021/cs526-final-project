; ModuleID = 'conv_nn_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 4
@4 = private constant i64 0
@5 = private constant i64 32
@6 = private constant i64 0
@7 = private constant i64 0
@8 = private constant i64 0
@9 = private constant i64 0
@10 = private constant [12 x i64*] [i64* @2, i64* @3, i64* @4, i64* @5, i64* @6, i64* null, i64* @7, i64* null, i64* @8, i64* null, i64* @9, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@11 = private constant i64 0
@12 = private constant [2 x i64*] [i64* @11, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [9 x i8] c"stride_x\00", align 32
@str.107 = private constant [9 x i8] c"stride_y\00", align 32
@str.108 = private constant [11 x i8] c"dilation_x\00", align 32
@str.109 = private constant [11 x i8] c"dilation_y\00", align 32
@str.110 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.111 = private constant [13 x i8] c"output_shift\00", align 32
@str.112 = private constant [12 x i8] c"output_zero\00", align 32
@str.113 = private constant [11 x i8] c"output_min\00", align 32
@str.114 = private constant [11 x i8] c"output_max\00", align 32
@13 = private constant i64 0
@14 = private constant [8 x i64*] [i64* @13, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.115 = private constant [7 x i8] c"output\00", align 32
@15 = private constant [15 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 6, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([12 x i64*], [12 x i64*]* @10, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @12, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.115, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @14, i32 0, i32 0) }]
@str.116 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.117 = private constant [15 x i8] c"conv_nn_hvx128\00", align 32
@conv_nn_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 15, %struct.halide_filter_argument_t* getelementptr inbounds ([15 x %struct.halide_filter_argument_t], [15 x %struct.halide_filter_argument_t]* @15, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.116, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.117, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #15
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #16
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #16
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #16
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #16
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #16
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #16
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #16
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #16
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #16
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #16
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #16
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #16
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #16
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #15
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #15
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #15
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #16
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #16
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #16
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #15
  %call.i = call i8* @malloc(i32 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32>, <32 x i32>, i32) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #15
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #15
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @conv_nn_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %stride_x, i32 %stride_y, i32 %dilation_x, i32 %dilation_y, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
if.end.i:
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = bitcast i8** %host.i to i32**
  %1 = load i32*, i32** %0, align 4, !tbaa !43
  %2 = bitcast i32* %1 to i8*
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 6
  %3 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %3, i32 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !49
  %host.i751 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %5 = load i8*, i8** %host.i751, align 4, !tbaa !43
  %dim.i752 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i752, align 8, !tbaa !46
  %extent.i767 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 2, i32 1
  %7 = load i32, i32* %extent.i767, align 4, !tbaa !49
  %stride.i773 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 3, i32 2
  %8 = load i32, i32* %stride.i773, align 4, !tbaa !50
  %extent.i777 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 4, i32 1
  %9 = load i32, i32* %extent.i777, align 4, !tbaa !49
  %stride.i779 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 4, i32 2
  %10 = load i32, i32* %stride.i779, align 4, !tbaa !50
  %extent.i783 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 5, i32 1
  %11 = load i32, i32* %extent.i783, align 4, !tbaa !49
  %stride.i785 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 5, i32 2
  %12 = load i32, i32* %stride.i785, align 4, !tbaa !50
  %host.i786 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %13 = load i8*, i8** %host.i786, align 4, !tbaa !43
  %dim.i787 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i787, align 8, !tbaa !46
  %extent.i790 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 0, i32 1
  %15 = load i32, i32* %extent.i790, align 4, !tbaa !49
  %min.i794 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 1, i32 0
  %16 = load i32, i32* %min.i794, align 4, !tbaa !47
  %stride.i796 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 1, i32 2
  %17 = load i32, i32* %stride.i796, align 4, !tbaa !50
  %min.i798 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 2, i32 0
  %18 = load i32, i32* %min.i798, align 4, !tbaa !47
  %stride.i800 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 2, i32 2
  %19 = load i32, i32* %stride.i800, align 4, !tbaa !50
  %min.i802 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 0
  %20 = load i32, i32* %min.i802, align 4, !tbaa !47
  %extent.i804 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 1
  %21 = load i32, i32* %extent.i804, align 4, !tbaa !49
  %stride.i806 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 2
  %22 = load i32, i32* %stride.i806, align 4, !tbaa !50
  %host.i807 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %23 = load i8*, i8** %host.i807, align 4, !tbaa !43
  %dim.i808 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i808, align 8, !tbaa !46
  %min.i815 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 0
  %25 = load i32, i32* %min.i815, align 4, !tbaa !47
  %extent.i817 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 1
  %26 = load i32, i32* %extent.i817, align 4, !tbaa !49
  %stride.i819 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 2
  %27 = load i32, i32* %stride.i819, align 4, !tbaa !50
  %min.i821 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 0
  %28 = load i32, i32* %min.i821, align 4, !tbaa !47
  %extent.i823 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 1
  %29 = load i32, i32* %extent.i823, align 4, !tbaa !49
  %stride.i825 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 2
  %30 = load i32, i32* %stride.i825, align 4, !tbaa !50
  %stride.i831 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 3, i32 2
  %31 = load i32, i32* %stride.i831, align 4, !tbaa !50
  %32 = add nsw i32 %4, -1
  %a0 = ashr i32 %32, 5
  %33 = icmp sgt i32 %a0, -1
  %t1217 = select i1 %33, i32 %a0, i32 -1
  %34 = shl i32 %t1217, 7
  %35 = add i32 %34, 268
  %cmp7.i = icmp ugt i32 %35, 16384
  br i1 %cmp7.i, label %pseudostack_alloc.exit, label %then_bb

pseudostack_alloc.exit:                           ; preds = %if.end.i
  %call.i = tail call i8* @halide_malloc(i8* null, i32 %35) #15
  %.not = icmp eq i8* %call.i, null
  br i1 %.not, label %then_bb, label %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge", !prof !95

"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge": ; preds = %pseudostack_alloc.exit
  %36 = bitcast i8* %call.i to i32*
  br label %"produce bias_im_global_wrapper$0"

then_bb:                                          ; preds = %if.end.i, %pseudostack_alloc.exit
  %37 = alloca i32, i32 %35, align 128
  %38 = bitcast i32* %37 to i8*
  br label %"produce bias_im_global_wrapper$0"

"produce bias_im_global_wrapper$0":               ; preds = %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge", %then_bb
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" = phi i8* [ %call.i, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %38, %then_bb ]
  %"bias_im_global_wrapper$0" = phi i32* [ %36, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %37, %then_bb ]
  %39 = icmp sgt i32 %4, 0
  br i1 %39, label %"for bias_im_global_wrapper$0.s0._0.preheader.old", label %"end for bias_im_global_wrapper$0.s0._0", !prof !96

"for bias_im_global_wrapper$0.s0._0.preheader.old": ; preds = %"produce bias_im_global_wrapper$0"
  %40 = shl nuw i32 %4, 2
  %41 = ptrtoint i32* %1 to i32
  %42 = ptrtoint i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" to i32
  %43 = bitcast i32* %1 to i8*
  %44 = icmp ult i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", %43
  %45 = sub i32 %42, %41
  %46 = icmp sle i32 %40, %45
  %47 = or i1 %44, %46
  br i1 %47, label %"for bias_im_global_wrapper$0.s0._0.rtli", label %"for bias_im_global_wrapper$0.s0._0.preheader"

"for bias_im_global_wrapper$0.s0._0.preheader":   ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  %48 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %49 = icmp ult i32 %48, 7
  br i1 %49, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0.preheader.new"

"for bias_im_global_wrapper$0.s0._0.preheader.new": ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader"
  %unroll_iter = and i32 %4, -8
  br label %"for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0.rtli":        ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 4 %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", i8* align 4 %2, i32 %40, i1 false)
  br label %"end for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0":             ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader.new"
  %"bias_im_global_wrapper$0.s0._0" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %81, %"for bias_im_global_wrapper$0.s0._0" ]
  %niter = phi i32 [ %unroll_iter, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %niter.nsub.7, %"for bias_im_global_wrapper$0.s0._0" ]
  %50 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0"
  %51 = load i32, i32* %50, align 4, !tbaa !97
  %52 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0"
  store i32 %51, i32* %52, align 4, !tbaa !100
  %53 = or i32 %"bias_im_global_wrapper$0.s0._0", 1
  %54 = getelementptr inbounds i32, i32* %1, i32 %53
  %55 = load i32, i32* %54, align 4, !tbaa !97
  %56 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %53
  store i32 %55, i32* %56, align 4, !tbaa !100
  %57 = or i32 %"bias_im_global_wrapper$0.s0._0", 2
  %58 = getelementptr inbounds i32, i32* %1, i32 %57
  %59 = load i32, i32* %58, align 4, !tbaa !97
  %60 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %57
  store i32 %59, i32* %60, align 4, !tbaa !100
  %61 = or i32 %"bias_im_global_wrapper$0.s0._0", 3
  %62 = getelementptr inbounds i32, i32* %1, i32 %61
  %63 = load i32, i32* %62, align 4, !tbaa !97
  %64 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %61
  store i32 %63, i32* %64, align 4, !tbaa !100
  %65 = or i32 %"bias_im_global_wrapper$0.s0._0", 4
  %66 = getelementptr inbounds i32, i32* %1, i32 %65
  %67 = load i32, i32* %66, align 4, !tbaa !97
  %68 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %65
  store i32 %67, i32* %68, align 4, !tbaa !100
  %69 = or i32 %"bias_im_global_wrapper$0.s0._0", 5
  %70 = getelementptr inbounds i32, i32* %1, i32 %69
  %71 = load i32, i32* %70, align 4, !tbaa !97
  %72 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %69
  store i32 %71, i32* %72, align 4, !tbaa !100
  %73 = or i32 %"bias_im_global_wrapper$0.s0._0", 6
  %74 = getelementptr inbounds i32, i32* %1, i32 %73
  %75 = load i32, i32* %74, align 4, !tbaa !97
  %76 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %73
  store i32 %75, i32* %76, align 4, !tbaa !100
  %77 = or i32 %"bias_im_global_wrapper$0.s0._0", 7
  %78 = getelementptr inbounds i32, i32* %1, i32 %77
  %79 = load i32, i32* %78, align 4, !tbaa !97
  %80 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %77
  store i32 %79, i32* %80, align 4, !tbaa !100
  %81 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0", 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0"

"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa": ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader"
  %"bias_im_global_wrapper$0.s0._0.unr" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader" ], [ %81, %"for bias_im_global_wrapper$0.s0._0" ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil"

"for bias_im_global_wrapper$0.s0._0.epil":        ; preds = %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", %"for bias_im_global_wrapper$0.s0._0.epil"
  %"bias_im_global_wrapper$0.s0._0.epil" = phi i32 [ %85, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %"bias_im_global_wrapper$0.s0._0.unr", %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %xtraiter, %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %82 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0.epil"
  %83 = load i32, i32* %82, align 4, !tbaa !97
  %84 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0.epil"
  store i32 %83, i32* %84, align 4, !tbaa !100
  %85 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0.epil", 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil", !llvm.loop !102

"end for bias_im_global_wrapper$0.s0._0":         ; preds = %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", %"for bias_im_global_wrapper$0.s0._0.epil", %"for bias_im_global_wrapper$0.s0._0.rtli", %"produce bias_im_global_wrapper$0"
  %86 = icmp sgt i32 %26, 5
  %87 = and i32 %4, 127
  %88 = icmp eq i32 %87, 0
  %89 = and i1 %88, %86
  %90 = or i32 %32, 127
  %91 = icmp sgt i32 %26, 7
  %92 = and i32 %4, 63
  %93 = icmp eq i32 %92, 0
  %94 = and i1 %93, %91
  %95 = or i32 %32, 63
  %96 = and i32 %4, 31
  %97 = icmp eq i32 %96, 0
  %98 = and i1 %97, %91
  %99 = or i32 %32, 31
  %100 = icmp sgt i32 %26, 0
  %101 = and i1 %88, %100
  %102 = icmp slt i32 %4, 32
  %103 = select i1 %102, i32 %4, i32 32
  %104 = add nsw i32 %103, -1
  %a3 = ashr i32 %104, 5
  %105 = icmp slt i32 %a0, 3
  %106 = select i1 %105, i32 %a0, i32 3
  %107 = and i32 %a3, -4
  %b5 = add nsw i32 %107, %106
  %108 = icmp slt i32 %a3, %b5
  %109 = select i1 %108, i32 %a3, i32 %b5
  %110 = add nsw i32 %109, %a0
  %111 = shl nsw i32 %110, 5
  %112 = or i32 %111, 31
  %113 = select i1 %101, i32 %90, i32 %112
  %114 = select i1 %98, i32 %99, i32 %113
  %115 = select i1 %94, i32 %95, i32 %114
  %a2 = select i1 %89, i32 %90, i32 %115
  %116 = icmp sgt i32 %a2, %99
  %a9 = select i1 %116, i32 %a2, i32 %99
  %117 = icmp sgt i32 %a9, -1
  %t1218 = select i1 %117, i32 %a9, i32 -1
  %118 = shl i32 %t1218, 2
  %119 = add i32 %118, 144
  %120 = call i8* @halide_malloc(i8* null, i32 %119)
  %offset_c = bitcast i8* %120 to i32*
  %121 = add nsw i32 %4, 31
  %122 = ashr i32 %121, 5
  br i1 %39, label %"for offset_c.s0.c.c.preheader", label %"consume bias_im_global_wrapper$0.thread", !prof !96

"for offset_c.s0.c.c.preheader":                  ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %123 = shl nuw i32 %122, 7
  call void @llvm.memset.p0i8.i32(i8* align 128 %120, i8 0, i32 %123, i1 false)
  %.not675 = icmp eq i8 %input_zero, 0
  br i1 %.not675, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.preheader"

"for offset_c.s1.c.co.preheader":                 ; preds = %"for offset_c.s0.c.c.preheader"
  %124 = icmp sgt i32 %11, 0
  %125 = select i1 %124, i32 %11, i32 0
  %126 = icmp sgt i32 %7, 0
  %127 = insertelement <128 x i8> undef, i8 %input_zero, i32 0
  %128 = shufflevector <128 x i8> %127, <128 x i8> undef, <128 x i32> zeroinitializer
  %129 = bitcast <128 x i8> %128 to <32 x i32>
  %130 = icmp sgt i32 %9, 0
  %or.cond = and i1 %124, %130
  %131 = and i1 %or.cond, %126
  br i1 %131, label %"for offset_c.s1.c.co.us.us.us.preheader", label %"for offset_c.s2.c.c.preheader", !prof !103

"for offset_c.s1.c.co.us.us.us.preheader":        ; preds = %"for offset_c.s1.c.co.preheader"
  %132 = add i32 %7, -1
  %xtraiter1824 = and i32 %7, 7
  %133 = icmp ult i32 %132, 7
  %unroll_iter1828 = and i32 %7, -8
  %lcmp.mod1826.not = icmp eq i32 %xtraiter1824, 0
  br label %"for offset_c.s1.c.co.us.us.us"

"for offset_c.s1.c.co.us.us.us":                  ; preds = %"for offset_c.s1.c.co.us.us.us.preheader", %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us"
  %offset_c.s1.c.co.us.us.us = phi i32 [ %208, %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.us.us.us.preheader" ]
  %134 = mul nsw i32 %offset_c.s1.c.co.us.us.us, %8
  %135 = shl nsw i32 %offset_c.s1.c.co.us.us.us, 5
  %136 = getelementptr inbounds i32, i32* %offset_c, i32 %135
  %137 = bitcast i32* %136 to <32 x i32>*
  %.promoted.us.us.us = load <32 x i32>, <32 x i32>* %137, align 128, !tbaa !104
  br label %"for offset_c.s1.r19$y.us.us.us.us.us"

"for offset_c.s1.r19$y.us.us.us.us.us":           ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", %"for offset_c.s1.c.co.us.us.us"
  %.lcssa1233.us.lcssa.us.us1240.us.us.us = phi <32 x i32> [ %.lcssa1823, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ %.promoted.us.us.us, %"for offset_c.s1.c.co.us.us.us" ]
  %"offset_c.s1.r19$y.us.us.us.us.us" = phi i32 [ %207, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.us.us.us" ]
  %138 = mul nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", %12
  %t838.us.us.us.us.us = add nsw i32 %138, %134
  br label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"for offset_c.s1.r19$x.us.us.us.us.us.us":        ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", %"for offset_c.s1.r19$y.us.us.us.us.us"
  %.lcssa1233.us1234.us.us.us.us.us = phi <32 x i32> [ %.lcssa1823, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ %.lcssa1233.us.lcssa.us.us1240.us.us.us, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %"offset_c.s1.r19$x.us.us.us.us.us.us" = phi i32 [ %206, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %139 = mul nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", %10
  %140 = add nsw i32 %t838.us.us.us.us.us, %139
  br i1 %133, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"for offset_c.s1.r19$z.r124.us.us.us.us.us.us":   ; preds = %"for offset_c.s1.r19$x.us.us.us.us.us.us", %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"
  %141 = phi <32 x i32> [ %196, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ %.lcssa1233.us1234.us.us.us.us.us, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us" = phi i32 [ %197, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %niter1829 = phi i32 [ %niter1829.nsub.7, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ %unroll_iter1828, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %142 = shl nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %143 = add nsw i32 %140, %142
  %144 = getelementptr inbounds i8, i8* %5, i32 %143
  %145 = bitcast i8* %144 to <32 x i32>*
  %146 = load <32 x i32>, <32 x i32>* %145, align 128, !tbaa !106
  %147 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %141, <32 x i32> %129, <32 x i32> %146) #11
  %148 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %149 = or i32 %148, 128
  %150 = add nsw i32 %140, %149
  %151 = getelementptr inbounds i8, i8* %5, i32 %150
  %152 = bitcast i8* %151 to <32 x i32>*
  %153 = load <32 x i32>, <32 x i32>* %152, align 128, !tbaa !106
  %154 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %147, <32 x i32> %129, <32 x i32> %153) #11
  %155 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %156 = or i32 %155, 256
  %157 = add nsw i32 %140, %156
  %158 = getelementptr inbounds i8, i8* %5, i32 %157
  %159 = bitcast i8* %158 to <32 x i32>*
  %160 = load <32 x i32>, <32 x i32>* %159, align 128, !tbaa !106
  %161 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %154, <32 x i32> %129, <32 x i32> %160) #11
  %162 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %163 = or i32 %162, 384
  %164 = add nsw i32 %140, %163
  %165 = getelementptr inbounds i8, i8* %5, i32 %164
  %166 = bitcast i8* %165 to <32 x i32>*
  %167 = load <32 x i32>, <32 x i32>* %166, align 128, !tbaa !106
  %168 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %161, <32 x i32> %129, <32 x i32> %167) #11
  %169 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %170 = or i32 %169, 512
  %171 = add nsw i32 %140, %170
  %172 = getelementptr inbounds i8, i8* %5, i32 %171
  %173 = bitcast i8* %172 to <32 x i32>*
  %174 = load <32 x i32>, <32 x i32>* %173, align 128, !tbaa !106
  %175 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %168, <32 x i32> %129, <32 x i32> %174) #11
  %176 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %177 = or i32 %176, 640
  %178 = add nsw i32 %140, %177
  %179 = getelementptr inbounds i8, i8* %5, i32 %178
  %180 = bitcast i8* %179 to <32 x i32>*
  %181 = load <32 x i32>, <32 x i32>* %180, align 128, !tbaa !106
  %182 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %175, <32 x i32> %129, <32 x i32> %181) #11
  %183 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %184 = or i32 %183, 768
  %185 = add nsw i32 %140, %184
  %186 = getelementptr inbounds i8, i8* %5, i32 %185
  %187 = bitcast i8* %186 to <32 x i32>*
  %188 = load <32 x i32>, <32 x i32>* %187, align 128, !tbaa !106
  %189 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %182, <32 x i32> %129, <32 x i32> %188) #11
  %190 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %191 = or i32 %190, 896
  %192 = add nsw i32 %140, %191
  %193 = getelementptr inbounds i8, i8* %5, i32 %192
  %194 = bitcast i8* %193 to <32 x i32>*
  %195 = load <32 x i32>, <32 x i32>* %194, align 128, !tbaa !106
  %196 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %189, <32 x i32> %129, <32 x i32> %195) #11
  %197 = add nuw nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 8
  %niter1829.nsub.7 = add i32 %niter1829, -8
  %niter1829.ncmp.7 = icmp eq i32 %niter1829.nsub.7, 0
  br i1 %niter1829.ncmp.7, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa": ; preds = %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us", %"for offset_c.s1.r19$x.us.us.us.us.us.us"
  %.lcssa1823.ph = phi <32 x i32> [ undef, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %196, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  %.unr = phi <32 x i32> [ %.lcssa1233.us1234.us.us.us.us.us, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %196, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.unr" = phi i32 [ 0, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %197, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  br i1 %lcmp.mod1826.not, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil"

"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil"
  %198 = phi <32 x i32> [ %204, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ], [ %.unr, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" = phi i32 [ %205, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ], [ %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.unr", %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ]
  %epil.iter1825 = phi i32 [ %epil.iter1825.sub, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ], [ %xtraiter1824, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ]
  %199 = shl nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", 7
  %200 = add nsw i32 %140, %199
  %201 = getelementptr inbounds i8, i8* %5, i32 %200
  %202 = bitcast i8* %201 to <32 x i32>*
  %203 = load <32 x i32>, <32 x i32>* %202, align 128, !tbaa !106
  %204 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %198, <32 x i32> %129, <32 x i32> %203) #11
  %205 = add nuw nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", 1
  %epil.iter1825.sub = add i32 %epil.iter1825, -1
  %epil.iter1825.cmp.not = icmp eq i32 %epil.iter1825.sub, 0
  br i1 %epil.iter1825.cmp.not, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", !llvm.loop !108

"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us": ; preds = %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa"
  %.lcssa1823 = phi <32 x i32> [ %.lcssa1823.ph, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ], [ %204, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ]
  %206 = add nuw nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", 1
  %.not745.us.us.us.us.us.us = icmp eq i32 %206, %9
  br i1 %.not745.us.us.us.us.us.us, label %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us"
  %207 = add nuw nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", 1
  %.not744.us.us.us.us.us = icmp eq i32 %207, %125
  br i1 %.not744.us.us.us.us.us, label %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", label %"for offset_c.s1.r19$y.us.us.us.us.us"

"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us": ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us"
  store <32 x i32> %.lcssa1823, <32 x i32>* %137, align 128, !tbaa !104
  %208 = add nuw nsw i32 %offset_c.s1.c.co.us.us.us, 1
  %.not743.us.us.us = icmp eq i32 %208, %122
  br i1 %.not743.us.us.us, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.us.us.us"

"consume bias_im_global_wrapper$0.thread":        ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %209 = zext i8 %filter_zero to i32
  br label %"consume offset_c"

"for offset_c.s2.c.c.preheader":                  ; preds = %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", %"for offset_c.s1.c.co.preheader", %"for offset_c.s0.c.c.preheader"
  %210 = zext i8 %filter_zero to i32
  %211 = zext i8 %input_zero to i32
  %212 = shl nuw nsw i32 %211, 2
  %213 = mul nuw nsw i32 %212, %210
  %214 = mul i32 %213, %7
  %t841.s = mul i32 %214, %9
  %215 = mul i32 %t841.s, %11
  %216 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %215) #11
  %217 = add nsw i32 %122, -1
  %xtraiter1830 = and i32 %122, 7
  %218 = icmp ult i32 %217, 7
  br i1 %218, label %"consume offset_c.loopexit.unr-lcssa", label %"for offset_c.s2.c.c.preheader.new"

"for offset_c.s2.c.c.preheader.new":              ; preds = %"for offset_c.s2.c.c.preheader"
  %unroll_iter1833 = and i32 %122, -8
  br label %"for offset_c.s2.c.c"

"for offset_c.s2.c.c":                            ; preds = %"for offset_c.s2.c.c", %"for offset_c.s2.c.c.preheader.new"
  %offset_c.s2.c.c = phi i32 [ 0, %"for offset_c.s2.c.c.preheader.new" ], [ %298, %"for offset_c.s2.c.c" ]
  %niter1834 = phi i32 [ %unroll_iter1833, %"for offset_c.s2.c.c.preheader.new" ], [ %niter1834.nsub.7, %"for offset_c.s2.c.c" ]
  %219 = shl nsw i32 %offset_c.s2.c.c, 5
  %220 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %219
  %221 = bitcast i32* %220 to <32 x i32>*
  %222 = load <32 x i32>, <32 x i32>* %221, align 128, !tbaa !100
  %223 = getelementptr inbounds i32, i32* %offset_c, i32 %219
  %224 = bitcast i32* %223 to <32 x i32>*
  %225 = load <32 x i32>, <32 x i32>* %224, align 128, !tbaa !104
  %226 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %225, <32 x i32> %222) #11
  %227 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %226) #11
  store <32 x i32> %227, <32 x i32>* %224, align 128, !tbaa !104
  %228 = shl i32 %offset_c.s2.c.c, 5
  %229 = or i32 %228, 32
  %230 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %229
  %231 = bitcast i32* %230 to <32 x i32>*
  %232 = load <32 x i32>, <32 x i32>* %231, align 128, !tbaa !100
  %233 = getelementptr inbounds i32, i32* %offset_c, i32 %229
  %234 = bitcast i32* %233 to <32 x i32>*
  %235 = load <32 x i32>, <32 x i32>* %234, align 128, !tbaa !104
  %236 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %235, <32 x i32> %232) #11
  %237 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %236) #11
  store <32 x i32> %237, <32 x i32>* %234, align 128, !tbaa !104
  %238 = shl i32 %offset_c.s2.c.c, 5
  %239 = or i32 %238, 64
  %240 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %239
  %241 = bitcast i32* %240 to <32 x i32>*
  %242 = load <32 x i32>, <32 x i32>* %241, align 128, !tbaa !100
  %243 = getelementptr inbounds i32, i32* %offset_c, i32 %239
  %244 = bitcast i32* %243 to <32 x i32>*
  %245 = load <32 x i32>, <32 x i32>* %244, align 128, !tbaa !104
  %246 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %245, <32 x i32> %242) #11
  %247 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %246) #11
  store <32 x i32> %247, <32 x i32>* %244, align 128, !tbaa !104
  %248 = shl i32 %offset_c.s2.c.c, 5
  %249 = or i32 %248, 96
  %250 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %249
  %251 = bitcast i32* %250 to <32 x i32>*
  %252 = load <32 x i32>, <32 x i32>* %251, align 128, !tbaa !100
  %253 = getelementptr inbounds i32, i32* %offset_c, i32 %249
  %254 = bitcast i32* %253 to <32 x i32>*
  %255 = load <32 x i32>, <32 x i32>* %254, align 128, !tbaa !104
  %256 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %255, <32 x i32> %252) #11
  %257 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %256) #11
  store <32 x i32> %257, <32 x i32>* %254, align 128, !tbaa !104
  %258 = shl i32 %offset_c.s2.c.c, 5
  %259 = or i32 %258, 128
  %260 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %259
  %261 = bitcast i32* %260 to <32 x i32>*
  %262 = load <32 x i32>, <32 x i32>* %261, align 128, !tbaa !100
  %263 = getelementptr inbounds i32, i32* %offset_c, i32 %259
  %264 = bitcast i32* %263 to <32 x i32>*
  %265 = load <32 x i32>, <32 x i32>* %264, align 128, !tbaa !104
  %266 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %265, <32 x i32> %262) #11
  %267 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %266) #11
  store <32 x i32> %267, <32 x i32>* %264, align 128, !tbaa !104
  %268 = shl i32 %offset_c.s2.c.c, 5
  %269 = or i32 %268, 160
  %270 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %269
  %271 = bitcast i32* %270 to <32 x i32>*
  %272 = load <32 x i32>, <32 x i32>* %271, align 128, !tbaa !100
  %273 = getelementptr inbounds i32, i32* %offset_c, i32 %269
  %274 = bitcast i32* %273 to <32 x i32>*
  %275 = load <32 x i32>, <32 x i32>* %274, align 128, !tbaa !104
  %276 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %275, <32 x i32> %272) #11
  %277 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %276) #11
  store <32 x i32> %277, <32 x i32>* %274, align 128, !tbaa !104
  %278 = shl i32 %offset_c.s2.c.c, 5
  %279 = or i32 %278, 192
  %280 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %279
  %281 = bitcast i32* %280 to <32 x i32>*
  %282 = load <32 x i32>, <32 x i32>* %281, align 128, !tbaa !100
  %283 = getelementptr inbounds i32, i32* %offset_c, i32 %279
  %284 = bitcast i32* %283 to <32 x i32>*
  %285 = load <32 x i32>, <32 x i32>* %284, align 128, !tbaa !104
  %286 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %285, <32 x i32> %282) #11
  %287 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %286) #11
  store <32 x i32> %287, <32 x i32>* %284, align 128, !tbaa !104
  %288 = shl i32 %offset_c.s2.c.c, 5
  %289 = or i32 %288, 224
  %290 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %289
  %291 = bitcast i32* %290 to <32 x i32>*
  %292 = load <32 x i32>, <32 x i32>* %291, align 128, !tbaa !100
  %293 = getelementptr inbounds i32, i32* %offset_c, i32 %289
  %294 = bitcast i32* %293 to <32 x i32>*
  %295 = load <32 x i32>, <32 x i32>* %294, align 128, !tbaa !104
  %296 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %295, <32 x i32> %292) #11
  %297 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %296) #11
  store <32 x i32> %297, <32 x i32>* %294, align 128, !tbaa !104
  %298 = add nuw nsw i32 %offset_c.s2.c.c, 8
  %niter1834.nsub.7 = add i32 %niter1834, -8
  %niter1834.ncmp.7 = icmp eq i32 %niter1834.nsub.7, 0
  br i1 %niter1834.ncmp.7, label %"consume offset_c.loopexit.unr-lcssa", label %"for offset_c.s2.c.c"

"consume offset_c.loopexit.unr-lcssa":            ; preds = %"for offset_c.s2.c.c", %"for offset_c.s2.c.c.preheader"
  %offset_c.s2.c.c.unr = phi i32 [ 0, %"for offset_c.s2.c.c.preheader" ], [ %298, %"for offset_c.s2.c.c" ]
  %lcmp.mod1832.not = icmp eq i32 %xtraiter1830, 0
  br i1 %lcmp.mod1832.not, label %"consume offset_c", label %"for offset_c.s2.c.c.epil"

"for offset_c.s2.c.c.epil":                       ; preds = %"consume offset_c.loopexit.unr-lcssa", %"for offset_c.s2.c.c.epil"
  %offset_c.s2.c.c.epil = phi i32 [ %308, %"for offset_c.s2.c.c.epil" ], [ %offset_c.s2.c.c.unr, %"consume offset_c.loopexit.unr-lcssa" ]
  %epil.iter1831 = phi i32 [ %epil.iter1831.sub, %"for offset_c.s2.c.c.epil" ], [ %xtraiter1830, %"consume offset_c.loopexit.unr-lcssa" ]
  %299 = shl nsw i32 %offset_c.s2.c.c.epil, 5
  %300 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %299
  %301 = bitcast i32* %300 to <32 x i32>*
  %302 = load <32 x i32>, <32 x i32>* %301, align 128, !tbaa !100
  %303 = getelementptr inbounds i32, i32* %offset_c, i32 %299
  %304 = bitcast i32* %303 to <32 x i32>*
  %305 = load <32 x i32>, <32 x i32>* %304, align 128, !tbaa !104
  %306 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %305, <32 x i32> %302) #11
  %307 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %216, <32 x i32> %306) #11
  store <32 x i32> %307, <32 x i32>* %304, align 128, !tbaa !104
  %308 = add nuw nsw i32 %offset_c.s2.c.c.epil, 1
  %epil.iter1831.sub = add i32 %epil.iter1831, -1
  %epil.iter1831.cmp.not = icmp eq i32 %epil.iter1831.sub, 0
  br i1 %epil.iter1831.cmp.not, label %"consume offset_c", label %"for offset_c.s2.c.c.epil", !llvm.loop !109

"consume offset_c":                               ; preds = %"consume offset_c.loopexit.unr-lcssa", %"for offset_c.s2.c.c.epil", %"consume bias_im_global_wrapper$0.thread"
  %309 = phi i32 [ %209, %"consume bias_im_global_wrapper$0.thread" ], [ %210, %"for offset_c.s2.c.c.epil" ], [ %210, %"consume offset_c.loopexit.unr-lcssa" ]
  %310 = icmp eq i32 %stride_x, 1
  %311 = icmp eq i32 %7, 1
  %312 = and i1 %310, %311
  %313 = icmp eq i32 %15, 4
  %314 = icmp eq i32 %17, 4
  %315 = and i1 %313, %314
  %t844 = and i1 %312, %315
  %t843.not = icmp eq i8 %filter_zero, 0
  br i1 %89, label %then_bb4, label %next_bb5

after_bb3:                                        ; preds = %"end for output.s0.y.rebased528", %"end for output.s0.y.rebased467.loopexit.us", %"end for output.s0.y.rebased390.loopexit.us", %"end for output.s0.y.rebased97.loopexit.us", %"end for output.s0.y.rebased.loopexit.us", %"for output.s0.b.rebased463.preheader", %"for output.s0.b.rebased386.preheader", %"for output.s0.b.rebased93.preheader", %"for output.s0.b.rebased.preheader", %next_bb462, %then_bb461, %then_bb384, %then_bb91, %then_bb4
  %tobool.not.i.not = icmp eq i8* %120, null
  br i1 %tobool.not.i.not, label %land.lhs.true.i847, label %if.then.i832

if.then.i832:                                     ; preds = %after_bb3
  call void @halide_free(i8* null, i8* nonnull %120) #15
  br label %land.lhs.true.i847

land.lhs.true.i847:                               ; preds = %after_bb3, %if.then.i832
  br i1 %cmp7.i, label %if.then.i848, label %call_destructor.exit843

if.then.i848:                                     ; preds = %land.lhs.true.i847
  call void @halide_free(i8* null, i8* nonnull %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0") #15
  br label %call_destructor.exit843

call_destructor.exit843:                          ; preds = %if.then.i848, %land.lhs.true.i847
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #15
  ret i32 0

then_bb4:                                         ; preds = %"consume offset_c"
  %316 = mul nsw i32 %19, %18
  %317 = mul nsw i32 %22, %20
  %318 = mul nsw i32 %17, %16
  %319 = add i32 %317, %316
  %t852 = add i32 %319, %318
  %320 = icmp sgt i32 %21, 0
  br i1 %320, label %"for output.s0.b.rebased.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.preheader":              ; preds = %then_bb4
  %321 = mul nsw i32 %17, %stride_x
  %322 = mul nsw i32 %321, 5
  %323 = shl nsw i32 %321, 2
  %324 = mul nsw i32 %321, 3
  %325 = shl nsw i32 %321, 1
  %326 = sub nsw i32 %stride_x, %16
  %327 = mul nsw i32 %326, %17
  %328 = icmp sgt i32 %29, 0
  %.neg1157 = mul i32 %30, %28
  %.neg1158 = mul i32 %27, %25
  %.neg1159 = mul i32 %31, %20
  %reass.add1161 = add i32 %.neg1157, %.neg1158
  %reass.add1162 = add i32 %reass.add1161, %.neg1159
  %329 = add nuw nsw i32 %26, 5
  %330 = ashr i32 %329, 31
  %331 = xor i32 %330, %329
  %332 = zext i32 %331 to i64
  %333 = mul nuw i64 %332, 2863311531
  %334 = lshr i64 %333, 34
  %335 = trunc i64 %334 to i32
  %336 = xor i32 %330, %335
  %337 = icmp sgt i32 %336, 0
  %b14 = add nsw i32 %26, -6
  %338 = icmp sgt i32 %11, 0
  %339 = icmp sgt i32 %9, 0
  %340 = icmp sgt i32 %7, 0
  %341 = ashr i32 %4, 7
  %342 = icmp sgt i32 %4, 127
  %343 = icmp sgt i32 %output_shift, 0
  %344 = select i1 %343, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %345 = add nsw i32 %output_shift, -1
  %346 = zext i8 %output_zero to i16
  %347 = insertelement <128 x i16> undef, i16 %346, i32 0
  %348 = shufflevector <128 x i16> %347, <128 x i16> undef, <128 x i32> zeroinitializer
  %349 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %350 = shufflevector <128 x i8> %349, <128 x i8> undef, <128 x i32> zeroinitializer
  %351 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %352 = shufflevector <128 x i8> %351, <128 x i8> undef, <128 x i32> zeroinitializer
  %353 = bitcast <128 x i16> %348 to <64 x i32>
  %354 = bitcast <128 x i8> %350 to <32 x i32>
  %355 = bitcast <128 x i8> %352 to <32 x i32>
  br i1 %328, label %"for output.s0.b.rebased.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.us.preheader":           ; preds = %"for output.s0.b.rebased.preheader"
  %356 = add i32 %318, %316
  %357 = add i32 %9, -1
  %brmerge1667.demorgan = and i1 %339, %340
  %xtraiter1908 = and i32 %7, 1
  %358 = icmp eq i32 %7, 1
  %unroll_iter1910 = and i32 %7, -2
  %lcmp.mod1909.not = icmp eq i32 %xtraiter1908, 0
  %xtraiter1912 = and i32 %9, 3
  %359 = icmp ult i32 %357, 3
  %unroll_iter1916 = and i32 %9, -4
  %lcmp.mod1914.not = icmp eq i32 %xtraiter1912, 0
  br label %"for output.s0.b.rebased.us"

"for output.s0.b.rebased.us":                     ; preds = %"for output.s0.b.rebased.us.preheader", %"end for output.s0.y.rebased.loopexit.us"
  %sum_input674.sroa.0.0.us = phi <6 x i32> [ %.us-phi1482.us, %"end for output.s0.y.rebased.loopexit.us" ], [ undef, %"for output.s0.b.rebased.us.preheader" ]
  %output.s0.b.rebased.us = phi i32 [ %366, %"end for output.s0.y.rebased.loopexit.us" ], [ 0, %"for output.s0.b.rebased.us.preheader" ]
  %360 = add nsw i32 %output.s0.b.rebased.us, %20
  %361 = mul nsw i32 %360, %31
  %362 = sub i32 %361, %reass.add1162
  %363 = mul nsw i32 %360, %22
  %364 = sub i32 %363, %319
  %365 = sub nsw i32 %363, %t852
  br i1 %337, label %"for output.s0.y.rebased.us.us", label %"end for output.s0.y.rebased.loopexit.us", !prof !96

"end for output.s0.y.rebased.loopexit.us":        ; preds = %"end for output.s0.x.xo.loopexit.us.us", %"for output.s0.b.rebased.us"
  %.us-phi1482.us = phi <6 x i32> [ %sum_input674.sroa.0.0.us, %"for output.s0.b.rebased.us" ], [ %sum_input674.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ]
  %366 = add nuw nsw i32 %output.s0.b.rebased.us, 1
  %.not730.us = icmp eq i32 %366, %21
  br i1 %.not730.us, label %after_bb3, label %"for output.s0.b.rebased.us"

"for output.s0.y.rebased.us.us":                  ; preds = %"for output.s0.b.rebased.us", %"end for output.s0.x.xo.loopexit.us.us"
  %sum_input674.sroa.0.1.us.us = phi <6 x i32> [ %sum_input674.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ], [ %sum_input674.sroa.0.0.us, %"for output.s0.b.rebased.us" ]
  %output.s0.y.rebased.us.us = phi i32 [ %890, %"end for output.s0.x.xo.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased.us" ]
  %367 = add nsw i32 %output.s0.y.rebased.us.us, %28
  %368 = mul nsw i32 %367, %30
  %t877.us.us = add i32 %362, %368
  %369 = mul nsw i32 %367, %stride_y
  br label %"for output.s0.x.xo.us.us"

"for output.s0.x.xo.us.us":                       ; preds = %"end for output.s0.c.co.us.us", %"for output.s0.y.rebased.us.us"
  %sum_input674.sroa.0.3.us.us = phi <6 x i32> [ %sum_input674.sroa.0.13.us.us, %"end for output.s0.c.co.us.us" ], [ %sum_input674.sroa.0.1.us.us, %"for output.s0.y.rebased.us.us" ]
  %output.s0.x.xo.us.us = phi i32 [ %838, %"end for output.s0.c.co.us.us" ], [ 0, %"for output.s0.y.rebased.us.us" ]
  %a12.us.us = mul nsw i32 %output.s0.x.xo.us.us, 6
  %370 = icmp slt i32 %a12.us.us, %b14
  %output.s0.x.x.base.s.us.us = select i1 %370, i32 %a12.us.us, i32 %b14
  br i1 %t843.not, label %"consume sum_input.us.us", label %then_bb7.us.us

then_bb7.us.us:                                   ; preds = %"for output.s0.x.xo.us.us"
  br i1 %t844, label %then_bb10.us.us, label %next_bb11.us.us

next_bb11.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %338, label %"for sum_input.s1.r19$y12.preheader.us.us", label %"consume sum_input.us.us", !prof !96

then_bb10.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %338, label %"for sum_input.s1.r19$y.preheader.us.us", label %"consume sum_input.us.us", !prof !96

"for sum_input.s1.r19$y.us.us":                   ; preds = %"for sum_input.s1.r19$y.preheader.us.us", %"end for sum_input.s1.r19$x.us.us"
  %sum_input674.sroa.0.5.us.us = phi <6 x i32> [ %sum_input674.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y.preheader.us.us" ]
  %"sum_input.s1.r19$y.us.us" = phi i32 [ %481, %"end for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$y.preheader.us.us" ]
  br i1 %339, label %"for sum_input.s1.r19$x.preheader.us.us", label %"end for sum_input.s1.r19$x.us.us", !prof !96

"for sum_input.s1.r19$x.us.us":                   ; preds = %"for sum_input.s1.r19$x.preheader.us.us", %"for sum_input.s1.r19$x.us.us"
  %sum_input674.sroa.0.6.us.us = phi <6 x i32> [ %457, %"for sum_input.s1.r19$x.us.us" ], [ %sum_input674.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %"sum_input.s1.r19$x.us.us" = phi i32 [ %458, %"for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %niter1917 = phi i32 [ %niter1917.nsub.3, %"for sum_input.s1.r19$x.us.us" ], [ %unroll_iter1916, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %371 = mul nsw i32 %"sum_input.s1.r19$x.us.us", %dilation_x
  %reass.add1167.us.us = add i32 %887, %371
  %reass.mul1168.us.us = shl i32 %reass.add1167.us.us, 2
  %372 = add i32 %t880.us.us, %reass.mul1168.us.us
  %373 = getelementptr inbounds i8, i8* %13, i32 %372
  %374 = bitcast i8* %373 to <24 x i8>*
  %375 = load <24 x i8>, <24 x i8>* %374, align 4, !tbaa !110
  %t1220.us.us = zext <24 x i8> %375 to <24 x i16>
  %376 = shufflevector <24 x i16> %t1220.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %377 = bitcast <64 x i16> %376 to <32 x i32>
  %378 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %377)
  %379 = bitcast <32 x i32> %378 to <64 x i16>
  %380 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %377)
  %381 = bitcast <32 x i32> %380 to <64 x i16>
  %382 = add <64 x i16> %381, %379
  %383 = shufflevector <64 x i16> %382, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us = zext <12 x i16> %383 to <12 x i32>
  %384 = shufflevector <12 x i32> %t1219.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %385 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %384, i32 -4)
  %386 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %385)
  %387 = shufflevector <32 x i32> %386, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %388 = add nsw <6 x i32> %387, %sum_input674.sroa.0.6.us.us
  %389 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %385)
  %390 = shufflevector <32 x i32> %389, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %391 = add nsw <6 x i32> %388, %390
  %392 = or i32 %"sum_input.s1.r19$x.us.us", 1
  %393 = mul nsw i32 %392, %dilation_x
  %reass.add1167.us.us.1 = add i32 %887, %393
  %reass.mul1168.us.us.1 = shl i32 %reass.add1167.us.us.1, 2
  %394 = add i32 %t880.us.us, %reass.mul1168.us.us.1
  %395 = getelementptr inbounds i8, i8* %13, i32 %394
  %396 = bitcast i8* %395 to <24 x i8>*
  %397 = load <24 x i8>, <24 x i8>* %396, align 4, !tbaa !110
  %t1220.us.us.1 = zext <24 x i8> %397 to <24 x i16>
  %398 = shufflevector <24 x i16> %t1220.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %399 = bitcast <64 x i16> %398 to <32 x i32>
  %400 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %399)
  %401 = bitcast <32 x i32> %400 to <64 x i16>
  %402 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %399)
  %403 = bitcast <32 x i32> %402 to <64 x i16>
  %404 = add <64 x i16> %403, %401
  %405 = shufflevector <64 x i16> %404, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.1 = zext <12 x i16> %405 to <12 x i32>
  %406 = shufflevector <12 x i32> %t1219.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %407 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %406, i32 -4)
  %408 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %407)
  %409 = shufflevector <32 x i32> %408, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %410 = add nsw <6 x i32> %409, %391
  %411 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %407)
  %412 = shufflevector <32 x i32> %411, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %413 = add nsw <6 x i32> %410, %412
  %414 = or i32 %"sum_input.s1.r19$x.us.us", 2
  %415 = mul nsw i32 %414, %dilation_x
  %reass.add1167.us.us.2 = add i32 %887, %415
  %reass.mul1168.us.us.2 = shl i32 %reass.add1167.us.us.2, 2
  %416 = add i32 %t880.us.us, %reass.mul1168.us.us.2
  %417 = getelementptr inbounds i8, i8* %13, i32 %416
  %418 = bitcast i8* %417 to <24 x i8>*
  %419 = load <24 x i8>, <24 x i8>* %418, align 4, !tbaa !110
  %t1220.us.us.2 = zext <24 x i8> %419 to <24 x i16>
  %420 = shufflevector <24 x i16> %t1220.us.us.2, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %421 = bitcast <64 x i16> %420 to <32 x i32>
  %422 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %421)
  %423 = bitcast <32 x i32> %422 to <64 x i16>
  %424 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %421)
  %425 = bitcast <32 x i32> %424 to <64 x i16>
  %426 = add <64 x i16> %425, %423
  %427 = shufflevector <64 x i16> %426, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.2 = zext <12 x i16> %427 to <12 x i32>
  %428 = shufflevector <12 x i32> %t1219.us.us.2, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %429 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %428, i32 -4)
  %430 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %429)
  %431 = shufflevector <32 x i32> %430, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %432 = add nsw <6 x i32> %431, %413
  %433 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %429)
  %434 = shufflevector <32 x i32> %433, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %435 = add nsw <6 x i32> %432, %434
  %436 = or i32 %"sum_input.s1.r19$x.us.us", 3
  %437 = mul nsw i32 %436, %dilation_x
  %reass.add1167.us.us.3 = add i32 %887, %437
  %reass.mul1168.us.us.3 = shl i32 %reass.add1167.us.us.3, 2
  %438 = add i32 %t880.us.us, %reass.mul1168.us.us.3
  %439 = getelementptr inbounds i8, i8* %13, i32 %438
  %440 = bitcast i8* %439 to <24 x i8>*
  %441 = load <24 x i8>, <24 x i8>* %440, align 4, !tbaa !110
  %t1220.us.us.3 = zext <24 x i8> %441 to <24 x i16>
  %442 = shufflevector <24 x i16> %t1220.us.us.3, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %443 = bitcast <64 x i16> %442 to <32 x i32>
  %444 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %443)
  %445 = bitcast <32 x i32> %444 to <64 x i16>
  %446 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %443)
  %447 = bitcast <32 x i32> %446 to <64 x i16>
  %448 = add <64 x i16> %447, %445
  %449 = shufflevector <64 x i16> %448, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.3 = zext <12 x i16> %449 to <12 x i32>
  %450 = shufflevector <12 x i32> %t1219.us.us.3, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %451 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %450, i32 -4)
  %452 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %451)
  %453 = shufflevector <32 x i32> %452, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %454 = add nsw <6 x i32> %453, %435
  %455 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %451)
  %456 = shufflevector <32 x i32> %455, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %457 = add nsw <6 x i32> %454, %456
  %458 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us", 4
  %niter1917.nsub.3 = add i32 %niter1917, -4
  %niter1917.ncmp.3 = icmp eq i32 %niter1917.nsub.3, 0
  br i1 %niter1917.ncmp.3, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x.us.us", %"for sum_input.s1.r19$x.preheader.us.us"
  %.lcssa1757.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %457, %"for sum_input.s1.r19$x.us.us" ]
  %sum_input674.sroa.0.6.us.us.unr = phi <6 x i32> [ %sum_input674.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %457, %"for sum_input.s1.r19$x.us.us" ]
  %"sum_input.s1.r19$x.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %458, %"for sum_input.s1.r19$x.us.us" ]
  br i1 %lcmp.mod1914.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil"

"for sum_input.s1.r19$x.us.us.epil":              ; preds = %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x.us.us.epil"
  %sum_input674.sroa.0.6.us.us.epil = phi <6 x i32> [ %479, %"for sum_input.s1.r19$x.us.us.epil" ], [ %sum_input674.sroa.0.6.us.us.unr, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x.us.us.epil" = phi i32 [ %480, %"for sum_input.s1.r19$x.us.us.epil" ], [ %"sum_input.s1.r19$x.us.us.unr", %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %epil.iter1913 = phi i32 [ %epil.iter1913.sub, %"for sum_input.s1.r19$x.us.us.epil" ], [ %xtraiter1912, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %459 = mul nsw i32 %"sum_input.s1.r19$x.us.us.epil", %dilation_x
  %reass.add1167.us.us.epil = add i32 %887, %459
  %reass.mul1168.us.us.epil = shl i32 %reass.add1167.us.us.epil, 2
  %460 = add i32 %t880.us.us, %reass.mul1168.us.us.epil
  %461 = getelementptr inbounds i8, i8* %13, i32 %460
  %462 = bitcast i8* %461 to <24 x i8>*
  %463 = load <24 x i8>, <24 x i8>* %462, align 4, !tbaa !110
  %t1220.us.us.epil = zext <24 x i8> %463 to <24 x i16>
  %464 = shufflevector <24 x i16> %t1220.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %465 = bitcast <64 x i16> %464 to <32 x i32>
  %466 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %465)
  %467 = bitcast <32 x i32> %466 to <64 x i16>
  %468 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %465)
  %469 = bitcast <32 x i32> %468 to <64 x i16>
  %470 = add <64 x i16> %469, %467
  %471 = shufflevector <64 x i16> %470, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.epil = zext <12 x i16> %471 to <12 x i32>
  %472 = shufflevector <12 x i32> %t1219.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %473 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %472, i32 -4)
  %474 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %473)
  %475 = shufflevector <32 x i32> %474, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %476 = add nsw <6 x i32> %475, %sum_input674.sroa.0.6.us.us.epil
  %477 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %473)
  %478 = shufflevector <32 x i32> %477, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %479 = add nsw <6 x i32> %476, %478
  %480 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us.epil", 1
  %epil.iter1913.sub = add i32 %epil.iter1913, -1
  %epil.iter1913.cmp.not = icmp eq i32 %epil.iter1913.sub, 0
  br i1 %epil.iter1913.cmp.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil", !llvm.loop !112

"end for sum_input.s1.r19$x.us.us":               ; preds = %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x.us.us.epil", %"for sum_input.s1.r19$y.us.us"
  %sum_input674.sroa.0.7.us.us = phi <6 x i32> [ %sum_input674.sroa.0.5.us.us, %"for sum_input.s1.r19$y.us.us" ], [ %.lcssa1757.ph, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ], [ %479, %"for sum_input.s1.r19$x.us.us.epil" ]
  %481 = add nuw nsw i32 %"sum_input.s1.r19$y.us.us", 1
  %.not740.us.us = icmp eq i32 %481, %11
  br i1 %.not740.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y.us.us"

"consume sum_input.us.us":                        ; preds = %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x.us.us", %"for sum_input.s1.r19$y12.preheader.us.us", %then_bb10.us.us, %next_bb11.us.us, %"for output.s0.x.xo.us.us"
  %sum_input674.sroa.0.13.us.us = phi <6 x i32> [ %sum_input674.sroa.0.3.us.us, %"for output.s0.x.xo.us.us" ], [ zeroinitializer, %then_bb10.us.us ], [ zeroinitializer, %next_bb11.us.us ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ], [ %sum_input674.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ]
  br i1 %342, label %"for output.s0.c.co.preheader.us.us", label %"end for output.s0.c.co.us.us", !prof !96

"for output.s0.c.co.us.us":                       ; preds = %"for output.s0.c.co.preheader.us.us", %"consume convolved.us.us"
  %output.s0.c.co.us.us = phi i32 [ %837, %"consume convolved.us.us" ], [ 0, %"for output.s0.c.co.preheader.us.us" ]
  %482 = shl nsw i32 %output.s0.c.co.us.us, 7
  %483 = getelementptr inbounds i32, i32* %offset_c, i32 %482
  %484 = bitcast i32* %483 to <32 x i32>*
  %485 = load <32 x i32>, <32 x i32>* %484, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb19.us.us, label %next_bb20.us.us

next_bb20.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %486 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %859) #11
  %487 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %485, <32 x i32> %486) #11
  %488 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %860) #11
  %489 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %485, <32 x i32> %488) #11
  %490 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %861) #11
  %491 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %485, <32 x i32> %490) #11
  %492 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %862) #11
  %493 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %485, <32 x i32> %492) #11
  %494 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %863) #11
  %495 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %485, <32 x i32> %494) #11
  %496 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %864) #11
  %497 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %485, <32 x i32> %496) #11
  %498 = getelementptr inbounds i32, i32* %483, i32 32
  %499 = bitcast i32* %498 to <32 x i32>*
  %500 = load <32 x i32>, <32 x i32>* %499, align 128, !tbaa !104
  %501 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %500, <32 x i32> %486) #11
  %502 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %500, <32 x i32> %488) #11
  %503 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %500, <32 x i32> %490) #11
  %504 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %500, <32 x i32> %492) #11
  %505 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %500, <32 x i32> %494) #11
  %506 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %500, <32 x i32> %496) #11
  %507 = getelementptr inbounds i32, i32* %483, i32 64
  %508 = bitcast i32* %507 to <32 x i32>*
  %509 = load <32 x i32>, <32 x i32>* %508, align 128, !tbaa !104
  %510 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %509, <32 x i32> %486) #11
  %511 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %509, <32 x i32> %488) #11
  %512 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %509, <32 x i32> %490) #11
  %513 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %509, <32 x i32> %492) #11
  %514 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %509, <32 x i32> %494) #11
  %515 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %509, <32 x i32> %496) #11
  %516 = getelementptr inbounds i32, i32* %483, i32 96
  %517 = bitcast i32* %516 to <32 x i32>*
  %518 = load <32 x i32>, <32 x i32>* %517, align 128, !tbaa !104
  %519 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %518, <32 x i32> %486) #11
  %520 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %518, <32 x i32> %488) #11
  %521 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %518, <32 x i32> %490) #11
  %522 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %518, <32 x i32> %492) #11
  %523 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %518, <32 x i32> %494) #11
  %524 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %518, <32 x i32> %496) #11
  br label %after_bb18.us.us

then_bb19.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %525 = getelementptr inbounds i32, i32* %483, i32 32
  %526 = bitcast i32* %525 to <32 x i32>*
  %527 = load <32 x i32>, <32 x i32>* %526, align 128, !tbaa !104
  %528 = getelementptr inbounds i32, i32* %483, i32 64
  %529 = bitcast i32* %528 to <32 x i32>*
  %530 = load <32 x i32>, <32 x i32>* %529, align 128, !tbaa !104
  %531 = getelementptr inbounds i32, i32* %483, i32 96
  %532 = bitcast i32* %531 to <32 x i32>*
  %533 = load <32 x i32>, <32 x i32>* %532, align 128, !tbaa !104
  br label %after_bb18.us.us

after_bb18.us.us:                                 ; preds = %then_bb19.us.us, %next_bb20.us.us
  %convolved673.sroa.208.0.us.us = phi <32 x i32> [ %533, %then_bb19.us.us ], [ %524, %next_bb20.us.us ]
  %convolved673.sroa.203.0.us.us = phi <32 x i32> [ %530, %then_bb19.us.us ], [ %515, %next_bb20.us.us ]
  %convolved673.sroa.198.0.us.us = phi <32 x i32> [ %527, %then_bb19.us.us ], [ %506, %next_bb20.us.us ]
  %convolved673.sroa.193.0.us.us = phi <32 x i32> [ %485, %then_bb19.us.us ], [ %497, %next_bb20.us.us ]
  %convolved673.sroa.188.0.us.us = phi <32 x i32> [ %533, %then_bb19.us.us ], [ %523, %next_bb20.us.us ]
  %convolved673.sroa.183.0.us.us = phi <32 x i32> [ %530, %then_bb19.us.us ], [ %514, %next_bb20.us.us ]
  %convolved673.sroa.178.0.us.us = phi <32 x i32> [ %527, %then_bb19.us.us ], [ %505, %next_bb20.us.us ]
  %convolved673.sroa.173.0.us.us = phi <32 x i32> [ %485, %then_bb19.us.us ], [ %495, %next_bb20.us.us ]
  %convolved673.sroa.168.0.us.us = phi <32 x i32> [ %533, %then_bb19.us.us ], [ %522, %next_bb20.us.us ]
  %convolved673.sroa.163.0.us.us = phi <32 x i32> [ %530, %then_bb19.us.us ], [ %513, %next_bb20.us.us ]
  %convolved673.sroa.158.0.us.us = phi <32 x i32> [ %527, %then_bb19.us.us ], [ %504, %next_bb20.us.us ]
  %convolved673.sroa.153.0.us.us = phi <32 x i32> [ %485, %then_bb19.us.us ], [ %493, %next_bb20.us.us ]
  %convolved673.sroa.148.0.us.us = phi <32 x i32> [ %533, %then_bb19.us.us ], [ %521, %next_bb20.us.us ]
  %convolved673.sroa.143.0.us.us = phi <32 x i32> [ %530, %then_bb19.us.us ], [ %512, %next_bb20.us.us ]
  %convolved673.sroa.138.0.us.us = phi <32 x i32> [ %527, %then_bb19.us.us ], [ %503, %next_bb20.us.us ]
  %convolved673.sroa.133.0.us.us = phi <32 x i32> [ %485, %then_bb19.us.us ], [ %491, %next_bb20.us.us ]
  %convolved673.sroa.123.0.us.us = phi <32 x i32> [ %533, %then_bb19.us.us ], [ %520, %next_bb20.us.us ]
  %convolved673.sroa.113.0.us.us = phi <32 x i32> [ %530, %then_bb19.us.us ], [ %511, %next_bb20.us.us ]
  %convolved673.sroa.103.0.us.us = phi <32 x i32> [ %527, %then_bb19.us.us ], [ %502, %next_bb20.us.us ]
  %convolved673.sroa.93.0.us.us = phi <32 x i32> [ %485, %then_bb19.us.us ], [ %489, %next_bb20.us.us ]
  %convolved673.sroa.78.0.us.us = phi <32 x i32> [ %533, %then_bb19.us.us ], [ %519, %next_bb20.us.us ]
  %convolved673.sroa.63.0.us.us = phi <32 x i32> [ %530, %then_bb19.us.us ], [ %510, %next_bb20.us.us ]
  %convolved673.sroa.48.0.us.us = phi <32 x i32> [ %527, %then_bb19.us.us ], [ %501, %next_bb20.us.us ]
  %convolved673.sroa.0.0.us.us = phi <32 x i32> [ %485, %then_bb19.us.us ], [ %487, %next_bb20.us.us ]
  br i1 %338, label %"for convolved.s1.r19$y.preheader.us.us", label %"consume convolved.us.us", !prof !96

"for convolved.s1.r19$y.us.us":                   ; preds = %"for convolved.s1.r19$y.preheader.us.us", %"end for convolved.s1.r19$x.us.us"
  %convolved673.sroa.208.1.us.us = phi <32 x i32> [ %convolved673.sroa.208.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.208.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.203.1.us.us = phi <32 x i32> [ %convolved673.sroa.203.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.203.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.198.1.us.us = phi <32 x i32> [ %convolved673.sroa.198.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.198.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.193.1.us.us = phi <32 x i32> [ %convolved673.sroa.193.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.193.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.188.1.us.us = phi <32 x i32> [ %convolved673.sroa.188.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.188.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.183.1.us.us = phi <32 x i32> [ %convolved673.sroa.183.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.183.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.178.1.us.us = phi <32 x i32> [ %convolved673.sroa.178.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.178.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.173.1.us.us = phi <32 x i32> [ %convolved673.sroa.173.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.173.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.168.1.us.us = phi <32 x i32> [ %convolved673.sroa.168.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.168.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.163.1.us.us = phi <32 x i32> [ %convolved673.sroa.163.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.163.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.158.1.us.us = phi <32 x i32> [ %convolved673.sroa.158.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.158.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.153.1.us.us = phi <32 x i32> [ %convolved673.sroa.153.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.153.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.148.1.us.us = phi <32 x i32> [ %convolved673.sroa.148.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.148.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.143.1.us.us = phi <32 x i32> [ %convolved673.sroa.143.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.143.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.138.1.us.us = phi <32 x i32> [ %convolved673.sroa.138.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.138.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.133.1.us.us = phi <32 x i32> [ %convolved673.sroa.133.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.133.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.123.1.us.us = phi <32 x i32> [ %convolved673.sroa.123.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.123.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.113.1.us.us = phi <32 x i32> [ %convolved673.sroa.113.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.113.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.103.1.us.us = phi <32 x i32> [ %convolved673.sroa.103.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.103.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.93.1.us.us = phi <32 x i32> [ %convolved673.sroa.93.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.93.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.78.1.us.us = phi <32 x i32> [ %convolved673.sroa.78.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.78.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.63.1.us.us = phi <32 x i32> [ %convolved673.sroa.63.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.63.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.48.1.us.us = phi <32 x i32> [ %convolved673.sroa.48.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.48.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved673.sroa.0.1.us.us = phi <32 x i32> [ %convolved673.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved673.sroa.0.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %"convolved.s1.r19$y.us.us" = phi i32 [ %618, %"end for convolved.s1.r19$x.us.us" ], [ 0, %"for convolved.s1.r19$y.preheader.us.us" ]
  %534 = mul nsw i32 %"convolved.s1.r19$y.us.us", %dilation_y
  %535 = add nsw i32 %534, %369
  %536 = mul nsw i32 %535, %19
  %t913.us.us = add nsw i32 %536, %365
  %537 = mul nsw i32 %"convolved.s1.r19$y.us.us", %12
  br i1 %339, label %"for convolved.s1.r19$x.us.us", label %"end for convolved.s1.r19$x.us.us", !prof !96

"for convolved.s1.r19$x.us.us":                   ; preds = %"for convolved.s1.r19$y.us.us", %"end for convolved.s1.r19$z.r124.us.us"
  %convolved673.sroa.208.2.us.us = phi <32 x i32> [ %convolved673.sroa.208.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.208.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.203.2.us.us = phi <32 x i32> [ %convolved673.sroa.203.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.203.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.198.2.us.us = phi <32 x i32> [ %convolved673.sroa.198.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.198.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.193.2.us.us = phi <32 x i32> [ %convolved673.sroa.193.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.193.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.188.2.us.us = phi <32 x i32> [ %convolved673.sroa.188.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.188.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.183.2.us.us = phi <32 x i32> [ %convolved673.sroa.183.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.183.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.178.2.us.us = phi <32 x i32> [ %convolved673.sroa.178.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.178.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.173.2.us.us = phi <32 x i32> [ %convolved673.sroa.173.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.173.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.168.2.us.us = phi <32 x i32> [ %convolved673.sroa.168.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.168.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.163.2.us.us = phi <32 x i32> [ %convolved673.sroa.163.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.163.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.158.2.us.us = phi <32 x i32> [ %convolved673.sroa.158.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.158.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.153.2.us.us = phi <32 x i32> [ %convolved673.sroa.153.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.153.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.148.2.us.us = phi <32 x i32> [ %convolved673.sroa.148.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.148.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.143.2.us.us = phi <32 x i32> [ %convolved673.sroa.143.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.143.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.138.2.us.us = phi <32 x i32> [ %convolved673.sroa.138.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.138.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.133.2.us.us = phi <32 x i32> [ %convolved673.sroa.133.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.133.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.123.2.us.us = phi <32 x i32> [ %convolved673.sroa.123.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.123.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.113.2.us.us = phi <32 x i32> [ %convolved673.sroa.113.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.113.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.103.2.us.us = phi <32 x i32> [ %convolved673.sroa.103.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.103.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.93.2.us.us = phi <32 x i32> [ %convolved673.sroa.93.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.93.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.78.2.us.us = phi <32 x i32> [ %convolved673.sroa.78.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.78.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.63.2.us.us = phi <32 x i32> [ %convolved673.sroa.63.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.63.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.48.2.us.us = phi <32 x i32> [ %convolved673.sroa.48.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.48.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved673.sroa.0.2.us.us = phi <32 x i32> [ %convolved673.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %"convolved.s1.r19$x.us.us" = phi i32 [ %617, %"end for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$y.us.us" ]
  %538 = mul nsw i32 %"convolved.s1.r19$x.us.us", %dilation_x
  %539 = mul nsw i32 %"convolved.s1.r19$x.us.us", %10
  %t920.us.us = add i32 %539, %537
  br i1 %340, label %"for convolved.s1.r19$z.r124.preheader.us.us", label %"end for convolved.s1.r19$z.r124.us.us", !prof !96

"for convolved.s1.r19$z.r124.us.us":              ; preds = %"for convolved.s1.r19$z.r124.preheader.us.us", %"for convolved.s1.r19$z.r124.us.us"
  %convolved673.sroa.208.4.us.us = phi <32 x i32> [ %615, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.208.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.203.4.us.us = phi <32 x i32> [ %614, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.203.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.198.4.us.us = phi <32 x i32> [ %613, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.198.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.193.4.us.us = phi <32 x i32> [ %612, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.193.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.188.4.us.us = phi <32 x i32> [ %606, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.188.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.183.4.us.us = phi <32 x i32> [ %605, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.183.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.178.4.us.us = phi <32 x i32> [ %604, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.178.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.173.4.us.us = phi <32 x i32> [ %603, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.173.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.168.4.us.us = phi <32 x i32> [ %597, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.168.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.163.4.us.us = phi <32 x i32> [ %596, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.163.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.158.4.us.us = phi <32 x i32> [ %595, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.158.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.153.4.us.us = phi <32 x i32> [ %594, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.153.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.148.4.us.us = phi <32 x i32> [ %588, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.148.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.143.4.us.us = phi <32 x i32> [ %587, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.143.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.138.4.us.us = phi <32 x i32> [ %586, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.138.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.133.4.us.us = phi <32 x i32> [ %585, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.133.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.123.4.us.us = phi <32 x i32> [ %579, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.123.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.113.4.us.us = phi <32 x i32> [ %578, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.113.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.103.4.us.us = phi <32 x i32> [ %577, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.103.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.93.4.us.us = phi <32 x i32> [ %576, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.93.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.78.4.us.us = phi <32 x i32> [ %570, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.78.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.63.4.us.us = phi <32 x i32> [ %565, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.63.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.48.4.us.us = phi <32 x i32> [ %560, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.48.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved673.sroa.0.4.us.us = phi <32 x i32> [ %554, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved673.sroa.0.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %"convolved.s1.r19$z.r124.us.us" = phi i32 [ %616, %"for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %540 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 2
  %541 = add i32 %540, %t913.us.us
  %542 = add i32 %541, %839
  %543 = getelementptr inbounds i8, i8* %13, i32 %542
  %544 = bitcast i8* %543 to i32*
  %545 = load i32, i32* %544, align 4, !tbaa !110
  %546 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 5
  %547 = add nsw i32 %546, %855
  %548 = shl nsw i32 %547, 2
  %549 = add nsw i32 %t920.us.us, %548
  %550 = getelementptr inbounds i8, i8* %5, i32 %549
  %551 = bitcast i8* %550 to <32 x i32>*
  %552 = load <32 x i32>, <32 x i32>* %551, align 128, !tbaa !106
  %553 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %545) #11
  %554 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.4.us.us, <32 x i32> %552, <32 x i32> %553) #11
  %555 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 7
  %556 = add i32 %840, %555
  %557 = getelementptr inbounds i8, i8* %5, i32 %556
  %558 = bitcast i8* %557 to <32 x i32>*
  %559 = load <32 x i32>, <32 x i32>* %558, align 128, !tbaa !106
  %560 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.48.4.us.us, <32 x i32> %559, <32 x i32> %553) #11
  %561 = add i32 %841, %555
  %562 = getelementptr inbounds i8, i8* %5, i32 %561
  %563 = bitcast i8* %562 to <32 x i32>*
  %564 = load <32 x i32>, <32 x i32>* %563, align 128, !tbaa !106
  %565 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.63.4.us.us, <32 x i32> %564, <32 x i32> %553) #11
  %566 = add i32 %842, %555
  %567 = getelementptr inbounds i8, i8* %5, i32 %566
  %568 = bitcast i8* %567 to <32 x i32>*
  %569 = load <32 x i32>, <32 x i32>* %568, align 128, !tbaa !106
  %570 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.78.4.us.us, <32 x i32> %569, <32 x i32> %553) #11
  %571 = add i32 %541, %843
  %572 = getelementptr inbounds i8, i8* %13, i32 %571
  %573 = bitcast i8* %572 to i32*
  %574 = load i32, i32* %573, align 4, !tbaa !110
  %575 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %574) #11
  %576 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.93.4.us.us, <32 x i32> %552, <32 x i32> %575) #11
  %577 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.103.4.us.us, <32 x i32> %559, <32 x i32> %575) #11
  %578 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.113.4.us.us, <32 x i32> %564, <32 x i32> %575) #11
  %579 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.123.4.us.us, <32 x i32> %569, <32 x i32> %575) #11
  %580 = add i32 %541, %844
  %581 = getelementptr inbounds i8, i8* %13, i32 %580
  %582 = bitcast i8* %581 to i32*
  %583 = load i32, i32* %582, align 4, !tbaa !110
  %584 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %583) #11
  %585 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.133.4.us.us, <32 x i32> %552, <32 x i32> %584) #11
  %586 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.138.4.us.us, <32 x i32> %559, <32 x i32> %584) #11
  %587 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.143.4.us.us, <32 x i32> %564, <32 x i32> %584) #11
  %588 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.148.4.us.us, <32 x i32> %569, <32 x i32> %584) #11
  %589 = add i32 %541, %845
  %590 = getelementptr inbounds i8, i8* %13, i32 %589
  %591 = bitcast i8* %590 to i32*
  %592 = load i32, i32* %591, align 4, !tbaa !110
  %593 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %592) #11
  %594 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.153.4.us.us, <32 x i32> %552, <32 x i32> %593) #11
  %595 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.158.4.us.us, <32 x i32> %559, <32 x i32> %593) #11
  %596 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.163.4.us.us, <32 x i32> %564, <32 x i32> %593) #11
  %597 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.168.4.us.us, <32 x i32> %569, <32 x i32> %593) #11
  %598 = add i32 %541, %846
  %599 = getelementptr inbounds i8, i8* %13, i32 %598
  %600 = bitcast i8* %599 to i32*
  %601 = load i32, i32* %600, align 4, !tbaa !110
  %602 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %601) #11
  %603 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.173.4.us.us, <32 x i32> %552, <32 x i32> %602) #11
  %604 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.178.4.us.us, <32 x i32> %559, <32 x i32> %602) #11
  %605 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.183.4.us.us, <32 x i32> %564, <32 x i32> %602) #11
  %606 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.188.4.us.us, <32 x i32> %569, <32 x i32> %602) #11
  %607 = add i32 %541, %847
  %608 = getelementptr inbounds i8, i8* %13, i32 %607
  %609 = bitcast i8* %608 to i32*
  %610 = load i32, i32* %609, align 4, !tbaa !110
  %611 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %610) #11
  %612 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.193.4.us.us, <32 x i32> %552, <32 x i32> %611) #11
  %613 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.198.4.us.us, <32 x i32> %559, <32 x i32> %611) #11
  %614 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.203.4.us.us, <32 x i32> %564, <32 x i32> %611) #11
  %615 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.208.4.us.us, <32 x i32> %569, <32 x i32> %611) #11
  %616 = add nuw nsw i32 %"convolved.s1.r19$z.r124.us.us", 1
  %.not736.us.us = icmp eq i32 %616, %7
  br i1 %.not736.us.us, label %"end for convolved.s1.r19$z.r124.us.us", label %"for convolved.s1.r19$z.r124.us.us"

"end for convolved.s1.r19$z.r124.us.us":          ; preds = %"for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$x.us.us"
  %convolved673.sroa.208.5.us.us = phi <32 x i32> [ %convolved673.sroa.208.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %615, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.203.5.us.us = phi <32 x i32> [ %convolved673.sroa.203.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %614, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.198.5.us.us = phi <32 x i32> [ %convolved673.sroa.198.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %613, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.193.5.us.us = phi <32 x i32> [ %convolved673.sroa.193.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %612, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.188.5.us.us = phi <32 x i32> [ %convolved673.sroa.188.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %606, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.183.5.us.us = phi <32 x i32> [ %convolved673.sroa.183.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %605, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.178.5.us.us = phi <32 x i32> [ %convolved673.sroa.178.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %604, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.173.5.us.us = phi <32 x i32> [ %convolved673.sroa.173.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %603, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.168.5.us.us = phi <32 x i32> [ %convolved673.sroa.168.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %597, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.163.5.us.us = phi <32 x i32> [ %convolved673.sroa.163.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %596, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.158.5.us.us = phi <32 x i32> [ %convolved673.sroa.158.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %595, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.153.5.us.us = phi <32 x i32> [ %convolved673.sroa.153.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %594, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.148.5.us.us = phi <32 x i32> [ %convolved673.sroa.148.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %588, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.143.5.us.us = phi <32 x i32> [ %convolved673.sroa.143.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %587, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.138.5.us.us = phi <32 x i32> [ %convolved673.sroa.138.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %586, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.133.5.us.us = phi <32 x i32> [ %convolved673.sroa.133.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %585, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.123.5.us.us = phi <32 x i32> [ %convolved673.sroa.123.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %579, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.113.5.us.us = phi <32 x i32> [ %convolved673.sroa.113.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %578, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.103.5.us.us = phi <32 x i32> [ %convolved673.sroa.103.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %577, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.93.5.us.us = phi <32 x i32> [ %convolved673.sroa.93.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %576, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.78.5.us.us = phi <32 x i32> [ %convolved673.sroa.78.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %570, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.63.5.us.us = phi <32 x i32> [ %convolved673.sroa.63.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %565, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.48.5.us.us = phi <32 x i32> [ %convolved673.sroa.48.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %560, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.0.5.us.us = phi <32 x i32> [ %convolved673.sroa.0.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %554, %"for convolved.s1.r19$z.r124.us.us" ]
  %617 = add nuw nsw i32 %"convolved.s1.r19$x.us.us", 1
  %.not735.us.us = icmp eq i32 %617, %9
  br i1 %.not735.us.us, label %"end for convolved.s1.r19$x.us.us", label %"for convolved.s1.r19$x.us.us"

"end for convolved.s1.r19$x.us.us":               ; preds = %"end for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$y.us.us"
  %convolved673.sroa.208.3.us.us = phi <32 x i32> [ %convolved673.sroa.208.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.208.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.203.3.us.us = phi <32 x i32> [ %convolved673.sroa.203.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.203.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.198.3.us.us = phi <32 x i32> [ %convolved673.sroa.198.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.198.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.193.3.us.us = phi <32 x i32> [ %convolved673.sroa.193.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.193.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.188.3.us.us = phi <32 x i32> [ %convolved673.sroa.188.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.188.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.183.3.us.us = phi <32 x i32> [ %convolved673.sroa.183.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.183.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.178.3.us.us = phi <32 x i32> [ %convolved673.sroa.178.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.178.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.173.3.us.us = phi <32 x i32> [ %convolved673.sroa.173.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.173.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.168.3.us.us = phi <32 x i32> [ %convolved673.sroa.168.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.168.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.163.3.us.us = phi <32 x i32> [ %convolved673.sroa.163.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.163.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.158.3.us.us = phi <32 x i32> [ %convolved673.sroa.158.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.158.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.153.3.us.us = phi <32 x i32> [ %convolved673.sroa.153.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.153.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.148.3.us.us = phi <32 x i32> [ %convolved673.sroa.148.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.148.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.143.3.us.us = phi <32 x i32> [ %convolved673.sroa.143.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.143.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.138.3.us.us = phi <32 x i32> [ %convolved673.sroa.138.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.138.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.133.3.us.us = phi <32 x i32> [ %convolved673.sroa.133.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.133.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.123.3.us.us = phi <32 x i32> [ %convolved673.sroa.123.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.123.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.113.3.us.us = phi <32 x i32> [ %convolved673.sroa.113.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.113.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.103.3.us.us = phi <32 x i32> [ %convolved673.sroa.103.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.103.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.93.3.us.us = phi <32 x i32> [ %convolved673.sroa.93.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.93.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.78.3.us.us = phi <32 x i32> [ %convolved673.sroa.78.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.78.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.63.3.us.us = phi <32 x i32> [ %convolved673.sroa.63.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.63.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.48.3.us.us = phi <32 x i32> [ %convolved673.sroa.48.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.48.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved673.sroa.0.3.us.us = phi <32 x i32> [ %convolved673.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved673.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %618 = add nuw nsw i32 %"convolved.s1.r19$y.us.us", 1
  %.not734.us.us = icmp eq i32 %618, %11
  br i1 %.not734.us.us, label %"consume convolved.us.us", label %"for convolved.s1.r19$y.us.us"

"consume convolved.us.us":                        ; preds = %"end for convolved.s1.r19$x.us.us", %after_bb18.us.us
  %convolved673.sroa.208.6.us.us = phi <32 x i32> [ %convolved673.sroa.208.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.208.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.203.6.us.us = phi <32 x i32> [ %convolved673.sroa.203.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.203.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.198.6.us.us = phi <32 x i32> [ %convolved673.sroa.198.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.198.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.193.6.us.us = phi <32 x i32> [ %convolved673.sroa.193.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.193.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.188.6.us.us = phi <32 x i32> [ %convolved673.sroa.188.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.188.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.183.6.us.us = phi <32 x i32> [ %convolved673.sroa.183.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.183.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.178.6.us.us = phi <32 x i32> [ %convolved673.sroa.178.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.178.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.173.6.us.us = phi <32 x i32> [ %convolved673.sroa.173.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.173.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.168.6.us.us = phi <32 x i32> [ %convolved673.sroa.168.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.168.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.163.6.us.us = phi <32 x i32> [ %convolved673.sroa.163.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.163.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.158.6.us.us = phi <32 x i32> [ %convolved673.sroa.158.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.158.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.153.6.us.us = phi <32 x i32> [ %convolved673.sroa.153.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.153.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.148.6.us.us = phi <32 x i32> [ %convolved673.sroa.148.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.148.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.143.6.us.us = phi <32 x i32> [ %convolved673.sroa.143.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.143.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.138.6.us.us = phi <32 x i32> [ %convolved673.sroa.138.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.138.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.133.6.us.us = phi <32 x i32> [ %convolved673.sroa.133.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.133.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.123.6.us.us = phi <32 x i32> [ %convolved673.sroa.123.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.123.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.113.6.us.us = phi <32 x i32> [ %convolved673.sroa.113.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.113.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.103.6.us.us = phi <32 x i32> [ %convolved673.sroa.103.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.103.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.93.6.us.us = phi <32 x i32> [ %convolved673.sroa.93.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.93.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.78.6.us.us = phi <32 x i32> [ %convolved673.sroa.78.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.78.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.63.6.us.us = phi <32 x i32> [ %convolved673.sroa.63.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.63.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.48.6.us.us = phi <32 x i32> [ %convolved673.sroa.48.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.48.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved673.sroa.0.6.us.us = phi <32 x i32> [ %convolved673.sroa.0.0.us.us, %after_bb18.us.us ], [ %convolved673.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %619 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.48.6.us.us, <32 x i32> %878) #11
  %620 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %619, <32 x i32> %convolved673.sroa.48.6.us.us, <32 x i32> %878) #11
  %621 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %620, <32 x i32> %877) #11
  %622 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %621, <32 x i32> %344) #11
  %623 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %620, <32 x i32> %879) #11
  %624 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %622, <32 x i32> %623) #11
  %625 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.0.6.us.us, <32 x i32> %878) #11
  %626 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %625, <32 x i32> %convolved673.sroa.0.6.us.us, <32 x i32> %878) #11
  %627 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %626, <32 x i32> %877) #11
  %628 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %627, <32 x i32> %344) #11
  %629 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %626, <32 x i32> %879) #11
  %630 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %628, <32 x i32> %629) #11
  %631 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %624, <32 x i32> %630) #11
  %632 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.78.6.us.us, <32 x i32> %878) #11
  %633 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %632, <32 x i32> %convolved673.sroa.78.6.us.us, <32 x i32> %878) #11
  %634 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %633, <32 x i32> %877) #11
  %635 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %634, <32 x i32> %344) #11
  %636 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %633, <32 x i32> %879) #11
  %637 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %635, <32 x i32> %636) #11
  %638 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.63.6.us.us, <32 x i32> %878) #11
  %639 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %638, <32 x i32> %convolved673.sroa.63.6.us.us, <32 x i32> %878) #11
  %640 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %639, <32 x i32> %877) #11
  %641 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %640, <32 x i32> %344) #11
  %642 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %639, <32 x i32> %879) #11
  %643 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %641, <32 x i32> %642) #11
  %644 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %637, <32 x i32> %643) #11
  %645 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %631, <32 x i32> %644) #11
  %646 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %645, <64 x i32> %353) #11
  %647 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %646) #11
  %648 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %646) #11
  %649 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %647, <32 x i32> %648) #11
  %650 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %649, <32 x i32> %354) #11
  %651 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %650, <32 x i32> %355) #11
  %652 = shl nsw i32 %output.s0.c.co.us.us, 7
  %653 = add i32 %652, %t877.us.us
  %654 = add i32 %653, %880
  %655 = getelementptr inbounds i8, i8* %23, i32 %654
  %656 = bitcast i8* %655 to <32 x i32>*
  store <32 x i32> %651, <32 x i32>* %656, align 1, !tbaa !113
  %657 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.103.6.us.us, <32 x i32> %878) #11
  %658 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %657, <32 x i32> %convolved673.sroa.103.6.us.us, <32 x i32> %878) #11
  %659 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %658, <32 x i32> %877) #11
  %660 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %659, <32 x i32> %344) #11
  %661 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %658, <32 x i32> %879) #11
  %662 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %660, <32 x i32> %661) #11
  %663 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.93.6.us.us, <32 x i32> %878) #11
  %664 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %663, <32 x i32> %convolved673.sroa.93.6.us.us, <32 x i32> %878) #11
  %665 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %664, <32 x i32> %877) #11
  %666 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %665, <32 x i32> %344) #11
  %667 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %664, <32 x i32> %879) #11
  %668 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %666, <32 x i32> %667) #11
  %669 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %662, <32 x i32> %668) #11
  %670 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.123.6.us.us, <32 x i32> %878) #11
  %671 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %670, <32 x i32> %convolved673.sroa.123.6.us.us, <32 x i32> %878) #11
  %672 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %671, <32 x i32> %877) #11
  %673 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %672, <32 x i32> %344) #11
  %674 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %671, <32 x i32> %879) #11
  %675 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %673, <32 x i32> %674) #11
  %676 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.113.6.us.us, <32 x i32> %878) #11
  %677 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %676, <32 x i32> %convolved673.sroa.113.6.us.us, <32 x i32> %878) #11
  %678 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %677, <32 x i32> %877) #11
  %679 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %678, <32 x i32> %344) #11
  %680 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %677, <32 x i32> %879) #11
  %681 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %679, <32 x i32> %680) #11
  %682 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %675, <32 x i32> %681) #11
  %683 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %669, <32 x i32> %682) #11
  %684 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %683, <64 x i32> %353) #11
  %685 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %684) #11
  %686 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %684) #11
  %687 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %685, <32 x i32> %686) #11
  %688 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %687, <32 x i32> %354) #11
  %689 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %688, <32 x i32> %355) #11
  %690 = add i32 %653, %881
  %691 = getelementptr inbounds i8, i8* %23, i32 %690
  %692 = bitcast i8* %691 to <32 x i32>*
  store <32 x i32> %689, <32 x i32>* %692, align 1, !tbaa !113
  %693 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.138.6.us.us, <32 x i32> %878) #11
  %694 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %693, <32 x i32> %convolved673.sroa.138.6.us.us, <32 x i32> %878) #11
  %695 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %694, <32 x i32> %877) #11
  %696 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %695, <32 x i32> %344) #11
  %697 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %694, <32 x i32> %879) #11
  %698 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %696, <32 x i32> %697) #11
  %699 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.133.6.us.us, <32 x i32> %878) #11
  %700 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %699, <32 x i32> %convolved673.sroa.133.6.us.us, <32 x i32> %878) #11
  %701 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %700, <32 x i32> %877) #11
  %702 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %701, <32 x i32> %344) #11
  %703 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %700, <32 x i32> %879) #11
  %704 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %702, <32 x i32> %703) #11
  %705 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %698, <32 x i32> %704) #11
  %706 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.148.6.us.us, <32 x i32> %878) #11
  %707 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %706, <32 x i32> %convolved673.sroa.148.6.us.us, <32 x i32> %878) #11
  %708 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %707, <32 x i32> %877) #11
  %709 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %708, <32 x i32> %344) #11
  %710 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %707, <32 x i32> %879) #11
  %711 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %709, <32 x i32> %710) #11
  %712 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.143.6.us.us, <32 x i32> %878) #11
  %713 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %712, <32 x i32> %convolved673.sroa.143.6.us.us, <32 x i32> %878) #11
  %714 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %713, <32 x i32> %877) #11
  %715 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %714, <32 x i32> %344) #11
  %716 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %713, <32 x i32> %879) #11
  %717 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %715, <32 x i32> %716) #11
  %718 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %711, <32 x i32> %717) #11
  %719 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %705, <32 x i32> %718) #11
  %720 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %719, <64 x i32> %353) #11
  %721 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %720) #11
  %722 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %720) #11
  %723 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %721, <32 x i32> %722) #11
  %724 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %723, <32 x i32> %354) #11
  %725 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %724, <32 x i32> %355) #11
  %726 = add i32 %653, %882
  %727 = getelementptr inbounds i8, i8* %23, i32 %726
  %728 = bitcast i8* %727 to <32 x i32>*
  store <32 x i32> %725, <32 x i32>* %728, align 1, !tbaa !113
  %729 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.158.6.us.us, <32 x i32> %878) #11
  %730 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %729, <32 x i32> %convolved673.sroa.158.6.us.us, <32 x i32> %878) #11
  %731 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %730, <32 x i32> %877) #11
  %732 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %731, <32 x i32> %344) #11
  %733 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %730, <32 x i32> %879) #11
  %734 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %732, <32 x i32> %733) #11
  %735 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.153.6.us.us, <32 x i32> %878) #11
  %736 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %735, <32 x i32> %convolved673.sroa.153.6.us.us, <32 x i32> %878) #11
  %737 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %736, <32 x i32> %877) #11
  %738 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %737, <32 x i32> %344) #11
  %739 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %736, <32 x i32> %879) #11
  %740 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %738, <32 x i32> %739) #11
  %741 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %734, <32 x i32> %740) #11
  %742 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.168.6.us.us, <32 x i32> %878) #11
  %743 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %742, <32 x i32> %convolved673.sroa.168.6.us.us, <32 x i32> %878) #11
  %744 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %743, <32 x i32> %877) #11
  %745 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %744, <32 x i32> %344) #11
  %746 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %743, <32 x i32> %879) #11
  %747 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %745, <32 x i32> %746) #11
  %748 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.163.6.us.us, <32 x i32> %878) #11
  %749 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %748, <32 x i32> %convolved673.sroa.163.6.us.us, <32 x i32> %878) #11
  %750 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %749, <32 x i32> %877) #11
  %751 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %750, <32 x i32> %344) #11
  %752 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %749, <32 x i32> %879) #11
  %753 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %751, <32 x i32> %752) #11
  %754 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %747, <32 x i32> %753) #11
  %755 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %741, <32 x i32> %754) #11
  %756 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %755, <64 x i32> %353) #11
  %757 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %756) #11
  %758 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %756) #11
  %759 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %757, <32 x i32> %758) #11
  %760 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %759, <32 x i32> %354) #11
  %761 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %760, <32 x i32> %355) #11
  %762 = add i32 %653, %883
  %763 = getelementptr inbounds i8, i8* %23, i32 %762
  %764 = bitcast i8* %763 to <32 x i32>*
  store <32 x i32> %761, <32 x i32>* %764, align 1, !tbaa !113
  %765 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.178.6.us.us, <32 x i32> %878) #11
  %766 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %765, <32 x i32> %convolved673.sroa.178.6.us.us, <32 x i32> %878) #11
  %767 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %766, <32 x i32> %877) #11
  %768 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %767, <32 x i32> %344) #11
  %769 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %766, <32 x i32> %879) #11
  %770 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %768, <32 x i32> %769) #11
  %771 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.173.6.us.us, <32 x i32> %878) #11
  %772 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %771, <32 x i32> %convolved673.sroa.173.6.us.us, <32 x i32> %878) #11
  %773 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %772, <32 x i32> %877) #11
  %774 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %773, <32 x i32> %344) #11
  %775 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %772, <32 x i32> %879) #11
  %776 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %774, <32 x i32> %775) #11
  %777 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %770, <32 x i32> %776) #11
  %778 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.188.6.us.us, <32 x i32> %878) #11
  %779 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %778, <32 x i32> %convolved673.sroa.188.6.us.us, <32 x i32> %878) #11
  %780 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %779, <32 x i32> %877) #11
  %781 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %780, <32 x i32> %344) #11
  %782 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %779, <32 x i32> %879) #11
  %783 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %781, <32 x i32> %782) #11
  %784 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.183.6.us.us, <32 x i32> %878) #11
  %785 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %784, <32 x i32> %convolved673.sroa.183.6.us.us, <32 x i32> %878) #11
  %786 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %785, <32 x i32> %877) #11
  %787 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %786, <32 x i32> %344) #11
  %788 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %785, <32 x i32> %879) #11
  %789 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %787, <32 x i32> %788) #11
  %790 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %783, <32 x i32> %789) #11
  %791 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %777, <32 x i32> %790) #11
  %792 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %791, <64 x i32> %353) #11
  %793 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %792) #11
  %794 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %792) #11
  %795 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %793, <32 x i32> %794) #11
  %796 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %795, <32 x i32> %354) #11
  %797 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %796, <32 x i32> %355) #11
  %798 = add i32 %653, %884
  %799 = getelementptr inbounds i8, i8* %23, i32 %798
  %800 = bitcast i8* %799 to <32 x i32>*
  store <32 x i32> %797, <32 x i32>* %800, align 1, !tbaa !113
  %801 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.198.6.us.us, <32 x i32> %878) #11
  %802 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %801, <32 x i32> %convolved673.sroa.198.6.us.us, <32 x i32> %878) #11
  %803 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %802, <32 x i32> %877) #11
  %804 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %803, <32 x i32> %344) #11
  %805 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %802, <32 x i32> %879) #11
  %806 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %804, <32 x i32> %805) #11
  %807 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.193.6.us.us, <32 x i32> %878) #11
  %808 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %807, <32 x i32> %convolved673.sroa.193.6.us.us, <32 x i32> %878) #11
  %809 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %808, <32 x i32> %877) #11
  %810 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %809, <32 x i32> %344) #11
  %811 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %808, <32 x i32> %879) #11
  %812 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %810, <32 x i32> %811) #11
  %813 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %806, <32 x i32> %812) #11
  %814 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.208.6.us.us, <32 x i32> %878) #11
  %815 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %814, <32 x i32> %convolved673.sroa.208.6.us.us, <32 x i32> %878) #11
  %816 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %815, <32 x i32> %877) #11
  %817 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %816, <32 x i32> %344) #11
  %818 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %815, <32 x i32> %879) #11
  %819 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %817, <32 x i32> %818) #11
  %820 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.203.6.us.us, <32 x i32> %878) #11
  %821 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %820, <32 x i32> %convolved673.sroa.203.6.us.us, <32 x i32> %878) #11
  %822 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %821, <32 x i32> %877) #11
  %823 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %822, <32 x i32> %344) #11
  %824 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %821, <32 x i32> %879) #11
  %825 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %823, <32 x i32> %824) #11
  %826 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %819, <32 x i32> %825) #11
  %827 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %813, <32 x i32> %826) #11
  %828 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %827, <64 x i32> %353) #11
  %829 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %828) #11
  %830 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %828) #11
  %831 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %829, <32 x i32> %830) #11
  %832 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %831, <32 x i32> %354) #11
  %833 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %832, <32 x i32> %355) #11
  %834 = add i32 %653, %885
  %835 = getelementptr inbounds i8, i8* %23, i32 %834
  %836 = bitcast i8* %835 to <32 x i32>*
  store <32 x i32> %833, <32 x i32>* %836, align 1, !tbaa !113
  %837 = add nuw nsw i32 %output.s0.c.co.us.us, 1
  %.not733.us.us = icmp eq i32 %837, %341
  br i1 %.not733.us.us, label %"end for output.s0.c.co.us.us", label %"for output.s0.c.co.us.us"

"end for output.s0.c.co.us.us":                   ; preds = %"consume convolved.us.us", %"consume sum_input.us.us"
  %838 = add nuw nsw i32 %output.s0.x.xo.us.us, 1
  %.not732.us.us = icmp eq i32 %838, %336
  br i1 %.not732.us.us, label %"end for output.s0.x.xo.loopexit.us.us", label %"for output.s0.x.xo.us.us"

"for convolved.s1.r19$z.r124.preheader.us.us":    ; preds = %"for convolved.s1.r19$x.us.us"
  %t919.s.us.us = add nsw i32 %538, %876
  %t924.s.us.us = add nsw i32 %538, %875
  %t925.s.us.us = add nsw i32 %538, %873
  %t926.s.us.us = add nsw i32 %538, %871
  %t927.s.us.us = add nsw i32 %538, %869
  %t928.s.us.us = add nsw i32 %538, %867
  %839 = mul nsw i32 %t919.s.us.us, %17
  %840 = add i32 %t920.us.us, %854
  %841 = add i32 %t920.us.us, %852
  %842 = add i32 %t920.us.us, %850
  %843 = mul nsw i32 %t924.s.us.us, %17
  %844 = mul nsw i32 %t925.s.us.us, %17
  %845 = mul nsw i32 %t926.s.us.us, %17
  %846 = mul nsw i32 %t927.s.us.us, %17
  %847 = mul nsw i32 %t928.s.us.us, %17
  br label %"for convolved.s1.r19$z.r124.us.us"

"for convolved.s1.r19$y.preheader.us.us":         ; preds = %after_bb18.us.us
  %848 = shl nsw i32 %output.s0.c.co.us.us, 2
  %849 = or i32 %848, 3
  %850 = mul nsw i32 %849, %8
  %851 = or i32 %848, 2
  %852 = mul nsw i32 %851, %8
  %853 = or i32 %848, 1
  %854 = mul nsw i32 %853, %8
  %855 = mul nsw i32 %output.s0.c.co.us.us, %8
  br label %"for convolved.s1.r19$y.us.us"

"for sum_input.s1.r19$x.preheader.us.us":         ; preds = %"for sum_input.s1.r19$y.us.us"
  %856 = mul nsw i32 %"sum_input.s1.r19$y.us.us", %dilation_y
  %857 = add nsw i32 %856, %369
  %858 = mul nsw i32 %857, %19
  %t880.us.us = add i32 %364, %858
  br i1 %359, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"for output.s0.c.co.preheader.us.us":             ; preds = %"consume sum_input.us.us"
  %sum_input674.sroa.0.0.vec.extract878.us.us = extractelement <6 x i32> %sum_input674.sroa.0.13.us.us, i32 0
  %859 = mul nsw i32 %sum_input674.sroa.0.0.vec.extract878.us.us, %309
  %sum_input674.sroa.0.4.vec.extract884.us.us = extractelement <6 x i32> %sum_input674.sroa.0.13.us.us, i32 1
  %860 = mul nsw i32 %sum_input674.sroa.0.4.vec.extract884.us.us, %309
  %sum_input674.sroa.0.8.vec.extract890.us.us = extractelement <6 x i32> %sum_input674.sroa.0.13.us.us, i32 2
  %861 = mul nsw i32 %sum_input674.sroa.0.8.vec.extract890.us.us, %309
  %sum_input674.sroa.0.12.vec.extract896.us.us = extractelement <6 x i32> %sum_input674.sroa.0.13.us.us, i32 3
  %862 = mul nsw i32 %sum_input674.sroa.0.12.vec.extract896.us.us, %309
  %sum_input674.sroa.0.16.vec.extract902.us.us = extractelement <6 x i32> %sum_input674.sroa.0.13.us.us, i32 4
  %863 = mul nsw i32 %sum_input674.sroa.0.16.vec.extract902.us.us, %309
  %sum_input674.sroa.0.20.vec.extract908.us.us = extractelement <6 x i32> %sum_input674.sroa.0.13.us.us, i32 5
  %864 = mul nsw i32 %sum_input674.sroa.0.20.vec.extract908.us.us, %309
  %865 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %866 = add nsw i32 %865, 5
  %867 = mul nsw i32 %866, %stride_x
  %868 = add nsw i32 %865, 4
  %869 = mul nsw i32 %868, %stride_x
  %870 = add nsw i32 %865, 3
  %871 = mul nsw i32 %870, %stride_x
  %872 = add nsw i32 %865, 2
  %873 = mul nsw i32 %872, %stride_x
  %874 = add nsw i32 %865, 1
  %875 = mul nsw i32 %874, %stride_x
  %876 = mul nsw i32 %865, %stride_x
  %877 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %345) #11
  %878 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %879 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %880 = mul nsw i32 %865, %27
  %881 = mul nsw i32 %874, %27
  %882 = mul nsw i32 %872, %27
  %883 = mul nsw i32 %870, %27
  %884 = mul nsw i32 %868, %27
  %885 = mul nsw i32 %866, %27
  br label %"for output.s0.c.co.us.us"

"for sum_input.s1.r19$y.preheader.us.us":         ; preds = %then_bb10.us.us
  %886 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %887 = sub i32 %886, %16
  br label %"for sum_input.s1.r19$y.us.us"

"for sum_input.s1.r19$y12.preheader.us.us":       ; preds = %next_bb11.us.us
  %888 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %889 = mul nsw i32 %888, %stride_x
  br i1 %brmerge1667.demorgan, label %"for sum_input.s1.r19$y12.us.us.us.us", label %"consume sum_input.us.us", !prof !103

"end for output.s0.x.xo.loopexit.us.us":          ; preds = %"end for output.s0.c.co.us.us"
  %890 = add nuw nsw i32 %output.s0.y.rebased.us.us, 1
  %.not731.us.us = icmp eq i32 %890, %29
  br i1 %.not731.us.us, label %"end for output.s0.y.rebased.loopexit.us", label %"for output.s0.y.rebased.us.us"

"for sum_input.s1.r19$y12.us.us.us.us":           ; preds = %"for sum_input.s1.r19$y12.preheader.us.us", %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us"
  %sum_input674.sroa.0.8.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %"sum_input.s1.r19$y14.us.us.us.us" = phi i32 [ %1051, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %891 = mul nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", %dilation_y
  %t882.s.us.us.us.us = add nsw i32 %891, %369
  %892 = mul nsw i32 %t882.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"for sum_input.s1.r19$x15.us.us.us.us.us":        ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y12.us.us.us.us"
  %sum_input674.sroa.0.9.us.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ %sum_input674.sroa.0.8.us.us.us.us, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %"sum_input.s1.r19$x17.us.us.us.us.us" = phi i32 [ %1050, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %893 = mul nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", %dilation_x
  %t883.s.us.us.us.us.us = add nsw i32 %893, %889
  %t1221.us.us.us.us.us = mul nsw i32 %t883.s.us.us.us.us.us, %17
  %894 = add i32 %t1221.us.us.us.us.us, %892
  %t884.us.us.us.us.us = sub i32 %894, %t852
  %895 = add i32 %t884.us.us.us.us.us, %363
  %t860.us.us.us.us.us = add i32 %894, %327
  %896 = sub i32 %t860.us.us.us.us.us, %316
  %t885.us.us.us.us.us = sub i32 %896, %317
  %897 = add i32 %t885.us.us.us.us.us, %363
  %898 = add i32 %894, %325
  %899 = sub i32 %898, %356
  %t886.us.us.us.us.us = sub i32 %899, %317
  %900 = add i32 %t886.us.us.us.us.us, %363
  %901 = add i32 %894, %324
  %902 = sub i32 %901, %356
  %t887.us.us.us.us.us = sub i32 %902, %317
  %903 = add i32 %t887.us.us.us.us.us, %363
  %904 = add i32 %894, %323
  %905 = sub i32 %904, %356
  %t888.us.us.us.us.us = sub i32 %905, %317
  %906 = add i32 %t888.us.us.us.us.us, %363
  %907 = add i32 %894, %322
  %908 = sub i32 %907, %356
  %t889.us.us.us.us.us = sub i32 %908, %317
  %909 = add i32 %t889.us.us.us.us.us, %363
  br i1 %358, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"for sum_input.s1.r19$z.r124.us.us.us.us.us":     ; preds = %"for sum_input.s1.r19$x15.us.us.us.us.us", %"for sum_input.s1.r19$z.r124.us.us.us.us.us"
  %sum_input674.sroa.0.11.us.us.us.us.us = phi <6 x i32> [ %1002, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %sum_input674.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us" = phi i32 [ %1003, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %niter1911 = phi i32 [ %niter1911.nsub.1, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %unroll_iter1910, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %910 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %911 = add i32 %895, %910
  %912 = getelementptr inbounds i8, i8* %13, i32 %911
  %913 = bitcast i8* %912 to <4 x i8>*
  %914 = load <4 x i8>, <4 x i8>* %913, align 4, !tbaa !110
  %915 = add i32 %897, %910
  %916 = getelementptr inbounds i8, i8* %13, i32 %915
  %917 = bitcast i8* %916 to <4 x i8>*
  %918 = load <4 x i8>, <4 x i8>* %917, align 4, !tbaa !110
  %919 = add i32 %900, %910
  %920 = getelementptr inbounds i8, i8* %13, i32 %919
  %921 = bitcast i8* %920 to <4 x i8>*
  %922 = load <4 x i8>, <4 x i8>* %921, align 4, !tbaa !110
  %923 = add i32 %903, %910
  %924 = getelementptr inbounds i8, i8* %13, i32 %923
  %925 = bitcast i8* %924 to <4 x i8>*
  %926 = load <4 x i8>, <4 x i8>* %925, align 4, !tbaa !110
  %927 = add i32 %906, %910
  %928 = getelementptr inbounds i8, i8* %13, i32 %927
  %929 = bitcast i8* %928 to <4 x i8>*
  %930 = load <4 x i8>, <4 x i8>* %929, align 4, !tbaa !110
  %931 = add i32 %909, %910
  %932 = getelementptr inbounds i8, i8* %13, i32 %931
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 4, !tbaa !110
  %935 = shufflevector <4 x i8> %914, <4 x i8> %918, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %936 = shufflevector <4 x i8> %922, <4 x i8> %926, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %937 = shufflevector <8 x i8> %935, <8 x i8> %936, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %938 = shufflevector <4 x i8> %930, <4 x i8> %934, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %939 = shufflevector <16 x i8> %937, <16 x i8> %938, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us = zext <24 x i8> %939 to <24 x i16>
  %940 = shufflevector <24 x i16> %t1223.us.us.us.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %941 = bitcast <64 x i16> %940 to <32 x i32>
  %942 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %941)
  %943 = bitcast <32 x i32> %942 to <64 x i16>
  %944 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %941)
  %945 = bitcast <32 x i32> %944 to <64 x i16>
  %946 = add <64 x i16> %945, %943
  %947 = shufflevector <64 x i16> %946, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us = zext <12 x i16> %947 to <12 x i32>
  %948 = shufflevector <12 x i32> %t1222.us.us.us.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %949 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %948, i32 -4)
  %950 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %949)
  %951 = shufflevector <32 x i32> %950, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %952 = add nsw <6 x i32> %951, %sum_input674.sroa.0.11.us.us.us.us.us
  %953 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %949)
  %954 = shufflevector <32 x i32> %953, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %955 = add nsw <6 x i32> %952, %954
  %956 = shl i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %957 = or i32 %956, 4
  %958 = add i32 %895, %957
  %959 = getelementptr inbounds i8, i8* %13, i32 %958
  %960 = bitcast i8* %959 to <4 x i8>*
  %961 = load <4 x i8>, <4 x i8>* %960, align 4, !tbaa !110
  %962 = add i32 %897, %957
  %963 = getelementptr inbounds i8, i8* %13, i32 %962
  %964 = bitcast i8* %963 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 4, !tbaa !110
  %966 = add i32 %900, %957
  %967 = getelementptr inbounds i8, i8* %13, i32 %966
  %968 = bitcast i8* %967 to <4 x i8>*
  %969 = load <4 x i8>, <4 x i8>* %968, align 4, !tbaa !110
  %970 = add i32 %903, %957
  %971 = getelementptr inbounds i8, i8* %13, i32 %970
  %972 = bitcast i8* %971 to <4 x i8>*
  %973 = load <4 x i8>, <4 x i8>* %972, align 4, !tbaa !110
  %974 = add i32 %906, %957
  %975 = getelementptr inbounds i8, i8* %13, i32 %974
  %976 = bitcast i8* %975 to <4 x i8>*
  %977 = load <4 x i8>, <4 x i8>* %976, align 4, !tbaa !110
  %978 = add i32 %909, %957
  %979 = getelementptr inbounds i8, i8* %13, i32 %978
  %980 = bitcast i8* %979 to <4 x i8>*
  %981 = load <4 x i8>, <4 x i8>* %980, align 4, !tbaa !110
  %982 = shufflevector <4 x i8> %961, <4 x i8> %965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %983 = shufflevector <4 x i8> %969, <4 x i8> %973, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %984 = shufflevector <8 x i8> %982, <8 x i8> %983, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %985 = shufflevector <4 x i8> %977, <4 x i8> %981, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %986 = shufflevector <16 x i8> %984, <16 x i8> %985, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us.1 = zext <24 x i8> %986 to <24 x i16>
  %987 = shufflevector <24 x i16> %t1223.us.us.us.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %988 = bitcast <64 x i16> %987 to <32 x i32>
  %989 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %988)
  %990 = bitcast <32 x i32> %989 to <64 x i16>
  %991 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %988)
  %992 = bitcast <32 x i32> %991 to <64 x i16>
  %993 = add <64 x i16> %992, %990
  %994 = shufflevector <64 x i16> %993, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us.1 = zext <12 x i16> %994 to <12 x i32>
  %995 = shufflevector <12 x i32> %t1222.us.us.us.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %996 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %995, i32 -4)
  %997 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %996)
  %998 = shufflevector <32 x i32> %997, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %999 = add nsw <6 x i32> %998, %955
  %1000 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %996)
  %1001 = shufflevector <32 x i32> %1000, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1002 = add nsw <6 x i32> %999, %1001
  %1003 = add nuw nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %niter1911.nsub.1 = add i32 %niter1911, -2
  %niter1911.ncmp.1 = icmp eq i32 %niter1911.nsub.1, 0
  br i1 %niter1911.ncmp.1, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124.us.us.us.us.us", %"for sum_input.s1.r19$x15.us.us.us.us.us"
  %.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %1002, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %sum_input674.sroa.0.11.us.us.us.us.us.unr = phi <6 x i32> [ %sum_input674.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %1002, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %1003, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  br i1 %lcmp.mod1909.not, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa"
  %1004 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr", 2
  %1005 = add i32 %895, %1004
  %1006 = getelementptr inbounds i8, i8* %13, i32 %1005
  %1007 = bitcast i8* %1006 to <4 x i8>*
  %1008 = load <4 x i8>, <4 x i8>* %1007, align 4, !tbaa !110
  %1009 = add i32 %897, %1004
  %1010 = getelementptr inbounds i8, i8* %13, i32 %1009
  %1011 = bitcast i8* %1010 to <4 x i8>*
  %1012 = load <4 x i8>, <4 x i8>* %1011, align 4, !tbaa !110
  %1013 = add i32 %900, %1004
  %1014 = getelementptr inbounds i8, i8* %13, i32 %1013
  %1015 = bitcast i8* %1014 to <4 x i8>*
  %1016 = load <4 x i8>, <4 x i8>* %1015, align 4, !tbaa !110
  %1017 = add i32 %903, %1004
  %1018 = getelementptr inbounds i8, i8* %13, i32 %1017
  %1019 = bitcast i8* %1018 to <4 x i8>*
  %1020 = load <4 x i8>, <4 x i8>* %1019, align 4, !tbaa !110
  %1021 = add i32 %906, %1004
  %1022 = getelementptr inbounds i8, i8* %13, i32 %1021
  %1023 = bitcast i8* %1022 to <4 x i8>*
  %1024 = load <4 x i8>, <4 x i8>* %1023, align 4, !tbaa !110
  %1025 = add i32 %909, %1004
  %1026 = getelementptr inbounds i8, i8* %13, i32 %1025
  %1027 = bitcast i8* %1026 to <4 x i8>*
  %1028 = load <4 x i8>, <4 x i8>* %1027, align 4, !tbaa !110
  %1029 = shufflevector <4 x i8> %1008, <4 x i8> %1012, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1030 = shufflevector <4 x i8> %1016, <4 x i8> %1020, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1031 = shufflevector <8 x i8> %1029, <8 x i8> %1030, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1032 = shufflevector <4 x i8> %1024, <4 x i8> %1028, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1033 = shufflevector <16 x i8> %1031, <16 x i8> %1032, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us.epil = zext <24 x i8> %1033 to <24 x i16>
  %1034 = shufflevector <24 x i16> %t1223.us.us.us.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1035 = bitcast <64 x i16> %1034 to <32 x i32>
  %1036 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1035)
  %1037 = bitcast <32 x i32> %1036 to <64 x i16>
  %1038 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1035)
  %1039 = bitcast <32 x i32> %1038 to <64 x i16>
  %1040 = add <64 x i16> %1039, %1037
  %1041 = shufflevector <64 x i16> %1040, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us.epil = zext <12 x i16> %1041 to <12 x i32>
  %1042 = shufflevector <12 x i32> %t1222.us.us.us.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1043 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1042, i32 -4)
  %1044 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1043)
  %1045 = shufflevector <32 x i32> %1044, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1046 = add nsw <6 x i32> %1045, %sum_input674.sroa.0.11.us.us.us.us.us.unr
  %1047 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1043)
  %1048 = shufflevector <32 x i32> %1047, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1049 = add nsw <6 x i32> %1046, %1048
  br label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil"
  %.lcssa = phi <6 x i32> [ %.lcssa.ph, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa" ], [ %1049, %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil" ]
  %1050 = add nuw nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", 1
  %.not738.us.us.us.us.us = icmp eq i32 %1050, %9
  br i1 %.not738.us.us.us.us.us, label %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"
  %1051 = add nuw nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", 1
  %.not737.us.us.us.us = icmp eq i32 %1051, %11
  br i1 %.not737.us.us.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y12.us.us.us.us"

next_bb5:                                         ; preds = %"consume offset_c"
  br i1 %94, label %then_bb91, label %next_bb92

then_bb91:                                        ; preds = %next_bb5
  %1052 = mul nsw i32 %19, %18
  %1053 = mul nsw i32 %22, %20
  %1054 = mul nsw i32 %17, %16
  %1055 = add i32 %1053, %1052
  %t941 = add i32 %1055, %1054
  %1056 = icmp sgt i32 %21, 0
  br i1 %1056, label %"for output.s0.b.rebased93.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased93.preheader":            ; preds = %then_bb91
  %1057 = mul nsw i32 %17, %stride_x
  %1058 = mul nsw i32 %1057, 7
  %1059 = mul nsw i32 %1057, 6
  %1060 = mul nsw i32 %1057, 5
  %1061 = shl nsw i32 %1057, 2
  %1062 = mul nsw i32 %1057, 3
  %1063 = shl nsw i32 %1057, 1
  %1064 = sub nsw i32 %stride_x, %16
  %1065 = mul nsw i32 %1064, %17
  %1066 = icmp sgt i32 %29, 0
  %.neg1142 = mul i32 %30, %28
  %.neg1143 = mul i32 %27, %25
  %.neg1144 = mul i32 %31, %20
  %reass.add1146 = add i32 %.neg1142, %.neg1143
  %reass.add1147 = add i32 %reass.add1146, %.neg1144
  %1067 = add nuw nsw i32 %26, 7
  %1068 = ashr i32 %1067, 3
  %b15 = add nsw i32 %26, -8
  %1069 = icmp sgt i32 %11, 0
  %1070 = icmp sgt i32 %9, 0
  %1071 = icmp sgt i32 %7, 0
  %1072 = ashr i32 %4, 6
  %1073 = icmp sgt i32 %4, 63
  %1074 = icmp sgt i32 %output_shift, 0
  %1075 = select i1 %1074, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %1076 = add nsw i32 %output_shift, -1
  %1077 = zext i8 %output_zero to i16
  %1078 = insertelement <64 x i16> undef, i16 %1077, i32 0
  %1079 = shufflevector <64 x i16> %1078, <64 x i16> undef, <64 x i32> zeroinitializer
  %1080 = bitcast <64 x i16> %1079 to <32 x i32>
  %1081 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %1082 = shufflevector <32 x i8> %1081, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1083 = bitcast <128 x i8> %1082 to <32 x i32>
  %1084 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %1085 = shufflevector <32 x i8> %1084, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1086 = bitcast <128 x i8> %1085 to <32 x i32>
  br i1 %1066, label %"for output.s0.b.rebased93.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased93.us.preheader":         ; preds = %"for output.s0.b.rebased93.preheader"
  %1087 = add i32 %1054, %1052
  %1088 = add i32 %9, -1
  %brmerge1670.demorgan = and i1 %1070, %1071
  %xtraiter1898 = and i32 %7, 1
  %1089 = icmp eq i32 %7, 1
  %unroll_iter1900 = and i32 %7, -2
  %lcmp.mod1899.not = icmp eq i32 %xtraiter1898, 0
  %xtraiter1902 = and i32 %9, 3
  %1090 = icmp ult i32 %1088, 3
  %unroll_iter1906 = and i32 %9, -4
  %lcmp.mod1904.not = icmp eq i32 %xtraiter1902, 0
  br label %"for output.s0.b.rebased93.us"

"for output.s0.b.rebased93.us":                   ; preds = %"for output.s0.b.rebased93.us.preheader", %"end for output.s0.y.rebased97.loopexit.us"
  %convolved673.sroa.0.7.us = phi <32 x i32> [ %.us-phi1458.us, %"end for output.s0.y.rebased97.loopexit.us" ], [ undef, %"for output.s0.b.rebased93.us.preheader" ]
  %output.s0.b.rebased95.us = phi i32 [ %1097, %"end for output.s0.y.rebased97.loopexit.us" ], [ 0, %"for output.s0.b.rebased93.us.preheader" ]
  %1091 = add nsw i32 %output.s0.b.rebased95.us, %20
  %1092 = mul nsw i32 %1091, %31
  %1093 = sub i32 %1092, %reass.add1147
  %1094 = mul nsw i32 %1091, %22
  %1095 = sub i32 %1094, %1055
  %1096 = sub nsw i32 %1094, %t941
  br i1 %100, label %"for output.s0.y.rebased96.us.us", label %"end for output.s0.y.rebased97.loopexit.us", !prof !96

"end for output.s0.y.rebased97.loopexit.us":      ; preds = %"end for output.s0.x.xo100.loopexit.us.us", %"for output.s0.b.rebased93.us"
  %.us-phi1458.us = phi <32 x i32> [ %convolved673.sroa.0.7.us, %"for output.s0.b.rebased93.us" ], [ %convolved673.sroa.0.20.us.us, %"end for output.s0.x.xo100.loopexit.us.us" ]
  %1097 = add nuw nsw i32 %output.s0.b.rebased95.us, 1
  %.not718.us = icmp eq i32 %1097, %21
  br i1 %.not718.us, label %after_bb3, label %"for output.s0.b.rebased93.us"

"for output.s0.y.rebased96.us.us":                ; preds = %"for output.s0.b.rebased93.us", %"end for output.s0.x.xo100.loopexit.us.us"
  %convolved673.sroa.0.8.us.us = phi <32 x i32> [ %convolved673.sroa.0.20.us.us, %"end for output.s0.x.xo100.loopexit.us.us" ], [ %convolved673.sroa.0.7.us, %"for output.s0.b.rebased93.us" ]
  %output.s0.y.rebased98.us.us = phi i32 [ %1607, %"end for output.s0.x.xo100.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased93.us" ]
  %1098 = add nsw i32 %output.s0.y.rebased98.us.us, %28
  %1099 = mul nsw i32 %1098, %30
  %t970.us.us = add i32 %1093, %1099
  %1100 = mul nsw i32 %1098, %stride_y
  br label %"for output.s0.x.xo99.us.us"

"for output.s0.x.xo99.us.us":                     ; preds = %"end for output.s0.c.co128.us.us", %"for output.s0.y.rebased96.us.us"
  %convolved673.sroa.0.10.us.us = phi <32 x i32> [ %convolved673.sroa.0.20.us.us, %"end for output.s0.c.co128.us.us" ], [ %convolved673.sroa.0.8.us.us, %"for output.s0.y.rebased96.us.us" ]
  %output.s0.x.xo101.us.us = phi i32 [ %1560, %"end for output.s0.c.co128.us.us" ], [ 0, %"for output.s0.y.rebased96.us.us" ]
  %a13.us.us = shl nsw i32 %output.s0.x.xo101.us.us, 3
  %1101 = icmp slt i32 %a13.us.us, %b15
  %output.s0.x.x.base.s102.us.us = select i1 %1101, i32 %a13.us.us, i32 %b15
  br i1 %t843.not, label %"consume sum_input126.us.us", label %then_bb106.us.us

then_bb106.us.us:                                 ; preds = %"for output.s0.x.xo99.us.us"
  %convolved673.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %convolved673.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb109.us.us, label %next_bb110.us.us

next_bb110.us.us:                                 ; preds = %then_bb106.us.us
  br i1 %1069, label %"for sum_input.s1.r19$y117.preheader.us.us", label %"consume sum_input126.us.us", !prof !96

then_bb109.us.us:                                 ; preds = %then_bb106.us.us
  br i1 %1069, label %"for sum_input.s1.r19$y111.preheader.us.us", label %"consume sum_input126.us.us", !prof !96

"for sum_input.s1.r19$y111.us.us":                ; preds = %"for sum_input.s1.r19$y111.preheader.us.us", %"end for sum_input.s1.r19$x115.us.us"
  %convolved673.sroa.0.12.us.us = phi <32 x i32> [ %convolved673.sroa.0.14.us.us, %"end for sum_input.s1.r19$x115.us.us" ], [ %convolved673.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y111.preheader.us.us" ]
  %"sum_input.s1.r19$y113.us.us" = phi i32 [ %1202, %"end for sum_input.s1.r19$x115.us.us" ], [ 0, %"for sum_input.s1.r19$y111.preheader.us.us" ]
  br i1 %1070, label %"for sum_input.s1.r19$x114.preheader.us.us", label %"end for sum_input.s1.r19$x115.us.us", !prof !96

"for sum_input.s1.r19$x114.us.us":                ; preds = %"for sum_input.s1.r19$x114.preheader.us.us", %"for sum_input.s1.r19$x114.us.us"
  %convolved673.sroa.0.13.us.us = phi <32 x i32> [ %convolved673.sroa.0.0.vecblend923.us.us.3, %"for sum_input.s1.r19$x114.us.us" ], [ %convolved673.sroa.0.12.us.us, %"for sum_input.s1.r19$x114.preheader.us.us" ]
  %"sum_input.s1.r19$x116.us.us" = phi i32 [ %1181, %"for sum_input.s1.r19$x114.us.us" ], [ 0, %"for sum_input.s1.r19$x114.preheader.us.us" ]
  %niter1907 = phi i32 [ %niter1907.nsub.3, %"for sum_input.s1.r19$x114.us.us" ], [ %unroll_iter1906, %"for sum_input.s1.r19$x114.preheader.us.us" ]
  %1102 = mul nsw i32 %"sum_input.s1.r19$x116.us.us", %dilation_x
  %reass.add1152.us.us = add i32 %1604, %1102
  %reass.mul1153.us.us = shl i32 %reass.add1152.us.us, 2
  %1103 = add i32 %t973.us.us, %reass.mul1153.us.us
  %1104 = getelementptr inbounds i8, i8* %13, i32 %1103
  %1105 = bitcast i8* %1104 to <32 x i8>*
  %1106 = load <32 x i8>, <32 x i8>* %1105, align 4, !tbaa !110
  %t1225.us.us = zext <32 x i8> %1106 to <32 x i16>
  %1107 = shufflevector <32 x i16> %t1225.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1108 = bitcast <64 x i16> %1107 to <32 x i32>
  %1109 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1108)
  %1110 = bitcast <32 x i32> %1109 to <64 x i16>
  %1111 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1108)
  %1112 = bitcast <32 x i32> %1111 to <64 x i16>
  %1113 = add <64 x i16> %1112, %1110
  %1114 = shufflevector <64 x i16> %1113, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us = zext <16 x i16> %1114 to <16 x i32>
  %1115 = shufflevector <16 x i32> %t1224.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1116 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1115, i32 -4)
  %1117 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1116)
  %1118 = add nsw <32 x i32> %1117, %convolved673.sroa.0.13.us.us
  %1119 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1116)
  %1120 = add nsw <32 x i32> %1118, %1119
  %convolved673.sroa.0.0.vecblend923.us.us = shufflevector <32 x i32> %1120, <32 x i32> %convolved673.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1121 = or i32 %"sum_input.s1.r19$x116.us.us", 1
  %1122 = mul nsw i32 %1121, %dilation_x
  %reass.add1152.us.us.1 = add i32 %1604, %1122
  %reass.mul1153.us.us.1 = shl i32 %reass.add1152.us.us.1, 2
  %1123 = add i32 %t973.us.us, %reass.mul1153.us.us.1
  %1124 = getelementptr inbounds i8, i8* %13, i32 %1123
  %1125 = bitcast i8* %1124 to <32 x i8>*
  %1126 = load <32 x i8>, <32 x i8>* %1125, align 4, !tbaa !110
  %t1225.us.us.1 = zext <32 x i8> %1126 to <32 x i16>
  %1127 = shufflevector <32 x i16> %t1225.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1128 = bitcast <64 x i16> %1127 to <32 x i32>
  %1129 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1128)
  %1130 = bitcast <32 x i32> %1129 to <64 x i16>
  %1131 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1128)
  %1132 = bitcast <32 x i32> %1131 to <64 x i16>
  %1133 = add <64 x i16> %1132, %1130
  %1134 = shufflevector <64 x i16> %1133, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.1 = zext <16 x i16> %1134 to <16 x i32>
  %1135 = shufflevector <16 x i32> %t1224.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1136 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1135, i32 -4)
  %1137 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1136)
  %1138 = add nsw <32 x i32> %1137, %convolved673.sroa.0.0.vecblend923.us.us
  %1139 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1136)
  %1140 = add nsw <32 x i32> %1138, %1139
  %convolved673.sroa.0.0.vecblend923.us.us.1 = shufflevector <32 x i32> %1140, <32 x i32> %convolved673.sroa.0.0.vecblend923.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1141 = or i32 %"sum_input.s1.r19$x116.us.us", 2
  %1142 = mul nsw i32 %1141, %dilation_x
  %reass.add1152.us.us.2 = add i32 %1604, %1142
  %reass.mul1153.us.us.2 = shl i32 %reass.add1152.us.us.2, 2
  %1143 = add i32 %t973.us.us, %reass.mul1153.us.us.2
  %1144 = getelementptr inbounds i8, i8* %13, i32 %1143
  %1145 = bitcast i8* %1144 to <32 x i8>*
  %1146 = load <32 x i8>, <32 x i8>* %1145, align 4, !tbaa !110
  %t1225.us.us.2 = zext <32 x i8> %1146 to <32 x i16>
  %1147 = shufflevector <32 x i16> %t1225.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1148 = bitcast <64 x i16> %1147 to <32 x i32>
  %1149 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1148)
  %1150 = bitcast <32 x i32> %1149 to <64 x i16>
  %1151 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1148)
  %1152 = bitcast <32 x i32> %1151 to <64 x i16>
  %1153 = add <64 x i16> %1152, %1150
  %1154 = shufflevector <64 x i16> %1153, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.2 = zext <16 x i16> %1154 to <16 x i32>
  %1155 = shufflevector <16 x i32> %t1224.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1156 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1155, i32 -4)
  %1157 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1156)
  %1158 = add nsw <32 x i32> %1157, %convolved673.sroa.0.0.vecblend923.us.us.1
  %1159 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1156)
  %1160 = add nsw <32 x i32> %1158, %1159
  %convolved673.sroa.0.0.vecblend923.us.us.2 = shufflevector <32 x i32> %1160, <32 x i32> %convolved673.sroa.0.0.vecblend923.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1161 = or i32 %"sum_input.s1.r19$x116.us.us", 3
  %1162 = mul nsw i32 %1161, %dilation_x
  %reass.add1152.us.us.3 = add i32 %1604, %1162
  %reass.mul1153.us.us.3 = shl i32 %reass.add1152.us.us.3, 2
  %1163 = add i32 %t973.us.us, %reass.mul1153.us.us.3
  %1164 = getelementptr inbounds i8, i8* %13, i32 %1163
  %1165 = bitcast i8* %1164 to <32 x i8>*
  %1166 = load <32 x i8>, <32 x i8>* %1165, align 4, !tbaa !110
  %t1225.us.us.3 = zext <32 x i8> %1166 to <32 x i16>
  %1167 = shufflevector <32 x i16> %t1225.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1168 = bitcast <64 x i16> %1167 to <32 x i32>
  %1169 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1168)
  %1170 = bitcast <32 x i32> %1169 to <64 x i16>
  %1171 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1168)
  %1172 = bitcast <32 x i32> %1171 to <64 x i16>
  %1173 = add <64 x i16> %1172, %1170
  %1174 = shufflevector <64 x i16> %1173, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.3 = zext <16 x i16> %1174 to <16 x i32>
  %1175 = shufflevector <16 x i32> %t1224.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1176 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1175, i32 -4)
  %1177 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1176)
  %1178 = add nsw <32 x i32> %1177, %convolved673.sroa.0.0.vecblend923.us.us.2
  %1179 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1176)
  %1180 = add nsw <32 x i32> %1178, %1179
  %convolved673.sroa.0.0.vecblend923.us.us.3 = shufflevector <32 x i32> %1180, <32 x i32> %convolved673.sroa.0.0.vecblend923.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1181 = add nuw nsw i32 %"sum_input.s1.r19$x116.us.us", 4
  %niter1907.nsub.3 = add i32 %niter1907, -4
  %niter1907.ncmp.3 = icmp eq i32 %niter1907.nsub.3, 0
  br i1 %niter1907.ncmp.3, label %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x114.us.us"

"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x114.us.us", %"for sum_input.s1.r19$x114.preheader.us.us"
  %convolved673.sroa.0.0.vecblend923.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x114.preheader.us.us" ], [ %convolved673.sroa.0.0.vecblend923.us.us.3, %"for sum_input.s1.r19$x114.us.us" ]
  %convolved673.sroa.0.13.us.us.unr = phi <32 x i32> [ %convolved673.sroa.0.12.us.us, %"for sum_input.s1.r19$x114.preheader.us.us" ], [ %convolved673.sroa.0.0.vecblend923.us.us.3, %"for sum_input.s1.r19$x114.us.us" ]
  %"sum_input.s1.r19$x116.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x114.preheader.us.us" ], [ %1181, %"for sum_input.s1.r19$x114.us.us" ]
  br i1 %lcmp.mod1904.not, label %"end for sum_input.s1.r19$x115.us.us", label %"for sum_input.s1.r19$x114.us.us.epil"

"for sum_input.s1.r19$x114.us.us.epil":           ; preds = %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x114.us.us.epil"
  %convolved673.sroa.0.13.us.us.epil = phi <32 x i32> [ %convolved673.sroa.0.0.vecblend923.us.us.epil, %"for sum_input.s1.r19$x114.us.us.epil" ], [ %convolved673.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x116.us.us.epil" = phi i32 [ %1201, %"for sum_input.s1.r19$x114.us.us.epil" ], [ %"sum_input.s1.r19$x116.us.us.unr", %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa" ]
  %epil.iter1903 = phi i32 [ %epil.iter1903.sub, %"for sum_input.s1.r19$x114.us.us.epil" ], [ %xtraiter1902, %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa" ]
  %1182 = mul nsw i32 %"sum_input.s1.r19$x116.us.us.epil", %dilation_x
  %reass.add1152.us.us.epil = add i32 %1604, %1182
  %reass.mul1153.us.us.epil = shl i32 %reass.add1152.us.us.epil, 2
  %1183 = add i32 %t973.us.us, %reass.mul1153.us.us.epil
  %1184 = getelementptr inbounds i8, i8* %13, i32 %1183
  %1185 = bitcast i8* %1184 to <32 x i8>*
  %1186 = load <32 x i8>, <32 x i8>* %1185, align 4, !tbaa !110
  %t1225.us.us.epil = zext <32 x i8> %1186 to <32 x i16>
  %1187 = shufflevector <32 x i16> %t1225.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1188 = bitcast <64 x i16> %1187 to <32 x i32>
  %1189 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1188)
  %1190 = bitcast <32 x i32> %1189 to <64 x i16>
  %1191 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1188)
  %1192 = bitcast <32 x i32> %1191 to <64 x i16>
  %1193 = add <64 x i16> %1192, %1190
  %1194 = shufflevector <64 x i16> %1193, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.epil = zext <16 x i16> %1194 to <16 x i32>
  %1195 = shufflevector <16 x i32> %t1224.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1196 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1195, i32 -4)
  %1197 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1196)
  %1198 = add nsw <32 x i32> %1197, %convolved673.sroa.0.13.us.us.epil
  %1199 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1196)
  %1200 = add nsw <32 x i32> %1198, %1199
  %convolved673.sroa.0.0.vecblend923.us.us.epil = shufflevector <32 x i32> %1200, <32 x i32> %convolved673.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1201 = add nuw nsw i32 %"sum_input.s1.r19$x116.us.us.epil", 1
  %epil.iter1903.sub = add i32 %epil.iter1903, -1
  %epil.iter1903.cmp.not = icmp eq i32 %epil.iter1903.sub, 0
  br i1 %epil.iter1903.cmp.not, label %"end for sum_input.s1.r19$x115.us.us", label %"for sum_input.s1.r19$x114.us.us.epil", !llvm.loop !115

"end for sum_input.s1.r19$x115.us.us":            ; preds = %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x114.us.us.epil", %"for sum_input.s1.r19$y111.us.us"
  %convolved673.sroa.0.14.us.us = phi <32 x i32> [ %convolved673.sroa.0.12.us.us, %"for sum_input.s1.r19$y111.us.us" ], [ %convolved673.sroa.0.0.vecblend923.us.us.lcssa.ph, %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa" ], [ %convolved673.sroa.0.0.vecblend923.us.us.epil, %"for sum_input.s1.r19$x114.us.us.epil" ]
  %1202 = add nuw nsw i32 %"sum_input.s1.r19$y113.us.us", 1
  %.not728.us.us = icmp eq i32 %1202, %11
  br i1 %.not728.us.us, label %"consume sum_input126.us.us", label %"for sum_input.s1.r19$y111.us.us"

"consume sum_input126.us.us":                     ; preds = %"end for sum_input.s1.r19$x121.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x115.us.us", %"for sum_input.s1.r19$y117.preheader.us.us", %then_bb109.us.us, %next_bb110.us.us, %"for output.s0.x.xo99.us.us"
  %convolved673.sroa.0.20.us.us = phi <32 x i32> [ %convolved673.sroa.0.10.us.us, %"for output.s0.x.xo99.us.us" ], [ %convolved673.sroa.0.0.vecblend.us.us, %then_bb109.us.us ], [ %convolved673.sroa.0.0.vecblend.us.us, %next_bb110.us.us ], [ %convolved673.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y117.preheader.us.us" ], [ %convolved673.sroa.0.14.us.us, %"end for sum_input.s1.r19$x115.us.us" ], [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x121.loopexit.split.us.us.us.us.us" ]
  br i1 %1073, label %"for output.s0.c.co127.preheader.us.us", label %"end for output.s0.c.co128.us.us", !prof !96

"for output.s0.c.co127.us.us":                    ; preds = %"for output.s0.c.co127.preheader.us.us", %"consume convolved143.us.us"
  %output.s0.c.co129.us.us = phi i32 [ %1559, %"consume convolved143.us.us" ], [ 0, %"for output.s0.c.co127.preheader.us.us" ]
  %1203 = shl nsw i32 %output.s0.c.co129.us.us, 6
  %1204 = getelementptr inbounds i32, i32* %offset_c, i32 %1203
  %1205 = bitcast i32* %1204 to <32 x i32>*
  %1206 = load <32 x i32>, <32 x i32>* %1205, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb132.us.us, label %next_bb133.us.us

next_bb133.us.us:                                 ; preds = %"for output.s0.c.co127.us.us"
  %1207 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1568) #11
  %1208 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1207) #11
  %1209 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1569) #11
  %1210 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1209) #11
  %1211 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1570) #11
  %1212 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1211) #11
  %1213 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1571) #11
  %1214 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1213) #11
  %1215 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1572) #11
  %1216 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1215) #11
  %1217 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1573) #11
  %1218 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1217) #11
  %1219 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1574) #11
  %1220 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1219) #11
  %1221 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1575) #11
  %1222 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1206, <32 x i32> %1221) #11
  %1223 = getelementptr inbounds i32, i32* %1204, i32 32
  %1224 = bitcast i32* %1223 to <32 x i32>*
  %1225 = load <32 x i32>, <32 x i32>* %1224, align 128, !tbaa !104
  %1226 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1207) #11
  %1227 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1209) #11
  %1228 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1211) #11
  %1229 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1213) #11
  %1230 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1215) #11
  %1231 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1217) #11
  %1232 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1219) #11
  %1233 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1225, <32 x i32> %1221) #11
  br label %after_bb131.us.us

then_bb132.us.us:                                 ; preds = %"for output.s0.c.co127.us.us"
  %1234 = getelementptr inbounds i32, i32* %1204, i32 32
  %1235 = bitcast i32* %1234 to <32 x i32>*
  %1236 = load <32 x i32>, <32 x i32>* %1235, align 128, !tbaa !104
  br label %after_bb131.us.us

after_bb131.us.us:                                ; preds = %then_bb132.us.us, %next_bb133.us.us
  %sum_input533672.sroa.155.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1233, %next_bb133.us.us ]
  %sum_input533672.sroa.146.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1222, %next_bb133.us.us ]
  %sum_input533672.sroa.137.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1232, %next_bb133.us.us ]
  %sum_input533672.sroa.128.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1220, %next_bb133.us.us ]
  %sum_input533672.sroa.119.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1231, %next_bb133.us.us ]
  %sum_input533672.sroa.110.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1218, %next_bb133.us.us ]
  %sum_input533672.sroa.101.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1230, %next_bb133.us.us ]
  %sum_input533672.sroa.92.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1216, %next_bb133.us.us ]
  %sum_input533672.sroa.83.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1229, %next_bb133.us.us ]
  %sum_input533672.sroa.74.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1214, %next_bb133.us.us ]
  %sum_input533672.sroa.65.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1228, %next_bb133.us.us ]
  %sum_input533672.sroa.56.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1212, %next_bb133.us.us ]
  %sum_input533672.sroa.47.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1227, %next_bb133.us.us ]
  %sum_input533672.sroa.38.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1210, %next_bb133.us.us ]
  %sum_input533672.sroa.29.0.us.us = phi <32 x i32> [ %1236, %then_bb132.us.us ], [ %1226, %next_bb133.us.us ]
  %sum_input533672.sroa.0.0.us.us = phi <32 x i32> [ %1206, %then_bb132.us.us ], [ %1208, %next_bb133.us.us ]
  br i1 %1069, label %"for convolved.s1.r19$y134.preheader.us.us", label %"consume convolved143.us.us", !prof !96

"consume convolved143.us.us":                     ; preds = %"end for convolved.s1.r19$x138.loopexit.us.us.us", %"for convolved.s1.r19$y134.preheader.us.us", %after_bb131.us.us
  %sum_input533672.sroa.155.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.155.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.155.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1405.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.146.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.146.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.146.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1406.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.137.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.137.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.137.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1407.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.128.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.128.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.128.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1408.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.119.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.119.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.119.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1409.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.110.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.110.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.110.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1410.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.101.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.101.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.101.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1411.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.92.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.92.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.92.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1412.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.83.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.83.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.83.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1413.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.74.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.74.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.74.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1414.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.65.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.65.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.65.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1415.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.56.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.56.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.56.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1416.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.47.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.47.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.47.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1417.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.38.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.38.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.38.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1418.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.29.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.29.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.29.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1419.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %sum_input533672.sroa.0.6.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.us.us, %after_bb131.us.us ], [ %sum_input533672.sroa.0.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ], [ %.us-phi1420.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ]
  %1237 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.0.6.us.us, <32 x i32> %1593) #11
  %1238 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1237, <32 x i32> %sum_input533672.sroa.0.6.us.us, <32 x i32> %1593) #11
  %1239 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1238, <32 x i32> %1592) #11
  %1240 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1238, <32 x i32> %1594) #11
  %1241 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1240, <32 x i32> %1075) #11
  %1242 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1239, <32 x i32> %1241) #11
  %1243 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.29.6.us.us, <32 x i32> %1593) #11
  %1244 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1243, <32 x i32> %sum_input533672.sroa.29.6.us.us, <32 x i32> %1593) #11
  %1245 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1244, <32 x i32> %1594) #11
  %1246 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1245, <32 x i32> %1075) #11
  %1247 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1244, <32 x i32> %1592) #11
  %1248 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1246, <32 x i32> %1247) #11
  %1249 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1242, <32 x i32> %1248) #11
  %1250 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1249, <32 x i32> %1080) #11
  %1251 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1250, <32 x i32> zeroinitializer) #11
  %1252 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1251, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1253 = bitcast <32 x i32> %1252 to <64 x i16>
  %1254 = trunc <64 x i16> %1253 to <64 x i8>
  %1255 = bitcast <64 x i8> %1254 to <8 x i64>
  %1256 = shufflevector <8 x i64> %1255, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1257 = bitcast <4 x i64> %1256 to <32 x i8>
  %1258 = shufflevector <32 x i8> %1257, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1259 = bitcast <128 x i8> %1258 to <32 x i32>
  %1260 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1259, <32 x i32> %1083) #11
  %1261 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1260, <32 x i32> %1086) #11
  %1262 = bitcast <32 x i32> %1261 to <128 x i8>
  %1263 = shufflevector <128 x i8> %1262, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1264 = shl nsw i32 %output.s0.c.co129.us.us, 6
  %1265 = add i32 %1264, %t970.us.us
  %1266 = add i32 %1265, %1595
  %1267 = getelementptr inbounds i8, i8* %23, i32 %1266
  %1268 = bitcast i8* %1267 to <32 x i8>*
  store <32 x i8> %1263, <32 x i8>* %1268, align 1, !tbaa !113
  %1269 = shufflevector <8 x i64> %1255, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1270 = bitcast <4 x i64> %1269 to <32 x i8>
  %1271 = shufflevector <32 x i8> %1270, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1272 = bitcast <128 x i8> %1271 to <32 x i32>
  %1273 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1272, <32 x i32> %1083) #11
  %1274 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1273, <32 x i32> %1086) #11
  %1275 = bitcast <32 x i32> %1274 to <128 x i8>
  %1276 = shufflevector <128 x i8> %1275, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1277 = getelementptr inbounds i8, i8* %1267, i32 32
  %1278 = bitcast i8* %1277 to <32 x i8>*
  store <32 x i8> %1276, <32 x i8>* %1278, align 1, !tbaa !113
  %1279 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.38.6.us.us, <32 x i32> %1593) #11
  %1280 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1279, <32 x i32> %sum_input533672.sroa.38.6.us.us, <32 x i32> %1593) #11
  %1281 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1280, <32 x i32> %1592) #11
  %1282 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1280, <32 x i32> %1594) #11
  %1283 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1282, <32 x i32> %1075) #11
  %1284 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1281, <32 x i32> %1283) #11
  %1285 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.47.6.us.us, <32 x i32> %1593) #11
  %1286 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1285, <32 x i32> %sum_input533672.sroa.47.6.us.us, <32 x i32> %1593) #11
  %1287 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1286, <32 x i32> %1594) #11
  %1288 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1287, <32 x i32> %1075) #11
  %1289 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1286, <32 x i32> %1592) #11
  %1290 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1288, <32 x i32> %1289) #11
  %1291 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1284, <32 x i32> %1290) #11
  %1292 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1291, <32 x i32> %1080) #11
  %1293 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1292, <32 x i32> zeroinitializer) #11
  %1294 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1293, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1295 = bitcast <32 x i32> %1294 to <64 x i16>
  %1296 = trunc <64 x i16> %1295 to <64 x i8>
  %1297 = bitcast <64 x i8> %1296 to <8 x i64>
  %1298 = shufflevector <8 x i64> %1297, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1299 = bitcast <4 x i64> %1298 to <32 x i8>
  %1300 = shufflevector <32 x i8> %1299, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1301 = bitcast <128 x i8> %1300 to <32 x i32>
  %1302 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1301, <32 x i32> %1083) #11
  %1303 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1302, <32 x i32> %1086) #11
  %1304 = bitcast <32 x i32> %1303 to <128 x i8>
  %1305 = shufflevector <128 x i8> %1304, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1306 = add i32 %1265, %1596
  %1307 = getelementptr inbounds i8, i8* %23, i32 %1306
  %1308 = bitcast i8* %1307 to <32 x i8>*
  store <32 x i8> %1305, <32 x i8>* %1308, align 1, !tbaa !113
  %1309 = shufflevector <8 x i64> %1297, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1310 = bitcast <4 x i64> %1309 to <32 x i8>
  %1311 = shufflevector <32 x i8> %1310, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1312 = bitcast <128 x i8> %1311 to <32 x i32>
  %1313 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1312, <32 x i32> %1083) #11
  %1314 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1313, <32 x i32> %1086) #11
  %1315 = bitcast <32 x i32> %1314 to <128 x i8>
  %1316 = shufflevector <128 x i8> %1315, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1317 = getelementptr inbounds i8, i8* %1307, i32 32
  %1318 = bitcast i8* %1317 to <32 x i8>*
  store <32 x i8> %1316, <32 x i8>* %1318, align 1, !tbaa !113
  %1319 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.56.6.us.us, <32 x i32> %1593) #11
  %1320 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1319, <32 x i32> %sum_input533672.sroa.56.6.us.us, <32 x i32> %1593) #11
  %1321 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1320, <32 x i32> %1592) #11
  %1322 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1320, <32 x i32> %1594) #11
  %1323 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1322, <32 x i32> %1075) #11
  %1324 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1321, <32 x i32> %1323) #11
  %1325 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.65.6.us.us, <32 x i32> %1593) #11
  %1326 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1325, <32 x i32> %sum_input533672.sroa.65.6.us.us, <32 x i32> %1593) #11
  %1327 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1326, <32 x i32> %1594) #11
  %1328 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1327, <32 x i32> %1075) #11
  %1329 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1326, <32 x i32> %1592) #11
  %1330 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1328, <32 x i32> %1329) #11
  %1331 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1324, <32 x i32> %1330) #11
  %1332 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1331, <32 x i32> %1080) #11
  %1333 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1332, <32 x i32> zeroinitializer) #11
  %1334 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1333, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1335 = bitcast <32 x i32> %1334 to <64 x i16>
  %1336 = trunc <64 x i16> %1335 to <64 x i8>
  %1337 = bitcast <64 x i8> %1336 to <8 x i64>
  %1338 = shufflevector <8 x i64> %1337, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1339 = bitcast <4 x i64> %1338 to <32 x i8>
  %1340 = shufflevector <32 x i8> %1339, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1341 = bitcast <128 x i8> %1340 to <32 x i32>
  %1342 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1341, <32 x i32> %1083) #11
  %1343 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1342, <32 x i32> %1086) #11
  %1344 = bitcast <32 x i32> %1343 to <128 x i8>
  %1345 = shufflevector <128 x i8> %1344, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1346 = add i32 %1265, %1597
  %1347 = getelementptr inbounds i8, i8* %23, i32 %1346
  %1348 = bitcast i8* %1347 to <32 x i8>*
  store <32 x i8> %1345, <32 x i8>* %1348, align 1, !tbaa !113
  %1349 = shufflevector <8 x i64> %1337, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1350 = bitcast <4 x i64> %1349 to <32 x i8>
  %1351 = shufflevector <32 x i8> %1350, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1352 = bitcast <128 x i8> %1351 to <32 x i32>
  %1353 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1352, <32 x i32> %1083) #11
  %1354 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1353, <32 x i32> %1086) #11
  %1355 = bitcast <32 x i32> %1354 to <128 x i8>
  %1356 = shufflevector <128 x i8> %1355, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1357 = getelementptr inbounds i8, i8* %1347, i32 32
  %1358 = bitcast i8* %1357 to <32 x i8>*
  store <32 x i8> %1356, <32 x i8>* %1358, align 1, !tbaa !113
  %1359 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.74.6.us.us, <32 x i32> %1593) #11
  %1360 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1359, <32 x i32> %sum_input533672.sroa.74.6.us.us, <32 x i32> %1593) #11
  %1361 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1360, <32 x i32> %1592) #11
  %1362 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1360, <32 x i32> %1594) #11
  %1363 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1362, <32 x i32> %1075) #11
  %1364 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1361, <32 x i32> %1363) #11
  %1365 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.83.6.us.us, <32 x i32> %1593) #11
  %1366 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1365, <32 x i32> %sum_input533672.sroa.83.6.us.us, <32 x i32> %1593) #11
  %1367 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1366, <32 x i32> %1594) #11
  %1368 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1367, <32 x i32> %1075) #11
  %1369 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1366, <32 x i32> %1592) #11
  %1370 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1368, <32 x i32> %1369) #11
  %1371 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1364, <32 x i32> %1370) #11
  %1372 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1371, <32 x i32> %1080) #11
  %1373 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1372, <32 x i32> zeroinitializer) #11
  %1374 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1373, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1375 = bitcast <32 x i32> %1374 to <64 x i16>
  %1376 = trunc <64 x i16> %1375 to <64 x i8>
  %1377 = bitcast <64 x i8> %1376 to <8 x i64>
  %1378 = shufflevector <8 x i64> %1377, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1379 = bitcast <4 x i64> %1378 to <32 x i8>
  %1380 = shufflevector <32 x i8> %1379, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1381 = bitcast <128 x i8> %1380 to <32 x i32>
  %1382 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1381, <32 x i32> %1083) #11
  %1383 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1382, <32 x i32> %1086) #11
  %1384 = bitcast <32 x i32> %1383 to <128 x i8>
  %1385 = shufflevector <128 x i8> %1384, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1386 = add i32 %1265, %1598
  %1387 = getelementptr inbounds i8, i8* %23, i32 %1386
  %1388 = bitcast i8* %1387 to <32 x i8>*
  store <32 x i8> %1385, <32 x i8>* %1388, align 1, !tbaa !113
  %1389 = shufflevector <8 x i64> %1377, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1390 = bitcast <4 x i64> %1389 to <32 x i8>
  %1391 = shufflevector <32 x i8> %1390, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1392 = bitcast <128 x i8> %1391 to <32 x i32>
  %1393 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1392, <32 x i32> %1083) #11
  %1394 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1393, <32 x i32> %1086) #11
  %1395 = bitcast <32 x i32> %1394 to <128 x i8>
  %1396 = shufflevector <128 x i8> %1395, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1397 = getelementptr inbounds i8, i8* %1387, i32 32
  %1398 = bitcast i8* %1397 to <32 x i8>*
  store <32 x i8> %1396, <32 x i8>* %1398, align 1, !tbaa !113
  %1399 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.92.6.us.us, <32 x i32> %1593) #11
  %1400 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1399, <32 x i32> %sum_input533672.sroa.92.6.us.us, <32 x i32> %1593) #11
  %1401 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1400, <32 x i32> %1592) #11
  %1402 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1400, <32 x i32> %1594) #11
  %1403 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1402, <32 x i32> %1075) #11
  %1404 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1401, <32 x i32> %1403) #11
  %1405 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.101.6.us.us, <32 x i32> %1593) #11
  %1406 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1405, <32 x i32> %sum_input533672.sroa.101.6.us.us, <32 x i32> %1593) #11
  %1407 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1406, <32 x i32> %1594) #11
  %1408 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1407, <32 x i32> %1075) #11
  %1409 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1406, <32 x i32> %1592) #11
  %1410 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1408, <32 x i32> %1409) #11
  %1411 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1404, <32 x i32> %1410) #11
  %1412 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1411, <32 x i32> %1080) #11
  %1413 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1412, <32 x i32> zeroinitializer) #11
  %1414 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1413, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1415 = bitcast <32 x i32> %1414 to <64 x i16>
  %1416 = trunc <64 x i16> %1415 to <64 x i8>
  %1417 = bitcast <64 x i8> %1416 to <8 x i64>
  %1418 = shufflevector <8 x i64> %1417, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1419 = bitcast <4 x i64> %1418 to <32 x i8>
  %1420 = shufflevector <32 x i8> %1419, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1421 = bitcast <128 x i8> %1420 to <32 x i32>
  %1422 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1421, <32 x i32> %1083) #11
  %1423 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1422, <32 x i32> %1086) #11
  %1424 = bitcast <32 x i32> %1423 to <128 x i8>
  %1425 = shufflevector <128 x i8> %1424, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1426 = add i32 %1265, %1599
  %1427 = getelementptr inbounds i8, i8* %23, i32 %1426
  %1428 = bitcast i8* %1427 to <32 x i8>*
  store <32 x i8> %1425, <32 x i8>* %1428, align 1, !tbaa !113
  %1429 = shufflevector <8 x i64> %1417, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1430 = bitcast <4 x i64> %1429 to <32 x i8>
  %1431 = shufflevector <32 x i8> %1430, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1432 = bitcast <128 x i8> %1431 to <32 x i32>
  %1433 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1432, <32 x i32> %1083) #11
  %1434 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1433, <32 x i32> %1086) #11
  %1435 = bitcast <32 x i32> %1434 to <128 x i8>
  %1436 = shufflevector <128 x i8> %1435, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1437 = getelementptr inbounds i8, i8* %1427, i32 32
  %1438 = bitcast i8* %1437 to <32 x i8>*
  store <32 x i8> %1436, <32 x i8>* %1438, align 1, !tbaa !113
  %1439 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.110.6.us.us, <32 x i32> %1593) #11
  %1440 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1439, <32 x i32> %sum_input533672.sroa.110.6.us.us, <32 x i32> %1593) #11
  %1441 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1440, <32 x i32> %1592) #11
  %1442 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1440, <32 x i32> %1594) #11
  %1443 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1442, <32 x i32> %1075) #11
  %1444 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1441, <32 x i32> %1443) #11
  %1445 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.119.6.us.us, <32 x i32> %1593) #11
  %1446 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1445, <32 x i32> %sum_input533672.sroa.119.6.us.us, <32 x i32> %1593) #11
  %1447 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1446, <32 x i32> %1594) #11
  %1448 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1447, <32 x i32> %1075) #11
  %1449 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1446, <32 x i32> %1592) #11
  %1450 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1448, <32 x i32> %1449) #11
  %1451 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1444, <32 x i32> %1450) #11
  %1452 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1451, <32 x i32> %1080) #11
  %1453 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1452, <32 x i32> zeroinitializer) #11
  %1454 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1453, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1455 = bitcast <32 x i32> %1454 to <64 x i16>
  %1456 = trunc <64 x i16> %1455 to <64 x i8>
  %1457 = bitcast <64 x i8> %1456 to <8 x i64>
  %1458 = shufflevector <8 x i64> %1457, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1459 = bitcast <4 x i64> %1458 to <32 x i8>
  %1460 = shufflevector <32 x i8> %1459, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1461 = bitcast <128 x i8> %1460 to <32 x i32>
  %1462 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1461, <32 x i32> %1083) #11
  %1463 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1462, <32 x i32> %1086) #11
  %1464 = bitcast <32 x i32> %1463 to <128 x i8>
  %1465 = shufflevector <128 x i8> %1464, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1466 = add i32 %1265, %1600
  %1467 = getelementptr inbounds i8, i8* %23, i32 %1466
  %1468 = bitcast i8* %1467 to <32 x i8>*
  store <32 x i8> %1465, <32 x i8>* %1468, align 1, !tbaa !113
  %1469 = shufflevector <8 x i64> %1457, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1470 = bitcast <4 x i64> %1469 to <32 x i8>
  %1471 = shufflevector <32 x i8> %1470, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1472 = bitcast <128 x i8> %1471 to <32 x i32>
  %1473 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1472, <32 x i32> %1083) #11
  %1474 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1473, <32 x i32> %1086) #11
  %1475 = bitcast <32 x i32> %1474 to <128 x i8>
  %1476 = shufflevector <128 x i8> %1475, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1477 = getelementptr inbounds i8, i8* %1467, i32 32
  %1478 = bitcast i8* %1477 to <32 x i8>*
  store <32 x i8> %1476, <32 x i8>* %1478, align 1, !tbaa !113
  %1479 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.128.6.us.us, <32 x i32> %1593) #11
  %1480 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1479, <32 x i32> %sum_input533672.sroa.128.6.us.us, <32 x i32> %1593) #11
  %1481 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1480, <32 x i32> %1592) #11
  %1482 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1480, <32 x i32> %1594) #11
  %1483 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1482, <32 x i32> %1075) #11
  %1484 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1481, <32 x i32> %1483) #11
  %1485 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.137.6.us.us, <32 x i32> %1593) #11
  %1486 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1485, <32 x i32> %sum_input533672.sroa.137.6.us.us, <32 x i32> %1593) #11
  %1487 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1486, <32 x i32> %1594) #11
  %1488 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1487, <32 x i32> %1075) #11
  %1489 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1486, <32 x i32> %1592) #11
  %1490 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1488, <32 x i32> %1489) #11
  %1491 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1484, <32 x i32> %1490) #11
  %1492 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1491, <32 x i32> %1080) #11
  %1493 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1492, <32 x i32> zeroinitializer) #11
  %1494 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1493, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1495 = bitcast <32 x i32> %1494 to <64 x i16>
  %1496 = trunc <64 x i16> %1495 to <64 x i8>
  %1497 = bitcast <64 x i8> %1496 to <8 x i64>
  %1498 = shufflevector <8 x i64> %1497, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1499 = bitcast <4 x i64> %1498 to <32 x i8>
  %1500 = shufflevector <32 x i8> %1499, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1501 = bitcast <128 x i8> %1500 to <32 x i32>
  %1502 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1501, <32 x i32> %1083) #11
  %1503 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1502, <32 x i32> %1086) #11
  %1504 = bitcast <32 x i32> %1503 to <128 x i8>
  %1505 = shufflevector <128 x i8> %1504, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1506 = add i32 %1265, %1601
  %1507 = getelementptr inbounds i8, i8* %23, i32 %1506
  %1508 = bitcast i8* %1507 to <32 x i8>*
  store <32 x i8> %1505, <32 x i8>* %1508, align 1, !tbaa !113
  %1509 = shufflevector <8 x i64> %1497, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1510 = bitcast <4 x i64> %1509 to <32 x i8>
  %1511 = shufflevector <32 x i8> %1510, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1512 = bitcast <128 x i8> %1511 to <32 x i32>
  %1513 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1512, <32 x i32> %1083) #11
  %1514 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1513, <32 x i32> %1086) #11
  %1515 = bitcast <32 x i32> %1514 to <128 x i8>
  %1516 = shufflevector <128 x i8> %1515, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1517 = getelementptr inbounds i8, i8* %1507, i32 32
  %1518 = bitcast i8* %1517 to <32 x i8>*
  store <32 x i8> %1516, <32 x i8>* %1518, align 1, !tbaa !113
  %1519 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.146.6.us.us, <32 x i32> %1593) #11
  %1520 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1519, <32 x i32> %sum_input533672.sroa.146.6.us.us, <32 x i32> %1593) #11
  %1521 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1520, <32 x i32> %1592) #11
  %1522 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1520, <32 x i32> %1594) #11
  %1523 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1522, <32 x i32> %1075) #11
  %1524 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1521, <32 x i32> %1523) #11
  %1525 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %sum_input533672.sroa.155.6.us.us, <32 x i32> %1593) #11
  %1526 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1525, <32 x i32> %sum_input533672.sroa.155.6.us.us, <32 x i32> %1593) #11
  %1527 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1526, <32 x i32> %1594) #11
  %1528 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1527, <32 x i32> %1075) #11
  %1529 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1526, <32 x i32> %1592) #11
  %1530 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1528, <32 x i32> %1529) #11
  %1531 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1524, <32 x i32> %1530) #11
  %1532 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1531, <32 x i32> %1080) #11
  %1533 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1532, <32 x i32> zeroinitializer) #11
  %1534 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1533, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %1535 = bitcast <32 x i32> %1534 to <64 x i16>
  %1536 = trunc <64 x i16> %1535 to <64 x i8>
  %1537 = bitcast <64 x i8> %1536 to <8 x i64>
  %1538 = shufflevector <8 x i64> %1537, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1539 = bitcast <4 x i64> %1538 to <32 x i8>
  %1540 = shufflevector <32 x i8> %1539, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1541 = bitcast <128 x i8> %1540 to <32 x i32>
  %1542 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1541, <32 x i32> %1083) #11
  %1543 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1542, <32 x i32> %1086) #11
  %1544 = bitcast <32 x i32> %1543 to <128 x i8>
  %1545 = shufflevector <128 x i8> %1544, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1546 = add i32 %1265, %1602
  %1547 = getelementptr inbounds i8, i8* %23, i32 %1546
  %1548 = bitcast i8* %1547 to <32 x i8>*
  store <32 x i8> %1545, <32 x i8>* %1548, align 1, !tbaa !113
  %1549 = shufflevector <8 x i64> %1537, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1550 = bitcast <4 x i64> %1549 to <32 x i8>
  %1551 = shufflevector <32 x i8> %1550, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1552 = bitcast <128 x i8> %1551 to <32 x i32>
  %1553 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1552, <32 x i32> %1083) #11
  %1554 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1553, <32 x i32> %1086) #11
  %1555 = bitcast <32 x i32> %1554 to <128 x i8>
  %1556 = shufflevector <128 x i8> %1555, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1557 = getelementptr inbounds i8, i8* %1547, i32 32
  %1558 = bitcast i8* %1557 to <32 x i8>*
  store <32 x i8> %1556, <32 x i8>* %1558, align 1, !tbaa !113
  %1559 = add nuw nsw i32 %output.s0.c.co129.us.us, 1
  %.not721.us.us = icmp eq i32 %1559, %1072
  br i1 %.not721.us.us, label %"end for output.s0.c.co128.us.us", label %"for output.s0.c.co127.us.us"

"end for output.s0.c.co128.us.us":                ; preds = %"consume convolved143.us.us", %"consume sum_input126.us.us"
  %1560 = add nuw nsw i32 %output.s0.x.xo101.us.us, 1
  %.not720.us.us = icmp eq i32 %1560, %1068
  br i1 %.not720.us.us, label %"end for output.s0.x.xo100.loopexit.us.us", label %"for output.s0.x.xo99.us.us"

"for convolved.s1.r19$y134.preheader.us.us":      ; preds = %after_bb131.us.us
  %1561 = shl nuw nsw i32 %output.s0.c.co129.us.us, 1
  %1562 = or i32 %1561, 1
  %1563 = mul nsw i32 %1562, %8
  %1564 = mul nsw i32 %output.s0.c.co129.us.us, %8
  br i1 %1070, label %"for convolved.s1.r19$y134.us.us.us", label %"consume convolved143.us.us", !prof !96

"for sum_input.s1.r19$x114.preheader.us.us":      ; preds = %"for sum_input.s1.r19$y111.us.us"
  %1565 = mul nsw i32 %"sum_input.s1.r19$y113.us.us", %dilation_y
  %1566 = add nsw i32 %1565, %1100
  %1567 = mul nsw i32 %1566, %19
  %t973.us.us = add i32 %1095, %1567
  br i1 %1090, label %"end for sum_input.s1.r19$x115.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x114.us.us"

"for output.s0.c.co127.preheader.us.us":          ; preds = %"consume sum_input126.us.us"
  %convolved673.sroa.0.0.vec.extract932.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 0
  %1568 = mul nsw i32 %convolved673.sroa.0.0.vec.extract932.us.us, %309
  %convolved673.sroa.0.4.vec.extract934.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 1
  %1569 = mul nsw i32 %convolved673.sroa.0.4.vec.extract934.us.us, %309
  %convolved673.sroa.0.8.vec.extract936.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 2
  %1570 = mul nsw i32 %convolved673.sroa.0.8.vec.extract936.us.us, %309
  %convolved673.sroa.0.12.vec.extract938.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 3
  %1571 = mul nsw i32 %convolved673.sroa.0.12.vec.extract938.us.us, %309
  %convolved673.sroa.0.16.vec.extract940.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 4
  %1572 = mul nsw i32 %convolved673.sroa.0.16.vec.extract940.us.us, %309
  %convolved673.sroa.0.20.vec.extract942.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 5
  %1573 = mul nsw i32 %convolved673.sroa.0.20.vec.extract942.us.us, %309
  %convolved673.sroa.0.24.vec.extract944.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 6
  %1574 = mul nsw i32 %convolved673.sroa.0.24.vec.extract944.us.us, %309
  %convolved673.sroa.0.28.vec.extract946.us.us = extractelement <32 x i32> %convolved673.sroa.0.20.us.us, i32 7
  %1575 = mul nsw i32 %convolved673.sroa.0.28.vec.extract946.us.us, %309
  %1576 = add nsw i32 %output.s0.x.x.base.s102.us.us, %25
  %1577 = add nsw i32 %1576, 7
  %1578 = mul nsw i32 %1577, %stride_x
  %1579 = add nsw i32 %1576, 6
  %1580 = mul nsw i32 %1579, %stride_x
  %1581 = add nsw i32 %1576, 5
  %1582 = mul nsw i32 %1581, %stride_x
  %1583 = add nsw i32 %1576, 4
  %1584 = mul nsw i32 %1583, %stride_x
  %1585 = add nsw i32 %1576, 3
  %1586 = mul nsw i32 %1585, %stride_x
  %1587 = add nsw i32 %1576, 2
  %1588 = mul nsw i32 %1587, %stride_x
  %1589 = add nsw i32 %1576, 1
  %1590 = mul nsw i32 %1589, %stride_x
  %1591 = mul nsw i32 %1576, %stride_x
  %1592 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %1593 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %1594 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1076) #11
  %1595 = mul nsw i32 %1576, %27
  %1596 = mul nsw i32 %1589, %27
  %1597 = mul nsw i32 %1587, %27
  %1598 = mul nsw i32 %1585, %27
  %1599 = mul nsw i32 %1583, %27
  %1600 = mul nsw i32 %1581, %27
  %1601 = mul nsw i32 %1579, %27
  %1602 = mul nsw i32 %1577, %27
  br label %"for output.s0.c.co127.us.us"

"for sum_input.s1.r19$y111.preheader.us.us":      ; preds = %then_bb109.us.us
  %1603 = add nsw i32 %output.s0.x.x.base.s102.us.us, %25
  %1604 = sub i32 %1603, %16
  br label %"for sum_input.s1.r19$y111.us.us"

"for sum_input.s1.r19$y117.preheader.us.us":      ; preds = %next_bb110.us.us
  %1605 = add nsw i32 %output.s0.x.x.base.s102.us.us, %25
  %1606 = mul nsw i32 %1605, %stride_x
  br i1 %brmerge1670.demorgan, label %"for sum_input.s1.r19$y117.us.us.us.us", label %"consume sum_input126.us.us", !prof !103

"end for output.s0.x.xo100.loopexit.us.us":       ; preds = %"end for output.s0.c.co128.us.us"
  %1607 = add nuw nsw i32 %output.s0.y.rebased98.us.us, 1
  %.not719.us.us = icmp eq i32 %1607, %29
  br i1 %.not719.us.us, label %"end for output.s0.y.rebased97.loopexit.us", label %"for output.s0.y.rebased96.us.us"

"for sum_input.s1.r19$y117.us.us.us.us":          ; preds = %"for sum_input.s1.r19$y117.preheader.us.us", %"end for sum_input.s1.r19$x121.loopexit.split.us.us.us.us.us"
  %convolved673.sroa.0.15.us.us.us.us = phi <32 x i32> [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x121.loopexit.split.us.us.us.us.us" ], [ %convolved673.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y117.preheader.us.us" ]
  %"sum_input.s1.r19$y119.us.us.us.us" = phi i32 [ %1798, %"end for sum_input.s1.r19$x121.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y117.preheader.us.us" ]
  %1608 = mul nsw i32 %"sum_input.s1.r19$y119.us.us.us.us", %dilation_y
  %t975.s.us.us.us.us = add nsw i32 %1608, %1100
  %1609 = mul nsw i32 %t975.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x120.us.us.us.us.us"

"for sum_input.s1.r19$x120.us.us.us.us.us":       ; preds = %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y117.us.us.us.us"
  %convolved673.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us" ], [ %convolved673.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y117.us.us.us.us" ]
  %"sum_input.s1.r19$x122.us.us.us.us.us" = phi i32 [ %1797, %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y117.us.us.us.us" ]
  %1610 = mul nsw i32 %"sum_input.s1.r19$x122.us.us.us.us.us", %dilation_x
  %t976.s.us.us.us.us.us = add nsw i32 %1610, %1606
  %t1226.us.us.us.us.us = mul nsw i32 %t976.s.us.us.us.us.us, %17
  %1611 = add i32 %t1226.us.us.us.us.us, %1609
  %t977.us.us.us.us.us = sub i32 %1611, %t941
  %1612 = add i32 %t977.us.us.us.us.us, %1094
  %t949.us.us.us.us.us = add i32 %1611, %1065
  %1613 = sub i32 %t949.us.us.us.us.us, %1052
  %t978.us.us.us.us.us = sub i32 %1613, %1053
  %1614 = add i32 %t978.us.us.us.us.us, %1094
  %1615 = add i32 %1611, %1063
  %1616 = sub i32 %1615, %1087
  %t979.us.us.us.us.us = sub i32 %1616, %1053
  %1617 = add i32 %t979.us.us.us.us.us, %1094
  %1618 = add i32 %1611, %1062
  %1619 = sub i32 %1618, %1087
  %t980.us.us.us.us.us = sub i32 %1619, %1053
  %1620 = add i32 %t980.us.us.us.us.us, %1094
  %1621 = add i32 %1611, %1061
  %1622 = sub i32 %1621, %1087
  %t981.us.us.us.us.us = sub i32 %1622, %1053
  %1623 = add i32 %t981.us.us.us.us.us, %1094
  %1624 = add i32 %1611, %1060
  %1625 = sub i32 %1624, %1087
  %t982.us.us.us.us.us = sub i32 %1625, %1053
  %1626 = add i32 %t982.us.us.us.us.us, %1094
  %1627 = add i32 %1611, %1059
  %1628 = sub i32 %1627, %1087
  %t983.us.us.us.us.us = sub i32 %1628, %1053
  %1629 = add i32 %t983.us.us.us.us.us, %1094
  %1630 = add i32 %1611, %1058
  %1631 = sub i32 %1630, %1087
  %t984.us.us.us.us.us = sub i32 %1631, %1053
  %1632 = add i32 %t984.us.us.us.us.us, %1094
  br i1 %1089, label %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124123.us.us.us.us.us"

"for sum_input.s1.r19$z.r124123.us.us.us.us.us":  ; preds = %"for sum_input.s1.r19$x120.us.us.us.us.us", %"for sum_input.s1.r19$z.r124123.us.us.us.us.us"
  %convolved673.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124123.us.us.us.us.us" ], [ %convolved673.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x120.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124125.us.us.us.us.us" = phi i32 [ %1742, %"for sum_input.s1.r19$z.r124123.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x120.us.us.us.us.us" ]
  %niter1901 = phi i32 [ %niter1901.nsub.1, %"for sum_input.s1.r19$z.r124123.us.us.us.us.us" ], [ %unroll_iter1900, %"for sum_input.s1.r19$x120.us.us.us.us.us" ]
  %1633 = shl nsw i32 %"sum_input.s1.r19$z.r124125.us.us.us.us.us", 2
  %1634 = add i32 %1612, %1633
  %1635 = getelementptr inbounds i8, i8* %13, i32 %1634
  %1636 = bitcast i8* %1635 to <4 x i8>*
  %1637 = load <4 x i8>, <4 x i8>* %1636, align 4, !tbaa !110
  %1638 = add i32 %1614, %1633
  %1639 = getelementptr inbounds i8, i8* %13, i32 %1638
  %1640 = bitcast i8* %1639 to <4 x i8>*
  %1641 = load <4 x i8>, <4 x i8>* %1640, align 4, !tbaa !110
  %1642 = add i32 %1617, %1633
  %1643 = getelementptr inbounds i8, i8* %13, i32 %1642
  %1644 = bitcast i8* %1643 to <4 x i8>*
  %1645 = load <4 x i8>, <4 x i8>* %1644, align 4, !tbaa !110
  %1646 = add i32 %1620, %1633
  %1647 = getelementptr inbounds i8, i8* %13, i32 %1646
  %1648 = bitcast i8* %1647 to <4 x i8>*
  %1649 = load <4 x i8>, <4 x i8>* %1648, align 4, !tbaa !110
  %1650 = add i32 %1623, %1633
  %1651 = getelementptr inbounds i8, i8* %13, i32 %1650
  %1652 = bitcast i8* %1651 to <4 x i8>*
  %1653 = load <4 x i8>, <4 x i8>* %1652, align 4, !tbaa !110
  %1654 = add i32 %1626, %1633
  %1655 = getelementptr inbounds i8, i8* %13, i32 %1654
  %1656 = bitcast i8* %1655 to <4 x i8>*
  %1657 = load <4 x i8>, <4 x i8>* %1656, align 4, !tbaa !110
  %1658 = add i32 %1629, %1633
  %1659 = getelementptr inbounds i8, i8* %13, i32 %1658
  %1660 = bitcast i8* %1659 to <4 x i8>*
  %1661 = load <4 x i8>, <4 x i8>* %1660, align 4, !tbaa !110
  %1662 = add i32 %1632, %1633
  %1663 = getelementptr inbounds i8, i8* %13, i32 %1662
  %1664 = bitcast i8* %1663 to <4 x i8>*
  %1665 = load <4 x i8>, <4 x i8>* %1664, align 4, !tbaa !110
  %1666 = shufflevector <4 x i8> %1637, <4 x i8> %1641, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1667 = shufflevector <4 x i8> %1645, <4 x i8> %1649, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1668 = shufflevector <4 x i8> %1653, <4 x i8> %1657, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1669 = shufflevector <4 x i8> %1661, <4 x i8> %1665, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1670 = shufflevector <8 x i8> %1666, <8 x i8> %1667, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1671 = shufflevector <8 x i8> %1668, <8 x i8> %1669, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1672 = shufflevector <16 x i8> %1670, <16 x i8> %1671, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us = zext <32 x i8> %1672 to <32 x i16>
  %1673 = shufflevector <32 x i16> %t1228.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1674 = bitcast <64 x i16> %1673 to <32 x i32>
  %1675 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1674)
  %1676 = bitcast <32 x i32> %1675 to <64 x i16>
  %1677 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1674)
  %1678 = bitcast <32 x i32> %1677 to <64 x i16>
  %1679 = add <64 x i16> %1678, %1676
  %1680 = shufflevector <64 x i16> %1679, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us = zext <16 x i16> %1680 to <16 x i32>
  %1681 = shufflevector <16 x i32> %t1227.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1682 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1681, i32 -4)
  %1683 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1682)
  %1684 = add nsw <32 x i32> %1683, %convolved673.sroa.0.18.us.us.us.us.us
  %1685 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1682)
  %1686 = add nsw <32 x i32> %1684, %1685
  %convolved673.sroa.0.0.vecblend928.us.us.us.us.us = shufflevector <32 x i32> %1686, <32 x i32> %convolved673.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1687 = shl i32 %"sum_input.s1.r19$z.r124125.us.us.us.us.us", 2
  %1688 = or i32 %1687, 4
  %1689 = add i32 %1612, %1688
  %1690 = getelementptr inbounds i8, i8* %13, i32 %1689
  %1691 = bitcast i8* %1690 to <4 x i8>*
  %1692 = load <4 x i8>, <4 x i8>* %1691, align 4, !tbaa !110
  %1693 = add i32 %1614, %1688
  %1694 = getelementptr inbounds i8, i8* %13, i32 %1693
  %1695 = bitcast i8* %1694 to <4 x i8>*
  %1696 = load <4 x i8>, <4 x i8>* %1695, align 4, !tbaa !110
  %1697 = add i32 %1617, %1688
  %1698 = getelementptr inbounds i8, i8* %13, i32 %1697
  %1699 = bitcast i8* %1698 to <4 x i8>*
  %1700 = load <4 x i8>, <4 x i8>* %1699, align 4, !tbaa !110
  %1701 = add i32 %1620, %1688
  %1702 = getelementptr inbounds i8, i8* %13, i32 %1701
  %1703 = bitcast i8* %1702 to <4 x i8>*
  %1704 = load <4 x i8>, <4 x i8>* %1703, align 4, !tbaa !110
  %1705 = add i32 %1623, %1688
  %1706 = getelementptr inbounds i8, i8* %13, i32 %1705
  %1707 = bitcast i8* %1706 to <4 x i8>*
  %1708 = load <4 x i8>, <4 x i8>* %1707, align 4, !tbaa !110
  %1709 = add i32 %1626, %1688
  %1710 = getelementptr inbounds i8, i8* %13, i32 %1709
  %1711 = bitcast i8* %1710 to <4 x i8>*
  %1712 = load <4 x i8>, <4 x i8>* %1711, align 4, !tbaa !110
  %1713 = add i32 %1629, %1688
  %1714 = getelementptr inbounds i8, i8* %13, i32 %1713
  %1715 = bitcast i8* %1714 to <4 x i8>*
  %1716 = load <4 x i8>, <4 x i8>* %1715, align 4, !tbaa !110
  %1717 = add i32 %1632, %1688
  %1718 = getelementptr inbounds i8, i8* %13, i32 %1717
  %1719 = bitcast i8* %1718 to <4 x i8>*
  %1720 = load <4 x i8>, <4 x i8>* %1719, align 4, !tbaa !110
  %1721 = shufflevector <4 x i8> %1692, <4 x i8> %1696, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1722 = shufflevector <4 x i8> %1700, <4 x i8> %1704, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1723 = shufflevector <4 x i8> %1708, <4 x i8> %1712, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1724 = shufflevector <4 x i8> %1716, <4 x i8> %1720, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1725 = shufflevector <8 x i8> %1721, <8 x i8> %1722, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1726 = shufflevector <8 x i8> %1723, <8 x i8> %1724, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1727 = shufflevector <16 x i8> %1725, <16 x i8> %1726, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us.1 = zext <32 x i8> %1727 to <32 x i16>
  %1728 = shufflevector <32 x i16> %t1228.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1729 = bitcast <64 x i16> %1728 to <32 x i32>
  %1730 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1729)
  %1731 = bitcast <32 x i32> %1730 to <64 x i16>
  %1732 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1729)
  %1733 = bitcast <32 x i32> %1732 to <64 x i16>
  %1734 = add <64 x i16> %1733, %1731
  %1735 = shufflevector <64 x i16> %1734, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us.1 = zext <16 x i16> %1735 to <16 x i32>
  %1736 = shufflevector <16 x i32> %t1227.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1737 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1736, i32 -4)
  %1738 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1737)
  %1739 = add nsw <32 x i32> %1738, %convolved673.sroa.0.0.vecblend928.us.us.us.us.us
  %1740 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1737)
  %1741 = add nsw <32 x i32> %1739, %1740
  %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.1 = shufflevector <32 x i32> %1741, <32 x i32> %convolved673.sroa.0.0.vecblend928.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1742 = add nuw nsw i32 %"sum_input.s1.r19$z.r124125.us.us.us.us.us", 2
  %niter1901.nsub.1 = add i32 %niter1901, -2
  %niter1901.ncmp.1 = icmp eq i32 %niter1901.nsub.1, 0
  br i1 %niter1901.ncmp.1, label %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124123.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124123.us.us.us.us.us", %"for sum_input.s1.r19$x120.us.us.us.us.us"
  %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x120.us.us.us.us.us" ], [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124123.us.us.us.us.us" ]
  %convolved673.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x120.us.us.us.us.us" ], [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124123.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124125.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x120.us.us.us.us.us" ], [ %1742, %"for sum_input.s1.r19$z.r124123.us.us.us.us.us" ]
  br i1 %lcmp.mod1899.not, label %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124123.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124123.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us.unr-lcssa"
  %1743 = shl nsw i32 %"sum_input.s1.r19$z.r124125.us.us.us.us.us.unr", 2
  %1744 = add i32 %1612, %1743
  %1745 = getelementptr inbounds i8, i8* %13, i32 %1744
  %1746 = bitcast i8* %1745 to <4 x i8>*
  %1747 = load <4 x i8>, <4 x i8>* %1746, align 4, !tbaa !110
  %1748 = add i32 %1614, %1743
  %1749 = getelementptr inbounds i8, i8* %13, i32 %1748
  %1750 = bitcast i8* %1749 to <4 x i8>*
  %1751 = load <4 x i8>, <4 x i8>* %1750, align 4, !tbaa !110
  %1752 = add i32 %1617, %1743
  %1753 = getelementptr inbounds i8, i8* %13, i32 %1752
  %1754 = bitcast i8* %1753 to <4 x i8>*
  %1755 = load <4 x i8>, <4 x i8>* %1754, align 4, !tbaa !110
  %1756 = add i32 %1620, %1743
  %1757 = getelementptr inbounds i8, i8* %13, i32 %1756
  %1758 = bitcast i8* %1757 to <4 x i8>*
  %1759 = load <4 x i8>, <4 x i8>* %1758, align 4, !tbaa !110
  %1760 = add i32 %1623, %1743
  %1761 = getelementptr inbounds i8, i8* %13, i32 %1760
  %1762 = bitcast i8* %1761 to <4 x i8>*
  %1763 = load <4 x i8>, <4 x i8>* %1762, align 4, !tbaa !110
  %1764 = add i32 %1626, %1743
  %1765 = getelementptr inbounds i8, i8* %13, i32 %1764
  %1766 = bitcast i8* %1765 to <4 x i8>*
  %1767 = load <4 x i8>, <4 x i8>* %1766, align 4, !tbaa !110
  %1768 = add i32 %1629, %1743
  %1769 = getelementptr inbounds i8, i8* %13, i32 %1768
  %1770 = bitcast i8* %1769 to <4 x i8>*
  %1771 = load <4 x i8>, <4 x i8>* %1770, align 4, !tbaa !110
  %1772 = add i32 %1632, %1743
  %1773 = getelementptr inbounds i8, i8* %13, i32 %1772
  %1774 = bitcast i8* %1773 to <4 x i8>*
  %1775 = load <4 x i8>, <4 x i8>* %1774, align 4, !tbaa !110
  %1776 = shufflevector <4 x i8> %1747, <4 x i8> %1751, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1777 = shufflevector <4 x i8> %1755, <4 x i8> %1759, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1778 = shufflevector <4 x i8> %1763, <4 x i8> %1767, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1779 = shufflevector <4 x i8> %1771, <4 x i8> %1775, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1780 = shufflevector <8 x i8> %1776, <8 x i8> %1777, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1781 = shufflevector <8 x i8> %1778, <8 x i8> %1779, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1782 = shufflevector <16 x i8> %1780, <16 x i8> %1781, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us.epil = zext <32 x i8> %1782 to <32 x i16>
  %1783 = shufflevector <32 x i16> %t1228.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1784 = bitcast <64 x i16> %1783 to <32 x i32>
  %1785 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1784)
  %1786 = bitcast <32 x i32> %1785 to <64 x i16>
  %1787 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1784)
  %1788 = bitcast <32 x i32> %1787 to <64 x i16>
  %1789 = add <64 x i16> %1788, %1786
  %1790 = shufflevector <64 x i16> %1789, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us.epil = zext <16 x i16> %1790 to <16 x i32>
  %1791 = shufflevector <16 x i32> %t1227.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1792 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1791, i32 -4)
  %1793 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1792)
  %1794 = add nsw <32 x i32> %1793, %convolved673.sroa.0.18.us.us.us.us.us.unr
  %1795 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1792)
  %1796 = add nsw <32 x i32> %1794, %1795
  %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.epil = shufflevector <32 x i32> %1796, <32 x i32> %convolved673.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124123.us.us.us.us.us.epil"
  %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.lcssa = phi <32 x i32> [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us.unr-lcssa" ], [ %convolved673.sroa.0.0.vecblend928.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124123.us.us.us.us.us.epil" ]
  %1797 = add nuw nsw i32 %"sum_input.s1.r19$x122.us.us.us.us.us", 1
  %.not726.us.us.us.us.us = icmp eq i32 %1797, %9
  br i1 %.not726.us.us.us.us.us, label %"end for sum_input.s1.r19$x121.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x120.us.us.us.us.us"

"end for sum_input.s1.r19$x121.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124124.loopexit.us.us.us.us.us"
  %1798 = add nuw nsw i32 %"sum_input.s1.r19$y119.us.us.us.us", 1
  %.not725.us.us.us.us = icmp eq i32 %1798, %11
  br i1 %.not725.us.us.us.us, label %"consume sum_input126.us.us", label %"for sum_input.s1.r19$y117.us.us.us.us"

"for convolved.s1.r19$y134.us.us.us":             ; preds = %"for convolved.s1.r19$y134.preheader.us.us", %"end for convolved.s1.r19$x138.loopexit.us.us.us"
  %sum_input533672.sroa.155.1.us.us.us = phi <32 x i32> [ %.us-phi1405.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.155.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.146.1.us.us.us = phi <32 x i32> [ %.us-phi1406.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.146.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.137.1.us.us.us = phi <32 x i32> [ %.us-phi1407.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.137.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.128.1.us.us.us = phi <32 x i32> [ %.us-phi1408.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.128.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.119.1.us.us.us = phi <32 x i32> [ %.us-phi1409.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.119.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.110.1.us.us.us = phi <32 x i32> [ %.us-phi1410.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.110.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.101.1.us.us.us = phi <32 x i32> [ %.us-phi1411.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.101.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.92.1.us.us.us = phi <32 x i32> [ %.us-phi1412.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.92.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.83.1.us.us.us = phi <32 x i32> [ %.us-phi1413.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.83.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.74.1.us.us.us = phi <32 x i32> [ %.us-phi1414.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.74.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.65.1.us.us.us = phi <32 x i32> [ %.us-phi1415.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.65.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.56.1.us.us.us = phi <32 x i32> [ %.us-phi1416.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.56.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.47.1.us.us.us = phi <32 x i32> [ %.us-phi1417.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.47.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.38.1.us.us.us = phi <32 x i32> [ %.us-phi1418.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.38.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.29.1.us.us.us = phi <32 x i32> [ %.us-phi1419.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.29.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %sum_input533672.sroa.0.1.us.us.us = phi <32 x i32> [ %.us-phi1420.us.us.us, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ %sum_input533672.sroa.0.0.us.us, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %"convolved.s1.r19$y136.us.us.us" = phi i32 [ %1803, %"end for convolved.s1.r19$x138.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y134.preheader.us.us" ]
  %1799 = mul nsw i32 %"convolved.s1.r19$y136.us.us.us", %dilation_y
  %1800 = add nsw i32 %1799, %1100
  %1801 = mul nsw i32 %1800, %19
  %t1011.us.us.us = add nsw i32 %1801, %1096
  %1802 = mul nsw i32 %"convolved.s1.r19$y136.us.us.us", %12
  br i1 %1071, label %"for convolved.s1.r19$x137.us.us.us.us", label %"end for convolved.s1.r19$x138.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x138.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us", %"for convolved.s1.r19$y134.us.us.us"
  %.us-phi1405.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.155.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1884, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1406.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.146.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1883, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1407.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.137.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1877, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1408.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.128.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1876, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1409.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.119.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1870, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1410.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.110.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1869, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1411.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.101.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1863, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1412.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.92.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1862, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1413.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.83.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1856, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1414.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.74.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1855, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1415.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.65.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1849, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1416.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.56.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1848, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1417.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.47.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1842, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1418.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.38.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1841, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1419.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.29.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1835, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %.us-phi1420.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ], [ %1829, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ]
  %1803 = add nuw nsw i32 %"convolved.s1.r19$y136.us.us.us", 1
  %.not722.us.us.us = icmp eq i32 %1803, %11
  br i1 %.not722.us.us.us, label %"consume convolved143.us.us", label %"for convolved.s1.r19$y134.us.us.us"

"for convolved.s1.r19$x137.us.us.us.us":          ; preds = %"for convolved.s1.r19$y134.us.us.us", %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us"
  %sum_input533672.sroa.155.2.us.us.us.us = phi <32 x i32> [ %1884, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.155.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.146.2.us.us.us.us = phi <32 x i32> [ %1883, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.146.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.137.2.us.us.us.us = phi <32 x i32> [ %1877, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.137.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.128.2.us.us.us.us = phi <32 x i32> [ %1876, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.128.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.119.2.us.us.us.us = phi <32 x i32> [ %1870, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.119.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.110.2.us.us.us.us = phi <32 x i32> [ %1869, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.110.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.101.2.us.us.us.us = phi <32 x i32> [ %1863, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.101.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.92.2.us.us.us.us = phi <32 x i32> [ %1862, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.92.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.83.2.us.us.us.us = phi <32 x i32> [ %1856, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.83.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.74.2.us.us.us.us = phi <32 x i32> [ %1855, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.74.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.65.2.us.us.us.us = phi <32 x i32> [ %1849, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.65.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.56.2.us.us.us.us = phi <32 x i32> [ %1848, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.56.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.47.2.us.us.us.us = phi <32 x i32> [ %1842, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.47.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.38.2.us.us.us.us = phi <32 x i32> [ %1841, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.38.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.29.2.us.us.us.us = phi <32 x i32> [ %1835, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.29.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %sum_input533672.sroa.0.2.us.us.us.us = phi <32 x i32> [ %1829, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ %sum_input533672.sroa.0.1.us.us.us, %"for convolved.s1.r19$y134.us.us.us" ]
  %"convolved.s1.r19$x139.us.us.us.us" = phi i32 [ %1886, %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y134.us.us.us" ]
  %1804 = mul nsw i32 %"convolved.s1.r19$x139.us.us.us.us", %dilation_x
  %t1024.s.us.us.us.us = add nsw i32 %1804, %1578
  %t1023.s.us.us.us.us = add nsw i32 %1804, %1580
  %t1022.s.us.us.us.us = add nsw i32 %1804, %1582
  %t1021.s.us.us.us.us = add nsw i32 %1804, %1584
  %t1020.s.us.us.us.us = add nsw i32 %1804, %1586
  %t1019.s.us.us.us.us = add nsw i32 %1804, %1588
  %t1018.s.us.us.us.us = add nsw i32 %1804, %1590
  %t1015.s.us.us.us.us = add nsw i32 %1804, %1591
  %1805 = mul nsw i32 %"convolved.s1.r19$x139.us.us.us.us", %10
  %t1016.us.us.us.us = add nsw i32 %1805, %1802
  %1806 = mul nsw i32 %t1015.s.us.us.us.us, %17
  %1807 = add i32 %t1016.us.us.us.us, %1563
  %1808 = mul nsw i32 %t1018.s.us.us.us.us, %17
  %1809 = mul nsw i32 %t1019.s.us.us.us.us, %17
  %1810 = mul nsw i32 %t1020.s.us.us.us.us, %17
  %1811 = mul nsw i32 %t1021.s.us.us.us.us, %17
  %1812 = mul nsw i32 %t1022.s.us.us.us.us, %17
  %1813 = mul nsw i32 %t1023.s.us.us.us.us, %17
  %1814 = mul nsw i32 %t1024.s.us.us.us.us, %17
  br label %"for convolved.s1.r19$z.r124140.us.us.us.us"

"for convolved.s1.r19$z.r124140.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r124140.us.us.us.us", %"for convolved.s1.r19$x137.us.us.us.us"
  %sum_input533672.sroa.155.4.us.us.us.us = phi <32 x i32> [ %1884, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.155.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.146.4.us.us.us.us = phi <32 x i32> [ %1883, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.146.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.137.4.us.us.us.us = phi <32 x i32> [ %1877, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.137.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.128.4.us.us.us.us = phi <32 x i32> [ %1876, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.128.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.119.4.us.us.us.us = phi <32 x i32> [ %1870, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.119.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.110.4.us.us.us.us = phi <32 x i32> [ %1869, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.110.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.101.4.us.us.us.us = phi <32 x i32> [ %1863, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.101.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.92.4.us.us.us.us = phi <32 x i32> [ %1862, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.92.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.83.4.us.us.us.us = phi <32 x i32> [ %1856, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.83.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.74.4.us.us.us.us = phi <32 x i32> [ %1855, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.74.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.65.4.us.us.us.us = phi <32 x i32> [ %1849, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.65.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.56.4.us.us.us.us = phi <32 x i32> [ %1848, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.56.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.47.4.us.us.us.us = phi <32 x i32> [ %1842, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.47.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.38.4.us.us.us.us = phi <32 x i32> [ %1841, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.38.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.29.4.us.us.us.us = phi <32 x i32> [ %1835, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.29.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %sum_input533672.sroa.0.4.us.us.us.us = phi <32 x i32> [ %1829, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ %sum_input533672.sroa.0.2.us.us.us.us, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %"convolved.s1.r19$z.r124142.us.us.us.us" = phi i32 [ %1885, %"for convolved.s1.r19$z.r124140.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x137.us.us.us.us" ]
  %1815 = shl nsw i32 %"convolved.s1.r19$z.r124142.us.us.us.us", 2
  %1816 = add i32 %1815, %t1011.us.us.us
  %1817 = add i32 %1816, %1806
  %1818 = getelementptr inbounds i8, i8* %13, i32 %1817
  %1819 = bitcast i8* %1818 to i32*
  %1820 = load i32, i32* %1819, align 4, !tbaa !110
  %1821 = shl nsw i32 %"convolved.s1.r19$z.r124142.us.us.us.us", 6
  %1822 = add nsw i32 %1821, %1564
  %1823 = shl nsw i32 %1822, 1
  %1824 = add nsw i32 %t1016.us.us.us.us, %1823
  %1825 = getelementptr inbounds i8, i8* %5, i32 %1824
  %1826 = bitcast i8* %1825 to <32 x i32>*
  %1827 = load <32 x i32>, <32 x i32>* %1826, align 128, !tbaa !106
  %1828 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1820) #11
  %1829 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.0.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1828) #11
  %1830 = shl nsw i32 %"convolved.s1.r19$z.r124142.us.us.us.us", 7
  %1831 = add i32 %1807, %1830
  %1832 = getelementptr inbounds i8, i8* %5, i32 %1831
  %1833 = bitcast i8* %1832 to <32 x i32>*
  %1834 = load <32 x i32>, <32 x i32>* %1833, align 128, !tbaa !106
  %1835 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.29.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1828) #11
  %1836 = add i32 %1816, %1808
  %1837 = getelementptr inbounds i8, i8* %13, i32 %1836
  %1838 = bitcast i8* %1837 to i32*
  %1839 = load i32, i32* %1838, align 4, !tbaa !110
  %1840 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1839) #11
  %1841 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.38.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1840) #11
  %1842 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.47.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1840) #11
  %1843 = add i32 %1816, %1809
  %1844 = getelementptr inbounds i8, i8* %13, i32 %1843
  %1845 = bitcast i8* %1844 to i32*
  %1846 = load i32, i32* %1845, align 4, !tbaa !110
  %1847 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1846) #11
  %1848 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.56.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1847) #11
  %1849 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.65.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1847) #11
  %1850 = add i32 %1816, %1810
  %1851 = getelementptr inbounds i8, i8* %13, i32 %1850
  %1852 = bitcast i8* %1851 to i32*
  %1853 = load i32, i32* %1852, align 4, !tbaa !110
  %1854 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1853) #11
  %1855 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.74.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1854) #11
  %1856 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.83.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1854) #11
  %1857 = add i32 %1816, %1811
  %1858 = getelementptr inbounds i8, i8* %13, i32 %1857
  %1859 = bitcast i8* %1858 to i32*
  %1860 = load i32, i32* %1859, align 4, !tbaa !110
  %1861 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1860) #11
  %1862 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.92.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1861) #11
  %1863 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.101.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1861) #11
  %1864 = add i32 %1816, %1812
  %1865 = getelementptr inbounds i8, i8* %13, i32 %1864
  %1866 = bitcast i8* %1865 to i32*
  %1867 = load i32, i32* %1866, align 4, !tbaa !110
  %1868 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1867) #11
  %1869 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.110.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1868) #11
  %1870 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.119.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1868) #11
  %1871 = add i32 %1816, %1813
  %1872 = getelementptr inbounds i8, i8* %13, i32 %1871
  %1873 = bitcast i8* %1872 to i32*
  %1874 = load i32, i32* %1873, align 4, !tbaa !110
  %1875 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1874) #11
  %1876 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.128.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1875) #11
  %1877 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.137.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1875) #11
  %1878 = add i32 %1816, %1814
  %1879 = getelementptr inbounds i8, i8* %13, i32 %1878
  %1880 = bitcast i8* %1879 to i32*
  %1881 = load i32, i32* %1880, align 4, !tbaa !110
  %1882 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1881) #11
  %1883 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.146.4.us.us.us.us, <32 x i32> %1827, <32 x i32> %1882) #11
  %1884 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input533672.sroa.155.4.us.us.us.us, <32 x i32> %1834, <32 x i32> %1882) #11
  %1885 = add nuw nsw i32 %"convolved.s1.r19$z.r124142.us.us.us.us", 1
  %.not724.us.us.us.us = icmp eq i32 %1885, %7
  br i1 %.not724.us.us.us.us, label %"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124140.us.us.us.us"

"end for convolved.s1.r19$z.r124141.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124140.us.us.us.us"
  %1886 = add nuw nsw i32 %"convolved.s1.r19$x139.us.us.us.us", 1
  %.not723.us.us.us.us = icmp eq i32 %1886, %9
  br i1 %.not723.us.us.us.us, label %"end for convolved.s1.r19$x138.loopexit.us.us.us", label %"for convolved.s1.r19$x137.us.us.us.us"

next_bb92:                                        ; preds = %next_bb5
  br i1 %98, label %then_bb384, label %next_bb385

then_bb384:                                       ; preds = %next_bb92
  %1887 = mul nsw i32 %19, %18
  %1888 = mul nsw i32 %22, %20
  %1889 = mul nsw i32 %17, %16
  %1890 = add i32 %1888, %1887
  %t1037 = add i32 %1890, %1889
  %1891 = icmp sgt i32 %21, 0
  br i1 %1891, label %"for output.s0.b.rebased386.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased386.preheader":           ; preds = %then_bb384
  %1892 = mul nsw i32 %17, %stride_x
  %1893 = mul nsw i32 %1892, 7
  %1894 = mul nsw i32 %1892, 6
  %1895 = mul nsw i32 %1892, 5
  %1896 = shl nsw i32 %1892, 2
  %1897 = mul nsw i32 %1892, 3
  %1898 = shl nsw i32 %1892, 1
  %1899 = sub nsw i32 %stride_x, %16
  %1900 = mul nsw i32 %1899, %17
  %1901 = icmp sgt i32 %29, 0
  %.neg1127 = mul i32 %30, %28
  %.neg1128 = mul i32 %27, %25
  %.neg1129 = mul i32 %31, %20
  %reass.add1131 = add i32 %.neg1127, %.neg1128
  %reass.add1132 = add i32 %reass.add1131, %.neg1129
  %1902 = add nuw nsw i32 %26, 7
  %1903 = ashr i32 %1902, 3
  %b16 = add nsw i32 %26, -8
  %1904 = icmp sgt i32 %11, 0
  %1905 = icmp sgt i32 %9, 0
  %1906 = icmp sgt i32 %7, 0
  %1907 = ashr i32 %4, 5
  %1908 = icmp sgt i32 %4, 31
  %1909 = icmp sgt i32 %output_shift, 0
  %1910 = select i1 %1909, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %1911 = add nsw i32 %output_shift, -1
  %1912 = zext i8 %output_zero to i16
  %1913 = insertelement <32 x i16> undef, i16 %1912, i32 0
  %1914 = shufflevector <32 x i16> %1913, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1915 = bitcast <64 x i16> %1914 to <32 x i32>
  %1916 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %1917 = shufflevector <32 x i8> %1916, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1918 = bitcast <128 x i8> %1917 to <32 x i32>
  %1919 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %1920 = shufflevector <32 x i8> %1919, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1921 = bitcast <128 x i8> %1920 to <32 x i32>
  br i1 %1901, label %"for output.s0.b.rebased386.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased386.us.preheader":        ; preds = %"for output.s0.b.rebased386.preheader"
  %1922 = add i32 %1889, %1887
  %1923 = add i32 %7, -1
  %1924 = add i32 %9, -1
  %brmerge1673.demorgan = and i1 %1905, %1906
  %xtraiter1884 = and i32 %7, 1
  %1925 = icmp eq i32 %1923, 0
  %unroll_iter1886 = and i32 %7, -2
  %lcmp.mod1885.not = icmp eq i32 %xtraiter1884, 0
  %xtraiter1888 = and i32 %9, 3
  %1926 = icmp ult i32 %1924, 3
  %unroll_iter1892 = and i32 %9, -4
  %lcmp.mod1890.not = icmp eq i32 %xtraiter1888, 0
  %xtraiter1894 = and i32 %7, 1
  %1927 = icmp eq i32 %1923, 0
  %unroll_iter1896 = and i32 %7, -2
  %lcmp.mod1895.not = icmp eq i32 %xtraiter1894, 0
  br label %"for output.s0.b.rebased386.us"

"for output.s0.b.rebased386.us":                  ; preds = %"for output.s0.b.rebased386.us.preheader", %"end for output.s0.y.rebased390.loopexit.us"
  %sum_input533672.sroa.0.7.us = phi <32 x i32> [ %.us-phi1392.us, %"end for output.s0.y.rebased390.loopexit.us" ], [ undef, %"for output.s0.b.rebased386.us.preheader" ]
  %output.s0.b.rebased388.us = phi i32 [ %1934, %"end for output.s0.y.rebased390.loopexit.us" ], [ 0, %"for output.s0.b.rebased386.us.preheader" ]
  %1928 = add nsw i32 %output.s0.b.rebased388.us, %20
  %1929 = mul nsw i32 %1928, %31
  %1930 = sub i32 %1929, %reass.add1132
  %1931 = mul nsw i32 %1928, %22
  %1932 = sub i32 %1931, %1890
  %1933 = sub nsw i32 %1931, %t1037
  br i1 %100, label %"for output.s0.y.rebased389.us.us", label %"end for output.s0.y.rebased390.loopexit.us", !prof !96

"end for output.s0.y.rebased390.loopexit.us":     ; preds = %"end for output.s0.x.xo393.loopexit.us.us", %"for output.s0.b.rebased386.us"
  %.us-phi1392.us = phi <32 x i32> [ %sum_input533672.sroa.0.7.us, %"for output.s0.b.rebased386.us" ], [ %sum_input533672.sroa.0.20.us.us, %"end for output.s0.x.xo393.loopexit.us.us" ]
  %1934 = add nuw nsw i32 %output.s0.b.rebased388.us, 1
  %.not706.us = icmp eq i32 %1934, %21
  br i1 %.not706.us, label %after_bb3, label %"for output.s0.b.rebased386.us"

"for output.s0.y.rebased389.us.us":               ; preds = %"for output.s0.b.rebased386.us", %"end for output.s0.x.xo393.loopexit.us.us"
  %sum_input533672.sroa.0.8.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.20.us.us, %"end for output.s0.x.xo393.loopexit.us.us" ], [ %sum_input533672.sroa.0.7.us, %"for output.s0.b.rebased386.us" ]
  %output.s0.y.rebased391.us.us = phi i32 [ %2315, %"end for output.s0.x.xo393.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased386.us" ]
  %1935 = add nsw i32 %output.s0.y.rebased391.us.us, %28
  %1936 = mul nsw i32 %1935, %30
  %t1066.us.us = add i32 %1930, %1936
  %1937 = mul nsw i32 %1935, %stride_y
  br label %"for output.s0.x.xo392.us.us"

"for output.s0.x.xo392.us.us":                    ; preds = %"end for output.s0.c.co421.us.us", %"for output.s0.y.rebased389.us.us"
  %sum_input533672.sroa.0.10.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.20.us.us, %"end for output.s0.c.co421.us.us" ], [ %sum_input533672.sroa.0.8.us.us, %"for output.s0.y.rebased389.us.us" ]
  %output.s0.x.xo394.us.us = phi i32 [ %2271, %"end for output.s0.c.co421.us.us" ], [ 0, %"for output.s0.y.rebased389.us.us" ]
  %a14.us.us = shl nsw i32 %output.s0.x.xo394.us.us, 3
  %1938 = icmp slt i32 %a14.us.us, %b16
  %output.s0.x.x.base.s395.us.us = select i1 %1938, i32 %a14.us.us, i32 %b16
  br i1 %t843.not, label %"consume sum_input419.us.us", label %then_bb399.us.us

then_bb399.us.us:                                 ; preds = %"for output.s0.x.xo392.us.us"
  %sum_input533672.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %sum_input533672.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb402.us.us, label %next_bb403.us.us

next_bb403.us.us:                                 ; preds = %then_bb399.us.us
  br i1 %1904, label %"for sum_input.s1.r19$y410.preheader.us.us", label %"consume sum_input419.us.us", !prof !96

then_bb402.us.us:                                 ; preds = %then_bb399.us.us
  br i1 %1904, label %"for sum_input.s1.r19$y404.preheader.us.us", label %"consume sum_input419.us.us", !prof !96

"for sum_input.s1.r19$y404.us.us":                ; preds = %"for sum_input.s1.r19$y404.preheader.us.us", %"end for sum_input.s1.r19$x408.us.us"
  %sum_input533672.sroa.0.12.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.14.us.us, %"end for sum_input.s1.r19$x408.us.us" ], [ %sum_input533672.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y404.preheader.us.us" ]
  %"sum_input.s1.r19$y406.us.us" = phi i32 [ %2039, %"end for sum_input.s1.r19$x408.us.us" ], [ 0, %"for sum_input.s1.r19$y404.preheader.us.us" ]
  br i1 %1905, label %"for sum_input.s1.r19$x407.preheader.us.us", label %"end for sum_input.s1.r19$x408.us.us", !prof !96

"for sum_input.s1.r19$x407.us.us":                ; preds = %"for sum_input.s1.r19$x407.preheader.us.us", %"for sum_input.s1.r19$x407.us.us"
  %sum_input533672.sroa.0.13.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.vecblend998.us.us.3, %"for sum_input.s1.r19$x407.us.us" ], [ %sum_input533672.sroa.0.12.us.us, %"for sum_input.s1.r19$x407.preheader.us.us" ]
  %"sum_input.s1.r19$x409.us.us" = phi i32 [ %2018, %"for sum_input.s1.r19$x407.us.us" ], [ 0, %"for sum_input.s1.r19$x407.preheader.us.us" ]
  %niter1893 = phi i32 [ %niter1893.nsub.3, %"for sum_input.s1.r19$x407.us.us" ], [ %unroll_iter1892, %"for sum_input.s1.r19$x407.preheader.us.us" ]
  %1939 = mul nsw i32 %"sum_input.s1.r19$x409.us.us", %dilation_x
  %reass.add1137.us.us = add i32 %2312, %1939
  %reass.mul1138.us.us = shl i32 %reass.add1137.us.us, 2
  %1940 = add i32 %t1069.us.us, %reass.mul1138.us.us
  %1941 = getelementptr inbounds i8, i8* %13, i32 %1940
  %1942 = bitcast i8* %1941 to <32 x i8>*
  %1943 = load <32 x i8>, <32 x i8>* %1942, align 4, !tbaa !110
  %t1230.us.us = zext <32 x i8> %1943 to <32 x i16>
  %1944 = shufflevector <32 x i16> %t1230.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1945 = bitcast <64 x i16> %1944 to <32 x i32>
  %1946 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1945)
  %1947 = bitcast <32 x i32> %1946 to <64 x i16>
  %1948 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1945)
  %1949 = bitcast <32 x i32> %1948 to <64 x i16>
  %1950 = add <64 x i16> %1949, %1947
  %1951 = shufflevector <64 x i16> %1950, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us = zext <16 x i16> %1951 to <16 x i32>
  %1952 = shufflevector <16 x i32> %t1229.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1953 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1952, i32 -4)
  %1954 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1953)
  %1955 = add nsw <32 x i32> %1954, %sum_input533672.sroa.0.13.us.us
  %1956 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1953)
  %1957 = add nsw <32 x i32> %1955, %1956
  %sum_input533672.sroa.0.0.vecblend998.us.us = shufflevector <32 x i32> %1957, <32 x i32> %sum_input533672.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1958 = or i32 %"sum_input.s1.r19$x409.us.us", 1
  %1959 = mul nsw i32 %1958, %dilation_x
  %reass.add1137.us.us.1 = add i32 %2312, %1959
  %reass.mul1138.us.us.1 = shl i32 %reass.add1137.us.us.1, 2
  %1960 = add i32 %t1069.us.us, %reass.mul1138.us.us.1
  %1961 = getelementptr inbounds i8, i8* %13, i32 %1960
  %1962 = bitcast i8* %1961 to <32 x i8>*
  %1963 = load <32 x i8>, <32 x i8>* %1962, align 4, !tbaa !110
  %t1230.us.us.1 = zext <32 x i8> %1963 to <32 x i16>
  %1964 = shufflevector <32 x i16> %t1230.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1965 = bitcast <64 x i16> %1964 to <32 x i32>
  %1966 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1965)
  %1967 = bitcast <32 x i32> %1966 to <64 x i16>
  %1968 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1965)
  %1969 = bitcast <32 x i32> %1968 to <64 x i16>
  %1970 = add <64 x i16> %1969, %1967
  %1971 = shufflevector <64 x i16> %1970, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.1 = zext <16 x i16> %1971 to <16 x i32>
  %1972 = shufflevector <16 x i32> %t1229.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1973 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1972, i32 -4)
  %1974 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1973)
  %1975 = add nsw <32 x i32> %1974, %sum_input533672.sroa.0.0.vecblend998.us.us
  %1976 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1973)
  %1977 = add nsw <32 x i32> %1975, %1976
  %sum_input533672.sroa.0.0.vecblend998.us.us.1 = shufflevector <32 x i32> %1977, <32 x i32> %sum_input533672.sroa.0.0.vecblend998.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1978 = or i32 %"sum_input.s1.r19$x409.us.us", 2
  %1979 = mul nsw i32 %1978, %dilation_x
  %reass.add1137.us.us.2 = add i32 %2312, %1979
  %reass.mul1138.us.us.2 = shl i32 %reass.add1137.us.us.2, 2
  %1980 = add i32 %t1069.us.us, %reass.mul1138.us.us.2
  %1981 = getelementptr inbounds i8, i8* %13, i32 %1980
  %1982 = bitcast i8* %1981 to <32 x i8>*
  %1983 = load <32 x i8>, <32 x i8>* %1982, align 4, !tbaa !110
  %t1230.us.us.2 = zext <32 x i8> %1983 to <32 x i16>
  %1984 = shufflevector <32 x i16> %t1230.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1985 = bitcast <64 x i16> %1984 to <32 x i32>
  %1986 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1985)
  %1987 = bitcast <32 x i32> %1986 to <64 x i16>
  %1988 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1985)
  %1989 = bitcast <32 x i32> %1988 to <64 x i16>
  %1990 = add <64 x i16> %1989, %1987
  %1991 = shufflevector <64 x i16> %1990, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.2 = zext <16 x i16> %1991 to <16 x i32>
  %1992 = shufflevector <16 x i32> %t1229.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1993 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1992, i32 -4)
  %1994 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1993)
  %1995 = add nsw <32 x i32> %1994, %sum_input533672.sroa.0.0.vecblend998.us.us.1
  %1996 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1993)
  %1997 = add nsw <32 x i32> %1995, %1996
  %sum_input533672.sroa.0.0.vecblend998.us.us.2 = shufflevector <32 x i32> %1997, <32 x i32> %sum_input533672.sroa.0.0.vecblend998.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1998 = or i32 %"sum_input.s1.r19$x409.us.us", 3
  %1999 = mul nsw i32 %1998, %dilation_x
  %reass.add1137.us.us.3 = add i32 %2312, %1999
  %reass.mul1138.us.us.3 = shl i32 %reass.add1137.us.us.3, 2
  %2000 = add i32 %t1069.us.us, %reass.mul1138.us.us.3
  %2001 = getelementptr inbounds i8, i8* %13, i32 %2000
  %2002 = bitcast i8* %2001 to <32 x i8>*
  %2003 = load <32 x i8>, <32 x i8>* %2002, align 4, !tbaa !110
  %t1230.us.us.3 = zext <32 x i8> %2003 to <32 x i16>
  %2004 = shufflevector <32 x i16> %t1230.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2005 = bitcast <64 x i16> %2004 to <32 x i32>
  %2006 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2005)
  %2007 = bitcast <32 x i32> %2006 to <64 x i16>
  %2008 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2005)
  %2009 = bitcast <32 x i32> %2008 to <64 x i16>
  %2010 = add <64 x i16> %2009, %2007
  %2011 = shufflevector <64 x i16> %2010, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.3 = zext <16 x i16> %2011 to <16 x i32>
  %2012 = shufflevector <16 x i32> %t1229.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2013 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2012, i32 -4)
  %2014 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2013)
  %2015 = add nsw <32 x i32> %2014, %sum_input533672.sroa.0.0.vecblend998.us.us.2
  %2016 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2013)
  %2017 = add nsw <32 x i32> %2015, %2016
  %sum_input533672.sroa.0.0.vecblend998.us.us.3 = shufflevector <32 x i32> %2017, <32 x i32> %sum_input533672.sroa.0.0.vecblend998.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2018 = add nuw nsw i32 %"sum_input.s1.r19$x409.us.us", 4
  %niter1893.nsub.3 = add i32 %niter1893, -4
  %niter1893.ncmp.3 = icmp eq i32 %niter1893.nsub.3, 0
  br i1 %niter1893.ncmp.3, label %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x407.us.us"

"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x407.us.us", %"for sum_input.s1.r19$x407.preheader.us.us"
  %sum_input533672.sroa.0.0.vecblend998.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x407.preheader.us.us" ], [ %sum_input533672.sroa.0.0.vecblend998.us.us.3, %"for sum_input.s1.r19$x407.us.us" ]
  %sum_input533672.sroa.0.13.us.us.unr = phi <32 x i32> [ %sum_input533672.sroa.0.12.us.us, %"for sum_input.s1.r19$x407.preheader.us.us" ], [ %sum_input533672.sroa.0.0.vecblend998.us.us.3, %"for sum_input.s1.r19$x407.us.us" ]
  %"sum_input.s1.r19$x409.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x407.preheader.us.us" ], [ %2018, %"for sum_input.s1.r19$x407.us.us" ]
  br i1 %lcmp.mod1890.not, label %"end for sum_input.s1.r19$x408.us.us", label %"for sum_input.s1.r19$x407.us.us.epil"

"for sum_input.s1.r19$x407.us.us.epil":           ; preds = %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x407.us.us.epil"
  %sum_input533672.sroa.0.13.us.us.epil = phi <32 x i32> [ %sum_input533672.sroa.0.0.vecblend998.us.us.epil, %"for sum_input.s1.r19$x407.us.us.epil" ], [ %sum_input533672.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x409.us.us.epil" = phi i32 [ %2038, %"for sum_input.s1.r19$x407.us.us.epil" ], [ %"sum_input.s1.r19$x409.us.us.unr", %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa" ]
  %epil.iter1889 = phi i32 [ %epil.iter1889.sub, %"for sum_input.s1.r19$x407.us.us.epil" ], [ %xtraiter1888, %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa" ]
  %2019 = mul nsw i32 %"sum_input.s1.r19$x409.us.us.epil", %dilation_x
  %reass.add1137.us.us.epil = add i32 %2312, %2019
  %reass.mul1138.us.us.epil = shl i32 %reass.add1137.us.us.epil, 2
  %2020 = add i32 %t1069.us.us, %reass.mul1138.us.us.epil
  %2021 = getelementptr inbounds i8, i8* %13, i32 %2020
  %2022 = bitcast i8* %2021 to <32 x i8>*
  %2023 = load <32 x i8>, <32 x i8>* %2022, align 4, !tbaa !110
  %t1230.us.us.epil = zext <32 x i8> %2023 to <32 x i16>
  %2024 = shufflevector <32 x i16> %t1230.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2025 = bitcast <64 x i16> %2024 to <32 x i32>
  %2026 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2025)
  %2027 = bitcast <32 x i32> %2026 to <64 x i16>
  %2028 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2025)
  %2029 = bitcast <32 x i32> %2028 to <64 x i16>
  %2030 = add <64 x i16> %2029, %2027
  %2031 = shufflevector <64 x i16> %2030, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.epil = zext <16 x i16> %2031 to <16 x i32>
  %2032 = shufflevector <16 x i32> %t1229.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2033 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2032, i32 -4)
  %2034 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2033)
  %2035 = add nsw <32 x i32> %2034, %sum_input533672.sroa.0.13.us.us.epil
  %2036 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2033)
  %2037 = add nsw <32 x i32> %2035, %2036
  %sum_input533672.sroa.0.0.vecblend998.us.us.epil = shufflevector <32 x i32> %2037, <32 x i32> %sum_input533672.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2038 = add nuw nsw i32 %"sum_input.s1.r19$x409.us.us.epil", 1
  %epil.iter1889.sub = add i32 %epil.iter1889, -1
  %epil.iter1889.cmp.not = icmp eq i32 %epil.iter1889.sub, 0
  br i1 %epil.iter1889.cmp.not, label %"end for sum_input.s1.r19$x408.us.us", label %"for sum_input.s1.r19$x407.us.us.epil", !llvm.loop !116

"end for sum_input.s1.r19$x408.us.us":            ; preds = %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x407.us.us.epil", %"for sum_input.s1.r19$y404.us.us"
  %sum_input533672.sroa.0.14.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.12.us.us, %"for sum_input.s1.r19$y404.us.us" ], [ %sum_input533672.sroa.0.0.vecblend998.us.us.lcssa.ph, %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa" ], [ %sum_input533672.sroa.0.0.vecblend998.us.us.epil, %"for sum_input.s1.r19$x407.us.us.epil" ]
  %2039 = add nuw nsw i32 %"sum_input.s1.r19$y406.us.us", 1
  %.not716.us.us = icmp eq i32 %2039, %11
  br i1 %.not716.us.us, label %"consume sum_input419.us.us", label %"for sum_input.s1.r19$y404.us.us"

"consume sum_input419.us.us":                     ; preds = %"end for sum_input.s1.r19$x414.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x408.us.us", %"for sum_input.s1.r19$y410.preheader.us.us", %then_bb402.us.us, %next_bb403.us.us, %"for output.s0.x.xo392.us.us"
  %sum_input533672.sroa.0.20.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.10.us.us, %"for output.s0.x.xo392.us.us" ], [ %sum_input533672.sroa.0.0.vecblend.us.us, %then_bb402.us.us ], [ %sum_input533672.sroa.0.0.vecblend.us.us, %next_bb403.us.us ], [ %sum_input533672.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y410.preheader.us.us" ], [ %sum_input533672.sroa.0.14.us.us, %"end for sum_input.s1.r19$x408.us.us" ], [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x414.loopexit.split.us.us.us.us.us" ]
  br i1 %1908, label %"for output.s0.c.co420.preheader.us.us", label %"end for output.s0.c.co421.us.us", !prof !96

"for output.s0.c.co420.us.us":                    ; preds = %"for output.s0.c.co420.preheader.us.us", %"consume convolved436.us.us"
  %output.s0.c.co422.us.us = phi i32 [ %2270, %"consume convolved436.us.us" ], [ 0, %"for output.s0.c.co420.preheader.us.us" ]
  %2040 = shl nsw i32 %output.s0.c.co422.us.us, 5
  %2041 = getelementptr inbounds i32, i32* %offset_c, i32 %2040
  %2042 = bitcast i32* %2041 to <32 x i32>*
  %2043 = load <32 x i32>, <32 x i32>* %2042, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb424.us.us, label %next_bb426.us.us

next_bb426.us.us:                                 ; preds = %"for output.s0.c.co420.us.us"
  %2044 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2276) #11
  %2045 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2044) #11
  %2046 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2277) #11
  %2047 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2046) #11
  %2048 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2278) #11
  %2049 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2048) #11
  %2050 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2279) #11
  %2051 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2050) #11
  %2052 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2280) #11
  %2053 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2052) #11
  %2054 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2281) #11
  %2055 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2054) #11
  %2056 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2282) #11
  %2057 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2056) #11
  %2058 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2283) #11
  %2059 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2043, <32 x i32> %2058) #11
  br label %after_bb424.us.us

after_bb424.us.us:                                ; preds = %"for output.s0.c.co420.us.us", %next_bb426.us.us
  %convolved673.sroa.123.7.us.us = phi <32 x i32> [ %2059, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  %convolved673.sroa.113.7.us.us = phi <32 x i32> [ %2057, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  %convolved673.sroa.103.7.us.us = phi <32 x i32> [ %2055, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  %convolved673.sroa.93.7.us.us = phi <32 x i32> [ %2053, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  %convolved673.sroa.78.7.us.us = phi <32 x i32> [ %2051, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  %convolved673.sroa.63.7.us.us = phi <32 x i32> [ %2049, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  %convolved673.sroa.48.7.us.us = phi <32 x i32> [ %2047, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  %convolved673.sroa.0.21.us.us = phi <32 x i32> [ %2045, %next_bb426.us.us ], [ %2043, %"for output.s0.c.co420.us.us" ]
  br i1 %1904, label %"for convolved.s1.r19$y427.preheader.us.us", label %"consume convolved436.us.us", !prof !96

"consume convolved436.us.us":                     ; preds = %"end for convolved.s1.r19$x431.loopexit.us.us.us", %"for convolved.s1.r19$y427.preheader.us.us", %after_bb424.us.us
  %convolved673.sroa.123.13.us.us = phi <32 x i32> [ %convolved673.sroa.123.7.us.us, %after_bb424.us.us ], [ %convolved673.sroa.123.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1355.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %convolved673.sroa.113.13.us.us = phi <32 x i32> [ %convolved673.sroa.113.7.us.us, %after_bb424.us.us ], [ %convolved673.sroa.113.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1356.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %convolved673.sroa.103.13.us.us = phi <32 x i32> [ %convolved673.sroa.103.7.us.us, %after_bb424.us.us ], [ %convolved673.sroa.103.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1357.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %convolved673.sroa.93.13.us.us = phi <32 x i32> [ %convolved673.sroa.93.7.us.us, %after_bb424.us.us ], [ %convolved673.sroa.93.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1358.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %convolved673.sroa.78.13.us.us = phi <32 x i32> [ %convolved673.sroa.78.7.us.us, %after_bb424.us.us ], [ %convolved673.sroa.78.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1359.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %convolved673.sroa.63.13.us.us = phi <32 x i32> [ %convolved673.sroa.63.7.us.us, %after_bb424.us.us ], [ %convolved673.sroa.63.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1360.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %convolved673.sroa.48.13.us.us = phi <32 x i32> [ %convolved673.sroa.48.7.us.us, %after_bb424.us.us ], [ %convolved673.sroa.48.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1361.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %convolved673.sroa.0.27.us.us = phi <32 x i32> [ %convolved673.sroa.0.21.us.us, %after_bb424.us.us ], [ %convolved673.sroa.0.21.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ], [ %.us-phi1362.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ]
  %2060 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.0.27.us.us, <32 x i32> %2301) #11
  %2061 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2060, <32 x i32> %convolved673.sroa.0.27.us.us, <32 x i32> %2301) #11
  %2062 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2061, <32 x i32> %2300) #11
  %2063 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2061, <32 x i32> %2302) #11
  %2064 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2063, <32 x i32> %1910) #11
  %2065 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2062, <32 x i32> %2064) #11
  %2066 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2065, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2067 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2066) #11
  %2068 = trunc <32 x i32> %2067 to <32 x i16>
  %2069 = shufflevector <32 x i16> %2068, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2070 = bitcast <64 x i16> %2069 to <32 x i32>
  %2071 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2070, <32 x i32> %1915) #11
  %2072 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2071, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2073 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2072, <32 x i32> zeroinitializer) #11
  %2074 = bitcast <32 x i32> %2073 to <64 x i16>
  %2075 = shufflevector <64 x i16> %2074, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2076 = trunc <32 x i16> %2075 to <32 x i8>
  %2077 = shufflevector <32 x i8> %2076, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2078 = bitcast <128 x i8> %2077 to <32 x i32>
  %2079 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2078, <32 x i32> %1918) #11
  %2080 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2079, <32 x i32> %1921) #11
  %2081 = bitcast <32 x i32> %2080 to <128 x i8>
  %2082 = shufflevector <128 x i8> %2081, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2083 = shl nsw i32 %output.s0.c.co422.us.us, 5
  %2084 = add i32 %2083, %t1066.us.us
  %2085 = add i32 %2084, %2303
  %2086 = getelementptr inbounds i8, i8* %23, i32 %2085
  %2087 = bitcast i8* %2086 to <32 x i8>*
  store <32 x i8> %2082, <32 x i8>* %2087, align 1, !tbaa !113
  %2088 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.48.13.us.us, <32 x i32> %2301) #11
  %2089 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2088, <32 x i32> %convolved673.sroa.48.13.us.us, <32 x i32> %2301) #11
  %2090 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2089, <32 x i32> %2300) #11
  %2091 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2089, <32 x i32> %2302) #11
  %2092 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2091, <32 x i32> %1910) #11
  %2093 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2090, <32 x i32> %2092) #11
  %2094 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2093, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2095 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2094) #11
  %2096 = trunc <32 x i32> %2095 to <32 x i16>
  %2097 = shufflevector <32 x i16> %2096, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2098 = bitcast <64 x i16> %2097 to <32 x i32>
  %2099 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2098, <32 x i32> %1915) #11
  %2100 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2099, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2101 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2100, <32 x i32> zeroinitializer) #11
  %2102 = bitcast <32 x i32> %2101 to <64 x i16>
  %2103 = shufflevector <64 x i16> %2102, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2104 = trunc <32 x i16> %2103 to <32 x i8>
  %2105 = shufflevector <32 x i8> %2104, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2106 = bitcast <128 x i8> %2105 to <32 x i32>
  %2107 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2106, <32 x i32> %1918) #11
  %2108 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2107, <32 x i32> %1921) #11
  %2109 = bitcast <32 x i32> %2108 to <128 x i8>
  %2110 = shufflevector <128 x i8> %2109, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2111 = add i32 %2084, %2304
  %2112 = getelementptr inbounds i8, i8* %23, i32 %2111
  %2113 = bitcast i8* %2112 to <32 x i8>*
  store <32 x i8> %2110, <32 x i8>* %2113, align 1, !tbaa !113
  %2114 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.63.13.us.us, <32 x i32> %2301) #11
  %2115 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2114, <32 x i32> %convolved673.sroa.63.13.us.us, <32 x i32> %2301) #11
  %2116 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2115, <32 x i32> %2300) #11
  %2117 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2115, <32 x i32> %2302) #11
  %2118 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2117, <32 x i32> %1910) #11
  %2119 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2116, <32 x i32> %2118) #11
  %2120 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2119, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2121 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2120) #11
  %2122 = trunc <32 x i32> %2121 to <32 x i16>
  %2123 = shufflevector <32 x i16> %2122, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2124 = bitcast <64 x i16> %2123 to <32 x i32>
  %2125 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2124, <32 x i32> %1915) #11
  %2126 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2125, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2127 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2126, <32 x i32> zeroinitializer) #11
  %2128 = bitcast <32 x i32> %2127 to <64 x i16>
  %2129 = shufflevector <64 x i16> %2128, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2130 = trunc <32 x i16> %2129 to <32 x i8>
  %2131 = shufflevector <32 x i8> %2130, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2132 = bitcast <128 x i8> %2131 to <32 x i32>
  %2133 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2132, <32 x i32> %1918) #11
  %2134 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2133, <32 x i32> %1921) #11
  %2135 = bitcast <32 x i32> %2134 to <128 x i8>
  %2136 = shufflevector <128 x i8> %2135, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2137 = add i32 %2084, %2305
  %2138 = getelementptr inbounds i8, i8* %23, i32 %2137
  %2139 = bitcast i8* %2138 to <32 x i8>*
  store <32 x i8> %2136, <32 x i8>* %2139, align 1, !tbaa !113
  %2140 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.78.13.us.us, <32 x i32> %2301) #11
  %2141 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2140, <32 x i32> %convolved673.sroa.78.13.us.us, <32 x i32> %2301) #11
  %2142 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2141, <32 x i32> %2300) #11
  %2143 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2141, <32 x i32> %2302) #11
  %2144 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2143, <32 x i32> %1910) #11
  %2145 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2142, <32 x i32> %2144) #11
  %2146 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2145, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2147 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2146) #11
  %2148 = trunc <32 x i32> %2147 to <32 x i16>
  %2149 = shufflevector <32 x i16> %2148, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2150 = bitcast <64 x i16> %2149 to <32 x i32>
  %2151 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2150, <32 x i32> %1915) #11
  %2152 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2151, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2153 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2152, <32 x i32> zeroinitializer) #11
  %2154 = bitcast <32 x i32> %2153 to <64 x i16>
  %2155 = shufflevector <64 x i16> %2154, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2156 = trunc <32 x i16> %2155 to <32 x i8>
  %2157 = shufflevector <32 x i8> %2156, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2158 = bitcast <128 x i8> %2157 to <32 x i32>
  %2159 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2158, <32 x i32> %1918) #11
  %2160 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2159, <32 x i32> %1921) #11
  %2161 = bitcast <32 x i32> %2160 to <128 x i8>
  %2162 = shufflevector <128 x i8> %2161, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2163 = add i32 %2084, %2306
  %2164 = getelementptr inbounds i8, i8* %23, i32 %2163
  %2165 = bitcast i8* %2164 to <32 x i8>*
  store <32 x i8> %2162, <32 x i8>* %2165, align 1, !tbaa !113
  %2166 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.93.13.us.us, <32 x i32> %2301) #11
  %2167 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2166, <32 x i32> %convolved673.sroa.93.13.us.us, <32 x i32> %2301) #11
  %2168 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2167, <32 x i32> %2300) #11
  %2169 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2167, <32 x i32> %2302) #11
  %2170 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2169, <32 x i32> %1910) #11
  %2171 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2168, <32 x i32> %2170) #11
  %2172 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2171, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2173 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2172) #11
  %2174 = trunc <32 x i32> %2173 to <32 x i16>
  %2175 = shufflevector <32 x i16> %2174, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2176 = bitcast <64 x i16> %2175 to <32 x i32>
  %2177 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2176, <32 x i32> %1915) #11
  %2178 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2177, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2179 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2178, <32 x i32> zeroinitializer) #11
  %2180 = bitcast <32 x i32> %2179 to <64 x i16>
  %2181 = shufflevector <64 x i16> %2180, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2182 = trunc <32 x i16> %2181 to <32 x i8>
  %2183 = shufflevector <32 x i8> %2182, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2184 = bitcast <128 x i8> %2183 to <32 x i32>
  %2185 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2184, <32 x i32> %1918) #11
  %2186 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2185, <32 x i32> %1921) #11
  %2187 = bitcast <32 x i32> %2186 to <128 x i8>
  %2188 = shufflevector <128 x i8> %2187, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2189 = add i32 %2084, %2307
  %2190 = getelementptr inbounds i8, i8* %23, i32 %2189
  %2191 = bitcast i8* %2190 to <32 x i8>*
  store <32 x i8> %2188, <32 x i8>* %2191, align 1, !tbaa !113
  %2192 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.103.13.us.us, <32 x i32> %2301) #11
  %2193 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2192, <32 x i32> %convolved673.sroa.103.13.us.us, <32 x i32> %2301) #11
  %2194 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2193, <32 x i32> %2300) #11
  %2195 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2193, <32 x i32> %2302) #11
  %2196 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2195, <32 x i32> %1910) #11
  %2197 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2194, <32 x i32> %2196) #11
  %2198 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2197, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2199 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2198) #11
  %2200 = trunc <32 x i32> %2199 to <32 x i16>
  %2201 = shufflevector <32 x i16> %2200, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2202 = bitcast <64 x i16> %2201 to <32 x i32>
  %2203 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2202, <32 x i32> %1915) #11
  %2204 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2203, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2205 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2204, <32 x i32> zeroinitializer) #11
  %2206 = bitcast <32 x i32> %2205 to <64 x i16>
  %2207 = shufflevector <64 x i16> %2206, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2208 = trunc <32 x i16> %2207 to <32 x i8>
  %2209 = shufflevector <32 x i8> %2208, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2210 = bitcast <128 x i8> %2209 to <32 x i32>
  %2211 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2210, <32 x i32> %1918) #11
  %2212 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2211, <32 x i32> %1921) #11
  %2213 = bitcast <32 x i32> %2212 to <128 x i8>
  %2214 = shufflevector <128 x i8> %2213, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2215 = add i32 %2084, %2308
  %2216 = getelementptr inbounds i8, i8* %23, i32 %2215
  %2217 = bitcast i8* %2216 to <32 x i8>*
  store <32 x i8> %2214, <32 x i8>* %2217, align 1, !tbaa !113
  %2218 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.113.13.us.us, <32 x i32> %2301) #11
  %2219 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2218, <32 x i32> %convolved673.sroa.113.13.us.us, <32 x i32> %2301) #11
  %2220 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2219, <32 x i32> %2300) #11
  %2221 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2219, <32 x i32> %2302) #11
  %2222 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2221, <32 x i32> %1910) #11
  %2223 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2220, <32 x i32> %2222) #11
  %2224 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2223, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2225 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2224) #11
  %2226 = trunc <32 x i32> %2225 to <32 x i16>
  %2227 = shufflevector <32 x i16> %2226, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2228 = bitcast <64 x i16> %2227 to <32 x i32>
  %2229 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2228, <32 x i32> %1915) #11
  %2230 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2229, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2231 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2230, <32 x i32> zeroinitializer) #11
  %2232 = bitcast <32 x i32> %2231 to <64 x i16>
  %2233 = shufflevector <64 x i16> %2232, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2234 = trunc <32 x i16> %2233 to <32 x i8>
  %2235 = shufflevector <32 x i8> %2234, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2236 = bitcast <128 x i8> %2235 to <32 x i32>
  %2237 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2236, <32 x i32> %1918) #11
  %2238 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2237, <32 x i32> %1921) #11
  %2239 = bitcast <32 x i32> %2238 to <128 x i8>
  %2240 = shufflevector <128 x i8> %2239, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2241 = add i32 %2084, %2309
  %2242 = getelementptr inbounds i8, i8* %23, i32 %2241
  %2243 = bitcast i8* %2242 to <32 x i8>*
  store <32 x i8> %2240, <32 x i8>* %2243, align 1, !tbaa !113
  %2244 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.123.13.us.us, <32 x i32> %2301) #11
  %2245 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2244, <32 x i32> %convolved673.sroa.123.13.us.us, <32 x i32> %2301) #11
  %2246 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2245, <32 x i32> %2300) #11
  %2247 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2245, <32 x i32> %2302) #11
  %2248 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2247, <32 x i32> %1910) #11
  %2249 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2246, <32 x i32> %2248) #11
  %2250 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2249, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2251 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2250) #11
  %2252 = trunc <32 x i32> %2251 to <32 x i16>
  %2253 = shufflevector <32 x i16> %2252, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2254 = bitcast <64 x i16> %2253 to <32 x i32>
  %2255 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2254, <32 x i32> %1915) #11
  %2256 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2255, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2257 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2256, <32 x i32> zeroinitializer) #11
  %2258 = bitcast <32 x i32> %2257 to <64 x i16>
  %2259 = shufflevector <64 x i16> %2258, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2260 = trunc <32 x i16> %2259 to <32 x i8>
  %2261 = shufflevector <32 x i8> %2260, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2262 = bitcast <128 x i8> %2261 to <32 x i32>
  %2263 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2262, <32 x i32> %1918) #11
  %2264 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2263, <32 x i32> %1921) #11
  %2265 = bitcast <32 x i32> %2264 to <128 x i8>
  %2266 = shufflevector <128 x i8> %2265, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2267 = add i32 %2084, %2310
  %2268 = getelementptr inbounds i8, i8* %23, i32 %2267
  %2269 = bitcast i8* %2268 to <32 x i8>*
  store <32 x i8> %2266, <32 x i8>* %2269, align 1, !tbaa !113
  %2270 = add nuw nsw i32 %output.s0.c.co422.us.us, 1
  %.not709.us.us = icmp eq i32 %2270, %1907
  br i1 %.not709.us.us, label %"end for output.s0.c.co421.us.us", label %"for output.s0.c.co420.us.us"

"end for output.s0.c.co421.us.us":                ; preds = %"consume convolved436.us.us", %"consume sum_input419.us.us"
  %2271 = add nuw nsw i32 %output.s0.x.xo394.us.us, 1
  %.not708.us.us = icmp eq i32 %2271, %1903
  br i1 %.not708.us.us, label %"end for output.s0.x.xo393.loopexit.us.us", label %"for output.s0.x.xo392.us.us"

"for convolved.s1.r19$y427.preheader.us.us":      ; preds = %after_bb424.us.us
  %2272 = mul nsw i32 %output.s0.c.co422.us.us, %8
  br i1 %1905, label %"for convolved.s1.r19$y427.us.us.us", label %"consume convolved436.us.us", !prof !96

"for sum_input.s1.r19$x407.preheader.us.us":      ; preds = %"for sum_input.s1.r19$y404.us.us"
  %2273 = mul nsw i32 %"sum_input.s1.r19$y406.us.us", %dilation_y
  %2274 = add nsw i32 %2273, %1937
  %2275 = mul nsw i32 %2274, %19
  %t1069.us.us = add i32 %1932, %2275
  br i1 %1926, label %"end for sum_input.s1.r19$x408.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x407.us.us"

"for output.s0.c.co420.preheader.us.us":          ; preds = %"consume sum_input419.us.us"
  %sum_input533672.sroa.0.0.vec.extract1018.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 0
  %2276 = mul nsw i32 %sum_input533672.sroa.0.0.vec.extract1018.us.us, %309
  %sum_input533672.sroa.0.4.vec.extract.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 1
  %2277 = mul nsw i32 %sum_input533672.sroa.0.4.vec.extract.us.us, %309
  %sum_input533672.sroa.0.8.vec.extract.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 2
  %2278 = mul nsw i32 %sum_input533672.sroa.0.8.vec.extract.us.us, %309
  %sum_input533672.sroa.0.12.vec.extract.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 3
  %2279 = mul nsw i32 %sum_input533672.sroa.0.12.vec.extract.us.us, %309
  %sum_input533672.sroa.0.16.vec.extract.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 4
  %2280 = mul nsw i32 %sum_input533672.sroa.0.16.vec.extract.us.us, %309
  %sum_input533672.sroa.0.20.vec.extract.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 5
  %2281 = mul nsw i32 %sum_input533672.sroa.0.20.vec.extract.us.us, %309
  %sum_input533672.sroa.0.24.vec.extract.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 6
  %2282 = mul nsw i32 %sum_input533672.sroa.0.24.vec.extract.us.us, %309
  %sum_input533672.sroa.0.28.vec.extract.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.20.us.us, i32 7
  %2283 = mul nsw i32 %sum_input533672.sroa.0.28.vec.extract.us.us, %309
  %2284 = add nsw i32 %output.s0.x.x.base.s395.us.us, %25
  %2285 = add nsw i32 %2284, 7
  %2286 = mul nsw i32 %2285, %stride_x
  %2287 = add nsw i32 %2284, 6
  %2288 = mul nsw i32 %2287, %stride_x
  %2289 = add nsw i32 %2284, 5
  %2290 = mul nsw i32 %2289, %stride_x
  %2291 = add nsw i32 %2284, 4
  %2292 = mul nsw i32 %2291, %stride_x
  %2293 = add nsw i32 %2284, 3
  %2294 = mul nsw i32 %2293, %stride_x
  %2295 = add nsw i32 %2284, 2
  %2296 = mul nsw i32 %2295, %stride_x
  %2297 = add nsw i32 %2284, 1
  %2298 = mul nsw i32 %2297, %stride_x
  %2299 = mul nsw i32 %2284, %stride_x
  %2300 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %2301 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %2302 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1911) #11
  %2303 = mul nsw i32 %2284, %27
  %2304 = mul nsw i32 %2297, %27
  %2305 = mul nsw i32 %2295, %27
  %2306 = mul nsw i32 %2293, %27
  %2307 = mul nsw i32 %2291, %27
  %2308 = mul nsw i32 %2289, %27
  %2309 = mul nsw i32 %2287, %27
  %2310 = mul nsw i32 %2285, %27
  br label %"for output.s0.c.co420.us.us"

"for sum_input.s1.r19$y404.preheader.us.us":      ; preds = %then_bb402.us.us
  %2311 = add nsw i32 %output.s0.x.x.base.s395.us.us, %25
  %2312 = sub i32 %2311, %16
  br label %"for sum_input.s1.r19$y404.us.us"

"for sum_input.s1.r19$y410.preheader.us.us":      ; preds = %next_bb403.us.us
  %2313 = add nsw i32 %output.s0.x.x.base.s395.us.us, %25
  %2314 = mul nsw i32 %2313, %stride_x
  br i1 %brmerge1673.demorgan, label %"for sum_input.s1.r19$y410.us.us.us.us", label %"consume sum_input419.us.us", !prof !103

"end for output.s0.x.xo393.loopexit.us.us":       ; preds = %"end for output.s0.c.co421.us.us"
  %2315 = add nuw nsw i32 %output.s0.y.rebased391.us.us, 1
  %.not707.us.us = icmp eq i32 %2315, %29
  br i1 %.not707.us.us, label %"end for output.s0.y.rebased390.loopexit.us", label %"for output.s0.y.rebased389.us.us"

"for sum_input.s1.r19$y410.us.us.us.us":          ; preds = %"for sum_input.s1.r19$y410.preheader.us.us", %"end for sum_input.s1.r19$x414.loopexit.split.us.us.us.us.us"
  %sum_input533672.sroa.0.15.us.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x414.loopexit.split.us.us.us.us.us" ], [ %sum_input533672.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y410.preheader.us.us" ]
  %"sum_input.s1.r19$y412.us.us.us.us" = phi i32 [ %2506, %"end for sum_input.s1.r19$x414.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y410.preheader.us.us" ]
  %2316 = mul nsw i32 %"sum_input.s1.r19$y412.us.us.us.us", %dilation_y
  %t1071.s.us.us.us.us = add nsw i32 %2316, %1937
  %2317 = mul nsw i32 %t1071.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x413.us.us.us.us.us"

"for sum_input.s1.r19$x413.us.us.us.us.us":       ; preds = %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y410.us.us.us.us"
  %sum_input533672.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us" ], [ %sum_input533672.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y410.us.us.us.us" ]
  %"sum_input.s1.r19$x415.us.us.us.us.us" = phi i32 [ %2505, %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y410.us.us.us.us" ]
  %2318 = mul nsw i32 %"sum_input.s1.r19$x415.us.us.us.us.us", %dilation_x
  %t1072.s.us.us.us.us.us = add nsw i32 %2318, %2314
  %t1231.us.us.us.us.us = mul nsw i32 %t1072.s.us.us.us.us.us, %17
  %2319 = add i32 %t1231.us.us.us.us.us, %2317
  %t1073.us.us.us.us.us = sub i32 %2319, %t1037
  %2320 = add i32 %t1073.us.us.us.us.us, %1931
  %t1045.us.us.us.us.us = add i32 %2319, %1900
  %2321 = sub i32 %t1045.us.us.us.us.us, %1887
  %t1074.us.us.us.us.us = sub i32 %2321, %1888
  %2322 = add i32 %t1074.us.us.us.us.us, %1931
  %2323 = add i32 %2319, %1898
  %2324 = sub i32 %2323, %1922
  %t1075.us.us.us.us.us = sub i32 %2324, %1888
  %2325 = add i32 %t1075.us.us.us.us.us, %1931
  %2326 = add i32 %2319, %1897
  %2327 = sub i32 %2326, %1922
  %t1076.us.us.us.us.us = sub i32 %2327, %1888
  %2328 = add i32 %t1076.us.us.us.us.us, %1931
  %2329 = add i32 %2319, %1896
  %2330 = sub i32 %2329, %1922
  %t1077.us.us.us.us.us = sub i32 %2330, %1888
  %2331 = add i32 %t1077.us.us.us.us.us, %1931
  %2332 = add i32 %2319, %1895
  %2333 = sub i32 %2332, %1922
  %t1078.us.us.us.us.us = sub i32 %2333, %1888
  %2334 = add i32 %t1078.us.us.us.us.us, %1931
  %2335 = add i32 %2319, %1894
  %2336 = sub i32 %2335, %1922
  %t1079.us.us.us.us.us = sub i32 %2336, %1888
  %2337 = add i32 %t1079.us.us.us.us.us, %1931
  %2338 = add i32 %2319, %1893
  %2339 = sub i32 %2338, %1922
  %t1080.us.us.us.us.us = sub i32 %2339, %1888
  %2340 = add i32 %t1080.us.us.us.us.us, %1931
  br i1 %1925, label %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124416.us.us.us.us.us"

"for sum_input.s1.r19$z.r124416.us.us.us.us.us":  ; preds = %"for sum_input.s1.r19$x413.us.us.us.us.us", %"for sum_input.s1.r19$z.r124416.us.us.us.us.us"
  %sum_input533672.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124416.us.us.us.us.us" ], [ %sum_input533672.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x413.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124418.us.us.us.us.us" = phi i32 [ %2450, %"for sum_input.s1.r19$z.r124416.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x413.us.us.us.us.us" ]
  %niter1887 = phi i32 [ %niter1887.nsub.1, %"for sum_input.s1.r19$z.r124416.us.us.us.us.us" ], [ %unroll_iter1886, %"for sum_input.s1.r19$x413.us.us.us.us.us" ]
  %2341 = shl nsw i32 %"sum_input.s1.r19$z.r124418.us.us.us.us.us", 2
  %2342 = add i32 %2320, %2341
  %2343 = getelementptr inbounds i8, i8* %13, i32 %2342
  %2344 = bitcast i8* %2343 to <4 x i8>*
  %2345 = load <4 x i8>, <4 x i8>* %2344, align 4, !tbaa !110
  %2346 = add i32 %2322, %2341
  %2347 = getelementptr inbounds i8, i8* %13, i32 %2346
  %2348 = bitcast i8* %2347 to <4 x i8>*
  %2349 = load <4 x i8>, <4 x i8>* %2348, align 4, !tbaa !110
  %2350 = add i32 %2325, %2341
  %2351 = getelementptr inbounds i8, i8* %13, i32 %2350
  %2352 = bitcast i8* %2351 to <4 x i8>*
  %2353 = load <4 x i8>, <4 x i8>* %2352, align 4, !tbaa !110
  %2354 = add i32 %2328, %2341
  %2355 = getelementptr inbounds i8, i8* %13, i32 %2354
  %2356 = bitcast i8* %2355 to <4 x i8>*
  %2357 = load <4 x i8>, <4 x i8>* %2356, align 4, !tbaa !110
  %2358 = add i32 %2331, %2341
  %2359 = getelementptr inbounds i8, i8* %13, i32 %2358
  %2360 = bitcast i8* %2359 to <4 x i8>*
  %2361 = load <4 x i8>, <4 x i8>* %2360, align 4, !tbaa !110
  %2362 = add i32 %2334, %2341
  %2363 = getelementptr inbounds i8, i8* %13, i32 %2362
  %2364 = bitcast i8* %2363 to <4 x i8>*
  %2365 = load <4 x i8>, <4 x i8>* %2364, align 4, !tbaa !110
  %2366 = add i32 %2337, %2341
  %2367 = getelementptr inbounds i8, i8* %13, i32 %2366
  %2368 = bitcast i8* %2367 to <4 x i8>*
  %2369 = load <4 x i8>, <4 x i8>* %2368, align 4, !tbaa !110
  %2370 = add i32 %2340, %2341
  %2371 = getelementptr inbounds i8, i8* %13, i32 %2370
  %2372 = bitcast i8* %2371 to <4 x i8>*
  %2373 = load <4 x i8>, <4 x i8>* %2372, align 4, !tbaa !110
  %2374 = shufflevector <4 x i8> %2345, <4 x i8> %2349, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2375 = shufflevector <4 x i8> %2353, <4 x i8> %2357, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2376 = shufflevector <4 x i8> %2361, <4 x i8> %2365, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2377 = shufflevector <4 x i8> %2369, <4 x i8> %2373, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2378 = shufflevector <8 x i8> %2374, <8 x i8> %2375, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2379 = shufflevector <8 x i8> %2376, <8 x i8> %2377, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2380 = shufflevector <16 x i8> %2378, <16 x i8> %2379, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us = zext <32 x i8> %2380 to <32 x i16>
  %2381 = shufflevector <32 x i16> %t1233.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2382 = bitcast <64 x i16> %2381 to <32 x i32>
  %2383 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2382)
  %2384 = bitcast <32 x i32> %2383 to <64 x i16>
  %2385 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2382)
  %2386 = bitcast <32 x i32> %2385 to <64 x i16>
  %2387 = add <64 x i16> %2386, %2384
  %2388 = shufflevector <64 x i16> %2387, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us = zext <16 x i16> %2388 to <16 x i32>
  %2389 = shufflevector <16 x i32> %t1232.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2390 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2389, i32 -4)
  %2391 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2390)
  %2392 = add nsw <32 x i32> %2391, %sum_input533672.sroa.0.18.us.us.us.us.us
  %2393 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2390)
  %2394 = add nsw <32 x i32> %2392, %2393
  %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us = shufflevector <32 x i32> %2394, <32 x i32> %sum_input533672.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2395 = shl i32 %"sum_input.s1.r19$z.r124418.us.us.us.us.us", 2
  %2396 = or i32 %2395, 4
  %2397 = add i32 %2320, %2396
  %2398 = getelementptr inbounds i8, i8* %13, i32 %2397
  %2399 = bitcast i8* %2398 to <4 x i8>*
  %2400 = load <4 x i8>, <4 x i8>* %2399, align 4, !tbaa !110
  %2401 = add i32 %2322, %2396
  %2402 = getelementptr inbounds i8, i8* %13, i32 %2401
  %2403 = bitcast i8* %2402 to <4 x i8>*
  %2404 = load <4 x i8>, <4 x i8>* %2403, align 4, !tbaa !110
  %2405 = add i32 %2325, %2396
  %2406 = getelementptr inbounds i8, i8* %13, i32 %2405
  %2407 = bitcast i8* %2406 to <4 x i8>*
  %2408 = load <4 x i8>, <4 x i8>* %2407, align 4, !tbaa !110
  %2409 = add i32 %2328, %2396
  %2410 = getelementptr inbounds i8, i8* %13, i32 %2409
  %2411 = bitcast i8* %2410 to <4 x i8>*
  %2412 = load <4 x i8>, <4 x i8>* %2411, align 4, !tbaa !110
  %2413 = add i32 %2331, %2396
  %2414 = getelementptr inbounds i8, i8* %13, i32 %2413
  %2415 = bitcast i8* %2414 to <4 x i8>*
  %2416 = load <4 x i8>, <4 x i8>* %2415, align 4, !tbaa !110
  %2417 = add i32 %2334, %2396
  %2418 = getelementptr inbounds i8, i8* %13, i32 %2417
  %2419 = bitcast i8* %2418 to <4 x i8>*
  %2420 = load <4 x i8>, <4 x i8>* %2419, align 4, !tbaa !110
  %2421 = add i32 %2337, %2396
  %2422 = getelementptr inbounds i8, i8* %13, i32 %2421
  %2423 = bitcast i8* %2422 to <4 x i8>*
  %2424 = load <4 x i8>, <4 x i8>* %2423, align 4, !tbaa !110
  %2425 = add i32 %2340, %2396
  %2426 = getelementptr inbounds i8, i8* %13, i32 %2425
  %2427 = bitcast i8* %2426 to <4 x i8>*
  %2428 = load <4 x i8>, <4 x i8>* %2427, align 4, !tbaa !110
  %2429 = shufflevector <4 x i8> %2400, <4 x i8> %2404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2430 = shufflevector <4 x i8> %2408, <4 x i8> %2412, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2431 = shufflevector <4 x i8> %2416, <4 x i8> %2420, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2432 = shufflevector <4 x i8> %2424, <4 x i8> %2428, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2433 = shufflevector <8 x i8> %2429, <8 x i8> %2430, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2434 = shufflevector <8 x i8> %2431, <8 x i8> %2432, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2435 = shufflevector <16 x i8> %2433, <16 x i8> %2434, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us.1 = zext <32 x i8> %2435 to <32 x i16>
  %2436 = shufflevector <32 x i16> %t1233.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2437 = bitcast <64 x i16> %2436 to <32 x i32>
  %2438 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2437)
  %2439 = bitcast <32 x i32> %2438 to <64 x i16>
  %2440 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2437)
  %2441 = bitcast <32 x i32> %2440 to <64 x i16>
  %2442 = add <64 x i16> %2441, %2439
  %2443 = shufflevector <64 x i16> %2442, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us.1 = zext <16 x i16> %2443 to <16 x i32>
  %2444 = shufflevector <16 x i32> %t1232.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2445 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2444, i32 -4)
  %2446 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2445)
  %2447 = add nsw <32 x i32> %2446, %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us
  %2448 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2445)
  %2449 = add nsw <32 x i32> %2447, %2448
  %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.1 = shufflevector <32 x i32> %2449, <32 x i32> %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2450 = add nuw nsw i32 %"sum_input.s1.r19$z.r124418.us.us.us.us.us", 2
  %niter1887.nsub.1 = add i32 %niter1887, -2
  %niter1887.ncmp.1 = icmp eq i32 %niter1887.nsub.1, 0
  br i1 %niter1887.ncmp.1, label %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124416.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124416.us.us.us.us.us", %"for sum_input.s1.r19$x413.us.us.us.us.us"
  %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x413.us.us.us.us.us" ], [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124416.us.us.us.us.us" ]
  %sum_input533672.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %sum_input533672.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x413.us.us.us.us.us" ], [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124416.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124418.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x413.us.us.us.us.us" ], [ %2450, %"for sum_input.s1.r19$z.r124416.us.us.us.us.us" ]
  br i1 %lcmp.mod1885.not, label %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124416.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124416.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us.unr-lcssa"
  %2451 = shl nsw i32 %"sum_input.s1.r19$z.r124418.us.us.us.us.us.unr", 2
  %2452 = add i32 %2320, %2451
  %2453 = getelementptr inbounds i8, i8* %13, i32 %2452
  %2454 = bitcast i8* %2453 to <4 x i8>*
  %2455 = load <4 x i8>, <4 x i8>* %2454, align 4, !tbaa !110
  %2456 = add i32 %2322, %2451
  %2457 = getelementptr inbounds i8, i8* %13, i32 %2456
  %2458 = bitcast i8* %2457 to <4 x i8>*
  %2459 = load <4 x i8>, <4 x i8>* %2458, align 4, !tbaa !110
  %2460 = add i32 %2325, %2451
  %2461 = getelementptr inbounds i8, i8* %13, i32 %2460
  %2462 = bitcast i8* %2461 to <4 x i8>*
  %2463 = load <4 x i8>, <4 x i8>* %2462, align 4, !tbaa !110
  %2464 = add i32 %2328, %2451
  %2465 = getelementptr inbounds i8, i8* %13, i32 %2464
  %2466 = bitcast i8* %2465 to <4 x i8>*
  %2467 = load <4 x i8>, <4 x i8>* %2466, align 4, !tbaa !110
  %2468 = add i32 %2331, %2451
  %2469 = getelementptr inbounds i8, i8* %13, i32 %2468
  %2470 = bitcast i8* %2469 to <4 x i8>*
  %2471 = load <4 x i8>, <4 x i8>* %2470, align 4, !tbaa !110
  %2472 = add i32 %2334, %2451
  %2473 = getelementptr inbounds i8, i8* %13, i32 %2472
  %2474 = bitcast i8* %2473 to <4 x i8>*
  %2475 = load <4 x i8>, <4 x i8>* %2474, align 4, !tbaa !110
  %2476 = add i32 %2337, %2451
  %2477 = getelementptr inbounds i8, i8* %13, i32 %2476
  %2478 = bitcast i8* %2477 to <4 x i8>*
  %2479 = load <4 x i8>, <4 x i8>* %2478, align 4, !tbaa !110
  %2480 = add i32 %2340, %2451
  %2481 = getelementptr inbounds i8, i8* %13, i32 %2480
  %2482 = bitcast i8* %2481 to <4 x i8>*
  %2483 = load <4 x i8>, <4 x i8>* %2482, align 4, !tbaa !110
  %2484 = shufflevector <4 x i8> %2455, <4 x i8> %2459, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2485 = shufflevector <4 x i8> %2463, <4 x i8> %2467, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2486 = shufflevector <4 x i8> %2471, <4 x i8> %2475, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2487 = shufflevector <4 x i8> %2479, <4 x i8> %2483, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2488 = shufflevector <8 x i8> %2484, <8 x i8> %2485, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2489 = shufflevector <8 x i8> %2486, <8 x i8> %2487, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2490 = shufflevector <16 x i8> %2488, <16 x i8> %2489, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us.epil = zext <32 x i8> %2490 to <32 x i16>
  %2491 = shufflevector <32 x i16> %t1233.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2492 = bitcast <64 x i16> %2491 to <32 x i32>
  %2493 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2492)
  %2494 = bitcast <32 x i32> %2493 to <64 x i16>
  %2495 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2492)
  %2496 = bitcast <32 x i32> %2495 to <64 x i16>
  %2497 = add <64 x i16> %2496, %2494
  %2498 = shufflevector <64 x i16> %2497, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us.epil = zext <16 x i16> %2498 to <16 x i32>
  %2499 = shufflevector <16 x i32> %t1232.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2500 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2499, i32 -4)
  %2501 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2500)
  %2502 = add nsw <32 x i32> %2501, %sum_input533672.sroa.0.18.us.us.us.us.us.unr
  %2503 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2500)
  %2504 = add nsw <32 x i32> %2502, %2503
  %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.epil = shufflevector <32 x i32> %2504, <32 x i32> %sum_input533672.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124416.us.us.us.us.us.epil"
  %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.lcssa = phi <32 x i32> [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us.unr-lcssa" ], [ %sum_input533672.sroa.0.0.vecblend1003.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124416.us.us.us.us.us.epil" ]
  %2505 = add nuw nsw i32 %"sum_input.s1.r19$x415.us.us.us.us.us", 1
  %.not714.us.us.us.us.us = icmp eq i32 %2505, %9
  br i1 %.not714.us.us.us.us.us, label %"end for sum_input.s1.r19$x414.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x413.us.us.us.us.us"

"end for sum_input.s1.r19$x414.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124417.loopexit.us.us.us.us.us"
  %2506 = add nuw nsw i32 %"sum_input.s1.r19$y412.us.us.us.us", 1
  %.not713.us.us.us.us = icmp eq i32 %2506, %11
  br i1 %.not713.us.us.us.us, label %"consume sum_input419.us.us", label %"for sum_input.s1.r19$y410.us.us.us.us"

"for convolved.s1.r19$y427.us.us.us":             ; preds = %"for convolved.s1.r19$y427.preheader.us.us", %"end for convolved.s1.r19$x431.loopexit.us.us.us"
  %convolved673.sroa.123.8.us.us.us = phi <32 x i32> [ %.us-phi1355.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.123.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %convolved673.sroa.113.8.us.us.us = phi <32 x i32> [ %.us-phi1356.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.113.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %convolved673.sroa.103.8.us.us.us = phi <32 x i32> [ %.us-phi1357.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.103.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %convolved673.sroa.93.8.us.us.us = phi <32 x i32> [ %.us-phi1358.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.93.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %convolved673.sroa.78.8.us.us.us = phi <32 x i32> [ %.us-phi1359.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.78.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %convolved673.sroa.63.8.us.us.us = phi <32 x i32> [ %.us-phi1360.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.63.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %convolved673.sroa.48.8.us.us.us = phi <32 x i32> [ %.us-phi1361.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.48.7.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %convolved673.sroa.0.22.us.us.us = phi <32 x i32> [ %.us-phi1362.us.us.us, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ %convolved673.sroa.0.21.us.us, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %"convolved.s1.r19$y429.us.us.us" = phi i32 [ %2511, %"end for convolved.s1.r19$x431.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y427.preheader.us.us" ]
  %2507 = mul nsw i32 %"convolved.s1.r19$y429.us.us.us", %dilation_y
  %2508 = add nsw i32 %2507, %1937
  %2509 = mul nsw i32 %2508, %19
  %t1106.us.us.us = add nsw i32 %2509, %1933
  %2510 = mul nsw i32 %"convolved.s1.r19$y429.us.us.us", %12
  %t1107.us.us.us = add nsw i32 %2510, %2272
  br i1 %1906, label %"for convolved.s1.r19$x430.us.us.us.us", label %"end for convolved.s1.r19$x431.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x431.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us", %"for convolved.s1.r19$y427.us.us.us"
  %.us-phi1355.us.us.us = phi <32 x i32> [ %convolved673.sroa.123.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1802, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %.us-phi1356.us.us.us = phi <32 x i32> [ %convolved673.sroa.113.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1803, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %.us-phi1357.us.us.us = phi <32 x i32> [ %convolved673.sroa.103.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1804, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %.us-phi1358.us.us.us = phi <32 x i32> [ %convolved673.sroa.93.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1805, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %.us-phi1359.us.us.us = phi <32 x i32> [ %convolved673.sroa.78.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1806, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %.us-phi1360.us.us.us = phi <32 x i32> [ %convolved673.sroa.63.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1807, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %.us-phi1361.us.us.us = phi <32 x i32> [ %convolved673.sroa.48.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1808, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %.us-phi1362.us.us.us = phi <32 x i32> [ %convolved673.sroa.0.22.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ], [ %.lcssa1809, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ]
  %2511 = add nuw nsw i32 %"convolved.s1.r19$y429.us.us.us", 1
  %.not710.us.us.us = icmp eq i32 %2511, %11
  br i1 %.not710.us.us.us, label %"consume convolved436.us.us", label %"for convolved.s1.r19$y427.us.us.us"

"for convolved.s1.r19$x430.us.us.us.us":          ; preds = %"for convolved.s1.r19$y427.us.us.us", %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us"
  %convolved673.sroa.123.9.us.us.us.us = phi <32 x i32> [ %.lcssa1802, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.123.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %convolved673.sroa.113.9.us.us.us.us = phi <32 x i32> [ %.lcssa1803, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.113.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %convolved673.sroa.103.9.us.us.us.us = phi <32 x i32> [ %.lcssa1804, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.103.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %convolved673.sroa.93.9.us.us.us.us = phi <32 x i32> [ %.lcssa1805, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.93.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %convolved673.sroa.78.9.us.us.us.us = phi <32 x i32> [ %.lcssa1806, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.78.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %convolved673.sroa.63.9.us.us.us.us = phi <32 x i32> [ %.lcssa1807, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.63.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %convolved673.sroa.48.9.us.us.us.us = phi <32 x i32> [ %.lcssa1808, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.48.8.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %convolved673.sroa.0.23.us.us.us.us = phi <32 x i32> [ %.lcssa1809, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ %convolved673.sroa.0.22.us.us.us, %"for convolved.s1.r19$y427.us.us.us" ]
  %"convolved.s1.r19$x432.us.us.us.us" = phi i32 [ %2690, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y427.us.us.us" ]
  %2512 = mul nsw i32 %"convolved.s1.r19$x432.us.us.us.us", %dilation_x
  %t1116.s.us.us.us.us = add nsw i32 %2512, %2286
  %t1115.s.us.us.us.us = add nsw i32 %2512, %2288
  %t1114.s.us.us.us.us = add nsw i32 %2512, %2290
  %t1113.s.us.us.us.us = add nsw i32 %2512, %2292
  %t1112.s.us.us.us.us = add nsw i32 %2512, %2294
  %t1111.s.us.us.us.us = add nsw i32 %2512, %2296
  %t1110.s.us.us.us.us = add nsw i32 %2512, %2298
  %t1108.s.us.us.us.us = add nsw i32 %2512, %2299
  %2513 = mul nsw i32 %t1108.s.us.us.us.us, %17
  %2514 = mul nsw i32 %"convolved.s1.r19$x432.us.us.us.us", %10
  %2515 = add nsw i32 %t1107.us.us.us, %2514
  %2516 = mul nsw i32 %t1110.s.us.us.us.us, %17
  %2517 = mul nsw i32 %t1111.s.us.us.us.us, %17
  %2518 = mul nsw i32 %t1112.s.us.us.us.us, %17
  %2519 = mul nsw i32 %t1113.s.us.us.us.us, %17
  %2520 = mul nsw i32 %t1114.s.us.us.us.us, %17
  %2521 = mul nsw i32 %t1115.s.us.us.us.us, %17
  %2522 = mul nsw i32 %t1116.s.us.us.us.us, %17
  br i1 %1927, label %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124433.us.us.us.us"

"for convolved.s1.r19$z.r124433.us.us.us.us":     ; preds = %"for convolved.s1.r19$x430.us.us.us.us", %"for convolved.s1.r19$z.r124433.us.us.us.us"
  %convolved673.sroa.123.11.us.us.us.us = phi <32 x i32> [ %2633, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.123.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %convolved673.sroa.113.11.us.us.us.us = phi <32 x i32> [ %2627, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.113.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %convolved673.sroa.103.11.us.us.us.us = phi <32 x i32> [ %2621, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.103.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %convolved673.sroa.93.11.us.us.us.us = phi <32 x i32> [ %2615, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.93.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %convolved673.sroa.78.11.us.us.us.us = phi <32 x i32> [ %2609, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.78.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %convolved673.sroa.63.11.us.us.us.us = phi <32 x i32> [ %2603, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.63.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %convolved673.sroa.48.11.us.us.us.us = phi <32 x i32> [ %2597, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.48.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %convolved673.sroa.0.25.us.us.us.us = phi <32 x i32> [ %2591, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %convolved673.sroa.0.23.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %"convolved.s1.r19$z.r124435.us.us.us.us" = phi i32 [ %2634, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %niter1897 = phi i32 [ %niter1897.nsub.1, %"for convolved.s1.r19$z.r124433.us.us.us.us" ], [ %unroll_iter1896, %"for convolved.s1.r19$x430.us.us.us.us" ]
  %2523 = shl nsw i32 %"convolved.s1.r19$z.r124435.us.us.us.us", 2
  %2524 = add i32 %2523, %t1106.us.us.us
  %2525 = add i32 %2524, %2513
  %2526 = getelementptr inbounds i8, i8* %13, i32 %2525
  %2527 = bitcast i8* %2526 to i32*
  %2528 = load i32, i32* %2527, align 4, !tbaa !110
  %2529 = shl nsw i32 %"convolved.s1.r19$z.r124435.us.us.us.us", 7
  %2530 = add nsw i32 %2515, %2529
  %2531 = getelementptr inbounds i8, i8* %5, i32 %2530
  %2532 = bitcast i8* %2531 to <32 x i32>*
  %2533 = load <32 x i32>, <32 x i32>* %2532, align 128, !tbaa !106
  %2534 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2528) #11
  %2535 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.25.us.us.us.us, <32 x i32> %2533, <32 x i32> %2534) #11
  %2536 = add i32 %2524, %2516
  %2537 = getelementptr inbounds i8, i8* %13, i32 %2536
  %2538 = bitcast i8* %2537 to i32*
  %2539 = load i32, i32* %2538, align 4, !tbaa !110
  %2540 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2539) #11
  %2541 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.48.11.us.us.us.us, <32 x i32> %2533, <32 x i32> %2540) #11
  %2542 = add i32 %2524, %2517
  %2543 = getelementptr inbounds i8, i8* %13, i32 %2542
  %2544 = bitcast i8* %2543 to i32*
  %2545 = load i32, i32* %2544, align 4, !tbaa !110
  %2546 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2545) #11
  %2547 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.63.11.us.us.us.us, <32 x i32> %2533, <32 x i32> %2546) #11
  %2548 = add i32 %2524, %2518
  %2549 = getelementptr inbounds i8, i8* %13, i32 %2548
  %2550 = bitcast i8* %2549 to i32*
  %2551 = load i32, i32* %2550, align 4, !tbaa !110
  %2552 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2551) #11
  %2553 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.78.11.us.us.us.us, <32 x i32> %2533, <32 x i32> %2552) #11
  %2554 = add i32 %2524, %2519
  %2555 = getelementptr inbounds i8, i8* %13, i32 %2554
  %2556 = bitcast i8* %2555 to i32*
  %2557 = load i32, i32* %2556, align 4, !tbaa !110
  %2558 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2557) #11
  %2559 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.93.11.us.us.us.us, <32 x i32> %2533, <32 x i32> %2558) #11
  %2560 = add i32 %2524, %2520
  %2561 = getelementptr inbounds i8, i8* %13, i32 %2560
  %2562 = bitcast i8* %2561 to i32*
  %2563 = load i32, i32* %2562, align 4, !tbaa !110
  %2564 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2563) #11
  %2565 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.103.11.us.us.us.us, <32 x i32> %2533, <32 x i32> %2564) #11
  %2566 = add i32 %2524, %2521
  %2567 = getelementptr inbounds i8, i8* %13, i32 %2566
  %2568 = bitcast i8* %2567 to i32*
  %2569 = load i32, i32* %2568, align 4, !tbaa !110
  %2570 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2569) #11
  %2571 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.113.11.us.us.us.us, <32 x i32> %2533, <32 x i32> %2570) #11
  %2572 = add i32 %2524, %2522
  %2573 = getelementptr inbounds i8, i8* %13, i32 %2572
  %2574 = bitcast i8* %2573 to i32*
  %2575 = load i32, i32* %2574, align 4, !tbaa !110
  %2576 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2575) #11
  %2577 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.123.11.us.us.us.us, <32 x i32> %2533, <32 x i32> %2576) #11
  %2578 = or i32 %"convolved.s1.r19$z.r124435.us.us.us.us", 1
  %2579 = shl nsw i32 %2578, 2
  %2580 = add i32 %2579, %t1106.us.us.us
  %2581 = add i32 %2580, %2513
  %2582 = getelementptr inbounds i8, i8* %13, i32 %2581
  %2583 = bitcast i8* %2582 to i32*
  %2584 = load i32, i32* %2583, align 4, !tbaa !110
  %2585 = shl nsw i32 %2578, 7
  %2586 = add nsw i32 %2515, %2585
  %2587 = getelementptr inbounds i8, i8* %5, i32 %2586
  %2588 = bitcast i8* %2587 to <32 x i32>*
  %2589 = load <32 x i32>, <32 x i32>* %2588, align 128, !tbaa !106
  %2590 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2584) #11
  %2591 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2535, <32 x i32> %2589, <32 x i32> %2590) #11
  %2592 = add i32 %2580, %2516
  %2593 = getelementptr inbounds i8, i8* %13, i32 %2592
  %2594 = bitcast i8* %2593 to i32*
  %2595 = load i32, i32* %2594, align 4, !tbaa !110
  %2596 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2595) #11
  %2597 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2541, <32 x i32> %2589, <32 x i32> %2596) #11
  %2598 = add i32 %2580, %2517
  %2599 = getelementptr inbounds i8, i8* %13, i32 %2598
  %2600 = bitcast i8* %2599 to i32*
  %2601 = load i32, i32* %2600, align 4, !tbaa !110
  %2602 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2601) #11
  %2603 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2547, <32 x i32> %2589, <32 x i32> %2602) #11
  %2604 = add i32 %2580, %2518
  %2605 = getelementptr inbounds i8, i8* %13, i32 %2604
  %2606 = bitcast i8* %2605 to i32*
  %2607 = load i32, i32* %2606, align 4, !tbaa !110
  %2608 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2607) #11
  %2609 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2553, <32 x i32> %2589, <32 x i32> %2608) #11
  %2610 = add i32 %2580, %2519
  %2611 = getelementptr inbounds i8, i8* %13, i32 %2610
  %2612 = bitcast i8* %2611 to i32*
  %2613 = load i32, i32* %2612, align 4, !tbaa !110
  %2614 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2613) #11
  %2615 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2559, <32 x i32> %2589, <32 x i32> %2614) #11
  %2616 = add i32 %2580, %2520
  %2617 = getelementptr inbounds i8, i8* %13, i32 %2616
  %2618 = bitcast i8* %2617 to i32*
  %2619 = load i32, i32* %2618, align 4, !tbaa !110
  %2620 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2619) #11
  %2621 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2565, <32 x i32> %2589, <32 x i32> %2620) #11
  %2622 = add i32 %2580, %2521
  %2623 = getelementptr inbounds i8, i8* %13, i32 %2622
  %2624 = bitcast i8* %2623 to i32*
  %2625 = load i32, i32* %2624, align 4, !tbaa !110
  %2626 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2625) #11
  %2627 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2571, <32 x i32> %2589, <32 x i32> %2626) #11
  %2628 = add i32 %2580, %2522
  %2629 = getelementptr inbounds i8, i8* %13, i32 %2628
  %2630 = bitcast i8* %2629 to i32*
  %2631 = load i32, i32* %2630, align 4, !tbaa !110
  %2632 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2631) #11
  %2633 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2577, <32 x i32> %2589, <32 x i32> %2632) #11
  %2634 = add nuw nsw i32 %"convolved.s1.r19$z.r124435.us.us.us.us", 2
  %niter1897.nsub.1 = add i32 %niter1897, -2
  %niter1897.ncmp.1 = icmp eq i32 %niter1897.nsub.1, 0
  br i1 %niter1897.ncmp.1, label %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124433.us.us.us.us"

"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124433.us.us.us.us", %"for convolved.s1.r19$x430.us.us.us.us"
  %.lcssa1809.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2591, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %.lcssa1808.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2597, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %.lcssa1807.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2603, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %.lcssa1806.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2609, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %.lcssa1805.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2615, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %.lcssa1804.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2621, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %.lcssa1803.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2627, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %.lcssa1802.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2633, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.123.11.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.123.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2633, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.113.11.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.113.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2627, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.103.11.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.103.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2621, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.93.11.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.93.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2615, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.78.11.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.78.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2609, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.63.11.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.63.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2603, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.48.11.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.48.9.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2597, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %convolved673.sroa.0.25.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.0.23.us.us.us.us, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2591, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  %"convolved.s1.r19$z.r124435.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x430.us.us.us.us" ], [ %2634, %"for convolved.s1.r19$z.r124433.us.us.us.us" ]
  br i1 %lcmp.mod1895.not, label %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124433.us.us.us.us.epil"

"for convolved.s1.r19$z.r124433.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa"
  %2635 = shl nsw i32 %"convolved.s1.r19$z.r124435.us.us.us.us.unr", 2
  %2636 = add i32 %2635, %t1106.us.us.us
  %2637 = shl nsw i32 %"convolved.s1.r19$z.r124435.us.us.us.us.unr", 7
  %2638 = add nsw i32 %2515, %2637
  %2639 = getelementptr inbounds i8, i8* %5, i32 %2638
  %2640 = bitcast i8* %2639 to <32 x i32>*
  %2641 = load <32 x i32>, <32 x i32>* %2640, align 128, !tbaa !106
  %2642 = add i32 %2636, %2522
  %2643 = getelementptr inbounds i8, i8* %13, i32 %2642
  %2644 = bitcast i8* %2643 to i32*
  %2645 = load i32, i32* %2644, align 4, !tbaa !110
  %2646 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2645) #11
  %2647 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.123.11.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2646) #11
  %2648 = add i32 %2636, %2521
  %2649 = getelementptr inbounds i8, i8* %13, i32 %2648
  %2650 = bitcast i8* %2649 to i32*
  %2651 = load i32, i32* %2650, align 4, !tbaa !110
  %2652 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2651) #11
  %2653 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.113.11.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2652) #11
  %2654 = add i32 %2636, %2520
  %2655 = getelementptr inbounds i8, i8* %13, i32 %2654
  %2656 = bitcast i8* %2655 to i32*
  %2657 = load i32, i32* %2656, align 4, !tbaa !110
  %2658 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2657) #11
  %2659 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.103.11.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2658) #11
  %2660 = add i32 %2636, %2519
  %2661 = getelementptr inbounds i8, i8* %13, i32 %2660
  %2662 = bitcast i8* %2661 to i32*
  %2663 = load i32, i32* %2662, align 4, !tbaa !110
  %2664 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2663) #11
  %2665 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.93.11.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2664) #11
  %2666 = add i32 %2636, %2518
  %2667 = getelementptr inbounds i8, i8* %13, i32 %2666
  %2668 = bitcast i8* %2667 to i32*
  %2669 = load i32, i32* %2668, align 4, !tbaa !110
  %2670 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2669) #11
  %2671 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.78.11.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2670) #11
  %2672 = add i32 %2636, %2517
  %2673 = getelementptr inbounds i8, i8* %13, i32 %2672
  %2674 = bitcast i8* %2673 to i32*
  %2675 = load i32, i32* %2674, align 4, !tbaa !110
  %2676 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2675) #11
  %2677 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.63.11.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2676) #11
  %2678 = add i32 %2636, %2516
  %2679 = getelementptr inbounds i8, i8* %13, i32 %2678
  %2680 = bitcast i8* %2679 to i32*
  %2681 = load i32, i32* %2680, align 4, !tbaa !110
  %2682 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2681) #11
  %2683 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.48.11.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2682) #11
  %2684 = add i32 %2636, %2513
  %2685 = getelementptr inbounds i8, i8* %13, i32 %2684
  %2686 = bitcast i8* %2685 to i32*
  %2687 = load i32, i32* %2686, align 4, !tbaa !110
  %2688 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2687) #11
  %2689 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.25.us.us.us.us.unr, <32 x i32> %2641, <32 x i32> %2688) #11
  br label %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us"

"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124433.us.us.us.us.epil"
  %.lcssa1809 = phi <32 x i32> [ %.lcssa1809.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2689, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %.lcssa1808 = phi <32 x i32> [ %.lcssa1808.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2683, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %.lcssa1807 = phi <32 x i32> [ %.lcssa1807.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2677, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %.lcssa1806 = phi <32 x i32> [ %.lcssa1806.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2671, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %.lcssa1805 = phi <32 x i32> [ %.lcssa1805.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2665, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %.lcssa1804 = phi <32 x i32> [ %.lcssa1804.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2659, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %.lcssa1803 = phi <32 x i32> [ %.lcssa1803.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2653, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %.lcssa1802 = phi <32 x i32> [ %.lcssa1802.ph, %"end for convolved.s1.r19$z.r124434.loopexit.us.us.us.us.unr-lcssa" ], [ %2647, %"for convolved.s1.r19$z.r124433.us.us.us.us.epil" ]
  %2690 = add nuw nsw i32 %"convolved.s1.r19$x432.us.us.us.us", 1
  %.not711.us.us.us.us = icmp eq i32 %2690, %9
  br i1 %.not711.us.us.us.us, label %"end for convolved.s1.r19$x431.loopexit.us.us.us", label %"for convolved.s1.r19$x430.us.us.us.us"

next_bb385:                                       ; preds = %next_bb92
  br i1 %101, label %then_bb461, label %next_bb462

then_bb461:                                       ; preds = %next_bb385
  %2691 = mul nsw i32 %19, %18
  %2692 = mul nsw i32 %17, %16
  %2693 = mul nsw i32 %22, %20
  %2694 = add i32 %2693, %2691
  %t1121 = add i32 %2694, %2692
  %2695 = icmp sgt i32 %21, 0
  br i1 %2695, label %"for output.s0.b.rebased463.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased463.preheader":           ; preds = %then_bb461
  %2696 = icmp sgt i32 %29, 0
  %.neg1110 = mul i32 %30, %28
  %.neg1111 = mul i32 %27, %25
  %.neg1112 = mul i32 %31, %20
  %2697 = icmp sgt i32 %11, 0
  %2698 = icmp sgt i32 %9, 0
  %2699 = icmp sgt i32 %7, 0
  %2700 = ashr i32 %4, 7
  %2701 = icmp sgt i32 %4, 127
  %2702 = icmp sgt i32 %output_shift, 0
  %2703 = select i1 %2702, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %2704 = add nsw i32 %output_shift, -1
  %2705 = zext i8 %output_zero to i16
  %2706 = insertelement <128 x i16> undef, i16 %2705, i32 0
  %2707 = shufflevector <128 x i16> %2706, <128 x i16> undef, <128 x i32> zeroinitializer
  %2708 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %2709 = shufflevector <128 x i8> %2708, <128 x i8> undef, <128 x i32> zeroinitializer
  %2710 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %2711 = shufflevector <128 x i8> %2710, <128 x i8> undef, <128 x i32> zeroinitializer
  %2712 = bitcast <128 x i16> %2707 to <64 x i32>
  %2713 = bitcast <128 x i8> %2709 to <32 x i32>
  %2714 = bitcast <128 x i8> %2711 to <32 x i32>
  %reass.add1121 = add i32 %.neg1110, %.neg1111
  %reass.add1122 = add i32 %reass.add1121, %.neg1112
  br i1 %2696, label %"for output.s0.b.rebased463.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased463.us.preheader":        ; preds = %"for output.s0.b.rebased463.preheader"
  %2715 = add i32 %7, -1
  %2716 = add i32 %9, -1
  %brmerge1676.demorgan = and i1 %2698, %2699
  %xtraiter1861 = and i32 %7, 7
  %2717 = icmp ult i32 %2715, 7
  %unroll_iter1866 = and i32 %7, -8
  %lcmp.mod1863.not = icmp eq i32 %xtraiter1861, 0
  %xtraiter1868 = and i32 %9, 3
  %2718 = icmp ult i32 %2716, 3
  %unroll_iter1873 = and i32 %9, -4
  %lcmp.mod1870.not = icmp eq i32 %xtraiter1868, 0
  %xtraiter1875 = and i32 %7, 3
  %2719 = icmp ult i32 %2715, 3
  %unroll_iter1882 = and i32 %7, -4
  %lcmp.mod1877.not = icmp eq i32 %xtraiter1875, 0
  br label %"for output.s0.b.rebased463.us"

"for output.s0.b.rebased463.us":                  ; preds = %"for output.s0.b.rebased463.us.preheader", %"end for output.s0.y.rebased467.loopexit.us"
  %sum_input674.sroa.0.14.us = phi <6 x i32> [ %sum_input674.sroa.0.26.us, %"end for output.s0.y.rebased467.loopexit.us" ], [ undef, %"for output.s0.b.rebased463.us.preheader" ]
  %output.s0.b.rebased465.us = phi i32 [ %2865, %"end for output.s0.y.rebased467.loopexit.us" ], [ 0, %"for output.s0.b.rebased463.us.preheader" ]
  %2720 = add nsw i32 %output.s0.b.rebased465.us, %20
  %2721 = mul nsw i32 %2720, %31
  %2722 = mul nsw i32 %2720, %22
  %2723 = sub i32 %2722, %t1121
  %2724 = sub i32 %2722, %2694
  %2725 = sub i32 %2721, %reass.add1122
  br label %"for output.s0.y.rebased466.us"

"for output.s0.y.rebased466.us":                  ; preds = %"for output.s0.b.rebased463.us", %"end for output.s0.x.xo470.us"
  %sum_input674.sroa.0.15.us = phi <6 x i32> [ %sum_input674.sroa.0.26.us, %"end for output.s0.x.xo470.us" ], [ %sum_input674.sroa.0.14.us, %"for output.s0.b.rebased463.us" ]
  %output.s0.y.rebased468.us = phi i32 [ %2841, %"end for output.s0.x.xo470.us" ], [ 0, %"for output.s0.b.rebased463.us" ]
  %2726 = add nsw i32 %output.s0.y.rebased468.us, %28
  %2727 = mul nsw i32 %2726, %30
  %2728 = mul nsw i32 %2726, %stride_y
  %t1133.us = add i32 %2725, %2727
  br label %"for output.s0.x.xo469.us"

"for output.s0.x.xo469.us":                       ; preds = %"end for output.s0.c.co496.us", %"for output.s0.y.rebased466.us"
  %sum_input674.sroa.0.17.us = phi <6 x i32> [ %sum_input674.sroa.0.15.us, %"for output.s0.y.rebased466.us" ], [ %sum_input674.sroa.0.26.us, %"end for output.s0.c.co496.us" ]
  %output.s0.x.xo471.us = phi i32 [ 0, %"for output.s0.y.rebased466.us" ], [ %2840, %"end for output.s0.c.co496.us" ]
  br i1 %t843.not, label %"consume sum_input494.us", label %then_bb474.us

then_bb474.us:                                    ; preds = %"for output.s0.x.xo469.us"
  %sum_input674.sroa.0.0.vec.insert870.us = insertelement <6 x i32> %sum_input674.sroa.0.17.us, i32 0, i32 0
  br i1 %t844, label %then_bb477.us, label %next_bb478.us

next_bb478.us:                                    ; preds = %then_bb474.us
  br i1 %2697, label %"for sum_input.s1.r19$y485.preheader.us", label %"consume sum_input494.us", !prof !96

then_bb477.us:                                    ; preds = %then_bb474.us
  br i1 %2697, label %"for sum_input.s1.r19$y479.preheader.us", label %"consume sum_input494.us", !prof !96

"for sum_input.s1.r19$y479.us":                   ; preds = %"for sum_input.s1.r19$y479.preheader.us", %"end for sum_input.s1.r19$x483.us"
  %sum_input674.sroa.0.18.us = phi <6 x i32> [ %sum_input674.sroa.0.20.us, %"end for sum_input.s1.r19$x483.us" ], [ %sum_input674.sroa.0.0.vec.insert870.us, %"for sum_input.s1.r19$y479.preheader.us" ]
  %"sum_input.s1.r19$y481.us" = phi i32 [ %2774, %"end for sum_input.s1.r19$x483.us" ], [ 0, %"for sum_input.s1.r19$y479.preheader.us" ]
  br i1 %2698, label %"for sum_input.s1.r19$x482.preheader.us", label %"end for sum_input.s1.r19$x483.us", !prof !96

"for sum_input.s1.r19$x482.us":                   ; preds = %"for sum_input.s1.r19$x482.preheader.us", %"for sum_input.s1.r19$x482.us"
  %sum_input674.sroa.0.19.us = phi <6 x i32> [ %sum_input674.sroa.0.0.vec.insert866.us.3, %"for sum_input.s1.r19$x482.us" ], [ %sum_input674.sroa.0.18.us, %"for sum_input.s1.r19$x482.preheader.us" ]
  %"sum_input.s1.r19$x484.us" = phi i32 [ %2764, %"for sum_input.s1.r19$x482.us" ], [ 0, %"for sum_input.s1.r19$x482.preheader.us" ]
  %niter1874 = phi i32 [ %niter1874.nsub.3, %"for sum_input.s1.r19$x482.us" ], [ %unroll_iter1873, %"for sum_input.s1.r19$x482.preheader.us" ]
  %sum_input674.sroa.0.0.vec.extract868.us = extractelement <6 x i32> %sum_input674.sroa.0.19.us, i32 0
  %2729 = mul nsw i32 %"sum_input.s1.r19$x484.us", %dilation_x
  %reass.add1119.us = add i32 %2862, %2729
  %reass.mul1120.us = shl i32 %reass.add1119.us, 2
  %2730 = add i32 %t1136.us, %reass.mul1120.us
  %2731 = getelementptr inbounds i8, i8* %13, i32 %2730
  %2732 = bitcast i8* %2731 to <4 x i8>*
  %2733 = load <4 x i8>, <4 x i8>* %2732, align 4, !tbaa !110
  %2734 = zext <4 x i8> %2733 to <4 x i32>
  %2735 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2734) #9
  %2736 = add nsw i32 %2735, %sum_input674.sroa.0.0.vec.extract868.us
  %2737 = or i32 %"sum_input.s1.r19$x484.us", 1
  %2738 = mul nsw i32 %2737, %dilation_x
  %reass.add1119.us.1 = add i32 %2862, %2738
  %reass.mul1120.us.1 = shl i32 %reass.add1119.us.1, 2
  %2739 = add i32 %t1136.us, %reass.mul1120.us.1
  %2740 = getelementptr inbounds i8, i8* %13, i32 %2739
  %2741 = bitcast i8* %2740 to <4 x i8>*
  %2742 = load <4 x i8>, <4 x i8>* %2741, align 4, !tbaa !110
  %2743 = zext <4 x i8> %2742 to <4 x i32>
  %2744 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2743) #9
  %2745 = add nsw i32 %2744, %2736
  %2746 = or i32 %"sum_input.s1.r19$x484.us", 2
  %2747 = mul nsw i32 %2746, %dilation_x
  %reass.add1119.us.2 = add i32 %2862, %2747
  %reass.mul1120.us.2 = shl i32 %reass.add1119.us.2, 2
  %2748 = add i32 %t1136.us, %reass.mul1120.us.2
  %2749 = getelementptr inbounds i8, i8* %13, i32 %2748
  %2750 = bitcast i8* %2749 to <4 x i8>*
  %2751 = load <4 x i8>, <4 x i8>* %2750, align 4, !tbaa !110
  %2752 = zext <4 x i8> %2751 to <4 x i32>
  %2753 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2752) #9
  %2754 = add nsw i32 %2753, %2745
  %sum_input674.sroa.0.0.vec.insert866.us.2 = insertelement <6 x i32> %sum_input674.sroa.0.19.us, i32 %2754, i32 0
  %2755 = or i32 %"sum_input.s1.r19$x484.us", 3
  %2756 = mul nsw i32 %2755, %dilation_x
  %reass.add1119.us.3 = add i32 %2862, %2756
  %reass.mul1120.us.3 = shl i32 %reass.add1119.us.3, 2
  %2757 = add i32 %t1136.us, %reass.mul1120.us.3
  %2758 = getelementptr inbounds i8, i8* %13, i32 %2757
  %2759 = bitcast i8* %2758 to <4 x i8>*
  %2760 = load <4 x i8>, <4 x i8>* %2759, align 4, !tbaa !110
  %2761 = zext <4 x i8> %2760 to <4 x i32>
  %2762 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2761) #9
  %2763 = add nsw i32 %2762, %2754
  %sum_input674.sroa.0.0.vec.insert866.us.3 = insertelement <6 x i32> %sum_input674.sroa.0.0.vec.insert866.us.2, i32 %2763, i32 0
  %2764 = add nuw nsw i32 %"sum_input.s1.r19$x484.us", 4
  %niter1874.nsub.3 = add i32 %niter1874, -4
  %niter1874.ncmp.3 = icmp eq i32 %niter1874.nsub.3, 0
  br i1 %niter1874.ncmp.3, label %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x482.us"

"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x482.us"
  %sum_input674.sroa.0.0.vec.insert866.us.2.le = insertelement <6 x i32> %sum_input674.sroa.0.19.us, i32 %2754, i32 0
  %sum_input674.sroa.0.0.vec.insert866.us.3.le = insertelement <6 x i32> %sum_input674.sroa.0.0.vec.insert866.us.2.le, i32 %2763, i32 0
  br label %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa": ; preds = %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa.loopexit", %"for sum_input.s1.r19$x482.preheader.us"
  %sum_input674.sroa.0.19.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x482.preheader.us" ], [ %sum_input674.sroa.0.0.vec.insert866.us.2.le, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1812.ph = phi i32 [ undef, %"for sum_input.s1.r19$x482.preheader.us" ], [ %2763, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input674.sroa.0.19.us.unr = phi <6 x i32> [ %sum_input674.sroa.0.18.us, %"for sum_input.s1.r19$x482.preheader.us" ], [ %sum_input674.sroa.0.0.vec.insert866.us.3.le, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x484.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x482.preheader.us" ], [ %2764, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1870.not, label %"end for sum_input.s1.r19$x483.us.loopexit", label %"for sum_input.s1.r19$x482.us.epil"

"for sum_input.s1.r19$x482.us.epil":              ; preds = %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x482.us.epil"
  %sum_input674.sroa.0.19.us.epil = phi <6 x i32> [ %sum_input674.sroa.0.0.vec.insert866.us.epil, %"for sum_input.s1.r19$x482.us.epil" ], [ %sum_input674.sroa.0.19.us.unr, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x484.us.epil" = phi i32 [ %2773, %"for sum_input.s1.r19$x482.us.epil" ], [ %"sum_input.s1.r19$x484.us.unr", %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa" ]
  %epil.iter1869 = phi i32 [ %epil.iter1869.sub, %"for sum_input.s1.r19$x482.us.epil" ], [ %xtraiter1868, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa" ]
  %sum_input674.sroa.0.0.vec.extract868.us.epil = extractelement <6 x i32> %sum_input674.sroa.0.19.us.epil, i32 0
  %2765 = mul nsw i32 %"sum_input.s1.r19$x484.us.epil", %dilation_x
  %reass.add1119.us.epil = add i32 %2862, %2765
  %reass.mul1120.us.epil = shl i32 %reass.add1119.us.epil, 2
  %2766 = add i32 %t1136.us, %reass.mul1120.us.epil
  %2767 = getelementptr inbounds i8, i8* %13, i32 %2766
  %2768 = bitcast i8* %2767 to <4 x i8>*
  %2769 = load <4 x i8>, <4 x i8>* %2768, align 4, !tbaa !110
  %2770 = zext <4 x i8> %2769 to <4 x i32>
  %2771 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2770) #9
  %2772 = add nsw i32 %2771, %sum_input674.sroa.0.0.vec.extract868.us.epil
  %sum_input674.sroa.0.0.vec.insert866.us.epil = insertelement <6 x i32> %sum_input674.sroa.0.19.us.epil, i32 %2772, i32 0
  %2773 = add nuw nsw i32 %"sum_input.s1.r19$x484.us.epil", 1
  %epil.iter1869.sub = add i32 %epil.iter1869, -1
  %epil.iter1869.cmp.not = icmp eq i32 %epil.iter1869.sub, 0
  br i1 %epil.iter1869.cmp.not, label %"end for sum_input.s1.r19$x483.us.loopexit", label %"for sum_input.s1.r19$x482.us.epil", !llvm.loop !117

"end for sum_input.s1.r19$x483.us.loopexit":      ; preds = %"for sum_input.s1.r19$x482.us.epil", %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa"
  %sum_input674.sroa.0.19.us.lcssa = phi <6 x i32> [ %sum_input674.sroa.0.19.us.lcssa.ph, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa" ], [ %sum_input674.sroa.0.19.us.epil, %"for sum_input.s1.r19$x482.us.epil" ]
  %.lcssa1812 = phi i32 [ %.lcssa1812.ph, %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa" ], [ %2772, %"for sum_input.s1.r19$x482.us.epil" ]
  %sum_input674.sroa.0.0.vec.insert866.us.le = insertelement <6 x i32> %sum_input674.sroa.0.19.us.lcssa, i32 %.lcssa1812, i32 0
  br label %"end for sum_input.s1.r19$x483.us"

"end for sum_input.s1.r19$x483.us":               ; preds = %"end for sum_input.s1.r19$x483.us.loopexit", %"for sum_input.s1.r19$y479.us"
  %sum_input674.sroa.0.20.us = phi <6 x i32> [ %sum_input674.sroa.0.18.us, %"for sum_input.s1.r19$y479.us" ], [ %sum_input674.sroa.0.0.vec.insert866.us.le, %"end for sum_input.s1.r19$x483.us.loopexit" ]
  %2774 = add nuw nsw i32 %"sum_input.s1.r19$y481.us", 1
  %.not704.us = icmp eq i32 %2774, %11
  br i1 %.not704.us, label %"consume sum_input494.us", label %"for sum_input.s1.r19$y479.us"

"consume sum_input494.us.loopexit1600":           ; preds = %"end for sum_input.s1.r19$x489.loopexit.split.us.us.us.us"
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.le.le.le = insertelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1811, i32 0
  br label %"consume sum_input494.us"

"consume sum_input494.us":                        ; preds = %"end for sum_input.s1.r19$x483.us", %"for sum_input.s1.r19$y485.preheader.us", %"consume sum_input494.us.loopexit1600", %then_bb477.us, %next_bb478.us, %"for output.s0.x.xo469.us"
  %sum_input674.sroa.0.26.us = phi <6 x i32> [ %sum_input674.sroa.0.17.us, %"for output.s0.x.xo469.us" ], [ %sum_input674.sroa.0.0.vec.insert870.us, %then_bb477.us ], [ %sum_input674.sroa.0.0.vec.insert870.us, %next_bb478.us ], [ %sum_input674.sroa.0.0.vec.insert870.us, %"for sum_input.s1.r19$y485.preheader.us" ], [ %sum_input674.sroa.0.0.vec.insert.us.us.us.us.le.le.le, %"consume sum_input494.us.loopexit1600" ], [ %sum_input674.sroa.0.20.us, %"end for sum_input.s1.r19$x483.us" ]
  br i1 %2701, label %"for output.s0.c.co495.preheader.us", label %"end for output.s0.c.co496.us", !prof !96

"for output.s0.c.co495.us":                       ; preds = %"for output.s0.c.co495.preheader.us", %"consume convolved511.us"
  %output.s0.c.co497.us = phi i32 [ %2839, %"consume convolved511.us" ], [ 0, %"for output.s0.c.co495.preheader.us" ]
  %2775 = shl nsw i32 %output.s0.c.co497.us, 7
  %2776 = getelementptr inbounds i32, i32* %offset_c, i32 %2775
  %2777 = bitcast i32* %2776 to <32 x i32>*
  %2778 = load <32 x i32>, <32 x i32>* %2777, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb500.us, label %next_bb501.us

next_bb501.us:                                    ; preds = %"for output.s0.c.co495.us"
  %2779 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2853) #11
  %2780 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2778, <32 x i32> %2779) #11
  %2781 = getelementptr inbounds i32, i32* %2776, i32 32
  %2782 = bitcast i32* %2781 to <32 x i32>*
  %2783 = load <32 x i32>, <32 x i32>* %2782, align 128, !tbaa !104
  %2784 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2783, <32 x i32> %2779) #11
  %2785 = getelementptr inbounds i32, i32* %2776, i32 64
  %2786 = bitcast i32* %2785 to <32 x i32>*
  %2787 = load <32 x i32>, <32 x i32>* %2786, align 128, !tbaa !104
  %2788 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2787, <32 x i32> %2779) #11
  %2789 = getelementptr inbounds i32, i32* %2776, i32 96
  %2790 = bitcast i32* %2789 to <32 x i32>*
  %2791 = load <32 x i32>, <32 x i32>* %2790, align 128, !tbaa !104
  %2792 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2791, <32 x i32> %2779) #11
  br label %after_bb499.us

then_bb500.us:                                    ; preds = %"for output.s0.c.co495.us"
  %2793 = getelementptr inbounds i32, i32* %2776, i32 32
  %2794 = bitcast i32* %2793 to <32 x i32>*
  %2795 = load <32 x i32>, <32 x i32>* %2794, align 128, !tbaa !104
  %2796 = getelementptr inbounds i32, i32* %2776, i32 64
  %2797 = bitcast i32* %2796 to <32 x i32>*
  %2798 = load <32 x i32>, <32 x i32>* %2797, align 128, !tbaa !104
  %2799 = getelementptr inbounds i32, i32* %2776, i32 96
  %2800 = bitcast i32* %2799 to <32 x i32>*
  %2801 = load <32 x i32>, <32 x i32>* %2800, align 128, !tbaa !104
  br label %after_bb499.us

after_bb499.us:                                   ; preds = %then_bb500.us, %next_bb501.us
  %convolved673.sroa.78.14.us = phi <32 x i32> [ %2801, %then_bb500.us ], [ %2792, %next_bb501.us ]
  %convolved673.sroa.63.14.us = phi <32 x i32> [ %2798, %then_bb500.us ], [ %2788, %next_bb501.us ]
  %convolved673.sroa.48.14.us = phi <32 x i32> [ %2795, %then_bb500.us ], [ %2784, %next_bb501.us ]
  %convolved673.sroa.0.28.us = phi <32 x i32> [ %2778, %then_bb500.us ], [ %2780, %next_bb501.us ]
  br i1 %2697, label %"for convolved.s1.r19$y502.preheader.us", label %"consume convolved511.us", !prof !96

"consume convolved511.us":                        ; preds = %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us", %"for convolved.s1.r19$y502.preheader.split.us.us", %"for convolved.s1.r19$y502.preheader.us", %after_bb499.us
  %convolved673.sroa.78.20.us = phi <32 x i32> [ %convolved673.sroa.78.14.us, %after_bb499.us ], [ %convolved673.sroa.78.14.us, %"for convolved.s1.r19$y502.preheader.us" ], [ %convolved673.sroa.78.14.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ], [ %.lcssa1813, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ]
  %convolved673.sroa.63.20.us = phi <32 x i32> [ %convolved673.sroa.63.14.us, %after_bb499.us ], [ %convolved673.sroa.63.14.us, %"for convolved.s1.r19$y502.preheader.us" ], [ %convolved673.sroa.63.14.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ], [ %.lcssa1814, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ]
  %convolved673.sroa.48.20.us = phi <32 x i32> [ %convolved673.sroa.48.14.us, %after_bb499.us ], [ %convolved673.sroa.48.14.us, %"for convolved.s1.r19$y502.preheader.us" ], [ %convolved673.sroa.48.14.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ], [ %.lcssa1815, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ]
  %convolved673.sroa.0.34.us = phi <32 x i32> [ %convolved673.sroa.0.28.us, %after_bb499.us ], [ %convolved673.sroa.0.28.us, %"for convolved.s1.r19$y502.preheader.us" ], [ %convolved673.sroa.0.28.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ], [ %.lcssa1816, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ]
  %2802 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.48.20.us, <32 x i32> %2857) #11
  %2803 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2802, <32 x i32> %convolved673.sroa.48.20.us, <32 x i32> %2857) #11
  %2804 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2803, <32 x i32> %2856) #11
  %2805 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2804, <32 x i32> %2703) #11
  %2806 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2803, <32 x i32> %2858) #11
  %2807 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2805, <32 x i32> %2806) #11
  %2808 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.0.34.us, <32 x i32> %2857) #11
  %2809 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2808, <32 x i32> %convolved673.sroa.0.34.us, <32 x i32> %2857) #11
  %2810 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2809, <32 x i32> %2856) #11
  %2811 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2810, <32 x i32> %2703) #11
  %2812 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2809, <32 x i32> %2858) #11
  %2813 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2811, <32 x i32> %2812) #11
  %2814 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %2807, <32 x i32> %2813) #11
  %2815 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.78.20.us, <32 x i32> %2857) #11
  %2816 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2815, <32 x i32> %convolved673.sroa.78.20.us, <32 x i32> %2857) #11
  %2817 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2816, <32 x i32> %2856) #11
  %2818 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2817, <32 x i32> %2703) #11
  %2819 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2816, <32 x i32> %2858) #11
  %2820 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2818, <32 x i32> %2819) #11
  %2821 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.63.20.us, <32 x i32> %2857) #11
  %2822 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2821, <32 x i32> %convolved673.sroa.63.20.us, <32 x i32> %2857) #11
  %2823 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2822, <32 x i32> %2856) #11
  %2824 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2823, <32 x i32> %2703) #11
  %2825 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2822, <32 x i32> %2858) #11
  %2826 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2824, <32 x i32> %2825) #11
  %2827 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %2820, <32 x i32> %2826) #11
  %2828 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2814, <32 x i32> %2827) #11
  %2829 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2828, <64 x i32> %2712) #11
  %2830 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2829) #11
  %2831 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2829) #11
  %2832 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %2830, <32 x i32> %2831) #11
  %2833 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2832, <32 x i32> %2713) #11
  %2834 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2833, <32 x i32> %2714) #11
  %2835 = shl nsw i32 %output.s0.c.co497.us, 7
  %2836 = add i32 %2860, %2835
  %2837 = getelementptr inbounds i8, i8* %23, i32 %2836
  %2838 = bitcast i8* %2837 to <32 x i32>*
  store <32 x i32> %2834, <32 x i32>* %2838, align 1, !tbaa !113
  %2839 = add nuw nsw i32 %output.s0.c.co497.us, 1
  %.not697.us = icmp eq i32 %2839, %2700
  br i1 %.not697.us, label %"end for output.s0.c.co496.us", label %"for output.s0.c.co495.us"

"end for output.s0.c.co496.us":                   ; preds = %"consume convolved511.us", %"consume sum_input494.us"
  %2840 = add nuw nsw i32 %output.s0.x.xo471.us, 1
  %.not695.us = icmp eq i32 %2840, %26
  br i1 %.not695.us, label %"end for output.s0.x.xo470.us", label %"for output.s0.x.xo469.us"

"end for output.s0.x.xo470.us":                   ; preds = %"end for output.s0.c.co496.us"
  %2841 = add nuw nsw i32 %output.s0.y.rebased468.us, 1
  %.not696.us = icmp eq i32 %2841, %29
  br i1 %.not696.us, label %"end for output.s0.y.rebased467.loopexit.us", label %"for output.s0.y.rebased466.us"

"for convolved.s1.r19$y502.preheader.us":         ; preds = %after_bb499.us
  %2842 = shl nsw i32 %output.s0.c.co497.us, 2
  %2843 = or i32 %2842, 3
  %2844 = mul nsw i32 %2843, %8
  %2845 = or i32 %2842, 2
  %2846 = mul nsw i32 %2845, %8
  %2847 = or i32 %2842, 1
  %2848 = mul nsw i32 %2847, %8
  %2849 = mul nsw i32 %output.s0.c.co497.us, %8
  br i1 %2698, label %"for convolved.s1.r19$y502.preheader.split.us.us", label %"consume convolved511.us", !prof !96

"for sum_input.s1.r19$x482.preheader.us":         ; preds = %"for sum_input.s1.r19$y479.us"
  %2850 = mul nsw i32 %"sum_input.s1.r19$y481.us", %dilation_y
  %2851 = add nsw i32 %2850, %2728
  %2852 = mul nsw i32 %2851, %19
  %t1136.us = add i32 %2724, %2852
  br i1 %2718, label %"end for sum_input.s1.r19$x483.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x482.us"

"for output.s0.c.co495.preheader.us":             ; preds = %"consume sum_input494.us"
  %sum_input674.sroa.0.0.vec.extract861.us = extractelement <6 x i32> %sum_input674.sroa.0.26.us, i32 0
  %2853 = mul nsw i32 %sum_input674.sroa.0.0.vec.extract861.us, %309
  %2854 = add nsw i32 %output.s0.x.xo471.us, %25
  %2855 = mul nsw i32 %2854, %stride_x
  %2856 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2704) #11
  %2857 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %2858 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %2859 = mul nsw i32 %2854, %27
  %2860 = add i32 %t1133.us, %2859
  br label %"for output.s0.c.co495.us"

"for sum_input.s1.r19$y479.preheader.us":         ; preds = %then_bb477.us
  %2861 = add nsw i32 %output.s0.x.xo471.us, %25
  %2862 = sub i32 %2861, %16
  br label %"for sum_input.s1.r19$y479.us"

"for sum_input.s1.r19$y485.preheader.us":         ; preds = %next_bb478.us
  %2863 = add nsw i32 %output.s0.x.xo471.us, %25
  %2864 = mul nsw i32 %2863, %stride_x
  br i1 %brmerge1676.demorgan, label %"for sum_input.s1.r19$y485.us.us.us", label %"consume sum_input494.us", !prof !103

"end for output.s0.y.rebased467.loopexit.us":     ; preds = %"end for output.s0.x.xo470.us"
  %2865 = add nuw nsw i32 %output.s0.b.rebased465.us, 1
  %.not694.us = icmp eq i32 %2865, %21
  br i1 %.not694.us, label %after_bb3, label %"for output.s0.b.rebased463.us"

"for sum_input.s1.r19$y485.us.us.us":             ; preds = %"for sum_input.s1.r19$y485.preheader.us", %"end for sum_input.s1.r19$x489.loopexit.split.us.us.us.us"
  %sum_input674.sroa.0.21.us.us.us = phi <6 x i32> [ %sum_input674.sroa.0.0.vec.insert.us.us.us.us.le.le, %"end for sum_input.s1.r19$x489.loopexit.split.us.us.us.us" ], [ %sum_input674.sroa.0.0.vec.insert870.us, %"for sum_input.s1.r19$y485.preheader.us" ]
  %"sum_input.s1.r19$y487.us.us.us" = phi i32 [ %2954, %"end for sum_input.s1.r19$x489.loopexit.split.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y485.preheader.us" ]
  %2866 = mul nsw i32 %"sum_input.s1.r19$y487.us.us.us", %dilation_y
  %2867 = add nsw i32 %2866, %2728
  %2868 = mul nsw i32 %2867, %19
  %t1138.us.us.us = add nsw i32 %2723, %2868
  br label %"for sum_input.s1.r19$x488.us.us.us.us"

"for sum_input.s1.r19$x488.us.us.us.us":          ; preds = %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us", %"for sum_input.s1.r19$y485.us.us.us"
  %sum_input674.sroa.0.22.us.us.us.us = phi <6 x i32> [ %sum_input674.sroa.0.0.vec.insert.us.us.us.us.le, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us" ], [ %sum_input674.sroa.0.21.us.us.us, %"for sum_input.s1.r19$y485.us.us.us" ]
  %"sum_input.s1.r19$x490.us.us.us.us" = phi i32 [ %2953, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y485.us.us.us" ]
  %2869 = mul nsw i32 %"sum_input.s1.r19$x490.us.us.us.us", %dilation_x
  %t1139.s.us.us.us.us = add nsw i32 %2869, %2864
  %2870 = mul nsw i32 %t1139.s.us.us.us.us, %17
  %2871 = add nsw i32 %t1138.us.us.us, %2870
  br i1 %2717, label %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124491.us.us.us.us"

"for sum_input.s1.r19$z.r124491.us.us.us.us":     ; preds = %"for sum_input.s1.r19$x488.us.us.us.us", %"for sum_input.s1.r19$z.r124491.us.us.us.us"
  %sum_input674.sroa.0.24.us.us.us.us = phi <6 x i32> [ %sum_input674.sroa.0.0.vec.insert.us.us.us.us.7, %"for sum_input.s1.r19$z.r124491.us.us.us.us" ], [ %sum_input674.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x488.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124493.us.us.us.us" = phi i32 [ %2943, %"for sum_input.s1.r19$z.r124491.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x488.us.us.us.us" ]
  %niter1867 = phi i32 [ %niter1867.nsub.7, %"for sum_input.s1.r19$z.r124491.us.us.us.us" ], [ %unroll_iter1866, %"for sum_input.s1.r19$x488.us.us.us.us" ]
  %sum_input674.sroa.0.0.vec.extract864.us.us.us.us = extractelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us, i32 0
  %2872 = shl nsw i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2873 = add nsw i32 %2871, %2872
  %2874 = getelementptr inbounds i8, i8* %13, i32 %2873
  %2875 = bitcast i8* %2874 to <4 x i8>*
  %2876 = load <4 x i8>, <4 x i8>* %2875, align 4, !tbaa !110
  %2877 = zext <4 x i8> %2876 to <4 x i32>
  %2878 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2877) #9
  %2879 = add nsw i32 %2878, %sum_input674.sroa.0.0.vec.extract864.us.us.us.us
  %2880 = shl i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2881 = or i32 %2880, 4
  %2882 = add nsw i32 %2871, %2881
  %2883 = getelementptr inbounds i8, i8* %13, i32 %2882
  %2884 = bitcast i8* %2883 to <4 x i8>*
  %2885 = load <4 x i8>, <4 x i8>* %2884, align 4, !tbaa !110
  %2886 = zext <4 x i8> %2885 to <4 x i32>
  %2887 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2886) #9
  %2888 = add nsw i32 %2887, %2879
  %2889 = shl i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2890 = or i32 %2889, 8
  %2891 = add nsw i32 %2871, %2890
  %2892 = getelementptr inbounds i8, i8* %13, i32 %2891
  %2893 = bitcast i8* %2892 to <4 x i8>*
  %2894 = load <4 x i8>, <4 x i8>* %2893, align 4, !tbaa !110
  %2895 = zext <4 x i8> %2894 to <4 x i32>
  %2896 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2895) #9
  %2897 = add nsw i32 %2896, %2888
  %2898 = shl i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2899 = or i32 %2898, 12
  %2900 = add nsw i32 %2871, %2899
  %2901 = getelementptr inbounds i8, i8* %13, i32 %2900
  %2902 = bitcast i8* %2901 to <4 x i8>*
  %2903 = load <4 x i8>, <4 x i8>* %2902, align 4, !tbaa !110
  %2904 = zext <4 x i8> %2903 to <4 x i32>
  %2905 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2904) #9
  %2906 = add nsw i32 %2905, %2897
  %2907 = shl i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2908 = or i32 %2907, 16
  %2909 = add nsw i32 %2871, %2908
  %2910 = getelementptr inbounds i8, i8* %13, i32 %2909
  %2911 = bitcast i8* %2910 to <4 x i8>*
  %2912 = load <4 x i8>, <4 x i8>* %2911, align 4, !tbaa !110
  %2913 = zext <4 x i8> %2912 to <4 x i32>
  %2914 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2913) #9
  %2915 = add nsw i32 %2914, %2906
  %2916 = shl i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2917 = or i32 %2916, 20
  %2918 = add nsw i32 %2871, %2917
  %2919 = getelementptr inbounds i8, i8* %13, i32 %2918
  %2920 = bitcast i8* %2919 to <4 x i8>*
  %2921 = load <4 x i8>, <4 x i8>* %2920, align 4, !tbaa !110
  %2922 = zext <4 x i8> %2921 to <4 x i32>
  %2923 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2922) #9
  %2924 = add nsw i32 %2923, %2915
  %2925 = shl i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2926 = or i32 %2925, 24
  %2927 = add nsw i32 %2871, %2926
  %2928 = getelementptr inbounds i8, i8* %13, i32 %2927
  %2929 = bitcast i8* %2928 to <4 x i8>*
  %2930 = load <4 x i8>, <4 x i8>* %2929, align 4, !tbaa !110
  %2931 = zext <4 x i8> %2930 to <4 x i32>
  %2932 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2931) #9
  %2933 = add nsw i32 %2932, %2924
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.6 = insertelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us, i32 %2933, i32 0
  %2934 = shl i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 2
  %2935 = or i32 %2934, 28
  %2936 = add nsw i32 %2871, %2935
  %2937 = getelementptr inbounds i8, i8* %13, i32 %2936
  %2938 = bitcast i8* %2937 to <4 x i8>*
  %2939 = load <4 x i8>, <4 x i8>* %2938, align 4, !tbaa !110
  %2940 = zext <4 x i8> %2939 to <4 x i32>
  %2941 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2940) #9
  %2942 = add nsw i32 %2941, %2933
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.7 = insertelement <6 x i32> %sum_input674.sroa.0.0.vec.insert.us.us.us.us.6, i32 %2942, i32 0
  %2943 = add nuw nsw i32 %"sum_input.s1.r19$z.r124493.us.us.us.us", 8
  %niter1867.nsub.7 = add i32 %niter1867, -8
  %niter1867.ncmp.7 = icmp eq i32 %niter1867.nsub.7, 0
  br i1 %niter1867.ncmp.7, label %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124491.us.us.us.us"

"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124491.us.us.us.us"
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.6.le = insertelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us, i32 %2933, i32 0
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.7.le = insertelement <6 x i32> %sum_input674.sroa.0.0.vec.insert.us.us.us.us.6.le, i32 %2942, i32 0
  br label %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x488.us.us.us.us"
  %sum_input674.sroa.0.24.us.us.us.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x488.us.us.us.us" ], [ %sum_input674.sroa.0.0.vec.insert.us.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1811.ph = phi i32 [ undef, %"for sum_input.s1.r19$x488.us.us.us.us" ], [ %2942, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %sum_input674.sroa.0.24.us.us.us.us.unr = phi <6 x i32> [ %sum_input674.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x488.us.us.us.us" ], [ %sum_input674.sroa.0.0.vec.insert.us.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124493.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x488.us.us.us.us" ], [ %2943, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1863.not, label %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124491.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil"
  %sum_input674.sroa.0.24.us.us.us.us.epil = phi <6 x i32> [ %sum_input674.sroa.0.0.vec.insert.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil" ], [ %sum_input674.sroa.0.24.us.us.us.us.unr, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124493.us.us.us.us.epil" = phi i32 [ %2952, %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124493.us.us.us.us.unr", %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1862 = phi i32 [ %epil.iter1862.sub, %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil" ], [ %xtraiter1861, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa" ]
  %sum_input674.sroa.0.0.vec.extract864.us.us.us.us.epil = extractelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us.epil, i32 0
  %2944 = shl nsw i32 %"sum_input.s1.r19$z.r124493.us.us.us.us.epil", 2
  %2945 = add nsw i32 %2871, %2944
  %2946 = getelementptr inbounds i8, i8* %13, i32 %2945
  %2947 = bitcast i8* %2946 to <4 x i8>*
  %2948 = load <4 x i8>, <4 x i8>* %2947, align 4, !tbaa !110
  %2949 = zext <4 x i8> %2948 to <4 x i32>
  %2950 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2949) #9
  %2951 = add nsw i32 %2950, %sum_input674.sroa.0.0.vec.extract864.us.us.us.us.epil
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.epil = insertelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us.epil, i32 %2951, i32 0
  %2952 = add nuw nsw i32 %"sum_input.s1.r19$z.r124493.us.us.us.us.epil", 1
  %epil.iter1862.sub = add i32 %epil.iter1862, -1
  %epil.iter1862.cmp.not = icmp eq i32 %epil.iter1862.sub, 0
  br i1 %epil.iter1862.cmp.not, label %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil", !llvm.loop !118

"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa"
  %sum_input674.sroa.0.24.us.us.us.us.lcssa = phi <6 x i32> [ %sum_input674.sroa.0.24.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa" ], [ %sum_input674.sroa.0.24.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil" ]
  %.lcssa1811 = phi i32 [ %.lcssa1811.ph, %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us.unr-lcssa" ], [ %2951, %"for sum_input.s1.r19$z.r124491.us.us.us.us.epil" ]
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.le = insertelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1811, i32 0
  %2953 = add nuw nsw i32 %"sum_input.s1.r19$x490.us.us.us.us", 1
  %.not702.us.us.us.us = icmp eq i32 %2953, %9
  br i1 %.not702.us.us.us.us, label %"end for sum_input.s1.r19$x489.loopexit.split.us.us.us.us", label %"for sum_input.s1.r19$x488.us.us.us.us"

"end for sum_input.s1.r19$x489.loopexit.split.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124492.loopexit.us.us.us.us"
  %sum_input674.sroa.0.0.vec.insert.us.us.us.us.le.le = insertelement <6 x i32> %sum_input674.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1811, i32 0
  %2954 = add nuw nsw i32 %"sum_input.s1.r19$y487.us.us.us", 1
  %.not701.us.us.us = icmp eq i32 %2954, %11
  br i1 %.not701.us.us.us, label %"consume sum_input494.us.loopexit1600", label %"for sum_input.s1.r19$y485.us.us.us"

"for convolved.s1.r19$y502.preheader.split.us.us": ; preds = %"for convolved.s1.r19$y502.preheader.us"
  br i1 %2699, label %"for convolved.s1.r19$y502.us.us.us", label %"consume convolved511.us", !prof !96

"for convolved.s1.r19$y502.us.us.us":             ; preds = %"for convolved.s1.r19$y502.preheader.split.us.us", %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us"
  %convolved673.sroa.78.15.us.us.us = phi <32 x i32> [ %.lcssa1813, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ], [ %convolved673.sroa.78.14.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ]
  %convolved673.sroa.63.15.us.us.us = phi <32 x i32> [ %.lcssa1814, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ], [ %convolved673.sroa.63.14.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ]
  %convolved673.sroa.48.15.us.us.us = phi <32 x i32> [ %.lcssa1815, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ], [ %convolved673.sroa.48.14.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ]
  %convolved673.sroa.0.29.us.us.us = phi <32 x i32> [ %.lcssa1816, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ], [ %convolved673.sroa.0.28.us, %"for convolved.s1.r19$y502.preheader.split.us.us" ]
  %"convolved.s1.r19$y504.us.us.us" = phi i32 [ %3122, %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y502.preheader.split.us.us" ]
  %2955 = mul nsw i32 %"convolved.s1.r19$y504.us.us.us", %dilation_y
  %2956 = add nsw i32 %2955, %2728
  %2957 = mul nsw i32 %2956, %19
  %t1148.us.us.us = add nsw i32 %2723, %2957
  %2958 = mul nsw i32 %"convolved.s1.r19$y504.us.us.us", %12
  br label %"for convolved.s1.r19$x505.us.us.us.us"

"for convolved.s1.r19$x505.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us", %"for convolved.s1.r19$y502.us.us.us"
  %convolved673.sroa.78.16.us.us.us.us = phi <32 x i32> [ %.lcssa1813, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us" ], [ %convolved673.sroa.78.15.us.us.us, %"for convolved.s1.r19$y502.us.us.us" ]
  %convolved673.sroa.63.16.us.us.us.us = phi <32 x i32> [ %.lcssa1814, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us" ], [ %convolved673.sroa.63.15.us.us.us, %"for convolved.s1.r19$y502.us.us.us" ]
  %convolved673.sroa.48.16.us.us.us.us = phi <32 x i32> [ %.lcssa1815, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us" ], [ %convolved673.sroa.48.15.us.us.us, %"for convolved.s1.r19$y502.us.us.us" ]
  %convolved673.sroa.0.30.us.us.us.us = phi <32 x i32> [ %.lcssa1816, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us" ], [ %convolved673.sroa.0.29.us.us.us, %"for convolved.s1.r19$y502.us.us.us" ]
  %"convolved.s1.r19$x507.us.us.us.us" = phi i32 [ %3121, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y502.us.us.us" ]
  %2959 = mul nsw i32 %"convolved.s1.r19$x507.us.us.us.us", %dilation_x
  %t1154.s.us.us.us.us = add nsw i32 %2959, %2855
  %2960 = mul nsw i32 %"convolved.s1.r19$x507.us.us.us.us", %10
  %t1155.us.us.us.us = add nsw i32 %2960, %2958
  %2961 = mul nsw i32 %t1154.s.us.us.us.us, %17
  %2962 = add nsw i32 %t1148.us.us.us, %2961
  %2963 = add i32 %t1155.us.us.us.us, %2848
  %2964 = add i32 %t1155.us.us.us.us, %2846
  %2965 = add i32 %t1155.us.us.us.us, %2844
  br i1 %2719, label %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124508.us.us.us.us"

"for convolved.s1.r19$z.r124508.us.us.us.us":     ; preds = %"for convolved.s1.r19$x505.us.us.us.us", %"for convolved.s1.r19$z.r124508.us.us.us.us"
  %convolved673.sroa.78.18.us.us.us.us = phi <32 x i32> [ %3088, %"for convolved.s1.r19$z.r124508.us.us.us.us" ], [ %convolved673.sroa.78.16.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ]
  %convolved673.sroa.63.18.us.us.us.us = phi <32 x i32> [ %3083, %"for convolved.s1.r19$z.r124508.us.us.us.us" ], [ %convolved673.sroa.63.16.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ]
  %convolved673.sroa.48.18.us.us.us.us = phi <32 x i32> [ %3078, %"for convolved.s1.r19$z.r124508.us.us.us.us" ], [ %convolved673.sroa.48.16.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ]
  %convolved673.sroa.0.32.us.us.us.us = phi <32 x i32> [ %3072, %"for convolved.s1.r19$z.r124508.us.us.us.us" ], [ %convolved673.sroa.0.30.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ]
  %"convolved.s1.r19$z.r124510.us.us.us.us" = phi i32 [ %3089, %"for convolved.s1.r19$z.r124508.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x505.us.us.us.us" ]
  %niter1883 = phi i32 [ %niter1883.nsub.3, %"for convolved.s1.r19$z.r124508.us.us.us.us" ], [ %unroll_iter1882, %"for convolved.s1.r19$x505.us.us.us.us" ]
  %2966 = shl nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us", 2
  %2967 = add nsw i32 %2962, %2966
  %2968 = getelementptr inbounds i8, i8* %13, i32 %2967
  %2969 = bitcast i8* %2968 to i32*
  %2970 = load i32, i32* %2969, align 4, !tbaa !110
  %2971 = shl nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us", 5
  %2972 = add nsw i32 %2971, %2849
  %2973 = shl nsw i32 %2972, 2
  %2974 = add nsw i32 %t1155.us.us.us.us, %2973
  %2975 = getelementptr inbounds i8, i8* %5, i32 %2974
  %2976 = bitcast i8* %2975 to <32 x i32>*
  %2977 = load <32 x i32>, <32 x i32>* %2976, align 128, !tbaa !106
  %2978 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2970) #11
  %2979 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.32.us.us.us.us, <32 x i32> %2977, <32 x i32> %2978) #11
  %2980 = shl nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us", 7
  %2981 = add i32 %2963, %2980
  %2982 = getelementptr inbounds i8, i8* %5, i32 %2981
  %2983 = bitcast i8* %2982 to <32 x i32>*
  %2984 = load <32 x i32>, <32 x i32>* %2983, align 128, !tbaa !106
  %2985 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.48.18.us.us.us.us, <32 x i32> %2984, <32 x i32> %2978) #11
  %2986 = add i32 %2964, %2980
  %2987 = getelementptr inbounds i8, i8* %5, i32 %2986
  %2988 = bitcast i8* %2987 to <32 x i32>*
  %2989 = load <32 x i32>, <32 x i32>* %2988, align 128, !tbaa !106
  %2990 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.63.18.us.us.us.us, <32 x i32> %2989, <32 x i32> %2978) #11
  %2991 = add i32 %2965, %2980
  %2992 = getelementptr inbounds i8, i8* %5, i32 %2991
  %2993 = bitcast i8* %2992 to <32 x i32>*
  %2994 = load <32 x i32>, <32 x i32>* %2993, align 128, !tbaa !106
  %2995 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.78.18.us.us.us.us, <32 x i32> %2994, <32 x i32> %2978) #11
  %2996 = or i32 %"convolved.s1.r19$z.r124510.us.us.us.us", 1
  %2997 = shl nsw i32 %2996, 2
  %2998 = add nsw i32 %2962, %2997
  %2999 = getelementptr inbounds i8, i8* %13, i32 %2998
  %3000 = bitcast i8* %2999 to i32*
  %3001 = load i32, i32* %3000, align 4, !tbaa !110
  %3002 = shl nsw i32 %2996, 5
  %3003 = add nsw i32 %3002, %2849
  %3004 = shl nsw i32 %3003, 2
  %3005 = add nsw i32 %t1155.us.us.us.us, %3004
  %3006 = getelementptr inbounds i8, i8* %5, i32 %3005
  %3007 = bitcast i8* %3006 to <32 x i32>*
  %3008 = load <32 x i32>, <32 x i32>* %3007, align 128, !tbaa !106
  %3009 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3001) #11
  %3010 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2979, <32 x i32> %3008, <32 x i32> %3009) #11
  %3011 = shl nsw i32 %2996, 7
  %3012 = add i32 %2963, %3011
  %3013 = getelementptr inbounds i8, i8* %5, i32 %3012
  %3014 = bitcast i8* %3013 to <32 x i32>*
  %3015 = load <32 x i32>, <32 x i32>* %3014, align 128, !tbaa !106
  %3016 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2985, <32 x i32> %3015, <32 x i32> %3009) #11
  %3017 = add i32 %2964, %3011
  %3018 = getelementptr inbounds i8, i8* %5, i32 %3017
  %3019 = bitcast i8* %3018 to <32 x i32>*
  %3020 = load <32 x i32>, <32 x i32>* %3019, align 128, !tbaa !106
  %3021 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2990, <32 x i32> %3020, <32 x i32> %3009) #11
  %3022 = add i32 %2965, %3011
  %3023 = getelementptr inbounds i8, i8* %5, i32 %3022
  %3024 = bitcast i8* %3023 to <32 x i32>*
  %3025 = load <32 x i32>, <32 x i32>* %3024, align 128, !tbaa !106
  %3026 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2995, <32 x i32> %3025, <32 x i32> %3009) #11
  %3027 = or i32 %"convolved.s1.r19$z.r124510.us.us.us.us", 2
  %3028 = shl nsw i32 %3027, 2
  %3029 = add nsw i32 %2962, %3028
  %3030 = getelementptr inbounds i8, i8* %13, i32 %3029
  %3031 = bitcast i8* %3030 to i32*
  %3032 = load i32, i32* %3031, align 4, !tbaa !110
  %3033 = shl nsw i32 %3027, 5
  %3034 = add nsw i32 %3033, %2849
  %3035 = shl nsw i32 %3034, 2
  %3036 = add nsw i32 %t1155.us.us.us.us, %3035
  %3037 = getelementptr inbounds i8, i8* %5, i32 %3036
  %3038 = bitcast i8* %3037 to <32 x i32>*
  %3039 = load <32 x i32>, <32 x i32>* %3038, align 128, !tbaa !106
  %3040 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3032) #11
  %3041 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3010, <32 x i32> %3039, <32 x i32> %3040) #11
  %3042 = shl nsw i32 %3027, 7
  %3043 = add i32 %2963, %3042
  %3044 = getelementptr inbounds i8, i8* %5, i32 %3043
  %3045 = bitcast i8* %3044 to <32 x i32>*
  %3046 = load <32 x i32>, <32 x i32>* %3045, align 128, !tbaa !106
  %3047 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3016, <32 x i32> %3046, <32 x i32> %3040) #11
  %3048 = add i32 %2964, %3042
  %3049 = getelementptr inbounds i8, i8* %5, i32 %3048
  %3050 = bitcast i8* %3049 to <32 x i32>*
  %3051 = load <32 x i32>, <32 x i32>* %3050, align 128, !tbaa !106
  %3052 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3021, <32 x i32> %3051, <32 x i32> %3040) #11
  %3053 = add i32 %2965, %3042
  %3054 = getelementptr inbounds i8, i8* %5, i32 %3053
  %3055 = bitcast i8* %3054 to <32 x i32>*
  %3056 = load <32 x i32>, <32 x i32>* %3055, align 128, !tbaa !106
  %3057 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3026, <32 x i32> %3056, <32 x i32> %3040) #11
  %3058 = or i32 %"convolved.s1.r19$z.r124510.us.us.us.us", 3
  %3059 = shl nsw i32 %3058, 2
  %3060 = add nsw i32 %2962, %3059
  %3061 = getelementptr inbounds i8, i8* %13, i32 %3060
  %3062 = bitcast i8* %3061 to i32*
  %3063 = load i32, i32* %3062, align 4, !tbaa !110
  %3064 = shl nsw i32 %3058, 5
  %3065 = add nsw i32 %3064, %2849
  %3066 = shl nsw i32 %3065, 2
  %3067 = add nsw i32 %t1155.us.us.us.us, %3066
  %3068 = getelementptr inbounds i8, i8* %5, i32 %3067
  %3069 = bitcast i8* %3068 to <32 x i32>*
  %3070 = load <32 x i32>, <32 x i32>* %3069, align 128, !tbaa !106
  %3071 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3063) #11
  %3072 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3041, <32 x i32> %3070, <32 x i32> %3071) #11
  %3073 = shl nsw i32 %3058, 7
  %3074 = add i32 %2963, %3073
  %3075 = getelementptr inbounds i8, i8* %5, i32 %3074
  %3076 = bitcast i8* %3075 to <32 x i32>*
  %3077 = load <32 x i32>, <32 x i32>* %3076, align 128, !tbaa !106
  %3078 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3047, <32 x i32> %3077, <32 x i32> %3071) #11
  %3079 = add i32 %2964, %3073
  %3080 = getelementptr inbounds i8, i8* %5, i32 %3079
  %3081 = bitcast i8* %3080 to <32 x i32>*
  %3082 = load <32 x i32>, <32 x i32>* %3081, align 128, !tbaa !106
  %3083 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3052, <32 x i32> %3082, <32 x i32> %3071) #11
  %3084 = add i32 %2965, %3073
  %3085 = getelementptr inbounds i8, i8* %5, i32 %3084
  %3086 = bitcast i8* %3085 to <32 x i32>*
  %3087 = load <32 x i32>, <32 x i32>* %3086, align 128, !tbaa !106
  %3088 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3057, <32 x i32> %3087, <32 x i32> %3071) #11
  %3089 = add nuw nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us", 4
  %niter1883.nsub.3 = add i32 %niter1883, -4
  %niter1883.ncmp.3 = icmp eq i32 %niter1883.nsub.3, 0
  br i1 %niter1883.ncmp.3, label %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124508.us.us.us.us"

"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124508.us.us.us.us", %"for convolved.s1.r19$x505.us.us.us.us"
  %.lcssa1816.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3072, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %.lcssa1815.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3078, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %.lcssa1814.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3083, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %.lcssa1813.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3088, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %convolved673.sroa.78.18.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.78.16.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3088, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %convolved673.sroa.63.18.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.63.16.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3083, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %convolved673.sroa.48.18.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.48.16.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3078, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %convolved673.sroa.0.32.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.0.30.us.us.us.us, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3072, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  %"convolved.s1.r19$z.r124510.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x505.us.us.us.us" ], [ %3089, %"for convolved.s1.r19$z.r124508.us.us.us.us" ]
  br i1 %lcmp.mod1877.not, label %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124508.us.us.us.us.epil"

"for convolved.s1.r19$z.r124508.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124508.us.us.us.us.epil"
  %convolved673.sroa.78.18.us.us.us.us.epil = phi <32 x i32> [ %3119, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ], [ %convolved673.sroa.78.18.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ]
  %convolved673.sroa.63.18.us.us.us.us.epil = phi <32 x i32> [ %3114, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ], [ %convolved673.sroa.63.18.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ]
  %convolved673.sroa.48.18.us.us.us.us.epil = phi <32 x i32> [ %3109, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ], [ %convolved673.sroa.48.18.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ]
  %convolved673.sroa.0.32.us.us.us.us.epil = phi <32 x i32> [ %3103, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ], [ %convolved673.sroa.0.32.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ]
  %"convolved.s1.r19$z.r124510.us.us.us.us.epil" = phi i32 [ %3120, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ], [ %"convolved.s1.r19$z.r124510.us.us.us.us.unr", %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1876 = phi i32 [ %epil.iter1876.sub, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ], [ %xtraiter1875, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ]
  %3090 = shl nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us.epil", 2
  %3091 = add nsw i32 %2962, %3090
  %3092 = getelementptr inbounds i8, i8* %13, i32 %3091
  %3093 = bitcast i8* %3092 to i32*
  %3094 = load i32, i32* %3093, align 4, !tbaa !110
  %3095 = shl nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us.epil", 5
  %3096 = add nsw i32 %3095, %2849
  %3097 = shl nsw i32 %3096, 2
  %3098 = add nsw i32 %t1155.us.us.us.us, %3097
  %3099 = getelementptr inbounds i8, i8* %5, i32 %3098
  %3100 = bitcast i8* %3099 to <32 x i32>*
  %3101 = load <32 x i32>, <32 x i32>* %3100, align 128, !tbaa !106
  %3102 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3094) #11
  %3103 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.32.us.us.us.us.epil, <32 x i32> %3101, <32 x i32> %3102) #11
  %3104 = shl nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us.epil", 7
  %3105 = add i32 %2963, %3104
  %3106 = getelementptr inbounds i8, i8* %5, i32 %3105
  %3107 = bitcast i8* %3106 to <32 x i32>*
  %3108 = load <32 x i32>, <32 x i32>* %3107, align 128, !tbaa !106
  %3109 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.48.18.us.us.us.us.epil, <32 x i32> %3108, <32 x i32> %3102) #11
  %3110 = add i32 %2964, %3104
  %3111 = getelementptr inbounds i8, i8* %5, i32 %3110
  %3112 = bitcast i8* %3111 to <32 x i32>*
  %3113 = load <32 x i32>, <32 x i32>* %3112, align 128, !tbaa !106
  %3114 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.63.18.us.us.us.us.epil, <32 x i32> %3113, <32 x i32> %3102) #11
  %3115 = add i32 %2965, %3104
  %3116 = getelementptr inbounds i8, i8* %5, i32 %3115
  %3117 = bitcast i8* %3116 to <32 x i32>*
  %3118 = load <32 x i32>, <32 x i32>* %3117, align 128, !tbaa !106
  %3119 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.78.18.us.us.us.us.epil, <32 x i32> %3118, <32 x i32> %3102) #11
  %3120 = add nuw nsw i32 %"convolved.s1.r19$z.r124510.us.us.us.us.epil", 1
  %epil.iter1876.sub = add i32 %epil.iter1876, -1
  %epil.iter1876.cmp.not = icmp eq i32 %epil.iter1876.sub, 0
  br i1 %epil.iter1876.cmp.not, label %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124508.us.us.us.us.epil", !llvm.loop !119

"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124508.us.us.us.us.epil", %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa"
  %.lcssa1816 = phi <32 x i32> [ %.lcssa1816.ph, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ], [ %3103, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ]
  %.lcssa1815 = phi <32 x i32> [ %.lcssa1815.ph, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ], [ %3109, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ]
  %.lcssa1814 = phi <32 x i32> [ %.lcssa1814.ph, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ], [ %3114, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ]
  %.lcssa1813 = phi <32 x i32> [ %.lcssa1813.ph, %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us.unr-lcssa" ], [ %3119, %"for convolved.s1.r19$z.r124508.us.us.us.us.epil" ]
  %3121 = add nuw nsw i32 %"convolved.s1.r19$x507.us.us.us.us", 1
  %.not699.us.us.us.us = icmp eq i32 %3121, %9
  br i1 %.not699.us.us.us.us, label %"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x505.us.us.us.us"

"end for convolved.s1.r19$x506.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124509.loopexit.us.us.us.us"
  %3122 = add nuw nsw i32 %"convolved.s1.r19$y504.us.us.us", 1
  %.not698.us.us.us = icmp eq i32 %3122, %11
  br i1 %.not698.us.us.us, label %"consume convolved511.us", label %"for convolved.s1.r19$y502.us.us.us"

next_bb462:                                       ; preds = %next_bb385
  %a15 = ashr i32 %4, 5
  %3123 = icmp sgt i32 %4, 31
  %3124 = select i1 %3123, i32 %a15, i32 0
  %t1167 = sub nsw i32 %122, %3124
  %3125 = mul nsw i32 %19, %18
  %3126 = mul nsw i32 %17, %16
  %3127 = mul nsw i32 %22, %20
  %3128 = add i32 %3127, %3125
  %t1163 = add i32 %3128, %3126
  %3129 = icmp sgt i32 %21, 0
  br i1 %3129, label %"for output.s0.b.rebased524.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased524.preheader":           ; preds = %next_bb462
  %3130 = icmp sgt i32 %29, 0
  %.neg = mul i32 %30, %28
  %.neg1100 = mul i32 %27, %25
  %.neg1101 = mul i32 %31, %20
  %reass.add = add i32 %.neg, %.neg1100
  %reass.add1103 = add i32 %reass.add, %.neg1101
  %3131 = icmp sgt i32 %11, 0
  %3132 = icmp sgt i32 %9, 0
  %3133 = icmp sgt i32 %7, 0
  %3134 = icmp sgt i32 %output_shift, 0
  %3135 = select i1 %3134, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %3136 = add nsw i32 %output_shift, -1
  %3137 = zext i8 %output_zero to i16
  %3138 = insertelement <32 x i16> undef, i16 %3137, i32 0
  %3139 = shufflevector <32 x i16> %3138, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3140 = bitcast <64 x i16> %3139 to <32 x i32>
  %3141 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %3142 = shufflevector <32 x i8> %3141, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3143 = bitcast <128 x i8> %3142 to <32 x i32>
  %3144 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %3145 = shufflevector <32 x i8> %3144, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3146 = bitcast <128 x i8> %3145 to <32 x i32>
  %3147 = icmp sgt i32 %t1167, 0
  %3148 = insertelement <32 x i32> undef, i32 %4, i32 0
  %3149 = shufflevector <32 x i32> %3148, <32 x i32> undef, <32 x i32> zeroinitializer
  %3150 = add i32 %7, -1
  %3151 = add i32 %9, -1
  %xtraiter1835 = and i32 %7, 7
  %3152 = icmp ult i32 %3150, 7
  %unroll_iter1840 = and i32 %7, -8
  %lcmp.mod1837.not = icmp eq i32 %xtraiter1835, 0
  %xtraiter1842 = and i32 %9, 3
  %3153 = icmp ult i32 %3151, 3
  %unroll_iter1847 = and i32 %9, -4
  %lcmp.mod1844.not = icmp eq i32 %xtraiter1842, 0
  %brmerge1681.demorgan = and i1 %3132, %3133
  %or.cond1755 = and i1 %3131, %brmerge1681.demorgan
  %xtraiter1849 = and i32 %7, 7
  %3154 = icmp ult i32 %3150, 7
  %unroll_iter1853 = and i32 %7, -8
  %lcmp.mod1851.not = icmp eq i32 %xtraiter1849, 0
  %brmerge1684.demorgan = and i1 %3132, %3133
  %or.cond1754 = and i1 %3131, %brmerge1684.demorgan
  %xtraiter1855 = and i32 %7, 7
  %3155 = icmp ult i32 %3150, 7
  %unroll_iter1859 = and i32 %7, -8
  %lcmp.mod1857.not = icmp eq i32 %xtraiter1855, 0
  br label %"for output.s0.b.rebased524"

"for output.s0.b.rebased524":                     ; preds = %"for output.s0.b.rebased524.preheader", %"end for output.s0.y.rebased528"
  %sum_input533672.sroa.0.21 = phi <32 x i32> [ %sum_input533672.sroa.0.23, %"end for output.s0.y.rebased528" ], [ undef, %"for output.s0.b.rebased524.preheader" ]
  %convolved673.sroa.0.35 = phi <32 x i32> [ %convolved673.sroa.0.37, %"end for output.s0.y.rebased528" ], [ undef, %"for output.s0.b.rebased524.preheader" ]
  %output.s0.b.rebased526 = phi i32 [ %3693, %"end for output.s0.y.rebased528" ], [ 0, %"for output.s0.b.rebased524.preheader" ]
  br i1 %3130, label %"for output.s0.y.rebased527.preheader", label %"end for output.s0.y.rebased528", !prof !96

"for output.s0.y.rebased527.preheader":           ; preds = %"for output.s0.b.rebased524"
  %3156 = add nsw i32 %output.s0.b.rebased526, %20
  %3157 = mul nsw i32 %3156, %31
  %3158 = sub i32 %3157, %reass.add1103
  %3159 = mul nsw i32 %3156, %22
  %3160 = sub i32 %3159, %t1163
  %3161 = sub i32 %3159, %3128
  br i1 %100, label %"for output.s0.y.rebased527.us", label %"end for output.s0.y.rebased528", !prof !96

"for output.s0.y.rebased527.us":                  ; preds = %"for output.s0.y.rebased527.preheader", %"end for output.s0.x.xo531.loopexit.us"
  %sum_input533672.sroa.0.22.us = phi <32 x i32> [ %sum_input533672.sroa.0.34.us, %"end for output.s0.x.xo531.loopexit.us" ], [ %sum_input533672.sroa.0.21, %"for output.s0.y.rebased527.preheader" ]
  %convolved673.sroa.0.36.us = phi <32 x i32> [ %convolved673.sroa.0.50.us, %"end for output.s0.x.xo531.loopexit.us" ], [ %convolved673.sroa.0.35, %"for output.s0.y.rebased527.preheader" ]
  %output.s0.y.rebased529.us = phi i32 [ %3347, %"end for output.s0.x.xo531.loopexit.us" ], [ 0, %"for output.s0.y.rebased527.preheader" ]
  %3162 = add nsw i32 %output.s0.y.rebased529.us, %28
  %3163 = mul nsw i32 %3162, %30
  %t1180.us = add i32 %3158, %3163
  %3164 = mul nsw i32 %3162, %stride_y
  br label %"for output.s0.x.xo530.us"

"for output.s0.x.xo530.us":                       ; preds = %"for output.s0.y.rebased527.us", %"end for output.s0.c.co.rebased.us"
  %sum_input533672.sroa.0.24.us = phi <32 x i32> [ %sum_input533672.sroa.0.34.us, %"end for output.s0.c.co.rebased.us" ], [ %sum_input533672.sroa.0.22.us, %"for output.s0.y.rebased527.us" ]
  %convolved673.sroa.0.38.us = phi <32 x i32> [ %convolved673.sroa.0.50.us, %"end for output.s0.c.co.rebased.us" ], [ %convolved673.sroa.0.36.us, %"for output.s0.y.rebased527.us" ]
  %output.s0.x.xo532.us = phi i32 [ %3326, %"end for output.s0.c.co.rebased.us" ], [ 0, %"for output.s0.y.rebased527.us" ]
  br i1 %t843.not, label %"consume sum_input556.us", label %then_bb536.us

then_bb536.us:                                    ; preds = %"for output.s0.x.xo530.us"
  %sum_input533672.sroa.0.0.vec.insert1016.us = insertelement <32 x i32> %sum_input533672.sroa.0.24.us, i32 0, i32 0
  br i1 %t844, label %then_bb539.us, label %next_bb540.us

next_bb540.us:                                    ; preds = %then_bb536.us
  br i1 %3131, label %"for sum_input.s1.r19$y547.preheader.us", label %"consume sum_input556.us", !prof !96

then_bb539.us:                                    ; preds = %then_bb536.us
  br i1 %3131, label %"for sum_input.s1.r19$y541.preheader.us", label %"consume sum_input556.us", !prof !96

"for sum_input.s1.r19$y541.us":                   ; preds = %"for sum_input.s1.r19$y541.preheader.us", %"end for sum_input.s1.r19$x545.us"
  %sum_input533672.sroa.0.26.us = phi <32 x i32> [ %sum_input533672.sroa.0.28.us, %"end for sum_input.s1.r19$x545.us" ], [ %sum_input533672.sroa.0.0.vec.insert1016.us, %"for sum_input.s1.r19$y541.preheader.us" ]
  %"sum_input.s1.r19$y543.us" = phi i32 [ %3210, %"end for sum_input.s1.r19$x545.us" ], [ 0, %"for sum_input.s1.r19$y541.preheader.us" ]
  br i1 %3132, label %"for sum_input.s1.r19$x544.preheader.us", label %"end for sum_input.s1.r19$x545.us", !prof !96

"for sum_input.s1.r19$x544.us":                   ; preds = %"for sum_input.s1.r19$x544.preheader.us", %"for sum_input.s1.r19$x544.us"
  %sum_input533672.sroa.0.27.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.vec.insert1012.us.3, %"for sum_input.s1.r19$x544.us" ], [ %sum_input533672.sroa.0.26.us, %"for sum_input.s1.r19$x544.preheader.us" ]
  %"sum_input.s1.r19$x546.us" = phi i32 [ %3200, %"for sum_input.s1.r19$x544.us" ], [ 0, %"for sum_input.s1.r19$x544.preheader.us" ]
  %niter1848 = phi i32 [ %niter1848.nsub.3, %"for sum_input.s1.r19$x544.us" ], [ %unroll_iter1847, %"for sum_input.s1.r19$x544.preheader.us" ]
  %sum_input533672.sroa.0.0.vec.extract1014.us = extractelement <32 x i32> %sum_input533672.sroa.0.27.us, i32 0
  %3165 = mul nsw i32 %"sum_input.s1.r19$x546.us", %dilation_x
  %reass.add1108.us = add i32 %3344, %3165
  %reass.mul1109.us = shl i32 %reass.add1108.us, 2
  %3166 = add i32 %t1183.us, %reass.mul1109.us
  %3167 = getelementptr inbounds i8, i8* %13, i32 %3166
  %3168 = bitcast i8* %3167 to <4 x i8>*
  %3169 = load <4 x i8>, <4 x i8>* %3168, align 4, !tbaa !110
  %3170 = zext <4 x i8> %3169 to <4 x i32>
  %3171 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3170) #9
  %3172 = add nsw i32 %3171, %sum_input533672.sroa.0.0.vec.extract1014.us
  %3173 = or i32 %"sum_input.s1.r19$x546.us", 1
  %3174 = mul nsw i32 %3173, %dilation_x
  %reass.add1108.us.1 = add i32 %3344, %3174
  %reass.mul1109.us.1 = shl i32 %reass.add1108.us.1, 2
  %3175 = add i32 %t1183.us, %reass.mul1109.us.1
  %3176 = getelementptr inbounds i8, i8* %13, i32 %3175
  %3177 = bitcast i8* %3176 to <4 x i8>*
  %3178 = load <4 x i8>, <4 x i8>* %3177, align 4, !tbaa !110
  %3179 = zext <4 x i8> %3178 to <4 x i32>
  %3180 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3179) #9
  %3181 = add nsw i32 %3180, %3172
  %3182 = or i32 %"sum_input.s1.r19$x546.us", 2
  %3183 = mul nsw i32 %3182, %dilation_x
  %reass.add1108.us.2 = add i32 %3344, %3183
  %reass.mul1109.us.2 = shl i32 %reass.add1108.us.2, 2
  %3184 = add i32 %t1183.us, %reass.mul1109.us.2
  %3185 = getelementptr inbounds i8, i8* %13, i32 %3184
  %3186 = bitcast i8* %3185 to <4 x i8>*
  %3187 = load <4 x i8>, <4 x i8>* %3186, align 4, !tbaa !110
  %3188 = zext <4 x i8> %3187 to <4 x i32>
  %3189 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3188) #9
  %3190 = add nsw i32 %3189, %3181
  %sum_input533672.sroa.0.0.vec.insert1012.us.2 = insertelement <32 x i32> %sum_input533672.sroa.0.27.us, i32 %3190, i32 0
  %3191 = or i32 %"sum_input.s1.r19$x546.us", 3
  %3192 = mul nsw i32 %3191, %dilation_x
  %reass.add1108.us.3 = add i32 %3344, %3192
  %reass.mul1109.us.3 = shl i32 %reass.add1108.us.3, 2
  %3193 = add i32 %t1183.us, %reass.mul1109.us.3
  %3194 = getelementptr inbounds i8, i8* %13, i32 %3193
  %3195 = bitcast i8* %3194 to <4 x i8>*
  %3196 = load <4 x i8>, <4 x i8>* %3195, align 4, !tbaa !110
  %3197 = zext <4 x i8> %3196 to <4 x i32>
  %3198 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3197) #9
  %3199 = add nsw i32 %3198, %3190
  %sum_input533672.sroa.0.0.vec.insert1012.us.3 = insertelement <32 x i32> %sum_input533672.sroa.0.0.vec.insert1012.us.2, i32 %3199, i32 0
  %3200 = add nuw nsw i32 %"sum_input.s1.r19$x546.us", 4
  %niter1848.nsub.3 = add i32 %niter1848, -4
  %niter1848.ncmp.3 = icmp eq i32 %niter1848.nsub.3, 0
  br i1 %niter1848.ncmp.3, label %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x544.us"

"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x544.us"
  %sum_input533672.sroa.0.0.vec.insert1012.us.2.le = insertelement <32 x i32> %sum_input533672.sroa.0.27.us, i32 %3190, i32 0
  %sum_input533672.sroa.0.0.vec.insert1012.us.3.le = insertelement <32 x i32> %sum_input533672.sroa.0.0.vec.insert1012.us.2.le, i32 %3199, i32 0
  br label %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa": ; preds = %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa.loopexit", %"for sum_input.s1.r19$x544.preheader.us"
  %sum_input533672.sroa.0.27.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x544.preheader.us" ], [ %sum_input533672.sroa.0.0.vec.insert1012.us.2.le, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1820.ph = phi i32 [ undef, %"for sum_input.s1.r19$x544.preheader.us" ], [ %3199, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input533672.sroa.0.27.us.unr = phi <32 x i32> [ %sum_input533672.sroa.0.26.us, %"for sum_input.s1.r19$x544.preheader.us" ], [ %sum_input533672.sroa.0.0.vec.insert1012.us.3.le, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x546.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x544.preheader.us" ], [ %3200, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1844.not, label %"end for sum_input.s1.r19$x545.us.loopexit", label %"for sum_input.s1.r19$x544.us.epil"

"for sum_input.s1.r19$x544.us.epil":              ; preds = %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x544.us.epil"
  %sum_input533672.sroa.0.27.us.epil = phi <32 x i32> [ %sum_input533672.sroa.0.0.vec.insert1012.us.epil, %"for sum_input.s1.r19$x544.us.epil" ], [ %sum_input533672.sroa.0.27.us.unr, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x546.us.epil" = phi i32 [ %3209, %"for sum_input.s1.r19$x544.us.epil" ], [ %"sum_input.s1.r19$x546.us.unr", %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa" ]
  %epil.iter1843 = phi i32 [ %epil.iter1843.sub, %"for sum_input.s1.r19$x544.us.epil" ], [ %xtraiter1842, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa" ]
  %sum_input533672.sroa.0.0.vec.extract1014.us.epil = extractelement <32 x i32> %sum_input533672.sroa.0.27.us.epil, i32 0
  %3201 = mul nsw i32 %"sum_input.s1.r19$x546.us.epil", %dilation_x
  %reass.add1108.us.epil = add i32 %3344, %3201
  %reass.mul1109.us.epil = shl i32 %reass.add1108.us.epil, 2
  %3202 = add i32 %t1183.us, %reass.mul1109.us.epil
  %3203 = getelementptr inbounds i8, i8* %13, i32 %3202
  %3204 = bitcast i8* %3203 to <4 x i8>*
  %3205 = load <4 x i8>, <4 x i8>* %3204, align 4, !tbaa !110
  %3206 = zext <4 x i8> %3205 to <4 x i32>
  %3207 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3206) #9
  %3208 = add nsw i32 %3207, %sum_input533672.sroa.0.0.vec.extract1014.us.epil
  %sum_input533672.sroa.0.0.vec.insert1012.us.epil = insertelement <32 x i32> %sum_input533672.sroa.0.27.us.epil, i32 %3208, i32 0
  %3209 = add nuw nsw i32 %"sum_input.s1.r19$x546.us.epil", 1
  %epil.iter1843.sub = add i32 %epil.iter1843, -1
  %epil.iter1843.cmp.not = icmp eq i32 %epil.iter1843.sub, 0
  br i1 %epil.iter1843.cmp.not, label %"end for sum_input.s1.r19$x545.us.loopexit", label %"for sum_input.s1.r19$x544.us.epil", !llvm.loop !120

"end for sum_input.s1.r19$x545.us.loopexit":      ; preds = %"for sum_input.s1.r19$x544.us.epil", %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa"
  %sum_input533672.sroa.0.27.us.lcssa = phi <32 x i32> [ %sum_input533672.sroa.0.27.us.lcssa.ph, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa" ], [ %sum_input533672.sroa.0.27.us.epil, %"for sum_input.s1.r19$x544.us.epil" ]
  %.lcssa1820 = phi i32 [ %.lcssa1820.ph, %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa" ], [ %3208, %"for sum_input.s1.r19$x544.us.epil" ]
  %sum_input533672.sroa.0.0.vec.insert1012.us.le = insertelement <32 x i32> %sum_input533672.sroa.0.27.us.lcssa, i32 %.lcssa1820, i32 0
  br label %"end for sum_input.s1.r19$x545.us"

"end for sum_input.s1.r19$x545.us":               ; preds = %"end for sum_input.s1.r19$x545.us.loopexit", %"for sum_input.s1.r19$y541.us"
  %sum_input533672.sroa.0.28.us = phi <32 x i32> [ %sum_input533672.sroa.0.26.us, %"for sum_input.s1.r19$y541.us" ], [ %sum_input533672.sroa.0.0.vec.insert1012.us.le, %"end for sum_input.s1.r19$x545.us.loopexit" ]
  %3210 = add nuw nsw i32 %"sum_input.s1.r19$y543.us", 1
  %.not692.us = icmp eq i32 %3210, %11
  br i1 %.not692.us, label %"consume sum_input556.us", label %"for sum_input.s1.r19$y541.us"

"consume sum_input556.us":                        ; preds = %"end for sum_input.s1.r19$x551.loopexit.us.us", %"end for sum_input.s1.r19$x545.us", %"for sum_input.s1.r19$y547.preheader.us", %then_bb539.us, %next_bb540.us, %"for output.s0.x.xo530.us"
  %sum_input533672.sroa.0.34.us = phi <32 x i32> [ %sum_input533672.sroa.0.24.us, %"for output.s0.x.xo530.us" ], [ %sum_input533672.sroa.0.0.vec.insert1016.us, %then_bb539.us ], [ %sum_input533672.sroa.0.0.vec.insert1016.us, %next_bb540.us ], [ %sum_input533672.sroa.0.0.vec.insert1016.us, %"for sum_input.s1.r19$y547.preheader.us" ], [ %sum_input533672.sroa.0.28.us, %"end for sum_input.s1.r19$x545.us" ], [ %.us-phi.us.us, %"end for sum_input.s1.r19$x551.loopexit.us.us" ]
  br i1 %3123, label %"for output.s0.c.co557.preheader.us", label %"end for output.s0.c.co558.us", !prof !96

"for output.s0.c.co557.us":                       ; preds = %"for output.s0.c.co557.preheader.us", %"consume convolved576.us"
  %convolved673.sroa.0.40.us = phi <32 x i32> [ %convolved673.sroa.0.48.us, %"consume convolved576.us" ], [ %convolved673.sroa.0.38.us, %"for output.s0.c.co557.preheader.us" ]
  %output.s0.c.co559.us = phi i32 [ %3245, %"consume convolved576.us" ], [ 0, %"for output.s0.c.co557.preheader.us" ]
  %3211 = shl nsw i32 %output.s0.c.co559.us, 5
  %3212 = icmp slt i32 %3211, %4
  br i1 %3212, label %then_bb562.us, label %"consume convolved576.us"

then_bb562.us:                                    ; preds = %"for output.s0.c.co557.us"
  %3213 = getelementptr inbounds i32, i32* %offset_c, i32 %3211
  %3214 = bitcast i32* %3213 to <32 x i32>*
  %3215 = load <32 x i32>, <32 x i32>* %3214, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb564.us, label %next_bb566.us

next_bb566.us:                                    ; preds = %then_bb562.us
  %3216 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3335) #11
  %3217 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3215, <32 x i32> %3216) #11
  br label %after_bb564.us

after_bb564.us:                                   ; preds = %then_bb562.us, %next_bb566.us
  %convolved673.sroa.0.42.us = phi <32 x i32> [ %3217, %next_bb566.us ], [ %3215, %then_bb562.us ]
  %3218 = mul nsw i32 %output.s0.c.co559.us, %8
  br i1 %or.cond1755, label %"for convolved.s1.r19$y567.us.us.us", label %"consume convolved576.us", !prof !103

"consume convolved576.us":                        ; preds = %"end for convolved.s1.r19$x571.loopexit.split.us.us.us.us", %after_bb564.us, %"for output.s0.c.co557.us"
  %convolved673.sroa.0.48.us = phi <32 x i32> [ %convolved673.sroa.0.42.us, %after_bb564.us ], [ %convolved673.sroa.0.40.us, %"for output.s0.c.co557.us" ], [ %.lcssa1821, %"end for convolved.s1.r19$x571.loopexit.split.us.us.us.us" ]
  %3219 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.0.48.us, <32 x i32> %3339) #11
  %3220 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3219, <32 x i32> %convolved673.sroa.0.48.us, <32 x i32> %3339) #11
  %3221 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3220, <32 x i32> %3338) #11
  %3222 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3220, <32 x i32> %3340) #11
  %3223 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3222, <32 x i32> %3135) #11
  %3224 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3221, <32 x i32> %3223) #11
  %3225 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3224, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3226 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3225) #11
  %3227 = trunc <32 x i32> %3226 to <32 x i16>
  %3228 = shufflevector <32 x i16> %3227, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3229 = bitcast <64 x i16> %3228 to <32 x i32>
  %3230 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3229, <32 x i32> %3140) #11
  %3231 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3230, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3232 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3231, <32 x i32> zeroinitializer) #11
  %3233 = bitcast <32 x i32> %3232 to <64 x i16>
  %3234 = shufflevector <64 x i16> %3233, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3235 = trunc <32 x i16> %3234 to <32 x i8>
  %3236 = shufflevector <32 x i8> %3235, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3237 = bitcast <128 x i8> %3236 to <32 x i32>
  %3238 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3237, <32 x i32> %3143) #11
  %3239 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3238, <32 x i32> %3146) #11
  %3240 = bitcast <32 x i32> %3239 to <128 x i8>
  %3241 = shufflevector <128 x i8> %3240, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3242 = add nsw i32 %3342, %3211
  %3243 = getelementptr inbounds i8, i8* %23, i32 %3242
  %3244 = bitcast i8* %3243 to <32 x i8>*
  store <32 x i8> %3241, <32 x i8>* %3244, align 1, !tbaa !113
  %3245 = add nuw nsw i32 %output.s0.c.co559.us, 1
  %.not685.us = icmp eq i32 %3245, %3124
  br i1 %.not685.us, label %"end for output.s0.c.co558.us", label %"for output.s0.c.co557.us"

"end for output.s0.c.co558.us":                   ; preds = %"consume convolved576.us", %"consume sum_input556.us"
  %convolved673.sroa.0.41.us = phi <32 x i32> [ %convolved673.sroa.0.38.us, %"consume sum_input556.us" ], [ %convolved673.sroa.0.48.us, %"consume convolved576.us" ]
  br i1 %3147, label %"for output.s0.c.co.rebased.preheader.us", label %"end for output.s0.c.co.rebased.us", !prof !96

"for output.s0.c.co.rebased.us":                  ; preds = %"for output.s0.c.co.rebased.preheader.us", %after_bb603.us
  %convolved673.sroa.0.49.us = phi <32 x i32> [ %convolved673.sroa.0.57.us, %after_bb603.us ], [ %convolved673.sroa.0.41.us, %"for output.s0.c.co.rebased.preheader.us" ]
  %output.s0.c.co.rebased.us = phi i32 [ %3325, %after_bb603.us ], [ 0, %"for output.s0.c.co.rebased.preheader.us" ]
  %3246 = add nsw i32 %output.s0.c.co.rebased.us, %3124
  %3247 = icmp sgt i32 %3246, %a0
  %3248 = shl nsw i32 %3246, 5
  %3249 = icmp sge i32 %3248, %4
  %.not1677 = or i1 %3247, %3249
  %3250 = add nsw i32 %output.s0.c.co.rebased.us, %a15
  %.not1594 = icmp sgt i32 %3250, %a0
  %or.cond1678 = or i1 %.not1677, %.not1594
  br i1 %or.cond1678, label %"consume convolved602.us", label %then_bb585.us

then_bb585.us:                                    ; preds = %"for output.s0.c.co.rebased.us"
  %3251 = shl nsw i32 %3250, 5
  %3252 = getelementptr inbounds i32, i32* %offset_c, i32 %3251
  %3253 = bitcast i32* %3252 to <32 x i32>*
  %3254 = load <32 x i32>, <32 x i32>* %3253, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb584.us, label %next_bb589.us

next_bb589.us:                                    ; preds = %then_bb585.us
  %3255 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3330) #11
  %3256 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3254, <32 x i32> %3255) #11
  br label %after_bb584.us

after_bb584.us:                                   ; preds = %then_bb585.us, %next_bb589.us
  %convolved673.sroa.0.51.us = phi <32 x i32> [ %3256, %next_bb589.us ], [ %3254, %then_bb585.us ]
  %3257 = mul nsw i32 %3250, %8
  br i1 %or.cond1754, label %"for convolved.s1.r19$y593.us.us.us", label %"consume convolved602.us", !prof !121

"consume convolved602.us":                        ; preds = %"end for convolved.s1.r19$x597.loopexit.split.us.us.us.us", %after_bb584.us, %"for output.s0.c.co.rebased.us"
  %convolved673.sroa.0.57.us = phi <32 x i32> [ %convolved673.sroa.0.51.us, %after_bb584.us ], [ %convolved673.sroa.0.49.us, %"for output.s0.c.co.rebased.us" ], [ %.lcssa1822, %"end for convolved.s1.r19$x597.loopexit.split.us.us.us.us" ]
  %3258 = add nsw i32 %3248, 32
  %.not679.us = icmp sgt i32 %3258, %4
  br i1 %.not679.us, label %next_bb605.us, label %then_bb604.us

then_bb604.us:                                    ; preds = %"consume convolved602.us"
  %3259 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %3260 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %3261 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved673.sroa.0.57.us, <32 x i32> %3260) #11
  %3262 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3261, <32 x i32> %convolved673.sroa.0.57.us, <32 x i32> %3260) #11
  %3263 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3262, <32 x i32> %3259) #11
  %3264 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3136) #11
  %3265 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3262, <32 x i32> %3264) #11
  %3266 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3265, <32 x i32> %3135) #11
  %3267 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3263, <32 x i32> %3266) #11
  %3268 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3267, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3269 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3268) #11
  %3270 = trunc <32 x i32> %3269 to <32 x i16>
  %3271 = shufflevector <32 x i16> %3270, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3272 = bitcast <64 x i16> %3271 to <32 x i32>
  %3273 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3272, <32 x i32> %3140) #11
  %3274 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3273, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3275 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3274, <32 x i32> zeroinitializer) #11
  %3276 = bitcast <32 x i32> %3275 to <64 x i16>
  %3277 = shufflevector <64 x i16> %3276, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3278 = trunc <32 x i16> %3277 to <32 x i8>
  %3279 = shufflevector <32 x i8> %3278, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3280 = bitcast <128 x i8> %3279 to <32 x i32>
  %3281 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3280, <32 x i32> %3143) #11
  %3282 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3281, <32 x i32> %3146) #11
  %3283 = bitcast <32 x i32> %3282 to <128 x i8>
  %3284 = shufflevector <128 x i8> %3283, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3285 = add nsw i32 %output.s0.c.co.rebased.us, %a15
  %3286 = shl nsw i32 %3285, 5
  %3287 = add nsw i32 %3334, %3286
  %3288 = getelementptr inbounds i8, i8* %23, i32 %3287
  %3289 = bitcast i8* %3288 to <32 x i8>*
  store <32 x i8> %3284, <32 x i8>* %3289, align 1, !tbaa !113
  br label %after_bb603.us

next_bb605.us:                                    ; preds = %"consume convolved602.us"
  %3290 = or i32 %3248, 1
  %3291 = insertelement <32 x i32> undef, i32 %3290, i32 0
  %3292 = shufflevector <32 x i32> %3291, <32 x i32> undef, <32 x i32> zeroinitializer
  %3293 = add nsw <32 x i32> %3292, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3294 = icmp sle <32 x i32> %3293, %3149
  %.not680.us = icmp sgt i32 %3290, %4
  %3295 = select i1 %.not680.us, <32 x i32> zeroinitializer, <32 x i32> %convolved673.sroa.0.57.us
  %3296 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %3297 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %3298 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %3295, <32 x i32> %3297) #11
  %3299 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3298, <32 x i32> %3295, <32 x i32> %3297) #11
  %3300 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3299, <32 x i32> %3296) #11
  %3301 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3136) #11
  %3302 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3299, <32 x i32> %3301) #11
  %3303 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3302, <32 x i32> %3135) #11
  %3304 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3300, <32 x i32> %3303) #11
  %3305 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3304, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3306 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3305) #11
  %3307 = trunc <32 x i32> %3306 to <32 x i16>
  %3308 = shufflevector <32 x i16> %3307, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3309 = bitcast <64 x i16> %3308 to <32 x i32>
  %3310 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3309, <32 x i32> %3140) #11
  %3311 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3310, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3312 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3311, <32 x i32> zeroinitializer) #11
  %3313 = bitcast <32 x i32> %3312 to <64 x i16>
  %3314 = shufflevector <64 x i16> %3313, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3315 = trunc <32 x i16> %3314 to <32 x i8>
  %3316 = shufflevector <32 x i8> %3315, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3317 = bitcast <128 x i8> %3316 to <32 x i32>
  %3318 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3317, <32 x i32> %3143) #11
  %3319 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3318, <32 x i32> %3146) #11
  %3320 = bitcast <32 x i32> %3319 to <128 x i8>
  %3321 = shufflevector <128 x i8> %3320, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3322 = add nsw i32 %3334, %3248
  %3323 = getelementptr inbounds i8, i8* %23, i32 %3322
  %3324 = bitcast i8* %3323 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %3321, <32 x i8>* %3324, i32 1, <32 x i1> %3294), !tbaa !113
  br label %after_bb603.us

after_bb603.us:                                   ; preds = %next_bb605.us, %then_bb604.us
  %3325 = add nuw nsw i32 %output.s0.c.co.rebased.us, 1
  %.not681.us = icmp eq i32 %3325, %t1167
  br i1 %.not681.us, label %"end for output.s0.c.co.rebased.us", label %"for output.s0.c.co.rebased.us"

"end for output.s0.c.co.rebased.us":              ; preds = %after_bb603.us, %"end for output.s0.c.co558.us"
  %convolved673.sroa.0.50.us = phi <32 x i32> [ %convolved673.sroa.0.41.us, %"end for output.s0.c.co558.us" ], [ %convolved673.sroa.0.57.us, %after_bb603.us ]
  %3326 = add nuw nsw i32 %output.s0.x.xo532.us, 1
  %.not678.us = icmp eq i32 %3326, %26
  br i1 %.not678.us, label %"end for output.s0.x.xo531.loopexit.us", label %"for output.s0.x.xo530.us"

"for sum_input.s1.r19$x544.preheader.us":         ; preds = %"for sum_input.s1.r19$y541.us"
  %3327 = mul nsw i32 %"sum_input.s1.r19$y543.us", %dilation_y
  %3328 = add nsw i32 %3327, %3164
  %3329 = mul nsw i32 %3328, %19
  %t1183.us = add i32 %3161, %3329
  br i1 %3153, label %"end for sum_input.s1.r19$x545.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x544.us"

"for output.s0.c.co.rebased.preheader.us":        ; preds = %"end for output.s0.c.co558.us"
  %sum_input533672.sroa.0.0.vec.extract1005.us = extractelement <32 x i32> %sum_input533672.sroa.0.34.us, i32 0
  %3330 = mul nsw i32 %sum_input533672.sroa.0.0.vec.extract1005.us, %309
  %3331 = add nsw i32 %output.s0.x.xo532.us, %25
  %3332 = mul nsw i32 %3331, %stride_x
  %3333 = mul nsw i32 %3331, %27
  %3334 = add nsw i32 %3333, %t1180.us
  br label %"for output.s0.c.co.rebased.us"

"for output.s0.c.co557.preheader.us":             ; preds = %"consume sum_input556.us"
  %sum_input533672.sroa.0.0.vec.extract1007.us = extractelement <32 x i32> %sum_input533672.sroa.0.34.us, i32 0
  %3335 = mul nsw i32 %sum_input533672.sroa.0.0.vec.extract1007.us, %309
  %3336 = add nsw i32 %output.s0.x.xo532.us, %25
  %3337 = mul nsw i32 %3336, %stride_x
  %3338 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %3339 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %3340 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3136) #11
  %3341 = mul nsw i32 %3336, %27
  %3342 = add nsw i32 %3341, %t1180.us
  br label %"for output.s0.c.co557.us"

"for sum_input.s1.r19$y541.preheader.us":         ; preds = %then_bb539.us
  %3343 = add nsw i32 %output.s0.x.xo532.us, %25
  %3344 = sub i32 %3343, %16
  br label %"for sum_input.s1.r19$y541.us"

"for sum_input.s1.r19$y547.preheader.us":         ; preds = %next_bb540.us
  %3345 = add nsw i32 %output.s0.x.xo532.us, %25
  %3346 = mul nsw i32 %3345, %stride_x
  br i1 %3132, label %"for sum_input.s1.r19$y547.us.us", label %"consume sum_input556.us", !prof !96

"end for output.s0.x.xo531.loopexit.us":          ; preds = %"end for output.s0.c.co.rebased.us"
  %3347 = add nuw nsw i32 %output.s0.y.rebased529.us, 1
  %.not677.us = icmp eq i32 %3347, %29
  br i1 %.not677.us, label %"end for output.s0.y.rebased528", label %"for output.s0.y.rebased527.us"

"for sum_input.s1.r19$y547.us.us":                ; preds = %"for sum_input.s1.r19$y547.preheader.us", %"end for sum_input.s1.r19$x551.loopexit.us.us"
  %sum_input533672.sroa.0.29.us.us = phi <32 x i32> [ %.us-phi.us.us, %"end for sum_input.s1.r19$x551.loopexit.us.us" ], [ %sum_input533672.sroa.0.0.vec.insert1016.us, %"for sum_input.s1.r19$y547.preheader.us" ]
  %"sum_input.s1.r19$y549.us.us" = phi i32 [ %3351, %"end for sum_input.s1.r19$x551.loopexit.us.us" ], [ 0, %"for sum_input.s1.r19$y547.preheader.us" ]
  %3348 = mul nsw i32 %"sum_input.s1.r19$y549.us.us", %dilation_y
  %3349 = add nsw i32 %3348, %3164
  %3350 = mul nsw i32 %3349, %19
  %t1185.us.us = add nsw i32 %3160, %3350
  br i1 %3133, label %"for sum_input.s1.r19$x550.us.us.us", label %"end for sum_input.s1.r19$x551.loopexit.us.us", !prof !96

"end for sum_input.s1.r19$x551.loopexit.us.us.loopexit": ; preds = %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us"
  %sum_input533672.sroa.0.0.vec.insert.us.us.us.le.le = insertelement <32 x i32> %sum_input533672.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1819, i32 0
  br label %"end for sum_input.s1.r19$x551.loopexit.us.us"

"end for sum_input.s1.r19$x551.loopexit.us.us":   ; preds = %"end for sum_input.s1.r19$x551.loopexit.us.us.loopexit", %"for sum_input.s1.r19$y547.us.us"
  %.us-phi.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.29.us.us, %"for sum_input.s1.r19$y547.us.us" ], [ %sum_input533672.sroa.0.0.vec.insert.us.us.us.le.le, %"end for sum_input.s1.r19$x551.loopexit.us.us.loopexit" ]
  %3351 = add nuw nsw i32 %"sum_input.s1.r19$y549.us.us", 1
  %.not689.us.us = icmp eq i32 %3351, %11
  br i1 %.not689.us.us, label %"consume sum_input556.us", label %"for sum_input.s1.r19$y547.us.us"

"for sum_input.s1.r19$x550.us.us.us":             ; preds = %"for sum_input.s1.r19$y547.us.us", %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us"
  %sum_input533672.sroa.0.30.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.vec.insert.us.us.us.le, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us" ], [ %sum_input533672.sroa.0.29.us.us, %"for sum_input.s1.r19$y547.us.us" ]
  %"sum_input.s1.r19$x552.us.us.us" = phi i32 [ %3436, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us" ], [ 0, %"for sum_input.s1.r19$y547.us.us" ]
  %3352 = mul nsw i32 %"sum_input.s1.r19$x552.us.us.us", %dilation_x
  %t1186.s.us.us.us = add nsw i32 %3352, %3346
  %3353 = mul nsw i32 %t1186.s.us.us.us, %17
  %3354 = add nsw i32 %t1185.us.us, %3353
  br i1 %3152, label %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124553.us.us.us"

"for sum_input.s1.r19$z.r124553.us.us.us":        ; preds = %"for sum_input.s1.r19$x550.us.us.us", %"for sum_input.s1.r19$z.r124553.us.us.us"
  %sum_input533672.sroa.0.32.us.us.us = phi <32 x i32> [ %sum_input533672.sroa.0.0.vec.insert.us.us.us.7, %"for sum_input.s1.r19$z.r124553.us.us.us" ], [ %sum_input533672.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x550.us.us.us" ]
  %"sum_input.s1.r19$z.r124555.us.us.us" = phi i32 [ %3426, %"for sum_input.s1.r19$z.r124553.us.us.us" ], [ 0, %"for sum_input.s1.r19$x550.us.us.us" ]
  %niter1841 = phi i32 [ %niter1841.nsub.7, %"for sum_input.s1.r19$z.r124553.us.us.us" ], [ %unroll_iter1840, %"for sum_input.s1.r19$x550.us.us.us" ]
  %sum_input533672.sroa.0.0.vec.extract1010.us.us.us = extractelement <32 x i32> %sum_input533672.sroa.0.32.us.us.us, i32 0
  %3355 = shl nsw i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3356 = add nsw i32 %3354, %3355
  %3357 = getelementptr inbounds i8, i8* %13, i32 %3356
  %3358 = bitcast i8* %3357 to <4 x i8>*
  %3359 = load <4 x i8>, <4 x i8>* %3358, align 4, !tbaa !110
  %3360 = zext <4 x i8> %3359 to <4 x i32>
  %3361 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3360) #9
  %3362 = add nsw i32 %3361, %sum_input533672.sroa.0.0.vec.extract1010.us.us.us
  %3363 = shl i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3364 = or i32 %3363, 4
  %3365 = add nsw i32 %3354, %3364
  %3366 = getelementptr inbounds i8, i8* %13, i32 %3365
  %3367 = bitcast i8* %3366 to <4 x i8>*
  %3368 = load <4 x i8>, <4 x i8>* %3367, align 4, !tbaa !110
  %3369 = zext <4 x i8> %3368 to <4 x i32>
  %3370 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3369) #9
  %3371 = add nsw i32 %3370, %3362
  %3372 = shl i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3373 = or i32 %3372, 8
  %3374 = add nsw i32 %3354, %3373
  %3375 = getelementptr inbounds i8, i8* %13, i32 %3374
  %3376 = bitcast i8* %3375 to <4 x i8>*
  %3377 = load <4 x i8>, <4 x i8>* %3376, align 4, !tbaa !110
  %3378 = zext <4 x i8> %3377 to <4 x i32>
  %3379 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3378) #9
  %3380 = add nsw i32 %3379, %3371
  %3381 = shl i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3382 = or i32 %3381, 12
  %3383 = add nsw i32 %3354, %3382
  %3384 = getelementptr inbounds i8, i8* %13, i32 %3383
  %3385 = bitcast i8* %3384 to <4 x i8>*
  %3386 = load <4 x i8>, <4 x i8>* %3385, align 4, !tbaa !110
  %3387 = zext <4 x i8> %3386 to <4 x i32>
  %3388 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3387) #9
  %3389 = add nsw i32 %3388, %3380
  %3390 = shl i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3391 = or i32 %3390, 16
  %3392 = add nsw i32 %3354, %3391
  %3393 = getelementptr inbounds i8, i8* %13, i32 %3392
  %3394 = bitcast i8* %3393 to <4 x i8>*
  %3395 = load <4 x i8>, <4 x i8>* %3394, align 4, !tbaa !110
  %3396 = zext <4 x i8> %3395 to <4 x i32>
  %3397 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3396) #9
  %3398 = add nsw i32 %3397, %3389
  %3399 = shl i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3400 = or i32 %3399, 20
  %3401 = add nsw i32 %3354, %3400
  %3402 = getelementptr inbounds i8, i8* %13, i32 %3401
  %3403 = bitcast i8* %3402 to <4 x i8>*
  %3404 = load <4 x i8>, <4 x i8>* %3403, align 4, !tbaa !110
  %3405 = zext <4 x i8> %3404 to <4 x i32>
  %3406 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3405) #9
  %3407 = add nsw i32 %3406, %3398
  %3408 = shl i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3409 = or i32 %3408, 24
  %3410 = add nsw i32 %3354, %3409
  %3411 = getelementptr inbounds i8, i8* %13, i32 %3410
  %3412 = bitcast i8* %3411 to <4 x i8>*
  %3413 = load <4 x i8>, <4 x i8>* %3412, align 4, !tbaa !110
  %3414 = zext <4 x i8> %3413 to <4 x i32>
  %3415 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3414) #9
  %3416 = add nsw i32 %3415, %3407
  %sum_input533672.sroa.0.0.vec.insert.us.us.us.6 = insertelement <32 x i32> %sum_input533672.sroa.0.32.us.us.us, i32 %3416, i32 0
  %3417 = shl i32 %"sum_input.s1.r19$z.r124555.us.us.us", 2
  %3418 = or i32 %3417, 28
  %3419 = add nsw i32 %3354, %3418
  %3420 = getelementptr inbounds i8, i8* %13, i32 %3419
  %3421 = bitcast i8* %3420 to <4 x i8>*
  %3422 = load <4 x i8>, <4 x i8>* %3421, align 4, !tbaa !110
  %3423 = zext <4 x i8> %3422 to <4 x i32>
  %3424 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3423) #9
  %3425 = add nsw i32 %3424, %3416
  %sum_input533672.sroa.0.0.vec.insert.us.us.us.7 = insertelement <32 x i32> %sum_input533672.sroa.0.0.vec.insert.us.us.us.6, i32 %3425, i32 0
  %3426 = add nuw nsw i32 %"sum_input.s1.r19$z.r124555.us.us.us", 8
  %niter1841.nsub.7 = add i32 %niter1841, -8
  %niter1841.ncmp.7 = icmp eq i32 %niter1841.nsub.7, 0
  br i1 %niter1841.ncmp.7, label %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124553.us.us.us"

"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124553.us.us.us"
  %sum_input533672.sroa.0.0.vec.insert.us.us.us.6.le = insertelement <32 x i32> %sum_input533672.sroa.0.32.us.us.us, i32 %3416, i32 0
  %sum_input533672.sroa.0.0.vec.insert.us.us.us.7.le = insertelement <32 x i32> %sum_input533672.sroa.0.0.vec.insert.us.us.us.6.le, i32 %3425, i32 0
  br label %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x550.us.us.us"
  %sum_input533672.sroa.0.32.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x550.us.us.us" ], [ %sum_input533672.sroa.0.0.vec.insert.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1819.ph = phi i32 [ undef, %"for sum_input.s1.r19$x550.us.us.us" ], [ %3425, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %sum_input533672.sroa.0.32.us.us.us.unr = phi <32 x i32> [ %sum_input533672.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x550.us.us.us" ], [ %sum_input533672.sroa.0.0.vec.insert.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124555.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x550.us.us.us" ], [ %3426, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1837.not, label %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124553.us.us.us.epil"

"for sum_input.s1.r19$z.r124553.us.us.us.epil":   ; preds = %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124553.us.us.us.epil"
  %sum_input533672.sroa.0.32.us.us.us.epil = phi <32 x i32> [ %sum_input533672.sroa.0.0.vec.insert.us.us.us.epil, %"for sum_input.s1.r19$z.r124553.us.us.us.epil" ], [ %sum_input533672.sroa.0.32.us.us.us.unr, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124555.us.us.us.epil" = phi i32 [ %3435, %"for sum_input.s1.r19$z.r124553.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124555.us.us.us.unr", %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa" ]
  %epil.iter1836 = phi i32 [ %epil.iter1836.sub, %"for sum_input.s1.r19$z.r124553.us.us.us.epil" ], [ %xtraiter1835, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa" ]
  %sum_input533672.sroa.0.0.vec.extract1010.us.us.us.epil = extractelement <32 x i32> %sum_input533672.sroa.0.32.us.us.us.epil, i32 0
  %3427 = shl nsw i32 %"sum_input.s1.r19$z.r124555.us.us.us.epil", 2
  %3428 = add nsw i32 %3354, %3427
  %3429 = getelementptr inbounds i8, i8* %13, i32 %3428
  %3430 = bitcast i8* %3429 to <4 x i8>*
  %3431 = load <4 x i8>, <4 x i8>* %3430, align 4, !tbaa !110
  %3432 = zext <4 x i8> %3431 to <4 x i32>
  %3433 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3432) #9
  %3434 = add nsw i32 %3433, %sum_input533672.sroa.0.0.vec.extract1010.us.us.us.epil
  %sum_input533672.sroa.0.0.vec.insert.us.us.us.epil = insertelement <32 x i32> %sum_input533672.sroa.0.32.us.us.us.epil, i32 %3434, i32 0
  %3435 = add nuw nsw i32 %"sum_input.s1.r19$z.r124555.us.us.us.epil", 1
  %epil.iter1836.sub = add i32 %epil.iter1836, -1
  %epil.iter1836.cmp.not = icmp eq i32 %epil.iter1836.sub, 0
  br i1 %epil.iter1836.cmp.not, label %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124553.us.us.us.epil", !llvm.loop !122

"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124553.us.us.us.epil", %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa"
  %sum_input533672.sroa.0.32.us.us.us.lcssa = phi <32 x i32> [ %sum_input533672.sroa.0.32.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa" ], [ %sum_input533672.sroa.0.32.us.us.us.epil, %"for sum_input.s1.r19$z.r124553.us.us.us.epil" ]
  %.lcssa1819 = phi i32 [ %.lcssa1819.ph, %"end for sum_input.s1.r19$z.r124554.loopexit.us.us.us.unr-lcssa" ], [ %3434, %"for sum_input.s1.r19$z.r124553.us.us.us.epil" ]
  %sum_input533672.sroa.0.0.vec.insert.us.us.us.le = insertelement <32 x i32> %sum_input533672.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1819, i32 0
  %3436 = add nuw nsw i32 %"sum_input.s1.r19$x552.us.us.us", 1
  %.not690.us.us.us = icmp eq i32 %3436, %9
  br i1 %.not690.us.us.us, label %"end for sum_input.s1.r19$x551.loopexit.us.us.loopexit", label %"for sum_input.s1.r19$x550.us.us.us"

"for convolved.s1.r19$y567.us.us.us":             ; preds = %after_bb564.us, %"end for convolved.s1.r19$x571.loopexit.split.us.us.us.us"
  %convolved673.sroa.0.43.us.us.us = phi <32 x i32> [ %.lcssa1821, %"end for convolved.s1.r19$x571.loopexit.split.us.us.us.us" ], [ %convolved673.sroa.0.42.us, %after_bb564.us ]
  %"convolved.s1.r19$y569.us.us.us" = phi i32 [ %3564, %"end for convolved.s1.r19$x571.loopexit.split.us.us.us.us" ], [ 0, %after_bb564.us ]
  %3437 = mul nsw i32 %"convolved.s1.r19$y569.us.us.us", %dilation_y
  %3438 = add nsw i32 %3437, %3164
  %3439 = mul nsw i32 %3438, %19
  %t1191.us.us.us = add nsw i32 %3160, %3439
  %3440 = mul nsw i32 %"convolved.s1.r19$y569.us.us.us", %12
  %t1192.us.us.us = add nsw i32 %3440, %3218
  br label %"for convolved.s1.r19$x570.us.us.us.us"

"for convolved.s1.r19$x570.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us", %"for convolved.s1.r19$y567.us.us.us"
  %convolved673.sroa.0.44.us.us.us.us = phi <32 x i32> [ %.lcssa1821, %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us" ], [ %convolved673.sroa.0.43.us.us.us, %"for convolved.s1.r19$y567.us.us.us" ]
  %"convolved.s1.r19$x572.us.us.us.us" = phi i32 [ %3563, %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y567.us.us.us" ]
  %3441 = mul nsw i32 %"convolved.s1.r19$x572.us.us.us.us", %dilation_x
  %t1193.s.us.us.us.us = add nsw i32 %3441, %3337
  %3442 = mul nsw i32 %t1193.s.us.us.us.us, %17
  %3443 = add nsw i32 %t1191.us.us.us, %3442
  %3444 = mul nsw i32 %"convolved.s1.r19$x572.us.us.us.us", %10
  %3445 = add nsw i32 %t1192.us.us.us, %3444
  br i1 %3154, label %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124573.us.us.us.us"

"for convolved.s1.r19$z.r124573.us.us.us.us":     ; preds = %"for convolved.s1.r19$x570.us.us.us.us", %"for convolved.s1.r19$z.r124573.us.us.us.us"
  %convolved673.sroa.0.46.us.us.us.us = phi <32 x i32> [ %3548, %"for convolved.s1.r19$z.r124573.us.us.us.us" ], [ %convolved673.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x570.us.us.us.us" ]
  %"convolved.s1.r19$z.r124575.us.us.us.us" = phi i32 [ %3549, %"for convolved.s1.r19$z.r124573.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x570.us.us.us.us" ]
  %niter1854 = phi i32 [ %niter1854.nsub.7, %"for convolved.s1.r19$z.r124573.us.us.us.us" ], [ %unroll_iter1853, %"for convolved.s1.r19$x570.us.us.us.us" ]
  %3446 = shl nsw i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 2
  %3447 = add nsw i32 %3443, %3446
  %3448 = getelementptr inbounds i8, i8* %13, i32 %3447
  %3449 = bitcast i8* %3448 to i32*
  %3450 = load i32, i32* %3449, align 4, !tbaa !110
  %3451 = shl nsw i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 7
  %3452 = add nsw i32 %3445, %3451
  %3453 = getelementptr inbounds i8, i8* %5, i32 %3452
  %3454 = bitcast i8* %3453 to <32 x i32>*
  %3455 = load <32 x i32>, <32 x i32>* %3454, align 128, !tbaa !106
  %3456 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3450) #11
  %3457 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.46.us.us.us.us, <32 x i32> %3455, <32 x i32> %3456) #11
  %3458 = or i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 1
  %3459 = shl nsw i32 %3458, 2
  %3460 = add nsw i32 %3443, %3459
  %3461 = getelementptr inbounds i8, i8* %13, i32 %3460
  %3462 = bitcast i8* %3461 to i32*
  %3463 = load i32, i32* %3462, align 4, !tbaa !110
  %3464 = shl nsw i32 %3458, 7
  %3465 = add nsw i32 %3445, %3464
  %3466 = getelementptr inbounds i8, i8* %5, i32 %3465
  %3467 = bitcast i8* %3466 to <32 x i32>*
  %3468 = load <32 x i32>, <32 x i32>* %3467, align 128, !tbaa !106
  %3469 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3463) #11
  %3470 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3457, <32 x i32> %3468, <32 x i32> %3469) #11
  %3471 = or i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 2
  %3472 = shl nsw i32 %3471, 2
  %3473 = add nsw i32 %3443, %3472
  %3474 = getelementptr inbounds i8, i8* %13, i32 %3473
  %3475 = bitcast i8* %3474 to i32*
  %3476 = load i32, i32* %3475, align 4, !tbaa !110
  %3477 = shl nsw i32 %3471, 7
  %3478 = add nsw i32 %3445, %3477
  %3479 = getelementptr inbounds i8, i8* %5, i32 %3478
  %3480 = bitcast i8* %3479 to <32 x i32>*
  %3481 = load <32 x i32>, <32 x i32>* %3480, align 128, !tbaa !106
  %3482 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3476) #11
  %3483 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3470, <32 x i32> %3481, <32 x i32> %3482) #11
  %3484 = or i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 3
  %3485 = shl nsw i32 %3484, 2
  %3486 = add nsw i32 %3443, %3485
  %3487 = getelementptr inbounds i8, i8* %13, i32 %3486
  %3488 = bitcast i8* %3487 to i32*
  %3489 = load i32, i32* %3488, align 4, !tbaa !110
  %3490 = shl nsw i32 %3484, 7
  %3491 = add nsw i32 %3445, %3490
  %3492 = getelementptr inbounds i8, i8* %5, i32 %3491
  %3493 = bitcast i8* %3492 to <32 x i32>*
  %3494 = load <32 x i32>, <32 x i32>* %3493, align 128, !tbaa !106
  %3495 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3489) #11
  %3496 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3483, <32 x i32> %3494, <32 x i32> %3495) #11
  %3497 = or i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 4
  %3498 = shl nsw i32 %3497, 2
  %3499 = add nsw i32 %3443, %3498
  %3500 = getelementptr inbounds i8, i8* %13, i32 %3499
  %3501 = bitcast i8* %3500 to i32*
  %3502 = load i32, i32* %3501, align 4, !tbaa !110
  %3503 = shl nsw i32 %3497, 7
  %3504 = add nsw i32 %3445, %3503
  %3505 = getelementptr inbounds i8, i8* %5, i32 %3504
  %3506 = bitcast i8* %3505 to <32 x i32>*
  %3507 = load <32 x i32>, <32 x i32>* %3506, align 128, !tbaa !106
  %3508 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3502) #11
  %3509 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3496, <32 x i32> %3507, <32 x i32> %3508) #11
  %3510 = or i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 5
  %3511 = shl nsw i32 %3510, 2
  %3512 = add nsw i32 %3443, %3511
  %3513 = getelementptr inbounds i8, i8* %13, i32 %3512
  %3514 = bitcast i8* %3513 to i32*
  %3515 = load i32, i32* %3514, align 4, !tbaa !110
  %3516 = shl nsw i32 %3510, 7
  %3517 = add nsw i32 %3445, %3516
  %3518 = getelementptr inbounds i8, i8* %5, i32 %3517
  %3519 = bitcast i8* %3518 to <32 x i32>*
  %3520 = load <32 x i32>, <32 x i32>* %3519, align 128, !tbaa !106
  %3521 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3515) #11
  %3522 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3509, <32 x i32> %3520, <32 x i32> %3521) #11
  %3523 = or i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 6
  %3524 = shl nsw i32 %3523, 2
  %3525 = add nsw i32 %3443, %3524
  %3526 = getelementptr inbounds i8, i8* %13, i32 %3525
  %3527 = bitcast i8* %3526 to i32*
  %3528 = load i32, i32* %3527, align 4, !tbaa !110
  %3529 = shl nsw i32 %3523, 7
  %3530 = add nsw i32 %3445, %3529
  %3531 = getelementptr inbounds i8, i8* %5, i32 %3530
  %3532 = bitcast i8* %3531 to <32 x i32>*
  %3533 = load <32 x i32>, <32 x i32>* %3532, align 128, !tbaa !106
  %3534 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3528) #11
  %3535 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3522, <32 x i32> %3533, <32 x i32> %3534) #11
  %3536 = or i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 7
  %3537 = shl nsw i32 %3536, 2
  %3538 = add nsw i32 %3443, %3537
  %3539 = getelementptr inbounds i8, i8* %13, i32 %3538
  %3540 = bitcast i8* %3539 to i32*
  %3541 = load i32, i32* %3540, align 4, !tbaa !110
  %3542 = shl nsw i32 %3536, 7
  %3543 = add nsw i32 %3445, %3542
  %3544 = getelementptr inbounds i8, i8* %5, i32 %3543
  %3545 = bitcast i8* %3544 to <32 x i32>*
  %3546 = load <32 x i32>, <32 x i32>* %3545, align 128, !tbaa !106
  %3547 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3541) #11
  %3548 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3535, <32 x i32> %3546, <32 x i32> %3547) #11
  %3549 = add nuw nsw i32 %"convolved.s1.r19$z.r124575.us.us.us.us", 8
  %niter1854.nsub.7 = add i32 %niter1854, -8
  %niter1854.ncmp.7 = icmp eq i32 %niter1854.nsub.7, 0
  br i1 %niter1854.ncmp.7, label %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124573.us.us.us.us"

"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124573.us.us.us.us", %"for convolved.s1.r19$x570.us.us.us.us"
  %.lcssa1821.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x570.us.us.us.us" ], [ %3548, %"for convolved.s1.r19$z.r124573.us.us.us.us" ]
  %convolved673.sroa.0.46.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x570.us.us.us.us" ], [ %3548, %"for convolved.s1.r19$z.r124573.us.us.us.us" ]
  %"convolved.s1.r19$z.r124575.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x570.us.us.us.us" ], [ %3549, %"for convolved.s1.r19$z.r124573.us.us.us.us" ]
  br i1 %lcmp.mod1851.not, label %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124573.us.us.us.us.epil"

"for convolved.s1.r19$z.r124573.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124573.us.us.us.us.epil"
  %convolved673.sroa.0.46.us.us.us.us.epil = phi <32 x i32> [ %3561, %"for convolved.s1.r19$z.r124573.us.us.us.us.epil" ], [ %convolved673.sroa.0.46.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa" ]
  %"convolved.s1.r19$z.r124575.us.us.us.us.epil" = phi i32 [ %3562, %"for convolved.s1.r19$z.r124573.us.us.us.us.epil" ], [ %"convolved.s1.r19$z.r124575.us.us.us.us.unr", %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1850 = phi i32 [ %epil.iter1850.sub, %"for convolved.s1.r19$z.r124573.us.us.us.us.epil" ], [ %xtraiter1849, %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa" ]
  %3550 = shl nsw i32 %"convolved.s1.r19$z.r124575.us.us.us.us.epil", 2
  %3551 = add nsw i32 %3443, %3550
  %3552 = getelementptr inbounds i8, i8* %13, i32 %3551
  %3553 = bitcast i8* %3552 to i32*
  %3554 = load i32, i32* %3553, align 4, !tbaa !110
  %3555 = shl nsw i32 %"convolved.s1.r19$z.r124575.us.us.us.us.epil", 7
  %3556 = add nsw i32 %3445, %3555
  %3557 = getelementptr inbounds i8, i8* %5, i32 %3556
  %3558 = bitcast i8* %3557 to <32 x i32>*
  %3559 = load <32 x i32>, <32 x i32>* %3558, align 128, !tbaa !106
  %3560 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3554) #11
  %3561 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.46.us.us.us.us.epil, <32 x i32> %3559, <32 x i32> %3560) #11
  %3562 = add nuw nsw i32 %"convolved.s1.r19$z.r124575.us.us.us.us.epil", 1
  %epil.iter1850.sub = add i32 %epil.iter1850, -1
  %epil.iter1850.cmp.not = icmp eq i32 %epil.iter1850.sub, 0
  br i1 %epil.iter1850.cmp.not, label %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124573.us.us.us.us.epil", !llvm.loop !123

"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124573.us.us.us.us.epil", %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa"
  %.lcssa1821 = phi <32 x i32> [ %.lcssa1821.ph, %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us.unr-lcssa" ], [ %3561, %"for convolved.s1.r19$z.r124573.us.us.us.us.epil" ]
  %3563 = add nuw nsw i32 %"convolved.s1.r19$x572.us.us.us.us", 1
  %.not687.us.us.us.us = icmp eq i32 %3563, %9
  br i1 %.not687.us.us.us.us, label %"end for convolved.s1.r19$x571.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x570.us.us.us.us"

"end for convolved.s1.r19$x571.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124574.loopexit.us.us.us.us"
  %3564 = add nuw nsw i32 %"convolved.s1.r19$y569.us.us.us", 1
  %.not686.us.us.us = icmp eq i32 %3564, %11
  br i1 %.not686.us.us.us, label %"consume convolved576.us", label %"for convolved.s1.r19$y567.us.us.us"

"for convolved.s1.r19$y593.us.us.us":             ; preds = %after_bb584.us, %"end for convolved.s1.r19$x597.loopexit.split.us.us.us.us"
  %convolved673.sroa.0.52.us.us.us = phi <32 x i32> [ %.lcssa1822, %"end for convolved.s1.r19$x597.loopexit.split.us.us.us.us" ], [ %convolved673.sroa.0.51.us, %after_bb584.us ]
  %"convolved.s1.r19$y595.us.us.us" = phi i32 [ %3692, %"end for convolved.s1.r19$x597.loopexit.split.us.us.us.us" ], [ 0, %after_bb584.us ]
  %3565 = mul nsw i32 %"convolved.s1.r19$y595.us.us.us", %dilation_y
  %3566 = add nsw i32 %3565, %3164
  %3567 = mul nsw i32 %3566, %19
  %t1201.us.us.us = add nsw i32 %3160, %3567
  %3568 = mul nsw i32 %"convolved.s1.r19$y595.us.us.us", %12
  %t1202.us.us.us = add nsw i32 %3568, %3257
  br label %"for convolved.s1.r19$x596.us.us.us.us"

"for convolved.s1.r19$x596.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us", %"for convolved.s1.r19$y593.us.us.us"
  %convolved673.sroa.0.53.us.us.us.us = phi <32 x i32> [ %.lcssa1822, %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us" ], [ %convolved673.sroa.0.52.us.us.us, %"for convolved.s1.r19$y593.us.us.us" ]
  %"convolved.s1.r19$x598.us.us.us.us" = phi i32 [ %3691, %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y593.us.us.us" ]
  %3569 = mul nsw i32 %"convolved.s1.r19$x598.us.us.us.us", %dilation_x
  %t1203.s.us.us.us.us = add nsw i32 %3569, %3332
  %3570 = mul nsw i32 %t1203.s.us.us.us.us, %17
  %3571 = add nsw i32 %t1201.us.us.us, %3570
  %3572 = mul nsw i32 %"convolved.s1.r19$x598.us.us.us.us", %10
  %3573 = add nsw i32 %t1202.us.us.us, %3572
  br i1 %3155, label %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124599.us.us.us.us"

"for convolved.s1.r19$z.r124599.us.us.us.us":     ; preds = %"for convolved.s1.r19$x596.us.us.us.us", %"for convolved.s1.r19$z.r124599.us.us.us.us"
  %convolved673.sroa.0.55.us.us.us.us = phi <32 x i32> [ %3676, %"for convolved.s1.r19$z.r124599.us.us.us.us" ], [ %convolved673.sroa.0.53.us.us.us.us, %"for convolved.s1.r19$x596.us.us.us.us" ]
  %"convolved.s1.r19$z.r124601.us.us.us.us" = phi i32 [ %3677, %"for convolved.s1.r19$z.r124599.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x596.us.us.us.us" ]
  %niter1860 = phi i32 [ %niter1860.nsub.7, %"for convolved.s1.r19$z.r124599.us.us.us.us" ], [ %unroll_iter1859, %"for convolved.s1.r19$x596.us.us.us.us" ]
  %3574 = shl nsw i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 2
  %3575 = add nsw i32 %3571, %3574
  %3576 = getelementptr inbounds i8, i8* %13, i32 %3575
  %3577 = bitcast i8* %3576 to i32*
  %3578 = load i32, i32* %3577, align 4, !tbaa !110
  %3579 = shl nsw i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 7
  %3580 = add nsw i32 %3573, %3579
  %3581 = getelementptr inbounds i8, i8* %5, i32 %3580
  %3582 = bitcast i8* %3581 to <32 x i32>*
  %3583 = load <32 x i32>, <32 x i32>* %3582, align 128, !tbaa !106
  %3584 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3578) #11
  %3585 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.55.us.us.us.us, <32 x i32> %3583, <32 x i32> %3584) #11
  %3586 = or i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 1
  %3587 = shl nsw i32 %3586, 2
  %3588 = add nsw i32 %3571, %3587
  %3589 = getelementptr inbounds i8, i8* %13, i32 %3588
  %3590 = bitcast i8* %3589 to i32*
  %3591 = load i32, i32* %3590, align 4, !tbaa !110
  %3592 = shl nsw i32 %3586, 7
  %3593 = add nsw i32 %3573, %3592
  %3594 = getelementptr inbounds i8, i8* %5, i32 %3593
  %3595 = bitcast i8* %3594 to <32 x i32>*
  %3596 = load <32 x i32>, <32 x i32>* %3595, align 128, !tbaa !106
  %3597 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3591) #11
  %3598 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3585, <32 x i32> %3596, <32 x i32> %3597) #11
  %3599 = or i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 2
  %3600 = shl nsw i32 %3599, 2
  %3601 = add nsw i32 %3571, %3600
  %3602 = getelementptr inbounds i8, i8* %13, i32 %3601
  %3603 = bitcast i8* %3602 to i32*
  %3604 = load i32, i32* %3603, align 4, !tbaa !110
  %3605 = shl nsw i32 %3599, 7
  %3606 = add nsw i32 %3573, %3605
  %3607 = getelementptr inbounds i8, i8* %5, i32 %3606
  %3608 = bitcast i8* %3607 to <32 x i32>*
  %3609 = load <32 x i32>, <32 x i32>* %3608, align 128, !tbaa !106
  %3610 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3604) #11
  %3611 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3598, <32 x i32> %3609, <32 x i32> %3610) #11
  %3612 = or i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 3
  %3613 = shl nsw i32 %3612, 2
  %3614 = add nsw i32 %3571, %3613
  %3615 = getelementptr inbounds i8, i8* %13, i32 %3614
  %3616 = bitcast i8* %3615 to i32*
  %3617 = load i32, i32* %3616, align 4, !tbaa !110
  %3618 = shl nsw i32 %3612, 7
  %3619 = add nsw i32 %3573, %3618
  %3620 = getelementptr inbounds i8, i8* %5, i32 %3619
  %3621 = bitcast i8* %3620 to <32 x i32>*
  %3622 = load <32 x i32>, <32 x i32>* %3621, align 128, !tbaa !106
  %3623 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3617) #11
  %3624 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3611, <32 x i32> %3622, <32 x i32> %3623) #11
  %3625 = or i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 4
  %3626 = shl nsw i32 %3625, 2
  %3627 = add nsw i32 %3571, %3626
  %3628 = getelementptr inbounds i8, i8* %13, i32 %3627
  %3629 = bitcast i8* %3628 to i32*
  %3630 = load i32, i32* %3629, align 4, !tbaa !110
  %3631 = shl nsw i32 %3625, 7
  %3632 = add nsw i32 %3573, %3631
  %3633 = getelementptr inbounds i8, i8* %5, i32 %3632
  %3634 = bitcast i8* %3633 to <32 x i32>*
  %3635 = load <32 x i32>, <32 x i32>* %3634, align 128, !tbaa !106
  %3636 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3630) #11
  %3637 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3624, <32 x i32> %3635, <32 x i32> %3636) #11
  %3638 = or i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 5
  %3639 = shl nsw i32 %3638, 2
  %3640 = add nsw i32 %3571, %3639
  %3641 = getelementptr inbounds i8, i8* %13, i32 %3640
  %3642 = bitcast i8* %3641 to i32*
  %3643 = load i32, i32* %3642, align 4, !tbaa !110
  %3644 = shl nsw i32 %3638, 7
  %3645 = add nsw i32 %3573, %3644
  %3646 = getelementptr inbounds i8, i8* %5, i32 %3645
  %3647 = bitcast i8* %3646 to <32 x i32>*
  %3648 = load <32 x i32>, <32 x i32>* %3647, align 128, !tbaa !106
  %3649 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3643) #11
  %3650 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3637, <32 x i32> %3648, <32 x i32> %3649) #11
  %3651 = or i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 6
  %3652 = shl nsw i32 %3651, 2
  %3653 = add nsw i32 %3571, %3652
  %3654 = getelementptr inbounds i8, i8* %13, i32 %3653
  %3655 = bitcast i8* %3654 to i32*
  %3656 = load i32, i32* %3655, align 4, !tbaa !110
  %3657 = shl nsw i32 %3651, 7
  %3658 = add nsw i32 %3573, %3657
  %3659 = getelementptr inbounds i8, i8* %5, i32 %3658
  %3660 = bitcast i8* %3659 to <32 x i32>*
  %3661 = load <32 x i32>, <32 x i32>* %3660, align 128, !tbaa !106
  %3662 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3656) #11
  %3663 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3650, <32 x i32> %3661, <32 x i32> %3662) #11
  %3664 = or i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 7
  %3665 = shl nsw i32 %3664, 2
  %3666 = add nsw i32 %3571, %3665
  %3667 = getelementptr inbounds i8, i8* %13, i32 %3666
  %3668 = bitcast i8* %3667 to i32*
  %3669 = load i32, i32* %3668, align 4, !tbaa !110
  %3670 = shl nsw i32 %3664, 7
  %3671 = add nsw i32 %3573, %3670
  %3672 = getelementptr inbounds i8, i8* %5, i32 %3671
  %3673 = bitcast i8* %3672 to <32 x i32>*
  %3674 = load <32 x i32>, <32 x i32>* %3673, align 128, !tbaa !106
  %3675 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3669) #11
  %3676 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3663, <32 x i32> %3674, <32 x i32> %3675) #11
  %3677 = add nuw nsw i32 %"convolved.s1.r19$z.r124601.us.us.us.us", 8
  %niter1860.nsub.7 = add i32 %niter1860, -8
  %niter1860.ncmp.7 = icmp eq i32 %niter1860.nsub.7, 0
  br i1 %niter1860.ncmp.7, label %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124599.us.us.us.us"

"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124599.us.us.us.us", %"for convolved.s1.r19$x596.us.us.us.us"
  %.lcssa1822.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x596.us.us.us.us" ], [ %3676, %"for convolved.s1.r19$z.r124599.us.us.us.us" ]
  %convolved673.sroa.0.55.us.us.us.us.unr = phi <32 x i32> [ %convolved673.sroa.0.53.us.us.us.us, %"for convolved.s1.r19$x596.us.us.us.us" ], [ %3676, %"for convolved.s1.r19$z.r124599.us.us.us.us" ]
  %"convolved.s1.r19$z.r124601.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x596.us.us.us.us" ], [ %3677, %"for convolved.s1.r19$z.r124599.us.us.us.us" ]
  br i1 %lcmp.mod1857.not, label %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124599.us.us.us.us.epil"

"for convolved.s1.r19$z.r124599.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124599.us.us.us.us.epil"
  %convolved673.sroa.0.55.us.us.us.us.epil = phi <32 x i32> [ %3689, %"for convolved.s1.r19$z.r124599.us.us.us.us.epil" ], [ %convolved673.sroa.0.55.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa" ]
  %"convolved.s1.r19$z.r124601.us.us.us.us.epil" = phi i32 [ %3690, %"for convolved.s1.r19$z.r124599.us.us.us.us.epil" ], [ %"convolved.s1.r19$z.r124601.us.us.us.us.unr", %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1856 = phi i32 [ %epil.iter1856.sub, %"for convolved.s1.r19$z.r124599.us.us.us.us.epil" ], [ %xtraiter1855, %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa" ]
  %3678 = shl nsw i32 %"convolved.s1.r19$z.r124601.us.us.us.us.epil", 2
  %3679 = add nsw i32 %3571, %3678
  %3680 = getelementptr inbounds i8, i8* %13, i32 %3679
  %3681 = bitcast i8* %3680 to i32*
  %3682 = load i32, i32* %3681, align 4, !tbaa !110
  %3683 = shl nsw i32 %"convolved.s1.r19$z.r124601.us.us.us.us.epil", 7
  %3684 = add nsw i32 %3573, %3683
  %3685 = getelementptr inbounds i8, i8* %5, i32 %3684
  %3686 = bitcast i8* %3685 to <32 x i32>*
  %3687 = load <32 x i32>, <32 x i32>* %3686, align 128, !tbaa !106
  %3688 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3682) #11
  %3689 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved673.sroa.0.55.us.us.us.us.epil, <32 x i32> %3687, <32 x i32> %3688) #11
  %3690 = add nuw nsw i32 %"convolved.s1.r19$z.r124601.us.us.us.us.epil", 1
  %epil.iter1856.sub = add i32 %epil.iter1856, -1
  %epil.iter1856.cmp.not = icmp eq i32 %epil.iter1856.sub, 0
  br i1 %epil.iter1856.cmp.not, label %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124599.us.us.us.us.epil", !llvm.loop !124

"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124599.us.us.us.us.epil", %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa"
  %.lcssa1822 = phi <32 x i32> [ %.lcssa1822.ph, %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us.unr-lcssa" ], [ %3689, %"for convolved.s1.r19$z.r124599.us.us.us.us.epil" ]
  %3691 = add nuw nsw i32 %"convolved.s1.r19$x598.us.us.us.us", 1
  %.not683.us.us.us.us = icmp eq i32 %3691, %9
  br i1 %.not683.us.us.us.us, label %"end for convolved.s1.r19$x597.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x596.us.us.us.us"

"end for convolved.s1.r19$x597.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124600.loopexit.us.us.us.us"
  %3692 = add nuw nsw i32 %"convolved.s1.r19$y595.us.us.us", 1
  %.not682.us.us.us = icmp eq i32 %3692, %11
  br i1 %.not682.us.us.us, label %"consume convolved602.us", label %"for convolved.s1.r19$y593.us.us.us"

"end for output.s0.y.rebased528":                 ; preds = %"end for output.s0.x.xo531.loopexit.us", %"for output.s0.y.rebased527.preheader", %"for output.s0.b.rebased524"
  %sum_input533672.sroa.0.23 = phi <32 x i32> [ %sum_input533672.sroa.0.21, %"for output.s0.b.rebased524" ], [ %sum_input533672.sroa.0.21, %"for output.s0.y.rebased527.preheader" ], [ %sum_input533672.sroa.0.34.us, %"end for output.s0.x.xo531.loopexit.us" ]
  %convolved673.sroa.0.37 = phi <32 x i32> [ %convolved673.sroa.0.35, %"for output.s0.b.rebased524" ], [ %convolved673.sroa.0.35, %"for output.s0.y.rebased527.preheader" ], [ %convolved673.sroa.0.50.us, %"end for output.s0.x.xo531.loopexit.us" ]
  %3693 = add nuw nsw i32 %output.s0.b.rebased526, 1
  %.not676 = icmp eq i32 %3693, %21
  br i1 %.not676, label %after_bb3, label %"for output.s0.b.rebased524"
}

; Function Attrs: nounwind
define i32 @conv_nn_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = load i8*, i8** %39, align 4
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr i8*, i8** %0, i32 12
  %43 = load i8*, i8** %42, align 4
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr i8*, i8** %0, i32 13
  %46 = load i8*, i8** %45, align 4
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr i8*, i8** %0, i32 14
  %49 = bitcast i8** %48 to %struct.halide_buffer_t**
  %50 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %49, align 4
  %51 = tail call i32 @conv_nn_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i8 %41, i8 %44, i8 %47, %struct.halide_buffer_t* %50) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata_storage
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i8.p0v32i8(<32 x i8>, <32 x i8>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.0(<128 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %1 = bitcast <128 x i8> %arg to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %0, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.1(<32 x i32> %arg, <1 x i32> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg.2, <32 x i32> %arg)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1, <32 x i32> %2)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.2(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.3(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.4(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.5(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.6(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.7(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.8(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.9(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.10(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.11(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.12(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.13(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.14(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.15(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.16(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.17(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.18(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.19(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.20(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.21(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.22(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.23(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.24(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.25(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.26(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.27(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.28(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.29(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.30(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.31(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.32(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.33(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.34(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.35(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.36(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.37(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.38(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.39(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.40(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.41(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.42(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.43(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.44(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.45(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.46(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.47(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.48(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.49(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth4.50(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.7, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %6, <32 x i32> %arg.6)
  %8 = extractelement <1 x i32> %arg.2, i32 0
  %9 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %7, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.4, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.3)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %9)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.13, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %23, <32 x i32> %arg.11, <32 x i32> %3)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %22)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %25, <32 x i32> %arg.12)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %9)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %26, <32 x i32> %27)
  %29 = extractelement <1 x i32> %arg.10, i32 0
  %30 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %29)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %31, <32 x i32> %arg.8, <32 x i32> %3)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %30)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %33, <32 x i32> %arg.9)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %34, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %43, <32 x i32> %44)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth4.51(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.7, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %6, <32 x i32> %arg.6)
  %8 = extractelement <1 x i32> %arg.2, i32 0
  %9 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %7, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.4, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.3)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %9)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.13, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %23, <32 x i32> %arg.11, <32 x i32> %3)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %22)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %25, <32 x i32> %arg.12)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %9)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %26, <32 x i32> %27)
  %29 = extractelement <1 x i32> %arg.10, i32 0
  %30 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %29)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %31, <32 x i32> %arg.8, <32 x i32> %3)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %30)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %33, <32 x i32> %arg.9)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %34, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %43, <32 x i32> %44)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth4.52(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.7, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %6, <32 x i32> %arg.6)
  %8 = extractelement <1 x i32> %arg.2, i32 0
  %9 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %7, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.4, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.3)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %9)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.13, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %23, <32 x i32> %arg.11, <32 x i32> %3)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %22)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %25, <32 x i32> %arg.12)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %9)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %26, <32 x i32> %27)
  %29 = extractelement <1 x i32> %arg.10, i32 0
  %30 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %29)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %31, <32 x i32> %arg.8, <32 x i32> %3)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %30)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %33, <32 x i32> %arg.9)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %34, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %43, <32 x i32> %44)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth4.53(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.7, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %6, <32 x i32> %arg.6)
  %8 = extractelement <1 x i32> %arg.2, i32 0
  %9 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %7, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.4, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.3)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %9)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.13, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %23, <32 x i32> %arg.11, <32 x i32> %3)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %22)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %25, <32 x i32> %arg.12)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %9)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %26, <32 x i32> %27)
  %29 = extractelement <1 x i32> %arg.10, i32 0
  %30 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %29)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %31, <32 x i32> %arg.8, <32 x i32> %3)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %30)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %33, <32 x i32> %arg.9)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %34, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %43, <32 x i32> %44)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth4.54(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.7, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %6, <32 x i32> %arg.6)
  %8 = extractelement <1 x i32> %arg.2, i32 0
  %9 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %7, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.4, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.3)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %9)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.13, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %23, <32 x i32> %arg.11, <32 x i32> %3)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %22)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %25, <32 x i32> %arg.12)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %9)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %26, <32 x i32> %27)
  %29 = extractelement <1 x i32> %arg.10, i32 0
  %30 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %29)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %31, <32 x i32> %arg.8, <32 x i32> %3)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %30)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %33, <32 x i32> %arg.9)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %34, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %43, <32 x i32> %44)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth4.55(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.7, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %6, <32 x i32> %arg.6)
  %8 = extractelement <1 x i32> %arg.2, i32 0
  %9 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %7, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.4, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.3)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %9)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.13, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %23, <32 x i32> %arg.11, <32 x i32> %3)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %22)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %25, <32 x i32> %arg.12)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %9)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %26, <32 x i32> %27)
  %29 = extractelement <1 x i32> %arg.10, i32 0
  %30 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %29)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %31, <32 x i32> %arg.8, <32 x i32> %3)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %30)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %33, <32 x i32> %arg.9)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %34, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %43, <32 x i32> %44)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.56(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.57(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.58(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.59(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.60(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.61(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.62(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.63(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.64(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.65(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.66(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.67(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.68(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.69(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.70(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.71(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.72(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.73(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.74(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.75(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.76(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.77(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.78(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.79(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.80(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.81(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.82(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.83(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.84(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.85(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.86(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.87(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.88(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.89(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.90(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.91(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.92(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.93(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.94(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.95(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.96(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.97(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.98(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.99(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.100(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.101(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.102(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth4.103(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <64 x i16> %arg.8) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.7, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg.5, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.6)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %1)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %20, <32 x i32> %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %22, <32 x i32> zeroinitializer)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %23, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %25 = bitcast <32 x i32> %24 to <64 x i16>
  ret <64 x i16> %25
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.104(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.105(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.106(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.107(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.108(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.109(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.110(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.111(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.112(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.113(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.114(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.115(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.116(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.117(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.118(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.119(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.120(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.121(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.122(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.123(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.124(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.125(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.126(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.127(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.128(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.129(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.130(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.131(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.132(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.133(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.134(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.135(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth4.136(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.7, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %6, <32 x i32> %arg.6)
  %8 = extractelement <1 x i32> %arg.2, i32 0
  %9 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %7, <32 x i32> %10)
  %12 = extractelement <1 x i32> %arg.4, i32 0
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %14, <32 x i32> %arg, <32 x i32> %3)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %13)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %16, <32 x i32> %arg.3)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %15, <32 x i32> %9)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %17, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.13, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %23, <32 x i32> %arg.11, <32 x i32> %3)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %22)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %25, <32 x i32> %arg.12)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %24, <32 x i32> %9)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %26, <32 x i32> %27)
  %29 = extractelement <1 x i32> %arg.10, i32 0
  %30 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %29)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %31, <32 x i32> %arg.8, <32 x i32> %3)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %30)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %33, <32 x i32> %arg.9)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %32, <32 x i32> %9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %34, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %43, <32 x i32> %44)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.137(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.138(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.139(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.140(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.141(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.142(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %11, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %12)
  ret <32 x i32> %13
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth4.143(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <32 x i32> %arg.4, <1 x i32> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.5, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.4, <32 x i32> %3)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %9, <32 x i32> %arg.4, <32 x i32> %3)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %10, <32 x i32> %8)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %11, <32 x i32> %arg.3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %13, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %14)
  ret <32 x i32> %15
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1 immarg) #3

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!"branch_weights", i32 0, i32 1073741824}
!96 = !{!"branch_weights", i32 1073741824, i32 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"bias", !99, i64 0}
!99 = !{!"Halide buffer"}
!100 = !{!101, !101, i64 0}
!101 = !{!"bias_im_global_wrapper$0", !99, i64 0}
!102 = distinct !{!102, !32}
!103 = !{!"branch_weights", i32 -2147483648, i32 0}
!104 = !{!105, !105, i64 0}
!105 = !{!"offset_c", !99, i64 0}
!106 = !{!107, !107, i64 0}
!107 = !{!"filter", !99, i64 0}
!108 = distinct !{!108, !32}
!109 = distinct !{!109, !32}
!110 = !{!111, !111, i64 0}
!111 = !{!"input", !99, i64 0}
!112 = distinct !{!112, !32}
!113 = !{!114, !114, i64 0}
!114 = !{!"output", !99, i64 0}
!115 = distinct !{!115, !32}
!116 = distinct !{!116, !32}
!117 = distinct !{!117, !32}
!118 = distinct !{!118, !32}
!119 = distinct !{!119, !32}
!120 = distinct !{!120, !32}
!121 = !{!"branch_weights", i32 -2147483648, i32 -2147483648}
!122 = distinct !{!122, !32}
!123 = distinct !{!123, !32}
!124 = distinct !{!124, !32}
