; ModuleID = 'blur5x5'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur5x5\00", align 32
@blur5x5_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur5x5(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2375 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2376 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2377 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2779 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2779, align 4, !tbaa !181
  %extent.i2781 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2781, align 4, !tbaa !178
  %stride.i2783 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2783, align 4, !tbaa !182
  %host.i2784 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2785 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2785, align 8, !tbaa !176
  %min.i2786 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2786, align 4, !tbaa !181
  %extent.i2788 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2788, align 4, !tbaa !178
  %min.i2792 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2792, align 4, !tbaa !181
  %extent.i2794 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2794, align 4, !tbaa !178
  %stride.i2796 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2796, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1634 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1635 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1637 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 35
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1635
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1635, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1645 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 3
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 35
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 4
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1635
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1645
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1634, %t1635
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1634, 27
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1635
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -28
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %57 = icmp sgt i32 %b19, %a17
  %58 = select i1 %57, i32 %a17, i32 %b19
  %59 = ashr i32 %58, 5
  %a16 = add nsw i32 %59, 1
  %.not2533 = icmp slt i32 %59, %b18
  %t1624 = select i1 %.not2533, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %60 = icmp sgt i32 %a21, %b23
  %t1626 = select i1 %60, i32 %a21, i32 %b23
  %61 = add nsw i32 %6, 31
  %t1612 = ashr i32 %61, 5
  %62 = icmp sgt i32 %6, 0
  br i1 %62, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %63 = bitcast i8** %host.i2784 to i16**
  %64 = load i16*, i16** %63, align 8, !tbaa !172
  %65 = bitcast i8** %host.i to i16**
  %66 = load i16*, i16** %65, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2690 = icmp slt i32 %48, 0
  %67 = select i1 %.inv2690, i32 0, i32 %a24
  %t2290 = zext i32 %67 to i64
  %68 = mul nuw nsw i64 %t2290, 72
  %69 = or i64 %68, 6
  %70 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %71 = sub nsw i32 %11, %5
  %72 = sub i32 %5, %11
  %t1652 = add nsw i32 %t1645, %3
  %t1650 = add nsw i32 %t1635, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 4
  %73 = add nsw i32 %t1634, -1
  %74 = insertelement <32 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <32 x i32> %74, <32 x i32> undef, <8 x i32> zeroinitializer
  %76 = insertelement <32 x i32> undef, i32 %9, i32 0
  %77 = shufflevector <32 x i32> %76, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1661 = sub nsw i32 %20, %t1624
  %78 = icmp sgt i32 %b18, 0
  %79 = sext i32 %11 to i64
  %80 = sext i32 %5 to i64
  %81 = sub nsw i64 %79, %80
  %82 = sext i32 %a24 to i64
  %83 = sext i32 %t1652 to i64
  %t1667 = sub nsw i32 %t1624, %b18
  %84 = icmp sgt i32 %t1667, 0
  %85 = icmp sgt i32 %t1661, 0
  %86 = sub nsw i32 %5, %a40
  %87 = sext i32 %a40 to i64
  %88 = sub nsw i64 %87, %80
  %a73 = sub nsw i32 %4, %t1645
  %89 = icmp sgt i32 %a73, 0
  %90 = select i1 %89, i32 %a73, i32 0
  %t2291 = zext i32 %90 to i64
  %91 = shl nuw nsw i64 %t2291, 4
  %92 = or i64 %91, 6
  %93 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t682 = sub i32 %t1635, %t1645
  %94 = sext i32 %t682 to i64
  %95 = zext i32 %4 to i64
  %96 = sext i32 %t1645 to i64
  %97 = sub nsw i64 %95, %96
  %98 = sext i32 %t1635 to i64
  %99 = sub nsw i64 %98, %96
  %t1680 = sub nsw i32 %t1626, %b23
  %100 = icmp sgt i32 %t1680, 0
  %101 = sext i32 %b23 to i64
  %t1683 = sub nsw i32 %a3, %t1626
  %102 = icmp sgt i32 %t1683, 0
  %t688 = add i32 %t682, %a24
  %103 = sext i32 %t688 to i64
  %t1687 = sub nsw i32 %a24, %t1645
  %104 = shl nsw i32 %a24, 1
  %t694 = add i32 %t682, %104
  %105 = sext i32 %t694 to i64
  %t1693 = sub nsw i32 %104, %t1645
  %106 = shl nsw i32 %a24, 2
  %a24.neg = xor i32 %48, -1
  %107 = add i32 %t682, %a24.neg
  %t700 = add i32 %107, %106
  %108 = sext i32 %t700 to i64
  %109 = sub nsw i32 %106, %t1645
  %t1699 = sub nsw i32 %109, %a24
  %110 = add nsw i32 %106, %t1635
  %t706 = sub i32 %110, %t1645
  %111 = sext i32 %t706 to i64
  %112 = sext i32 %a73 to i64
  %113 = sext i32 %7 to i64
  %114 = sext i32 %t1637 to i64
  %115 = sub nsw i64 %98, %114
  %t1709 = sub nsw i32 0, %t1637
  %116 = sext i32 %t1709 to i64
  %t722 = add nsw i32 %t706, %a24
  %117 = sext i32 %t722 to i64
  %t1721 = add nsw i32 %109, %a24
  %118 = mul nsw i32 %a24, 6
  %t738 = add i32 %t682, %118
  %119 = sext i32 %t738 to i64
  %t1737 = sub nsw i32 %118, %t1645
  %120 = mul nsw i32 %a24, 7
  %t754 = add i32 %t682, %120
  %121 = sext i32 %t754 to i64
  %t1753 = sub nsw i32 %120, %t1645
  %122 = shl nsw i32 %a24, 3
  %t770 = add i32 %t682, %122
  %123 = sext i32 %t770 to i64
  %t1769 = sub nsw i32 %122, %t1645
  %124 = mul nsw i32 %a24, 9
  %t786 = add i32 %t682, %124
  %125 = sext i32 %t786 to i64
  %t1785 = sub nsw i32 %124, %t1645
  %126 = mul nsw i32 %a24, 10
  %t802 = add i32 %t682, %126
  %127 = sext i32 %t802 to i64
  %t1801 = sub nsw i32 %126, %t1645
  %128 = mul nsw i32 %a24, 11
  %t818 = add i32 %t682, %128
  %129 = sext i32 %t818 to i64
  %t1817 = sub nsw i32 %128, %t1645
  %130 = mul nsw i32 %a24, 12
  %t834 = add i32 %t682, %130
  %131 = sext i32 %t834 to i64
  %t1833 = sub nsw i32 %130, %t1645
  %132 = mul nsw i32 %a24, 13
  %t850 = add i32 %t682, %132
  %133 = sext i32 %t850 to i64
  %t1849 = sub nsw i32 %132, %t1645
  %134 = mul nsw i32 %a24, 14
  %t866 = add i32 %t682, %134
  %135 = sext i32 %t866 to i64
  %t1865 = sub nsw i32 %134, %t1645
  %136 = mul nsw i32 %a24, 15
  %t882 = add i32 %t682, %136
  %137 = sext i32 %t882 to i64
  %t1881 = sub nsw i32 %136, %t1645
  %138 = shl nsw i32 %a24, 4
  %t898 = add i32 %t682, %138
  %139 = sext i32 %t898 to i64
  %t1897 = sub nsw i32 %138, %t1645
  %140 = mul nsw i32 %a24, 17
  %t914 = add i32 %t682, %140
  %141 = sext i32 %t914 to i64
  %t1913 = sub nsw i32 %140, %t1645
  %142 = mul nsw i32 %a24, 18
  %t930 = add i32 %t682, %142
  %143 = sext i32 %t930 to i64
  %t1929 = sub nsw i32 %142, %t1645
  %144 = mul nsw i32 %a24, 19
  %t946 = add i32 %t682, %144
  %145 = sext i32 %t946 to i64
  %t1945 = sub nsw i32 %144, %t1645
  %146 = mul nsw i32 %a24, 20
  %t962 = add i32 %t682, %146
  %147 = sext i32 %t962 to i64
  %t1961 = sub nsw i32 %146, %t1645
  %148 = mul nsw i32 %a24, 21
  %t978 = add i32 %t682, %148
  %149 = sext i32 %t978 to i64
  %t1977 = sub nsw i32 %148, %t1645
  %150 = mul nsw i32 %a24, 22
  %t994 = add i32 %t682, %150
  %151 = sext i32 %t994 to i64
  %t1993 = sub nsw i32 %150, %t1645
  %152 = mul nsw i32 %a24, 23
  %t1010 = add i32 %t682, %152
  %153 = sext i32 %t1010 to i64
  %t2009 = sub nsw i32 %152, %t1645
  %154 = mul nsw i32 %a24, 24
  %t1026 = add i32 %t682, %154
  %155 = sext i32 %t1026 to i64
  %t2025 = sub nsw i32 %154, %t1645
  %156 = mul nsw i32 %a24, 25
  %t1042 = add i32 %t682, %156
  %157 = sext i32 %t1042 to i64
  %t2041 = sub nsw i32 %156, %t1645
  %158 = mul nsw i32 %a24, 26
  %t1058 = add i32 %t682, %158
  %159 = sext i32 %t1058 to i64
  %t2057 = sub nsw i32 %158, %t1645
  %160 = mul nsw i32 %a24, 27
  %t1074 = add i32 %t682, %160
  %161 = sext i32 %t1074 to i64
  %t2073 = sub nsw i32 %160, %t1645
  %162 = mul nsw i32 %a24, 28
  %t1090 = add i32 %t682, %162
  %163 = sext i32 %t1090 to i64
  %t2089 = sub nsw i32 %162, %t1645
  %164 = mul nsw i32 %a24, 29
  %t1106 = add i32 %t682, %164
  %165 = sext i32 %t1106 to i64
  %t2105 = sub nsw i32 %164, %t1645
  %166 = mul nsw i32 %a24, 30
  %t1122 = add i32 %t682, %166
  %167 = sext i32 %t1122 to i64
  %t2121 = sub nsw i32 %166, %t1645
  %168 = mul nsw i32 %a24, 31
  %t1138 = add i32 %t682, %168
  %169 = sext i32 %t1138 to i64
  %t2137 = sub nsw i32 %168, %t1645
  %170 = shl nsw i32 %a24, 5
  %t1154 = add i32 %t682, %170
  %171 = sext i32 %t1154 to i64
  %t2153 = sub nsw i32 %170, %t1645
  %172 = mul nsw i32 %a24, 33
  %t1170 = add i32 %t682, %172
  %173 = sext i32 %t1170 to i64
  %t2169 = sub nsw i32 %172, %t1645
  %174 = mul nsw i32 %a24, 34
  %t1186 = add i32 %t682, %174
  %175 = sext i32 %t1186 to i64
  %t2185 = sub nsw i32 %174, %t1645
  %176 = mul nsw i32 %a24, 35
  %t1202 = add i32 %t682, %176
  %177 = sext i32 %t1202 to i64
  %t2201 = sub nsw i32 %176, %t1645
  %178 = sext i32 %b36 to i64
  %179 = zext i32 %b18 to i64
  %180 = sext i32 %t1650 to i64
  %181 = zext i32 %t1667 to i64
  %182 = sext i32 %13 to i64
  %183 = sext i32 %9 to i64
  %184 = zext i32 %t1680 to i64
  %185 = add nsw i64 %181, -1
  %xtraiter = and i64 %181, 3
  %186 = icmp ult i64 %185, 3
  %unroll_iter = and i64 %181, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased787"
  %blur_y.s0.y.y = phi i32 [ %14528, %"end for blur_y.s0.x.x.rebased787" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %187 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %187, i32 %a22, i32 %b24
  %188 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %188, %69
  %189 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %189, null
  %190 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %190, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %189) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %191 = phi i64 [ %.pre, %if.then3.i ], [ %190, %if.then.i ]
  %add.i = add i64 %191, %69
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %69) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %69, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %192 = phi i8* [ %storemerge.i, %if.end11.i ], [ %189, %"for blur_y.s0.y.y" ]
  %193 = bitcast i8* %192 to i16*
  %.not2691 = icmp eq i8* %192, null
  br i1 %.not2691, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased787"
  %194 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %195 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.02901 = phi i8* [ null, %entry ], [ %195, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %194, %"end for blur_y.s0.y.y.loopexit" ]
  %196 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2799 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 0, i32 0
  %197 = load i32, i32* %min.i2799, align 4, !tbaa !181
  %extent.i2801 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 0, i32 1
  %198 = load i32, i32* %extent.i2801, align 4, !tbaa !178
  %min.i2805 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 0
  %199 = load i32, i32* %min.i2805, align 4, !tbaa !181
  %extent.i2807 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 1
  %200 = load i32, i32* %extent.i2807, align 4, !tbaa !178
  %stride.i2809 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 2
  %201 = load i32, i32* %stride.i2809, align 4, !tbaa !182
  %202 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2785, align 8, !tbaa !176
  %min.i2812 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 0, i32 0
  %203 = load i32, i32* %min.i2812, align 4, !tbaa !181
  %extent.i2814 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 0, i32 1
  %204 = load i32, i32* %extent.i2814, align 4, !tbaa !178
  %min.i2818 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 0
  %205 = load i32, i32* %min.i2818, align 4, !tbaa !181
  %extent.i2820 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 1
  %206 = load i32, i32* %extent.i2820, align 4, !tbaa !178
  %stride.i2822 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 2
  %207 = load i32, i32* %stride.i2822, align 4, !tbaa !182
  %t1634807 = add nsw i32 %204, %203
  %208 = icmp slt i32 %198, 32
  %t1635808 = select i1 %208, i32 %198, i32 32
  %209 = icmp sgt i32 %206, 0
  %210 = select i1 %209, i32 %206, i32 0
  %t1636 = add nsw i32 %210, %205
  %t1637809 = mul nsw i32 %201, %199
  %211 = add nsw i32 %198, 31
  %212 = icmp sgt i32 %198, 32
  %213 = select i1 %212, i32 %198, i32 32
  %214 = add nuw nsw i32 %213, 35
  %215 = lshr i32 %214, 5
  %a331 = ashr i32 %211, 5
  %216 = icmp slt i32 %a331, 1
  %t1641 = select i1 %216, i32 %a331, i32 1
  %217 = sub i32 63, %197
  %218 = sub i32 %217, %t1635808
  %219 = add i32 %218, %203
  %a333 = ashr i32 %219, 5
  %220 = icmp sgt i32 %a333, 0
  %a332 = select i1 %220, i32 %a333, i32 0
  %221 = icmp sgt i32 %215, %a332
  %t1642 = select i1 %221, i32 %a332, i32 %215
  %t1644 = add nsw i32 %t1635808, -32
  %222 = icmp slt i32 %198, 0
  %223 = select i1 %222, i32 %198, i32 0
  %a337 = select i1 %212, i32 %223, i32 %t1644
  %224 = icmp sgt i32 %t1644, %a337
  %t1645811 = select i1 %224, i32 %a337, i32 %t1644
  %t1647 = add nsw i32 %198, -32
  %225 = add i32 %198, -1
  %226 = and i32 %225, -32
  %a341 = select i1 %212, i32 %226, i32 %t1647
  %227 = icmp sgt i32 %a341, %t1647
  %228 = select i1 %227, i32 %a341, i32 %t1647
  %229 = icmp sgt i32 %198, 0
  %230 = select i1 %229, i32 %198, i32 0
  %a342 = select i1 %212, i32 %230, i32 32
  %231 = icmp sgt i32 %a342, 32
  %232 = select i1 %231, i32 %a342, i32 32
  %233 = add nsw i32 %232, -1
  %234 = and i32 %233, -32
  %235 = add nsw i32 %234, %228
  %a346 = add nsw i32 %235, 32
  %236 = icmp sgt i32 %198, %a346
  %a345 = select i1 %236, i32 %a346, i32 %198
  %237 = icmp sgt i32 %235, %t1647
  %238 = select i1 %237, i32 %t1647, i32 %235
  %b347 = add nsw i32 %238, 35
  %239 = icmp sgt i32 %a345, %b347
  %a344 = select i1 %239, i32 %a345, i32 %b347
  %a354 = add nsw i32 %198, 4
  %240 = add nuw nsw i32 %213, 3
  %241 = and i32 %240, 2147483616
  %b356 = add nsw i32 %241, %t1635808
  %242 = icmp sgt i32 %b356, %a354
  %243 = select i1 %242, i32 %a354, i32 %b356
  %b346 = add nsw i32 %243, -1
  %.not2534 = icmp slt i32 %a344, %243
  %244 = select i1 %.not2534, i32 %b346, i32 %a344
  %245 = sub nsw i32 %244, %t1645811
  %a377 = add nsw i32 %245, 1
  %246 = sub nsw i32 %t1634807, %t1635808
  %a362 = sub i32 %246, %197
  %a365 = add nsw i32 %t1634807, 27
  %b367 = add nsw i32 %198, %197
  %247 = icmp sgt i32 %b367, %a365
  %248 = select i1 %247, i32 %a365, i32 %b367
  %249 = sub i32 32, %197
  %250 = sub i32 %249, %t1635808
  %a364 = add i32 %250, %248
  %251 = icmp sgt i32 %213, %a364
  %252 = select i1 %251, i32 %a364, i32 %213
  %b364 = add nsw i32 %252, -28
  %253 = icmp sgt i32 %b364, %a362
  %a361 = select i1 %253, i32 %a362, i32 %b364
  %254 = icmp sgt i32 %240, %a361
  %255 = select i1 %254, i32 %a361, i32 %240
  %256 = ashr i32 %255, 5
  %a373 = ashr i32 %198, 5
  %257 = icmp sgt i32 %a373, %t1641
  %t1626814 = select i1 %257, i32 %a373, i32 %t1641
  %258 = add nsw i32 %200, 31
  %t1612815 = ashr i32 %258, 5
  %259 = icmp sgt i32 %200, 0
  br i1 %259, label %"for blur_y.s0.y.y816.preheader", label %"end for blur_y.s0.y.y817", !prof !386

"for blur_y.s0.y.y816.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %a377.neg = xor i32 %245, -1
  %260 = bitcast i8** %host.i2784 to i16**
  %261 = load i16*, i16** %260, align 8, !tbaa !172
  %262 = bitcast i8** %host.i to i16**
  %263 = load i16*, i16** %262, align 8, !tbaa !172
  %.not2535 = icmp slt i32 %256, %t1642
  %a360 = add nsw i32 %256, 1
  %b377 = add nsw i32 %200, -32
  %.inv = icmp slt i32 %245, 0
  %264 = select i1 %.inv, i32 0, i32 %a377
  %t2292 = zext i32 %264 to i64
  %265 = mul nuw nsw i64 %t2292, 72
  %266 = or i64 %265, 6
  %267 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b385 = add nsw i32 %206, %205
  %268 = sub nsw i32 %205, %199
  %269 = sub i32 %199, %205
  %b398 = add nsw i32 %206, -1
  %270 = add i32 %t1645811, %197
  %271 = add nsw i32 %t1635808, %197
  %b419 = add nsw i32 %b367, 4
  %272 = add nsw i32 %t1634807, -1
  %273 = insertelement <32 x i32> undef, i32 %272, i32 0
  %274 = shufflevector <32 x i32> %273, <32 x i32> undef, <8 x i32> zeroinitializer
  %275 = insertelement <32 x i32> undef, i32 %203, i32 0
  %276 = shufflevector <32 x i32> %275, <32 x i32> undef, <8 x i32> zeroinitializer
  %277 = select i1 %.not2535, i32 %t1642, i32 %a360
  %t1661841 = sub nsw i32 %215, %277
  %278 = icmp sgt i32 %t1642, 0
  %279 = sext i32 %205 to i64
  %280 = sext i32 %199 to i64
  %281 = sub nsw i64 %279, %280
  %282 = sext i32 %a377 to i64
  %283 = sext i32 %270 to i64
  %t1667854 = sub nsw i32 %277, %t1642
  %284 = icmp sgt i32 %t1667854, 0
  %285 = icmp sgt i32 %t1661841, 0
  %286 = sub nsw i32 %199, %t1636
  %287 = sext i32 %t1636 to i64
  %288 = sub nsw i64 %287, %280
  %a551 = sub nsw i32 %198, %t1645811
  %289 = icmp sgt i32 %a551, 0
  %290 = select i1 %289, i32 %a551, i32 0
  %t2293 = zext i32 %290 to i64
  %291 = shl nuw nsw i64 %t2293, 4
  %292 = or i64 %291, 6
  %293 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %a554 = select i1 %212, i32 0, i32 %t1644
  %294 = icmp sgt i32 %t1644, %a554
  %295 = select i1 %294, i32 %a554, i32 %t1644
  %t682885 = sub i32 %t1635808, %295
  %296 = sext i32 %t682885 to i64
  %297 = zext i32 %198 to i64
  %298 = sext i32 %t1645811 to i64
  %299 = sub nsw i64 %297, %298
  %300 = sext i32 %t1635808 to i64
  %301 = sub nsw i64 %300, %298
  %t1680887 = sub nsw i32 %t1626814, %t1641
  %302 = icmp sgt i32 %t1680887, 0
  %303 = sext i32 %t1641 to i64
  %t1683898 = sub nsw i32 %a331, %t1626814
  %304 = icmp sgt i32 %t1683898, 0
  %305 = select i1 %212, i32 %226, i32 0
  %306 = add nsw i32 %228, %305
  %a615 = add nsw i32 %306, 32
  %307 = icmp sgt i32 %198, %a615
  %a614 = select i1 %307, i32 %a615, i32 %198
  %308 = icmp sgt i32 %306, %t1647
  %309 = select i1 %308, i32 %t1647, i32 %306
  %b616 = add nsw i32 %309, 35
  %310 = icmp sgt i32 %a614, %b616
  %a613 = select i1 %310, i32 %a614, i32 %b616
  %.not2677 = icmp slt i32 %a613, %243
  %311 = select i1 %.not2677, i32 %b346, i32 %a613
  %factor = mul i32 %295, -2
  %312 = add nsw i32 %t1635808, 1
  %313 = add i32 %312, %factor
  %t688913 = add i32 %313, %311
  %314 = sext i32 %t688913 to i64
  %315 = sub i32 %a377, %t1645811
  %316 = sub nsw i32 %311, %295
  %317 = shl i32 %316, 1
  %318 = add nsw i32 %t1635808, 2
  %319 = sub i32 %318, %295
  %t694943 = add i32 %319, %317
  %320 = sext i32 %t694943 to i64
  %321 = shl nsw i32 %a377, 1
  %322 = sub i32 %321, %t1645811
  %323 = shl i32 %316, 2
  %324 = add i32 %323, 4
  %.neg3072 = xor i32 %316, -1
  %325 = add i32 %t682885, %.neg3072
  %t700973 = add i32 %325, %324
  %326 = sext i32 %t700973 to i64
  %327 = shl nsw i32 %a377, 2
  %328 = sub nsw i32 %327, %t1645811
  %329 = add i32 %328, %a377.neg
  %330 = add nsw i32 %t1635808, 4
  %331 = sub i32 %330, %295
  %t7061003 = add i32 %331, %323
  %332 = sext i32 %t7061003 to i64
  %t12631007 = sub nsw i32 %198, %295
  %333 = sext i32 %t12631007 to i64
  %334 = sext i32 %201 to i64
  %335 = sext i32 %t1637809 to i64
  %336 = sub nsw i64 %300, %335
  %t17091013 = sub nsw i32 0, %t1637809
  %337 = sext i32 %a551 to i64
  %338 = sext i32 %t17091013 to i64
  %339 = add nsw i32 %316, 1
  %340 = shl nsw i32 %339, 2
  %341 = add i32 %t682885, %339
  %t7221046 = add i32 %341, %340
  %342 = sext i32 %t7221046 to i64
  %343 = add nsw i32 %328, %a377
  %344 = mul i32 %316, 6
  %345 = add nsw i32 %t1635808, 6
  %346 = sub i32 %345, %295
  %t7381089 = add i32 %346, %344
  %347 = sext i32 %t7381089 to i64
  %348 = mul nsw i32 %a377, 6
  %349 = sub i32 %348, %t1645811
  %350 = mul i32 %316, 7
  %351 = add nsw i32 %t1635808, 7
  %352 = sub i32 %351, %295
  %t7541132 = add i32 %352, %350
  %353 = sext i32 %t7541132 to i64
  %354 = mul nsw i32 %a377, 7
  %355 = sub i32 %354, %t1645811
  %356 = shl i32 %316, 3
  %357 = add nsw i32 %t1635808, 8
  %358 = sub i32 %357, %295
  %t7701175 = add i32 %358, %356
  %359 = sext i32 %t7701175 to i64
  %360 = shl nsw i32 %a377, 3
  %361 = sub i32 %360, %t1645811
  %362 = mul i32 %316, 9
  %363 = add nsw i32 %t1635808, 9
  %364 = sub i32 %363, %295
  %t7861218 = add i32 %364, %362
  %365 = sext i32 %t7861218 to i64
  %366 = mul nsw i32 %a377, 9
  %367 = sub i32 %366, %t1645811
  %368 = mul i32 %316, 10
  %369 = add nsw i32 %t1635808, 10
  %370 = sub i32 %369, %295
  %t8021261 = add i32 %370, %368
  %371 = sext i32 %t8021261 to i64
  %372 = mul nsw i32 %a377, 10
  %373 = sub i32 %372, %t1645811
  %374 = mul i32 %316, 11
  %375 = add nsw i32 %t1635808, 11
  %376 = sub i32 %375, %295
  %t8181304 = add i32 %376, %374
  %377 = sext i32 %t8181304 to i64
  %378 = mul nsw i32 %a377, 11
  %379 = sub i32 %378, %t1645811
  %380 = mul i32 %316, 12
  %381 = add nsw i32 %t1635808, 12
  %382 = sub i32 %381, %295
  %t8341347 = add i32 %382, %380
  %383 = sext i32 %t8341347 to i64
  %384 = mul nsw i32 %a377, 12
  %385 = sub i32 %384, %t1645811
  %386 = mul i32 %316, 13
  %387 = add nsw i32 %t1635808, 13
  %388 = sub i32 %387, %295
  %t8501390 = add i32 %388, %386
  %389 = sext i32 %t8501390 to i64
  %390 = mul nsw i32 %a377, 13
  %391 = sub i32 %390, %t1645811
  %392 = mul i32 %316, 14
  %393 = add nsw i32 %t1635808, 14
  %394 = sub i32 %393, %295
  %t8661433 = add i32 %394, %392
  %395 = sext i32 %t8661433 to i64
  %396 = mul nsw i32 %a377, 14
  %397 = sub i32 %396, %t1645811
  %398 = mul i32 %316, 15
  %399 = add nsw i32 %t1635808, 15
  %400 = sub i32 %399, %295
  %t8821476 = add i32 %400, %398
  %401 = sext i32 %t8821476 to i64
  %402 = mul nsw i32 %a377, 15
  %403 = sub i32 %402, %t1645811
  %404 = shl i32 %316, 4
  %405 = add nsw i32 %t1635808, 16
  %406 = sub i32 %405, %295
  %t8981519 = add i32 %406, %404
  %407 = sext i32 %t8981519 to i64
  %408 = shl nsw i32 %a377, 4
  %409 = sub i32 %408, %t1645811
  %410 = mul i32 %316, 17
  %411 = add nsw i32 %t1635808, 17
  %412 = sub i32 %411, %295
  %t9141562 = add i32 %412, %410
  %413 = sext i32 %t9141562 to i64
  %414 = mul nsw i32 %a377, 17
  %415 = sub i32 %414, %t1645811
  %416 = mul i32 %316, 18
  %417 = add nsw i32 %t1635808, 18
  %418 = sub i32 %417, %295
  %t9301605 = add i32 %418, %416
  %419 = sext i32 %t9301605 to i64
  %420 = mul nsw i32 %a377, 18
  %421 = sub i32 %420, %t1645811
  %422 = mul i32 %316, 19
  %423 = add nsw i32 %t1635808, 19
  %424 = sub i32 %423, %295
  %t9461648 = add i32 %424, %422
  %425 = sext i32 %t9461648 to i64
  %426 = mul nsw i32 %a377, 19
  %427 = sub i32 %426, %t1645811
  %428 = mul i32 %316, 20
  %429 = add nsw i32 %t1635808, 20
  %430 = sub i32 %429, %295
  %t9621691 = add i32 %430, %428
  %431 = sext i32 %t9621691 to i64
  %432 = mul nsw i32 %a377, 20
  %433 = sub i32 %432, %t1645811
  %434 = mul i32 %316, 21
  %435 = add nsw i32 %t1635808, 21
  %436 = sub i32 %435, %295
  %t9781734 = add i32 %436, %434
  %437 = sext i32 %t9781734 to i64
  %438 = mul nsw i32 %a377, 21
  %439 = sub i32 %438, %t1645811
  %440 = mul i32 %316, 22
  %441 = add nsw i32 %t1635808, 22
  %442 = sub i32 %441, %295
  %t9941777 = add i32 %442, %440
  %443 = sext i32 %t9941777 to i64
  %444 = mul nsw i32 %a377, 22
  %445 = sub i32 %444, %t1645811
  %446 = mul i32 %316, 23
  %447 = add nsw i32 %t1635808, 23
  %448 = sub i32 %447, %295
  %t10101820 = add i32 %448, %446
  %449 = sext i32 %t10101820 to i64
  %450 = mul nsw i32 %a377, 23
  %451 = sub i32 %450, %t1645811
  %452 = mul i32 %316, 24
  %453 = add nsw i32 %t1635808, 24
  %454 = sub i32 %453, %295
  %t10261863 = add i32 %454, %452
  %455 = sext i32 %t10261863 to i64
  %456 = mul nsw i32 %a377, 24
  %457 = sub i32 %456, %t1645811
  %458 = mul i32 %316, 25
  %459 = add nsw i32 %t1635808, 25
  %460 = sub i32 %459, %295
  %t10421906 = add i32 %460, %458
  %461 = sext i32 %t10421906 to i64
  %462 = mul nsw i32 %a377, 25
  %463 = sub i32 %462, %t1645811
  %464 = mul i32 %316, 26
  %465 = add nsw i32 %t1635808, 26
  %466 = sub i32 %465, %295
  %t10581949 = add i32 %466, %464
  %467 = sext i32 %t10581949 to i64
  %468 = mul nsw i32 %a377, 26
  %469 = sub i32 %468, %t1645811
  %470 = mul i32 %316, 27
  %471 = add nsw i32 %t1635808, 27
  %472 = sub i32 %471, %295
  %t10741992 = add i32 %472, %470
  %473 = sext i32 %t10741992 to i64
  %474 = mul nsw i32 %a377, 27
  %475 = sub i32 %474, %t1645811
  %476 = mul i32 %316, 28
  %477 = add nsw i32 %t1635808, 28
  %478 = sub i32 %477, %295
  %t10902035 = add i32 %478, %476
  %479 = sext i32 %t10902035 to i64
  %480 = mul nsw i32 %a377, 28
  %481 = sub i32 %480, %t1645811
  %482 = mul i32 %316, 29
  %483 = add nsw i32 %t1635808, 29
  %484 = sub i32 %483, %295
  %t11062078 = add i32 %484, %482
  %485 = sext i32 %t11062078 to i64
  %486 = mul nsw i32 %a377, 29
  %487 = sub i32 %486, %t1645811
  %488 = mul i32 %316, 30
  %489 = add nsw i32 %t1635808, 30
  %490 = sub i32 %489, %295
  %t11222121 = add i32 %490, %488
  %491 = sext i32 %t11222121 to i64
  %492 = mul nsw i32 %a377, 30
  %493 = sub i32 %492, %t1645811
  %494 = mul i32 %316, 31
  %495 = add nsw i32 %t1635808, 31
  %496 = sub i32 %495, %295
  %t11382164 = add i32 %496, %494
  %497 = sext i32 %t11382164 to i64
  %498 = mul nsw i32 %a377, 31
  %499 = sub i32 %498, %t1645811
  %500 = shl i32 %316, 5
  %501 = add nsw i32 %t1635808, 32
  %502 = sub i32 %501, %295
  %t11542207 = add i32 %502, %500
  %503 = sext i32 %t11542207 to i64
  %504 = shl nsw i32 %a377, 5
  %505 = sub i32 %504, %t1645811
  %506 = mul i32 %316, 33
  %507 = add nsw i32 %t1635808, 33
  %508 = sub i32 %507, %295
  %t11702250 = add i32 %508, %506
  %509 = sext i32 %t11702250 to i64
  %510 = mul nsw i32 %a377, 33
  %511 = sub i32 %510, %t1645811
  %512 = mul i32 %316, 34
  %513 = add nsw i32 %t1635808, 34
  %514 = sub i32 %513, %295
  %t11862293 = add i32 %514, %512
  %515 = sext i32 %t11862293 to i64
  %516 = mul nsw i32 %a377, 34
  %517 = sub i32 %516, %t1645811
  %518 = mul i32 %316, 35
  %519 = add nsw i32 %t1635808, 35
  %520 = sub i32 %519, %295
  %t12022336 = add i32 %520, %518
  %521 = sext i32 %t12022336 to i64
  %522 = mul nsw i32 %a377, 35
  %523 = sub i32 %522, %t1645811
  %524 = sext i32 %b398 to i64
  %525 = zext i32 %t1642 to i64
  %526 = sext i32 %271 to i64
  %527 = zext i32 %t1667854 to i64
  %528 = sext i32 %207 to i64
  %529 = sext i32 %203 to i64
  %530 = zext i32 %t1680887 to i64
  %531 = add nsw i64 %527, -1
  %xtraiter3628 = and i64 %527, 3
  %532 = icmp ult i64 %531, 3
  %unroll_iter3631 = and i64 %527, 4294967292
  %lcmp.mod3630.not = icmp eq i64 %xtraiter3628, 0
  br label %"for blur_y.s0.y.y816"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %533 = alloca i8*, i64 %69, align 32
  %534 = bitcast i8** %533 to i16*
  store i8** %533, i8*** %70, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %534, %then_bb ], [ %193, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %535 = icmp sgt i32 %a26, %11
  %a25 = select i1 %535, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 36
  %536 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %536, i32 %a25, i32 %b27
  %537 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %537, i32 %a25, i32 %b30
  %538 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %538, i32 %a27, i32 %b27
  %a31 = sub i32 %71, %blur_y.s0.y.yi.base.s
  %539 = icmp sgt i32 %a31, 0
  br i1 %539, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1651 = add nsw i32 %72, %blur_y.s0.y.yi.base.s
  %540 = icmp slt i32 %a31, 36
  %a30 = select i1 %540, i32 %a31, i32 36
  %541 = sext i32 %t1651 to i64
  %542 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %543 = add nsw i64 %indvars.iv, %541
  %544 = icmp slt i64 %543, %178
  %545 = trunc i64 %543 to i32
  %a33 = select i1 %544, i32 %545, i32 %b36
  %546 = mul nsw i64 %indvars.iv, %82
  %547 = sub nsw i64 %546, %83
  %548 = icmp sgt i32 %a33, 0
  %549 = select i1 %548, i32 %a33, i32 0
  %550 = mul nsw i32 %549, %13
  %t1653 = sub nsw i32 %550, %9
  %551 = insertelement <32 x i32> undef, i32 %t1653, i32 0
  %552 = shufflevector <32 x i32> %551, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %553 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %553, i32 %a40, i32 %a26
  %554 = icmp sgt i32 %b27, %a39
  %555 = select i1 %554, i32 %a39, i32 %b27
  %t1655 = sub nsw i32 %555, %read_input.s0.y.prologue
  %556 = icmp sgt i32 %t1655, 0
  br i1 %556, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1658 = sub i32 %read_input.s0.y.prologue, %11
  %557 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %81, %557
  %558 = icmp slt i64 %a47, 36
  %a46 = select i1 %558, i64 %a47, i64 36
  %559 = icmp sgt i64 %a46, 0
  %560 = select i1 %559, i64 %a46, i64 0
  %561 = sext i32 %t1658 to i64
  %562 = zext i32 %t1655 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %761, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %563 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %563, %t1650
  %564 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %564, i32 %a35, i32 %b37
  %565 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %566 = insertelement <32 x i32> undef, i32 %565, i32 0
  %567 = shufflevector <32 x i32> %566, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %567, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %568 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %569 = icmp sgt <8 x i32> %75, %568
  %570 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %571 = icmp sgt <8 x i32> %75, %570
  %572 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %573 = icmp sgt <8 x i32> %75, %572
  %574 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %575 = icmp sgt <8 x i32> %75, %574
  %576 = select <8 x i1> %569, <8 x i32> %568, <8 x i32> %75
  %577 = select <8 x i1> %571, <8 x i32> %570, <8 x i32> %75
  %578 = select <8 x i1> %573, <8 x i32> %572, <8 x i32> %75
  %579 = select <8 x i1> %575, <8 x i32> %574, <8 x i32> %75
  %580 = icmp sgt <8 x i32> %576, %77
  %581 = icmp sgt <8 x i32> %577, %77
  %582 = icmp sgt <8 x i32> %578, %77
  %583 = icmp sgt <8 x i32> %579, %77
  %584 = select <8 x i1> %580, <8 x i32> %576, <8 x i32> %77
  %585 = select <8 x i1> %581, <8 x i32> %577, <8 x i32> %77
  %586 = select <8 x i1> %582, <8 x i32> %578, <8 x i32> %77
  %587 = select <8 x i1> %583, <8 x i32> %579, <8 x i32> %77
  %588 = shufflevector <8 x i32> %584, <8 x i32> %585, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %589 = shufflevector <8 x i32> %586, <8 x i32> %587, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %590 = shufflevector <16 x i32> %588, <16 x i32> %589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %591 = add nsw <32 x i32> %590, %552
  %592 = extractelement <32 x i32> %591, i32 0
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds i16, i16* %64, i64 %593
  %595 = load i16, i16* %594, align 2, !tbaa !393
  %596 = insertelement <32 x i16> undef, i16 %595, i32 0
  %597 = extractelement <32 x i32> %591, i32 1
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i16, i16* %64, i64 %598
  %600 = load i16, i16* %599, align 2, !tbaa !393
  %601 = insertelement <32 x i16> %596, i16 %600, i32 1
  %602 = extractelement <32 x i32> %591, i32 2
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds i16, i16* %64, i64 %603
  %605 = load i16, i16* %604, align 2, !tbaa !393
  %606 = insertelement <32 x i16> %601, i16 %605, i32 2
  %607 = extractelement <32 x i32> %591, i32 3
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i16, i16* %64, i64 %608
  %610 = load i16, i16* %609, align 2, !tbaa !393
  %611 = insertelement <32 x i16> %606, i16 %610, i32 3
  %612 = extractelement <32 x i32> %591, i32 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds i16, i16* %64, i64 %613
  %615 = load i16, i16* %614, align 2, !tbaa !393
  %616 = insertelement <32 x i16> %611, i16 %615, i32 4
  %617 = extractelement <32 x i32> %591, i32 5
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds i16, i16* %64, i64 %618
  %620 = load i16, i16* %619, align 2, !tbaa !393
  %621 = insertelement <32 x i16> %616, i16 %620, i32 5
  %622 = extractelement <32 x i32> %591, i32 6
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds i16, i16* %64, i64 %623
  %625 = load i16, i16* %624, align 2, !tbaa !393
  %626 = insertelement <32 x i16> %621, i16 %625, i32 6
  %627 = extractelement <32 x i32> %591, i32 7
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i16, i16* %64, i64 %628
  %630 = load i16, i16* %629, align 2, !tbaa !393
  %631 = insertelement <32 x i16> %626, i16 %630, i32 7
  %632 = extractelement <32 x i32> %591, i32 8
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds i16, i16* %64, i64 %633
  %635 = load i16, i16* %634, align 2, !tbaa !393
  %636 = insertelement <32 x i16> %631, i16 %635, i32 8
  %637 = extractelement <32 x i32> %591, i32 9
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds i16, i16* %64, i64 %638
  %640 = load i16, i16* %639, align 2, !tbaa !393
  %641 = insertelement <32 x i16> %636, i16 %640, i32 9
  %642 = extractelement <32 x i32> %591, i32 10
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds i16, i16* %64, i64 %643
  %645 = load i16, i16* %644, align 2, !tbaa !393
  %646 = insertelement <32 x i16> %641, i16 %645, i32 10
  %647 = extractelement <32 x i32> %591, i32 11
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i16, i16* %64, i64 %648
  %650 = load i16, i16* %649, align 2, !tbaa !393
  %651 = insertelement <32 x i16> %646, i16 %650, i32 11
  %652 = extractelement <32 x i32> %591, i32 12
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i16, i16* %64, i64 %653
  %655 = load i16, i16* %654, align 2, !tbaa !393
  %656 = insertelement <32 x i16> %651, i16 %655, i32 12
  %657 = extractelement <32 x i32> %591, i32 13
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds i16, i16* %64, i64 %658
  %660 = load i16, i16* %659, align 2, !tbaa !393
  %661 = insertelement <32 x i16> %656, i16 %660, i32 13
  %662 = extractelement <32 x i32> %591, i32 14
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i16, i16* %64, i64 %663
  %665 = load i16, i16* %664, align 2, !tbaa !393
  %666 = insertelement <32 x i16> %661, i16 %665, i32 14
  %667 = extractelement <32 x i32> %591, i32 15
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i16, i16* %64, i64 %668
  %670 = load i16, i16* %669, align 2, !tbaa !393
  %671 = insertelement <32 x i16> %666, i16 %670, i32 15
  %672 = extractelement <32 x i32> %591, i32 16
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds i16, i16* %64, i64 %673
  %675 = load i16, i16* %674, align 2, !tbaa !393
  %676 = insertelement <32 x i16> %671, i16 %675, i32 16
  %677 = extractelement <32 x i32> %591, i32 17
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds i16, i16* %64, i64 %678
  %680 = load i16, i16* %679, align 2, !tbaa !393
  %681 = insertelement <32 x i16> %676, i16 %680, i32 17
  %682 = extractelement <32 x i32> %591, i32 18
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i16, i16* %64, i64 %683
  %685 = load i16, i16* %684, align 2, !tbaa !393
  %686 = insertelement <32 x i16> %681, i16 %685, i32 18
  %687 = extractelement <32 x i32> %591, i32 19
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds i16, i16* %64, i64 %688
  %690 = load i16, i16* %689, align 2, !tbaa !393
  %691 = insertelement <32 x i16> %686, i16 %690, i32 19
  %692 = extractelement <32 x i32> %591, i32 20
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i16, i16* %64, i64 %693
  %695 = load i16, i16* %694, align 2, !tbaa !393
  %696 = insertelement <32 x i16> %691, i16 %695, i32 20
  %697 = extractelement <32 x i32> %591, i32 21
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds i16, i16* %64, i64 %698
  %700 = load i16, i16* %699, align 2, !tbaa !393
  %701 = insertelement <32 x i16> %696, i16 %700, i32 21
  %702 = extractelement <32 x i32> %591, i32 22
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds i16, i16* %64, i64 %703
  %705 = load i16, i16* %704, align 2, !tbaa !393
  %706 = insertelement <32 x i16> %701, i16 %705, i32 22
  %707 = extractelement <32 x i32> %591, i32 23
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i16, i16* %64, i64 %708
  %710 = load i16, i16* %709, align 2, !tbaa !393
  %711 = insertelement <32 x i16> %706, i16 %710, i32 23
  %712 = extractelement <32 x i32> %591, i32 24
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i16, i16* %64, i64 %713
  %715 = load i16, i16* %714, align 2, !tbaa !393
  %716 = insertelement <32 x i16> %711, i16 %715, i32 24
  %717 = extractelement <32 x i32> %591, i32 25
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i16, i16* %64, i64 %718
  %720 = load i16, i16* %719, align 2, !tbaa !393
  %721 = insertelement <32 x i16> %716, i16 %720, i32 25
  %722 = extractelement <32 x i32> %591, i32 26
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds i16, i16* %64, i64 %723
  %725 = load i16, i16* %724, align 2, !tbaa !393
  %726 = insertelement <32 x i16> %721, i16 %725, i32 26
  %727 = extractelement <32 x i32> %591, i32 27
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i16, i16* %64, i64 %728
  %730 = load i16, i16* %729, align 2, !tbaa !393
  %731 = insertelement <32 x i16> %726, i16 %730, i32 27
  %732 = extractelement <32 x i32> %591, i32 28
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i16, i16* %64, i64 %733
  %735 = load i16, i16* %734, align 2, !tbaa !393
  %736 = insertelement <32 x i16> %731, i16 %735, i32 28
  %737 = extractelement <32 x i32> %591, i32 29
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds i16, i16* %64, i64 %738
  %740 = load i16, i16* %739, align 2, !tbaa !393
  %741 = insertelement <32 x i16> %736, i16 %740, i32 29
  %742 = extractelement <32 x i32> %591, i32 30
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds i16, i16* %64, i64 %743
  %745 = load i16, i16* %744, align 2, !tbaa !393
  %746 = insertelement <32 x i16> %741, i16 %745, i32 30
  %747 = extractelement <32 x i32> %591, i32 31
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i16, i16* %64, i64 %748
  %750 = load i16, i16* %749, align 2, !tbaa !393
  %751 = insertelement <32 x i16> %746, i16 %750, i32 31
  %752 = shufflevector <32 x i16> %751, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %753 = sext i32 %read_input.s0.x.v2.base.s to i64
  %754 = add nsw i64 %547, %753
  %755 = getelementptr inbounds i16, i16* %read_input, i64 %754
  %756 = getelementptr inbounds i16, i16* %755, i64 -32
  %757 = bitcast i16* %756 to <16 x i16>*
  store <16 x i16> %752, <16 x i16>* %757, align 2, !tbaa !396
  %758 = shufflevector <32 x i16> %751, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %759 = getelementptr inbounds i16, i16* %755, i64 -16
  %760 = bitcast i16* %759 to <16 x i16>*
  store <16 x i16> %758, <16 x i16>* %760, align 2, !tbaa !396
  %761 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2775 = icmp eq i32 %761, %20
  br i1 %.not2775, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2774 = icmp eq i64 %indvars.iv.next, %542
  br i1 %.not2774, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3242 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3243, %"end for read_input.s0.x.x.rebased10" ]
  %762 = add nsw i64 %indvars.iv3242, %561
  %763 = mul nsw i64 %762, %182
  %764 = sub nsw i64 %763, %183
  br i1 %78, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %765 = trunc i64 %764 to i32
  %766 = insertelement <32 x i32> undef, i32 %765, i32 0
  %767 = shufflevector <32 x i32> %766, <32 x i32> undef, <32 x i32> zeroinitializer
  %768 = add nuw nsw i64 %560, %indvars.iv3242
  %769 = mul nsw i64 %768, %82
  %770 = sub i64 %769, %83
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %86
  %771 = icmp slt i32 %a63, 0
  %a62 = select i1 %771, i32 %a63, i32 0
  %772 = icmp sgt i32 %a62, -36
  %t1675 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %772, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %773 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %88, %773
  %774 = icmp slt i64 %a70, 36
  %a69 = select i1 %774, i64 %a70, i64 36
  %775 = icmp sgt i64 %a69, 0
  %776 = select i1 %775, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 35
  %777 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %976, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %778 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %778, %t1650
  %779 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %779, i32 %a43, i32 %b37
  %780 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %781 = insertelement <32 x i32> undef, i32 %780, i32 0
  %782 = shufflevector <32 x i32> %781, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %782, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %783 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %784 = icmp sgt <8 x i32> %75, %783
  %785 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %786 = icmp sgt <8 x i32> %75, %785
  %787 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %788 = icmp sgt <8 x i32> %75, %787
  %789 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %790 = icmp sgt <8 x i32> %75, %789
  %791 = select <8 x i1> %784, <8 x i32> %783, <8 x i32> %75
  %792 = select <8 x i1> %786, <8 x i32> %785, <8 x i32> %75
  %793 = select <8 x i1> %788, <8 x i32> %787, <8 x i32> %75
  %794 = select <8 x i1> %790, <8 x i32> %789, <8 x i32> %75
  %795 = icmp sgt <8 x i32> %791, %77
  %796 = icmp sgt <8 x i32> %792, %77
  %797 = icmp sgt <8 x i32> %793, %77
  %798 = icmp sgt <8 x i32> %794, %77
  %799 = select <8 x i1> %795, <8 x i32> %791, <8 x i32> %77
  %800 = select <8 x i1> %796, <8 x i32> %792, <8 x i32> %77
  %801 = select <8 x i1> %797, <8 x i32> %793, <8 x i32> %77
  %802 = select <8 x i1> %798, <8 x i32> %794, <8 x i32> %77
  %803 = shufflevector <8 x i32> %799, <8 x i32> %800, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %804 = shufflevector <8 x i32> %801, <8 x i32> %802, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %805 = shufflevector <16 x i32> %803, <16 x i32> %804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %806 = add nsw <32 x i32> %805, %767
  %807 = extractelement <32 x i32> %806, i32 0
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds i16, i16* %64, i64 %808
  %810 = load i16, i16* %809, align 2, !tbaa !393
  %811 = insertelement <32 x i16> undef, i16 %810, i32 0
  %812 = extractelement <32 x i32> %806, i32 1
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i16, i16* %64, i64 %813
  %815 = load i16, i16* %814, align 2, !tbaa !393
  %816 = insertelement <32 x i16> %811, i16 %815, i32 1
  %817 = extractelement <32 x i32> %806, i32 2
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i16, i16* %64, i64 %818
  %820 = load i16, i16* %819, align 2, !tbaa !393
  %821 = insertelement <32 x i16> %816, i16 %820, i32 2
  %822 = extractelement <32 x i32> %806, i32 3
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds i16, i16* %64, i64 %823
  %825 = load i16, i16* %824, align 2, !tbaa !393
  %826 = insertelement <32 x i16> %821, i16 %825, i32 3
  %827 = extractelement <32 x i32> %806, i32 4
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds i16, i16* %64, i64 %828
  %830 = load i16, i16* %829, align 2, !tbaa !393
  %831 = insertelement <32 x i16> %826, i16 %830, i32 4
  %832 = extractelement <32 x i32> %806, i32 5
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds i16, i16* %64, i64 %833
  %835 = load i16, i16* %834, align 2, !tbaa !393
  %836 = insertelement <32 x i16> %831, i16 %835, i32 5
  %837 = extractelement <32 x i32> %806, i32 6
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds i16, i16* %64, i64 %838
  %840 = load i16, i16* %839, align 2, !tbaa !393
  %841 = insertelement <32 x i16> %836, i16 %840, i32 6
  %842 = extractelement <32 x i32> %806, i32 7
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds i16, i16* %64, i64 %843
  %845 = load i16, i16* %844, align 2, !tbaa !393
  %846 = insertelement <32 x i16> %841, i16 %845, i32 7
  %847 = extractelement <32 x i32> %806, i32 8
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i16, i16* %64, i64 %848
  %850 = load i16, i16* %849, align 2, !tbaa !393
  %851 = insertelement <32 x i16> %846, i16 %850, i32 8
  %852 = extractelement <32 x i32> %806, i32 9
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds i16, i16* %64, i64 %853
  %855 = load i16, i16* %854, align 2, !tbaa !393
  %856 = insertelement <32 x i16> %851, i16 %855, i32 9
  %857 = extractelement <32 x i32> %806, i32 10
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i16, i16* %64, i64 %858
  %860 = load i16, i16* %859, align 2, !tbaa !393
  %861 = insertelement <32 x i16> %856, i16 %860, i32 10
  %862 = extractelement <32 x i32> %806, i32 11
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i16, i16* %64, i64 %863
  %865 = load i16, i16* %864, align 2, !tbaa !393
  %866 = insertelement <32 x i16> %861, i16 %865, i32 11
  %867 = extractelement <32 x i32> %806, i32 12
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i16, i16* %64, i64 %868
  %870 = load i16, i16* %869, align 2, !tbaa !393
  %871 = insertelement <32 x i16> %866, i16 %870, i32 12
  %872 = extractelement <32 x i32> %806, i32 13
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds i16, i16* %64, i64 %873
  %875 = load i16, i16* %874, align 2, !tbaa !393
  %876 = insertelement <32 x i16> %871, i16 %875, i32 13
  %877 = extractelement <32 x i32> %806, i32 14
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds i16, i16* %64, i64 %878
  %880 = load i16, i16* %879, align 2, !tbaa !393
  %881 = insertelement <32 x i16> %876, i16 %880, i32 14
  %882 = extractelement <32 x i32> %806, i32 15
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i16, i16* %64, i64 %883
  %885 = load i16, i16* %884, align 2, !tbaa !393
  %886 = insertelement <32 x i16> %881, i16 %885, i32 15
  %887 = extractelement <32 x i32> %806, i32 16
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds i16, i16* %64, i64 %888
  %890 = load i16, i16* %889, align 2, !tbaa !393
  %891 = insertelement <32 x i16> %886, i16 %890, i32 16
  %892 = extractelement <32 x i32> %806, i32 17
  %893 = sext i32 %892 to i64
  %894 = getelementptr inbounds i16, i16* %64, i64 %893
  %895 = load i16, i16* %894, align 2, !tbaa !393
  %896 = insertelement <32 x i16> %891, i16 %895, i32 17
  %897 = extractelement <32 x i32> %806, i32 18
  %898 = sext i32 %897 to i64
  %899 = getelementptr inbounds i16, i16* %64, i64 %898
  %900 = load i16, i16* %899, align 2, !tbaa !393
  %901 = insertelement <32 x i16> %896, i16 %900, i32 18
  %902 = extractelement <32 x i32> %806, i32 19
  %903 = sext i32 %902 to i64
  %904 = getelementptr inbounds i16, i16* %64, i64 %903
  %905 = load i16, i16* %904, align 2, !tbaa !393
  %906 = insertelement <32 x i16> %901, i16 %905, i32 19
  %907 = extractelement <32 x i32> %806, i32 20
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds i16, i16* %64, i64 %908
  %910 = load i16, i16* %909, align 2, !tbaa !393
  %911 = insertelement <32 x i16> %906, i16 %910, i32 20
  %912 = extractelement <32 x i32> %806, i32 21
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds i16, i16* %64, i64 %913
  %915 = load i16, i16* %914, align 2, !tbaa !393
  %916 = insertelement <32 x i16> %911, i16 %915, i32 21
  %917 = extractelement <32 x i32> %806, i32 22
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i16, i16* %64, i64 %918
  %920 = load i16, i16* %919, align 2, !tbaa !393
  %921 = insertelement <32 x i16> %916, i16 %920, i32 22
  %922 = extractelement <32 x i32> %806, i32 23
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i16, i16* %64, i64 %923
  %925 = load i16, i16* %924, align 2, !tbaa !393
  %926 = insertelement <32 x i16> %921, i16 %925, i32 23
  %927 = extractelement <32 x i32> %806, i32 24
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i16, i16* %64, i64 %928
  %930 = load i16, i16* %929, align 2, !tbaa !393
  %931 = insertelement <32 x i16> %926, i16 %930, i32 24
  %932 = extractelement <32 x i32> %806, i32 25
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds i16, i16* %64, i64 %933
  %935 = load i16, i16* %934, align 2, !tbaa !393
  %936 = insertelement <32 x i16> %931, i16 %935, i32 25
  %937 = extractelement <32 x i32> %806, i32 26
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i16, i16* %64, i64 %938
  %940 = load i16, i16* %939, align 2, !tbaa !393
  %941 = insertelement <32 x i16> %936, i16 %940, i32 26
  %942 = extractelement <32 x i32> %806, i32 27
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds i16, i16* %64, i64 %943
  %945 = load i16, i16* %944, align 2, !tbaa !393
  %946 = insertelement <32 x i16> %941, i16 %945, i32 27
  %947 = extractelement <32 x i32> %806, i32 28
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds i16, i16* %64, i64 %948
  %950 = load i16, i16* %949, align 2, !tbaa !393
  %951 = insertelement <32 x i16> %946, i16 %950, i32 28
  %952 = extractelement <32 x i32> %806, i32 29
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds i16, i16* %64, i64 %953
  %955 = load i16, i16* %954, align 2, !tbaa !393
  %956 = insertelement <32 x i16> %951, i16 %955, i32 29
  %957 = extractelement <32 x i32> %806, i32 30
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds i16, i16* %64, i64 %958
  %960 = load i16, i16* %959, align 2, !tbaa !393
  %961 = insertelement <32 x i16> %956, i16 %960, i32 30
  %962 = extractelement <32 x i32> %806, i32 31
  %963 = sext i32 %962 to i64
  %964 = getelementptr inbounds i16, i16* %64, i64 %963
  %965 = load i16, i16* %964, align 2, !tbaa !393
  %966 = insertelement <32 x i16> %961, i16 %965, i32 31
  %967 = shufflevector <32 x i16> %966, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %968 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %969 = add nsw i64 %770, %968
  %970 = getelementptr inbounds i16, i16* %read_input, i64 %969
  %971 = getelementptr inbounds i16, i16* %970, i64 -32
  %972 = bitcast i16* %971 to <16 x i16>*
  store <16 x i16> %967, <16 x i16>* %972, align 2, !tbaa !396
  %973 = shufflevector <32 x i16> %966, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %974 = getelementptr inbounds i16, i16* %970, i64 -16
  %975 = bitcast i16* %974 to <16 x i16>*
  store <16 x i16> %973, <16 x i16>* %975, align 2, !tbaa !396
  %976 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2772 = icmp eq i32 %976, %b18
  br i1 %.not2772, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %84, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %977 = add nuw nsw i64 %560, %indvars.iv3242
  %978 = mul nsw i64 %977, %82
  %979 = sub i64 %978, %83
  br i1 %186, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3239 = phi i64 [ %indvars.iv.next3240.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %980 = add nuw nsw i64 %indvars.iv3239, %179
  %981 = shl nsw i64 %980, 5
  %982 = add nsw i64 %981, %180
  %983 = add nsw i64 %982, %764
  %984 = getelementptr inbounds i16, i16* %64, i64 %983
  %985 = getelementptr inbounds i16, i16* %984, i64 -32
  %986 = bitcast i16* %985 to <16 x i16>*
  %987 = load <16 x i16>, <16 x i16>* %986, align 2, !tbaa !393
  %988 = getelementptr inbounds i16, i16* %984, i64 -16
  %989 = bitcast i16* %988 to <16 x i16>*
  %990 = load <16 x i16>, <16 x i16>* %989, align 2, !tbaa !393
  %991 = add nsw i64 %979, %982
  %992 = getelementptr inbounds i16, i16* %read_input, i64 %991
  %993 = getelementptr inbounds i16, i16* %992, i64 -32
  %994 = bitcast i16* %993 to <16 x i16>*
  store <16 x i16> %987, <16 x i16>* %994, align 2, !tbaa !396
  %995 = getelementptr inbounds i16, i16* %992, i64 -16
  %996 = bitcast i16* %995 to <16 x i16>*
  store <16 x i16> %990, <16 x i16>* %996, align 2, !tbaa !396
  %indvars.iv.next3240 = or i64 %indvars.iv3239, 1
  %997 = add nuw nsw i64 %indvars.iv.next3240, %179
  %998 = shl nsw i64 %997, 5
  %999 = add nsw i64 %998, %180
  %1000 = add nsw i64 %999, %764
  %1001 = getelementptr inbounds i16, i16* %64, i64 %1000
  %1002 = getelementptr inbounds i16, i16* %1001, i64 -32
  %1003 = bitcast i16* %1002 to <16 x i16>*
  %1004 = load <16 x i16>, <16 x i16>* %1003, align 2, !tbaa !393
  %1005 = getelementptr inbounds i16, i16* %1001, i64 -16
  %1006 = bitcast i16* %1005 to <16 x i16>*
  %1007 = load <16 x i16>, <16 x i16>* %1006, align 2, !tbaa !393
  %1008 = add nsw i64 %979, %999
  %1009 = getelementptr inbounds i16, i16* %read_input, i64 %1008
  %1010 = getelementptr inbounds i16, i16* %1009, i64 -32
  %1011 = bitcast i16* %1010 to <16 x i16>*
  store <16 x i16> %1004, <16 x i16>* %1011, align 2, !tbaa !396
  %1012 = getelementptr inbounds i16, i16* %1009, i64 -16
  %1013 = bitcast i16* %1012 to <16 x i16>*
  store <16 x i16> %1007, <16 x i16>* %1013, align 2, !tbaa !396
  %indvars.iv.next3240.1 = or i64 %indvars.iv3239, 2
  %1014 = add nuw nsw i64 %indvars.iv.next3240.1, %179
  %1015 = shl nsw i64 %1014, 5
  %1016 = add nsw i64 %1015, %180
  %1017 = add nsw i64 %1016, %764
  %1018 = getelementptr inbounds i16, i16* %64, i64 %1017
  %1019 = getelementptr inbounds i16, i16* %1018, i64 -32
  %1020 = bitcast i16* %1019 to <16 x i16>*
  %1021 = load <16 x i16>, <16 x i16>* %1020, align 2, !tbaa !393
  %1022 = getelementptr inbounds i16, i16* %1018, i64 -16
  %1023 = bitcast i16* %1022 to <16 x i16>*
  %1024 = load <16 x i16>, <16 x i16>* %1023, align 2, !tbaa !393
  %1025 = add nsw i64 %979, %1016
  %1026 = getelementptr inbounds i16, i16* %read_input, i64 %1025
  %1027 = getelementptr inbounds i16, i16* %1026, i64 -32
  %1028 = bitcast i16* %1027 to <16 x i16>*
  store <16 x i16> %1021, <16 x i16>* %1028, align 2, !tbaa !396
  %1029 = getelementptr inbounds i16, i16* %1026, i64 -16
  %1030 = bitcast i16* %1029 to <16 x i16>*
  store <16 x i16> %1024, <16 x i16>* %1030, align 2, !tbaa !396
  %indvars.iv.next3240.2 = or i64 %indvars.iv3239, 3
  %1031 = add nuw nsw i64 %indvars.iv.next3240.2, %179
  %1032 = shl nsw i64 %1031, 5
  %1033 = add nsw i64 %1032, %180
  %1034 = add nsw i64 %1033, %764
  %1035 = getelementptr inbounds i16, i16* %64, i64 %1034
  %1036 = getelementptr inbounds i16, i16* %1035, i64 -32
  %1037 = bitcast i16* %1036 to <16 x i16>*
  %1038 = load <16 x i16>, <16 x i16>* %1037, align 2, !tbaa !393
  %1039 = getelementptr inbounds i16, i16* %1035, i64 -16
  %1040 = bitcast i16* %1039 to <16 x i16>*
  %1041 = load <16 x i16>, <16 x i16>* %1040, align 2, !tbaa !393
  %1042 = add nsw i64 %979, %1033
  %1043 = getelementptr inbounds i16, i16* %read_input, i64 %1042
  %1044 = getelementptr inbounds i16, i16* %1043, i64 -32
  %1045 = bitcast i16* %1044 to <16 x i16>*
  store <16 x i16> %1038, <16 x i16>* %1045, align 2, !tbaa !396
  %1046 = getelementptr inbounds i16, i16* %1043, i64 -16
  %1047 = bitcast i16* %1046 to <16 x i16>*
  store <16 x i16> %1041, <16 x i16>* %1047, align 2, !tbaa !396
  %indvars.iv.next3240.3 = add nuw nsw i64 %indvars.iv3239, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3239.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3240.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3239.epil = phi i64 [ %indvars.iv.next3240.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3239.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %1048 = add nuw nsw i64 %indvars.iv3239.epil, %179
  %1049 = shl nsw i64 %1048, 5
  %1050 = add nsw i64 %1049, %180
  %1051 = add nsw i64 %1050, %764
  %1052 = getelementptr inbounds i16, i16* %64, i64 %1051
  %1053 = getelementptr inbounds i16, i16* %1052, i64 -32
  %1054 = bitcast i16* %1053 to <16 x i16>*
  %1055 = load <16 x i16>, <16 x i16>* %1054, align 2, !tbaa !393
  %1056 = getelementptr inbounds i16, i16* %1052, i64 -16
  %1057 = bitcast i16* %1056 to <16 x i16>*
  %1058 = load <16 x i16>, <16 x i16>* %1057, align 2, !tbaa !393
  %1059 = add nsw i64 %979, %1050
  %1060 = getelementptr inbounds i16, i16* %read_input, i64 %1059
  %1061 = getelementptr inbounds i16, i16* %1060, i64 -32
  %1062 = bitcast i16* %1061 to <16 x i16>*
  store <16 x i16> %1055, <16 x i16>* %1062, align 2, !tbaa !396
  %1063 = getelementptr inbounds i16, i16* %1060, i64 -16
  %1064 = bitcast i16* %1063 to <16 x i16>*
  store <16 x i16> %1058, <16 x i16>* %1064, align 2, !tbaa !396
  %indvars.iv.next3240.epil = add nuw nsw i64 %indvars.iv3239.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %85, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %1065 = trunc i64 %764 to i32
  %1066 = insertelement <32 x i32> undef, i32 %1065, i32 0
  %1067 = shufflevector <32 x i32> %1066, <32 x i32> undef, <32 x i32> zeroinitializer
  %1068 = add nuw nsw i64 %560, %indvars.iv3242
  %1069 = mul nsw i64 %1068, %82
  %1070 = sub i64 %1069, %83
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1270, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %1071 = add nsw i32 %read_input.s0.x.x.rebased11, %t1624
  %1072 = shl nsw i32 %1071, 5
  %a54 = add nsw i32 %1072, %t1650
  %1073 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %1073, i32 %a54, i32 %b37
  %1074 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %1075 = insertelement <32 x i32> undef, i32 %1074, i32 0
  %1076 = shufflevector <32 x i32> %1075, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %1076, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1077 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1078 = icmp sgt <8 x i32> %75, %1077
  %1079 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1080 = icmp sgt <8 x i32> %75, %1079
  %1081 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1082 = icmp sgt <8 x i32> %75, %1081
  %1083 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1084 = icmp sgt <8 x i32> %75, %1083
  %1085 = select <8 x i1> %1078, <8 x i32> %1077, <8 x i32> %75
  %1086 = select <8 x i1> %1080, <8 x i32> %1079, <8 x i32> %75
  %1087 = select <8 x i1> %1082, <8 x i32> %1081, <8 x i32> %75
  %1088 = select <8 x i1> %1084, <8 x i32> %1083, <8 x i32> %75
  %1089 = icmp sgt <8 x i32> %1085, %77
  %1090 = icmp sgt <8 x i32> %1086, %77
  %1091 = icmp sgt <8 x i32> %1087, %77
  %1092 = icmp sgt <8 x i32> %1088, %77
  %1093 = select <8 x i1> %1089, <8 x i32> %1085, <8 x i32> %77
  %1094 = select <8 x i1> %1090, <8 x i32> %1086, <8 x i32> %77
  %1095 = select <8 x i1> %1091, <8 x i32> %1087, <8 x i32> %77
  %1096 = select <8 x i1> %1092, <8 x i32> %1088, <8 x i32> %77
  %1097 = shufflevector <8 x i32> %1093, <8 x i32> %1094, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1098 = shufflevector <8 x i32> %1095, <8 x i32> %1096, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1099 = shufflevector <16 x i32> %1097, <16 x i32> %1098, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1100 = add nsw <32 x i32> %1099, %1067
  %1101 = extractelement <32 x i32> %1100, i32 0
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds i16, i16* %64, i64 %1102
  %1104 = load i16, i16* %1103, align 2, !tbaa !393
  %1105 = insertelement <32 x i16> undef, i16 %1104, i32 0
  %1106 = extractelement <32 x i32> %1100, i32 1
  %1107 = sext i32 %1106 to i64
  %1108 = getelementptr inbounds i16, i16* %64, i64 %1107
  %1109 = load i16, i16* %1108, align 2, !tbaa !393
  %1110 = insertelement <32 x i16> %1105, i16 %1109, i32 1
  %1111 = extractelement <32 x i32> %1100, i32 2
  %1112 = sext i32 %1111 to i64
  %1113 = getelementptr inbounds i16, i16* %64, i64 %1112
  %1114 = load i16, i16* %1113, align 2, !tbaa !393
  %1115 = insertelement <32 x i16> %1110, i16 %1114, i32 2
  %1116 = extractelement <32 x i32> %1100, i32 3
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds i16, i16* %64, i64 %1117
  %1119 = load i16, i16* %1118, align 2, !tbaa !393
  %1120 = insertelement <32 x i16> %1115, i16 %1119, i32 3
  %1121 = extractelement <32 x i32> %1100, i32 4
  %1122 = sext i32 %1121 to i64
  %1123 = getelementptr inbounds i16, i16* %64, i64 %1122
  %1124 = load i16, i16* %1123, align 2, !tbaa !393
  %1125 = insertelement <32 x i16> %1120, i16 %1124, i32 4
  %1126 = extractelement <32 x i32> %1100, i32 5
  %1127 = sext i32 %1126 to i64
  %1128 = getelementptr inbounds i16, i16* %64, i64 %1127
  %1129 = load i16, i16* %1128, align 2, !tbaa !393
  %1130 = insertelement <32 x i16> %1125, i16 %1129, i32 5
  %1131 = extractelement <32 x i32> %1100, i32 6
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds i16, i16* %64, i64 %1132
  %1134 = load i16, i16* %1133, align 2, !tbaa !393
  %1135 = insertelement <32 x i16> %1130, i16 %1134, i32 6
  %1136 = extractelement <32 x i32> %1100, i32 7
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds i16, i16* %64, i64 %1137
  %1139 = load i16, i16* %1138, align 2, !tbaa !393
  %1140 = insertelement <32 x i16> %1135, i16 %1139, i32 7
  %1141 = extractelement <32 x i32> %1100, i32 8
  %1142 = sext i32 %1141 to i64
  %1143 = getelementptr inbounds i16, i16* %64, i64 %1142
  %1144 = load i16, i16* %1143, align 2, !tbaa !393
  %1145 = insertelement <32 x i16> %1140, i16 %1144, i32 8
  %1146 = extractelement <32 x i32> %1100, i32 9
  %1147 = sext i32 %1146 to i64
  %1148 = getelementptr inbounds i16, i16* %64, i64 %1147
  %1149 = load i16, i16* %1148, align 2, !tbaa !393
  %1150 = insertelement <32 x i16> %1145, i16 %1149, i32 9
  %1151 = extractelement <32 x i32> %1100, i32 10
  %1152 = sext i32 %1151 to i64
  %1153 = getelementptr inbounds i16, i16* %64, i64 %1152
  %1154 = load i16, i16* %1153, align 2, !tbaa !393
  %1155 = insertelement <32 x i16> %1150, i16 %1154, i32 10
  %1156 = extractelement <32 x i32> %1100, i32 11
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds i16, i16* %64, i64 %1157
  %1159 = load i16, i16* %1158, align 2, !tbaa !393
  %1160 = insertelement <32 x i16> %1155, i16 %1159, i32 11
  %1161 = extractelement <32 x i32> %1100, i32 12
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds i16, i16* %64, i64 %1162
  %1164 = load i16, i16* %1163, align 2, !tbaa !393
  %1165 = insertelement <32 x i16> %1160, i16 %1164, i32 12
  %1166 = extractelement <32 x i32> %1100, i32 13
  %1167 = sext i32 %1166 to i64
  %1168 = getelementptr inbounds i16, i16* %64, i64 %1167
  %1169 = load i16, i16* %1168, align 2, !tbaa !393
  %1170 = insertelement <32 x i16> %1165, i16 %1169, i32 13
  %1171 = extractelement <32 x i32> %1100, i32 14
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds i16, i16* %64, i64 %1172
  %1174 = load i16, i16* %1173, align 2, !tbaa !393
  %1175 = insertelement <32 x i16> %1170, i16 %1174, i32 14
  %1176 = extractelement <32 x i32> %1100, i32 15
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i16, i16* %64, i64 %1177
  %1179 = load i16, i16* %1178, align 2, !tbaa !393
  %1180 = insertelement <32 x i16> %1175, i16 %1179, i32 15
  %1181 = extractelement <32 x i32> %1100, i32 16
  %1182 = sext i32 %1181 to i64
  %1183 = getelementptr inbounds i16, i16* %64, i64 %1182
  %1184 = load i16, i16* %1183, align 2, !tbaa !393
  %1185 = insertelement <32 x i16> %1180, i16 %1184, i32 16
  %1186 = extractelement <32 x i32> %1100, i32 17
  %1187 = sext i32 %1186 to i64
  %1188 = getelementptr inbounds i16, i16* %64, i64 %1187
  %1189 = load i16, i16* %1188, align 2, !tbaa !393
  %1190 = insertelement <32 x i16> %1185, i16 %1189, i32 17
  %1191 = extractelement <32 x i32> %1100, i32 18
  %1192 = sext i32 %1191 to i64
  %1193 = getelementptr inbounds i16, i16* %64, i64 %1192
  %1194 = load i16, i16* %1193, align 2, !tbaa !393
  %1195 = insertelement <32 x i16> %1190, i16 %1194, i32 18
  %1196 = extractelement <32 x i32> %1100, i32 19
  %1197 = sext i32 %1196 to i64
  %1198 = getelementptr inbounds i16, i16* %64, i64 %1197
  %1199 = load i16, i16* %1198, align 2, !tbaa !393
  %1200 = insertelement <32 x i16> %1195, i16 %1199, i32 19
  %1201 = extractelement <32 x i32> %1100, i32 20
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds i16, i16* %64, i64 %1202
  %1204 = load i16, i16* %1203, align 2, !tbaa !393
  %1205 = insertelement <32 x i16> %1200, i16 %1204, i32 20
  %1206 = extractelement <32 x i32> %1100, i32 21
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds i16, i16* %64, i64 %1207
  %1209 = load i16, i16* %1208, align 2, !tbaa !393
  %1210 = insertelement <32 x i16> %1205, i16 %1209, i32 21
  %1211 = extractelement <32 x i32> %1100, i32 22
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds i16, i16* %64, i64 %1212
  %1214 = load i16, i16* %1213, align 2, !tbaa !393
  %1215 = insertelement <32 x i16> %1210, i16 %1214, i32 22
  %1216 = extractelement <32 x i32> %1100, i32 23
  %1217 = sext i32 %1216 to i64
  %1218 = getelementptr inbounds i16, i16* %64, i64 %1217
  %1219 = load i16, i16* %1218, align 2, !tbaa !393
  %1220 = insertelement <32 x i16> %1215, i16 %1219, i32 23
  %1221 = extractelement <32 x i32> %1100, i32 24
  %1222 = sext i32 %1221 to i64
  %1223 = getelementptr inbounds i16, i16* %64, i64 %1222
  %1224 = load i16, i16* %1223, align 2, !tbaa !393
  %1225 = insertelement <32 x i16> %1220, i16 %1224, i32 24
  %1226 = extractelement <32 x i32> %1100, i32 25
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds i16, i16* %64, i64 %1227
  %1229 = load i16, i16* %1228, align 2, !tbaa !393
  %1230 = insertelement <32 x i16> %1225, i16 %1229, i32 25
  %1231 = extractelement <32 x i32> %1100, i32 26
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds i16, i16* %64, i64 %1232
  %1234 = load i16, i16* %1233, align 2, !tbaa !393
  %1235 = insertelement <32 x i16> %1230, i16 %1234, i32 26
  %1236 = extractelement <32 x i32> %1100, i32 27
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds i16, i16* %64, i64 %1237
  %1239 = load i16, i16* %1238, align 2, !tbaa !393
  %1240 = insertelement <32 x i16> %1235, i16 %1239, i32 27
  %1241 = extractelement <32 x i32> %1100, i32 28
  %1242 = sext i32 %1241 to i64
  %1243 = getelementptr inbounds i16, i16* %64, i64 %1242
  %1244 = load i16, i16* %1243, align 2, !tbaa !393
  %1245 = insertelement <32 x i16> %1240, i16 %1244, i32 28
  %1246 = extractelement <32 x i32> %1100, i32 29
  %1247 = sext i32 %1246 to i64
  %1248 = getelementptr inbounds i16, i16* %64, i64 %1247
  %1249 = load i16, i16* %1248, align 2, !tbaa !393
  %1250 = insertelement <32 x i16> %1245, i16 %1249, i32 29
  %1251 = extractelement <32 x i32> %1100, i32 30
  %1252 = sext i32 %1251 to i64
  %1253 = getelementptr inbounds i16, i16* %64, i64 %1252
  %1254 = load i16, i16* %1253, align 2, !tbaa !393
  %1255 = insertelement <32 x i16> %1250, i16 %1254, i32 30
  %1256 = extractelement <32 x i32> %1100, i32 31
  %1257 = sext i32 %1256 to i64
  %1258 = getelementptr inbounds i16, i16* %64, i64 %1257
  %1259 = load i16, i16* %1258, align 2, !tbaa !393
  %1260 = insertelement <32 x i16> %1255, i16 %1259, i32 31
  %1261 = shufflevector <32 x i16> %1260, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1262 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1263 = add nsw i64 %1070, %1262
  %1264 = getelementptr inbounds i16, i16* %read_input, i64 %1263
  %1265 = getelementptr inbounds i16, i16* %1264, i64 -32
  %1266 = bitcast i16* %1265 to <16 x i16>*
  store <16 x i16> %1261, <16 x i16>* %1266, align 2, !tbaa !396
  %1267 = shufflevector <32 x i16> %1260, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1268 = getelementptr inbounds i16, i16* %1264, i64 -16
  %1269 = bitcast i16* %1268 to <16 x i16>*
  store <16 x i16> %1267, <16 x i16>* %1269, align 2, !tbaa !396
  %1270 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2770 = icmp eq i32 %1270, %t1661
  br i1 %.not2770, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3243 = add nuw nsw i64 %indvars.iv3242, 1
  %.not2769 = icmp eq i64 %indvars.iv.next3243, %562
  br i1 %.not2769, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3245 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3246, %"end for read_input.s0.x.x17" ]
  %1271 = trunc i64 %indvars.iv3245 to i32
  %a65 = add nsw i32 %t1675, %1271
  %1272 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1272, i32 %a65, i32 %b36
  %1273 = icmp sgt i32 %a64, 0
  %1274 = select i1 %1273, i32 %a64, i32 0
  %1275 = mul nsw i32 %1274, %13
  %t1679 = sub nsw i32 %1275, %9
  %1276 = insertelement <32 x i32> undef, i32 %t1679, i32 0
  %1277 = shufflevector <32 x i32> %1276, <32 x i32> undef, <32 x i32> zeroinitializer
  %1278 = add nuw nsw i64 %776, %indvars.iv3245
  %1279 = mul nsw i64 %1278, %82
  %1280 = sub i64 %1279, %83
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1281 = load i64, i64* %.fca.1.gep2376, align 8, !tbaa !387
  %cmp.i2824 = icmp ult i64 %1281, %92
  %1282 = load i8*, i8** %.fca.0.gep2375, align 8, !tbaa !389
  br i1 %cmp.i2824, label %if.then.i2827, label %pseudostack_alloc.exit2840, !prof !390

if.then.i2827:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2826 = icmp ne i8* %1282, null
  %1283 = load i64, i64* %.fca.2.gep2377, align 8
  %cmp2.i2829 = icmp ugt i64 %1283, 16384
  %or.cond2911 = and i1 %tobool1.not.i2826, %cmp2.i2829
  br i1 %or.cond2911, label %if.then3.i2831, label %if.end.i2835

if.then3.i2831:                                   ; preds = %if.then.i2827
  call void @halide_free(i8* null, i8* nonnull %1282) #16
  %.pre3438 = load i64, i64* %.fca.2.gep2377, align 8, !tbaa !391
  br label %if.end.i2835

if.end.i2835:                                     ; preds = %if.then3.i2831, %if.then.i2827
  %1284 = phi i64 [ %.pre3438, %if.then3.i2831 ], [ %1283, %if.then.i2827 ]
  %add.i2833 = add i64 %1284, %92
  store i64 %add.i2833, i64* %.fca.2.gep2377, align 8, !tbaa !391
  %cmp7.i2834 = icmp ugt i64 %add.i2833, 16384
  br i1 %cmp7.i2834, label %if.then8.i2837, label %if.end11.i2839

if.then8.i2837:                                   ; preds = %if.end.i2835
  %call.i2836 = call i8* @halide_malloc(i8* null, i64 %92) #16
  br label %if.end11.i2839

if.end11.i2839:                                   ; preds = %if.then8.i2837, %if.end.i2835
  %storemerge.i2838 = phi i8* [ %call.i2836, %if.then8.i2837 ], [ null, %if.end.i2835 ]
  store i8* %storemerge.i2838, i8** %.fca.0.gep2375, align 8, !tbaa !389
  store i64 %92, i64* %.fca.1.gep2376, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2840

pseudostack_alloc.exit2840:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2839
  %1285 = phi i8* [ %storemerge.i2838, %if.end11.i2839 ], [ %1282, %"end for read_input.s0.y.rebased14" ]
  %1286 = bitcast i8* %1285 to i16*
  %.not2692 = icmp eq i8* %1285, null
  br i1 %.not2692, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1485, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1287 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1287, %t1650
  %1288 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1288, i32 %a66, i32 %b37
  %1289 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1290 = insertelement <32 x i32> undef, i32 %1289, i32 0
  %1291 = shufflevector <32 x i32> %1290, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1291, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1292 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1293 = icmp sgt <8 x i32> %75, %1292
  %1294 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1295 = icmp sgt <8 x i32> %75, %1294
  %1296 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1297 = icmp sgt <8 x i32> %75, %1296
  %1298 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1299 = icmp sgt <8 x i32> %75, %1298
  %1300 = select <8 x i1> %1293, <8 x i32> %1292, <8 x i32> %75
  %1301 = select <8 x i1> %1295, <8 x i32> %1294, <8 x i32> %75
  %1302 = select <8 x i1> %1297, <8 x i32> %1296, <8 x i32> %75
  %1303 = select <8 x i1> %1299, <8 x i32> %1298, <8 x i32> %75
  %1304 = icmp sgt <8 x i32> %1300, %77
  %1305 = icmp sgt <8 x i32> %1301, %77
  %1306 = icmp sgt <8 x i32> %1302, %77
  %1307 = icmp sgt <8 x i32> %1303, %77
  %1308 = select <8 x i1> %1304, <8 x i32> %1300, <8 x i32> %77
  %1309 = select <8 x i1> %1305, <8 x i32> %1301, <8 x i32> %77
  %1310 = select <8 x i1> %1306, <8 x i32> %1302, <8 x i32> %77
  %1311 = select <8 x i1> %1307, <8 x i32> %1303, <8 x i32> %77
  %1312 = shufflevector <8 x i32> %1308, <8 x i32> %1309, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1313 = shufflevector <8 x i32> %1310, <8 x i32> %1311, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1314 = shufflevector <16 x i32> %1312, <16 x i32> %1313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1315 = add nsw <32 x i32> %1314, %1277
  %1316 = extractelement <32 x i32> %1315, i32 0
  %1317 = sext i32 %1316 to i64
  %1318 = getelementptr inbounds i16, i16* %64, i64 %1317
  %1319 = load i16, i16* %1318, align 2, !tbaa !393
  %1320 = insertelement <32 x i16> undef, i16 %1319, i32 0
  %1321 = extractelement <32 x i32> %1315, i32 1
  %1322 = sext i32 %1321 to i64
  %1323 = getelementptr inbounds i16, i16* %64, i64 %1322
  %1324 = load i16, i16* %1323, align 2, !tbaa !393
  %1325 = insertelement <32 x i16> %1320, i16 %1324, i32 1
  %1326 = extractelement <32 x i32> %1315, i32 2
  %1327 = sext i32 %1326 to i64
  %1328 = getelementptr inbounds i16, i16* %64, i64 %1327
  %1329 = load i16, i16* %1328, align 2, !tbaa !393
  %1330 = insertelement <32 x i16> %1325, i16 %1329, i32 2
  %1331 = extractelement <32 x i32> %1315, i32 3
  %1332 = sext i32 %1331 to i64
  %1333 = getelementptr inbounds i16, i16* %64, i64 %1332
  %1334 = load i16, i16* %1333, align 2, !tbaa !393
  %1335 = insertelement <32 x i16> %1330, i16 %1334, i32 3
  %1336 = extractelement <32 x i32> %1315, i32 4
  %1337 = sext i32 %1336 to i64
  %1338 = getelementptr inbounds i16, i16* %64, i64 %1337
  %1339 = load i16, i16* %1338, align 2, !tbaa !393
  %1340 = insertelement <32 x i16> %1335, i16 %1339, i32 4
  %1341 = extractelement <32 x i32> %1315, i32 5
  %1342 = sext i32 %1341 to i64
  %1343 = getelementptr inbounds i16, i16* %64, i64 %1342
  %1344 = load i16, i16* %1343, align 2, !tbaa !393
  %1345 = insertelement <32 x i16> %1340, i16 %1344, i32 5
  %1346 = extractelement <32 x i32> %1315, i32 6
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds i16, i16* %64, i64 %1347
  %1349 = load i16, i16* %1348, align 2, !tbaa !393
  %1350 = insertelement <32 x i16> %1345, i16 %1349, i32 6
  %1351 = extractelement <32 x i32> %1315, i32 7
  %1352 = sext i32 %1351 to i64
  %1353 = getelementptr inbounds i16, i16* %64, i64 %1352
  %1354 = load i16, i16* %1353, align 2, !tbaa !393
  %1355 = insertelement <32 x i16> %1350, i16 %1354, i32 7
  %1356 = extractelement <32 x i32> %1315, i32 8
  %1357 = sext i32 %1356 to i64
  %1358 = getelementptr inbounds i16, i16* %64, i64 %1357
  %1359 = load i16, i16* %1358, align 2, !tbaa !393
  %1360 = insertelement <32 x i16> %1355, i16 %1359, i32 8
  %1361 = extractelement <32 x i32> %1315, i32 9
  %1362 = sext i32 %1361 to i64
  %1363 = getelementptr inbounds i16, i16* %64, i64 %1362
  %1364 = load i16, i16* %1363, align 2, !tbaa !393
  %1365 = insertelement <32 x i16> %1360, i16 %1364, i32 9
  %1366 = extractelement <32 x i32> %1315, i32 10
  %1367 = sext i32 %1366 to i64
  %1368 = getelementptr inbounds i16, i16* %64, i64 %1367
  %1369 = load i16, i16* %1368, align 2, !tbaa !393
  %1370 = insertelement <32 x i16> %1365, i16 %1369, i32 10
  %1371 = extractelement <32 x i32> %1315, i32 11
  %1372 = sext i32 %1371 to i64
  %1373 = getelementptr inbounds i16, i16* %64, i64 %1372
  %1374 = load i16, i16* %1373, align 2, !tbaa !393
  %1375 = insertelement <32 x i16> %1370, i16 %1374, i32 11
  %1376 = extractelement <32 x i32> %1315, i32 12
  %1377 = sext i32 %1376 to i64
  %1378 = getelementptr inbounds i16, i16* %64, i64 %1377
  %1379 = load i16, i16* %1378, align 2, !tbaa !393
  %1380 = insertelement <32 x i16> %1375, i16 %1379, i32 12
  %1381 = extractelement <32 x i32> %1315, i32 13
  %1382 = sext i32 %1381 to i64
  %1383 = getelementptr inbounds i16, i16* %64, i64 %1382
  %1384 = load i16, i16* %1383, align 2, !tbaa !393
  %1385 = insertelement <32 x i16> %1380, i16 %1384, i32 13
  %1386 = extractelement <32 x i32> %1315, i32 14
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds i16, i16* %64, i64 %1387
  %1389 = load i16, i16* %1388, align 2, !tbaa !393
  %1390 = insertelement <32 x i16> %1385, i16 %1389, i32 14
  %1391 = extractelement <32 x i32> %1315, i32 15
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds i16, i16* %64, i64 %1392
  %1394 = load i16, i16* %1393, align 2, !tbaa !393
  %1395 = insertelement <32 x i16> %1390, i16 %1394, i32 15
  %1396 = extractelement <32 x i32> %1315, i32 16
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds i16, i16* %64, i64 %1397
  %1399 = load i16, i16* %1398, align 2, !tbaa !393
  %1400 = insertelement <32 x i16> %1395, i16 %1399, i32 16
  %1401 = extractelement <32 x i32> %1315, i32 17
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds i16, i16* %64, i64 %1402
  %1404 = load i16, i16* %1403, align 2, !tbaa !393
  %1405 = insertelement <32 x i16> %1400, i16 %1404, i32 17
  %1406 = extractelement <32 x i32> %1315, i32 18
  %1407 = sext i32 %1406 to i64
  %1408 = getelementptr inbounds i16, i16* %64, i64 %1407
  %1409 = load i16, i16* %1408, align 2, !tbaa !393
  %1410 = insertelement <32 x i16> %1405, i16 %1409, i32 18
  %1411 = extractelement <32 x i32> %1315, i32 19
  %1412 = sext i32 %1411 to i64
  %1413 = getelementptr inbounds i16, i16* %64, i64 %1412
  %1414 = load i16, i16* %1413, align 2, !tbaa !393
  %1415 = insertelement <32 x i16> %1410, i16 %1414, i32 19
  %1416 = extractelement <32 x i32> %1315, i32 20
  %1417 = sext i32 %1416 to i64
  %1418 = getelementptr inbounds i16, i16* %64, i64 %1417
  %1419 = load i16, i16* %1418, align 2, !tbaa !393
  %1420 = insertelement <32 x i16> %1415, i16 %1419, i32 20
  %1421 = extractelement <32 x i32> %1315, i32 21
  %1422 = sext i32 %1421 to i64
  %1423 = getelementptr inbounds i16, i16* %64, i64 %1422
  %1424 = load i16, i16* %1423, align 2, !tbaa !393
  %1425 = insertelement <32 x i16> %1420, i16 %1424, i32 21
  %1426 = extractelement <32 x i32> %1315, i32 22
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds i16, i16* %64, i64 %1427
  %1429 = load i16, i16* %1428, align 2, !tbaa !393
  %1430 = insertelement <32 x i16> %1425, i16 %1429, i32 22
  %1431 = extractelement <32 x i32> %1315, i32 23
  %1432 = sext i32 %1431 to i64
  %1433 = getelementptr inbounds i16, i16* %64, i64 %1432
  %1434 = load i16, i16* %1433, align 2, !tbaa !393
  %1435 = insertelement <32 x i16> %1430, i16 %1434, i32 23
  %1436 = extractelement <32 x i32> %1315, i32 24
  %1437 = sext i32 %1436 to i64
  %1438 = getelementptr inbounds i16, i16* %64, i64 %1437
  %1439 = load i16, i16* %1438, align 2, !tbaa !393
  %1440 = insertelement <32 x i16> %1435, i16 %1439, i32 24
  %1441 = extractelement <32 x i32> %1315, i32 25
  %1442 = sext i32 %1441 to i64
  %1443 = getelementptr inbounds i16, i16* %64, i64 %1442
  %1444 = load i16, i16* %1443, align 2, !tbaa !393
  %1445 = insertelement <32 x i16> %1440, i16 %1444, i32 25
  %1446 = extractelement <32 x i32> %1315, i32 26
  %1447 = sext i32 %1446 to i64
  %1448 = getelementptr inbounds i16, i16* %64, i64 %1447
  %1449 = load i16, i16* %1448, align 2, !tbaa !393
  %1450 = insertelement <32 x i16> %1445, i16 %1449, i32 26
  %1451 = extractelement <32 x i32> %1315, i32 27
  %1452 = sext i32 %1451 to i64
  %1453 = getelementptr inbounds i16, i16* %64, i64 %1452
  %1454 = load i16, i16* %1453, align 2, !tbaa !393
  %1455 = insertelement <32 x i16> %1450, i16 %1454, i32 27
  %1456 = extractelement <32 x i32> %1315, i32 28
  %1457 = sext i32 %1456 to i64
  %1458 = getelementptr inbounds i16, i16* %64, i64 %1457
  %1459 = load i16, i16* %1458, align 2, !tbaa !393
  %1460 = insertelement <32 x i16> %1455, i16 %1459, i32 28
  %1461 = extractelement <32 x i32> %1315, i32 29
  %1462 = sext i32 %1461 to i64
  %1463 = getelementptr inbounds i16, i16* %64, i64 %1462
  %1464 = load i16, i16* %1463, align 2, !tbaa !393
  %1465 = insertelement <32 x i16> %1460, i16 %1464, i32 29
  %1466 = extractelement <32 x i32> %1315, i32 30
  %1467 = sext i32 %1466 to i64
  %1468 = getelementptr inbounds i16, i16* %64, i64 %1467
  %1469 = load i16, i16* %1468, align 2, !tbaa !393
  %1470 = insertelement <32 x i16> %1465, i16 %1469, i32 30
  %1471 = extractelement <32 x i32> %1315, i32 31
  %1472 = sext i32 %1471 to i64
  %1473 = getelementptr inbounds i16, i16* %64, i64 %1472
  %1474 = load i16, i16* %1473, align 2, !tbaa !393
  %1475 = insertelement <32 x i16> %1470, i16 %1474, i32 31
  %1476 = shufflevector <32 x i16> %1475, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1477 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1478 = add nsw i64 %1280, %1477
  %1479 = getelementptr inbounds i16, i16* %read_input, i64 %1478
  %1480 = getelementptr inbounds i16, i16* %1479, i64 -32
  %1481 = bitcast i16* %1480 to <16 x i16>*
  store <16 x i16> %1476, <16 x i16>* %1481, align 2, !tbaa !396
  %1482 = shufflevector <32 x i16> %1475, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1483 = getelementptr inbounds i16, i16* %1479, i64 -16
  %1484 = bitcast i16* %1483 to <16 x i16>*
  store <16 x i16> %1482, <16 x i16>* %1484, align 2, !tbaa !396
  %1485 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2768 = icmp eq i32 %1485, %20
  br i1 %.not2768, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3246 = add nuw nsw i64 %indvars.iv3245, 1
  %.not2767 = icmp eq i64 %indvars.iv3245, %777
  br i1 %.not2767, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2840
  %1486 = alloca i8*, i64 %92, align 32
  %1487 = bitcast i8** %1486 to i16*
  store i8** %1486, i8*** %93, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2840, %then_bb21
  %blur_x = phi i16* [ %1487, %then_bb21 ], [ %1286, %pseudostack_alloc.exit2840 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3441 = and i32 %a26, 7
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3441, %"consume read_input.after_bb22_crit_edge" ], [ %1534, %"produce blur_x" ]
  %1488 = mul nsw i32 %.pre-phi, %a73
  %t1682 = sub nsw i32 %1488, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1489 = sext i32 %t1682 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1490 = getelementptr inbounds i16, i16* %read_input, i64 %94
  %1491 = getelementptr inbounds i16, i16* %1490, i64 -31
  %1492 = bitcast i16* %1491 to <16 x i16>*
  %1493 = load <16 x i16>, <16 x i16>* %1492, align 2, !tbaa !396
  %1494 = getelementptr inbounds i16, i16* %1490, i64 -15
  %1495 = bitcast i16* %1494 to <16 x i16>*
  %1496 = load <16 x i16>, <16 x i16>* %1495, align 2, !tbaa !396
  %1497 = getelementptr inbounds i16, i16* %1490, i64 -32
  %1498 = bitcast i16* %1497 to <16 x i16>*
  %1499 = load <16 x i16>, <16 x i16>* %1498, align 2, !tbaa !396
  %1500 = getelementptr inbounds i16, i16* %1490, i64 -16
  %1501 = bitcast i16* %1500 to <16 x i16>*
  %1502 = load <16 x i16>, <16 x i16>* %1501, align 2, !tbaa !396
  %1503 = getelementptr inbounds i16, i16* %1490, i64 -30
  %1504 = bitcast i16* %1503 to <16 x i16>*
  %1505 = load <16 x i16>, <16 x i16>* %1504, align 2, !tbaa !396
  %1506 = getelementptr inbounds i16, i16* %1490, i64 -14
  %1507 = bitcast i16* %1506 to <16 x i16>*
  %1508 = load <16 x i16>, <16 x i16>* %1507, align 2, !tbaa !396
  %1509 = getelementptr inbounds i16, i16* %1490, i64 -28
  %1510 = bitcast i16* %1509 to <16 x i16>*
  %1511 = load <16 x i16>, <16 x i16>* %1510, align 2, !tbaa !396
  %1512 = getelementptr inbounds i16, i16* %1490, i64 -12
  %1513 = bitcast i16* %1512 to <16 x i16>*
  %1514 = load <16 x i16>, <16 x i16>* %1513, align 2, !tbaa !396
  %1515 = getelementptr inbounds i16, i16* %1490, i64 -29
  %1516 = bitcast i16* %1515 to <16 x i16>*
  %1517 = load <16 x i16>, <16 x i16>* %1516, align 2, !tbaa !396
  %1518 = getelementptr inbounds i16, i16* %1490, i64 -13
  %1519 = bitcast i16* %1518 to <16 x i16>*
  %1520 = load <16 x i16>, <16 x i16>* %1519, align 2, !tbaa !396
  %1521 = add <16 x i16> %1499, %1493
  %1522 = add <16 x i16> %1521, %1505
  %1523 = add <16 x i16> %1522, %1511
  %1524 = add <16 x i16> %1523, %1517
  %1525 = add <16 x i16> %1502, %1496
  %1526 = add <16 x i16> %1525, %1508
  %1527 = add <16 x i16> %1526, %1514
  %1528 = add <16 x i16> %1527, %1520
  %1529 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1524, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1530 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1528, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1531 = shufflevector <16 x i16> %1529, <16 x i16> %1530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1532 = lshr <32 x i16> %1531, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1533 = shufflevector <32 x i16> %1532, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1534 = and i32 %a26, 7
  %1535 = zext i32 %1534 to i64
  %1536 = mul nsw i64 %97, %1535
  %1537 = add nsw i64 %99, %1536
  %1538 = getelementptr inbounds i16, i16* %blur_x, i64 %1537
  %1539 = getelementptr inbounds i16, i16* %1538, i64 -32
  %1540 = bitcast i16* %1539 to <16 x i16>*
  store <16 x i16> %1533, <16 x i16>* %1540, align 2, !tbaa !399
  %1541 = shufflevector <32 x i16> %1532, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1542 = getelementptr inbounds i16, i16* %1538, i64 -16
  %1543 = bitcast i16* %1542 to <16 x i16>*
  store <16 x i16> %1541, <16 x i16>* %1543, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3247 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3248, %after_bb24 ]
  %1544 = add nsw i64 %indvars.iv3247, %101
  %1545 = icmp slt i64 %1544, 1
  %1546 = trunc i64 %1544 to i32
  %1547 = shl nsw i32 %1546, 5
  %1548 = icmp sgt i32 %4, %1547
  %1549 = or i1 %1545, %1548
  br i1 %1549, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %102, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1550 = sext i32 %t1682 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3248 = add nuw nsw i64 %indvars.iv3247, 1
  %.not2765 = icmp eq i64 %indvars.iv.next3248, %184
  br i1 %.not2765, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t684 = sub i32 %1547, %t1645
  %1551 = sext i32 %t684 to i64
  %1552 = getelementptr inbounds i16, i16* %read_input, i64 %1551
  %1553 = getelementptr inbounds i16, i16* %1552, i64 1
  %1554 = bitcast i16* %1553 to <16 x i16>*
  %1555 = load <16 x i16>, <16 x i16>* %1554, align 2, !tbaa !396
  %1556 = getelementptr inbounds i16, i16* %1552, i64 17
  %1557 = bitcast i16* %1556 to <16 x i16>*
  %1558 = load <16 x i16>, <16 x i16>* %1557, align 2, !tbaa !396
  %1559 = bitcast i16* %1552 to <16 x i16>*
  %1560 = load <16 x i16>, <16 x i16>* %1559, align 2, !tbaa !396
  %1561 = getelementptr inbounds i16, i16* %1552, i64 16
  %1562 = bitcast i16* %1561 to <16 x i16>*
  %1563 = load <16 x i16>, <16 x i16>* %1562, align 2, !tbaa !396
  %1564 = getelementptr inbounds i16, i16* %1552, i64 2
  %1565 = bitcast i16* %1564 to <16 x i16>*
  %1566 = load <16 x i16>, <16 x i16>* %1565, align 2, !tbaa !396
  %1567 = getelementptr inbounds i16, i16* %1552, i64 18
  %1568 = bitcast i16* %1567 to <16 x i16>*
  %1569 = load <16 x i16>, <16 x i16>* %1568, align 2, !tbaa !396
  %1570 = getelementptr inbounds i16, i16* %1552, i64 4
  %1571 = bitcast i16* %1570 to <16 x i16>*
  %1572 = load <16 x i16>, <16 x i16>* %1571, align 2, !tbaa !396
  %1573 = getelementptr inbounds i16, i16* %1552, i64 20
  %1574 = bitcast i16* %1573 to <16 x i16>*
  %1575 = load <16 x i16>, <16 x i16>* %1574, align 2, !tbaa !396
  %1576 = getelementptr inbounds i16, i16* %1552, i64 3
  %1577 = bitcast i16* %1576 to <16 x i16>*
  %1578 = load <16 x i16>, <16 x i16>* %1577, align 2, !tbaa !396
  %1579 = getelementptr inbounds i16, i16* %1552, i64 19
  %1580 = bitcast i16* %1579 to <16 x i16>*
  %1581 = load <16 x i16>, <16 x i16>* %1580, align 2, !tbaa !396
  %1582 = add <16 x i16> %1560, %1555
  %1583 = add <16 x i16> %1582, %1566
  %1584 = add <16 x i16> %1583, %1572
  %1585 = add <16 x i16> %1584, %1578
  %1586 = add <16 x i16> %1563, %1558
  %1587 = add <16 x i16> %1586, %1569
  %1588 = add <16 x i16> %1587, %1575
  %1589 = add <16 x i16> %1588, %1581
  %1590 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1585, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1591 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1589, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1592 = shufflevector <16 x i16> %1590, <16 x i16> %1591, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1593 = lshr <32 x i16> %1592, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1594 = shufflevector <32 x i16> %1593, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1595 = shl nsw i64 %1544, 5
  %1596 = add nsw i64 %1595, %1489
  %1597 = getelementptr inbounds i16, i16* %blur_x, i64 %1596
  %1598 = bitcast i16* %1597 to <16 x i16>*
  store <16 x i16> %1594, <16 x i16>* %1598, align 2, !tbaa !399
  %1599 = shufflevector <32 x i16> %1593, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1600 = getelementptr inbounds i16, i16* %1597, i64 16
  %1601 = bitcast i16* %1600 to <16 x i16>*
  store <16 x i16> %1599, <16 x i16>* %1601, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1606, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2219 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1626
  %1602 = icmp slt i32 %t2219, 1
  %1603 = shl nsw i32 %t2219, 5
  %1604 = icmp sgt i32 %4, %1603
  %1605 = or i1 %1602, %1604
  br i1 %1605, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3442 = add nsw i32 %a26, 1
  %.pre3444 = and i32 %.pre3442, 7
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1606 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2764 = icmp eq i32 %1606, %t1683
  br i1 %.not2764, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1607 = icmp sgt i32 %a14, %1603
  %b83 = select i1 %1607, i32 %1603, i32 %a14
  %1608 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1608, i32 %b83, i32 %4
  %t686 = sub i32 %blur_x.s0.x.v1.base.s, %t1645
  %1609 = sext i32 %t686 to i64
  %1610 = getelementptr inbounds i16, i16* %read_input, i64 %1609
  %1611 = getelementptr inbounds i16, i16* %1610, i64 1
  %1612 = bitcast i16* %1611 to <16 x i16>*
  %1613 = load <16 x i16>, <16 x i16>* %1612, align 2, !tbaa !396
  %1614 = getelementptr inbounds i16, i16* %1610, i64 17
  %1615 = bitcast i16* %1614 to <16 x i16>*
  %1616 = load <16 x i16>, <16 x i16>* %1615, align 2, !tbaa !396
  %1617 = bitcast i16* %1610 to <16 x i16>*
  %1618 = load <16 x i16>, <16 x i16>* %1617, align 2, !tbaa !396
  %1619 = getelementptr inbounds i16, i16* %1610, i64 16
  %1620 = bitcast i16* %1619 to <16 x i16>*
  %1621 = load <16 x i16>, <16 x i16>* %1620, align 2, !tbaa !396
  %1622 = getelementptr inbounds i16, i16* %1610, i64 2
  %1623 = bitcast i16* %1622 to <16 x i16>*
  %1624 = load <16 x i16>, <16 x i16>* %1623, align 2, !tbaa !396
  %1625 = getelementptr inbounds i16, i16* %1610, i64 18
  %1626 = bitcast i16* %1625 to <16 x i16>*
  %1627 = load <16 x i16>, <16 x i16>* %1626, align 2, !tbaa !396
  %1628 = getelementptr inbounds i16, i16* %1610, i64 4
  %1629 = bitcast i16* %1628 to <16 x i16>*
  %1630 = load <16 x i16>, <16 x i16>* %1629, align 2, !tbaa !396
  %1631 = getelementptr inbounds i16, i16* %1610, i64 20
  %1632 = bitcast i16* %1631 to <16 x i16>*
  %1633 = load <16 x i16>, <16 x i16>* %1632, align 2, !tbaa !396
  %1634 = getelementptr inbounds i16, i16* %1610, i64 3
  %1635 = bitcast i16* %1634 to <16 x i16>*
  %1636 = load <16 x i16>, <16 x i16>* %1635, align 2, !tbaa !396
  %1637 = getelementptr inbounds i16, i16* %1610, i64 19
  %1638 = bitcast i16* %1637 to <16 x i16>*
  %1639 = load <16 x i16>, <16 x i16>* %1638, align 2, !tbaa !396
  %1640 = add <16 x i16> %1618, %1613
  %1641 = add <16 x i16> %1640, %1624
  %1642 = add <16 x i16> %1641, %1630
  %1643 = add <16 x i16> %1642, %1636
  %1644 = add <16 x i16> %1621, %1616
  %1645 = add <16 x i16> %1644, %1627
  %1646 = add <16 x i16> %1645, %1633
  %1647 = add <16 x i16> %1646, %1639
  %1648 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1643, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1649 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1647, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1650 = shufflevector <16 x i16> %1648, <16 x i16> %1649, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1651 = lshr <32 x i16> %1650, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1652 = shufflevector <32 x i16> %1651, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1653 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1654 = add nsw i64 %1653, %1550
  %1655 = getelementptr inbounds i16, i16* %blur_x, i64 %1654
  %1656 = bitcast i16* %1655 to <16 x i16>*
  store <16 x i16> %1652, <16 x i16>* %1656, align 2, !tbaa !399
  %1657 = shufflevector <32 x i16> %1651, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1658 = getelementptr inbounds i16, i16* %1655, i64 16
  %1659 = bitcast i16* %1658 to <16 x i16>*
  store <16 x i16> %1657, <16 x i16>* %1659, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3445 = phi i32 [ %.pre3444, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1707, %"produce blur_x38" ]
  %1660 = mul nsw i32 %.pre-phi3445, %a73
  %t1688 = sub nsw i32 %1660, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1661 = sext i32 %t1688 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1662 = getelementptr inbounds i16, i16* %read_input, i64 %103
  %1663 = getelementptr inbounds i16, i16* %1662, i64 -31
  %1664 = bitcast i16* %1663 to <16 x i16>*
  %1665 = load <16 x i16>, <16 x i16>* %1664, align 2, !tbaa !396
  %1666 = getelementptr inbounds i16, i16* %1662, i64 -15
  %1667 = bitcast i16* %1666 to <16 x i16>*
  %1668 = load <16 x i16>, <16 x i16>* %1667, align 2, !tbaa !396
  %1669 = getelementptr inbounds i16, i16* %1662, i64 -32
  %1670 = bitcast i16* %1669 to <16 x i16>*
  %1671 = load <16 x i16>, <16 x i16>* %1670, align 2, !tbaa !396
  %1672 = getelementptr inbounds i16, i16* %1662, i64 -16
  %1673 = bitcast i16* %1672 to <16 x i16>*
  %1674 = load <16 x i16>, <16 x i16>* %1673, align 2, !tbaa !396
  %1675 = getelementptr inbounds i16, i16* %1662, i64 -30
  %1676 = bitcast i16* %1675 to <16 x i16>*
  %1677 = load <16 x i16>, <16 x i16>* %1676, align 2, !tbaa !396
  %1678 = getelementptr inbounds i16, i16* %1662, i64 -14
  %1679 = bitcast i16* %1678 to <16 x i16>*
  %1680 = load <16 x i16>, <16 x i16>* %1679, align 2, !tbaa !396
  %1681 = getelementptr inbounds i16, i16* %1662, i64 -28
  %1682 = bitcast i16* %1681 to <16 x i16>*
  %1683 = load <16 x i16>, <16 x i16>* %1682, align 2, !tbaa !396
  %1684 = getelementptr inbounds i16, i16* %1662, i64 -12
  %1685 = bitcast i16* %1684 to <16 x i16>*
  %1686 = load <16 x i16>, <16 x i16>* %1685, align 2, !tbaa !396
  %1687 = getelementptr inbounds i16, i16* %1662, i64 -29
  %1688 = bitcast i16* %1687 to <16 x i16>*
  %1689 = load <16 x i16>, <16 x i16>* %1688, align 2, !tbaa !396
  %1690 = getelementptr inbounds i16, i16* %1662, i64 -13
  %1691 = bitcast i16* %1690 to <16 x i16>*
  %1692 = load <16 x i16>, <16 x i16>* %1691, align 2, !tbaa !396
  %1693 = add <16 x i16> %1671, %1665
  %1694 = add <16 x i16> %1693, %1677
  %1695 = add <16 x i16> %1694, %1683
  %1696 = add <16 x i16> %1695, %1689
  %1697 = add <16 x i16> %1674, %1668
  %1698 = add <16 x i16> %1697, %1680
  %1699 = add <16 x i16> %1698, %1686
  %1700 = add <16 x i16> %1699, %1692
  %1701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1696, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1700, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1703 = shufflevector <16 x i16> %1701, <16 x i16> %1702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1704 = lshr <32 x i16> %1703, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1705 = shufflevector <32 x i16> %1704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1706 = add nsw i32 %a26, 1
  %1707 = and i32 %1706, 7
  %1708 = zext i32 %1707 to i64
  %1709 = mul nsw i64 %97, %1708
  %1710 = add nsw i64 %99, %1709
  %1711 = getelementptr inbounds i16, i16* %blur_x, i64 %1710
  %1712 = getelementptr inbounds i16, i16* %1711, i64 -32
  %1713 = bitcast i16* %1712 to <16 x i16>*
  store <16 x i16> %1705, <16 x i16>* %1713, align 2, !tbaa !399
  %1714 = shufflevector <32 x i16> %1704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1715 = getelementptr inbounds i16, i16* %1711, i64 -16
  %1716 = bitcast i16* %1715 to <16 x i16>*
  store <16 x i16> %1714, <16 x i16>* %1716, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3250 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3251, %after_bb42 ]
  %1717 = add nsw i64 %indvars.iv3250, %101
  %1718 = icmp slt i64 %1717, 1
  %1719 = trunc i64 %1717 to i32
  %1720 = shl nsw i32 %1719, 5
  %1721 = icmp sgt i32 %4, %1720
  %1722 = or i1 %1718, %1721
  br i1 %1722, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %102, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1723 = sext i32 %t1688 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3251 = add nuw nsw i64 %indvars.iv3250, 1
  %.not2763 = icmp eq i64 %indvars.iv.next3251, %184
  br i1 %.not2763, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t690 = add nsw i32 %1720, %t1687
  %1724 = sext i32 %t690 to i64
  %1725 = getelementptr inbounds i16, i16* %read_input, i64 %1724
  %1726 = getelementptr inbounds i16, i16* %1725, i64 1
  %1727 = bitcast i16* %1726 to <16 x i16>*
  %1728 = load <16 x i16>, <16 x i16>* %1727, align 2, !tbaa !396
  %1729 = getelementptr inbounds i16, i16* %1725, i64 17
  %1730 = bitcast i16* %1729 to <16 x i16>*
  %1731 = load <16 x i16>, <16 x i16>* %1730, align 2, !tbaa !396
  %1732 = bitcast i16* %1725 to <16 x i16>*
  %1733 = load <16 x i16>, <16 x i16>* %1732, align 2, !tbaa !396
  %1734 = getelementptr inbounds i16, i16* %1725, i64 16
  %1735 = bitcast i16* %1734 to <16 x i16>*
  %1736 = load <16 x i16>, <16 x i16>* %1735, align 2, !tbaa !396
  %1737 = getelementptr inbounds i16, i16* %1725, i64 2
  %1738 = bitcast i16* %1737 to <16 x i16>*
  %1739 = load <16 x i16>, <16 x i16>* %1738, align 2, !tbaa !396
  %1740 = getelementptr inbounds i16, i16* %1725, i64 18
  %1741 = bitcast i16* %1740 to <16 x i16>*
  %1742 = load <16 x i16>, <16 x i16>* %1741, align 2, !tbaa !396
  %1743 = getelementptr inbounds i16, i16* %1725, i64 4
  %1744 = bitcast i16* %1743 to <16 x i16>*
  %1745 = load <16 x i16>, <16 x i16>* %1744, align 2, !tbaa !396
  %1746 = getelementptr inbounds i16, i16* %1725, i64 20
  %1747 = bitcast i16* %1746 to <16 x i16>*
  %1748 = load <16 x i16>, <16 x i16>* %1747, align 2, !tbaa !396
  %1749 = getelementptr inbounds i16, i16* %1725, i64 3
  %1750 = bitcast i16* %1749 to <16 x i16>*
  %1751 = load <16 x i16>, <16 x i16>* %1750, align 2, !tbaa !396
  %1752 = getelementptr inbounds i16, i16* %1725, i64 19
  %1753 = bitcast i16* %1752 to <16 x i16>*
  %1754 = load <16 x i16>, <16 x i16>* %1753, align 2, !tbaa !396
  %1755 = add <16 x i16> %1733, %1728
  %1756 = add <16 x i16> %1755, %1739
  %1757 = add <16 x i16> %1756, %1745
  %1758 = add <16 x i16> %1757, %1751
  %1759 = add <16 x i16> %1736, %1731
  %1760 = add <16 x i16> %1759, %1742
  %1761 = add <16 x i16> %1760, %1748
  %1762 = add <16 x i16> %1761, %1754
  %1763 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1758, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1762, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1765 = shufflevector <16 x i16> %1763, <16 x i16> %1764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1766 = lshr <32 x i16> %1765, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1767 = shufflevector <32 x i16> %1766, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1768 = shl nsw i64 %1717, 5
  %1769 = add nsw i64 %1768, %1661
  %1770 = getelementptr inbounds i16, i16* %blur_x, i64 %1769
  %1771 = bitcast i16* %1770 to <16 x i16>*
  store <16 x i16> %1767, <16 x i16>* %1771, align 2, !tbaa !399
  %1772 = shufflevector <32 x i16> %1766, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1773 = getelementptr inbounds i16, i16* %1770, i64 16
  %1774 = bitcast i16* %1773 to <16 x i16>*
  store <16 x i16> %1772, <16 x i16>* %1774, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1779, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2221 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1626
  %1775 = icmp slt i32 %t2221, 1
  %1776 = shl nsw i32 %t2221, 5
  %1777 = icmp sgt i32 %4, %1776
  %1778 = or i1 %1775, %1777
  br i1 %1778, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3446 = add nsw i32 %a26, 2
  %.pre3448 = and i32 %.pre3446, 7
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1779 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2762 = icmp eq i32 %1779, %t1683
  br i1 %.not2762, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1780 = icmp sgt i32 %a14, %1776
  %b90 = select i1 %1780, i32 %1776, i32 %a14
  %1781 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1781, i32 %b90, i32 %4
  %t692 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1687
  %1782 = sext i32 %t692 to i64
  %1783 = getelementptr inbounds i16, i16* %read_input, i64 %1782
  %1784 = getelementptr inbounds i16, i16* %1783, i64 1
  %1785 = bitcast i16* %1784 to <16 x i16>*
  %1786 = load <16 x i16>, <16 x i16>* %1785, align 2, !tbaa !396
  %1787 = getelementptr inbounds i16, i16* %1783, i64 17
  %1788 = bitcast i16* %1787 to <16 x i16>*
  %1789 = load <16 x i16>, <16 x i16>* %1788, align 2, !tbaa !396
  %1790 = bitcast i16* %1783 to <16 x i16>*
  %1791 = load <16 x i16>, <16 x i16>* %1790, align 2, !tbaa !396
  %1792 = getelementptr inbounds i16, i16* %1783, i64 16
  %1793 = bitcast i16* %1792 to <16 x i16>*
  %1794 = load <16 x i16>, <16 x i16>* %1793, align 2, !tbaa !396
  %1795 = getelementptr inbounds i16, i16* %1783, i64 2
  %1796 = bitcast i16* %1795 to <16 x i16>*
  %1797 = load <16 x i16>, <16 x i16>* %1796, align 2, !tbaa !396
  %1798 = getelementptr inbounds i16, i16* %1783, i64 18
  %1799 = bitcast i16* %1798 to <16 x i16>*
  %1800 = load <16 x i16>, <16 x i16>* %1799, align 2, !tbaa !396
  %1801 = getelementptr inbounds i16, i16* %1783, i64 4
  %1802 = bitcast i16* %1801 to <16 x i16>*
  %1803 = load <16 x i16>, <16 x i16>* %1802, align 2, !tbaa !396
  %1804 = getelementptr inbounds i16, i16* %1783, i64 20
  %1805 = bitcast i16* %1804 to <16 x i16>*
  %1806 = load <16 x i16>, <16 x i16>* %1805, align 2, !tbaa !396
  %1807 = getelementptr inbounds i16, i16* %1783, i64 3
  %1808 = bitcast i16* %1807 to <16 x i16>*
  %1809 = load <16 x i16>, <16 x i16>* %1808, align 2, !tbaa !396
  %1810 = getelementptr inbounds i16, i16* %1783, i64 19
  %1811 = bitcast i16* %1810 to <16 x i16>*
  %1812 = load <16 x i16>, <16 x i16>* %1811, align 2, !tbaa !396
  %1813 = add <16 x i16> %1791, %1786
  %1814 = add <16 x i16> %1813, %1797
  %1815 = add <16 x i16> %1814, %1803
  %1816 = add <16 x i16> %1815, %1809
  %1817 = add <16 x i16> %1794, %1789
  %1818 = add <16 x i16> %1817, %1800
  %1819 = add <16 x i16> %1818, %1806
  %1820 = add <16 x i16> %1819, %1812
  %1821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1816, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1822 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1820, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1823 = shufflevector <16 x i16> %1821, <16 x i16> %1822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1824 = lshr <32 x i16> %1823, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1825 = shufflevector <32 x i16> %1824, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1826 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1827 = add nsw i64 %1826, %1723
  %1828 = getelementptr inbounds i16, i16* %blur_x, i64 %1827
  %1829 = bitcast i16* %1828 to <16 x i16>*
  store <16 x i16> %1825, <16 x i16>* %1829, align 2, !tbaa !399
  %1830 = shufflevector <32 x i16> %1824, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1831 = getelementptr inbounds i16, i16* %1828, i64 16
  %1832 = bitcast i16* %1831 to <16 x i16>*
  store <16 x i16> %1830, <16 x i16>* %1832, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3449 = phi i32 [ %.pre3448, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %1880, %"produce blur_x57" ]
  %1833 = mul nsw i32 %.pre-phi3449, %a73
  %t1694 = sub nsw i32 %1833, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1834 = sext i32 %t1694 to i64
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1835 = getelementptr inbounds i16, i16* %read_input, i64 %105
  %1836 = getelementptr inbounds i16, i16* %1835, i64 -31
  %1837 = bitcast i16* %1836 to <16 x i16>*
  %1838 = load <16 x i16>, <16 x i16>* %1837, align 2, !tbaa !396
  %1839 = getelementptr inbounds i16, i16* %1835, i64 -15
  %1840 = bitcast i16* %1839 to <16 x i16>*
  %1841 = load <16 x i16>, <16 x i16>* %1840, align 2, !tbaa !396
  %1842 = getelementptr inbounds i16, i16* %1835, i64 -32
  %1843 = bitcast i16* %1842 to <16 x i16>*
  %1844 = load <16 x i16>, <16 x i16>* %1843, align 2, !tbaa !396
  %1845 = getelementptr inbounds i16, i16* %1835, i64 -16
  %1846 = bitcast i16* %1845 to <16 x i16>*
  %1847 = load <16 x i16>, <16 x i16>* %1846, align 2, !tbaa !396
  %1848 = getelementptr inbounds i16, i16* %1835, i64 -30
  %1849 = bitcast i16* %1848 to <16 x i16>*
  %1850 = load <16 x i16>, <16 x i16>* %1849, align 2, !tbaa !396
  %1851 = getelementptr inbounds i16, i16* %1835, i64 -14
  %1852 = bitcast i16* %1851 to <16 x i16>*
  %1853 = load <16 x i16>, <16 x i16>* %1852, align 2, !tbaa !396
  %1854 = getelementptr inbounds i16, i16* %1835, i64 -28
  %1855 = bitcast i16* %1854 to <16 x i16>*
  %1856 = load <16 x i16>, <16 x i16>* %1855, align 2, !tbaa !396
  %1857 = getelementptr inbounds i16, i16* %1835, i64 -12
  %1858 = bitcast i16* %1857 to <16 x i16>*
  %1859 = load <16 x i16>, <16 x i16>* %1858, align 2, !tbaa !396
  %1860 = getelementptr inbounds i16, i16* %1835, i64 -29
  %1861 = bitcast i16* %1860 to <16 x i16>*
  %1862 = load <16 x i16>, <16 x i16>* %1861, align 2, !tbaa !396
  %1863 = getelementptr inbounds i16, i16* %1835, i64 -13
  %1864 = bitcast i16* %1863 to <16 x i16>*
  %1865 = load <16 x i16>, <16 x i16>* %1864, align 2, !tbaa !396
  %1866 = add <16 x i16> %1844, %1838
  %1867 = add <16 x i16> %1866, %1850
  %1868 = add <16 x i16> %1867, %1856
  %1869 = add <16 x i16> %1868, %1862
  %1870 = add <16 x i16> %1847, %1841
  %1871 = add <16 x i16> %1870, %1853
  %1872 = add <16 x i16> %1871, %1859
  %1873 = add <16 x i16> %1872, %1865
  %1874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1869, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1873, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1876 = shufflevector <16 x i16> %1874, <16 x i16> %1875, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1877 = lshr <32 x i16> %1876, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1878 = shufflevector <32 x i16> %1877, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1879 = add nsw i32 %a26, 2
  %1880 = and i32 %1879, 7
  %1881 = zext i32 %1880 to i64
  %1882 = mul nsw i64 %97, %1881
  %1883 = add nsw i64 %99, %1882
  %1884 = getelementptr inbounds i16, i16* %blur_x, i64 %1883
  %1885 = getelementptr inbounds i16, i16* %1884, i64 -32
  %1886 = bitcast i16* %1885 to <16 x i16>*
  store <16 x i16> %1878, <16 x i16>* %1886, align 2, !tbaa !399
  %1887 = shufflevector <32 x i16> %1877, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1888 = getelementptr inbounds i16, i16* %1884, i64 -16
  %1889 = bitcast i16* %1888 to <16 x i16>*
  store <16 x i16> %1887, <16 x i16>* %1889, align 2, !tbaa !399
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %after_bb61
  %indvars.iv3253 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3254, %after_bb61 ]
  %1890 = add nsw i64 %indvars.iv3253, %101
  %1891 = icmp slt i64 %1890, 1
  %1892 = trunc i64 %1890 to i32
  %1893 = shl nsw i32 %1892, 5
  %1894 = icmp sgt i32 %4, %1893
  %1895 = or i1 %1891, %1894
  br i1 %1895, label %"produce blur_x64", label %after_bb61

"end for blur_y.s0.x.x.rebased59":                ; preds = %after_bb61, %after_bb54
  br i1 %102, label %"for blur_y.s0.x.x.rebased65.preheader", label %"end for blur_y.s0.x.x.rebased66", !prof !386

"for blur_y.s0.x.x.rebased65.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %1896 = sext i32 %t1694 to i64
  br label %"for blur_y.s0.x.x.rebased65"

after_bb61:                                       ; preds = %"for blur_y.s0.x.x.rebased58", %"produce blur_x64"
  %indvars.iv.next3254 = add nuw nsw i64 %indvars.iv3253, 1
  %.not2761 = icmp eq i64 %indvars.iv.next3254, %184
  br i1 %.not2761, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t696 = add nsw i32 %1893, %t1693
  %1897 = sext i32 %t696 to i64
  %1898 = getelementptr inbounds i16, i16* %read_input, i64 %1897
  %1899 = getelementptr inbounds i16, i16* %1898, i64 1
  %1900 = bitcast i16* %1899 to <16 x i16>*
  %1901 = load <16 x i16>, <16 x i16>* %1900, align 2, !tbaa !396
  %1902 = getelementptr inbounds i16, i16* %1898, i64 17
  %1903 = bitcast i16* %1902 to <16 x i16>*
  %1904 = load <16 x i16>, <16 x i16>* %1903, align 2, !tbaa !396
  %1905 = bitcast i16* %1898 to <16 x i16>*
  %1906 = load <16 x i16>, <16 x i16>* %1905, align 2, !tbaa !396
  %1907 = getelementptr inbounds i16, i16* %1898, i64 16
  %1908 = bitcast i16* %1907 to <16 x i16>*
  %1909 = load <16 x i16>, <16 x i16>* %1908, align 2, !tbaa !396
  %1910 = getelementptr inbounds i16, i16* %1898, i64 2
  %1911 = bitcast i16* %1910 to <16 x i16>*
  %1912 = load <16 x i16>, <16 x i16>* %1911, align 2, !tbaa !396
  %1913 = getelementptr inbounds i16, i16* %1898, i64 18
  %1914 = bitcast i16* %1913 to <16 x i16>*
  %1915 = load <16 x i16>, <16 x i16>* %1914, align 2, !tbaa !396
  %1916 = getelementptr inbounds i16, i16* %1898, i64 4
  %1917 = bitcast i16* %1916 to <16 x i16>*
  %1918 = load <16 x i16>, <16 x i16>* %1917, align 2, !tbaa !396
  %1919 = getelementptr inbounds i16, i16* %1898, i64 20
  %1920 = bitcast i16* %1919 to <16 x i16>*
  %1921 = load <16 x i16>, <16 x i16>* %1920, align 2, !tbaa !396
  %1922 = getelementptr inbounds i16, i16* %1898, i64 3
  %1923 = bitcast i16* %1922 to <16 x i16>*
  %1924 = load <16 x i16>, <16 x i16>* %1923, align 2, !tbaa !396
  %1925 = getelementptr inbounds i16, i16* %1898, i64 19
  %1926 = bitcast i16* %1925 to <16 x i16>*
  %1927 = load <16 x i16>, <16 x i16>* %1926, align 2, !tbaa !396
  %1928 = add <16 x i16> %1906, %1901
  %1929 = add <16 x i16> %1928, %1912
  %1930 = add <16 x i16> %1929, %1918
  %1931 = add <16 x i16> %1930, %1924
  %1932 = add <16 x i16> %1909, %1904
  %1933 = add <16 x i16> %1932, %1915
  %1934 = add <16 x i16> %1933, %1921
  %1935 = add <16 x i16> %1934, %1927
  %1936 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1931, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1937 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1935, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1938 = shufflevector <16 x i16> %1936, <16 x i16> %1937, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1939 = lshr <32 x i16> %1938, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1940 = shufflevector <32 x i16> %1939, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1941 = shl nsw i64 %1890, 5
  %1942 = add nsw i64 %1941, %1834
  %1943 = getelementptr inbounds i16, i16* %blur_x, i64 %1942
  %1944 = bitcast i16* %1943 to <16 x i16>*
  store <16 x i16> %1940, <16 x i16>* %1944, align 2, !tbaa !399
  %1945 = shufflevector <32 x i16> %1939, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1946 = getelementptr inbounds i16, i16* %1943, i64 16
  %1947 = bitcast i16* %1946 to <16 x i16>*
  store <16 x i16> %1945, <16 x i16>* %1947, align 2, !tbaa !399
  br label %after_bb61

"for blur_y.s0.x.x.rebased65":                    ; preds = %"for blur_y.s0.x.x.rebased65.preheader", %after_bb68
  %blur_y.s0.x.x.rebased67 = phi i32 [ %1952, %after_bb68 ], [ 0, %"for blur_y.s0.x.x.rebased65.preheader" ]
  %t2223 = add nsw i32 %blur_y.s0.x.x.rebased67, %t1626
  %1948 = icmp slt i32 %t2223, 1
  %1949 = shl nsw i32 %t2223, 5
  %1950 = icmp sgt i32 %4, %1949
  %1951 = or i1 %1948, %1950
  br i1 %1951, label %then_bb69, label %after_bb68

"end for blur_y.s0.x.x.rebased66":                ; preds = %after_bb68, %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x76", label %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge"

"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased66"
  %.pre3450 = add nsw i32 %a26, 3
  %.pre3452 = and i32 %.pre3450, 7
  br label %after_bb73

after_bb68:                                       ; preds = %"for blur_y.s0.x.x.rebased65", %then_bb69
  %1952 = add nuw nsw i32 %blur_y.s0.x.x.rebased67, 1
  %.not2760 = icmp eq i32 %1952, %t1683
  br i1 %.not2760, label %"end for blur_y.s0.x.x.rebased66", label %"for blur_y.s0.x.x.rebased65"

then_bb69:                                        ; preds = %"for blur_y.s0.x.x.rebased65"
  %1953 = icmp sgt i32 %a14, %1949
  %b97 = select i1 %1953, i32 %1949, i32 %a14
  %1954 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s72 = select i1 %1954, i32 %b97, i32 %4
  %t698 = add nsw i32 %blur_x.s0.x.v1.base.s72, %t1693
  %1955 = sext i32 %t698 to i64
  %1956 = getelementptr inbounds i16, i16* %read_input, i64 %1955
  %1957 = getelementptr inbounds i16, i16* %1956, i64 1
  %1958 = bitcast i16* %1957 to <16 x i16>*
  %1959 = load <16 x i16>, <16 x i16>* %1958, align 2, !tbaa !396
  %1960 = getelementptr inbounds i16, i16* %1956, i64 17
  %1961 = bitcast i16* %1960 to <16 x i16>*
  %1962 = load <16 x i16>, <16 x i16>* %1961, align 2, !tbaa !396
  %1963 = bitcast i16* %1956 to <16 x i16>*
  %1964 = load <16 x i16>, <16 x i16>* %1963, align 2, !tbaa !396
  %1965 = getelementptr inbounds i16, i16* %1956, i64 16
  %1966 = bitcast i16* %1965 to <16 x i16>*
  %1967 = load <16 x i16>, <16 x i16>* %1966, align 2, !tbaa !396
  %1968 = getelementptr inbounds i16, i16* %1956, i64 2
  %1969 = bitcast i16* %1968 to <16 x i16>*
  %1970 = load <16 x i16>, <16 x i16>* %1969, align 2, !tbaa !396
  %1971 = getelementptr inbounds i16, i16* %1956, i64 18
  %1972 = bitcast i16* %1971 to <16 x i16>*
  %1973 = load <16 x i16>, <16 x i16>* %1972, align 2, !tbaa !396
  %1974 = getelementptr inbounds i16, i16* %1956, i64 4
  %1975 = bitcast i16* %1974 to <16 x i16>*
  %1976 = load <16 x i16>, <16 x i16>* %1975, align 2, !tbaa !396
  %1977 = getelementptr inbounds i16, i16* %1956, i64 20
  %1978 = bitcast i16* %1977 to <16 x i16>*
  %1979 = load <16 x i16>, <16 x i16>* %1978, align 2, !tbaa !396
  %1980 = getelementptr inbounds i16, i16* %1956, i64 3
  %1981 = bitcast i16* %1980 to <16 x i16>*
  %1982 = load <16 x i16>, <16 x i16>* %1981, align 2, !tbaa !396
  %1983 = getelementptr inbounds i16, i16* %1956, i64 19
  %1984 = bitcast i16* %1983 to <16 x i16>*
  %1985 = load <16 x i16>, <16 x i16>* %1984, align 2, !tbaa !396
  %1986 = add <16 x i16> %1964, %1959
  %1987 = add <16 x i16> %1986, %1970
  %1988 = add <16 x i16> %1987, %1976
  %1989 = add <16 x i16> %1988, %1982
  %1990 = add <16 x i16> %1967, %1962
  %1991 = add <16 x i16> %1990, %1973
  %1992 = add <16 x i16> %1991, %1979
  %1993 = add <16 x i16> %1992, %1985
  %1994 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1989, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1995 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1993, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1996 = shufflevector <16 x i16> %1994, <16 x i16> %1995, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1997 = lshr <32 x i16> %1996, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1998 = shufflevector <32 x i16> %1997, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1999 = sext i32 %blur_x.s0.x.v1.base.s72 to i64
  %2000 = add nsw i64 %1999, %1896
  %2001 = getelementptr inbounds i16, i16* %blur_x, i64 %2000
  %2002 = bitcast i16* %2001 to <16 x i16>*
  store <16 x i16> %1998, <16 x i16>* %2002, align 2, !tbaa !399
  %2003 = shufflevector <32 x i16> %1997, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2004 = getelementptr inbounds i16, i16* %2001, i64 16
  %2005 = bitcast i16* %2004 to <16 x i16>*
  store <16 x i16> %2003, <16 x i16>* %2005, align 2, !tbaa !399
  br label %after_bb68

after_bb73:                                       ; preds = %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge", %"produce blur_x76"
  %.pre-phi3453 = phi i32 [ %.pre3452, %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge" ], [ %2053, %"produce blur_x76" ]
  %2006 = mul nsw i32 %.pre-phi3453, %a73
  %t1700 = sub nsw i32 %2006, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased77.preheader", label %"end for blur_y.s0.x.x.rebased78", !prof !386

"for blur_y.s0.x.x.rebased77.preheader":          ; preds = %after_bb73
  %2007 = sext i32 %t1700 to i64
  br label %"for blur_y.s0.x.x.rebased77"

"produce blur_x76":                               ; preds = %"end for blur_y.s0.x.x.rebased66"
  %2008 = getelementptr inbounds i16, i16* %read_input, i64 %108
  %2009 = getelementptr inbounds i16, i16* %2008, i64 -31
  %2010 = bitcast i16* %2009 to <16 x i16>*
  %2011 = load <16 x i16>, <16 x i16>* %2010, align 2, !tbaa !396
  %2012 = getelementptr inbounds i16, i16* %2008, i64 -15
  %2013 = bitcast i16* %2012 to <16 x i16>*
  %2014 = load <16 x i16>, <16 x i16>* %2013, align 2, !tbaa !396
  %2015 = getelementptr inbounds i16, i16* %2008, i64 -32
  %2016 = bitcast i16* %2015 to <16 x i16>*
  %2017 = load <16 x i16>, <16 x i16>* %2016, align 2, !tbaa !396
  %2018 = getelementptr inbounds i16, i16* %2008, i64 -16
  %2019 = bitcast i16* %2018 to <16 x i16>*
  %2020 = load <16 x i16>, <16 x i16>* %2019, align 2, !tbaa !396
  %2021 = getelementptr inbounds i16, i16* %2008, i64 -30
  %2022 = bitcast i16* %2021 to <16 x i16>*
  %2023 = load <16 x i16>, <16 x i16>* %2022, align 2, !tbaa !396
  %2024 = getelementptr inbounds i16, i16* %2008, i64 -14
  %2025 = bitcast i16* %2024 to <16 x i16>*
  %2026 = load <16 x i16>, <16 x i16>* %2025, align 2, !tbaa !396
  %2027 = getelementptr inbounds i16, i16* %2008, i64 -28
  %2028 = bitcast i16* %2027 to <16 x i16>*
  %2029 = load <16 x i16>, <16 x i16>* %2028, align 2, !tbaa !396
  %2030 = getelementptr inbounds i16, i16* %2008, i64 -12
  %2031 = bitcast i16* %2030 to <16 x i16>*
  %2032 = load <16 x i16>, <16 x i16>* %2031, align 2, !tbaa !396
  %2033 = getelementptr inbounds i16, i16* %2008, i64 -29
  %2034 = bitcast i16* %2033 to <16 x i16>*
  %2035 = load <16 x i16>, <16 x i16>* %2034, align 2, !tbaa !396
  %2036 = getelementptr inbounds i16, i16* %2008, i64 -13
  %2037 = bitcast i16* %2036 to <16 x i16>*
  %2038 = load <16 x i16>, <16 x i16>* %2037, align 2, !tbaa !396
  %2039 = add <16 x i16> %2017, %2011
  %2040 = add <16 x i16> %2039, %2023
  %2041 = add <16 x i16> %2040, %2029
  %2042 = add <16 x i16> %2041, %2035
  %2043 = add <16 x i16> %2020, %2014
  %2044 = add <16 x i16> %2043, %2026
  %2045 = add <16 x i16> %2044, %2032
  %2046 = add <16 x i16> %2045, %2038
  %2047 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2042, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2048 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2046, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2049 = shufflevector <16 x i16> %2047, <16 x i16> %2048, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2050 = lshr <32 x i16> %2049, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2051 = shufflevector <32 x i16> %2050, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2052 = add nsw i32 %a26, 3
  %2053 = and i32 %2052, 7
  %2054 = zext i32 %2053 to i64
  %2055 = mul nsw i64 %97, %2054
  %2056 = add nsw i64 %99, %2055
  %2057 = getelementptr inbounds i16, i16* %blur_x, i64 %2056
  %2058 = getelementptr inbounds i16, i16* %2057, i64 -32
  %2059 = bitcast i16* %2058 to <16 x i16>*
  store <16 x i16> %2051, <16 x i16>* %2059, align 2, !tbaa !399
  %2060 = shufflevector <32 x i16> %2050, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2061 = getelementptr inbounds i16, i16* %2057, i64 -16
  %2062 = bitcast i16* %2061 to <16 x i16>*
  store <16 x i16> %2060, <16 x i16>* %2062, align 2, !tbaa !399
  br label %after_bb73

"for blur_y.s0.x.x.rebased77":                    ; preds = %"for blur_y.s0.x.x.rebased77.preheader", %after_bb80
  %indvars.iv3256 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased77.preheader" ], [ %indvars.iv.next3257, %after_bb80 ]
  %2063 = add nsw i64 %indvars.iv3256, %101
  %2064 = icmp slt i64 %2063, 1
  %2065 = trunc i64 %2063 to i32
  %2066 = shl nsw i32 %2065, 5
  %2067 = icmp sgt i32 %4, %2066
  %2068 = or i1 %2064, %2067
  br i1 %2068, label %"produce blur_x83", label %after_bb80

"end for blur_y.s0.x.x.rebased78":                ; preds = %after_bb80, %after_bb73
  br i1 %102, label %"for blur_y.s0.x.x.rebased84.preheader", label %"end for blur_y.s0.x.x.rebased85", !prof !386

"for blur_y.s0.x.x.rebased84.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased78"
  %2069 = sext i32 %t1700 to i64
  br label %"for blur_y.s0.x.x.rebased84"

after_bb80:                                       ; preds = %"for blur_y.s0.x.x.rebased77", %"produce blur_x83"
  %indvars.iv.next3257 = add nuw nsw i64 %indvars.iv3256, 1
  %.not2759 = icmp eq i64 %indvars.iv.next3257, %184
  br i1 %.not2759, label %"end for blur_y.s0.x.x.rebased78", label %"for blur_y.s0.x.x.rebased77"

"produce blur_x83":                               ; preds = %"for blur_y.s0.x.x.rebased77"
  %t702 = add nsw i32 %2066, %t1699
  %2070 = sext i32 %t702 to i64
  %2071 = getelementptr inbounds i16, i16* %read_input, i64 %2070
  %2072 = getelementptr inbounds i16, i16* %2071, i64 1
  %2073 = bitcast i16* %2072 to <16 x i16>*
  %2074 = load <16 x i16>, <16 x i16>* %2073, align 2, !tbaa !396
  %2075 = getelementptr inbounds i16, i16* %2071, i64 17
  %2076 = bitcast i16* %2075 to <16 x i16>*
  %2077 = load <16 x i16>, <16 x i16>* %2076, align 2, !tbaa !396
  %2078 = bitcast i16* %2071 to <16 x i16>*
  %2079 = load <16 x i16>, <16 x i16>* %2078, align 2, !tbaa !396
  %2080 = getelementptr inbounds i16, i16* %2071, i64 16
  %2081 = bitcast i16* %2080 to <16 x i16>*
  %2082 = load <16 x i16>, <16 x i16>* %2081, align 2, !tbaa !396
  %2083 = getelementptr inbounds i16, i16* %2071, i64 2
  %2084 = bitcast i16* %2083 to <16 x i16>*
  %2085 = load <16 x i16>, <16 x i16>* %2084, align 2, !tbaa !396
  %2086 = getelementptr inbounds i16, i16* %2071, i64 18
  %2087 = bitcast i16* %2086 to <16 x i16>*
  %2088 = load <16 x i16>, <16 x i16>* %2087, align 2, !tbaa !396
  %2089 = getelementptr inbounds i16, i16* %2071, i64 4
  %2090 = bitcast i16* %2089 to <16 x i16>*
  %2091 = load <16 x i16>, <16 x i16>* %2090, align 2, !tbaa !396
  %2092 = getelementptr inbounds i16, i16* %2071, i64 20
  %2093 = bitcast i16* %2092 to <16 x i16>*
  %2094 = load <16 x i16>, <16 x i16>* %2093, align 2, !tbaa !396
  %2095 = getelementptr inbounds i16, i16* %2071, i64 3
  %2096 = bitcast i16* %2095 to <16 x i16>*
  %2097 = load <16 x i16>, <16 x i16>* %2096, align 2, !tbaa !396
  %2098 = getelementptr inbounds i16, i16* %2071, i64 19
  %2099 = bitcast i16* %2098 to <16 x i16>*
  %2100 = load <16 x i16>, <16 x i16>* %2099, align 2, !tbaa !396
  %2101 = add <16 x i16> %2079, %2074
  %2102 = add <16 x i16> %2101, %2085
  %2103 = add <16 x i16> %2102, %2091
  %2104 = add <16 x i16> %2103, %2097
  %2105 = add <16 x i16> %2082, %2077
  %2106 = add <16 x i16> %2105, %2088
  %2107 = add <16 x i16> %2106, %2094
  %2108 = add <16 x i16> %2107, %2100
  %2109 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2104, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2110 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2108, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2111 = shufflevector <16 x i16> %2109, <16 x i16> %2110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2112 = lshr <32 x i16> %2111, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2113 = shufflevector <32 x i16> %2112, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2114 = shl nsw i64 %2063, 5
  %2115 = add nsw i64 %2114, %2007
  %2116 = getelementptr inbounds i16, i16* %blur_x, i64 %2115
  %2117 = bitcast i16* %2116 to <16 x i16>*
  store <16 x i16> %2113, <16 x i16>* %2117, align 2, !tbaa !399
  %2118 = shufflevector <32 x i16> %2112, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2119 = getelementptr inbounds i16, i16* %2116, i64 16
  %2120 = bitcast i16* %2119 to <16 x i16>*
  store <16 x i16> %2118, <16 x i16>* %2120, align 2, !tbaa !399
  br label %after_bb80

"for blur_y.s0.x.x.rebased84":                    ; preds = %"for blur_y.s0.x.x.rebased84.preheader", %after_bb87
  %blur_y.s0.x.x.rebased86 = phi i32 [ %2125, %after_bb87 ], [ 0, %"for blur_y.s0.x.x.rebased84.preheader" ]
  %t2225 = add nsw i32 %blur_y.s0.x.x.rebased86, %t1626
  %2121 = icmp slt i32 %t2225, 1
  %2122 = shl nsw i32 %t2225, 5
  %2123 = icmp sgt i32 %4, %2122
  %2124 = or i1 %2121, %2123
  br i1 %2124, label %then_bb88, label %after_bb87

"end for blur_y.s0.x.x.rebased85":                ; preds = %after_bb87, %"end for blur_y.s0.x.x.rebased78"
  br i1 %34, label %"produce blur_x95", label %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge"

"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased85"
  %.pre3454 = add nsw i32 %a26, 4
  %.pre3456 = and i32 %.pre3454, 7
  br label %after_bb92

after_bb87:                                       ; preds = %"for blur_y.s0.x.x.rebased84", %then_bb88
  %2125 = add nuw nsw i32 %blur_y.s0.x.x.rebased86, 1
  %.not2758 = icmp eq i32 %2125, %t1683
  br i1 %.not2758, label %"end for blur_y.s0.x.x.rebased85", label %"for blur_y.s0.x.x.rebased84"

then_bb88:                                        ; preds = %"for blur_y.s0.x.x.rebased84"
  %2126 = icmp sgt i32 %a14, %2122
  %b104 = select i1 %2126, i32 %2122, i32 %a14
  %2127 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s91 = select i1 %2127, i32 %b104, i32 %4
  %t704 = add nsw i32 %blur_x.s0.x.v1.base.s91, %t1699
  %2128 = sext i32 %t704 to i64
  %2129 = getelementptr inbounds i16, i16* %read_input, i64 %2128
  %2130 = getelementptr inbounds i16, i16* %2129, i64 1
  %2131 = bitcast i16* %2130 to <16 x i16>*
  %2132 = load <16 x i16>, <16 x i16>* %2131, align 2, !tbaa !396
  %2133 = getelementptr inbounds i16, i16* %2129, i64 17
  %2134 = bitcast i16* %2133 to <16 x i16>*
  %2135 = load <16 x i16>, <16 x i16>* %2134, align 2, !tbaa !396
  %2136 = bitcast i16* %2129 to <16 x i16>*
  %2137 = load <16 x i16>, <16 x i16>* %2136, align 2, !tbaa !396
  %2138 = getelementptr inbounds i16, i16* %2129, i64 16
  %2139 = bitcast i16* %2138 to <16 x i16>*
  %2140 = load <16 x i16>, <16 x i16>* %2139, align 2, !tbaa !396
  %2141 = getelementptr inbounds i16, i16* %2129, i64 2
  %2142 = bitcast i16* %2141 to <16 x i16>*
  %2143 = load <16 x i16>, <16 x i16>* %2142, align 2, !tbaa !396
  %2144 = getelementptr inbounds i16, i16* %2129, i64 18
  %2145 = bitcast i16* %2144 to <16 x i16>*
  %2146 = load <16 x i16>, <16 x i16>* %2145, align 2, !tbaa !396
  %2147 = getelementptr inbounds i16, i16* %2129, i64 4
  %2148 = bitcast i16* %2147 to <16 x i16>*
  %2149 = load <16 x i16>, <16 x i16>* %2148, align 2, !tbaa !396
  %2150 = getelementptr inbounds i16, i16* %2129, i64 20
  %2151 = bitcast i16* %2150 to <16 x i16>*
  %2152 = load <16 x i16>, <16 x i16>* %2151, align 2, !tbaa !396
  %2153 = getelementptr inbounds i16, i16* %2129, i64 3
  %2154 = bitcast i16* %2153 to <16 x i16>*
  %2155 = load <16 x i16>, <16 x i16>* %2154, align 2, !tbaa !396
  %2156 = getelementptr inbounds i16, i16* %2129, i64 19
  %2157 = bitcast i16* %2156 to <16 x i16>*
  %2158 = load <16 x i16>, <16 x i16>* %2157, align 2, !tbaa !396
  %2159 = add <16 x i16> %2137, %2132
  %2160 = add <16 x i16> %2159, %2143
  %2161 = add <16 x i16> %2160, %2149
  %2162 = add <16 x i16> %2161, %2155
  %2163 = add <16 x i16> %2140, %2135
  %2164 = add <16 x i16> %2163, %2146
  %2165 = add <16 x i16> %2164, %2152
  %2166 = add <16 x i16> %2165, %2158
  %2167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2162, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2166, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2169 = shufflevector <16 x i16> %2167, <16 x i16> %2168, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2170 = lshr <32 x i16> %2169, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2171 = shufflevector <32 x i16> %2170, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2172 = sext i32 %blur_x.s0.x.v1.base.s91 to i64
  %2173 = add nsw i64 %2172, %2069
  %2174 = getelementptr inbounds i16, i16* %blur_x, i64 %2173
  %2175 = bitcast i16* %2174 to <16 x i16>*
  store <16 x i16> %2171, <16 x i16>* %2175, align 2, !tbaa !399
  %2176 = shufflevector <32 x i16> %2170, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2177 = getelementptr inbounds i16, i16* %2174, i64 16
  %2178 = bitcast i16* %2177 to <16 x i16>*
  store <16 x i16> %2176, <16 x i16>* %2178, align 2, !tbaa !399
  br label %after_bb87

after_bb92:                                       ; preds = %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge", %"produce blur_x95"
  %.pre-phi3457 = phi i32 [ %.pre3456, %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge" ], [ %2244, %"produce blur_x95" ]
  %2179 = mul nsw i32 %.pre-phi3457, %a73
  %t1706 = sub nsw i32 %2179, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased96.preheader", label %"end for blur_y.s0.x.x.rebased97", !prof !386

"for blur_y.s0.x.x.rebased96.preheader":          ; preds = %after_bb92
  %2180 = sext i32 %t1706 to i64
  %2181 = zext i32 %.pre-phi3445 to i64
  %2182 = mul nsw i64 %2181, %112
  %2183 = sub nsw i64 %2182, %96
  %2184 = zext i32 %.pre-phi to i64
  %2185 = mul nsw i64 %2184, %112
  %2186 = sub nsw i64 %2185, %96
  %2187 = zext i32 %.pre-phi3449 to i64
  %2188 = mul nsw i64 %2187, %112
  %2189 = sub nsw i64 %2188, %96
  %2190 = zext i32 %.pre-phi3457 to i64
  %2191 = mul nsw i64 %2190, %112
  %2192 = sub nsw i64 %2191, %96
  %2193 = zext i32 %.pre-phi3453 to i64
  %2194 = mul nsw i64 %2193, %112
  %2195 = sub nsw i64 %2194, %96
  %2196 = sext i32 %a26 to i64
  %2197 = mul nsw i64 %2196, %113
  %2198 = add nsw i64 %2197, %116
  br label %"for blur_y.s0.x.x.rebased96"

"produce blur_x95":                               ; preds = %"end for blur_y.s0.x.x.rebased85"
  %2199 = getelementptr inbounds i16, i16* %read_input, i64 %111
  %2200 = getelementptr inbounds i16, i16* %2199, i64 -31
  %2201 = bitcast i16* %2200 to <16 x i16>*
  %2202 = load <16 x i16>, <16 x i16>* %2201, align 2, !tbaa !396
  %2203 = getelementptr inbounds i16, i16* %2199, i64 -15
  %2204 = bitcast i16* %2203 to <16 x i16>*
  %2205 = load <16 x i16>, <16 x i16>* %2204, align 2, !tbaa !396
  %2206 = getelementptr inbounds i16, i16* %2199, i64 -32
  %2207 = bitcast i16* %2206 to <16 x i16>*
  %2208 = load <16 x i16>, <16 x i16>* %2207, align 2, !tbaa !396
  %2209 = getelementptr inbounds i16, i16* %2199, i64 -16
  %2210 = bitcast i16* %2209 to <16 x i16>*
  %2211 = load <16 x i16>, <16 x i16>* %2210, align 2, !tbaa !396
  %2212 = getelementptr inbounds i16, i16* %2199, i64 -30
  %2213 = bitcast i16* %2212 to <16 x i16>*
  %2214 = load <16 x i16>, <16 x i16>* %2213, align 2, !tbaa !396
  %2215 = getelementptr inbounds i16, i16* %2199, i64 -14
  %2216 = bitcast i16* %2215 to <16 x i16>*
  %2217 = load <16 x i16>, <16 x i16>* %2216, align 2, !tbaa !396
  %2218 = getelementptr inbounds i16, i16* %2199, i64 -28
  %2219 = bitcast i16* %2218 to <16 x i16>*
  %2220 = load <16 x i16>, <16 x i16>* %2219, align 2, !tbaa !396
  %2221 = getelementptr inbounds i16, i16* %2199, i64 -12
  %2222 = bitcast i16* %2221 to <16 x i16>*
  %2223 = load <16 x i16>, <16 x i16>* %2222, align 2, !tbaa !396
  %2224 = getelementptr inbounds i16, i16* %2199, i64 -29
  %2225 = bitcast i16* %2224 to <16 x i16>*
  %2226 = load <16 x i16>, <16 x i16>* %2225, align 2, !tbaa !396
  %2227 = getelementptr inbounds i16, i16* %2199, i64 -13
  %2228 = bitcast i16* %2227 to <16 x i16>*
  %2229 = load <16 x i16>, <16 x i16>* %2228, align 2, !tbaa !396
  %2230 = add <16 x i16> %2208, %2202
  %2231 = add <16 x i16> %2230, %2214
  %2232 = add <16 x i16> %2231, %2220
  %2233 = add <16 x i16> %2232, %2226
  %2234 = add <16 x i16> %2211, %2205
  %2235 = add <16 x i16> %2234, %2217
  %2236 = add <16 x i16> %2235, %2223
  %2237 = add <16 x i16> %2236, %2229
  %2238 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2233, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2239 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2237, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2240 = shufflevector <16 x i16> %2238, <16 x i16> %2239, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2241 = lshr <32 x i16> %2240, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2242 = shufflevector <32 x i16> %2241, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2243 = add nsw i32 %a26, 4
  %2244 = and i32 %2243, 7
  %2245 = zext i32 %2244 to i64
  %2246 = mul nsw i64 %97, %2245
  %2247 = add nsw i64 %99, %2246
  %2248 = getelementptr inbounds i16, i16* %blur_x, i64 %2247
  %2249 = getelementptr inbounds i16, i16* %2248, i64 -32
  %2250 = bitcast i16* %2249 to <16 x i16>*
  store <16 x i16> %2242, <16 x i16>* %2250, align 2, !tbaa !399
  %2251 = shufflevector <32 x i16> %2241, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2252 = getelementptr inbounds i16, i16* %2248, i64 -16
  %2253 = bitcast i16* %2252 to <16 x i16>*
  store <16 x i16> %2251, <16 x i16>* %2253, align 2, !tbaa !399
  %2254 = zext i32 %.pre-phi3445 to i64
  %2255 = mul nsw i64 %2254, %112
  %2256 = add nsw i64 %2255, %94
  %2257 = getelementptr inbounds i16, i16* %blur_x, i64 %2256
  %2258 = getelementptr inbounds i16, i16* %2257, i64 -32
  %2259 = bitcast i16* %2258 to <16 x i16>*
  %2260 = load <16 x i16>, <16 x i16>* %2259, align 2, !tbaa !399
  %2261 = getelementptr inbounds i16, i16* %2257, i64 -16
  %2262 = bitcast i16* %2261 to <16 x i16>*
  %2263 = load <16 x i16>, <16 x i16>* %2262, align 2, !tbaa !399
  %2264 = zext i32 %.pre-phi to i64
  %2265 = mul nsw i64 %2264, %112
  %2266 = add nsw i64 %2265, %94
  %2267 = getelementptr inbounds i16, i16* %blur_x, i64 %2266
  %2268 = getelementptr inbounds i16, i16* %2267, i64 -32
  %2269 = bitcast i16* %2268 to <16 x i16>*
  %2270 = load <16 x i16>, <16 x i16>* %2269, align 2, !tbaa !399
  %2271 = getelementptr inbounds i16, i16* %2267, i64 -16
  %2272 = bitcast i16* %2271 to <16 x i16>*
  %2273 = load <16 x i16>, <16 x i16>* %2272, align 2, !tbaa !399
  %2274 = zext i32 %.pre-phi3449 to i64
  %2275 = mul nsw i64 %2274, %112
  %2276 = add nsw i64 %2275, %94
  %2277 = getelementptr inbounds i16, i16* %blur_x, i64 %2276
  %2278 = getelementptr inbounds i16, i16* %2277, i64 -32
  %2279 = bitcast i16* %2278 to <16 x i16>*
  %2280 = load <16 x i16>, <16 x i16>* %2279, align 2, !tbaa !399
  %2281 = getelementptr inbounds i16, i16* %2277, i64 -16
  %2282 = bitcast i16* %2281 to <16 x i16>*
  %2283 = load <16 x i16>, <16 x i16>* %2282, align 2, !tbaa !399
  %2284 = mul nsw i64 %2245, %112
  %2285 = add nsw i64 %2284, %94
  %2286 = getelementptr inbounds i16, i16* %blur_x, i64 %2285
  %2287 = getelementptr inbounds i16, i16* %2286, i64 -32
  %2288 = bitcast i16* %2287 to <16 x i16>*
  %2289 = load <16 x i16>, <16 x i16>* %2288, align 2, !tbaa !399
  %2290 = getelementptr inbounds i16, i16* %2286, i64 -16
  %2291 = bitcast i16* %2290 to <16 x i16>*
  %2292 = load <16 x i16>, <16 x i16>* %2291, align 2, !tbaa !399
  %2293 = zext i32 %.pre-phi3453 to i64
  %2294 = mul nsw i64 %2293, %112
  %2295 = add nsw i64 %2294, %94
  %2296 = getelementptr inbounds i16, i16* %blur_x, i64 %2295
  %2297 = getelementptr inbounds i16, i16* %2296, i64 -32
  %2298 = bitcast i16* %2297 to <16 x i16>*
  %2299 = load <16 x i16>, <16 x i16>* %2298, align 2, !tbaa !399
  %2300 = getelementptr inbounds i16, i16* %2296, i64 -16
  %2301 = bitcast i16* %2300 to <16 x i16>*
  %2302 = load <16 x i16>, <16 x i16>* %2301, align 2, !tbaa !399
  %2303 = add <16 x i16> %2270, %2260
  %2304 = add <16 x i16> %2303, %2280
  %2305 = add <16 x i16> %2304, %2289
  %2306 = add <16 x i16> %2305, %2299
  %2307 = add <16 x i16> %2273, %2263
  %2308 = add <16 x i16> %2307, %2283
  %2309 = add <16 x i16> %2308, %2292
  %2310 = add <16 x i16> %2309, %2302
  %2311 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2306, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2312 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2310, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2313 = shufflevector <16 x i16> %2311, <16 x i16> %2312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2314 = lshr <32 x i16> %2313, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2315 = shufflevector <32 x i16> %2314, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2316 = sext i32 %a26 to i64
  %2317 = mul nsw i64 %2316, %113
  %2318 = add nsw i64 %115, %2317
  %2319 = getelementptr inbounds i16, i16* %66, i64 %2318
  %2320 = getelementptr inbounds i16, i16* %2319, i64 -32
  %2321 = bitcast i16* %2320 to <16 x i16>*
  store <16 x i16> %2315, <16 x i16>* %2321, align 2, !tbaa !401
  %2322 = shufflevector <32 x i16> %2314, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2323 = getelementptr inbounds i16, i16* %2319, i64 -16
  %2324 = bitcast i16* %2323 to <16 x i16>*
  store <16 x i16> %2322, <16 x i16>* %2324, align 2, !tbaa !401
  br label %after_bb92

"for blur_y.s0.x.x.rebased96":                    ; preds = %"for blur_y.s0.x.x.rebased96.preheader", %"consume blur_x103"
  %indvars.iv3259 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased96.preheader" ], [ %indvars.iv.next3260, %"consume blur_x103" ]
  %2325 = add nsw i64 %indvars.iv3259, %101
  %2326 = icmp slt i64 %2325, 1
  %2327 = trunc i64 %2325 to i32
  %2328 = shl nsw i32 %2327, 5
  %2329 = icmp sgt i32 %4, %2328
  %2330 = or i1 %2326, %2329
  br i1 %2330, label %"produce blur_x102", label %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge"

"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased96"
  %.pre3458 = shl nsw i64 %2325, 5
  br label %"consume blur_x103"

"end for blur_y.s0.x.x.rebased97":                ; preds = %"consume blur_x103", %after_bb92
  br i1 %102, label %"for blur_y.s0.x.x.rebased104.preheader", label %"end for blur_y.s0.x.x.rebased105", !prof !386

"for blur_y.s0.x.x.rebased104.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased97"
  %2331 = sext i32 %t1706 to i64
  %2332 = zext i32 %.pre-phi3445 to i64
  %2333 = mul nsw i64 %2332, %112
  %2334 = sub nsw i64 %2333, %96
  %2335 = zext i32 %.pre-phi to i64
  %2336 = mul nsw i64 %2335, %112
  %2337 = sub nsw i64 %2336, %96
  %2338 = zext i32 %.pre-phi3449 to i64
  %2339 = mul nsw i64 %2338, %112
  %2340 = sub nsw i64 %2339, %96
  %2341 = zext i32 %.pre-phi3457 to i64
  %2342 = mul nsw i64 %2341, %112
  %2343 = sub nsw i64 %2342, %96
  %2344 = zext i32 %.pre-phi3453 to i64
  %2345 = mul nsw i64 %2344, %112
  %2346 = sub nsw i64 %2345, %96
  %2347 = sext i32 %a26 to i64
  %2348 = mul nsw i64 %2347, %113
  %2349 = add nsw i64 %2348, %116
  br label %"for blur_y.s0.x.x.rebased104"

"produce blur_x102":                              ; preds = %"for blur_y.s0.x.x.rebased96"
  %t712 = add nsw i32 %2328, %109
  %2350 = sext i32 %t712 to i64
  %2351 = getelementptr inbounds i16, i16* %read_input, i64 %2350
  %2352 = getelementptr inbounds i16, i16* %2351, i64 1
  %2353 = bitcast i16* %2352 to <16 x i16>*
  %2354 = load <16 x i16>, <16 x i16>* %2353, align 2, !tbaa !396
  %2355 = getelementptr inbounds i16, i16* %2351, i64 17
  %2356 = bitcast i16* %2355 to <16 x i16>*
  %2357 = load <16 x i16>, <16 x i16>* %2356, align 2, !tbaa !396
  %2358 = bitcast i16* %2351 to <16 x i16>*
  %2359 = load <16 x i16>, <16 x i16>* %2358, align 2, !tbaa !396
  %2360 = getelementptr inbounds i16, i16* %2351, i64 16
  %2361 = bitcast i16* %2360 to <16 x i16>*
  %2362 = load <16 x i16>, <16 x i16>* %2361, align 2, !tbaa !396
  %2363 = getelementptr inbounds i16, i16* %2351, i64 2
  %2364 = bitcast i16* %2363 to <16 x i16>*
  %2365 = load <16 x i16>, <16 x i16>* %2364, align 2, !tbaa !396
  %2366 = getelementptr inbounds i16, i16* %2351, i64 18
  %2367 = bitcast i16* %2366 to <16 x i16>*
  %2368 = load <16 x i16>, <16 x i16>* %2367, align 2, !tbaa !396
  %2369 = getelementptr inbounds i16, i16* %2351, i64 4
  %2370 = bitcast i16* %2369 to <16 x i16>*
  %2371 = load <16 x i16>, <16 x i16>* %2370, align 2, !tbaa !396
  %2372 = getelementptr inbounds i16, i16* %2351, i64 20
  %2373 = bitcast i16* %2372 to <16 x i16>*
  %2374 = load <16 x i16>, <16 x i16>* %2373, align 2, !tbaa !396
  %2375 = getelementptr inbounds i16, i16* %2351, i64 3
  %2376 = bitcast i16* %2375 to <16 x i16>*
  %2377 = load <16 x i16>, <16 x i16>* %2376, align 2, !tbaa !396
  %2378 = getelementptr inbounds i16, i16* %2351, i64 19
  %2379 = bitcast i16* %2378 to <16 x i16>*
  %2380 = load <16 x i16>, <16 x i16>* %2379, align 2, !tbaa !396
  %2381 = add <16 x i16> %2359, %2354
  %2382 = add <16 x i16> %2381, %2365
  %2383 = add <16 x i16> %2382, %2371
  %2384 = add <16 x i16> %2383, %2377
  %2385 = add <16 x i16> %2362, %2357
  %2386 = add <16 x i16> %2385, %2368
  %2387 = add <16 x i16> %2386, %2374
  %2388 = add <16 x i16> %2387, %2380
  %2389 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2384, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2390 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2388, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2391 = shufflevector <16 x i16> %2389, <16 x i16> %2390, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2392 = lshr <32 x i16> %2391, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2393 = shufflevector <32 x i16> %2392, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2394 = shl nsw i64 %2325, 5
  %2395 = add nsw i64 %2394, %2180
  %2396 = getelementptr inbounds i16, i16* %blur_x, i64 %2395
  %2397 = bitcast i16* %2396 to <16 x i16>*
  store <16 x i16> %2393, <16 x i16>* %2397, align 2, !tbaa !399
  %2398 = shufflevector <32 x i16> %2392, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2399 = getelementptr inbounds i16, i16* %2396, i64 16
  %2400 = bitcast i16* %2399 to <16 x i16>*
  store <16 x i16> %2398, <16 x i16>* %2400, align 2, !tbaa !399
  br label %"consume blur_x103"

"consume blur_x103":                              ; preds = %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge", %"produce blur_x102"
  %.pre-phi3459 = phi i64 [ %.pre3458, %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge" ], [ %2394, %"produce blur_x102" ]
  %2401 = add nsw i64 %2183, %.pre-phi3459
  %2402 = getelementptr inbounds i16, i16* %blur_x, i64 %2401
  %2403 = bitcast i16* %2402 to <16 x i16>*
  %2404 = load <16 x i16>, <16 x i16>* %2403, align 2, !tbaa !399
  %2405 = getelementptr inbounds i16, i16* %2402, i64 16
  %2406 = bitcast i16* %2405 to <16 x i16>*
  %2407 = load <16 x i16>, <16 x i16>* %2406, align 2, !tbaa !399
  %2408 = add nsw i64 %2186, %.pre-phi3459
  %2409 = getelementptr inbounds i16, i16* %blur_x, i64 %2408
  %2410 = bitcast i16* %2409 to <16 x i16>*
  %2411 = load <16 x i16>, <16 x i16>* %2410, align 2, !tbaa !399
  %2412 = getelementptr inbounds i16, i16* %2409, i64 16
  %2413 = bitcast i16* %2412 to <16 x i16>*
  %2414 = load <16 x i16>, <16 x i16>* %2413, align 2, !tbaa !399
  %2415 = add nsw i64 %2189, %.pre-phi3459
  %2416 = getelementptr inbounds i16, i16* %blur_x, i64 %2415
  %2417 = bitcast i16* %2416 to <16 x i16>*
  %2418 = load <16 x i16>, <16 x i16>* %2417, align 2, !tbaa !399
  %2419 = getelementptr inbounds i16, i16* %2416, i64 16
  %2420 = bitcast i16* %2419 to <16 x i16>*
  %2421 = load <16 x i16>, <16 x i16>* %2420, align 2, !tbaa !399
  %2422 = add nsw i64 %2192, %.pre-phi3459
  %2423 = getelementptr inbounds i16, i16* %blur_x, i64 %2422
  %2424 = bitcast i16* %2423 to <16 x i16>*
  %2425 = load <16 x i16>, <16 x i16>* %2424, align 2, !tbaa !399
  %2426 = getelementptr inbounds i16, i16* %2423, i64 16
  %2427 = bitcast i16* %2426 to <16 x i16>*
  %2428 = load <16 x i16>, <16 x i16>* %2427, align 2, !tbaa !399
  %2429 = add nsw i64 %2195, %.pre-phi3459
  %2430 = getelementptr inbounds i16, i16* %blur_x, i64 %2429
  %2431 = bitcast i16* %2430 to <16 x i16>*
  %2432 = load <16 x i16>, <16 x i16>* %2431, align 2, !tbaa !399
  %2433 = getelementptr inbounds i16, i16* %2430, i64 16
  %2434 = bitcast i16* %2433 to <16 x i16>*
  %2435 = load <16 x i16>, <16 x i16>* %2434, align 2, !tbaa !399
  %2436 = add <16 x i16> %2411, %2404
  %2437 = add <16 x i16> %2436, %2418
  %2438 = add <16 x i16> %2437, %2425
  %2439 = add <16 x i16> %2438, %2432
  %2440 = add <16 x i16> %2414, %2407
  %2441 = add <16 x i16> %2440, %2421
  %2442 = add <16 x i16> %2441, %2428
  %2443 = add <16 x i16> %2442, %2435
  %2444 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2439, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2445 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2443, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2446 = shufflevector <16 x i16> %2444, <16 x i16> %2445, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2447 = lshr <32 x i16> %2446, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2448 = shufflevector <32 x i16> %2447, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2449 = add nsw i64 %2198, %.pre-phi3459
  %2450 = getelementptr inbounds i16, i16* %66, i64 %2449
  %2451 = bitcast i16* %2450 to <16 x i16>*
  store <16 x i16> %2448, <16 x i16>* %2451, align 2, !tbaa !401
  %2452 = shufflevector <32 x i16> %2447, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2453 = getelementptr inbounds i16, i16* %2450, i64 16
  %2454 = bitcast i16* %2453 to <16 x i16>*
  store <16 x i16> %2452, <16 x i16>* %2454, align 2, !tbaa !401
  %indvars.iv.next3260 = add nuw nsw i64 %indvars.iv3259, 1
  %.not2757 = icmp eq i64 %indvars.iv.next3260, %184
  br i1 %.not2757, label %"end for blur_y.s0.x.x.rebased97", label %"for blur_y.s0.x.x.rebased96"

"for blur_y.s0.x.x.rebased104":                   ; preds = %"for blur_y.s0.x.x.rebased104.preheader", %"consume blur_x112"
  %blur_y.s0.x.x.rebased106 = phi i32 [ %2567, %"consume blur_x112" ], [ 0, %"for blur_y.s0.x.x.rebased104.preheader" ]
  %2455 = add nsw i32 %blur_y.s0.x.x.rebased106, %t1626
  %a105 = shl nsw i32 %2455, 5
  %2456 = icmp sgt i32 %a14, %a105
  %b111 = select i1 %2456, i32 %a105, i32 %a14
  %2457 = icmp slt i32 %2455, 1
  %2458 = icmp sgt i32 %4, %a105
  %2459 = or i1 %2457, %2458
  br i1 %2459, label %"produce blur_x110", label %"consume blur_x112"

"end for blur_y.s0.x.x.rebased105":               ; preds = %"consume blur_x112", %"end for blur_y.s0.x.x.rebased97"
  br i1 %34, label %"produce blur_x116", label %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge"

"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased105"
  %.pre3460 = add nsw i32 %a26, 5
  %.pre3462 = and i32 %.pre3460, 7
  br label %after_bb113

"produce blur_x110":                              ; preds = %"for blur_y.s0.x.x.rebased104"
  %2460 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s111 = select i1 %2460, i32 %b111, i32 %4
  %t717 = add nsw i32 %blur_x.s0.x.v1.base.s111, %109
  %2461 = sext i32 %t717 to i64
  %2462 = getelementptr inbounds i16, i16* %read_input, i64 %2461
  %2463 = getelementptr inbounds i16, i16* %2462, i64 1
  %2464 = bitcast i16* %2463 to <16 x i16>*
  %2465 = load <16 x i16>, <16 x i16>* %2464, align 2, !tbaa !396
  %2466 = getelementptr inbounds i16, i16* %2462, i64 17
  %2467 = bitcast i16* %2466 to <16 x i16>*
  %2468 = load <16 x i16>, <16 x i16>* %2467, align 2, !tbaa !396
  %2469 = bitcast i16* %2462 to <16 x i16>*
  %2470 = load <16 x i16>, <16 x i16>* %2469, align 2, !tbaa !396
  %2471 = getelementptr inbounds i16, i16* %2462, i64 16
  %2472 = bitcast i16* %2471 to <16 x i16>*
  %2473 = load <16 x i16>, <16 x i16>* %2472, align 2, !tbaa !396
  %2474 = getelementptr inbounds i16, i16* %2462, i64 2
  %2475 = bitcast i16* %2474 to <16 x i16>*
  %2476 = load <16 x i16>, <16 x i16>* %2475, align 2, !tbaa !396
  %2477 = getelementptr inbounds i16, i16* %2462, i64 18
  %2478 = bitcast i16* %2477 to <16 x i16>*
  %2479 = load <16 x i16>, <16 x i16>* %2478, align 2, !tbaa !396
  %2480 = getelementptr inbounds i16, i16* %2462, i64 4
  %2481 = bitcast i16* %2480 to <16 x i16>*
  %2482 = load <16 x i16>, <16 x i16>* %2481, align 2, !tbaa !396
  %2483 = getelementptr inbounds i16, i16* %2462, i64 20
  %2484 = bitcast i16* %2483 to <16 x i16>*
  %2485 = load <16 x i16>, <16 x i16>* %2484, align 2, !tbaa !396
  %2486 = getelementptr inbounds i16, i16* %2462, i64 3
  %2487 = bitcast i16* %2486 to <16 x i16>*
  %2488 = load <16 x i16>, <16 x i16>* %2487, align 2, !tbaa !396
  %2489 = getelementptr inbounds i16, i16* %2462, i64 19
  %2490 = bitcast i16* %2489 to <16 x i16>*
  %2491 = load <16 x i16>, <16 x i16>* %2490, align 2, !tbaa !396
  %2492 = add <16 x i16> %2470, %2465
  %2493 = add <16 x i16> %2492, %2476
  %2494 = add <16 x i16> %2493, %2482
  %2495 = add <16 x i16> %2494, %2488
  %2496 = add <16 x i16> %2473, %2468
  %2497 = add <16 x i16> %2496, %2479
  %2498 = add <16 x i16> %2497, %2485
  %2499 = add <16 x i16> %2498, %2491
  %2500 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2495, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2501 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2499, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2502 = shufflevector <16 x i16> %2500, <16 x i16> %2501, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2503 = lshr <32 x i16> %2502, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2504 = shufflevector <32 x i16> %2503, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2505 = sext i32 %blur_x.s0.x.v1.base.s111 to i64
  %2506 = add nsw i64 %2505, %2331
  %2507 = getelementptr inbounds i16, i16* %blur_x, i64 %2506
  %2508 = bitcast i16* %2507 to <16 x i16>*
  store <16 x i16> %2504, <16 x i16>* %2508, align 2, !tbaa !399
  %2509 = shufflevector <32 x i16> %2503, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2510 = getelementptr inbounds i16, i16* %2507, i64 16
  %2511 = bitcast i16* %2510 to <16 x i16>*
  store <16 x i16> %2509, <16 x i16>* %2511, align 2, !tbaa !399
  br label %"consume blur_x112"

"consume blur_x112":                              ; preds = %"for blur_y.s0.x.x.rebased104", %"produce blur_x110"
  %2512 = sext i32 %b111 to i64
  %2513 = add nsw i64 %2334, %2512
  %2514 = getelementptr inbounds i16, i16* %blur_x, i64 %2513
  %2515 = bitcast i16* %2514 to <16 x i16>*
  %2516 = load <16 x i16>, <16 x i16>* %2515, align 2, !tbaa !399
  %2517 = getelementptr inbounds i16, i16* %2514, i64 16
  %2518 = bitcast i16* %2517 to <16 x i16>*
  %2519 = load <16 x i16>, <16 x i16>* %2518, align 2, !tbaa !399
  %2520 = add nsw i64 %2337, %2512
  %2521 = getelementptr inbounds i16, i16* %blur_x, i64 %2520
  %2522 = bitcast i16* %2521 to <16 x i16>*
  %2523 = load <16 x i16>, <16 x i16>* %2522, align 2, !tbaa !399
  %2524 = getelementptr inbounds i16, i16* %2521, i64 16
  %2525 = bitcast i16* %2524 to <16 x i16>*
  %2526 = load <16 x i16>, <16 x i16>* %2525, align 2, !tbaa !399
  %2527 = add nsw i64 %2340, %2512
  %2528 = getelementptr inbounds i16, i16* %blur_x, i64 %2527
  %2529 = bitcast i16* %2528 to <16 x i16>*
  %2530 = load <16 x i16>, <16 x i16>* %2529, align 2, !tbaa !399
  %2531 = getelementptr inbounds i16, i16* %2528, i64 16
  %2532 = bitcast i16* %2531 to <16 x i16>*
  %2533 = load <16 x i16>, <16 x i16>* %2532, align 2, !tbaa !399
  %2534 = add nsw i64 %2343, %2512
  %2535 = getelementptr inbounds i16, i16* %blur_x, i64 %2534
  %2536 = bitcast i16* %2535 to <16 x i16>*
  %2537 = load <16 x i16>, <16 x i16>* %2536, align 2, !tbaa !399
  %2538 = getelementptr inbounds i16, i16* %2535, i64 16
  %2539 = bitcast i16* %2538 to <16 x i16>*
  %2540 = load <16 x i16>, <16 x i16>* %2539, align 2, !tbaa !399
  %2541 = add nsw i64 %2346, %2512
  %2542 = getelementptr inbounds i16, i16* %blur_x, i64 %2541
  %2543 = bitcast i16* %2542 to <16 x i16>*
  %2544 = load <16 x i16>, <16 x i16>* %2543, align 2, !tbaa !399
  %2545 = getelementptr inbounds i16, i16* %2542, i64 16
  %2546 = bitcast i16* %2545 to <16 x i16>*
  %2547 = load <16 x i16>, <16 x i16>* %2546, align 2, !tbaa !399
  %2548 = add <16 x i16> %2523, %2516
  %2549 = add <16 x i16> %2548, %2530
  %2550 = add <16 x i16> %2549, %2537
  %2551 = add <16 x i16> %2550, %2544
  %2552 = add <16 x i16> %2526, %2519
  %2553 = add <16 x i16> %2552, %2533
  %2554 = add <16 x i16> %2553, %2540
  %2555 = add <16 x i16> %2554, %2547
  %2556 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2551, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2555, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2558 = shufflevector <16 x i16> %2556, <16 x i16> %2557, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2559 = lshr <32 x i16> %2558, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2560 = shufflevector <32 x i16> %2559, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2561 = add nsw i64 %2349, %2512
  %2562 = getelementptr inbounds i16, i16* %66, i64 %2561
  %2563 = bitcast i16* %2562 to <16 x i16>*
  store <16 x i16> %2560, <16 x i16>* %2563, align 2, !tbaa !401
  %2564 = shufflevector <32 x i16> %2559, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2565 = getelementptr inbounds i16, i16* %2562, i64 16
  %2566 = bitcast i16* %2565 to <16 x i16>*
  store <16 x i16> %2564, <16 x i16>* %2566, align 2, !tbaa !401
  %2567 = add nuw nsw i32 %blur_y.s0.x.x.rebased106, 1
  %.not2756 = icmp eq i32 %2567, %t1683
  br i1 %.not2756, label %"end for blur_y.s0.x.x.rebased105", label %"for blur_y.s0.x.x.rebased104"

after_bb113:                                      ; preds = %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge", %"produce blur_x116"
  %.pre-phi3463 = phi i32 [ %.pre3462, %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge" ], [ %2634, %"produce blur_x116" ]
  %2568 = mul nsw i32 %.pre-phi3463, %a73
  %t1722 = sub nsw i32 %2568, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased118.preheader", label %"end for blur_y.s0.x.x.rebased119", !prof !386

"for blur_y.s0.x.x.rebased118.preheader":         ; preds = %after_bb113
  %2569 = sext i32 %t1722 to i64
  %2570 = zext i32 %.pre-phi3449 to i64
  %2571 = mul nsw i64 %2570, %112
  %2572 = sub nsw i64 %2571, %96
  %2573 = zext i32 %.pre-phi3445 to i64
  %2574 = mul nsw i64 %2573, %112
  %2575 = sub nsw i64 %2574, %96
  %2576 = zext i32 %.pre-phi3453 to i64
  %2577 = mul nsw i64 %2576, %112
  %2578 = sub nsw i64 %2577, %96
  %2579 = zext i32 %.pre-phi3463 to i64
  %2580 = mul nsw i64 %2579, %112
  %2581 = sub nsw i64 %2580, %96
  %2582 = zext i32 %.pre-phi3457 to i64
  %2583 = mul nsw i64 %2582, %112
  %2584 = sub nsw i64 %2583, %96
  %2585 = sext i32 %a26 to i64
  %2586 = add nsw i64 %2585, 1
  %2587 = mul nsw i64 %2586, %113
  %2588 = add nsw i64 %2587, %116
  br label %"for blur_y.s0.x.x.rebased118"

"produce blur_x116":                              ; preds = %"end for blur_y.s0.x.x.rebased105"
  %2589 = getelementptr inbounds i16, i16* %read_input, i64 %117
  %2590 = getelementptr inbounds i16, i16* %2589, i64 -31
  %2591 = bitcast i16* %2590 to <16 x i16>*
  %2592 = load <16 x i16>, <16 x i16>* %2591, align 2, !tbaa !396
  %2593 = getelementptr inbounds i16, i16* %2589, i64 -15
  %2594 = bitcast i16* %2593 to <16 x i16>*
  %2595 = load <16 x i16>, <16 x i16>* %2594, align 2, !tbaa !396
  %2596 = getelementptr inbounds i16, i16* %2589, i64 -32
  %2597 = bitcast i16* %2596 to <16 x i16>*
  %2598 = load <16 x i16>, <16 x i16>* %2597, align 2, !tbaa !396
  %2599 = getelementptr inbounds i16, i16* %2589, i64 -16
  %2600 = bitcast i16* %2599 to <16 x i16>*
  %2601 = load <16 x i16>, <16 x i16>* %2600, align 2, !tbaa !396
  %2602 = getelementptr inbounds i16, i16* %2589, i64 -30
  %2603 = bitcast i16* %2602 to <16 x i16>*
  %2604 = load <16 x i16>, <16 x i16>* %2603, align 2, !tbaa !396
  %2605 = getelementptr inbounds i16, i16* %2589, i64 -14
  %2606 = bitcast i16* %2605 to <16 x i16>*
  %2607 = load <16 x i16>, <16 x i16>* %2606, align 2, !tbaa !396
  %2608 = getelementptr inbounds i16, i16* %2589, i64 -28
  %2609 = bitcast i16* %2608 to <16 x i16>*
  %2610 = load <16 x i16>, <16 x i16>* %2609, align 2, !tbaa !396
  %2611 = getelementptr inbounds i16, i16* %2589, i64 -12
  %2612 = bitcast i16* %2611 to <16 x i16>*
  %2613 = load <16 x i16>, <16 x i16>* %2612, align 2, !tbaa !396
  %2614 = getelementptr inbounds i16, i16* %2589, i64 -29
  %2615 = bitcast i16* %2614 to <16 x i16>*
  %2616 = load <16 x i16>, <16 x i16>* %2615, align 2, !tbaa !396
  %2617 = getelementptr inbounds i16, i16* %2589, i64 -13
  %2618 = bitcast i16* %2617 to <16 x i16>*
  %2619 = load <16 x i16>, <16 x i16>* %2618, align 2, !tbaa !396
  %2620 = add <16 x i16> %2598, %2592
  %2621 = add <16 x i16> %2620, %2604
  %2622 = add <16 x i16> %2621, %2610
  %2623 = add <16 x i16> %2622, %2616
  %2624 = add <16 x i16> %2601, %2595
  %2625 = add <16 x i16> %2624, %2607
  %2626 = add <16 x i16> %2625, %2613
  %2627 = add <16 x i16> %2626, %2619
  %2628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2623, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2629 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2627, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2630 = shufflevector <16 x i16> %2628, <16 x i16> %2629, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2631 = lshr <32 x i16> %2630, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2632 = shufflevector <32 x i16> %2631, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2633 = add nsw i32 %a26, 5
  %2634 = and i32 %2633, 7
  %2635 = zext i32 %2634 to i64
  %2636 = mul nsw i64 %97, %2635
  %2637 = add nsw i64 %99, %2636
  %2638 = getelementptr inbounds i16, i16* %blur_x, i64 %2637
  %2639 = getelementptr inbounds i16, i16* %2638, i64 -32
  %2640 = bitcast i16* %2639 to <16 x i16>*
  store <16 x i16> %2632, <16 x i16>* %2640, align 2, !tbaa !399
  %2641 = shufflevector <32 x i16> %2631, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2642 = getelementptr inbounds i16, i16* %2638, i64 -16
  %2643 = bitcast i16* %2642 to <16 x i16>*
  store <16 x i16> %2641, <16 x i16>* %2643, align 2, !tbaa !399
  %2644 = zext i32 %.pre-phi3449 to i64
  %2645 = mul nsw i64 %2644, %112
  %2646 = add nsw i64 %2645, %94
  %2647 = getelementptr inbounds i16, i16* %blur_x, i64 %2646
  %2648 = getelementptr inbounds i16, i16* %2647, i64 -32
  %2649 = bitcast i16* %2648 to <16 x i16>*
  %2650 = load <16 x i16>, <16 x i16>* %2649, align 2, !tbaa !399
  %2651 = getelementptr inbounds i16, i16* %2647, i64 -16
  %2652 = bitcast i16* %2651 to <16 x i16>*
  %2653 = load <16 x i16>, <16 x i16>* %2652, align 2, !tbaa !399
  %2654 = zext i32 %.pre-phi3445 to i64
  %2655 = mul nsw i64 %2654, %112
  %2656 = add nsw i64 %2655, %94
  %2657 = getelementptr inbounds i16, i16* %blur_x, i64 %2656
  %2658 = getelementptr inbounds i16, i16* %2657, i64 -32
  %2659 = bitcast i16* %2658 to <16 x i16>*
  %2660 = load <16 x i16>, <16 x i16>* %2659, align 2, !tbaa !399
  %2661 = getelementptr inbounds i16, i16* %2657, i64 -16
  %2662 = bitcast i16* %2661 to <16 x i16>*
  %2663 = load <16 x i16>, <16 x i16>* %2662, align 2, !tbaa !399
  %2664 = zext i32 %.pre-phi3453 to i64
  %2665 = mul nsw i64 %2664, %112
  %2666 = add nsw i64 %2665, %94
  %2667 = getelementptr inbounds i16, i16* %blur_x, i64 %2666
  %2668 = getelementptr inbounds i16, i16* %2667, i64 -32
  %2669 = bitcast i16* %2668 to <16 x i16>*
  %2670 = load <16 x i16>, <16 x i16>* %2669, align 2, !tbaa !399
  %2671 = getelementptr inbounds i16, i16* %2667, i64 -16
  %2672 = bitcast i16* %2671 to <16 x i16>*
  %2673 = load <16 x i16>, <16 x i16>* %2672, align 2, !tbaa !399
  %2674 = mul nsw i64 %2635, %112
  %2675 = add nsw i64 %2674, %94
  %2676 = getelementptr inbounds i16, i16* %blur_x, i64 %2675
  %2677 = getelementptr inbounds i16, i16* %2676, i64 -32
  %2678 = bitcast i16* %2677 to <16 x i16>*
  %2679 = load <16 x i16>, <16 x i16>* %2678, align 2, !tbaa !399
  %2680 = getelementptr inbounds i16, i16* %2676, i64 -16
  %2681 = bitcast i16* %2680 to <16 x i16>*
  %2682 = load <16 x i16>, <16 x i16>* %2681, align 2, !tbaa !399
  %2683 = zext i32 %.pre-phi3457 to i64
  %2684 = mul nsw i64 %2683, %112
  %2685 = add nsw i64 %2684, %94
  %2686 = getelementptr inbounds i16, i16* %blur_x, i64 %2685
  %2687 = getelementptr inbounds i16, i16* %2686, i64 -32
  %2688 = bitcast i16* %2687 to <16 x i16>*
  %2689 = load <16 x i16>, <16 x i16>* %2688, align 2, !tbaa !399
  %2690 = getelementptr inbounds i16, i16* %2686, i64 -16
  %2691 = bitcast i16* %2690 to <16 x i16>*
  %2692 = load <16 x i16>, <16 x i16>* %2691, align 2, !tbaa !399
  %2693 = add <16 x i16> %2660, %2650
  %2694 = add <16 x i16> %2693, %2670
  %2695 = add <16 x i16> %2694, %2679
  %2696 = add <16 x i16> %2695, %2689
  %2697 = add <16 x i16> %2663, %2653
  %2698 = add <16 x i16> %2697, %2673
  %2699 = add <16 x i16> %2698, %2682
  %2700 = add <16 x i16> %2699, %2692
  %2701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2696, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2700, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2703 = shufflevector <16 x i16> %2701, <16 x i16> %2702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2704 = lshr <32 x i16> %2703, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2705 = shufflevector <32 x i16> %2704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2706 = sext i32 %a26 to i64
  %2707 = add nsw i64 %2706, 1
  %2708 = mul nsw i64 %2707, %113
  %2709 = add nsw i64 %115, %2708
  %2710 = getelementptr inbounds i16, i16* %66, i64 %2709
  %2711 = getelementptr inbounds i16, i16* %2710, i64 -32
  %2712 = bitcast i16* %2711 to <16 x i16>*
  store <16 x i16> %2705, <16 x i16>* %2712, align 2, !tbaa !401
  %2713 = shufflevector <32 x i16> %2704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2714 = getelementptr inbounds i16, i16* %2710, i64 -16
  %2715 = bitcast i16* %2714 to <16 x i16>*
  store <16 x i16> %2713, <16 x i16>* %2715, align 2, !tbaa !401
  br label %after_bb113

"for blur_y.s0.x.x.rebased118":                   ; preds = %"for blur_y.s0.x.x.rebased118.preheader", %"consume blur_x125"
  %indvars.iv3262 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased118.preheader" ], [ %indvars.iv.next3263, %"consume blur_x125" ]
  %2716 = add nsw i64 %indvars.iv3262, %101
  %2717 = icmp slt i64 %2716, 1
  %2718 = trunc i64 %2716 to i32
  %2719 = shl nsw i32 %2718, 5
  %2720 = icmp sgt i32 %4, %2719
  %2721 = or i1 %2717, %2720
  br i1 %2721, label %"produce blur_x124", label %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge"

"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased118"
  %.pre3464 = shl nsw i64 %2716, 5
  br label %"consume blur_x125"

"end for blur_y.s0.x.x.rebased119":               ; preds = %"consume blur_x125", %after_bb113
  br i1 %102, label %"for blur_y.s0.x.x.rebased126.preheader", label %"end for blur_y.s0.x.x.rebased127", !prof !386

"for blur_y.s0.x.x.rebased126.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased119"
  %2722 = sext i32 %t1722 to i64
  %2723 = zext i32 %.pre-phi3449 to i64
  %2724 = mul nsw i64 %2723, %112
  %2725 = sub nsw i64 %2724, %96
  %2726 = zext i32 %.pre-phi3445 to i64
  %2727 = mul nsw i64 %2726, %112
  %2728 = sub nsw i64 %2727, %96
  %2729 = zext i32 %.pre-phi3453 to i64
  %2730 = mul nsw i64 %2729, %112
  %2731 = sub nsw i64 %2730, %96
  %2732 = zext i32 %.pre-phi3463 to i64
  %2733 = mul nsw i64 %2732, %112
  %2734 = sub nsw i64 %2733, %96
  %2735 = zext i32 %.pre-phi3457 to i64
  %2736 = mul nsw i64 %2735, %112
  %2737 = sub nsw i64 %2736, %96
  %2738 = sext i32 %a26 to i64
  %2739 = add nsw i64 %2738, 1
  %2740 = mul nsw i64 %2739, %113
  %2741 = add nsw i64 %2740, %116
  br label %"for blur_y.s0.x.x.rebased126"

"produce blur_x124":                              ; preds = %"for blur_y.s0.x.x.rebased118"
  %t728 = add nsw i32 %2719, %t1721
  %2742 = sext i32 %t728 to i64
  %2743 = getelementptr inbounds i16, i16* %read_input, i64 %2742
  %2744 = getelementptr inbounds i16, i16* %2743, i64 1
  %2745 = bitcast i16* %2744 to <16 x i16>*
  %2746 = load <16 x i16>, <16 x i16>* %2745, align 2, !tbaa !396
  %2747 = getelementptr inbounds i16, i16* %2743, i64 17
  %2748 = bitcast i16* %2747 to <16 x i16>*
  %2749 = load <16 x i16>, <16 x i16>* %2748, align 2, !tbaa !396
  %2750 = bitcast i16* %2743 to <16 x i16>*
  %2751 = load <16 x i16>, <16 x i16>* %2750, align 2, !tbaa !396
  %2752 = getelementptr inbounds i16, i16* %2743, i64 16
  %2753 = bitcast i16* %2752 to <16 x i16>*
  %2754 = load <16 x i16>, <16 x i16>* %2753, align 2, !tbaa !396
  %2755 = getelementptr inbounds i16, i16* %2743, i64 2
  %2756 = bitcast i16* %2755 to <16 x i16>*
  %2757 = load <16 x i16>, <16 x i16>* %2756, align 2, !tbaa !396
  %2758 = getelementptr inbounds i16, i16* %2743, i64 18
  %2759 = bitcast i16* %2758 to <16 x i16>*
  %2760 = load <16 x i16>, <16 x i16>* %2759, align 2, !tbaa !396
  %2761 = getelementptr inbounds i16, i16* %2743, i64 4
  %2762 = bitcast i16* %2761 to <16 x i16>*
  %2763 = load <16 x i16>, <16 x i16>* %2762, align 2, !tbaa !396
  %2764 = getelementptr inbounds i16, i16* %2743, i64 20
  %2765 = bitcast i16* %2764 to <16 x i16>*
  %2766 = load <16 x i16>, <16 x i16>* %2765, align 2, !tbaa !396
  %2767 = getelementptr inbounds i16, i16* %2743, i64 3
  %2768 = bitcast i16* %2767 to <16 x i16>*
  %2769 = load <16 x i16>, <16 x i16>* %2768, align 2, !tbaa !396
  %2770 = getelementptr inbounds i16, i16* %2743, i64 19
  %2771 = bitcast i16* %2770 to <16 x i16>*
  %2772 = load <16 x i16>, <16 x i16>* %2771, align 2, !tbaa !396
  %2773 = add <16 x i16> %2751, %2746
  %2774 = add <16 x i16> %2773, %2757
  %2775 = add <16 x i16> %2774, %2763
  %2776 = add <16 x i16> %2775, %2769
  %2777 = add <16 x i16> %2754, %2749
  %2778 = add <16 x i16> %2777, %2760
  %2779 = add <16 x i16> %2778, %2766
  %2780 = add <16 x i16> %2779, %2772
  %2781 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2776, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2782 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2780, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2783 = shufflevector <16 x i16> %2781, <16 x i16> %2782, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2784 = lshr <32 x i16> %2783, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2785 = shufflevector <32 x i16> %2784, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2786 = shl nsw i64 %2716, 5
  %2787 = add nsw i64 %2786, %2569
  %2788 = getelementptr inbounds i16, i16* %blur_x, i64 %2787
  %2789 = bitcast i16* %2788 to <16 x i16>*
  store <16 x i16> %2785, <16 x i16>* %2789, align 2, !tbaa !399
  %2790 = shufflevector <32 x i16> %2784, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2791 = getelementptr inbounds i16, i16* %2788, i64 16
  %2792 = bitcast i16* %2791 to <16 x i16>*
  store <16 x i16> %2790, <16 x i16>* %2792, align 2, !tbaa !399
  br label %"consume blur_x125"

"consume blur_x125":                              ; preds = %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge", %"produce blur_x124"
  %.pre-phi3465 = phi i64 [ %.pre3464, %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge" ], [ %2786, %"produce blur_x124" ]
  %2793 = add nsw i64 %2572, %.pre-phi3465
  %2794 = getelementptr inbounds i16, i16* %blur_x, i64 %2793
  %2795 = bitcast i16* %2794 to <16 x i16>*
  %2796 = load <16 x i16>, <16 x i16>* %2795, align 2, !tbaa !399
  %2797 = getelementptr inbounds i16, i16* %2794, i64 16
  %2798 = bitcast i16* %2797 to <16 x i16>*
  %2799 = load <16 x i16>, <16 x i16>* %2798, align 2, !tbaa !399
  %2800 = add nsw i64 %2575, %.pre-phi3465
  %2801 = getelementptr inbounds i16, i16* %blur_x, i64 %2800
  %2802 = bitcast i16* %2801 to <16 x i16>*
  %2803 = load <16 x i16>, <16 x i16>* %2802, align 2, !tbaa !399
  %2804 = getelementptr inbounds i16, i16* %2801, i64 16
  %2805 = bitcast i16* %2804 to <16 x i16>*
  %2806 = load <16 x i16>, <16 x i16>* %2805, align 2, !tbaa !399
  %2807 = add nsw i64 %2578, %.pre-phi3465
  %2808 = getelementptr inbounds i16, i16* %blur_x, i64 %2807
  %2809 = bitcast i16* %2808 to <16 x i16>*
  %2810 = load <16 x i16>, <16 x i16>* %2809, align 2, !tbaa !399
  %2811 = getelementptr inbounds i16, i16* %2808, i64 16
  %2812 = bitcast i16* %2811 to <16 x i16>*
  %2813 = load <16 x i16>, <16 x i16>* %2812, align 2, !tbaa !399
  %2814 = add nsw i64 %2581, %.pre-phi3465
  %2815 = getelementptr inbounds i16, i16* %blur_x, i64 %2814
  %2816 = bitcast i16* %2815 to <16 x i16>*
  %2817 = load <16 x i16>, <16 x i16>* %2816, align 2, !tbaa !399
  %2818 = getelementptr inbounds i16, i16* %2815, i64 16
  %2819 = bitcast i16* %2818 to <16 x i16>*
  %2820 = load <16 x i16>, <16 x i16>* %2819, align 2, !tbaa !399
  %2821 = add nsw i64 %2584, %.pre-phi3465
  %2822 = getelementptr inbounds i16, i16* %blur_x, i64 %2821
  %2823 = bitcast i16* %2822 to <16 x i16>*
  %2824 = load <16 x i16>, <16 x i16>* %2823, align 2, !tbaa !399
  %2825 = getelementptr inbounds i16, i16* %2822, i64 16
  %2826 = bitcast i16* %2825 to <16 x i16>*
  %2827 = load <16 x i16>, <16 x i16>* %2826, align 2, !tbaa !399
  %2828 = add <16 x i16> %2803, %2796
  %2829 = add <16 x i16> %2828, %2810
  %2830 = add <16 x i16> %2829, %2817
  %2831 = add <16 x i16> %2830, %2824
  %2832 = add <16 x i16> %2806, %2799
  %2833 = add <16 x i16> %2832, %2813
  %2834 = add <16 x i16> %2833, %2820
  %2835 = add <16 x i16> %2834, %2827
  %2836 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2831, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2837 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2835, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2838 = shufflevector <16 x i16> %2836, <16 x i16> %2837, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2839 = lshr <32 x i16> %2838, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2840 = shufflevector <32 x i16> %2839, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2841 = add nsw i64 %2588, %.pre-phi3465
  %2842 = getelementptr inbounds i16, i16* %66, i64 %2841
  %2843 = bitcast i16* %2842 to <16 x i16>*
  store <16 x i16> %2840, <16 x i16>* %2843, align 2, !tbaa !401
  %2844 = shufflevector <32 x i16> %2839, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2845 = getelementptr inbounds i16, i16* %2842, i64 16
  %2846 = bitcast i16* %2845 to <16 x i16>*
  store <16 x i16> %2844, <16 x i16>* %2846, align 2, !tbaa !401
  %indvars.iv.next3263 = add nuw nsw i64 %indvars.iv3262, 1
  %.not2755 = icmp eq i64 %indvars.iv.next3263, %184
  br i1 %.not2755, label %"end for blur_y.s0.x.x.rebased119", label %"for blur_y.s0.x.x.rebased118"

"for blur_y.s0.x.x.rebased126":                   ; preds = %"for blur_y.s0.x.x.rebased126.preheader", %"consume blur_x134"
  %blur_y.s0.x.x.rebased128 = phi i32 [ %2959, %"consume blur_x134" ], [ 0, %"for blur_y.s0.x.x.rebased126.preheader" ]
  %2847 = add nsw i32 %blur_y.s0.x.x.rebased128, %t1626
  %a112 = shl nsw i32 %2847, 5
  %2848 = icmp sgt i32 %a14, %a112
  %b118 = select i1 %2848, i32 %a112, i32 %a14
  %2849 = icmp slt i32 %2847, 1
  %2850 = icmp sgt i32 %4, %a112
  %2851 = or i1 %2849, %2850
  br i1 %2851, label %"produce blur_x132", label %"consume blur_x134"

"end for blur_y.s0.x.x.rebased127":               ; preds = %"consume blur_x134", %"end for blur_y.s0.x.x.rebased119"
  br i1 %34, label %"produce blur_x138", label %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge"

"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased127"
  %.pre3466 = add nsw i32 %a26, 6
  %.pre3468 = and i32 %.pre3466, 7
  br label %after_bb135

"produce blur_x132":                              ; preds = %"for blur_y.s0.x.x.rebased126"
  %2852 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s133 = select i1 %2852, i32 %b118, i32 %4
  %t733 = add nsw i32 %blur_x.s0.x.v1.base.s133, %t1721
  %2853 = sext i32 %t733 to i64
  %2854 = getelementptr inbounds i16, i16* %read_input, i64 %2853
  %2855 = getelementptr inbounds i16, i16* %2854, i64 1
  %2856 = bitcast i16* %2855 to <16 x i16>*
  %2857 = load <16 x i16>, <16 x i16>* %2856, align 2, !tbaa !396
  %2858 = getelementptr inbounds i16, i16* %2854, i64 17
  %2859 = bitcast i16* %2858 to <16 x i16>*
  %2860 = load <16 x i16>, <16 x i16>* %2859, align 2, !tbaa !396
  %2861 = bitcast i16* %2854 to <16 x i16>*
  %2862 = load <16 x i16>, <16 x i16>* %2861, align 2, !tbaa !396
  %2863 = getelementptr inbounds i16, i16* %2854, i64 16
  %2864 = bitcast i16* %2863 to <16 x i16>*
  %2865 = load <16 x i16>, <16 x i16>* %2864, align 2, !tbaa !396
  %2866 = getelementptr inbounds i16, i16* %2854, i64 2
  %2867 = bitcast i16* %2866 to <16 x i16>*
  %2868 = load <16 x i16>, <16 x i16>* %2867, align 2, !tbaa !396
  %2869 = getelementptr inbounds i16, i16* %2854, i64 18
  %2870 = bitcast i16* %2869 to <16 x i16>*
  %2871 = load <16 x i16>, <16 x i16>* %2870, align 2, !tbaa !396
  %2872 = getelementptr inbounds i16, i16* %2854, i64 4
  %2873 = bitcast i16* %2872 to <16 x i16>*
  %2874 = load <16 x i16>, <16 x i16>* %2873, align 2, !tbaa !396
  %2875 = getelementptr inbounds i16, i16* %2854, i64 20
  %2876 = bitcast i16* %2875 to <16 x i16>*
  %2877 = load <16 x i16>, <16 x i16>* %2876, align 2, !tbaa !396
  %2878 = getelementptr inbounds i16, i16* %2854, i64 3
  %2879 = bitcast i16* %2878 to <16 x i16>*
  %2880 = load <16 x i16>, <16 x i16>* %2879, align 2, !tbaa !396
  %2881 = getelementptr inbounds i16, i16* %2854, i64 19
  %2882 = bitcast i16* %2881 to <16 x i16>*
  %2883 = load <16 x i16>, <16 x i16>* %2882, align 2, !tbaa !396
  %2884 = add <16 x i16> %2862, %2857
  %2885 = add <16 x i16> %2884, %2868
  %2886 = add <16 x i16> %2885, %2874
  %2887 = add <16 x i16> %2886, %2880
  %2888 = add <16 x i16> %2865, %2860
  %2889 = add <16 x i16> %2888, %2871
  %2890 = add <16 x i16> %2889, %2877
  %2891 = add <16 x i16> %2890, %2883
  %2892 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2887, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2893 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2891, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2894 = shufflevector <16 x i16> %2892, <16 x i16> %2893, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2895 = lshr <32 x i16> %2894, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2896 = shufflevector <32 x i16> %2895, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2897 = sext i32 %blur_x.s0.x.v1.base.s133 to i64
  %2898 = add nsw i64 %2897, %2722
  %2899 = getelementptr inbounds i16, i16* %blur_x, i64 %2898
  %2900 = bitcast i16* %2899 to <16 x i16>*
  store <16 x i16> %2896, <16 x i16>* %2900, align 2, !tbaa !399
  %2901 = shufflevector <32 x i16> %2895, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2902 = getelementptr inbounds i16, i16* %2899, i64 16
  %2903 = bitcast i16* %2902 to <16 x i16>*
  store <16 x i16> %2901, <16 x i16>* %2903, align 2, !tbaa !399
  br label %"consume blur_x134"

"consume blur_x134":                              ; preds = %"for blur_y.s0.x.x.rebased126", %"produce blur_x132"
  %2904 = sext i32 %b118 to i64
  %2905 = add nsw i64 %2725, %2904
  %2906 = getelementptr inbounds i16, i16* %blur_x, i64 %2905
  %2907 = bitcast i16* %2906 to <16 x i16>*
  %2908 = load <16 x i16>, <16 x i16>* %2907, align 2, !tbaa !399
  %2909 = getelementptr inbounds i16, i16* %2906, i64 16
  %2910 = bitcast i16* %2909 to <16 x i16>*
  %2911 = load <16 x i16>, <16 x i16>* %2910, align 2, !tbaa !399
  %2912 = add nsw i64 %2728, %2904
  %2913 = getelementptr inbounds i16, i16* %blur_x, i64 %2912
  %2914 = bitcast i16* %2913 to <16 x i16>*
  %2915 = load <16 x i16>, <16 x i16>* %2914, align 2, !tbaa !399
  %2916 = getelementptr inbounds i16, i16* %2913, i64 16
  %2917 = bitcast i16* %2916 to <16 x i16>*
  %2918 = load <16 x i16>, <16 x i16>* %2917, align 2, !tbaa !399
  %2919 = add nsw i64 %2731, %2904
  %2920 = getelementptr inbounds i16, i16* %blur_x, i64 %2919
  %2921 = bitcast i16* %2920 to <16 x i16>*
  %2922 = load <16 x i16>, <16 x i16>* %2921, align 2, !tbaa !399
  %2923 = getelementptr inbounds i16, i16* %2920, i64 16
  %2924 = bitcast i16* %2923 to <16 x i16>*
  %2925 = load <16 x i16>, <16 x i16>* %2924, align 2, !tbaa !399
  %2926 = add nsw i64 %2734, %2904
  %2927 = getelementptr inbounds i16, i16* %blur_x, i64 %2926
  %2928 = bitcast i16* %2927 to <16 x i16>*
  %2929 = load <16 x i16>, <16 x i16>* %2928, align 2, !tbaa !399
  %2930 = getelementptr inbounds i16, i16* %2927, i64 16
  %2931 = bitcast i16* %2930 to <16 x i16>*
  %2932 = load <16 x i16>, <16 x i16>* %2931, align 2, !tbaa !399
  %2933 = add nsw i64 %2737, %2904
  %2934 = getelementptr inbounds i16, i16* %blur_x, i64 %2933
  %2935 = bitcast i16* %2934 to <16 x i16>*
  %2936 = load <16 x i16>, <16 x i16>* %2935, align 2, !tbaa !399
  %2937 = getelementptr inbounds i16, i16* %2934, i64 16
  %2938 = bitcast i16* %2937 to <16 x i16>*
  %2939 = load <16 x i16>, <16 x i16>* %2938, align 2, !tbaa !399
  %2940 = add <16 x i16> %2915, %2908
  %2941 = add <16 x i16> %2940, %2922
  %2942 = add <16 x i16> %2941, %2929
  %2943 = add <16 x i16> %2942, %2936
  %2944 = add <16 x i16> %2918, %2911
  %2945 = add <16 x i16> %2944, %2925
  %2946 = add <16 x i16> %2945, %2932
  %2947 = add <16 x i16> %2946, %2939
  %2948 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2943, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2949 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2947, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2950 = shufflevector <16 x i16> %2948, <16 x i16> %2949, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2951 = lshr <32 x i16> %2950, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2952 = shufflevector <32 x i16> %2951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2953 = add nsw i64 %2741, %2904
  %2954 = getelementptr inbounds i16, i16* %66, i64 %2953
  %2955 = bitcast i16* %2954 to <16 x i16>*
  store <16 x i16> %2952, <16 x i16>* %2955, align 2, !tbaa !401
  %2956 = shufflevector <32 x i16> %2951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2957 = getelementptr inbounds i16, i16* %2954, i64 16
  %2958 = bitcast i16* %2957 to <16 x i16>*
  store <16 x i16> %2956, <16 x i16>* %2958, align 2, !tbaa !401
  %2959 = add nuw nsw i32 %blur_y.s0.x.x.rebased128, 1
  %.not2754 = icmp eq i32 %2959, %t1683
  br i1 %.not2754, label %"end for blur_y.s0.x.x.rebased127", label %"for blur_y.s0.x.x.rebased126"

after_bb135:                                      ; preds = %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge", %"produce blur_x138"
  %.pre-phi3469 = phi i32 [ %.pre3468, %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge" ], [ %3026, %"produce blur_x138" ]
  %2960 = mul nsw i32 %.pre-phi3469, %a73
  %t1738 = sub nsw i32 %2960, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased140.preheader", label %"end for blur_y.s0.x.x.rebased141", !prof !386

"for blur_y.s0.x.x.rebased140.preheader":         ; preds = %after_bb135
  %2961 = sext i32 %t1738 to i64
  %2962 = zext i32 %.pre-phi3453 to i64
  %2963 = mul nsw i64 %2962, %112
  %2964 = sub nsw i64 %2963, %96
  %2965 = zext i32 %.pre-phi3449 to i64
  %2966 = mul nsw i64 %2965, %112
  %2967 = sub nsw i64 %2966, %96
  %2968 = zext i32 %.pre-phi3457 to i64
  %2969 = mul nsw i64 %2968, %112
  %2970 = sub nsw i64 %2969, %96
  %2971 = zext i32 %.pre-phi3469 to i64
  %2972 = mul nsw i64 %2971, %112
  %2973 = sub nsw i64 %2972, %96
  %2974 = zext i32 %.pre-phi3463 to i64
  %2975 = mul nsw i64 %2974, %112
  %2976 = sub nsw i64 %2975, %96
  %2977 = sext i32 %a26 to i64
  %2978 = add nsw i64 %2977, 2
  %2979 = mul nsw i64 %2978, %113
  %2980 = add nsw i64 %2979, %116
  br label %"for blur_y.s0.x.x.rebased140"

"produce blur_x138":                              ; preds = %"end for blur_y.s0.x.x.rebased127"
  %2981 = getelementptr inbounds i16, i16* %read_input, i64 %119
  %2982 = getelementptr inbounds i16, i16* %2981, i64 -31
  %2983 = bitcast i16* %2982 to <16 x i16>*
  %2984 = load <16 x i16>, <16 x i16>* %2983, align 2, !tbaa !396
  %2985 = getelementptr inbounds i16, i16* %2981, i64 -15
  %2986 = bitcast i16* %2985 to <16 x i16>*
  %2987 = load <16 x i16>, <16 x i16>* %2986, align 2, !tbaa !396
  %2988 = getelementptr inbounds i16, i16* %2981, i64 -32
  %2989 = bitcast i16* %2988 to <16 x i16>*
  %2990 = load <16 x i16>, <16 x i16>* %2989, align 2, !tbaa !396
  %2991 = getelementptr inbounds i16, i16* %2981, i64 -16
  %2992 = bitcast i16* %2991 to <16 x i16>*
  %2993 = load <16 x i16>, <16 x i16>* %2992, align 2, !tbaa !396
  %2994 = getelementptr inbounds i16, i16* %2981, i64 -30
  %2995 = bitcast i16* %2994 to <16 x i16>*
  %2996 = load <16 x i16>, <16 x i16>* %2995, align 2, !tbaa !396
  %2997 = getelementptr inbounds i16, i16* %2981, i64 -14
  %2998 = bitcast i16* %2997 to <16 x i16>*
  %2999 = load <16 x i16>, <16 x i16>* %2998, align 2, !tbaa !396
  %3000 = getelementptr inbounds i16, i16* %2981, i64 -28
  %3001 = bitcast i16* %3000 to <16 x i16>*
  %3002 = load <16 x i16>, <16 x i16>* %3001, align 2, !tbaa !396
  %3003 = getelementptr inbounds i16, i16* %2981, i64 -12
  %3004 = bitcast i16* %3003 to <16 x i16>*
  %3005 = load <16 x i16>, <16 x i16>* %3004, align 2, !tbaa !396
  %3006 = getelementptr inbounds i16, i16* %2981, i64 -29
  %3007 = bitcast i16* %3006 to <16 x i16>*
  %3008 = load <16 x i16>, <16 x i16>* %3007, align 2, !tbaa !396
  %3009 = getelementptr inbounds i16, i16* %2981, i64 -13
  %3010 = bitcast i16* %3009 to <16 x i16>*
  %3011 = load <16 x i16>, <16 x i16>* %3010, align 2, !tbaa !396
  %3012 = add <16 x i16> %2990, %2984
  %3013 = add <16 x i16> %3012, %2996
  %3014 = add <16 x i16> %3013, %3002
  %3015 = add <16 x i16> %3014, %3008
  %3016 = add <16 x i16> %2993, %2987
  %3017 = add <16 x i16> %3016, %2999
  %3018 = add <16 x i16> %3017, %3005
  %3019 = add <16 x i16> %3018, %3011
  %3020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3015, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3021 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3019, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3022 = shufflevector <16 x i16> %3020, <16 x i16> %3021, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3023 = lshr <32 x i16> %3022, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3024 = shufflevector <32 x i16> %3023, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3025 = add nsw i32 %a26, 6
  %3026 = and i32 %3025, 7
  %3027 = zext i32 %3026 to i64
  %3028 = mul nsw i64 %97, %3027
  %3029 = add nsw i64 %99, %3028
  %3030 = getelementptr inbounds i16, i16* %blur_x, i64 %3029
  %3031 = getelementptr inbounds i16, i16* %3030, i64 -32
  %3032 = bitcast i16* %3031 to <16 x i16>*
  store <16 x i16> %3024, <16 x i16>* %3032, align 2, !tbaa !399
  %3033 = shufflevector <32 x i16> %3023, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3034 = getelementptr inbounds i16, i16* %3030, i64 -16
  %3035 = bitcast i16* %3034 to <16 x i16>*
  store <16 x i16> %3033, <16 x i16>* %3035, align 2, !tbaa !399
  %3036 = zext i32 %.pre-phi3453 to i64
  %3037 = mul nsw i64 %3036, %112
  %3038 = add nsw i64 %3037, %94
  %3039 = getelementptr inbounds i16, i16* %blur_x, i64 %3038
  %3040 = getelementptr inbounds i16, i16* %3039, i64 -32
  %3041 = bitcast i16* %3040 to <16 x i16>*
  %3042 = load <16 x i16>, <16 x i16>* %3041, align 2, !tbaa !399
  %3043 = getelementptr inbounds i16, i16* %3039, i64 -16
  %3044 = bitcast i16* %3043 to <16 x i16>*
  %3045 = load <16 x i16>, <16 x i16>* %3044, align 2, !tbaa !399
  %3046 = zext i32 %.pre-phi3449 to i64
  %3047 = mul nsw i64 %3046, %112
  %3048 = add nsw i64 %3047, %94
  %3049 = getelementptr inbounds i16, i16* %blur_x, i64 %3048
  %3050 = getelementptr inbounds i16, i16* %3049, i64 -32
  %3051 = bitcast i16* %3050 to <16 x i16>*
  %3052 = load <16 x i16>, <16 x i16>* %3051, align 2, !tbaa !399
  %3053 = getelementptr inbounds i16, i16* %3049, i64 -16
  %3054 = bitcast i16* %3053 to <16 x i16>*
  %3055 = load <16 x i16>, <16 x i16>* %3054, align 2, !tbaa !399
  %3056 = zext i32 %.pre-phi3457 to i64
  %3057 = mul nsw i64 %3056, %112
  %3058 = add nsw i64 %3057, %94
  %3059 = getelementptr inbounds i16, i16* %blur_x, i64 %3058
  %3060 = getelementptr inbounds i16, i16* %3059, i64 -32
  %3061 = bitcast i16* %3060 to <16 x i16>*
  %3062 = load <16 x i16>, <16 x i16>* %3061, align 2, !tbaa !399
  %3063 = getelementptr inbounds i16, i16* %3059, i64 -16
  %3064 = bitcast i16* %3063 to <16 x i16>*
  %3065 = load <16 x i16>, <16 x i16>* %3064, align 2, !tbaa !399
  %3066 = mul nsw i64 %3027, %112
  %3067 = add nsw i64 %3066, %94
  %3068 = getelementptr inbounds i16, i16* %blur_x, i64 %3067
  %3069 = getelementptr inbounds i16, i16* %3068, i64 -32
  %3070 = bitcast i16* %3069 to <16 x i16>*
  %3071 = load <16 x i16>, <16 x i16>* %3070, align 2, !tbaa !399
  %3072 = getelementptr inbounds i16, i16* %3068, i64 -16
  %3073 = bitcast i16* %3072 to <16 x i16>*
  %3074 = load <16 x i16>, <16 x i16>* %3073, align 2, !tbaa !399
  %3075 = zext i32 %.pre-phi3463 to i64
  %3076 = mul nsw i64 %3075, %112
  %3077 = add nsw i64 %3076, %94
  %3078 = getelementptr inbounds i16, i16* %blur_x, i64 %3077
  %3079 = getelementptr inbounds i16, i16* %3078, i64 -32
  %3080 = bitcast i16* %3079 to <16 x i16>*
  %3081 = load <16 x i16>, <16 x i16>* %3080, align 2, !tbaa !399
  %3082 = getelementptr inbounds i16, i16* %3078, i64 -16
  %3083 = bitcast i16* %3082 to <16 x i16>*
  %3084 = load <16 x i16>, <16 x i16>* %3083, align 2, !tbaa !399
  %3085 = add <16 x i16> %3052, %3042
  %3086 = add <16 x i16> %3085, %3062
  %3087 = add <16 x i16> %3086, %3071
  %3088 = add <16 x i16> %3087, %3081
  %3089 = add <16 x i16> %3055, %3045
  %3090 = add <16 x i16> %3089, %3065
  %3091 = add <16 x i16> %3090, %3074
  %3092 = add <16 x i16> %3091, %3084
  %3093 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3088, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3094 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3092, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3095 = shufflevector <16 x i16> %3093, <16 x i16> %3094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3096 = lshr <32 x i16> %3095, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3097 = shufflevector <32 x i16> %3096, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3098 = sext i32 %a26 to i64
  %3099 = add nsw i64 %3098, 2
  %3100 = mul nsw i64 %3099, %113
  %3101 = add nsw i64 %115, %3100
  %3102 = getelementptr inbounds i16, i16* %66, i64 %3101
  %3103 = getelementptr inbounds i16, i16* %3102, i64 -32
  %3104 = bitcast i16* %3103 to <16 x i16>*
  store <16 x i16> %3097, <16 x i16>* %3104, align 2, !tbaa !401
  %3105 = shufflevector <32 x i16> %3096, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3106 = getelementptr inbounds i16, i16* %3102, i64 -16
  %3107 = bitcast i16* %3106 to <16 x i16>*
  store <16 x i16> %3105, <16 x i16>* %3107, align 2, !tbaa !401
  br label %after_bb135

"for blur_y.s0.x.x.rebased140":                   ; preds = %"for blur_y.s0.x.x.rebased140.preheader", %"consume blur_x147"
  %indvars.iv3265 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased140.preheader" ], [ %indvars.iv.next3266, %"consume blur_x147" ]
  %3108 = add nsw i64 %indvars.iv3265, %101
  %3109 = icmp slt i64 %3108, 1
  %3110 = trunc i64 %3108 to i32
  %3111 = shl nsw i32 %3110, 5
  %3112 = icmp sgt i32 %4, %3111
  %3113 = or i1 %3109, %3112
  br i1 %3113, label %"produce blur_x146", label %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge"

"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased140"
  %.pre3470 = shl nsw i64 %3108, 5
  br label %"consume blur_x147"

"end for blur_y.s0.x.x.rebased141":               ; preds = %"consume blur_x147", %after_bb135
  br i1 %102, label %"for blur_y.s0.x.x.rebased148.preheader", label %"end for blur_y.s0.x.x.rebased149", !prof !386

"for blur_y.s0.x.x.rebased148.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased141"
  %3114 = sext i32 %t1738 to i64
  %3115 = zext i32 %.pre-phi3453 to i64
  %3116 = mul nsw i64 %3115, %112
  %3117 = sub nsw i64 %3116, %96
  %3118 = zext i32 %.pre-phi3449 to i64
  %3119 = mul nsw i64 %3118, %112
  %3120 = sub nsw i64 %3119, %96
  %3121 = zext i32 %.pre-phi3457 to i64
  %3122 = mul nsw i64 %3121, %112
  %3123 = sub nsw i64 %3122, %96
  %3124 = zext i32 %.pre-phi3469 to i64
  %3125 = mul nsw i64 %3124, %112
  %3126 = sub nsw i64 %3125, %96
  %3127 = zext i32 %.pre-phi3463 to i64
  %3128 = mul nsw i64 %3127, %112
  %3129 = sub nsw i64 %3128, %96
  %3130 = sext i32 %a26 to i64
  %3131 = add nsw i64 %3130, 2
  %3132 = mul nsw i64 %3131, %113
  %3133 = add nsw i64 %3132, %116
  br label %"for blur_y.s0.x.x.rebased148"

"produce blur_x146":                              ; preds = %"for blur_y.s0.x.x.rebased140"
  %t744 = add nsw i32 %3111, %t1737
  %3134 = sext i32 %t744 to i64
  %3135 = getelementptr inbounds i16, i16* %read_input, i64 %3134
  %3136 = getelementptr inbounds i16, i16* %3135, i64 1
  %3137 = bitcast i16* %3136 to <16 x i16>*
  %3138 = load <16 x i16>, <16 x i16>* %3137, align 2, !tbaa !396
  %3139 = getelementptr inbounds i16, i16* %3135, i64 17
  %3140 = bitcast i16* %3139 to <16 x i16>*
  %3141 = load <16 x i16>, <16 x i16>* %3140, align 2, !tbaa !396
  %3142 = bitcast i16* %3135 to <16 x i16>*
  %3143 = load <16 x i16>, <16 x i16>* %3142, align 2, !tbaa !396
  %3144 = getelementptr inbounds i16, i16* %3135, i64 16
  %3145 = bitcast i16* %3144 to <16 x i16>*
  %3146 = load <16 x i16>, <16 x i16>* %3145, align 2, !tbaa !396
  %3147 = getelementptr inbounds i16, i16* %3135, i64 2
  %3148 = bitcast i16* %3147 to <16 x i16>*
  %3149 = load <16 x i16>, <16 x i16>* %3148, align 2, !tbaa !396
  %3150 = getelementptr inbounds i16, i16* %3135, i64 18
  %3151 = bitcast i16* %3150 to <16 x i16>*
  %3152 = load <16 x i16>, <16 x i16>* %3151, align 2, !tbaa !396
  %3153 = getelementptr inbounds i16, i16* %3135, i64 4
  %3154 = bitcast i16* %3153 to <16 x i16>*
  %3155 = load <16 x i16>, <16 x i16>* %3154, align 2, !tbaa !396
  %3156 = getelementptr inbounds i16, i16* %3135, i64 20
  %3157 = bitcast i16* %3156 to <16 x i16>*
  %3158 = load <16 x i16>, <16 x i16>* %3157, align 2, !tbaa !396
  %3159 = getelementptr inbounds i16, i16* %3135, i64 3
  %3160 = bitcast i16* %3159 to <16 x i16>*
  %3161 = load <16 x i16>, <16 x i16>* %3160, align 2, !tbaa !396
  %3162 = getelementptr inbounds i16, i16* %3135, i64 19
  %3163 = bitcast i16* %3162 to <16 x i16>*
  %3164 = load <16 x i16>, <16 x i16>* %3163, align 2, !tbaa !396
  %3165 = add <16 x i16> %3143, %3138
  %3166 = add <16 x i16> %3165, %3149
  %3167 = add <16 x i16> %3166, %3155
  %3168 = add <16 x i16> %3167, %3161
  %3169 = add <16 x i16> %3146, %3141
  %3170 = add <16 x i16> %3169, %3152
  %3171 = add <16 x i16> %3170, %3158
  %3172 = add <16 x i16> %3171, %3164
  %3173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3168, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3174 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3172, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3175 = shufflevector <16 x i16> %3173, <16 x i16> %3174, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3176 = lshr <32 x i16> %3175, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3177 = shufflevector <32 x i16> %3176, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3178 = shl nsw i64 %3108, 5
  %3179 = add nsw i64 %3178, %2961
  %3180 = getelementptr inbounds i16, i16* %blur_x, i64 %3179
  %3181 = bitcast i16* %3180 to <16 x i16>*
  store <16 x i16> %3177, <16 x i16>* %3181, align 2, !tbaa !399
  %3182 = shufflevector <32 x i16> %3176, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3183 = getelementptr inbounds i16, i16* %3180, i64 16
  %3184 = bitcast i16* %3183 to <16 x i16>*
  store <16 x i16> %3182, <16 x i16>* %3184, align 2, !tbaa !399
  br label %"consume blur_x147"

"consume blur_x147":                              ; preds = %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge", %"produce blur_x146"
  %.pre-phi3471 = phi i64 [ %.pre3470, %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge" ], [ %3178, %"produce blur_x146" ]
  %3185 = add nsw i64 %2964, %.pre-phi3471
  %3186 = getelementptr inbounds i16, i16* %blur_x, i64 %3185
  %3187 = bitcast i16* %3186 to <16 x i16>*
  %3188 = load <16 x i16>, <16 x i16>* %3187, align 2, !tbaa !399
  %3189 = getelementptr inbounds i16, i16* %3186, i64 16
  %3190 = bitcast i16* %3189 to <16 x i16>*
  %3191 = load <16 x i16>, <16 x i16>* %3190, align 2, !tbaa !399
  %3192 = add nsw i64 %2967, %.pre-phi3471
  %3193 = getelementptr inbounds i16, i16* %blur_x, i64 %3192
  %3194 = bitcast i16* %3193 to <16 x i16>*
  %3195 = load <16 x i16>, <16 x i16>* %3194, align 2, !tbaa !399
  %3196 = getelementptr inbounds i16, i16* %3193, i64 16
  %3197 = bitcast i16* %3196 to <16 x i16>*
  %3198 = load <16 x i16>, <16 x i16>* %3197, align 2, !tbaa !399
  %3199 = add nsw i64 %2970, %.pre-phi3471
  %3200 = getelementptr inbounds i16, i16* %blur_x, i64 %3199
  %3201 = bitcast i16* %3200 to <16 x i16>*
  %3202 = load <16 x i16>, <16 x i16>* %3201, align 2, !tbaa !399
  %3203 = getelementptr inbounds i16, i16* %3200, i64 16
  %3204 = bitcast i16* %3203 to <16 x i16>*
  %3205 = load <16 x i16>, <16 x i16>* %3204, align 2, !tbaa !399
  %3206 = add nsw i64 %2973, %.pre-phi3471
  %3207 = getelementptr inbounds i16, i16* %blur_x, i64 %3206
  %3208 = bitcast i16* %3207 to <16 x i16>*
  %3209 = load <16 x i16>, <16 x i16>* %3208, align 2, !tbaa !399
  %3210 = getelementptr inbounds i16, i16* %3207, i64 16
  %3211 = bitcast i16* %3210 to <16 x i16>*
  %3212 = load <16 x i16>, <16 x i16>* %3211, align 2, !tbaa !399
  %3213 = add nsw i64 %2976, %.pre-phi3471
  %3214 = getelementptr inbounds i16, i16* %blur_x, i64 %3213
  %3215 = bitcast i16* %3214 to <16 x i16>*
  %3216 = load <16 x i16>, <16 x i16>* %3215, align 2, !tbaa !399
  %3217 = getelementptr inbounds i16, i16* %3214, i64 16
  %3218 = bitcast i16* %3217 to <16 x i16>*
  %3219 = load <16 x i16>, <16 x i16>* %3218, align 2, !tbaa !399
  %3220 = add <16 x i16> %3195, %3188
  %3221 = add <16 x i16> %3220, %3202
  %3222 = add <16 x i16> %3221, %3209
  %3223 = add <16 x i16> %3222, %3216
  %3224 = add <16 x i16> %3198, %3191
  %3225 = add <16 x i16> %3224, %3205
  %3226 = add <16 x i16> %3225, %3212
  %3227 = add <16 x i16> %3226, %3219
  %3228 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3223, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3229 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3227, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3230 = shufflevector <16 x i16> %3228, <16 x i16> %3229, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3231 = lshr <32 x i16> %3230, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3232 = shufflevector <32 x i16> %3231, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3233 = add nsw i64 %2980, %.pre-phi3471
  %3234 = getelementptr inbounds i16, i16* %66, i64 %3233
  %3235 = bitcast i16* %3234 to <16 x i16>*
  store <16 x i16> %3232, <16 x i16>* %3235, align 2, !tbaa !401
  %3236 = shufflevector <32 x i16> %3231, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3237 = getelementptr inbounds i16, i16* %3234, i64 16
  %3238 = bitcast i16* %3237 to <16 x i16>*
  store <16 x i16> %3236, <16 x i16>* %3238, align 2, !tbaa !401
  %indvars.iv.next3266 = add nuw nsw i64 %indvars.iv3265, 1
  %.not2753 = icmp eq i64 %indvars.iv.next3266, %184
  br i1 %.not2753, label %"end for blur_y.s0.x.x.rebased141", label %"for blur_y.s0.x.x.rebased140"

"for blur_y.s0.x.x.rebased148":                   ; preds = %"for blur_y.s0.x.x.rebased148.preheader", %"consume blur_x156"
  %blur_y.s0.x.x.rebased150 = phi i32 [ %3351, %"consume blur_x156" ], [ 0, %"for blur_y.s0.x.x.rebased148.preheader" ]
  %3239 = add nsw i32 %blur_y.s0.x.x.rebased150, %t1626
  %a119 = shl nsw i32 %3239, 5
  %3240 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %3240, i32 %a119, i32 %a14
  %3241 = icmp slt i32 %3239, 1
  %3242 = icmp sgt i32 %4, %a119
  %3243 = or i1 %3241, %3242
  br i1 %3243, label %"produce blur_x154", label %"consume blur_x156"

"end for blur_y.s0.x.x.rebased149":               ; preds = %"consume blur_x156", %"end for blur_y.s0.x.x.rebased141"
  br i1 %34, label %"produce blur_x160", label %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge"

"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased149"
  %.pre3472 = add nsw i32 %a26, 7
  %.pre3474 = and i32 %.pre3472, 7
  br label %after_bb157

"produce blur_x154":                              ; preds = %"for blur_y.s0.x.x.rebased148"
  %3244 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s155 = select i1 %3244, i32 %b125, i32 %4
  %t749 = add nsw i32 %blur_x.s0.x.v1.base.s155, %t1737
  %3245 = sext i32 %t749 to i64
  %3246 = getelementptr inbounds i16, i16* %read_input, i64 %3245
  %3247 = getelementptr inbounds i16, i16* %3246, i64 1
  %3248 = bitcast i16* %3247 to <16 x i16>*
  %3249 = load <16 x i16>, <16 x i16>* %3248, align 2, !tbaa !396
  %3250 = getelementptr inbounds i16, i16* %3246, i64 17
  %3251 = bitcast i16* %3250 to <16 x i16>*
  %3252 = load <16 x i16>, <16 x i16>* %3251, align 2, !tbaa !396
  %3253 = bitcast i16* %3246 to <16 x i16>*
  %3254 = load <16 x i16>, <16 x i16>* %3253, align 2, !tbaa !396
  %3255 = getelementptr inbounds i16, i16* %3246, i64 16
  %3256 = bitcast i16* %3255 to <16 x i16>*
  %3257 = load <16 x i16>, <16 x i16>* %3256, align 2, !tbaa !396
  %3258 = getelementptr inbounds i16, i16* %3246, i64 2
  %3259 = bitcast i16* %3258 to <16 x i16>*
  %3260 = load <16 x i16>, <16 x i16>* %3259, align 2, !tbaa !396
  %3261 = getelementptr inbounds i16, i16* %3246, i64 18
  %3262 = bitcast i16* %3261 to <16 x i16>*
  %3263 = load <16 x i16>, <16 x i16>* %3262, align 2, !tbaa !396
  %3264 = getelementptr inbounds i16, i16* %3246, i64 4
  %3265 = bitcast i16* %3264 to <16 x i16>*
  %3266 = load <16 x i16>, <16 x i16>* %3265, align 2, !tbaa !396
  %3267 = getelementptr inbounds i16, i16* %3246, i64 20
  %3268 = bitcast i16* %3267 to <16 x i16>*
  %3269 = load <16 x i16>, <16 x i16>* %3268, align 2, !tbaa !396
  %3270 = getelementptr inbounds i16, i16* %3246, i64 3
  %3271 = bitcast i16* %3270 to <16 x i16>*
  %3272 = load <16 x i16>, <16 x i16>* %3271, align 2, !tbaa !396
  %3273 = getelementptr inbounds i16, i16* %3246, i64 19
  %3274 = bitcast i16* %3273 to <16 x i16>*
  %3275 = load <16 x i16>, <16 x i16>* %3274, align 2, !tbaa !396
  %3276 = add <16 x i16> %3254, %3249
  %3277 = add <16 x i16> %3276, %3260
  %3278 = add <16 x i16> %3277, %3266
  %3279 = add <16 x i16> %3278, %3272
  %3280 = add <16 x i16> %3257, %3252
  %3281 = add <16 x i16> %3280, %3263
  %3282 = add <16 x i16> %3281, %3269
  %3283 = add <16 x i16> %3282, %3275
  %3284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3279, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3285 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3283, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3286 = shufflevector <16 x i16> %3284, <16 x i16> %3285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3287 = lshr <32 x i16> %3286, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3288 = shufflevector <32 x i16> %3287, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3289 = sext i32 %blur_x.s0.x.v1.base.s155 to i64
  %3290 = add nsw i64 %3289, %3114
  %3291 = getelementptr inbounds i16, i16* %blur_x, i64 %3290
  %3292 = bitcast i16* %3291 to <16 x i16>*
  store <16 x i16> %3288, <16 x i16>* %3292, align 2, !tbaa !399
  %3293 = shufflevector <32 x i16> %3287, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3294 = getelementptr inbounds i16, i16* %3291, i64 16
  %3295 = bitcast i16* %3294 to <16 x i16>*
  store <16 x i16> %3293, <16 x i16>* %3295, align 2, !tbaa !399
  br label %"consume blur_x156"

"consume blur_x156":                              ; preds = %"for blur_y.s0.x.x.rebased148", %"produce blur_x154"
  %3296 = sext i32 %b125 to i64
  %3297 = add nsw i64 %3117, %3296
  %3298 = getelementptr inbounds i16, i16* %blur_x, i64 %3297
  %3299 = bitcast i16* %3298 to <16 x i16>*
  %3300 = load <16 x i16>, <16 x i16>* %3299, align 2, !tbaa !399
  %3301 = getelementptr inbounds i16, i16* %3298, i64 16
  %3302 = bitcast i16* %3301 to <16 x i16>*
  %3303 = load <16 x i16>, <16 x i16>* %3302, align 2, !tbaa !399
  %3304 = add nsw i64 %3120, %3296
  %3305 = getelementptr inbounds i16, i16* %blur_x, i64 %3304
  %3306 = bitcast i16* %3305 to <16 x i16>*
  %3307 = load <16 x i16>, <16 x i16>* %3306, align 2, !tbaa !399
  %3308 = getelementptr inbounds i16, i16* %3305, i64 16
  %3309 = bitcast i16* %3308 to <16 x i16>*
  %3310 = load <16 x i16>, <16 x i16>* %3309, align 2, !tbaa !399
  %3311 = add nsw i64 %3123, %3296
  %3312 = getelementptr inbounds i16, i16* %blur_x, i64 %3311
  %3313 = bitcast i16* %3312 to <16 x i16>*
  %3314 = load <16 x i16>, <16 x i16>* %3313, align 2, !tbaa !399
  %3315 = getelementptr inbounds i16, i16* %3312, i64 16
  %3316 = bitcast i16* %3315 to <16 x i16>*
  %3317 = load <16 x i16>, <16 x i16>* %3316, align 2, !tbaa !399
  %3318 = add nsw i64 %3126, %3296
  %3319 = getelementptr inbounds i16, i16* %blur_x, i64 %3318
  %3320 = bitcast i16* %3319 to <16 x i16>*
  %3321 = load <16 x i16>, <16 x i16>* %3320, align 2, !tbaa !399
  %3322 = getelementptr inbounds i16, i16* %3319, i64 16
  %3323 = bitcast i16* %3322 to <16 x i16>*
  %3324 = load <16 x i16>, <16 x i16>* %3323, align 2, !tbaa !399
  %3325 = add nsw i64 %3129, %3296
  %3326 = getelementptr inbounds i16, i16* %blur_x, i64 %3325
  %3327 = bitcast i16* %3326 to <16 x i16>*
  %3328 = load <16 x i16>, <16 x i16>* %3327, align 2, !tbaa !399
  %3329 = getelementptr inbounds i16, i16* %3326, i64 16
  %3330 = bitcast i16* %3329 to <16 x i16>*
  %3331 = load <16 x i16>, <16 x i16>* %3330, align 2, !tbaa !399
  %3332 = add <16 x i16> %3307, %3300
  %3333 = add <16 x i16> %3332, %3314
  %3334 = add <16 x i16> %3333, %3321
  %3335 = add <16 x i16> %3334, %3328
  %3336 = add <16 x i16> %3310, %3303
  %3337 = add <16 x i16> %3336, %3317
  %3338 = add <16 x i16> %3337, %3324
  %3339 = add <16 x i16> %3338, %3331
  %3340 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3335, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3339, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3342 = shufflevector <16 x i16> %3340, <16 x i16> %3341, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3343 = lshr <32 x i16> %3342, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3344 = shufflevector <32 x i16> %3343, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3345 = add nsw i64 %3133, %3296
  %3346 = getelementptr inbounds i16, i16* %66, i64 %3345
  %3347 = bitcast i16* %3346 to <16 x i16>*
  store <16 x i16> %3344, <16 x i16>* %3347, align 2, !tbaa !401
  %3348 = shufflevector <32 x i16> %3343, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3349 = getelementptr inbounds i16, i16* %3346, i64 16
  %3350 = bitcast i16* %3349 to <16 x i16>*
  store <16 x i16> %3348, <16 x i16>* %3350, align 2, !tbaa !401
  %3351 = add nuw nsw i32 %blur_y.s0.x.x.rebased150, 1
  %.not2752 = icmp eq i32 %3351, %t1683
  br i1 %.not2752, label %"end for blur_y.s0.x.x.rebased149", label %"for blur_y.s0.x.x.rebased148"

after_bb157:                                      ; preds = %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge", %"produce blur_x160"
  %.pre-phi3475 = phi i32 [ %.pre3474, %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge" ], [ %3418, %"produce blur_x160" ]
  %3352 = mul nsw i32 %.pre-phi3475, %a73
  %t1754 = sub nsw i32 %3352, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased162.preheader", label %"end for blur_y.s0.x.x.rebased163", !prof !386

"for blur_y.s0.x.x.rebased162.preheader":         ; preds = %after_bb157
  %3353 = sext i32 %t1754 to i64
  %3354 = zext i32 %.pre-phi3457 to i64
  %3355 = mul nsw i64 %3354, %112
  %3356 = sub nsw i64 %3355, %96
  %3357 = zext i32 %.pre-phi3453 to i64
  %3358 = mul nsw i64 %3357, %112
  %3359 = sub nsw i64 %3358, %96
  %3360 = zext i32 %.pre-phi3463 to i64
  %3361 = mul nsw i64 %3360, %112
  %3362 = sub nsw i64 %3361, %96
  %3363 = zext i32 %.pre-phi3475 to i64
  %3364 = mul nsw i64 %3363, %112
  %3365 = sub nsw i64 %3364, %96
  %3366 = zext i32 %.pre-phi3469 to i64
  %3367 = mul nsw i64 %3366, %112
  %3368 = sub nsw i64 %3367, %96
  %3369 = sext i32 %a26 to i64
  %3370 = add nsw i64 %3369, 3
  %3371 = mul nsw i64 %3370, %113
  %3372 = add nsw i64 %3371, %116
  br label %"for blur_y.s0.x.x.rebased162"

"produce blur_x160":                              ; preds = %"end for blur_y.s0.x.x.rebased149"
  %3373 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %3374 = getelementptr inbounds i16, i16* %3373, i64 -31
  %3375 = bitcast i16* %3374 to <16 x i16>*
  %3376 = load <16 x i16>, <16 x i16>* %3375, align 2, !tbaa !396
  %3377 = getelementptr inbounds i16, i16* %3373, i64 -15
  %3378 = bitcast i16* %3377 to <16 x i16>*
  %3379 = load <16 x i16>, <16 x i16>* %3378, align 2, !tbaa !396
  %3380 = getelementptr inbounds i16, i16* %3373, i64 -32
  %3381 = bitcast i16* %3380 to <16 x i16>*
  %3382 = load <16 x i16>, <16 x i16>* %3381, align 2, !tbaa !396
  %3383 = getelementptr inbounds i16, i16* %3373, i64 -16
  %3384 = bitcast i16* %3383 to <16 x i16>*
  %3385 = load <16 x i16>, <16 x i16>* %3384, align 2, !tbaa !396
  %3386 = getelementptr inbounds i16, i16* %3373, i64 -30
  %3387 = bitcast i16* %3386 to <16 x i16>*
  %3388 = load <16 x i16>, <16 x i16>* %3387, align 2, !tbaa !396
  %3389 = getelementptr inbounds i16, i16* %3373, i64 -14
  %3390 = bitcast i16* %3389 to <16 x i16>*
  %3391 = load <16 x i16>, <16 x i16>* %3390, align 2, !tbaa !396
  %3392 = getelementptr inbounds i16, i16* %3373, i64 -28
  %3393 = bitcast i16* %3392 to <16 x i16>*
  %3394 = load <16 x i16>, <16 x i16>* %3393, align 2, !tbaa !396
  %3395 = getelementptr inbounds i16, i16* %3373, i64 -12
  %3396 = bitcast i16* %3395 to <16 x i16>*
  %3397 = load <16 x i16>, <16 x i16>* %3396, align 2, !tbaa !396
  %3398 = getelementptr inbounds i16, i16* %3373, i64 -29
  %3399 = bitcast i16* %3398 to <16 x i16>*
  %3400 = load <16 x i16>, <16 x i16>* %3399, align 2, !tbaa !396
  %3401 = getelementptr inbounds i16, i16* %3373, i64 -13
  %3402 = bitcast i16* %3401 to <16 x i16>*
  %3403 = load <16 x i16>, <16 x i16>* %3402, align 2, !tbaa !396
  %3404 = add <16 x i16> %3382, %3376
  %3405 = add <16 x i16> %3404, %3388
  %3406 = add <16 x i16> %3405, %3394
  %3407 = add <16 x i16> %3406, %3400
  %3408 = add <16 x i16> %3385, %3379
  %3409 = add <16 x i16> %3408, %3391
  %3410 = add <16 x i16> %3409, %3397
  %3411 = add <16 x i16> %3410, %3403
  %3412 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3407, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3413 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3411, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3414 = shufflevector <16 x i16> %3412, <16 x i16> %3413, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3415 = lshr <32 x i16> %3414, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3416 = shufflevector <32 x i16> %3415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3417 = add nsw i32 %a26, 7
  %3418 = and i32 %3417, 7
  %3419 = zext i32 %3418 to i64
  %3420 = mul nsw i64 %97, %3419
  %3421 = add nsw i64 %99, %3420
  %3422 = getelementptr inbounds i16, i16* %blur_x, i64 %3421
  %3423 = getelementptr inbounds i16, i16* %3422, i64 -32
  %3424 = bitcast i16* %3423 to <16 x i16>*
  store <16 x i16> %3416, <16 x i16>* %3424, align 2, !tbaa !399
  %3425 = shufflevector <32 x i16> %3415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3426 = getelementptr inbounds i16, i16* %3422, i64 -16
  %3427 = bitcast i16* %3426 to <16 x i16>*
  store <16 x i16> %3425, <16 x i16>* %3427, align 2, !tbaa !399
  %3428 = zext i32 %.pre-phi3457 to i64
  %3429 = mul nsw i64 %3428, %112
  %3430 = add nsw i64 %3429, %94
  %3431 = getelementptr inbounds i16, i16* %blur_x, i64 %3430
  %3432 = getelementptr inbounds i16, i16* %3431, i64 -32
  %3433 = bitcast i16* %3432 to <16 x i16>*
  %3434 = load <16 x i16>, <16 x i16>* %3433, align 2, !tbaa !399
  %3435 = getelementptr inbounds i16, i16* %3431, i64 -16
  %3436 = bitcast i16* %3435 to <16 x i16>*
  %3437 = load <16 x i16>, <16 x i16>* %3436, align 2, !tbaa !399
  %3438 = zext i32 %.pre-phi3453 to i64
  %3439 = mul nsw i64 %3438, %112
  %3440 = add nsw i64 %3439, %94
  %3441 = getelementptr inbounds i16, i16* %blur_x, i64 %3440
  %3442 = getelementptr inbounds i16, i16* %3441, i64 -32
  %3443 = bitcast i16* %3442 to <16 x i16>*
  %3444 = load <16 x i16>, <16 x i16>* %3443, align 2, !tbaa !399
  %3445 = getelementptr inbounds i16, i16* %3441, i64 -16
  %3446 = bitcast i16* %3445 to <16 x i16>*
  %3447 = load <16 x i16>, <16 x i16>* %3446, align 2, !tbaa !399
  %3448 = zext i32 %.pre-phi3463 to i64
  %3449 = mul nsw i64 %3448, %112
  %3450 = add nsw i64 %3449, %94
  %3451 = getelementptr inbounds i16, i16* %blur_x, i64 %3450
  %3452 = getelementptr inbounds i16, i16* %3451, i64 -32
  %3453 = bitcast i16* %3452 to <16 x i16>*
  %3454 = load <16 x i16>, <16 x i16>* %3453, align 2, !tbaa !399
  %3455 = getelementptr inbounds i16, i16* %3451, i64 -16
  %3456 = bitcast i16* %3455 to <16 x i16>*
  %3457 = load <16 x i16>, <16 x i16>* %3456, align 2, !tbaa !399
  %3458 = mul nsw i64 %3419, %112
  %3459 = add nsw i64 %3458, %94
  %3460 = getelementptr inbounds i16, i16* %blur_x, i64 %3459
  %3461 = getelementptr inbounds i16, i16* %3460, i64 -32
  %3462 = bitcast i16* %3461 to <16 x i16>*
  %3463 = load <16 x i16>, <16 x i16>* %3462, align 2, !tbaa !399
  %3464 = getelementptr inbounds i16, i16* %3460, i64 -16
  %3465 = bitcast i16* %3464 to <16 x i16>*
  %3466 = load <16 x i16>, <16 x i16>* %3465, align 2, !tbaa !399
  %3467 = zext i32 %.pre-phi3469 to i64
  %3468 = mul nsw i64 %3467, %112
  %3469 = add nsw i64 %3468, %94
  %3470 = getelementptr inbounds i16, i16* %blur_x, i64 %3469
  %3471 = getelementptr inbounds i16, i16* %3470, i64 -32
  %3472 = bitcast i16* %3471 to <16 x i16>*
  %3473 = load <16 x i16>, <16 x i16>* %3472, align 2, !tbaa !399
  %3474 = getelementptr inbounds i16, i16* %3470, i64 -16
  %3475 = bitcast i16* %3474 to <16 x i16>*
  %3476 = load <16 x i16>, <16 x i16>* %3475, align 2, !tbaa !399
  %3477 = add <16 x i16> %3444, %3434
  %3478 = add <16 x i16> %3477, %3454
  %3479 = add <16 x i16> %3478, %3463
  %3480 = add <16 x i16> %3479, %3473
  %3481 = add <16 x i16> %3447, %3437
  %3482 = add <16 x i16> %3481, %3457
  %3483 = add <16 x i16> %3482, %3466
  %3484 = add <16 x i16> %3483, %3476
  %3485 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3480, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3484, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3487 = shufflevector <16 x i16> %3485, <16 x i16> %3486, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3488 = lshr <32 x i16> %3487, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3489 = shufflevector <32 x i16> %3488, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3490 = sext i32 %a26 to i64
  %3491 = add nsw i64 %3490, 3
  %3492 = mul nsw i64 %3491, %113
  %3493 = add nsw i64 %115, %3492
  %3494 = getelementptr inbounds i16, i16* %66, i64 %3493
  %3495 = getelementptr inbounds i16, i16* %3494, i64 -32
  %3496 = bitcast i16* %3495 to <16 x i16>*
  store <16 x i16> %3489, <16 x i16>* %3496, align 2, !tbaa !401
  %3497 = shufflevector <32 x i16> %3488, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3498 = getelementptr inbounds i16, i16* %3494, i64 -16
  %3499 = bitcast i16* %3498 to <16 x i16>*
  store <16 x i16> %3497, <16 x i16>* %3499, align 2, !tbaa !401
  br label %after_bb157

"for blur_y.s0.x.x.rebased162":                   ; preds = %"for blur_y.s0.x.x.rebased162.preheader", %"consume blur_x169"
  %indvars.iv3268 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased162.preheader" ], [ %indvars.iv.next3269, %"consume blur_x169" ]
  %3500 = add nsw i64 %indvars.iv3268, %101
  %3501 = icmp slt i64 %3500, 1
  %3502 = trunc i64 %3500 to i32
  %3503 = shl nsw i32 %3502, 5
  %3504 = icmp sgt i32 %4, %3503
  %3505 = or i1 %3501, %3504
  br i1 %3505, label %"produce blur_x168", label %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge"

"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased162"
  %.pre3476 = shl nsw i64 %3500, 5
  br label %"consume blur_x169"

"end for blur_y.s0.x.x.rebased163":               ; preds = %"consume blur_x169", %after_bb157
  br i1 %102, label %"for blur_y.s0.x.x.rebased170.preheader", label %"end for blur_y.s0.x.x.rebased171", !prof !386

"for blur_y.s0.x.x.rebased170.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased163"
  %3506 = sext i32 %t1754 to i64
  %3507 = zext i32 %.pre-phi3457 to i64
  %3508 = mul nsw i64 %3507, %112
  %3509 = sub nsw i64 %3508, %96
  %3510 = zext i32 %.pre-phi3453 to i64
  %3511 = mul nsw i64 %3510, %112
  %3512 = sub nsw i64 %3511, %96
  %3513 = zext i32 %.pre-phi3463 to i64
  %3514 = mul nsw i64 %3513, %112
  %3515 = sub nsw i64 %3514, %96
  %3516 = zext i32 %.pre-phi3475 to i64
  %3517 = mul nsw i64 %3516, %112
  %3518 = sub nsw i64 %3517, %96
  %3519 = zext i32 %.pre-phi3469 to i64
  %3520 = mul nsw i64 %3519, %112
  %3521 = sub nsw i64 %3520, %96
  %3522 = sext i32 %a26 to i64
  %3523 = add nsw i64 %3522, 3
  %3524 = mul nsw i64 %3523, %113
  %3525 = add nsw i64 %3524, %116
  br label %"for blur_y.s0.x.x.rebased170"

"produce blur_x168":                              ; preds = %"for blur_y.s0.x.x.rebased162"
  %t760 = add nsw i32 %3503, %t1753
  %3526 = sext i32 %t760 to i64
  %3527 = getelementptr inbounds i16, i16* %read_input, i64 %3526
  %3528 = getelementptr inbounds i16, i16* %3527, i64 1
  %3529 = bitcast i16* %3528 to <16 x i16>*
  %3530 = load <16 x i16>, <16 x i16>* %3529, align 2, !tbaa !396
  %3531 = getelementptr inbounds i16, i16* %3527, i64 17
  %3532 = bitcast i16* %3531 to <16 x i16>*
  %3533 = load <16 x i16>, <16 x i16>* %3532, align 2, !tbaa !396
  %3534 = bitcast i16* %3527 to <16 x i16>*
  %3535 = load <16 x i16>, <16 x i16>* %3534, align 2, !tbaa !396
  %3536 = getelementptr inbounds i16, i16* %3527, i64 16
  %3537 = bitcast i16* %3536 to <16 x i16>*
  %3538 = load <16 x i16>, <16 x i16>* %3537, align 2, !tbaa !396
  %3539 = getelementptr inbounds i16, i16* %3527, i64 2
  %3540 = bitcast i16* %3539 to <16 x i16>*
  %3541 = load <16 x i16>, <16 x i16>* %3540, align 2, !tbaa !396
  %3542 = getelementptr inbounds i16, i16* %3527, i64 18
  %3543 = bitcast i16* %3542 to <16 x i16>*
  %3544 = load <16 x i16>, <16 x i16>* %3543, align 2, !tbaa !396
  %3545 = getelementptr inbounds i16, i16* %3527, i64 4
  %3546 = bitcast i16* %3545 to <16 x i16>*
  %3547 = load <16 x i16>, <16 x i16>* %3546, align 2, !tbaa !396
  %3548 = getelementptr inbounds i16, i16* %3527, i64 20
  %3549 = bitcast i16* %3548 to <16 x i16>*
  %3550 = load <16 x i16>, <16 x i16>* %3549, align 2, !tbaa !396
  %3551 = getelementptr inbounds i16, i16* %3527, i64 3
  %3552 = bitcast i16* %3551 to <16 x i16>*
  %3553 = load <16 x i16>, <16 x i16>* %3552, align 2, !tbaa !396
  %3554 = getelementptr inbounds i16, i16* %3527, i64 19
  %3555 = bitcast i16* %3554 to <16 x i16>*
  %3556 = load <16 x i16>, <16 x i16>* %3555, align 2, !tbaa !396
  %3557 = add <16 x i16> %3535, %3530
  %3558 = add <16 x i16> %3557, %3541
  %3559 = add <16 x i16> %3558, %3547
  %3560 = add <16 x i16> %3559, %3553
  %3561 = add <16 x i16> %3538, %3533
  %3562 = add <16 x i16> %3561, %3544
  %3563 = add <16 x i16> %3562, %3550
  %3564 = add <16 x i16> %3563, %3556
  %3565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3560, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3564, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3567 = shufflevector <16 x i16> %3565, <16 x i16> %3566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3568 = lshr <32 x i16> %3567, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3569 = shufflevector <32 x i16> %3568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3570 = shl nsw i64 %3500, 5
  %3571 = add nsw i64 %3570, %3353
  %3572 = getelementptr inbounds i16, i16* %blur_x, i64 %3571
  %3573 = bitcast i16* %3572 to <16 x i16>*
  store <16 x i16> %3569, <16 x i16>* %3573, align 2, !tbaa !399
  %3574 = shufflevector <32 x i16> %3568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3575 = getelementptr inbounds i16, i16* %3572, i64 16
  %3576 = bitcast i16* %3575 to <16 x i16>*
  store <16 x i16> %3574, <16 x i16>* %3576, align 2, !tbaa !399
  br label %"consume blur_x169"

"consume blur_x169":                              ; preds = %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge", %"produce blur_x168"
  %.pre-phi3477 = phi i64 [ %.pre3476, %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge" ], [ %3570, %"produce blur_x168" ]
  %3577 = add nsw i64 %3356, %.pre-phi3477
  %3578 = getelementptr inbounds i16, i16* %blur_x, i64 %3577
  %3579 = bitcast i16* %3578 to <16 x i16>*
  %3580 = load <16 x i16>, <16 x i16>* %3579, align 2, !tbaa !399
  %3581 = getelementptr inbounds i16, i16* %3578, i64 16
  %3582 = bitcast i16* %3581 to <16 x i16>*
  %3583 = load <16 x i16>, <16 x i16>* %3582, align 2, !tbaa !399
  %3584 = add nsw i64 %3359, %.pre-phi3477
  %3585 = getelementptr inbounds i16, i16* %blur_x, i64 %3584
  %3586 = bitcast i16* %3585 to <16 x i16>*
  %3587 = load <16 x i16>, <16 x i16>* %3586, align 2, !tbaa !399
  %3588 = getelementptr inbounds i16, i16* %3585, i64 16
  %3589 = bitcast i16* %3588 to <16 x i16>*
  %3590 = load <16 x i16>, <16 x i16>* %3589, align 2, !tbaa !399
  %3591 = add nsw i64 %3362, %.pre-phi3477
  %3592 = getelementptr inbounds i16, i16* %blur_x, i64 %3591
  %3593 = bitcast i16* %3592 to <16 x i16>*
  %3594 = load <16 x i16>, <16 x i16>* %3593, align 2, !tbaa !399
  %3595 = getelementptr inbounds i16, i16* %3592, i64 16
  %3596 = bitcast i16* %3595 to <16 x i16>*
  %3597 = load <16 x i16>, <16 x i16>* %3596, align 2, !tbaa !399
  %3598 = add nsw i64 %3365, %.pre-phi3477
  %3599 = getelementptr inbounds i16, i16* %blur_x, i64 %3598
  %3600 = bitcast i16* %3599 to <16 x i16>*
  %3601 = load <16 x i16>, <16 x i16>* %3600, align 2, !tbaa !399
  %3602 = getelementptr inbounds i16, i16* %3599, i64 16
  %3603 = bitcast i16* %3602 to <16 x i16>*
  %3604 = load <16 x i16>, <16 x i16>* %3603, align 2, !tbaa !399
  %3605 = add nsw i64 %3368, %.pre-phi3477
  %3606 = getelementptr inbounds i16, i16* %blur_x, i64 %3605
  %3607 = bitcast i16* %3606 to <16 x i16>*
  %3608 = load <16 x i16>, <16 x i16>* %3607, align 2, !tbaa !399
  %3609 = getelementptr inbounds i16, i16* %3606, i64 16
  %3610 = bitcast i16* %3609 to <16 x i16>*
  %3611 = load <16 x i16>, <16 x i16>* %3610, align 2, !tbaa !399
  %3612 = add <16 x i16> %3587, %3580
  %3613 = add <16 x i16> %3612, %3594
  %3614 = add <16 x i16> %3613, %3601
  %3615 = add <16 x i16> %3614, %3608
  %3616 = add <16 x i16> %3590, %3583
  %3617 = add <16 x i16> %3616, %3597
  %3618 = add <16 x i16> %3617, %3604
  %3619 = add <16 x i16> %3618, %3611
  %3620 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3615, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3619, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3622 = shufflevector <16 x i16> %3620, <16 x i16> %3621, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3623 = lshr <32 x i16> %3622, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3624 = shufflevector <32 x i16> %3623, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3625 = add nsw i64 %3372, %.pre-phi3477
  %3626 = getelementptr inbounds i16, i16* %66, i64 %3625
  %3627 = bitcast i16* %3626 to <16 x i16>*
  store <16 x i16> %3624, <16 x i16>* %3627, align 2, !tbaa !401
  %3628 = shufflevector <32 x i16> %3623, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3629 = getelementptr inbounds i16, i16* %3626, i64 16
  %3630 = bitcast i16* %3629 to <16 x i16>*
  store <16 x i16> %3628, <16 x i16>* %3630, align 2, !tbaa !401
  %indvars.iv.next3269 = add nuw nsw i64 %indvars.iv3268, 1
  %.not2751 = icmp eq i64 %indvars.iv.next3269, %184
  br i1 %.not2751, label %"end for blur_y.s0.x.x.rebased163", label %"for blur_y.s0.x.x.rebased162"

"for blur_y.s0.x.x.rebased170":                   ; preds = %"for blur_y.s0.x.x.rebased170.preheader", %"consume blur_x178"
  %blur_y.s0.x.x.rebased172 = phi i32 [ %3743, %"consume blur_x178" ], [ 0, %"for blur_y.s0.x.x.rebased170.preheader" ]
  %3631 = add nsw i32 %blur_y.s0.x.x.rebased172, %t1626
  %a126 = shl nsw i32 %3631, 5
  %3632 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3632, i32 %a126, i32 %a14
  %3633 = icmp slt i32 %3631, 1
  %3634 = icmp sgt i32 %4, %a126
  %3635 = or i1 %3633, %3634
  br i1 %3635, label %"produce blur_x176", label %"consume blur_x178"

"end for blur_y.s0.x.x.rebased171":               ; preds = %"consume blur_x178", %"end for blur_y.s0.x.x.rebased163"
  br i1 %34, label %"produce blur_x182", label %after_bb179

"produce blur_x176":                              ; preds = %"for blur_y.s0.x.x.rebased170"
  %3636 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s177 = select i1 %3636, i32 %b132, i32 %4
  %t765 = add nsw i32 %blur_x.s0.x.v1.base.s177, %t1753
  %3637 = sext i32 %t765 to i64
  %3638 = getelementptr inbounds i16, i16* %read_input, i64 %3637
  %3639 = getelementptr inbounds i16, i16* %3638, i64 1
  %3640 = bitcast i16* %3639 to <16 x i16>*
  %3641 = load <16 x i16>, <16 x i16>* %3640, align 2, !tbaa !396
  %3642 = getelementptr inbounds i16, i16* %3638, i64 17
  %3643 = bitcast i16* %3642 to <16 x i16>*
  %3644 = load <16 x i16>, <16 x i16>* %3643, align 2, !tbaa !396
  %3645 = bitcast i16* %3638 to <16 x i16>*
  %3646 = load <16 x i16>, <16 x i16>* %3645, align 2, !tbaa !396
  %3647 = getelementptr inbounds i16, i16* %3638, i64 16
  %3648 = bitcast i16* %3647 to <16 x i16>*
  %3649 = load <16 x i16>, <16 x i16>* %3648, align 2, !tbaa !396
  %3650 = getelementptr inbounds i16, i16* %3638, i64 2
  %3651 = bitcast i16* %3650 to <16 x i16>*
  %3652 = load <16 x i16>, <16 x i16>* %3651, align 2, !tbaa !396
  %3653 = getelementptr inbounds i16, i16* %3638, i64 18
  %3654 = bitcast i16* %3653 to <16 x i16>*
  %3655 = load <16 x i16>, <16 x i16>* %3654, align 2, !tbaa !396
  %3656 = getelementptr inbounds i16, i16* %3638, i64 4
  %3657 = bitcast i16* %3656 to <16 x i16>*
  %3658 = load <16 x i16>, <16 x i16>* %3657, align 2, !tbaa !396
  %3659 = getelementptr inbounds i16, i16* %3638, i64 20
  %3660 = bitcast i16* %3659 to <16 x i16>*
  %3661 = load <16 x i16>, <16 x i16>* %3660, align 2, !tbaa !396
  %3662 = getelementptr inbounds i16, i16* %3638, i64 3
  %3663 = bitcast i16* %3662 to <16 x i16>*
  %3664 = load <16 x i16>, <16 x i16>* %3663, align 2, !tbaa !396
  %3665 = getelementptr inbounds i16, i16* %3638, i64 19
  %3666 = bitcast i16* %3665 to <16 x i16>*
  %3667 = load <16 x i16>, <16 x i16>* %3666, align 2, !tbaa !396
  %3668 = add <16 x i16> %3646, %3641
  %3669 = add <16 x i16> %3668, %3652
  %3670 = add <16 x i16> %3669, %3658
  %3671 = add <16 x i16> %3670, %3664
  %3672 = add <16 x i16> %3649, %3644
  %3673 = add <16 x i16> %3672, %3655
  %3674 = add <16 x i16> %3673, %3661
  %3675 = add <16 x i16> %3674, %3667
  %3676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3671, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3675, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3678 = shufflevector <16 x i16> %3676, <16 x i16> %3677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3679 = lshr <32 x i16> %3678, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3680 = shufflevector <32 x i16> %3679, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3681 = sext i32 %blur_x.s0.x.v1.base.s177 to i64
  %3682 = add nsw i64 %3681, %3506
  %3683 = getelementptr inbounds i16, i16* %blur_x, i64 %3682
  %3684 = bitcast i16* %3683 to <16 x i16>*
  store <16 x i16> %3680, <16 x i16>* %3684, align 2, !tbaa !399
  %3685 = shufflevector <32 x i16> %3679, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3686 = getelementptr inbounds i16, i16* %3683, i64 16
  %3687 = bitcast i16* %3686 to <16 x i16>*
  store <16 x i16> %3685, <16 x i16>* %3687, align 2, !tbaa !399
  br label %"consume blur_x178"

"consume blur_x178":                              ; preds = %"for blur_y.s0.x.x.rebased170", %"produce blur_x176"
  %3688 = sext i32 %b132 to i64
  %3689 = add nsw i64 %3509, %3688
  %3690 = getelementptr inbounds i16, i16* %blur_x, i64 %3689
  %3691 = bitcast i16* %3690 to <16 x i16>*
  %3692 = load <16 x i16>, <16 x i16>* %3691, align 2, !tbaa !399
  %3693 = getelementptr inbounds i16, i16* %3690, i64 16
  %3694 = bitcast i16* %3693 to <16 x i16>*
  %3695 = load <16 x i16>, <16 x i16>* %3694, align 2, !tbaa !399
  %3696 = add nsw i64 %3512, %3688
  %3697 = getelementptr inbounds i16, i16* %blur_x, i64 %3696
  %3698 = bitcast i16* %3697 to <16 x i16>*
  %3699 = load <16 x i16>, <16 x i16>* %3698, align 2, !tbaa !399
  %3700 = getelementptr inbounds i16, i16* %3697, i64 16
  %3701 = bitcast i16* %3700 to <16 x i16>*
  %3702 = load <16 x i16>, <16 x i16>* %3701, align 2, !tbaa !399
  %3703 = add nsw i64 %3515, %3688
  %3704 = getelementptr inbounds i16, i16* %blur_x, i64 %3703
  %3705 = bitcast i16* %3704 to <16 x i16>*
  %3706 = load <16 x i16>, <16 x i16>* %3705, align 2, !tbaa !399
  %3707 = getelementptr inbounds i16, i16* %3704, i64 16
  %3708 = bitcast i16* %3707 to <16 x i16>*
  %3709 = load <16 x i16>, <16 x i16>* %3708, align 2, !tbaa !399
  %3710 = add nsw i64 %3518, %3688
  %3711 = getelementptr inbounds i16, i16* %blur_x, i64 %3710
  %3712 = bitcast i16* %3711 to <16 x i16>*
  %3713 = load <16 x i16>, <16 x i16>* %3712, align 2, !tbaa !399
  %3714 = getelementptr inbounds i16, i16* %3711, i64 16
  %3715 = bitcast i16* %3714 to <16 x i16>*
  %3716 = load <16 x i16>, <16 x i16>* %3715, align 2, !tbaa !399
  %3717 = add nsw i64 %3521, %3688
  %3718 = getelementptr inbounds i16, i16* %blur_x, i64 %3717
  %3719 = bitcast i16* %3718 to <16 x i16>*
  %3720 = load <16 x i16>, <16 x i16>* %3719, align 2, !tbaa !399
  %3721 = getelementptr inbounds i16, i16* %3718, i64 16
  %3722 = bitcast i16* %3721 to <16 x i16>*
  %3723 = load <16 x i16>, <16 x i16>* %3722, align 2, !tbaa !399
  %3724 = add <16 x i16> %3699, %3692
  %3725 = add <16 x i16> %3724, %3706
  %3726 = add <16 x i16> %3725, %3713
  %3727 = add <16 x i16> %3726, %3720
  %3728 = add <16 x i16> %3702, %3695
  %3729 = add <16 x i16> %3728, %3709
  %3730 = add <16 x i16> %3729, %3716
  %3731 = add <16 x i16> %3730, %3723
  %3732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3727, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3731, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3734 = shufflevector <16 x i16> %3732, <16 x i16> %3733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3735 = lshr <32 x i16> %3734, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3736 = shufflevector <32 x i16> %3735, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3737 = add nsw i64 %3525, %3688
  %3738 = getelementptr inbounds i16, i16* %66, i64 %3737
  %3739 = bitcast i16* %3738 to <16 x i16>*
  store <16 x i16> %3736, <16 x i16>* %3739, align 2, !tbaa !401
  %3740 = shufflevector <32 x i16> %3735, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3741 = getelementptr inbounds i16, i16* %3738, i64 16
  %3742 = bitcast i16* %3741 to <16 x i16>*
  store <16 x i16> %3740, <16 x i16>* %3742, align 2, !tbaa !401
  %3743 = add nuw nsw i32 %blur_y.s0.x.x.rebased172, 1
  %.not2750 = icmp eq i32 %3743, %t1683
  br i1 %.not2750, label %"end for blur_y.s0.x.x.rebased171", label %"for blur_y.s0.x.x.rebased170"

after_bb179:                                      ; preds = %"end for blur_y.s0.x.x.rebased171", %"produce blur_x182"
  br i1 %100, label %"for blur_y.s0.x.x.rebased184.preheader", label %"end for blur_y.s0.x.x.rebased185", !prof !386

"for blur_y.s0.x.x.rebased184.preheader":         ; preds = %after_bb179
  %3744 = sext i32 %t1682 to i64
  %3745 = zext i32 %.pre-phi3463 to i64
  %3746 = mul nsw i64 %3745, %112
  %3747 = sub nsw i64 %3746, %96
  %3748 = zext i32 %.pre-phi3457 to i64
  %3749 = mul nsw i64 %3748, %112
  %3750 = sub nsw i64 %3749, %96
  %3751 = zext i32 %.pre-phi3469 to i64
  %3752 = mul nsw i64 %3751, %112
  %3753 = sub nsw i64 %3752, %96
  %3754 = zext i32 %.pre-phi to i64
  %3755 = mul nsw i64 %3754, %112
  %3756 = sub nsw i64 %3755, %96
  %3757 = zext i32 %.pre-phi3475 to i64
  %3758 = mul nsw i64 %3757, %112
  %3759 = sub nsw i64 %3758, %96
  %3760 = sext i32 %a26 to i64
  %3761 = add nsw i64 %3760, 4
  %3762 = mul nsw i64 %3761, %113
  %3763 = add nsw i64 %3762, %116
  br label %"for blur_y.s0.x.x.rebased184"

"produce blur_x182":                              ; preds = %"end for blur_y.s0.x.x.rebased171"
  %3764 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3765 = getelementptr inbounds i16, i16* %3764, i64 -31
  %3766 = bitcast i16* %3765 to <16 x i16>*
  %3767 = load <16 x i16>, <16 x i16>* %3766, align 2, !tbaa !396
  %3768 = getelementptr inbounds i16, i16* %3764, i64 -15
  %3769 = bitcast i16* %3768 to <16 x i16>*
  %3770 = load <16 x i16>, <16 x i16>* %3769, align 2, !tbaa !396
  %3771 = getelementptr inbounds i16, i16* %3764, i64 -32
  %3772 = bitcast i16* %3771 to <16 x i16>*
  %3773 = load <16 x i16>, <16 x i16>* %3772, align 2, !tbaa !396
  %3774 = getelementptr inbounds i16, i16* %3764, i64 -16
  %3775 = bitcast i16* %3774 to <16 x i16>*
  %3776 = load <16 x i16>, <16 x i16>* %3775, align 2, !tbaa !396
  %3777 = getelementptr inbounds i16, i16* %3764, i64 -30
  %3778 = bitcast i16* %3777 to <16 x i16>*
  %3779 = load <16 x i16>, <16 x i16>* %3778, align 2, !tbaa !396
  %3780 = getelementptr inbounds i16, i16* %3764, i64 -14
  %3781 = bitcast i16* %3780 to <16 x i16>*
  %3782 = load <16 x i16>, <16 x i16>* %3781, align 2, !tbaa !396
  %3783 = getelementptr inbounds i16, i16* %3764, i64 -28
  %3784 = bitcast i16* %3783 to <16 x i16>*
  %3785 = load <16 x i16>, <16 x i16>* %3784, align 2, !tbaa !396
  %3786 = getelementptr inbounds i16, i16* %3764, i64 -12
  %3787 = bitcast i16* %3786 to <16 x i16>*
  %3788 = load <16 x i16>, <16 x i16>* %3787, align 2, !tbaa !396
  %3789 = getelementptr inbounds i16, i16* %3764, i64 -29
  %3790 = bitcast i16* %3789 to <16 x i16>*
  %3791 = load <16 x i16>, <16 x i16>* %3790, align 2, !tbaa !396
  %3792 = getelementptr inbounds i16, i16* %3764, i64 -13
  %3793 = bitcast i16* %3792 to <16 x i16>*
  %3794 = load <16 x i16>, <16 x i16>* %3793, align 2, !tbaa !396
  %3795 = add <16 x i16> %3773, %3767
  %3796 = add <16 x i16> %3795, %3779
  %3797 = add <16 x i16> %3796, %3785
  %3798 = add <16 x i16> %3797, %3791
  %3799 = add <16 x i16> %3776, %3770
  %3800 = add <16 x i16> %3799, %3782
  %3801 = add <16 x i16> %3800, %3788
  %3802 = add <16 x i16> %3801, %3794
  %3803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3798, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3802, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3805 = shufflevector <16 x i16> %3803, <16 x i16> %3804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3806 = lshr <32 x i16> %3805, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3807 = shufflevector <32 x i16> %3806, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3808 = zext i32 %.pre-phi to i64
  %3809 = mul nsw i64 %97, %3808
  %3810 = add nsw i64 %99, %3809
  %3811 = getelementptr inbounds i16, i16* %blur_x, i64 %3810
  %3812 = getelementptr inbounds i16, i16* %3811, i64 -32
  %3813 = bitcast i16* %3812 to <16 x i16>*
  store <16 x i16> %3807, <16 x i16>* %3813, align 2, !tbaa !399
  %3814 = shufflevector <32 x i16> %3806, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3815 = getelementptr inbounds i16, i16* %3811, i64 -16
  %3816 = bitcast i16* %3815 to <16 x i16>*
  store <16 x i16> %3814, <16 x i16>* %3816, align 2, !tbaa !399
  %3817 = zext i32 %.pre-phi3463 to i64
  %3818 = mul nsw i64 %3817, %112
  %3819 = add nsw i64 %3818, %94
  %3820 = getelementptr inbounds i16, i16* %blur_x, i64 %3819
  %3821 = getelementptr inbounds i16, i16* %3820, i64 -32
  %3822 = bitcast i16* %3821 to <16 x i16>*
  %3823 = load <16 x i16>, <16 x i16>* %3822, align 2, !tbaa !399
  %3824 = getelementptr inbounds i16, i16* %3820, i64 -16
  %3825 = bitcast i16* %3824 to <16 x i16>*
  %3826 = load <16 x i16>, <16 x i16>* %3825, align 2, !tbaa !399
  %3827 = zext i32 %.pre-phi3457 to i64
  %3828 = mul nsw i64 %3827, %112
  %3829 = add nsw i64 %3828, %94
  %3830 = getelementptr inbounds i16, i16* %blur_x, i64 %3829
  %3831 = getelementptr inbounds i16, i16* %3830, i64 -32
  %3832 = bitcast i16* %3831 to <16 x i16>*
  %3833 = load <16 x i16>, <16 x i16>* %3832, align 2, !tbaa !399
  %3834 = getelementptr inbounds i16, i16* %3830, i64 -16
  %3835 = bitcast i16* %3834 to <16 x i16>*
  %3836 = load <16 x i16>, <16 x i16>* %3835, align 2, !tbaa !399
  %3837 = zext i32 %.pre-phi3469 to i64
  %3838 = mul nsw i64 %3837, %112
  %3839 = add nsw i64 %3838, %94
  %3840 = getelementptr inbounds i16, i16* %blur_x, i64 %3839
  %3841 = getelementptr inbounds i16, i16* %3840, i64 -32
  %3842 = bitcast i16* %3841 to <16 x i16>*
  %3843 = load <16 x i16>, <16 x i16>* %3842, align 2, !tbaa !399
  %3844 = getelementptr inbounds i16, i16* %3840, i64 -16
  %3845 = bitcast i16* %3844 to <16 x i16>*
  %3846 = load <16 x i16>, <16 x i16>* %3845, align 2, !tbaa !399
  %3847 = mul nsw i64 %3808, %112
  %3848 = add nsw i64 %3847, %94
  %3849 = getelementptr inbounds i16, i16* %blur_x, i64 %3848
  %3850 = getelementptr inbounds i16, i16* %3849, i64 -32
  %3851 = bitcast i16* %3850 to <16 x i16>*
  %3852 = load <16 x i16>, <16 x i16>* %3851, align 2, !tbaa !399
  %3853 = getelementptr inbounds i16, i16* %3849, i64 -16
  %3854 = bitcast i16* %3853 to <16 x i16>*
  %3855 = load <16 x i16>, <16 x i16>* %3854, align 2, !tbaa !399
  %3856 = zext i32 %.pre-phi3475 to i64
  %3857 = mul nsw i64 %3856, %112
  %3858 = add nsw i64 %3857, %94
  %3859 = getelementptr inbounds i16, i16* %blur_x, i64 %3858
  %3860 = getelementptr inbounds i16, i16* %3859, i64 -32
  %3861 = bitcast i16* %3860 to <16 x i16>*
  %3862 = load <16 x i16>, <16 x i16>* %3861, align 2, !tbaa !399
  %3863 = getelementptr inbounds i16, i16* %3859, i64 -16
  %3864 = bitcast i16* %3863 to <16 x i16>*
  %3865 = load <16 x i16>, <16 x i16>* %3864, align 2, !tbaa !399
  %3866 = add <16 x i16> %3833, %3823
  %3867 = add <16 x i16> %3866, %3843
  %3868 = add <16 x i16> %3867, %3852
  %3869 = add <16 x i16> %3868, %3862
  %3870 = add <16 x i16> %3836, %3826
  %3871 = add <16 x i16> %3870, %3846
  %3872 = add <16 x i16> %3871, %3855
  %3873 = add <16 x i16> %3872, %3865
  %3874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3869, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3873, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3876 = shufflevector <16 x i16> %3874, <16 x i16> %3875, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3877 = lshr <32 x i16> %3876, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3878 = shufflevector <32 x i16> %3877, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3879 = sext i32 %a26 to i64
  %3880 = add nsw i64 %3879, 4
  %3881 = mul nsw i64 %3880, %113
  %3882 = add nsw i64 %115, %3881
  %3883 = getelementptr inbounds i16, i16* %66, i64 %3882
  %3884 = getelementptr inbounds i16, i16* %3883, i64 -32
  %3885 = bitcast i16* %3884 to <16 x i16>*
  store <16 x i16> %3878, <16 x i16>* %3885, align 2, !tbaa !401
  %3886 = shufflevector <32 x i16> %3877, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3887 = getelementptr inbounds i16, i16* %3883, i64 -16
  %3888 = bitcast i16* %3887 to <16 x i16>*
  store <16 x i16> %3886, <16 x i16>* %3888, align 2, !tbaa !401
  br label %after_bb179

"for blur_y.s0.x.x.rebased184":                   ; preds = %"for blur_y.s0.x.x.rebased184.preheader", %"consume blur_x191"
  %indvars.iv3271 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased184.preheader" ], [ %indvars.iv.next3272, %"consume blur_x191" ]
  %3889 = add nsw i64 %indvars.iv3271, %101
  %3890 = icmp slt i64 %3889, 1
  %3891 = trunc i64 %3889 to i32
  %3892 = shl nsw i32 %3891, 5
  %3893 = icmp sgt i32 %4, %3892
  %3894 = or i1 %3890, %3893
  br i1 %3894, label %"produce blur_x190", label %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge"

"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased184"
  %.pre3478 = shl nsw i64 %3889, 5
  br label %"consume blur_x191"

"end for blur_y.s0.x.x.rebased185":               ; preds = %"consume blur_x191", %after_bb179
  br i1 %102, label %"for blur_y.s0.x.x.rebased192.preheader", label %"end for blur_y.s0.x.x.rebased193", !prof !386

"for blur_y.s0.x.x.rebased192.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased185"
  %3895 = sext i32 %t1682 to i64
  %3896 = zext i32 %.pre-phi3463 to i64
  %3897 = mul nsw i64 %3896, %112
  %3898 = sub nsw i64 %3897, %96
  %3899 = zext i32 %.pre-phi3457 to i64
  %3900 = mul nsw i64 %3899, %112
  %3901 = sub nsw i64 %3900, %96
  %3902 = zext i32 %.pre-phi3469 to i64
  %3903 = mul nsw i64 %3902, %112
  %3904 = sub nsw i64 %3903, %96
  %3905 = zext i32 %.pre-phi to i64
  %3906 = mul nsw i64 %3905, %112
  %3907 = sub nsw i64 %3906, %96
  %3908 = zext i32 %.pre-phi3475 to i64
  %3909 = mul nsw i64 %3908, %112
  %3910 = sub nsw i64 %3909, %96
  %3911 = sext i32 %a26 to i64
  %3912 = add nsw i64 %3911, 4
  %3913 = mul nsw i64 %3912, %113
  %3914 = add nsw i64 %3913, %116
  br label %"for blur_y.s0.x.x.rebased192"

"produce blur_x190":                              ; preds = %"for blur_y.s0.x.x.rebased184"
  %t776 = add nsw i32 %3892, %t1769
  %3915 = sext i32 %t776 to i64
  %3916 = getelementptr inbounds i16, i16* %read_input, i64 %3915
  %3917 = getelementptr inbounds i16, i16* %3916, i64 1
  %3918 = bitcast i16* %3917 to <16 x i16>*
  %3919 = load <16 x i16>, <16 x i16>* %3918, align 2, !tbaa !396
  %3920 = getelementptr inbounds i16, i16* %3916, i64 17
  %3921 = bitcast i16* %3920 to <16 x i16>*
  %3922 = load <16 x i16>, <16 x i16>* %3921, align 2, !tbaa !396
  %3923 = bitcast i16* %3916 to <16 x i16>*
  %3924 = load <16 x i16>, <16 x i16>* %3923, align 2, !tbaa !396
  %3925 = getelementptr inbounds i16, i16* %3916, i64 16
  %3926 = bitcast i16* %3925 to <16 x i16>*
  %3927 = load <16 x i16>, <16 x i16>* %3926, align 2, !tbaa !396
  %3928 = getelementptr inbounds i16, i16* %3916, i64 2
  %3929 = bitcast i16* %3928 to <16 x i16>*
  %3930 = load <16 x i16>, <16 x i16>* %3929, align 2, !tbaa !396
  %3931 = getelementptr inbounds i16, i16* %3916, i64 18
  %3932 = bitcast i16* %3931 to <16 x i16>*
  %3933 = load <16 x i16>, <16 x i16>* %3932, align 2, !tbaa !396
  %3934 = getelementptr inbounds i16, i16* %3916, i64 4
  %3935 = bitcast i16* %3934 to <16 x i16>*
  %3936 = load <16 x i16>, <16 x i16>* %3935, align 2, !tbaa !396
  %3937 = getelementptr inbounds i16, i16* %3916, i64 20
  %3938 = bitcast i16* %3937 to <16 x i16>*
  %3939 = load <16 x i16>, <16 x i16>* %3938, align 2, !tbaa !396
  %3940 = getelementptr inbounds i16, i16* %3916, i64 3
  %3941 = bitcast i16* %3940 to <16 x i16>*
  %3942 = load <16 x i16>, <16 x i16>* %3941, align 2, !tbaa !396
  %3943 = getelementptr inbounds i16, i16* %3916, i64 19
  %3944 = bitcast i16* %3943 to <16 x i16>*
  %3945 = load <16 x i16>, <16 x i16>* %3944, align 2, !tbaa !396
  %3946 = add <16 x i16> %3924, %3919
  %3947 = add <16 x i16> %3946, %3930
  %3948 = add <16 x i16> %3947, %3936
  %3949 = add <16 x i16> %3948, %3942
  %3950 = add <16 x i16> %3927, %3922
  %3951 = add <16 x i16> %3950, %3933
  %3952 = add <16 x i16> %3951, %3939
  %3953 = add <16 x i16> %3952, %3945
  %3954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3949, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3953, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3956 = shufflevector <16 x i16> %3954, <16 x i16> %3955, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3957 = lshr <32 x i16> %3956, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3958 = shufflevector <32 x i16> %3957, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3959 = shl nsw i64 %3889, 5
  %3960 = add nsw i64 %3959, %3744
  %3961 = getelementptr inbounds i16, i16* %blur_x, i64 %3960
  %3962 = bitcast i16* %3961 to <16 x i16>*
  store <16 x i16> %3958, <16 x i16>* %3962, align 2, !tbaa !399
  %3963 = shufflevector <32 x i16> %3957, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3964 = getelementptr inbounds i16, i16* %3961, i64 16
  %3965 = bitcast i16* %3964 to <16 x i16>*
  store <16 x i16> %3963, <16 x i16>* %3965, align 2, !tbaa !399
  br label %"consume blur_x191"

"consume blur_x191":                              ; preds = %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge", %"produce blur_x190"
  %.pre-phi3479 = phi i64 [ %.pre3478, %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge" ], [ %3959, %"produce blur_x190" ]
  %3966 = add nsw i64 %3747, %.pre-phi3479
  %3967 = getelementptr inbounds i16, i16* %blur_x, i64 %3966
  %3968 = bitcast i16* %3967 to <16 x i16>*
  %3969 = load <16 x i16>, <16 x i16>* %3968, align 2, !tbaa !399
  %3970 = getelementptr inbounds i16, i16* %3967, i64 16
  %3971 = bitcast i16* %3970 to <16 x i16>*
  %3972 = load <16 x i16>, <16 x i16>* %3971, align 2, !tbaa !399
  %3973 = add nsw i64 %3750, %.pre-phi3479
  %3974 = getelementptr inbounds i16, i16* %blur_x, i64 %3973
  %3975 = bitcast i16* %3974 to <16 x i16>*
  %3976 = load <16 x i16>, <16 x i16>* %3975, align 2, !tbaa !399
  %3977 = getelementptr inbounds i16, i16* %3974, i64 16
  %3978 = bitcast i16* %3977 to <16 x i16>*
  %3979 = load <16 x i16>, <16 x i16>* %3978, align 2, !tbaa !399
  %3980 = add nsw i64 %3753, %.pre-phi3479
  %3981 = getelementptr inbounds i16, i16* %blur_x, i64 %3980
  %3982 = bitcast i16* %3981 to <16 x i16>*
  %3983 = load <16 x i16>, <16 x i16>* %3982, align 2, !tbaa !399
  %3984 = getelementptr inbounds i16, i16* %3981, i64 16
  %3985 = bitcast i16* %3984 to <16 x i16>*
  %3986 = load <16 x i16>, <16 x i16>* %3985, align 2, !tbaa !399
  %3987 = add nsw i64 %3756, %.pre-phi3479
  %3988 = getelementptr inbounds i16, i16* %blur_x, i64 %3987
  %3989 = bitcast i16* %3988 to <16 x i16>*
  %3990 = load <16 x i16>, <16 x i16>* %3989, align 2, !tbaa !399
  %3991 = getelementptr inbounds i16, i16* %3988, i64 16
  %3992 = bitcast i16* %3991 to <16 x i16>*
  %3993 = load <16 x i16>, <16 x i16>* %3992, align 2, !tbaa !399
  %3994 = add nsw i64 %3759, %.pre-phi3479
  %3995 = getelementptr inbounds i16, i16* %blur_x, i64 %3994
  %3996 = bitcast i16* %3995 to <16 x i16>*
  %3997 = load <16 x i16>, <16 x i16>* %3996, align 2, !tbaa !399
  %3998 = getelementptr inbounds i16, i16* %3995, i64 16
  %3999 = bitcast i16* %3998 to <16 x i16>*
  %4000 = load <16 x i16>, <16 x i16>* %3999, align 2, !tbaa !399
  %4001 = add <16 x i16> %3976, %3969
  %4002 = add <16 x i16> %4001, %3983
  %4003 = add <16 x i16> %4002, %3990
  %4004 = add <16 x i16> %4003, %3997
  %4005 = add <16 x i16> %3979, %3972
  %4006 = add <16 x i16> %4005, %3986
  %4007 = add <16 x i16> %4006, %3993
  %4008 = add <16 x i16> %4007, %4000
  %4009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4004, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4008, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4011 = shufflevector <16 x i16> %4009, <16 x i16> %4010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4012 = lshr <32 x i16> %4011, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4013 = shufflevector <32 x i16> %4012, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4014 = add nsw i64 %3763, %.pre-phi3479
  %4015 = getelementptr inbounds i16, i16* %66, i64 %4014
  %4016 = bitcast i16* %4015 to <16 x i16>*
  store <16 x i16> %4013, <16 x i16>* %4016, align 2, !tbaa !401
  %4017 = shufflevector <32 x i16> %4012, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4018 = getelementptr inbounds i16, i16* %4015, i64 16
  %4019 = bitcast i16* %4018 to <16 x i16>*
  store <16 x i16> %4017, <16 x i16>* %4019, align 2, !tbaa !401
  %indvars.iv.next3272 = add nuw nsw i64 %indvars.iv3271, 1
  %.not2749 = icmp eq i64 %indvars.iv.next3272, %184
  br i1 %.not2749, label %"end for blur_y.s0.x.x.rebased185", label %"for blur_y.s0.x.x.rebased184"

"for blur_y.s0.x.x.rebased192":                   ; preds = %"for blur_y.s0.x.x.rebased192.preheader", %"consume blur_x200"
  %blur_y.s0.x.x.rebased194 = phi i32 [ %4132, %"consume blur_x200" ], [ 0, %"for blur_y.s0.x.x.rebased192.preheader" ]
  %4020 = add nsw i32 %blur_y.s0.x.x.rebased194, %t1626
  %a133 = shl nsw i32 %4020, 5
  %4021 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %4021, i32 %a133, i32 %a14
  %4022 = icmp slt i32 %4020, 1
  %4023 = icmp sgt i32 %4, %a133
  %4024 = or i1 %4022, %4023
  br i1 %4024, label %"produce blur_x198", label %"consume blur_x200"

"end for blur_y.s0.x.x.rebased193":               ; preds = %"consume blur_x200", %"end for blur_y.s0.x.x.rebased185"
  br i1 %34, label %"produce blur_x204", label %after_bb201

"produce blur_x198":                              ; preds = %"for blur_y.s0.x.x.rebased192"
  %4025 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s199 = select i1 %4025, i32 %b139, i32 %4
  %t781 = add nsw i32 %blur_x.s0.x.v1.base.s199, %t1769
  %4026 = sext i32 %t781 to i64
  %4027 = getelementptr inbounds i16, i16* %read_input, i64 %4026
  %4028 = getelementptr inbounds i16, i16* %4027, i64 1
  %4029 = bitcast i16* %4028 to <16 x i16>*
  %4030 = load <16 x i16>, <16 x i16>* %4029, align 2, !tbaa !396
  %4031 = getelementptr inbounds i16, i16* %4027, i64 17
  %4032 = bitcast i16* %4031 to <16 x i16>*
  %4033 = load <16 x i16>, <16 x i16>* %4032, align 2, !tbaa !396
  %4034 = bitcast i16* %4027 to <16 x i16>*
  %4035 = load <16 x i16>, <16 x i16>* %4034, align 2, !tbaa !396
  %4036 = getelementptr inbounds i16, i16* %4027, i64 16
  %4037 = bitcast i16* %4036 to <16 x i16>*
  %4038 = load <16 x i16>, <16 x i16>* %4037, align 2, !tbaa !396
  %4039 = getelementptr inbounds i16, i16* %4027, i64 2
  %4040 = bitcast i16* %4039 to <16 x i16>*
  %4041 = load <16 x i16>, <16 x i16>* %4040, align 2, !tbaa !396
  %4042 = getelementptr inbounds i16, i16* %4027, i64 18
  %4043 = bitcast i16* %4042 to <16 x i16>*
  %4044 = load <16 x i16>, <16 x i16>* %4043, align 2, !tbaa !396
  %4045 = getelementptr inbounds i16, i16* %4027, i64 4
  %4046 = bitcast i16* %4045 to <16 x i16>*
  %4047 = load <16 x i16>, <16 x i16>* %4046, align 2, !tbaa !396
  %4048 = getelementptr inbounds i16, i16* %4027, i64 20
  %4049 = bitcast i16* %4048 to <16 x i16>*
  %4050 = load <16 x i16>, <16 x i16>* %4049, align 2, !tbaa !396
  %4051 = getelementptr inbounds i16, i16* %4027, i64 3
  %4052 = bitcast i16* %4051 to <16 x i16>*
  %4053 = load <16 x i16>, <16 x i16>* %4052, align 2, !tbaa !396
  %4054 = getelementptr inbounds i16, i16* %4027, i64 19
  %4055 = bitcast i16* %4054 to <16 x i16>*
  %4056 = load <16 x i16>, <16 x i16>* %4055, align 2, !tbaa !396
  %4057 = add <16 x i16> %4035, %4030
  %4058 = add <16 x i16> %4057, %4041
  %4059 = add <16 x i16> %4058, %4047
  %4060 = add <16 x i16> %4059, %4053
  %4061 = add <16 x i16> %4038, %4033
  %4062 = add <16 x i16> %4061, %4044
  %4063 = add <16 x i16> %4062, %4050
  %4064 = add <16 x i16> %4063, %4056
  %4065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4060, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4064, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4067 = shufflevector <16 x i16> %4065, <16 x i16> %4066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4068 = lshr <32 x i16> %4067, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4069 = shufflevector <32 x i16> %4068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4070 = sext i32 %blur_x.s0.x.v1.base.s199 to i64
  %4071 = add nsw i64 %4070, %3895
  %4072 = getelementptr inbounds i16, i16* %blur_x, i64 %4071
  %4073 = bitcast i16* %4072 to <16 x i16>*
  store <16 x i16> %4069, <16 x i16>* %4073, align 2, !tbaa !399
  %4074 = shufflevector <32 x i16> %4068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4075 = getelementptr inbounds i16, i16* %4072, i64 16
  %4076 = bitcast i16* %4075 to <16 x i16>*
  store <16 x i16> %4074, <16 x i16>* %4076, align 2, !tbaa !399
  br label %"consume blur_x200"

"consume blur_x200":                              ; preds = %"for blur_y.s0.x.x.rebased192", %"produce blur_x198"
  %4077 = sext i32 %b139 to i64
  %4078 = add nsw i64 %3898, %4077
  %4079 = getelementptr inbounds i16, i16* %blur_x, i64 %4078
  %4080 = bitcast i16* %4079 to <16 x i16>*
  %4081 = load <16 x i16>, <16 x i16>* %4080, align 2, !tbaa !399
  %4082 = getelementptr inbounds i16, i16* %4079, i64 16
  %4083 = bitcast i16* %4082 to <16 x i16>*
  %4084 = load <16 x i16>, <16 x i16>* %4083, align 2, !tbaa !399
  %4085 = add nsw i64 %3901, %4077
  %4086 = getelementptr inbounds i16, i16* %blur_x, i64 %4085
  %4087 = bitcast i16* %4086 to <16 x i16>*
  %4088 = load <16 x i16>, <16 x i16>* %4087, align 2, !tbaa !399
  %4089 = getelementptr inbounds i16, i16* %4086, i64 16
  %4090 = bitcast i16* %4089 to <16 x i16>*
  %4091 = load <16 x i16>, <16 x i16>* %4090, align 2, !tbaa !399
  %4092 = add nsw i64 %3904, %4077
  %4093 = getelementptr inbounds i16, i16* %blur_x, i64 %4092
  %4094 = bitcast i16* %4093 to <16 x i16>*
  %4095 = load <16 x i16>, <16 x i16>* %4094, align 2, !tbaa !399
  %4096 = getelementptr inbounds i16, i16* %4093, i64 16
  %4097 = bitcast i16* %4096 to <16 x i16>*
  %4098 = load <16 x i16>, <16 x i16>* %4097, align 2, !tbaa !399
  %4099 = add nsw i64 %3907, %4077
  %4100 = getelementptr inbounds i16, i16* %blur_x, i64 %4099
  %4101 = bitcast i16* %4100 to <16 x i16>*
  %4102 = load <16 x i16>, <16 x i16>* %4101, align 2, !tbaa !399
  %4103 = getelementptr inbounds i16, i16* %4100, i64 16
  %4104 = bitcast i16* %4103 to <16 x i16>*
  %4105 = load <16 x i16>, <16 x i16>* %4104, align 2, !tbaa !399
  %4106 = add nsw i64 %3910, %4077
  %4107 = getelementptr inbounds i16, i16* %blur_x, i64 %4106
  %4108 = bitcast i16* %4107 to <16 x i16>*
  %4109 = load <16 x i16>, <16 x i16>* %4108, align 2, !tbaa !399
  %4110 = getelementptr inbounds i16, i16* %4107, i64 16
  %4111 = bitcast i16* %4110 to <16 x i16>*
  %4112 = load <16 x i16>, <16 x i16>* %4111, align 2, !tbaa !399
  %4113 = add <16 x i16> %4088, %4081
  %4114 = add <16 x i16> %4113, %4095
  %4115 = add <16 x i16> %4114, %4102
  %4116 = add <16 x i16> %4115, %4109
  %4117 = add <16 x i16> %4091, %4084
  %4118 = add <16 x i16> %4117, %4098
  %4119 = add <16 x i16> %4118, %4105
  %4120 = add <16 x i16> %4119, %4112
  %4121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4116, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4120, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4123 = shufflevector <16 x i16> %4121, <16 x i16> %4122, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4124 = lshr <32 x i16> %4123, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4125 = shufflevector <32 x i16> %4124, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4126 = add nsw i64 %3914, %4077
  %4127 = getelementptr inbounds i16, i16* %66, i64 %4126
  %4128 = bitcast i16* %4127 to <16 x i16>*
  store <16 x i16> %4125, <16 x i16>* %4128, align 2, !tbaa !401
  %4129 = shufflevector <32 x i16> %4124, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4130 = getelementptr inbounds i16, i16* %4127, i64 16
  %4131 = bitcast i16* %4130 to <16 x i16>*
  store <16 x i16> %4129, <16 x i16>* %4131, align 2, !tbaa !401
  %4132 = add nuw nsw i32 %blur_y.s0.x.x.rebased194, 1
  %.not2748 = icmp eq i32 %4132, %t1683
  br i1 %.not2748, label %"end for blur_y.s0.x.x.rebased193", label %"for blur_y.s0.x.x.rebased192"

after_bb201:                                      ; preds = %"end for blur_y.s0.x.x.rebased193", %"produce blur_x204"
  br i1 %100, label %"for blur_y.s0.x.x.rebased206.preheader", label %"end for blur_y.s0.x.x.rebased207", !prof !386

"for blur_y.s0.x.x.rebased206.preheader":         ; preds = %after_bb201
  %4133 = sext i32 %t1688 to i64
  %4134 = zext i32 %.pre-phi3469 to i64
  %4135 = mul nsw i64 %4134, %112
  %4136 = sub nsw i64 %4135, %96
  %4137 = zext i32 %.pre-phi3463 to i64
  %4138 = mul nsw i64 %4137, %112
  %4139 = sub nsw i64 %4138, %96
  %4140 = zext i32 %.pre-phi3475 to i64
  %4141 = mul nsw i64 %4140, %112
  %4142 = sub nsw i64 %4141, %96
  %4143 = zext i32 %.pre-phi3445 to i64
  %4144 = mul nsw i64 %4143, %112
  %4145 = sub nsw i64 %4144, %96
  %4146 = zext i32 %.pre-phi to i64
  %4147 = mul nsw i64 %4146, %112
  %4148 = sub nsw i64 %4147, %96
  %4149 = sext i32 %a26 to i64
  %4150 = add nsw i64 %4149, 5
  %4151 = mul nsw i64 %4150, %113
  %4152 = add nsw i64 %4151, %116
  br label %"for blur_y.s0.x.x.rebased206"

"produce blur_x204":                              ; preds = %"end for blur_y.s0.x.x.rebased193"
  %4153 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %4154 = getelementptr inbounds i16, i16* %4153, i64 -31
  %4155 = bitcast i16* %4154 to <16 x i16>*
  %4156 = load <16 x i16>, <16 x i16>* %4155, align 2, !tbaa !396
  %4157 = getelementptr inbounds i16, i16* %4153, i64 -15
  %4158 = bitcast i16* %4157 to <16 x i16>*
  %4159 = load <16 x i16>, <16 x i16>* %4158, align 2, !tbaa !396
  %4160 = getelementptr inbounds i16, i16* %4153, i64 -32
  %4161 = bitcast i16* %4160 to <16 x i16>*
  %4162 = load <16 x i16>, <16 x i16>* %4161, align 2, !tbaa !396
  %4163 = getelementptr inbounds i16, i16* %4153, i64 -16
  %4164 = bitcast i16* %4163 to <16 x i16>*
  %4165 = load <16 x i16>, <16 x i16>* %4164, align 2, !tbaa !396
  %4166 = getelementptr inbounds i16, i16* %4153, i64 -30
  %4167 = bitcast i16* %4166 to <16 x i16>*
  %4168 = load <16 x i16>, <16 x i16>* %4167, align 2, !tbaa !396
  %4169 = getelementptr inbounds i16, i16* %4153, i64 -14
  %4170 = bitcast i16* %4169 to <16 x i16>*
  %4171 = load <16 x i16>, <16 x i16>* %4170, align 2, !tbaa !396
  %4172 = getelementptr inbounds i16, i16* %4153, i64 -28
  %4173 = bitcast i16* %4172 to <16 x i16>*
  %4174 = load <16 x i16>, <16 x i16>* %4173, align 2, !tbaa !396
  %4175 = getelementptr inbounds i16, i16* %4153, i64 -12
  %4176 = bitcast i16* %4175 to <16 x i16>*
  %4177 = load <16 x i16>, <16 x i16>* %4176, align 2, !tbaa !396
  %4178 = getelementptr inbounds i16, i16* %4153, i64 -29
  %4179 = bitcast i16* %4178 to <16 x i16>*
  %4180 = load <16 x i16>, <16 x i16>* %4179, align 2, !tbaa !396
  %4181 = getelementptr inbounds i16, i16* %4153, i64 -13
  %4182 = bitcast i16* %4181 to <16 x i16>*
  %4183 = load <16 x i16>, <16 x i16>* %4182, align 2, !tbaa !396
  %4184 = add <16 x i16> %4162, %4156
  %4185 = add <16 x i16> %4184, %4168
  %4186 = add <16 x i16> %4185, %4174
  %4187 = add <16 x i16> %4186, %4180
  %4188 = add <16 x i16> %4165, %4159
  %4189 = add <16 x i16> %4188, %4171
  %4190 = add <16 x i16> %4189, %4177
  %4191 = add <16 x i16> %4190, %4183
  %4192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4187, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4193 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4191, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4194 = shufflevector <16 x i16> %4192, <16 x i16> %4193, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4195 = lshr <32 x i16> %4194, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4196 = shufflevector <32 x i16> %4195, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4197 = zext i32 %.pre-phi3445 to i64
  %4198 = mul nsw i64 %97, %4197
  %4199 = add nsw i64 %99, %4198
  %4200 = getelementptr inbounds i16, i16* %blur_x, i64 %4199
  %4201 = getelementptr inbounds i16, i16* %4200, i64 -32
  %4202 = bitcast i16* %4201 to <16 x i16>*
  store <16 x i16> %4196, <16 x i16>* %4202, align 2, !tbaa !399
  %4203 = shufflevector <32 x i16> %4195, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4204 = getelementptr inbounds i16, i16* %4200, i64 -16
  %4205 = bitcast i16* %4204 to <16 x i16>*
  store <16 x i16> %4203, <16 x i16>* %4205, align 2, !tbaa !399
  %4206 = zext i32 %.pre-phi3469 to i64
  %4207 = mul nsw i64 %4206, %112
  %4208 = add nsw i64 %4207, %94
  %4209 = getelementptr inbounds i16, i16* %blur_x, i64 %4208
  %4210 = getelementptr inbounds i16, i16* %4209, i64 -32
  %4211 = bitcast i16* %4210 to <16 x i16>*
  %4212 = load <16 x i16>, <16 x i16>* %4211, align 2, !tbaa !399
  %4213 = getelementptr inbounds i16, i16* %4209, i64 -16
  %4214 = bitcast i16* %4213 to <16 x i16>*
  %4215 = load <16 x i16>, <16 x i16>* %4214, align 2, !tbaa !399
  %4216 = zext i32 %.pre-phi3463 to i64
  %4217 = mul nsw i64 %4216, %112
  %4218 = add nsw i64 %4217, %94
  %4219 = getelementptr inbounds i16, i16* %blur_x, i64 %4218
  %4220 = getelementptr inbounds i16, i16* %4219, i64 -32
  %4221 = bitcast i16* %4220 to <16 x i16>*
  %4222 = load <16 x i16>, <16 x i16>* %4221, align 2, !tbaa !399
  %4223 = getelementptr inbounds i16, i16* %4219, i64 -16
  %4224 = bitcast i16* %4223 to <16 x i16>*
  %4225 = load <16 x i16>, <16 x i16>* %4224, align 2, !tbaa !399
  %4226 = zext i32 %.pre-phi3475 to i64
  %4227 = mul nsw i64 %4226, %112
  %4228 = add nsw i64 %4227, %94
  %4229 = getelementptr inbounds i16, i16* %blur_x, i64 %4228
  %4230 = getelementptr inbounds i16, i16* %4229, i64 -32
  %4231 = bitcast i16* %4230 to <16 x i16>*
  %4232 = load <16 x i16>, <16 x i16>* %4231, align 2, !tbaa !399
  %4233 = getelementptr inbounds i16, i16* %4229, i64 -16
  %4234 = bitcast i16* %4233 to <16 x i16>*
  %4235 = load <16 x i16>, <16 x i16>* %4234, align 2, !tbaa !399
  %4236 = mul nsw i64 %4197, %112
  %4237 = add nsw i64 %4236, %94
  %4238 = getelementptr inbounds i16, i16* %blur_x, i64 %4237
  %4239 = getelementptr inbounds i16, i16* %4238, i64 -32
  %4240 = bitcast i16* %4239 to <16 x i16>*
  %4241 = load <16 x i16>, <16 x i16>* %4240, align 2, !tbaa !399
  %4242 = getelementptr inbounds i16, i16* %4238, i64 -16
  %4243 = bitcast i16* %4242 to <16 x i16>*
  %4244 = load <16 x i16>, <16 x i16>* %4243, align 2, !tbaa !399
  %4245 = zext i32 %.pre-phi to i64
  %4246 = mul nsw i64 %4245, %112
  %4247 = add nsw i64 %4246, %94
  %4248 = getelementptr inbounds i16, i16* %blur_x, i64 %4247
  %4249 = getelementptr inbounds i16, i16* %4248, i64 -32
  %4250 = bitcast i16* %4249 to <16 x i16>*
  %4251 = load <16 x i16>, <16 x i16>* %4250, align 2, !tbaa !399
  %4252 = getelementptr inbounds i16, i16* %4248, i64 -16
  %4253 = bitcast i16* %4252 to <16 x i16>*
  %4254 = load <16 x i16>, <16 x i16>* %4253, align 2, !tbaa !399
  %4255 = add <16 x i16> %4222, %4212
  %4256 = add <16 x i16> %4255, %4232
  %4257 = add <16 x i16> %4256, %4241
  %4258 = add <16 x i16> %4257, %4251
  %4259 = add <16 x i16> %4225, %4215
  %4260 = add <16 x i16> %4259, %4235
  %4261 = add <16 x i16> %4260, %4244
  %4262 = add <16 x i16> %4261, %4254
  %4263 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4258, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4264 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4262, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4265 = shufflevector <16 x i16> %4263, <16 x i16> %4264, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4266 = lshr <32 x i16> %4265, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4267 = shufflevector <32 x i16> %4266, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4268 = sext i32 %a26 to i64
  %4269 = add nsw i64 %4268, 5
  %4270 = mul nsw i64 %4269, %113
  %4271 = add nsw i64 %115, %4270
  %4272 = getelementptr inbounds i16, i16* %66, i64 %4271
  %4273 = getelementptr inbounds i16, i16* %4272, i64 -32
  %4274 = bitcast i16* %4273 to <16 x i16>*
  store <16 x i16> %4267, <16 x i16>* %4274, align 2, !tbaa !401
  %4275 = shufflevector <32 x i16> %4266, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4276 = getelementptr inbounds i16, i16* %4272, i64 -16
  %4277 = bitcast i16* %4276 to <16 x i16>*
  store <16 x i16> %4275, <16 x i16>* %4277, align 2, !tbaa !401
  br label %after_bb201

"for blur_y.s0.x.x.rebased206":                   ; preds = %"for blur_y.s0.x.x.rebased206.preheader", %"consume blur_x213"
  %indvars.iv3274 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased206.preheader" ], [ %indvars.iv.next3275, %"consume blur_x213" ]
  %4278 = add nsw i64 %indvars.iv3274, %101
  %4279 = icmp slt i64 %4278, 1
  %4280 = trunc i64 %4278 to i32
  %4281 = shl nsw i32 %4280, 5
  %4282 = icmp sgt i32 %4, %4281
  %4283 = or i1 %4279, %4282
  br i1 %4283, label %"produce blur_x212", label %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge"

"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased206"
  %.pre3480 = shl nsw i64 %4278, 5
  br label %"consume blur_x213"

"end for blur_y.s0.x.x.rebased207":               ; preds = %"consume blur_x213", %after_bb201
  br i1 %102, label %"for blur_y.s0.x.x.rebased214.preheader", label %"end for blur_y.s0.x.x.rebased215", !prof !386

"for blur_y.s0.x.x.rebased214.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased207"
  %4284 = sext i32 %t1688 to i64
  %4285 = zext i32 %.pre-phi3469 to i64
  %4286 = mul nsw i64 %4285, %112
  %4287 = sub nsw i64 %4286, %96
  %4288 = zext i32 %.pre-phi3463 to i64
  %4289 = mul nsw i64 %4288, %112
  %4290 = sub nsw i64 %4289, %96
  %4291 = zext i32 %.pre-phi3475 to i64
  %4292 = mul nsw i64 %4291, %112
  %4293 = sub nsw i64 %4292, %96
  %4294 = zext i32 %.pre-phi3445 to i64
  %4295 = mul nsw i64 %4294, %112
  %4296 = sub nsw i64 %4295, %96
  %4297 = zext i32 %.pre-phi to i64
  %4298 = mul nsw i64 %4297, %112
  %4299 = sub nsw i64 %4298, %96
  %4300 = sext i32 %a26 to i64
  %4301 = add nsw i64 %4300, 5
  %4302 = mul nsw i64 %4301, %113
  %4303 = add nsw i64 %4302, %116
  br label %"for blur_y.s0.x.x.rebased214"

"produce blur_x212":                              ; preds = %"for blur_y.s0.x.x.rebased206"
  %t792 = add nsw i32 %4281, %t1785
  %4304 = sext i32 %t792 to i64
  %4305 = getelementptr inbounds i16, i16* %read_input, i64 %4304
  %4306 = getelementptr inbounds i16, i16* %4305, i64 1
  %4307 = bitcast i16* %4306 to <16 x i16>*
  %4308 = load <16 x i16>, <16 x i16>* %4307, align 2, !tbaa !396
  %4309 = getelementptr inbounds i16, i16* %4305, i64 17
  %4310 = bitcast i16* %4309 to <16 x i16>*
  %4311 = load <16 x i16>, <16 x i16>* %4310, align 2, !tbaa !396
  %4312 = bitcast i16* %4305 to <16 x i16>*
  %4313 = load <16 x i16>, <16 x i16>* %4312, align 2, !tbaa !396
  %4314 = getelementptr inbounds i16, i16* %4305, i64 16
  %4315 = bitcast i16* %4314 to <16 x i16>*
  %4316 = load <16 x i16>, <16 x i16>* %4315, align 2, !tbaa !396
  %4317 = getelementptr inbounds i16, i16* %4305, i64 2
  %4318 = bitcast i16* %4317 to <16 x i16>*
  %4319 = load <16 x i16>, <16 x i16>* %4318, align 2, !tbaa !396
  %4320 = getelementptr inbounds i16, i16* %4305, i64 18
  %4321 = bitcast i16* %4320 to <16 x i16>*
  %4322 = load <16 x i16>, <16 x i16>* %4321, align 2, !tbaa !396
  %4323 = getelementptr inbounds i16, i16* %4305, i64 4
  %4324 = bitcast i16* %4323 to <16 x i16>*
  %4325 = load <16 x i16>, <16 x i16>* %4324, align 2, !tbaa !396
  %4326 = getelementptr inbounds i16, i16* %4305, i64 20
  %4327 = bitcast i16* %4326 to <16 x i16>*
  %4328 = load <16 x i16>, <16 x i16>* %4327, align 2, !tbaa !396
  %4329 = getelementptr inbounds i16, i16* %4305, i64 3
  %4330 = bitcast i16* %4329 to <16 x i16>*
  %4331 = load <16 x i16>, <16 x i16>* %4330, align 2, !tbaa !396
  %4332 = getelementptr inbounds i16, i16* %4305, i64 19
  %4333 = bitcast i16* %4332 to <16 x i16>*
  %4334 = load <16 x i16>, <16 x i16>* %4333, align 2, !tbaa !396
  %4335 = add <16 x i16> %4313, %4308
  %4336 = add <16 x i16> %4335, %4319
  %4337 = add <16 x i16> %4336, %4325
  %4338 = add <16 x i16> %4337, %4331
  %4339 = add <16 x i16> %4316, %4311
  %4340 = add <16 x i16> %4339, %4322
  %4341 = add <16 x i16> %4340, %4328
  %4342 = add <16 x i16> %4341, %4334
  %4343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4338, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4342, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4345 = shufflevector <16 x i16> %4343, <16 x i16> %4344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4346 = lshr <32 x i16> %4345, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4347 = shufflevector <32 x i16> %4346, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4348 = shl nsw i64 %4278, 5
  %4349 = add nsw i64 %4348, %4133
  %4350 = getelementptr inbounds i16, i16* %blur_x, i64 %4349
  %4351 = bitcast i16* %4350 to <16 x i16>*
  store <16 x i16> %4347, <16 x i16>* %4351, align 2, !tbaa !399
  %4352 = shufflevector <32 x i16> %4346, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4353 = getelementptr inbounds i16, i16* %4350, i64 16
  %4354 = bitcast i16* %4353 to <16 x i16>*
  store <16 x i16> %4352, <16 x i16>* %4354, align 2, !tbaa !399
  br label %"consume blur_x213"

"consume blur_x213":                              ; preds = %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge", %"produce blur_x212"
  %.pre-phi3481 = phi i64 [ %.pre3480, %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge" ], [ %4348, %"produce blur_x212" ]
  %4355 = add nsw i64 %4136, %.pre-phi3481
  %4356 = getelementptr inbounds i16, i16* %blur_x, i64 %4355
  %4357 = bitcast i16* %4356 to <16 x i16>*
  %4358 = load <16 x i16>, <16 x i16>* %4357, align 2, !tbaa !399
  %4359 = getelementptr inbounds i16, i16* %4356, i64 16
  %4360 = bitcast i16* %4359 to <16 x i16>*
  %4361 = load <16 x i16>, <16 x i16>* %4360, align 2, !tbaa !399
  %4362 = add nsw i64 %4139, %.pre-phi3481
  %4363 = getelementptr inbounds i16, i16* %blur_x, i64 %4362
  %4364 = bitcast i16* %4363 to <16 x i16>*
  %4365 = load <16 x i16>, <16 x i16>* %4364, align 2, !tbaa !399
  %4366 = getelementptr inbounds i16, i16* %4363, i64 16
  %4367 = bitcast i16* %4366 to <16 x i16>*
  %4368 = load <16 x i16>, <16 x i16>* %4367, align 2, !tbaa !399
  %4369 = add nsw i64 %4142, %.pre-phi3481
  %4370 = getelementptr inbounds i16, i16* %blur_x, i64 %4369
  %4371 = bitcast i16* %4370 to <16 x i16>*
  %4372 = load <16 x i16>, <16 x i16>* %4371, align 2, !tbaa !399
  %4373 = getelementptr inbounds i16, i16* %4370, i64 16
  %4374 = bitcast i16* %4373 to <16 x i16>*
  %4375 = load <16 x i16>, <16 x i16>* %4374, align 2, !tbaa !399
  %4376 = add nsw i64 %4145, %.pre-phi3481
  %4377 = getelementptr inbounds i16, i16* %blur_x, i64 %4376
  %4378 = bitcast i16* %4377 to <16 x i16>*
  %4379 = load <16 x i16>, <16 x i16>* %4378, align 2, !tbaa !399
  %4380 = getelementptr inbounds i16, i16* %4377, i64 16
  %4381 = bitcast i16* %4380 to <16 x i16>*
  %4382 = load <16 x i16>, <16 x i16>* %4381, align 2, !tbaa !399
  %4383 = add nsw i64 %4148, %.pre-phi3481
  %4384 = getelementptr inbounds i16, i16* %blur_x, i64 %4383
  %4385 = bitcast i16* %4384 to <16 x i16>*
  %4386 = load <16 x i16>, <16 x i16>* %4385, align 2, !tbaa !399
  %4387 = getelementptr inbounds i16, i16* %4384, i64 16
  %4388 = bitcast i16* %4387 to <16 x i16>*
  %4389 = load <16 x i16>, <16 x i16>* %4388, align 2, !tbaa !399
  %4390 = add <16 x i16> %4365, %4358
  %4391 = add <16 x i16> %4390, %4372
  %4392 = add <16 x i16> %4391, %4379
  %4393 = add <16 x i16> %4392, %4386
  %4394 = add <16 x i16> %4368, %4361
  %4395 = add <16 x i16> %4394, %4375
  %4396 = add <16 x i16> %4395, %4382
  %4397 = add <16 x i16> %4396, %4389
  %4398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4393, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4397, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4400 = shufflevector <16 x i16> %4398, <16 x i16> %4399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4401 = lshr <32 x i16> %4400, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4402 = shufflevector <32 x i16> %4401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4403 = add nsw i64 %4152, %.pre-phi3481
  %4404 = getelementptr inbounds i16, i16* %66, i64 %4403
  %4405 = bitcast i16* %4404 to <16 x i16>*
  store <16 x i16> %4402, <16 x i16>* %4405, align 2, !tbaa !401
  %4406 = shufflevector <32 x i16> %4401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4407 = getelementptr inbounds i16, i16* %4404, i64 16
  %4408 = bitcast i16* %4407 to <16 x i16>*
  store <16 x i16> %4406, <16 x i16>* %4408, align 2, !tbaa !401
  %indvars.iv.next3275 = add nuw nsw i64 %indvars.iv3274, 1
  %.not2747 = icmp eq i64 %indvars.iv.next3275, %184
  br i1 %.not2747, label %"end for blur_y.s0.x.x.rebased207", label %"for blur_y.s0.x.x.rebased206"

"for blur_y.s0.x.x.rebased214":                   ; preds = %"for blur_y.s0.x.x.rebased214.preheader", %"consume blur_x222"
  %blur_y.s0.x.x.rebased216 = phi i32 [ %4521, %"consume blur_x222" ], [ 0, %"for blur_y.s0.x.x.rebased214.preheader" ]
  %4409 = add nsw i32 %blur_y.s0.x.x.rebased216, %t1626
  %a140 = shl nsw i32 %4409, 5
  %4410 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %4410, i32 %a140, i32 %a14
  %4411 = icmp slt i32 %4409, 1
  %4412 = icmp sgt i32 %4, %a140
  %4413 = or i1 %4411, %4412
  br i1 %4413, label %"produce blur_x220", label %"consume blur_x222"

"end for blur_y.s0.x.x.rebased215":               ; preds = %"consume blur_x222", %"end for blur_y.s0.x.x.rebased207"
  br i1 %34, label %"produce blur_x226", label %after_bb223

"produce blur_x220":                              ; preds = %"for blur_y.s0.x.x.rebased214"
  %4414 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s221 = select i1 %4414, i32 %b146, i32 %4
  %t797 = add nsw i32 %blur_x.s0.x.v1.base.s221, %t1785
  %4415 = sext i32 %t797 to i64
  %4416 = getelementptr inbounds i16, i16* %read_input, i64 %4415
  %4417 = getelementptr inbounds i16, i16* %4416, i64 1
  %4418 = bitcast i16* %4417 to <16 x i16>*
  %4419 = load <16 x i16>, <16 x i16>* %4418, align 2, !tbaa !396
  %4420 = getelementptr inbounds i16, i16* %4416, i64 17
  %4421 = bitcast i16* %4420 to <16 x i16>*
  %4422 = load <16 x i16>, <16 x i16>* %4421, align 2, !tbaa !396
  %4423 = bitcast i16* %4416 to <16 x i16>*
  %4424 = load <16 x i16>, <16 x i16>* %4423, align 2, !tbaa !396
  %4425 = getelementptr inbounds i16, i16* %4416, i64 16
  %4426 = bitcast i16* %4425 to <16 x i16>*
  %4427 = load <16 x i16>, <16 x i16>* %4426, align 2, !tbaa !396
  %4428 = getelementptr inbounds i16, i16* %4416, i64 2
  %4429 = bitcast i16* %4428 to <16 x i16>*
  %4430 = load <16 x i16>, <16 x i16>* %4429, align 2, !tbaa !396
  %4431 = getelementptr inbounds i16, i16* %4416, i64 18
  %4432 = bitcast i16* %4431 to <16 x i16>*
  %4433 = load <16 x i16>, <16 x i16>* %4432, align 2, !tbaa !396
  %4434 = getelementptr inbounds i16, i16* %4416, i64 4
  %4435 = bitcast i16* %4434 to <16 x i16>*
  %4436 = load <16 x i16>, <16 x i16>* %4435, align 2, !tbaa !396
  %4437 = getelementptr inbounds i16, i16* %4416, i64 20
  %4438 = bitcast i16* %4437 to <16 x i16>*
  %4439 = load <16 x i16>, <16 x i16>* %4438, align 2, !tbaa !396
  %4440 = getelementptr inbounds i16, i16* %4416, i64 3
  %4441 = bitcast i16* %4440 to <16 x i16>*
  %4442 = load <16 x i16>, <16 x i16>* %4441, align 2, !tbaa !396
  %4443 = getelementptr inbounds i16, i16* %4416, i64 19
  %4444 = bitcast i16* %4443 to <16 x i16>*
  %4445 = load <16 x i16>, <16 x i16>* %4444, align 2, !tbaa !396
  %4446 = add <16 x i16> %4424, %4419
  %4447 = add <16 x i16> %4446, %4430
  %4448 = add <16 x i16> %4447, %4436
  %4449 = add <16 x i16> %4448, %4442
  %4450 = add <16 x i16> %4427, %4422
  %4451 = add <16 x i16> %4450, %4433
  %4452 = add <16 x i16> %4451, %4439
  %4453 = add <16 x i16> %4452, %4445
  %4454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4449, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4453, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4456 = shufflevector <16 x i16> %4454, <16 x i16> %4455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4457 = lshr <32 x i16> %4456, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4458 = shufflevector <32 x i16> %4457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4459 = sext i32 %blur_x.s0.x.v1.base.s221 to i64
  %4460 = add nsw i64 %4459, %4284
  %4461 = getelementptr inbounds i16, i16* %blur_x, i64 %4460
  %4462 = bitcast i16* %4461 to <16 x i16>*
  store <16 x i16> %4458, <16 x i16>* %4462, align 2, !tbaa !399
  %4463 = shufflevector <32 x i16> %4457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4464 = getelementptr inbounds i16, i16* %4461, i64 16
  %4465 = bitcast i16* %4464 to <16 x i16>*
  store <16 x i16> %4463, <16 x i16>* %4465, align 2, !tbaa !399
  br label %"consume blur_x222"

"consume blur_x222":                              ; preds = %"for blur_y.s0.x.x.rebased214", %"produce blur_x220"
  %4466 = sext i32 %b146 to i64
  %4467 = add nsw i64 %4287, %4466
  %4468 = getelementptr inbounds i16, i16* %blur_x, i64 %4467
  %4469 = bitcast i16* %4468 to <16 x i16>*
  %4470 = load <16 x i16>, <16 x i16>* %4469, align 2, !tbaa !399
  %4471 = getelementptr inbounds i16, i16* %4468, i64 16
  %4472 = bitcast i16* %4471 to <16 x i16>*
  %4473 = load <16 x i16>, <16 x i16>* %4472, align 2, !tbaa !399
  %4474 = add nsw i64 %4290, %4466
  %4475 = getelementptr inbounds i16, i16* %blur_x, i64 %4474
  %4476 = bitcast i16* %4475 to <16 x i16>*
  %4477 = load <16 x i16>, <16 x i16>* %4476, align 2, !tbaa !399
  %4478 = getelementptr inbounds i16, i16* %4475, i64 16
  %4479 = bitcast i16* %4478 to <16 x i16>*
  %4480 = load <16 x i16>, <16 x i16>* %4479, align 2, !tbaa !399
  %4481 = add nsw i64 %4293, %4466
  %4482 = getelementptr inbounds i16, i16* %blur_x, i64 %4481
  %4483 = bitcast i16* %4482 to <16 x i16>*
  %4484 = load <16 x i16>, <16 x i16>* %4483, align 2, !tbaa !399
  %4485 = getelementptr inbounds i16, i16* %4482, i64 16
  %4486 = bitcast i16* %4485 to <16 x i16>*
  %4487 = load <16 x i16>, <16 x i16>* %4486, align 2, !tbaa !399
  %4488 = add nsw i64 %4296, %4466
  %4489 = getelementptr inbounds i16, i16* %blur_x, i64 %4488
  %4490 = bitcast i16* %4489 to <16 x i16>*
  %4491 = load <16 x i16>, <16 x i16>* %4490, align 2, !tbaa !399
  %4492 = getelementptr inbounds i16, i16* %4489, i64 16
  %4493 = bitcast i16* %4492 to <16 x i16>*
  %4494 = load <16 x i16>, <16 x i16>* %4493, align 2, !tbaa !399
  %4495 = add nsw i64 %4299, %4466
  %4496 = getelementptr inbounds i16, i16* %blur_x, i64 %4495
  %4497 = bitcast i16* %4496 to <16 x i16>*
  %4498 = load <16 x i16>, <16 x i16>* %4497, align 2, !tbaa !399
  %4499 = getelementptr inbounds i16, i16* %4496, i64 16
  %4500 = bitcast i16* %4499 to <16 x i16>*
  %4501 = load <16 x i16>, <16 x i16>* %4500, align 2, !tbaa !399
  %4502 = add <16 x i16> %4477, %4470
  %4503 = add <16 x i16> %4502, %4484
  %4504 = add <16 x i16> %4503, %4491
  %4505 = add <16 x i16> %4504, %4498
  %4506 = add <16 x i16> %4480, %4473
  %4507 = add <16 x i16> %4506, %4487
  %4508 = add <16 x i16> %4507, %4494
  %4509 = add <16 x i16> %4508, %4501
  %4510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4505, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4509, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4512 = shufflevector <16 x i16> %4510, <16 x i16> %4511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4513 = lshr <32 x i16> %4512, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4514 = shufflevector <32 x i16> %4513, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4515 = add nsw i64 %4303, %4466
  %4516 = getelementptr inbounds i16, i16* %66, i64 %4515
  %4517 = bitcast i16* %4516 to <16 x i16>*
  store <16 x i16> %4514, <16 x i16>* %4517, align 2, !tbaa !401
  %4518 = shufflevector <32 x i16> %4513, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4519 = getelementptr inbounds i16, i16* %4516, i64 16
  %4520 = bitcast i16* %4519 to <16 x i16>*
  store <16 x i16> %4518, <16 x i16>* %4520, align 2, !tbaa !401
  %4521 = add nuw nsw i32 %blur_y.s0.x.x.rebased216, 1
  %.not2746 = icmp eq i32 %4521, %t1683
  br i1 %.not2746, label %"end for blur_y.s0.x.x.rebased215", label %"for blur_y.s0.x.x.rebased214"

after_bb223:                                      ; preds = %"end for blur_y.s0.x.x.rebased215", %"produce blur_x226"
  br i1 %100, label %"for blur_y.s0.x.x.rebased228.preheader", label %"end for blur_y.s0.x.x.rebased229", !prof !386

"for blur_y.s0.x.x.rebased228.preheader":         ; preds = %after_bb223
  %4522 = sext i32 %t1694 to i64
  %4523 = zext i32 %.pre-phi3475 to i64
  %4524 = mul nsw i64 %4523, %112
  %4525 = sub nsw i64 %4524, %96
  %4526 = zext i32 %.pre-phi3469 to i64
  %4527 = mul nsw i64 %4526, %112
  %4528 = sub nsw i64 %4527, %96
  %4529 = zext i32 %.pre-phi to i64
  %4530 = mul nsw i64 %4529, %112
  %4531 = sub nsw i64 %4530, %96
  %4532 = zext i32 %.pre-phi3449 to i64
  %4533 = mul nsw i64 %4532, %112
  %4534 = sub nsw i64 %4533, %96
  %4535 = zext i32 %.pre-phi3445 to i64
  %4536 = mul nsw i64 %4535, %112
  %4537 = sub nsw i64 %4536, %96
  %4538 = sext i32 %a26 to i64
  %4539 = add nsw i64 %4538, 6
  %4540 = mul nsw i64 %4539, %113
  %4541 = add nsw i64 %4540, %116
  br label %"for blur_y.s0.x.x.rebased228"

"produce blur_x226":                              ; preds = %"end for blur_y.s0.x.x.rebased215"
  %4542 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %4543 = getelementptr inbounds i16, i16* %4542, i64 -31
  %4544 = bitcast i16* %4543 to <16 x i16>*
  %4545 = load <16 x i16>, <16 x i16>* %4544, align 2, !tbaa !396
  %4546 = getelementptr inbounds i16, i16* %4542, i64 -15
  %4547 = bitcast i16* %4546 to <16 x i16>*
  %4548 = load <16 x i16>, <16 x i16>* %4547, align 2, !tbaa !396
  %4549 = getelementptr inbounds i16, i16* %4542, i64 -32
  %4550 = bitcast i16* %4549 to <16 x i16>*
  %4551 = load <16 x i16>, <16 x i16>* %4550, align 2, !tbaa !396
  %4552 = getelementptr inbounds i16, i16* %4542, i64 -16
  %4553 = bitcast i16* %4552 to <16 x i16>*
  %4554 = load <16 x i16>, <16 x i16>* %4553, align 2, !tbaa !396
  %4555 = getelementptr inbounds i16, i16* %4542, i64 -30
  %4556 = bitcast i16* %4555 to <16 x i16>*
  %4557 = load <16 x i16>, <16 x i16>* %4556, align 2, !tbaa !396
  %4558 = getelementptr inbounds i16, i16* %4542, i64 -14
  %4559 = bitcast i16* %4558 to <16 x i16>*
  %4560 = load <16 x i16>, <16 x i16>* %4559, align 2, !tbaa !396
  %4561 = getelementptr inbounds i16, i16* %4542, i64 -28
  %4562 = bitcast i16* %4561 to <16 x i16>*
  %4563 = load <16 x i16>, <16 x i16>* %4562, align 2, !tbaa !396
  %4564 = getelementptr inbounds i16, i16* %4542, i64 -12
  %4565 = bitcast i16* %4564 to <16 x i16>*
  %4566 = load <16 x i16>, <16 x i16>* %4565, align 2, !tbaa !396
  %4567 = getelementptr inbounds i16, i16* %4542, i64 -29
  %4568 = bitcast i16* %4567 to <16 x i16>*
  %4569 = load <16 x i16>, <16 x i16>* %4568, align 2, !tbaa !396
  %4570 = getelementptr inbounds i16, i16* %4542, i64 -13
  %4571 = bitcast i16* %4570 to <16 x i16>*
  %4572 = load <16 x i16>, <16 x i16>* %4571, align 2, !tbaa !396
  %4573 = add <16 x i16> %4551, %4545
  %4574 = add <16 x i16> %4573, %4557
  %4575 = add <16 x i16> %4574, %4563
  %4576 = add <16 x i16> %4575, %4569
  %4577 = add <16 x i16> %4554, %4548
  %4578 = add <16 x i16> %4577, %4560
  %4579 = add <16 x i16> %4578, %4566
  %4580 = add <16 x i16> %4579, %4572
  %4581 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4576, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4580, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4583 = shufflevector <16 x i16> %4581, <16 x i16> %4582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4584 = lshr <32 x i16> %4583, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4585 = shufflevector <32 x i16> %4584, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4586 = zext i32 %.pre-phi3449 to i64
  %4587 = mul nsw i64 %97, %4586
  %4588 = add nsw i64 %99, %4587
  %4589 = getelementptr inbounds i16, i16* %blur_x, i64 %4588
  %4590 = getelementptr inbounds i16, i16* %4589, i64 -32
  %4591 = bitcast i16* %4590 to <16 x i16>*
  store <16 x i16> %4585, <16 x i16>* %4591, align 2, !tbaa !399
  %4592 = shufflevector <32 x i16> %4584, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4593 = getelementptr inbounds i16, i16* %4589, i64 -16
  %4594 = bitcast i16* %4593 to <16 x i16>*
  store <16 x i16> %4592, <16 x i16>* %4594, align 2, !tbaa !399
  %4595 = zext i32 %.pre-phi3475 to i64
  %4596 = mul nsw i64 %4595, %112
  %4597 = add nsw i64 %4596, %94
  %4598 = getelementptr inbounds i16, i16* %blur_x, i64 %4597
  %4599 = getelementptr inbounds i16, i16* %4598, i64 -32
  %4600 = bitcast i16* %4599 to <16 x i16>*
  %4601 = load <16 x i16>, <16 x i16>* %4600, align 2, !tbaa !399
  %4602 = getelementptr inbounds i16, i16* %4598, i64 -16
  %4603 = bitcast i16* %4602 to <16 x i16>*
  %4604 = load <16 x i16>, <16 x i16>* %4603, align 2, !tbaa !399
  %4605 = zext i32 %.pre-phi3469 to i64
  %4606 = mul nsw i64 %4605, %112
  %4607 = add nsw i64 %4606, %94
  %4608 = getelementptr inbounds i16, i16* %blur_x, i64 %4607
  %4609 = getelementptr inbounds i16, i16* %4608, i64 -32
  %4610 = bitcast i16* %4609 to <16 x i16>*
  %4611 = load <16 x i16>, <16 x i16>* %4610, align 2, !tbaa !399
  %4612 = getelementptr inbounds i16, i16* %4608, i64 -16
  %4613 = bitcast i16* %4612 to <16 x i16>*
  %4614 = load <16 x i16>, <16 x i16>* %4613, align 2, !tbaa !399
  %4615 = zext i32 %.pre-phi to i64
  %4616 = mul nsw i64 %4615, %112
  %4617 = add nsw i64 %4616, %94
  %4618 = getelementptr inbounds i16, i16* %blur_x, i64 %4617
  %4619 = getelementptr inbounds i16, i16* %4618, i64 -32
  %4620 = bitcast i16* %4619 to <16 x i16>*
  %4621 = load <16 x i16>, <16 x i16>* %4620, align 2, !tbaa !399
  %4622 = getelementptr inbounds i16, i16* %4618, i64 -16
  %4623 = bitcast i16* %4622 to <16 x i16>*
  %4624 = load <16 x i16>, <16 x i16>* %4623, align 2, !tbaa !399
  %4625 = mul nsw i64 %4586, %112
  %4626 = add nsw i64 %4625, %94
  %4627 = getelementptr inbounds i16, i16* %blur_x, i64 %4626
  %4628 = getelementptr inbounds i16, i16* %4627, i64 -32
  %4629 = bitcast i16* %4628 to <16 x i16>*
  %4630 = load <16 x i16>, <16 x i16>* %4629, align 2, !tbaa !399
  %4631 = getelementptr inbounds i16, i16* %4627, i64 -16
  %4632 = bitcast i16* %4631 to <16 x i16>*
  %4633 = load <16 x i16>, <16 x i16>* %4632, align 2, !tbaa !399
  %4634 = zext i32 %.pre-phi3445 to i64
  %4635 = mul nsw i64 %4634, %112
  %4636 = add nsw i64 %4635, %94
  %4637 = getelementptr inbounds i16, i16* %blur_x, i64 %4636
  %4638 = getelementptr inbounds i16, i16* %4637, i64 -32
  %4639 = bitcast i16* %4638 to <16 x i16>*
  %4640 = load <16 x i16>, <16 x i16>* %4639, align 2, !tbaa !399
  %4641 = getelementptr inbounds i16, i16* %4637, i64 -16
  %4642 = bitcast i16* %4641 to <16 x i16>*
  %4643 = load <16 x i16>, <16 x i16>* %4642, align 2, !tbaa !399
  %4644 = add <16 x i16> %4611, %4601
  %4645 = add <16 x i16> %4644, %4621
  %4646 = add <16 x i16> %4645, %4630
  %4647 = add <16 x i16> %4646, %4640
  %4648 = add <16 x i16> %4614, %4604
  %4649 = add <16 x i16> %4648, %4624
  %4650 = add <16 x i16> %4649, %4633
  %4651 = add <16 x i16> %4650, %4643
  %4652 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4647, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4653 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4651, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4654 = shufflevector <16 x i16> %4652, <16 x i16> %4653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4655 = lshr <32 x i16> %4654, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4656 = shufflevector <32 x i16> %4655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4657 = sext i32 %a26 to i64
  %4658 = add nsw i64 %4657, 6
  %4659 = mul nsw i64 %4658, %113
  %4660 = add nsw i64 %115, %4659
  %4661 = getelementptr inbounds i16, i16* %66, i64 %4660
  %4662 = getelementptr inbounds i16, i16* %4661, i64 -32
  %4663 = bitcast i16* %4662 to <16 x i16>*
  store <16 x i16> %4656, <16 x i16>* %4663, align 2, !tbaa !401
  %4664 = shufflevector <32 x i16> %4655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4665 = getelementptr inbounds i16, i16* %4661, i64 -16
  %4666 = bitcast i16* %4665 to <16 x i16>*
  store <16 x i16> %4664, <16 x i16>* %4666, align 2, !tbaa !401
  br label %after_bb223

"for blur_y.s0.x.x.rebased228":                   ; preds = %"for blur_y.s0.x.x.rebased228.preheader", %"consume blur_x235"
  %indvars.iv3277 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased228.preheader" ], [ %indvars.iv.next3278, %"consume blur_x235" ]
  %4667 = add nsw i64 %indvars.iv3277, %101
  %4668 = icmp slt i64 %4667, 1
  %4669 = trunc i64 %4667 to i32
  %4670 = shl nsw i32 %4669, 5
  %4671 = icmp sgt i32 %4, %4670
  %4672 = or i1 %4668, %4671
  br i1 %4672, label %"produce blur_x234", label %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge"

"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased228"
  %.pre3482 = shl nsw i64 %4667, 5
  br label %"consume blur_x235"

"end for blur_y.s0.x.x.rebased229":               ; preds = %"consume blur_x235", %after_bb223
  br i1 %102, label %"for blur_y.s0.x.x.rebased236.preheader", label %"end for blur_y.s0.x.x.rebased237", !prof !386

"for blur_y.s0.x.x.rebased236.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased229"
  %4673 = sext i32 %t1694 to i64
  %4674 = zext i32 %.pre-phi3475 to i64
  %4675 = mul nsw i64 %4674, %112
  %4676 = sub nsw i64 %4675, %96
  %4677 = zext i32 %.pre-phi3469 to i64
  %4678 = mul nsw i64 %4677, %112
  %4679 = sub nsw i64 %4678, %96
  %4680 = zext i32 %.pre-phi to i64
  %4681 = mul nsw i64 %4680, %112
  %4682 = sub nsw i64 %4681, %96
  %4683 = zext i32 %.pre-phi3449 to i64
  %4684 = mul nsw i64 %4683, %112
  %4685 = sub nsw i64 %4684, %96
  %4686 = zext i32 %.pre-phi3445 to i64
  %4687 = mul nsw i64 %4686, %112
  %4688 = sub nsw i64 %4687, %96
  %4689 = sext i32 %a26 to i64
  %4690 = add nsw i64 %4689, 6
  %4691 = mul nsw i64 %4690, %113
  %4692 = add nsw i64 %4691, %116
  br label %"for blur_y.s0.x.x.rebased236"

"produce blur_x234":                              ; preds = %"for blur_y.s0.x.x.rebased228"
  %t808 = add nsw i32 %4670, %t1801
  %4693 = sext i32 %t808 to i64
  %4694 = getelementptr inbounds i16, i16* %read_input, i64 %4693
  %4695 = getelementptr inbounds i16, i16* %4694, i64 1
  %4696 = bitcast i16* %4695 to <16 x i16>*
  %4697 = load <16 x i16>, <16 x i16>* %4696, align 2, !tbaa !396
  %4698 = getelementptr inbounds i16, i16* %4694, i64 17
  %4699 = bitcast i16* %4698 to <16 x i16>*
  %4700 = load <16 x i16>, <16 x i16>* %4699, align 2, !tbaa !396
  %4701 = bitcast i16* %4694 to <16 x i16>*
  %4702 = load <16 x i16>, <16 x i16>* %4701, align 2, !tbaa !396
  %4703 = getelementptr inbounds i16, i16* %4694, i64 16
  %4704 = bitcast i16* %4703 to <16 x i16>*
  %4705 = load <16 x i16>, <16 x i16>* %4704, align 2, !tbaa !396
  %4706 = getelementptr inbounds i16, i16* %4694, i64 2
  %4707 = bitcast i16* %4706 to <16 x i16>*
  %4708 = load <16 x i16>, <16 x i16>* %4707, align 2, !tbaa !396
  %4709 = getelementptr inbounds i16, i16* %4694, i64 18
  %4710 = bitcast i16* %4709 to <16 x i16>*
  %4711 = load <16 x i16>, <16 x i16>* %4710, align 2, !tbaa !396
  %4712 = getelementptr inbounds i16, i16* %4694, i64 4
  %4713 = bitcast i16* %4712 to <16 x i16>*
  %4714 = load <16 x i16>, <16 x i16>* %4713, align 2, !tbaa !396
  %4715 = getelementptr inbounds i16, i16* %4694, i64 20
  %4716 = bitcast i16* %4715 to <16 x i16>*
  %4717 = load <16 x i16>, <16 x i16>* %4716, align 2, !tbaa !396
  %4718 = getelementptr inbounds i16, i16* %4694, i64 3
  %4719 = bitcast i16* %4718 to <16 x i16>*
  %4720 = load <16 x i16>, <16 x i16>* %4719, align 2, !tbaa !396
  %4721 = getelementptr inbounds i16, i16* %4694, i64 19
  %4722 = bitcast i16* %4721 to <16 x i16>*
  %4723 = load <16 x i16>, <16 x i16>* %4722, align 2, !tbaa !396
  %4724 = add <16 x i16> %4702, %4697
  %4725 = add <16 x i16> %4724, %4708
  %4726 = add <16 x i16> %4725, %4714
  %4727 = add <16 x i16> %4726, %4720
  %4728 = add <16 x i16> %4705, %4700
  %4729 = add <16 x i16> %4728, %4711
  %4730 = add <16 x i16> %4729, %4717
  %4731 = add <16 x i16> %4730, %4723
  %4732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4727, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4731, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4734 = shufflevector <16 x i16> %4732, <16 x i16> %4733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4735 = lshr <32 x i16> %4734, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4736 = shufflevector <32 x i16> %4735, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4737 = shl nsw i64 %4667, 5
  %4738 = add nsw i64 %4737, %4522
  %4739 = getelementptr inbounds i16, i16* %blur_x, i64 %4738
  %4740 = bitcast i16* %4739 to <16 x i16>*
  store <16 x i16> %4736, <16 x i16>* %4740, align 2, !tbaa !399
  %4741 = shufflevector <32 x i16> %4735, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4742 = getelementptr inbounds i16, i16* %4739, i64 16
  %4743 = bitcast i16* %4742 to <16 x i16>*
  store <16 x i16> %4741, <16 x i16>* %4743, align 2, !tbaa !399
  br label %"consume blur_x235"

"consume blur_x235":                              ; preds = %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge", %"produce blur_x234"
  %.pre-phi3483 = phi i64 [ %.pre3482, %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge" ], [ %4737, %"produce blur_x234" ]
  %4744 = add nsw i64 %4525, %.pre-phi3483
  %4745 = getelementptr inbounds i16, i16* %blur_x, i64 %4744
  %4746 = bitcast i16* %4745 to <16 x i16>*
  %4747 = load <16 x i16>, <16 x i16>* %4746, align 2, !tbaa !399
  %4748 = getelementptr inbounds i16, i16* %4745, i64 16
  %4749 = bitcast i16* %4748 to <16 x i16>*
  %4750 = load <16 x i16>, <16 x i16>* %4749, align 2, !tbaa !399
  %4751 = add nsw i64 %4528, %.pre-phi3483
  %4752 = getelementptr inbounds i16, i16* %blur_x, i64 %4751
  %4753 = bitcast i16* %4752 to <16 x i16>*
  %4754 = load <16 x i16>, <16 x i16>* %4753, align 2, !tbaa !399
  %4755 = getelementptr inbounds i16, i16* %4752, i64 16
  %4756 = bitcast i16* %4755 to <16 x i16>*
  %4757 = load <16 x i16>, <16 x i16>* %4756, align 2, !tbaa !399
  %4758 = add nsw i64 %4531, %.pre-phi3483
  %4759 = getelementptr inbounds i16, i16* %blur_x, i64 %4758
  %4760 = bitcast i16* %4759 to <16 x i16>*
  %4761 = load <16 x i16>, <16 x i16>* %4760, align 2, !tbaa !399
  %4762 = getelementptr inbounds i16, i16* %4759, i64 16
  %4763 = bitcast i16* %4762 to <16 x i16>*
  %4764 = load <16 x i16>, <16 x i16>* %4763, align 2, !tbaa !399
  %4765 = add nsw i64 %4534, %.pre-phi3483
  %4766 = getelementptr inbounds i16, i16* %blur_x, i64 %4765
  %4767 = bitcast i16* %4766 to <16 x i16>*
  %4768 = load <16 x i16>, <16 x i16>* %4767, align 2, !tbaa !399
  %4769 = getelementptr inbounds i16, i16* %4766, i64 16
  %4770 = bitcast i16* %4769 to <16 x i16>*
  %4771 = load <16 x i16>, <16 x i16>* %4770, align 2, !tbaa !399
  %4772 = add nsw i64 %4537, %.pre-phi3483
  %4773 = getelementptr inbounds i16, i16* %blur_x, i64 %4772
  %4774 = bitcast i16* %4773 to <16 x i16>*
  %4775 = load <16 x i16>, <16 x i16>* %4774, align 2, !tbaa !399
  %4776 = getelementptr inbounds i16, i16* %4773, i64 16
  %4777 = bitcast i16* %4776 to <16 x i16>*
  %4778 = load <16 x i16>, <16 x i16>* %4777, align 2, !tbaa !399
  %4779 = add <16 x i16> %4754, %4747
  %4780 = add <16 x i16> %4779, %4761
  %4781 = add <16 x i16> %4780, %4768
  %4782 = add <16 x i16> %4781, %4775
  %4783 = add <16 x i16> %4757, %4750
  %4784 = add <16 x i16> %4783, %4764
  %4785 = add <16 x i16> %4784, %4771
  %4786 = add <16 x i16> %4785, %4778
  %4787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4782, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4786, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4789 = shufflevector <16 x i16> %4787, <16 x i16> %4788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4790 = lshr <32 x i16> %4789, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4791 = shufflevector <32 x i16> %4790, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4792 = add nsw i64 %4541, %.pre-phi3483
  %4793 = getelementptr inbounds i16, i16* %66, i64 %4792
  %4794 = bitcast i16* %4793 to <16 x i16>*
  store <16 x i16> %4791, <16 x i16>* %4794, align 2, !tbaa !401
  %4795 = shufflevector <32 x i16> %4790, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4796 = getelementptr inbounds i16, i16* %4793, i64 16
  %4797 = bitcast i16* %4796 to <16 x i16>*
  store <16 x i16> %4795, <16 x i16>* %4797, align 2, !tbaa !401
  %indvars.iv.next3278 = add nuw nsw i64 %indvars.iv3277, 1
  %.not2745 = icmp eq i64 %indvars.iv.next3278, %184
  br i1 %.not2745, label %"end for blur_y.s0.x.x.rebased229", label %"for blur_y.s0.x.x.rebased228"

"for blur_y.s0.x.x.rebased236":                   ; preds = %"for blur_y.s0.x.x.rebased236.preheader", %"consume blur_x244"
  %blur_y.s0.x.x.rebased238 = phi i32 [ %4910, %"consume blur_x244" ], [ 0, %"for blur_y.s0.x.x.rebased236.preheader" ]
  %4798 = add nsw i32 %blur_y.s0.x.x.rebased238, %t1626
  %a147 = shl nsw i32 %4798, 5
  %4799 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %4799, i32 %a147, i32 %a14
  %4800 = icmp slt i32 %4798, 1
  %4801 = icmp sgt i32 %4, %a147
  %4802 = or i1 %4800, %4801
  br i1 %4802, label %"produce blur_x242", label %"consume blur_x244"

"end for blur_y.s0.x.x.rebased237":               ; preds = %"consume blur_x244", %"end for blur_y.s0.x.x.rebased229"
  br i1 %34, label %"produce blur_x248", label %after_bb245

"produce blur_x242":                              ; preds = %"for blur_y.s0.x.x.rebased236"
  %4803 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s243 = select i1 %4803, i32 %b153, i32 %4
  %t813 = add nsw i32 %blur_x.s0.x.v1.base.s243, %t1801
  %4804 = sext i32 %t813 to i64
  %4805 = getelementptr inbounds i16, i16* %read_input, i64 %4804
  %4806 = getelementptr inbounds i16, i16* %4805, i64 1
  %4807 = bitcast i16* %4806 to <16 x i16>*
  %4808 = load <16 x i16>, <16 x i16>* %4807, align 2, !tbaa !396
  %4809 = getelementptr inbounds i16, i16* %4805, i64 17
  %4810 = bitcast i16* %4809 to <16 x i16>*
  %4811 = load <16 x i16>, <16 x i16>* %4810, align 2, !tbaa !396
  %4812 = bitcast i16* %4805 to <16 x i16>*
  %4813 = load <16 x i16>, <16 x i16>* %4812, align 2, !tbaa !396
  %4814 = getelementptr inbounds i16, i16* %4805, i64 16
  %4815 = bitcast i16* %4814 to <16 x i16>*
  %4816 = load <16 x i16>, <16 x i16>* %4815, align 2, !tbaa !396
  %4817 = getelementptr inbounds i16, i16* %4805, i64 2
  %4818 = bitcast i16* %4817 to <16 x i16>*
  %4819 = load <16 x i16>, <16 x i16>* %4818, align 2, !tbaa !396
  %4820 = getelementptr inbounds i16, i16* %4805, i64 18
  %4821 = bitcast i16* %4820 to <16 x i16>*
  %4822 = load <16 x i16>, <16 x i16>* %4821, align 2, !tbaa !396
  %4823 = getelementptr inbounds i16, i16* %4805, i64 4
  %4824 = bitcast i16* %4823 to <16 x i16>*
  %4825 = load <16 x i16>, <16 x i16>* %4824, align 2, !tbaa !396
  %4826 = getelementptr inbounds i16, i16* %4805, i64 20
  %4827 = bitcast i16* %4826 to <16 x i16>*
  %4828 = load <16 x i16>, <16 x i16>* %4827, align 2, !tbaa !396
  %4829 = getelementptr inbounds i16, i16* %4805, i64 3
  %4830 = bitcast i16* %4829 to <16 x i16>*
  %4831 = load <16 x i16>, <16 x i16>* %4830, align 2, !tbaa !396
  %4832 = getelementptr inbounds i16, i16* %4805, i64 19
  %4833 = bitcast i16* %4832 to <16 x i16>*
  %4834 = load <16 x i16>, <16 x i16>* %4833, align 2, !tbaa !396
  %4835 = add <16 x i16> %4813, %4808
  %4836 = add <16 x i16> %4835, %4819
  %4837 = add <16 x i16> %4836, %4825
  %4838 = add <16 x i16> %4837, %4831
  %4839 = add <16 x i16> %4816, %4811
  %4840 = add <16 x i16> %4839, %4822
  %4841 = add <16 x i16> %4840, %4828
  %4842 = add <16 x i16> %4841, %4834
  %4843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4838, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4842, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4845 = shufflevector <16 x i16> %4843, <16 x i16> %4844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4846 = lshr <32 x i16> %4845, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4847 = shufflevector <32 x i16> %4846, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4848 = sext i32 %blur_x.s0.x.v1.base.s243 to i64
  %4849 = add nsw i64 %4848, %4673
  %4850 = getelementptr inbounds i16, i16* %blur_x, i64 %4849
  %4851 = bitcast i16* %4850 to <16 x i16>*
  store <16 x i16> %4847, <16 x i16>* %4851, align 2, !tbaa !399
  %4852 = shufflevector <32 x i16> %4846, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4853 = getelementptr inbounds i16, i16* %4850, i64 16
  %4854 = bitcast i16* %4853 to <16 x i16>*
  store <16 x i16> %4852, <16 x i16>* %4854, align 2, !tbaa !399
  br label %"consume blur_x244"

"consume blur_x244":                              ; preds = %"for blur_y.s0.x.x.rebased236", %"produce blur_x242"
  %4855 = sext i32 %b153 to i64
  %4856 = add nsw i64 %4676, %4855
  %4857 = getelementptr inbounds i16, i16* %blur_x, i64 %4856
  %4858 = bitcast i16* %4857 to <16 x i16>*
  %4859 = load <16 x i16>, <16 x i16>* %4858, align 2, !tbaa !399
  %4860 = getelementptr inbounds i16, i16* %4857, i64 16
  %4861 = bitcast i16* %4860 to <16 x i16>*
  %4862 = load <16 x i16>, <16 x i16>* %4861, align 2, !tbaa !399
  %4863 = add nsw i64 %4679, %4855
  %4864 = getelementptr inbounds i16, i16* %blur_x, i64 %4863
  %4865 = bitcast i16* %4864 to <16 x i16>*
  %4866 = load <16 x i16>, <16 x i16>* %4865, align 2, !tbaa !399
  %4867 = getelementptr inbounds i16, i16* %4864, i64 16
  %4868 = bitcast i16* %4867 to <16 x i16>*
  %4869 = load <16 x i16>, <16 x i16>* %4868, align 2, !tbaa !399
  %4870 = add nsw i64 %4682, %4855
  %4871 = getelementptr inbounds i16, i16* %blur_x, i64 %4870
  %4872 = bitcast i16* %4871 to <16 x i16>*
  %4873 = load <16 x i16>, <16 x i16>* %4872, align 2, !tbaa !399
  %4874 = getelementptr inbounds i16, i16* %4871, i64 16
  %4875 = bitcast i16* %4874 to <16 x i16>*
  %4876 = load <16 x i16>, <16 x i16>* %4875, align 2, !tbaa !399
  %4877 = add nsw i64 %4685, %4855
  %4878 = getelementptr inbounds i16, i16* %blur_x, i64 %4877
  %4879 = bitcast i16* %4878 to <16 x i16>*
  %4880 = load <16 x i16>, <16 x i16>* %4879, align 2, !tbaa !399
  %4881 = getelementptr inbounds i16, i16* %4878, i64 16
  %4882 = bitcast i16* %4881 to <16 x i16>*
  %4883 = load <16 x i16>, <16 x i16>* %4882, align 2, !tbaa !399
  %4884 = add nsw i64 %4688, %4855
  %4885 = getelementptr inbounds i16, i16* %blur_x, i64 %4884
  %4886 = bitcast i16* %4885 to <16 x i16>*
  %4887 = load <16 x i16>, <16 x i16>* %4886, align 2, !tbaa !399
  %4888 = getelementptr inbounds i16, i16* %4885, i64 16
  %4889 = bitcast i16* %4888 to <16 x i16>*
  %4890 = load <16 x i16>, <16 x i16>* %4889, align 2, !tbaa !399
  %4891 = add <16 x i16> %4866, %4859
  %4892 = add <16 x i16> %4891, %4873
  %4893 = add <16 x i16> %4892, %4880
  %4894 = add <16 x i16> %4893, %4887
  %4895 = add <16 x i16> %4869, %4862
  %4896 = add <16 x i16> %4895, %4876
  %4897 = add <16 x i16> %4896, %4883
  %4898 = add <16 x i16> %4897, %4890
  %4899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4894, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4898, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4901 = shufflevector <16 x i16> %4899, <16 x i16> %4900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4902 = lshr <32 x i16> %4901, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4903 = shufflevector <32 x i16> %4902, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4904 = add nsw i64 %4692, %4855
  %4905 = getelementptr inbounds i16, i16* %66, i64 %4904
  %4906 = bitcast i16* %4905 to <16 x i16>*
  store <16 x i16> %4903, <16 x i16>* %4906, align 2, !tbaa !401
  %4907 = shufflevector <32 x i16> %4902, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4908 = getelementptr inbounds i16, i16* %4905, i64 16
  %4909 = bitcast i16* %4908 to <16 x i16>*
  store <16 x i16> %4907, <16 x i16>* %4909, align 2, !tbaa !401
  %4910 = add nuw nsw i32 %blur_y.s0.x.x.rebased238, 1
  %.not2744 = icmp eq i32 %4910, %t1683
  br i1 %.not2744, label %"end for blur_y.s0.x.x.rebased237", label %"for blur_y.s0.x.x.rebased236"

after_bb245:                                      ; preds = %"end for blur_y.s0.x.x.rebased237", %"produce blur_x248"
  br i1 %100, label %"for blur_y.s0.x.x.rebased250.preheader", label %"end for blur_y.s0.x.x.rebased251", !prof !386

"for blur_y.s0.x.x.rebased250.preheader":         ; preds = %after_bb245
  %4911 = sext i32 %t1700 to i64
  %4912 = zext i32 %.pre-phi to i64
  %4913 = mul nsw i64 %4912, %112
  %4914 = sub nsw i64 %4913, %96
  %4915 = zext i32 %.pre-phi3475 to i64
  %4916 = mul nsw i64 %4915, %112
  %4917 = sub nsw i64 %4916, %96
  %4918 = zext i32 %.pre-phi3445 to i64
  %4919 = mul nsw i64 %4918, %112
  %4920 = sub nsw i64 %4919, %96
  %4921 = zext i32 %.pre-phi3453 to i64
  %4922 = mul nsw i64 %4921, %112
  %4923 = sub nsw i64 %4922, %96
  %4924 = zext i32 %.pre-phi3449 to i64
  %4925 = mul nsw i64 %4924, %112
  %4926 = sub nsw i64 %4925, %96
  %4927 = sext i32 %a26 to i64
  %4928 = add nsw i64 %4927, 7
  %4929 = mul nsw i64 %4928, %113
  %4930 = add nsw i64 %4929, %116
  br label %"for blur_y.s0.x.x.rebased250"

"produce blur_x248":                              ; preds = %"end for blur_y.s0.x.x.rebased237"
  %4931 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %4932 = getelementptr inbounds i16, i16* %4931, i64 -31
  %4933 = bitcast i16* %4932 to <16 x i16>*
  %4934 = load <16 x i16>, <16 x i16>* %4933, align 2, !tbaa !396
  %4935 = getelementptr inbounds i16, i16* %4931, i64 -15
  %4936 = bitcast i16* %4935 to <16 x i16>*
  %4937 = load <16 x i16>, <16 x i16>* %4936, align 2, !tbaa !396
  %4938 = getelementptr inbounds i16, i16* %4931, i64 -32
  %4939 = bitcast i16* %4938 to <16 x i16>*
  %4940 = load <16 x i16>, <16 x i16>* %4939, align 2, !tbaa !396
  %4941 = getelementptr inbounds i16, i16* %4931, i64 -16
  %4942 = bitcast i16* %4941 to <16 x i16>*
  %4943 = load <16 x i16>, <16 x i16>* %4942, align 2, !tbaa !396
  %4944 = getelementptr inbounds i16, i16* %4931, i64 -30
  %4945 = bitcast i16* %4944 to <16 x i16>*
  %4946 = load <16 x i16>, <16 x i16>* %4945, align 2, !tbaa !396
  %4947 = getelementptr inbounds i16, i16* %4931, i64 -14
  %4948 = bitcast i16* %4947 to <16 x i16>*
  %4949 = load <16 x i16>, <16 x i16>* %4948, align 2, !tbaa !396
  %4950 = getelementptr inbounds i16, i16* %4931, i64 -28
  %4951 = bitcast i16* %4950 to <16 x i16>*
  %4952 = load <16 x i16>, <16 x i16>* %4951, align 2, !tbaa !396
  %4953 = getelementptr inbounds i16, i16* %4931, i64 -12
  %4954 = bitcast i16* %4953 to <16 x i16>*
  %4955 = load <16 x i16>, <16 x i16>* %4954, align 2, !tbaa !396
  %4956 = getelementptr inbounds i16, i16* %4931, i64 -29
  %4957 = bitcast i16* %4956 to <16 x i16>*
  %4958 = load <16 x i16>, <16 x i16>* %4957, align 2, !tbaa !396
  %4959 = getelementptr inbounds i16, i16* %4931, i64 -13
  %4960 = bitcast i16* %4959 to <16 x i16>*
  %4961 = load <16 x i16>, <16 x i16>* %4960, align 2, !tbaa !396
  %4962 = add <16 x i16> %4940, %4934
  %4963 = add <16 x i16> %4962, %4946
  %4964 = add <16 x i16> %4963, %4952
  %4965 = add <16 x i16> %4964, %4958
  %4966 = add <16 x i16> %4943, %4937
  %4967 = add <16 x i16> %4966, %4949
  %4968 = add <16 x i16> %4967, %4955
  %4969 = add <16 x i16> %4968, %4961
  %4970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4965, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4969, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4972 = shufflevector <16 x i16> %4970, <16 x i16> %4971, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4973 = lshr <32 x i16> %4972, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4974 = shufflevector <32 x i16> %4973, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4975 = zext i32 %.pre-phi3453 to i64
  %4976 = mul nsw i64 %97, %4975
  %4977 = add nsw i64 %99, %4976
  %4978 = getelementptr inbounds i16, i16* %blur_x, i64 %4977
  %4979 = getelementptr inbounds i16, i16* %4978, i64 -32
  %4980 = bitcast i16* %4979 to <16 x i16>*
  store <16 x i16> %4974, <16 x i16>* %4980, align 2, !tbaa !399
  %4981 = shufflevector <32 x i16> %4973, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4982 = getelementptr inbounds i16, i16* %4978, i64 -16
  %4983 = bitcast i16* %4982 to <16 x i16>*
  store <16 x i16> %4981, <16 x i16>* %4983, align 2, !tbaa !399
  %4984 = zext i32 %.pre-phi to i64
  %4985 = mul nsw i64 %4984, %112
  %4986 = add nsw i64 %4985, %94
  %4987 = getelementptr inbounds i16, i16* %blur_x, i64 %4986
  %4988 = getelementptr inbounds i16, i16* %4987, i64 -32
  %4989 = bitcast i16* %4988 to <16 x i16>*
  %4990 = load <16 x i16>, <16 x i16>* %4989, align 2, !tbaa !399
  %4991 = getelementptr inbounds i16, i16* %4987, i64 -16
  %4992 = bitcast i16* %4991 to <16 x i16>*
  %4993 = load <16 x i16>, <16 x i16>* %4992, align 2, !tbaa !399
  %4994 = zext i32 %.pre-phi3475 to i64
  %4995 = mul nsw i64 %4994, %112
  %4996 = add nsw i64 %4995, %94
  %4997 = getelementptr inbounds i16, i16* %blur_x, i64 %4996
  %4998 = getelementptr inbounds i16, i16* %4997, i64 -32
  %4999 = bitcast i16* %4998 to <16 x i16>*
  %5000 = load <16 x i16>, <16 x i16>* %4999, align 2, !tbaa !399
  %5001 = getelementptr inbounds i16, i16* %4997, i64 -16
  %5002 = bitcast i16* %5001 to <16 x i16>*
  %5003 = load <16 x i16>, <16 x i16>* %5002, align 2, !tbaa !399
  %5004 = zext i32 %.pre-phi3445 to i64
  %5005 = mul nsw i64 %5004, %112
  %5006 = add nsw i64 %5005, %94
  %5007 = getelementptr inbounds i16, i16* %blur_x, i64 %5006
  %5008 = getelementptr inbounds i16, i16* %5007, i64 -32
  %5009 = bitcast i16* %5008 to <16 x i16>*
  %5010 = load <16 x i16>, <16 x i16>* %5009, align 2, !tbaa !399
  %5011 = getelementptr inbounds i16, i16* %5007, i64 -16
  %5012 = bitcast i16* %5011 to <16 x i16>*
  %5013 = load <16 x i16>, <16 x i16>* %5012, align 2, !tbaa !399
  %5014 = mul nsw i64 %4975, %112
  %5015 = add nsw i64 %5014, %94
  %5016 = getelementptr inbounds i16, i16* %blur_x, i64 %5015
  %5017 = getelementptr inbounds i16, i16* %5016, i64 -32
  %5018 = bitcast i16* %5017 to <16 x i16>*
  %5019 = load <16 x i16>, <16 x i16>* %5018, align 2, !tbaa !399
  %5020 = getelementptr inbounds i16, i16* %5016, i64 -16
  %5021 = bitcast i16* %5020 to <16 x i16>*
  %5022 = load <16 x i16>, <16 x i16>* %5021, align 2, !tbaa !399
  %5023 = zext i32 %.pre-phi3449 to i64
  %5024 = mul nsw i64 %5023, %112
  %5025 = add nsw i64 %5024, %94
  %5026 = getelementptr inbounds i16, i16* %blur_x, i64 %5025
  %5027 = getelementptr inbounds i16, i16* %5026, i64 -32
  %5028 = bitcast i16* %5027 to <16 x i16>*
  %5029 = load <16 x i16>, <16 x i16>* %5028, align 2, !tbaa !399
  %5030 = getelementptr inbounds i16, i16* %5026, i64 -16
  %5031 = bitcast i16* %5030 to <16 x i16>*
  %5032 = load <16 x i16>, <16 x i16>* %5031, align 2, !tbaa !399
  %5033 = add <16 x i16> %5000, %4990
  %5034 = add <16 x i16> %5033, %5010
  %5035 = add <16 x i16> %5034, %5019
  %5036 = add <16 x i16> %5035, %5029
  %5037 = add <16 x i16> %5003, %4993
  %5038 = add <16 x i16> %5037, %5013
  %5039 = add <16 x i16> %5038, %5022
  %5040 = add <16 x i16> %5039, %5032
  %5041 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5036, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5042 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5040, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5043 = shufflevector <16 x i16> %5041, <16 x i16> %5042, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5044 = lshr <32 x i16> %5043, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5045 = shufflevector <32 x i16> %5044, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5046 = sext i32 %a26 to i64
  %5047 = add nsw i64 %5046, 7
  %5048 = mul nsw i64 %5047, %113
  %5049 = add nsw i64 %115, %5048
  %5050 = getelementptr inbounds i16, i16* %66, i64 %5049
  %5051 = getelementptr inbounds i16, i16* %5050, i64 -32
  %5052 = bitcast i16* %5051 to <16 x i16>*
  store <16 x i16> %5045, <16 x i16>* %5052, align 2, !tbaa !401
  %5053 = shufflevector <32 x i16> %5044, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5054 = getelementptr inbounds i16, i16* %5050, i64 -16
  %5055 = bitcast i16* %5054 to <16 x i16>*
  store <16 x i16> %5053, <16 x i16>* %5055, align 2, !tbaa !401
  br label %after_bb245

"for blur_y.s0.x.x.rebased250":                   ; preds = %"for blur_y.s0.x.x.rebased250.preheader", %"consume blur_x257"
  %indvars.iv3280 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased250.preheader" ], [ %indvars.iv.next3281, %"consume blur_x257" ]
  %5056 = add nsw i64 %indvars.iv3280, %101
  %5057 = icmp slt i64 %5056, 1
  %5058 = trunc i64 %5056 to i32
  %5059 = shl nsw i32 %5058, 5
  %5060 = icmp sgt i32 %4, %5059
  %5061 = or i1 %5057, %5060
  br i1 %5061, label %"produce blur_x256", label %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge"

"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased250"
  %.pre3484 = shl nsw i64 %5056, 5
  br label %"consume blur_x257"

"end for blur_y.s0.x.x.rebased251":               ; preds = %"consume blur_x257", %after_bb245
  br i1 %102, label %"for blur_y.s0.x.x.rebased258.preheader", label %"end for blur_y.s0.x.x.rebased259", !prof !386

"for blur_y.s0.x.x.rebased258.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased251"
  %5062 = sext i32 %t1700 to i64
  %5063 = zext i32 %.pre-phi to i64
  %5064 = mul nsw i64 %5063, %112
  %5065 = sub nsw i64 %5064, %96
  %5066 = zext i32 %.pre-phi3475 to i64
  %5067 = mul nsw i64 %5066, %112
  %5068 = sub nsw i64 %5067, %96
  %5069 = zext i32 %.pre-phi3445 to i64
  %5070 = mul nsw i64 %5069, %112
  %5071 = sub nsw i64 %5070, %96
  %5072 = zext i32 %.pre-phi3453 to i64
  %5073 = mul nsw i64 %5072, %112
  %5074 = sub nsw i64 %5073, %96
  %5075 = zext i32 %.pre-phi3449 to i64
  %5076 = mul nsw i64 %5075, %112
  %5077 = sub nsw i64 %5076, %96
  %5078 = sext i32 %a26 to i64
  %5079 = add nsw i64 %5078, 7
  %5080 = mul nsw i64 %5079, %113
  %5081 = add nsw i64 %5080, %116
  br label %"for blur_y.s0.x.x.rebased258"

"produce blur_x256":                              ; preds = %"for blur_y.s0.x.x.rebased250"
  %t824 = add nsw i32 %5059, %t1817
  %5082 = sext i32 %t824 to i64
  %5083 = getelementptr inbounds i16, i16* %read_input, i64 %5082
  %5084 = getelementptr inbounds i16, i16* %5083, i64 1
  %5085 = bitcast i16* %5084 to <16 x i16>*
  %5086 = load <16 x i16>, <16 x i16>* %5085, align 2, !tbaa !396
  %5087 = getelementptr inbounds i16, i16* %5083, i64 17
  %5088 = bitcast i16* %5087 to <16 x i16>*
  %5089 = load <16 x i16>, <16 x i16>* %5088, align 2, !tbaa !396
  %5090 = bitcast i16* %5083 to <16 x i16>*
  %5091 = load <16 x i16>, <16 x i16>* %5090, align 2, !tbaa !396
  %5092 = getelementptr inbounds i16, i16* %5083, i64 16
  %5093 = bitcast i16* %5092 to <16 x i16>*
  %5094 = load <16 x i16>, <16 x i16>* %5093, align 2, !tbaa !396
  %5095 = getelementptr inbounds i16, i16* %5083, i64 2
  %5096 = bitcast i16* %5095 to <16 x i16>*
  %5097 = load <16 x i16>, <16 x i16>* %5096, align 2, !tbaa !396
  %5098 = getelementptr inbounds i16, i16* %5083, i64 18
  %5099 = bitcast i16* %5098 to <16 x i16>*
  %5100 = load <16 x i16>, <16 x i16>* %5099, align 2, !tbaa !396
  %5101 = getelementptr inbounds i16, i16* %5083, i64 4
  %5102 = bitcast i16* %5101 to <16 x i16>*
  %5103 = load <16 x i16>, <16 x i16>* %5102, align 2, !tbaa !396
  %5104 = getelementptr inbounds i16, i16* %5083, i64 20
  %5105 = bitcast i16* %5104 to <16 x i16>*
  %5106 = load <16 x i16>, <16 x i16>* %5105, align 2, !tbaa !396
  %5107 = getelementptr inbounds i16, i16* %5083, i64 3
  %5108 = bitcast i16* %5107 to <16 x i16>*
  %5109 = load <16 x i16>, <16 x i16>* %5108, align 2, !tbaa !396
  %5110 = getelementptr inbounds i16, i16* %5083, i64 19
  %5111 = bitcast i16* %5110 to <16 x i16>*
  %5112 = load <16 x i16>, <16 x i16>* %5111, align 2, !tbaa !396
  %5113 = add <16 x i16> %5091, %5086
  %5114 = add <16 x i16> %5113, %5097
  %5115 = add <16 x i16> %5114, %5103
  %5116 = add <16 x i16> %5115, %5109
  %5117 = add <16 x i16> %5094, %5089
  %5118 = add <16 x i16> %5117, %5100
  %5119 = add <16 x i16> %5118, %5106
  %5120 = add <16 x i16> %5119, %5112
  %5121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5116, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5120, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5123 = shufflevector <16 x i16> %5121, <16 x i16> %5122, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5124 = lshr <32 x i16> %5123, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5125 = shufflevector <32 x i16> %5124, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5126 = shl nsw i64 %5056, 5
  %5127 = add nsw i64 %5126, %4911
  %5128 = getelementptr inbounds i16, i16* %blur_x, i64 %5127
  %5129 = bitcast i16* %5128 to <16 x i16>*
  store <16 x i16> %5125, <16 x i16>* %5129, align 2, !tbaa !399
  %5130 = shufflevector <32 x i16> %5124, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5131 = getelementptr inbounds i16, i16* %5128, i64 16
  %5132 = bitcast i16* %5131 to <16 x i16>*
  store <16 x i16> %5130, <16 x i16>* %5132, align 2, !tbaa !399
  br label %"consume blur_x257"

"consume blur_x257":                              ; preds = %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge", %"produce blur_x256"
  %.pre-phi3485 = phi i64 [ %.pre3484, %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge" ], [ %5126, %"produce blur_x256" ]
  %5133 = add nsw i64 %4914, %.pre-phi3485
  %5134 = getelementptr inbounds i16, i16* %blur_x, i64 %5133
  %5135 = bitcast i16* %5134 to <16 x i16>*
  %5136 = load <16 x i16>, <16 x i16>* %5135, align 2, !tbaa !399
  %5137 = getelementptr inbounds i16, i16* %5134, i64 16
  %5138 = bitcast i16* %5137 to <16 x i16>*
  %5139 = load <16 x i16>, <16 x i16>* %5138, align 2, !tbaa !399
  %5140 = add nsw i64 %4917, %.pre-phi3485
  %5141 = getelementptr inbounds i16, i16* %blur_x, i64 %5140
  %5142 = bitcast i16* %5141 to <16 x i16>*
  %5143 = load <16 x i16>, <16 x i16>* %5142, align 2, !tbaa !399
  %5144 = getelementptr inbounds i16, i16* %5141, i64 16
  %5145 = bitcast i16* %5144 to <16 x i16>*
  %5146 = load <16 x i16>, <16 x i16>* %5145, align 2, !tbaa !399
  %5147 = add nsw i64 %4920, %.pre-phi3485
  %5148 = getelementptr inbounds i16, i16* %blur_x, i64 %5147
  %5149 = bitcast i16* %5148 to <16 x i16>*
  %5150 = load <16 x i16>, <16 x i16>* %5149, align 2, !tbaa !399
  %5151 = getelementptr inbounds i16, i16* %5148, i64 16
  %5152 = bitcast i16* %5151 to <16 x i16>*
  %5153 = load <16 x i16>, <16 x i16>* %5152, align 2, !tbaa !399
  %5154 = add nsw i64 %4923, %.pre-phi3485
  %5155 = getelementptr inbounds i16, i16* %blur_x, i64 %5154
  %5156 = bitcast i16* %5155 to <16 x i16>*
  %5157 = load <16 x i16>, <16 x i16>* %5156, align 2, !tbaa !399
  %5158 = getelementptr inbounds i16, i16* %5155, i64 16
  %5159 = bitcast i16* %5158 to <16 x i16>*
  %5160 = load <16 x i16>, <16 x i16>* %5159, align 2, !tbaa !399
  %5161 = add nsw i64 %4926, %.pre-phi3485
  %5162 = getelementptr inbounds i16, i16* %blur_x, i64 %5161
  %5163 = bitcast i16* %5162 to <16 x i16>*
  %5164 = load <16 x i16>, <16 x i16>* %5163, align 2, !tbaa !399
  %5165 = getelementptr inbounds i16, i16* %5162, i64 16
  %5166 = bitcast i16* %5165 to <16 x i16>*
  %5167 = load <16 x i16>, <16 x i16>* %5166, align 2, !tbaa !399
  %5168 = add <16 x i16> %5143, %5136
  %5169 = add <16 x i16> %5168, %5150
  %5170 = add <16 x i16> %5169, %5157
  %5171 = add <16 x i16> %5170, %5164
  %5172 = add <16 x i16> %5146, %5139
  %5173 = add <16 x i16> %5172, %5153
  %5174 = add <16 x i16> %5173, %5160
  %5175 = add <16 x i16> %5174, %5167
  %5176 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5171, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5175, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5178 = shufflevector <16 x i16> %5176, <16 x i16> %5177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5179 = lshr <32 x i16> %5178, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5180 = shufflevector <32 x i16> %5179, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5181 = add nsw i64 %4930, %.pre-phi3485
  %5182 = getelementptr inbounds i16, i16* %66, i64 %5181
  %5183 = bitcast i16* %5182 to <16 x i16>*
  store <16 x i16> %5180, <16 x i16>* %5183, align 2, !tbaa !401
  %5184 = shufflevector <32 x i16> %5179, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5185 = getelementptr inbounds i16, i16* %5182, i64 16
  %5186 = bitcast i16* %5185 to <16 x i16>*
  store <16 x i16> %5184, <16 x i16>* %5186, align 2, !tbaa !401
  %indvars.iv.next3281 = add nuw nsw i64 %indvars.iv3280, 1
  %.not2743 = icmp eq i64 %indvars.iv.next3281, %184
  br i1 %.not2743, label %"end for blur_y.s0.x.x.rebased251", label %"for blur_y.s0.x.x.rebased250"

"for blur_y.s0.x.x.rebased258":                   ; preds = %"for blur_y.s0.x.x.rebased258.preheader", %"consume blur_x266"
  %blur_y.s0.x.x.rebased260 = phi i32 [ %5299, %"consume blur_x266" ], [ 0, %"for blur_y.s0.x.x.rebased258.preheader" ]
  %5187 = add nsw i32 %blur_y.s0.x.x.rebased260, %t1626
  %a154 = shl nsw i32 %5187, 5
  %5188 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %5188, i32 %a154, i32 %a14
  %5189 = icmp slt i32 %5187, 1
  %5190 = icmp sgt i32 %4, %a154
  %5191 = or i1 %5189, %5190
  br i1 %5191, label %"produce blur_x264", label %"consume blur_x266"

"end for blur_y.s0.x.x.rebased259":               ; preds = %"consume blur_x266", %"end for blur_y.s0.x.x.rebased251"
  br i1 %34, label %"produce blur_x270", label %after_bb267

"produce blur_x264":                              ; preds = %"for blur_y.s0.x.x.rebased258"
  %5192 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s265 = select i1 %5192, i32 %b160, i32 %4
  %t829 = add nsw i32 %blur_x.s0.x.v1.base.s265, %t1817
  %5193 = sext i32 %t829 to i64
  %5194 = getelementptr inbounds i16, i16* %read_input, i64 %5193
  %5195 = getelementptr inbounds i16, i16* %5194, i64 1
  %5196 = bitcast i16* %5195 to <16 x i16>*
  %5197 = load <16 x i16>, <16 x i16>* %5196, align 2, !tbaa !396
  %5198 = getelementptr inbounds i16, i16* %5194, i64 17
  %5199 = bitcast i16* %5198 to <16 x i16>*
  %5200 = load <16 x i16>, <16 x i16>* %5199, align 2, !tbaa !396
  %5201 = bitcast i16* %5194 to <16 x i16>*
  %5202 = load <16 x i16>, <16 x i16>* %5201, align 2, !tbaa !396
  %5203 = getelementptr inbounds i16, i16* %5194, i64 16
  %5204 = bitcast i16* %5203 to <16 x i16>*
  %5205 = load <16 x i16>, <16 x i16>* %5204, align 2, !tbaa !396
  %5206 = getelementptr inbounds i16, i16* %5194, i64 2
  %5207 = bitcast i16* %5206 to <16 x i16>*
  %5208 = load <16 x i16>, <16 x i16>* %5207, align 2, !tbaa !396
  %5209 = getelementptr inbounds i16, i16* %5194, i64 18
  %5210 = bitcast i16* %5209 to <16 x i16>*
  %5211 = load <16 x i16>, <16 x i16>* %5210, align 2, !tbaa !396
  %5212 = getelementptr inbounds i16, i16* %5194, i64 4
  %5213 = bitcast i16* %5212 to <16 x i16>*
  %5214 = load <16 x i16>, <16 x i16>* %5213, align 2, !tbaa !396
  %5215 = getelementptr inbounds i16, i16* %5194, i64 20
  %5216 = bitcast i16* %5215 to <16 x i16>*
  %5217 = load <16 x i16>, <16 x i16>* %5216, align 2, !tbaa !396
  %5218 = getelementptr inbounds i16, i16* %5194, i64 3
  %5219 = bitcast i16* %5218 to <16 x i16>*
  %5220 = load <16 x i16>, <16 x i16>* %5219, align 2, !tbaa !396
  %5221 = getelementptr inbounds i16, i16* %5194, i64 19
  %5222 = bitcast i16* %5221 to <16 x i16>*
  %5223 = load <16 x i16>, <16 x i16>* %5222, align 2, !tbaa !396
  %5224 = add <16 x i16> %5202, %5197
  %5225 = add <16 x i16> %5224, %5208
  %5226 = add <16 x i16> %5225, %5214
  %5227 = add <16 x i16> %5226, %5220
  %5228 = add <16 x i16> %5205, %5200
  %5229 = add <16 x i16> %5228, %5211
  %5230 = add <16 x i16> %5229, %5217
  %5231 = add <16 x i16> %5230, %5223
  %5232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5227, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5231, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5234 = shufflevector <16 x i16> %5232, <16 x i16> %5233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5235 = lshr <32 x i16> %5234, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5236 = shufflevector <32 x i16> %5235, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5237 = sext i32 %blur_x.s0.x.v1.base.s265 to i64
  %5238 = add nsw i64 %5237, %5062
  %5239 = getelementptr inbounds i16, i16* %blur_x, i64 %5238
  %5240 = bitcast i16* %5239 to <16 x i16>*
  store <16 x i16> %5236, <16 x i16>* %5240, align 2, !tbaa !399
  %5241 = shufflevector <32 x i16> %5235, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5242 = getelementptr inbounds i16, i16* %5239, i64 16
  %5243 = bitcast i16* %5242 to <16 x i16>*
  store <16 x i16> %5241, <16 x i16>* %5243, align 2, !tbaa !399
  br label %"consume blur_x266"

"consume blur_x266":                              ; preds = %"for blur_y.s0.x.x.rebased258", %"produce blur_x264"
  %5244 = sext i32 %b160 to i64
  %5245 = add nsw i64 %5065, %5244
  %5246 = getelementptr inbounds i16, i16* %blur_x, i64 %5245
  %5247 = bitcast i16* %5246 to <16 x i16>*
  %5248 = load <16 x i16>, <16 x i16>* %5247, align 2, !tbaa !399
  %5249 = getelementptr inbounds i16, i16* %5246, i64 16
  %5250 = bitcast i16* %5249 to <16 x i16>*
  %5251 = load <16 x i16>, <16 x i16>* %5250, align 2, !tbaa !399
  %5252 = add nsw i64 %5068, %5244
  %5253 = getelementptr inbounds i16, i16* %blur_x, i64 %5252
  %5254 = bitcast i16* %5253 to <16 x i16>*
  %5255 = load <16 x i16>, <16 x i16>* %5254, align 2, !tbaa !399
  %5256 = getelementptr inbounds i16, i16* %5253, i64 16
  %5257 = bitcast i16* %5256 to <16 x i16>*
  %5258 = load <16 x i16>, <16 x i16>* %5257, align 2, !tbaa !399
  %5259 = add nsw i64 %5071, %5244
  %5260 = getelementptr inbounds i16, i16* %blur_x, i64 %5259
  %5261 = bitcast i16* %5260 to <16 x i16>*
  %5262 = load <16 x i16>, <16 x i16>* %5261, align 2, !tbaa !399
  %5263 = getelementptr inbounds i16, i16* %5260, i64 16
  %5264 = bitcast i16* %5263 to <16 x i16>*
  %5265 = load <16 x i16>, <16 x i16>* %5264, align 2, !tbaa !399
  %5266 = add nsw i64 %5074, %5244
  %5267 = getelementptr inbounds i16, i16* %blur_x, i64 %5266
  %5268 = bitcast i16* %5267 to <16 x i16>*
  %5269 = load <16 x i16>, <16 x i16>* %5268, align 2, !tbaa !399
  %5270 = getelementptr inbounds i16, i16* %5267, i64 16
  %5271 = bitcast i16* %5270 to <16 x i16>*
  %5272 = load <16 x i16>, <16 x i16>* %5271, align 2, !tbaa !399
  %5273 = add nsw i64 %5077, %5244
  %5274 = getelementptr inbounds i16, i16* %blur_x, i64 %5273
  %5275 = bitcast i16* %5274 to <16 x i16>*
  %5276 = load <16 x i16>, <16 x i16>* %5275, align 2, !tbaa !399
  %5277 = getelementptr inbounds i16, i16* %5274, i64 16
  %5278 = bitcast i16* %5277 to <16 x i16>*
  %5279 = load <16 x i16>, <16 x i16>* %5278, align 2, !tbaa !399
  %5280 = add <16 x i16> %5255, %5248
  %5281 = add <16 x i16> %5280, %5262
  %5282 = add <16 x i16> %5281, %5269
  %5283 = add <16 x i16> %5282, %5276
  %5284 = add <16 x i16> %5258, %5251
  %5285 = add <16 x i16> %5284, %5265
  %5286 = add <16 x i16> %5285, %5272
  %5287 = add <16 x i16> %5286, %5279
  %5288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5283, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5287, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5290 = shufflevector <16 x i16> %5288, <16 x i16> %5289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5291 = lshr <32 x i16> %5290, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5292 = shufflevector <32 x i16> %5291, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5293 = add nsw i64 %5081, %5244
  %5294 = getelementptr inbounds i16, i16* %66, i64 %5293
  %5295 = bitcast i16* %5294 to <16 x i16>*
  store <16 x i16> %5292, <16 x i16>* %5295, align 2, !tbaa !401
  %5296 = shufflevector <32 x i16> %5291, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5297 = getelementptr inbounds i16, i16* %5294, i64 16
  %5298 = bitcast i16* %5297 to <16 x i16>*
  store <16 x i16> %5296, <16 x i16>* %5298, align 2, !tbaa !401
  %5299 = add nuw nsw i32 %blur_y.s0.x.x.rebased260, 1
  %.not2742 = icmp eq i32 %5299, %t1683
  br i1 %.not2742, label %"end for blur_y.s0.x.x.rebased259", label %"for blur_y.s0.x.x.rebased258"

after_bb267:                                      ; preds = %"end for blur_y.s0.x.x.rebased259", %"produce blur_x270"
  br i1 %100, label %"for blur_y.s0.x.x.rebased272.preheader", label %"end for blur_y.s0.x.x.rebased273", !prof !386

"for blur_y.s0.x.x.rebased272.preheader":         ; preds = %after_bb267
  %5300 = sext i32 %t1706 to i64
  %5301 = zext i32 %.pre-phi3445 to i64
  %5302 = mul nsw i64 %5301, %112
  %5303 = sub nsw i64 %5302, %96
  %5304 = zext i32 %.pre-phi to i64
  %5305 = mul nsw i64 %5304, %112
  %5306 = sub nsw i64 %5305, %96
  %5307 = zext i32 %.pre-phi3449 to i64
  %5308 = mul nsw i64 %5307, %112
  %5309 = sub nsw i64 %5308, %96
  %5310 = zext i32 %.pre-phi3457 to i64
  %5311 = mul nsw i64 %5310, %112
  %5312 = sub nsw i64 %5311, %96
  %5313 = zext i32 %.pre-phi3453 to i64
  %5314 = mul nsw i64 %5313, %112
  %5315 = sub nsw i64 %5314, %96
  %5316 = sext i32 %a26 to i64
  %5317 = add nsw i64 %5316, 8
  %5318 = mul nsw i64 %5317, %113
  %5319 = add nsw i64 %5318, %116
  br label %"for blur_y.s0.x.x.rebased272"

"produce blur_x270":                              ; preds = %"end for blur_y.s0.x.x.rebased259"
  %5320 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %5321 = getelementptr inbounds i16, i16* %5320, i64 -31
  %5322 = bitcast i16* %5321 to <16 x i16>*
  %5323 = load <16 x i16>, <16 x i16>* %5322, align 2, !tbaa !396
  %5324 = getelementptr inbounds i16, i16* %5320, i64 -15
  %5325 = bitcast i16* %5324 to <16 x i16>*
  %5326 = load <16 x i16>, <16 x i16>* %5325, align 2, !tbaa !396
  %5327 = getelementptr inbounds i16, i16* %5320, i64 -32
  %5328 = bitcast i16* %5327 to <16 x i16>*
  %5329 = load <16 x i16>, <16 x i16>* %5328, align 2, !tbaa !396
  %5330 = getelementptr inbounds i16, i16* %5320, i64 -16
  %5331 = bitcast i16* %5330 to <16 x i16>*
  %5332 = load <16 x i16>, <16 x i16>* %5331, align 2, !tbaa !396
  %5333 = getelementptr inbounds i16, i16* %5320, i64 -30
  %5334 = bitcast i16* %5333 to <16 x i16>*
  %5335 = load <16 x i16>, <16 x i16>* %5334, align 2, !tbaa !396
  %5336 = getelementptr inbounds i16, i16* %5320, i64 -14
  %5337 = bitcast i16* %5336 to <16 x i16>*
  %5338 = load <16 x i16>, <16 x i16>* %5337, align 2, !tbaa !396
  %5339 = getelementptr inbounds i16, i16* %5320, i64 -28
  %5340 = bitcast i16* %5339 to <16 x i16>*
  %5341 = load <16 x i16>, <16 x i16>* %5340, align 2, !tbaa !396
  %5342 = getelementptr inbounds i16, i16* %5320, i64 -12
  %5343 = bitcast i16* %5342 to <16 x i16>*
  %5344 = load <16 x i16>, <16 x i16>* %5343, align 2, !tbaa !396
  %5345 = getelementptr inbounds i16, i16* %5320, i64 -29
  %5346 = bitcast i16* %5345 to <16 x i16>*
  %5347 = load <16 x i16>, <16 x i16>* %5346, align 2, !tbaa !396
  %5348 = getelementptr inbounds i16, i16* %5320, i64 -13
  %5349 = bitcast i16* %5348 to <16 x i16>*
  %5350 = load <16 x i16>, <16 x i16>* %5349, align 2, !tbaa !396
  %5351 = add <16 x i16> %5329, %5323
  %5352 = add <16 x i16> %5351, %5335
  %5353 = add <16 x i16> %5352, %5341
  %5354 = add <16 x i16> %5353, %5347
  %5355 = add <16 x i16> %5332, %5326
  %5356 = add <16 x i16> %5355, %5338
  %5357 = add <16 x i16> %5356, %5344
  %5358 = add <16 x i16> %5357, %5350
  %5359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5354, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5358, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5361 = shufflevector <16 x i16> %5359, <16 x i16> %5360, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5362 = lshr <32 x i16> %5361, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5363 = shufflevector <32 x i16> %5362, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5364 = zext i32 %.pre-phi3457 to i64
  %5365 = mul nsw i64 %97, %5364
  %5366 = add nsw i64 %99, %5365
  %5367 = getelementptr inbounds i16, i16* %blur_x, i64 %5366
  %5368 = getelementptr inbounds i16, i16* %5367, i64 -32
  %5369 = bitcast i16* %5368 to <16 x i16>*
  store <16 x i16> %5363, <16 x i16>* %5369, align 2, !tbaa !399
  %5370 = shufflevector <32 x i16> %5362, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5371 = getelementptr inbounds i16, i16* %5367, i64 -16
  %5372 = bitcast i16* %5371 to <16 x i16>*
  store <16 x i16> %5370, <16 x i16>* %5372, align 2, !tbaa !399
  %5373 = zext i32 %.pre-phi3445 to i64
  %5374 = mul nsw i64 %5373, %112
  %5375 = add nsw i64 %5374, %94
  %5376 = getelementptr inbounds i16, i16* %blur_x, i64 %5375
  %5377 = getelementptr inbounds i16, i16* %5376, i64 -32
  %5378 = bitcast i16* %5377 to <16 x i16>*
  %5379 = load <16 x i16>, <16 x i16>* %5378, align 2, !tbaa !399
  %5380 = getelementptr inbounds i16, i16* %5376, i64 -16
  %5381 = bitcast i16* %5380 to <16 x i16>*
  %5382 = load <16 x i16>, <16 x i16>* %5381, align 2, !tbaa !399
  %5383 = zext i32 %.pre-phi to i64
  %5384 = mul nsw i64 %5383, %112
  %5385 = add nsw i64 %5384, %94
  %5386 = getelementptr inbounds i16, i16* %blur_x, i64 %5385
  %5387 = getelementptr inbounds i16, i16* %5386, i64 -32
  %5388 = bitcast i16* %5387 to <16 x i16>*
  %5389 = load <16 x i16>, <16 x i16>* %5388, align 2, !tbaa !399
  %5390 = getelementptr inbounds i16, i16* %5386, i64 -16
  %5391 = bitcast i16* %5390 to <16 x i16>*
  %5392 = load <16 x i16>, <16 x i16>* %5391, align 2, !tbaa !399
  %5393 = zext i32 %.pre-phi3449 to i64
  %5394 = mul nsw i64 %5393, %112
  %5395 = add nsw i64 %5394, %94
  %5396 = getelementptr inbounds i16, i16* %blur_x, i64 %5395
  %5397 = getelementptr inbounds i16, i16* %5396, i64 -32
  %5398 = bitcast i16* %5397 to <16 x i16>*
  %5399 = load <16 x i16>, <16 x i16>* %5398, align 2, !tbaa !399
  %5400 = getelementptr inbounds i16, i16* %5396, i64 -16
  %5401 = bitcast i16* %5400 to <16 x i16>*
  %5402 = load <16 x i16>, <16 x i16>* %5401, align 2, !tbaa !399
  %5403 = mul nsw i64 %5364, %112
  %5404 = add nsw i64 %5403, %94
  %5405 = getelementptr inbounds i16, i16* %blur_x, i64 %5404
  %5406 = getelementptr inbounds i16, i16* %5405, i64 -32
  %5407 = bitcast i16* %5406 to <16 x i16>*
  %5408 = load <16 x i16>, <16 x i16>* %5407, align 2, !tbaa !399
  %5409 = getelementptr inbounds i16, i16* %5405, i64 -16
  %5410 = bitcast i16* %5409 to <16 x i16>*
  %5411 = load <16 x i16>, <16 x i16>* %5410, align 2, !tbaa !399
  %5412 = zext i32 %.pre-phi3453 to i64
  %5413 = mul nsw i64 %5412, %112
  %5414 = add nsw i64 %5413, %94
  %5415 = getelementptr inbounds i16, i16* %blur_x, i64 %5414
  %5416 = getelementptr inbounds i16, i16* %5415, i64 -32
  %5417 = bitcast i16* %5416 to <16 x i16>*
  %5418 = load <16 x i16>, <16 x i16>* %5417, align 2, !tbaa !399
  %5419 = getelementptr inbounds i16, i16* %5415, i64 -16
  %5420 = bitcast i16* %5419 to <16 x i16>*
  %5421 = load <16 x i16>, <16 x i16>* %5420, align 2, !tbaa !399
  %5422 = add <16 x i16> %5389, %5379
  %5423 = add <16 x i16> %5422, %5399
  %5424 = add <16 x i16> %5423, %5408
  %5425 = add <16 x i16> %5424, %5418
  %5426 = add <16 x i16> %5392, %5382
  %5427 = add <16 x i16> %5426, %5402
  %5428 = add <16 x i16> %5427, %5411
  %5429 = add <16 x i16> %5428, %5421
  %5430 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5425, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5431 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5429, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5432 = shufflevector <16 x i16> %5430, <16 x i16> %5431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5433 = lshr <32 x i16> %5432, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5434 = shufflevector <32 x i16> %5433, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5435 = sext i32 %a26 to i64
  %5436 = add nsw i64 %5435, 8
  %5437 = mul nsw i64 %5436, %113
  %5438 = add nsw i64 %115, %5437
  %5439 = getelementptr inbounds i16, i16* %66, i64 %5438
  %5440 = getelementptr inbounds i16, i16* %5439, i64 -32
  %5441 = bitcast i16* %5440 to <16 x i16>*
  store <16 x i16> %5434, <16 x i16>* %5441, align 2, !tbaa !401
  %5442 = shufflevector <32 x i16> %5433, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5443 = getelementptr inbounds i16, i16* %5439, i64 -16
  %5444 = bitcast i16* %5443 to <16 x i16>*
  store <16 x i16> %5442, <16 x i16>* %5444, align 2, !tbaa !401
  br label %after_bb267

"for blur_y.s0.x.x.rebased272":                   ; preds = %"for blur_y.s0.x.x.rebased272.preheader", %"consume blur_x279"
  %indvars.iv3283 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased272.preheader" ], [ %indvars.iv.next3284, %"consume blur_x279" ]
  %5445 = add nsw i64 %indvars.iv3283, %101
  %5446 = icmp slt i64 %5445, 1
  %5447 = trunc i64 %5445 to i32
  %5448 = shl nsw i32 %5447, 5
  %5449 = icmp sgt i32 %4, %5448
  %5450 = or i1 %5446, %5449
  br i1 %5450, label %"produce blur_x278", label %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge"

"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased272"
  %.pre3486 = shl nsw i64 %5445, 5
  br label %"consume blur_x279"

"end for blur_y.s0.x.x.rebased273":               ; preds = %"consume blur_x279", %after_bb267
  br i1 %102, label %"for blur_y.s0.x.x.rebased280.preheader", label %"end for blur_y.s0.x.x.rebased281", !prof !386

"for blur_y.s0.x.x.rebased280.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased273"
  %5451 = sext i32 %t1706 to i64
  %5452 = zext i32 %.pre-phi3445 to i64
  %5453 = mul nsw i64 %5452, %112
  %5454 = sub nsw i64 %5453, %96
  %5455 = zext i32 %.pre-phi to i64
  %5456 = mul nsw i64 %5455, %112
  %5457 = sub nsw i64 %5456, %96
  %5458 = zext i32 %.pre-phi3449 to i64
  %5459 = mul nsw i64 %5458, %112
  %5460 = sub nsw i64 %5459, %96
  %5461 = zext i32 %.pre-phi3457 to i64
  %5462 = mul nsw i64 %5461, %112
  %5463 = sub nsw i64 %5462, %96
  %5464 = zext i32 %.pre-phi3453 to i64
  %5465 = mul nsw i64 %5464, %112
  %5466 = sub nsw i64 %5465, %96
  %5467 = sext i32 %a26 to i64
  %5468 = add nsw i64 %5467, 8
  %5469 = mul nsw i64 %5468, %113
  %5470 = add nsw i64 %5469, %116
  br label %"for blur_y.s0.x.x.rebased280"

"produce blur_x278":                              ; preds = %"for blur_y.s0.x.x.rebased272"
  %t840 = add nsw i32 %5448, %t1833
  %5471 = sext i32 %t840 to i64
  %5472 = getelementptr inbounds i16, i16* %read_input, i64 %5471
  %5473 = getelementptr inbounds i16, i16* %5472, i64 1
  %5474 = bitcast i16* %5473 to <16 x i16>*
  %5475 = load <16 x i16>, <16 x i16>* %5474, align 2, !tbaa !396
  %5476 = getelementptr inbounds i16, i16* %5472, i64 17
  %5477 = bitcast i16* %5476 to <16 x i16>*
  %5478 = load <16 x i16>, <16 x i16>* %5477, align 2, !tbaa !396
  %5479 = bitcast i16* %5472 to <16 x i16>*
  %5480 = load <16 x i16>, <16 x i16>* %5479, align 2, !tbaa !396
  %5481 = getelementptr inbounds i16, i16* %5472, i64 16
  %5482 = bitcast i16* %5481 to <16 x i16>*
  %5483 = load <16 x i16>, <16 x i16>* %5482, align 2, !tbaa !396
  %5484 = getelementptr inbounds i16, i16* %5472, i64 2
  %5485 = bitcast i16* %5484 to <16 x i16>*
  %5486 = load <16 x i16>, <16 x i16>* %5485, align 2, !tbaa !396
  %5487 = getelementptr inbounds i16, i16* %5472, i64 18
  %5488 = bitcast i16* %5487 to <16 x i16>*
  %5489 = load <16 x i16>, <16 x i16>* %5488, align 2, !tbaa !396
  %5490 = getelementptr inbounds i16, i16* %5472, i64 4
  %5491 = bitcast i16* %5490 to <16 x i16>*
  %5492 = load <16 x i16>, <16 x i16>* %5491, align 2, !tbaa !396
  %5493 = getelementptr inbounds i16, i16* %5472, i64 20
  %5494 = bitcast i16* %5493 to <16 x i16>*
  %5495 = load <16 x i16>, <16 x i16>* %5494, align 2, !tbaa !396
  %5496 = getelementptr inbounds i16, i16* %5472, i64 3
  %5497 = bitcast i16* %5496 to <16 x i16>*
  %5498 = load <16 x i16>, <16 x i16>* %5497, align 2, !tbaa !396
  %5499 = getelementptr inbounds i16, i16* %5472, i64 19
  %5500 = bitcast i16* %5499 to <16 x i16>*
  %5501 = load <16 x i16>, <16 x i16>* %5500, align 2, !tbaa !396
  %5502 = add <16 x i16> %5480, %5475
  %5503 = add <16 x i16> %5502, %5486
  %5504 = add <16 x i16> %5503, %5492
  %5505 = add <16 x i16> %5504, %5498
  %5506 = add <16 x i16> %5483, %5478
  %5507 = add <16 x i16> %5506, %5489
  %5508 = add <16 x i16> %5507, %5495
  %5509 = add <16 x i16> %5508, %5501
  %5510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5505, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5509, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5512 = shufflevector <16 x i16> %5510, <16 x i16> %5511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5513 = lshr <32 x i16> %5512, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5514 = shufflevector <32 x i16> %5513, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5515 = shl nsw i64 %5445, 5
  %5516 = add nsw i64 %5515, %5300
  %5517 = getelementptr inbounds i16, i16* %blur_x, i64 %5516
  %5518 = bitcast i16* %5517 to <16 x i16>*
  store <16 x i16> %5514, <16 x i16>* %5518, align 2, !tbaa !399
  %5519 = shufflevector <32 x i16> %5513, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5520 = getelementptr inbounds i16, i16* %5517, i64 16
  %5521 = bitcast i16* %5520 to <16 x i16>*
  store <16 x i16> %5519, <16 x i16>* %5521, align 2, !tbaa !399
  br label %"consume blur_x279"

"consume blur_x279":                              ; preds = %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge", %"produce blur_x278"
  %.pre-phi3487 = phi i64 [ %.pre3486, %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge" ], [ %5515, %"produce blur_x278" ]
  %5522 = add nsw i64 %5303, %.pre-phi3487
  %5523 = getelementptr inbounds i16, i16* %blur_x, i64 %5522
  %5524 = bitcast i16* %5523 to <16 x i16>*
  %5525 = load <16 x i16>, <16 x i16>* %5524, align 2, !tbaa !399
  %5526 = getelementptr inbounds i16, i16* %5523, i64 16
  %5527 = bitcast i16* %5526 to <16 x i16>*
  %5528 = load <16 x i16>, <16 x i16>* %5527, align 2, !tbaa !399
  %5529 = add nsw i64 %5306, %.pre-phi3487
  %5530 = getelementptr inbounds i16, i16* %blur_x, i64 %5529
  %5531 = bitcast i16* %5530 to <16 x i16>*
  %5532 = load <16 x i16>, <16 x i16>* %5531, align 2, !tbaa !399
  %5533 = getelementptr inbounds i16, i16* %5530, i64 16
  %5534 = bitcast i16* %5533 to <16 x i16>*
  %5535 = load <16 x i16>, <16 x i16>* %5534, align 2, !tbaa !399
  %5536 = add nsw i64 %5309, %.pre-phi3487
  %5537 = getelementptr inbounds i16, i16* %blur_x, i64 %5536
  %5538 = bitcast i16* %5537 to <16 x i16>*
  %5539 = load <16 x i16>, <16 x i16>* %5538, align 2, !tbaa !399
  %5540 = getelementptr inbounds i16, i16* %5537, i64 16
  %5541 = bitcast i16* %5540 to <16 x i16>*
  %5542 = load <16 x i16>, <16 x i16>* %5541, align 2, !tbaa !399
  %5543 = add nsw i64 %5312, %.pre-phi3487
  %5544 = getelementptr inbounds i16, i16* %blur_x, i64 %5543
  %5545 = bitcast i16* %5544 to <16 x i16>*
  %5546 = load <16 x i16>, <16 x i16>* %5545, align 2, !tbaa !399
  %5547 = getelementptr inbounds i16, i16* %5544, i64 16
  %5548 = bitcast i16* %5547 to <16 x i16>*
  %5549 = load <16 x i16>, <16 x i16>* %5548, align 2, !tbaa !399
  %5550 = add nsw i64 %5315, %.pre-phi3487
  %5551 = getelementptr inbounds i16, i16* %blur_x, i64 %5550
  %5552 = bitcast i16* %5551 to <16 x i16>*
  %5553 = load <16 x i16>, <16 x i16>* %5552, align 2, !tbaa !399
  %5554 = getelementptr inbounds i16, i16* %5551, i64 16
  %5555 = bitcast i16* %5554 to <16 x i16>*
  %5556 = load <16 x i16>, <16 x i16>* %5555, align 2, !tbaa !399
  %5557 = add <16 x i16> %5532, %5525
  %5558 = add <16 x i16> %5557, %5539
  %5559 = add <16 x i16> %5558, %5546
  %5560 = add <16 x i16> %5559, %5553
  %5561 = add <16 x i16> %5535, %5528
  %5562 = add <16 x i16> %5561, %5542
  %5563 = add <16 x i16> %5562, %5549
  %5564 = add <16 x i16> %5563, %5556
  %5565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5560, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5564, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5567 = shufflevector <16 x i16> %5565, <16 x i16> %5566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5568 = lshr <32 x i16> %5567, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5569 = shufflevector <32 x i16> %5568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5570 = add nsw i64 %5319, %.pre-phi3487
  %5571 = getelementptr inbounds i16, i16* %66, i64 %5570
  %5572 = bitcast i16* %5571 to <16 x i16>*
  store <16 x i16> %5569, <16 x i16>* %5572, align 2, !tbaa !401
  %5573 = shufflevector <32 x i16> %5568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5574 = getelementptr inbounds i16, i16* %5571, i64 16
  %5575 = bitcast i16* %5574 to <16 x i16>*
  store <16 x i16> %5573, <16 x i16>* %5575, align 2, !tbaa !401
  %indvars.iv.next3284 = add nuw nsw i64 %indvars.iv3283, 1
  %.not2741 = icmp eq i64 %indvars.iv.next3284, %184
  br i1 %.not2741, label %"end for blur_y.s0.x.x.rebased273", label %"for blur_y.s0.x.x.rebased272"

"for blur_y.s0.x.x.rebased280":                   ; preds = %"for blur_y.s0.x.x.rebased280.preheader", %"consume blur_x288"
  %blur_y.s0.x.x.rebased282 = phi i32 [ %5688, %"consume blur_x288" ], [ 0, %"for blur_y.s0.x.x.rebased280.preheader" ]
  %5576 = add nsw i32 %blur_y.s0.x.x.rebased282, %t1626
  %a161 = shl nsw i32 %5576, 5
  %5577 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %5577, i32 %a161, i32 %a14
  %5578 = icmp slt i32 %5576, 1
  %5579 = icmp sgt i32 %4, %a161
  %5580 = or i1 %5578, %5579
  br i1 %5580, label %"produce blur_x286", label %"consume blur_x288"

"end for blur_y.s0.x.x.rebased281":               ; preds = %"consume blur_x288", %"end for blur_y.s0.x.x.rebased273"
  br i1 %34, label %"produce blur_x292", label %after_bb289

"produce blur_x286":                              ; preds = %"for blur_y.s0.x.x.rebased280"
  %5581 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s287 = select i1 %5581, i32 %b167, i32 %4
  %t845 = add nsw i32 %blur_x.s0.x.v1.base.s287, %t1833
  %5582 = sext i32 %t845 to i64
  %5583 = getelementptr inbounds i16, i16* %read_input, i64 %5582
  %5584 = getelementptr inbounds i16, i16* %5583, i64 1
  %5585 = bitcast i16* %5584 to <16 x i16>*
  %5586 = load <16 x i16>, <16 x i16>* %5585, align 2, !tbaa !396
  %5587 = getelementptr inbounds i16, i16* %5583, i64 17
  %5588 = bitcast i16* %5587 to <16 x i16>*
  %5589 = load <16 x i16>, <16 x i16>* %5588, align 2, !tbaa !396
  %5590 = bitcast i16* %5583 to <16 x i16>*
  %5591 = load <16 x i16>, <16 x i16>* %5590, align 2, !tbaa !396
  %5592 = getelementptr inbounds i16, i16* %5583, i64 16
  %5593 = bitcast i16* %5592 to <16 x i16>*
  %5594 = load <16 x i16>, <16 x i16>* %5593, align 2, !tbaa !396
  %5595 = getelementptr inbounds i16, i16* %5583, i64 2
  %5596 = bitcast i16* %5595 to <16 x i16>*
  %5597 = load <16 x i16>, <16 x i16>* %5596, align 2, !tbaa !396
  %5598 = getelementptr inbounds i16, i16* %5583, i64 18
  %5599 = bitcast i16* %5598 to <16 x i16>*
  %5600 = load <16 x i16>, <16 x i16>* %5599, align 2, !tbaa !396
  %5601 = getelementptr inbounds i16, i16* %5583, i64 4
  %5602 = bitcast i16* %5601 to <16 x i16>*
  %5603 = load <16 x i16>, <16 x i16>* %5602, align 2, !tbaa !396
  %5604 = getelementptr inbounds i16, i16* %5583, i64 20
  %5605 = bitcast i16* %5604 to <16 x i16>*
  %5606 = load <16 x i16>, <16 x i16>* %5605, align 2, !tbaa !396
  %5607 = getelementptr inbounds i16, i16* %5583, i64 3
  %5608 = bitcast i16* %5607 to <16 x i16>*
  %5609 = load <16 x i16>, <16 x i16>* %5608, align 2, !tbaa !396
  %5610 = getelementptr inbounds i16, i16* %5583, i64 19
  %5611 = bitcast i16* %5610 to <16 x i16>*
  %5612 = load <16 x i16>, <16 x i16>* %5611, align 2, !tbaa !396
  %5613 = add <16 x i16> %5591, %5586
  %5614 = add <16 x i16> %5613, %5597
  %5615 = add <16 x i16> %5614, %5603
  %5616 = add <16 x i16> %5615, %5609
  %5617 = add <16 x i16> %5594, %5589
  %5618 = add <16 x i16> %5617, %5600
  %5619 = add <16 x i16> %5618, %5606
  %5620 = add <16 x i16> %5619, %5612
  %5621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5616, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5620, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5623 = shufflevector <16 x i16> %5621, <16 x i16> %5622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5624 = lshr <32 x i16> %5623, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5625 = shufflevector <32 x i16> %5624, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5626 = sext i32 %blur_x.s0.x.v1.base.s287 to i64
  %5627 = add nsw i64 %5626, %5451
  %5628 = getelementptr inbounds i16, i16* %blur_x, i64 %5627
  %5629 = bitcast i16* %5628 to <16 x i16>*
  store <16 x i16> %5625, <16 x i16>* %5629, align 2, !tbaa !399
  %5630 = shufflevector <32 x i16> %5624, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5631 = getelementptr inbounds i16, i16* %5628, i64 16
  %5632 = bitcast i16* %5631 to <16 x i16>*
  store <16 x i16> %5630, <16 x i16>* %5632, align 2, !tbaa !399
  br label %"consume blur_x288"

"consume blur_x288":                              ; preds = %"for blur_y.s0.x.x.rebased280", %"produce blur_x286"
  %5633 = sext i32 %b167 to i64
  %5634 = add nsw i64 %5454, %5633
  %5635 = getelementptr inbounds i16, i16* %blur_x, i64 %5634
  %5636 = bitcast i16* %5635 to <16 x i16>*
  %5637 = load <16 x i16>, <16 x i16>* %5636, align 2, !tbaa !399
  %5638 = getelementptr inbounds i16, i16* %5635, i64 16
  %5639 = bitcast i16* %5638 to <16 x i16>*
  %5640 = load <16 x i16>, <16 x i16>* %5639, align 2, !tbaa !399
  %5641 = add nsw i64 %5457, %5633
  %5642 = getelementptr inbounds i16, i16* %blur_x, i64 %5641
  %5643 = bitcast i16* %5642 to <16 x i16>*
  %5644 = load <16 x i16>, <16 x i16>* %5643, align 2, !tbaa !399
  %5645 = getelementptr inbounds i16, i16* %5642, i64 16
  %5646 = bitcast i16* %5645 to <16 x i16>*
  %5647 = load <16 x i16>, <16 x i16>* %5646, align 2, !tbaa !399
  %5648 = add nsw i64 %5460, %5633
  %5649 = getelementptr inbounds i16, i16* %blur_x, i64 %5648
  %5650 = bitcast i16* %5649 to <16 x i16>*
  %5651 = load <16 x i16>, <16 x i16>* %5650, align 2, !tbaa !399
  %5652 = getelementptr inbounds i16, i16* %5649, i64 16
  %5653 = bitcast i16* %5652 to <16 x i16>*
  %5654 = load <16 x i16>, <16 x i16>* %5653, align 2, !tbaa !399
  %5655 = add nsw i64 %5463, %5633
  %5656 = getelementptr inbounds i16, i16* %blur_x, i64 %5655
  %5657 = bitcast i16* %5656 to <16 x i16>*
  %5658 = load <16 x i16>, <16 x i16>* %5657, align 2, !tbaa !399
  %5659 = getelementptr inbounds i16, i16* %5656, i64 16
  %5660 = bitcast i16* %5659 to <16 x i16>*
  %5661 = load <16 x i16>, <16 x i16>* %5660, align 2, !tbaa !399
  %5662 = add nsw i64 %5466, %5633
  %5663 = getelementptr inbounds i16, i16* %blur_x, i64 %5662
  %5664 = bitcast i16* %5663 to <16 x i16>*
  %5665 = load <16 x i16>, <16 x i16>* %5664, align 2, !tbaa !399
  %5666 = getelementptr inbounds i16, i16* %5663, i64 16
  %5667 = bitcast i16* %5666 to <16 x i16>*
  %5668 = load <16 x i16>, <16 x i16>* %5667, align 2, !tbaa !399
  %5669 = add <16 x i16> %5644, %5637
  %5670 = add <16 x i16> %5669, %5651
  %5671 = add <16 x i16> %5670, %5658
  %5672 = add <16 x i16> %5671, %5665
  %5673 = add <16 x i16> %5647, %5640
  %5674 = add <16 x i16> %5673, %5654
  %5675 = add <16 x i16> %5674, %5661
  %5676 = add <16 x i16> %5675, %5668
  %5677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5672, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5676, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5679 = shufflevector <16 x i16> %5677, <16 x i16> %5678, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5680 = lshr <32 x i16> %5679, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5681 = shufflevector <32 x i16> %5680, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5682 = add nsw i64 %5470, %5633
  %5683 = getelementptr inbounds i16, i16* %66, i64 %5682
  %5684 = bitcast i16* %5683 to <16 x i16>*
  store <16 x i16> %5681, <16 x i16>* %5684, align 2, !tbaa !401
  %5685 = shufflevector <32 x i16> %5680, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5686 = getelementptr inbounds i16, i16* %5683, i64 16
  %5687 = bitcast i16* %5686 to <16 x i16>*
  store <16 x i16> %5685, <16 x i16>* %5687, align 2, !tbaa !401
  %5688 = add nuw nsw i32 %blur_y.s0.x.x.rebased282, 1
  %.not2740 = icmp eq i32 %5688, %t1683
  br i1 %.not2740, label %"end for blur_y.s0.x.x.rebased281", label %"for blur_y.s0.x.x.rebased280"

after_bb289:                                      ; preds = %"end for blur_y.s0.x.x.rebased281", %"produce blur_x292"
  br i1 %100, label %"for blur_y.s0.x.x.rebased294.preheader", label %"end for blur_y.s0.x.x.rebased295", !prof !386

"for blur_y.s0.x.x.rebased294.preheader":         ; preds = %after_bb289
  %5689 = sext i32 %t1722 to i64
  %5690 = zext i32 %.pre-phi3449 to i64
  %5691 = mul nsw i64 %5690, %112
  %5692 = sub nsw i64 %5691, %96
  %5693 = zext i32 %.pre-phi3445 to i64
  %5694 = mul nsw i64 %5693, %112
  %5695 = sub nsw i64 %5694, %96
  %5696 = zext i32 %.pre-phi3453 to i64
  %5697 = mul nsw i64 %5696, %112
  %5698 = sub nsw i64 %5697, %96
  %5699 = zext i32 %.pre-phi3463 to i64
  %5700 = mul nsw i64 %5699, %112
  %5701 = sub nsw i64 %5700, %96
  %5702 = zext i32 %.pre-phi3457 to i64
  %5703 = mul nsw i64 %5702, %112
  %5704 = sub nsw i64 %5703, %96
  %5705 = sext i32 %a26 to i64
  %5706 = add nsw i64 %5705, 9
  %5707 = mul nsw i64 %5706, %113
  %5708 = add nsw i64 %5707, %116
  br label %"for blur_y.s0.x.x.rebased294"

"produce blur_x292":                              ; preds = %"end for blur_y.s0.x.x.rebased281"
  %5709 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %5710 = getelementptr inbounds i16, i16* %5709, i64 -31
  %5711 = bitcast i16* %5710 to <16 x i16>*
  %5712 = load <16 x i16>, <16 x i16>* %5711, align 2, !tbaa !396
  %5713 = getelementptr inbounds i16, i16* %5709, i64 -15
  %5714 = bitcast i16* %5713 to <16 x i16>*
  %5715 = load <16 x i16>, <16 x i16>* %5714, align 2, !tbaa !396
  %5716 = getelementptr inbounds i16, i16* %5709, i64 -32
  %5717 = bitcast i16* %5716 to <16 x i16>*
  %5718 = load <16 x i16>, <16 x i16>* %5717, align 2, !tbaa !396
  %5719 = getelementptr inbounds i16, i16* %5709, i64 -16
  %5720 = bitcast i16* %5719 to <16 x i16>*
  %5721 = load <16 x i16>, <16 x i16>* %5720, align 2, !tbaa !396
  %5722 = getelementptr inbounds i16, i16* %5709, i64 -30
  %5723 = bitcast i16* %5722 to <16 x i16>*
  %5724 = load <16 x i16>, <16 x i16>* %5723, align 2, !tbaa !396
  %5725 = getelementptr inbounds i16, i16* %5709, i64 -14
  %5726 = bitcast i16* %5725 to <16 x i16>*
  %5727 = load <16 x i16>, <16 x i16>* %5726, align 2, !tbaa !396
  %5728 = getelementptr inbounds i16, i16* %5709, i64 -28
  %5729 = bitcast i16* %5728 to <16 x i16>*
  %5730 = load <16 x i16>, <16 x i16>* %5729, align 2, !tbaa !396
  %5731 = getelementptr inbounds i16, i16* %5709, i64 -12
  %5732 = bitcast i16* %5731 to <16 x i16>*
  %5733 = load <16 x i16>, <16 x i16>* %5732, align 2, !tbaa !396
  %5734 = getelementptr inbounds i16, i16* %5709, i64 -29
  %5735 = bitcast i16* %5734 to <16 x i16>*
  %5736 = load <16 x i16>, <16 x i16>* %5735, align 2, !tbaa !396
  %5737 = getelementptr inbounds i16, i16* %5709, i64 -13
  %5738 = bitcast i16* %5737 to <16 x i16>*
  %5739 = load <16 x i16>, <16 x i16>* %5738, align 2, !tbaa !396
  %5740 = add <16 x i16> %5718, %5712
  %5741 = add <16 x i16> %5740, %5724
  %5742 = add <16 x i16> %5741, %5730
  %5743 = add <16 x i16> %5742, %5736
  %5744 = add <16 x i16> %5721, %5715
  %5745 = add <16 x i16> %5744, %5727
  %5746 = add <16 x i16> %5745, %5733
  %5747 = add <16 x i16> %5746, %5739
  %5748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5743, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5747, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5750 = shufflevector <16 x i16> %5748, <16 x i16> %5749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5751 = lshr <32 x i16> %5750, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5752 = shufflevector <32 x i16> %5751, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5753 = zext i32 %.pre-phi3463 to i64
  %5754 = mul nsw i64 %97, %5753
  %5755 = add nsw i64 %99, %5754
  %5756 = getelementptr inbounds i16, i16* %blur_x, i64 %5755
  %5757 = getelementptr inbounds i16, i16* %5756, i64 -32
  %5758 = bitcast i16* %5757 to <16 x i16>*
  store <16 x i16> %5752, <16 x i16>* %5758, align 2, !tbaa !399
  %5759 = shufflevector <32 x i16> %5751, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5760 = getelementptr inbounds i16, i16* %5756, i64 -16
  %5761 = bitcast i16* %5760 to <16 x i16>*
  store <16 x i16> %5759, <16 x i16>* %5761, align 2, !tbaa !399
  %5762 = zext i32 %.pre-phi3449 to i64
  %5763 = mul nsw i64 %5762, %112
  %5764 = add nsw i64 %5763, %94
  %5765 = getelementptr inbounds i16, i16* %blur_x, i64 %5764
  %5766 = getelementptr inbounds i16, i16* %5765, i64 -32
  %5767 = bitcast i16* %5766 to <16 x i16>*
  %5768 = load <16 x i16>, <16 x i16>* %5767, align 2, !tbaa !399
  %5769 = getelementptr inbounds i16, i16* %5765, i64 -16
  %5770 = bitcast i16* %5769 to <16 x i16>*
  %5771 = load <16 x i16>, <16 x i16>* %5770, align 2, !tbaa !399
  %5772 = zext i32 %.pre-phi3445 to i64
  %5773 = mul nsw i64 %5772, %112
  %5774 = add nsw i64 %5773, %94
  %5775 = getelementptr inbounds i16, i16* %blur_x, i64 %5774
  %5776 = getelementptr inbounds i16, i16* %5775, i64 -32
  %5777 = bitcast i16* %5776 to <16 x i16>*
  %5778 = load <16 x i16>, <16 x i16>* %5777, align 2, !tbaa !399
  %5779 = getelementptr inbounds i16, i16* %5775, i64 -16
  %5780 = bitcast i16* %5779 to <16 x i16>*
  %5781 = load <16 x i16>, <16 x i16>* %5780, align 2, !tbaa !399
  %5782 = zext i32 %.pre-phi3453 to i64
  %5783 = mul nsw i64 %5782, %112
  %5784 = add nsw i64 %5783, %94
  %5785 = getelementptr inbounds i16, i16* %blur_x, i64 %5784
  %5786 = getelementptr inbounds i16, i16* %5785, i64 -32
  %5787 = bitcast i16* %5786 to <16 x i16>*
  %5788 = load <16 x i16>, <16 x i16>* %5787, align 2, !tbaa !399
  %5789 = getelementptr inbounds i16, i16* %5785, i64 -16
  %5790 = bitcast i16* %5789 to <16 x i16>*
  %5791 = load <16 x i16>, <16 x i16>* %5790, align 2, !tbaa !399
  %5792 = mul nsw i64 %5753, %112
  %5793 = add nsw i64 %5792, %94
  %5794 = getelementptr inbounds i16, i16* %blur_x, i64 %5793
  %5795 = getelementptr inbounds i16, i16* %5794, i64 -32
  %5796 = bitcast i16* %5795 to <16 x i16>*
  %5797 = load <16 x i16>, <16 x i16>* %5796, align 2, !tbaa !399
  %5798 = getelementptr inbounds i16, i16* %5794, i64 -16
  %5799 = bitcast i16* %5798 to <16 x i16>*
  %5800 = load <16 x i16>, <16 x i16>* %5799, align 2, !tbaa !399
  %5801 = zext i32 %.pre-phi3457 to i64
  %5802 = mul nsw i64 %5801, %112
  %5803 = add nsw i64 %5802, %94
  %5804 = getelementptr inbounds i16, i16* %blur_x, i64 %5803
  %5805 = getelementptr inbounds i16, i16* %5804, i64 -32
  %5806 = bitcast i16* %5805 to <16 x i16>*
  %5807 = load <16 x i16>, <16 x i16>* %5806, align 2, !tbaa !399
  %5808 = getelementptr inbounds i16, i16* %5804, i64 -16
  %5809 = bitcast i16* %5808 to <16 x i16>*
  %5810 = load <16 x i16>, <16 x i16>* %5809, align 2, !tbaa !399
  %5811 = add <16 x i16> %5778, %5768
  %5812 = add <16 x i16> %5811, %5788
  %5813 = add <16 x i16> %5812, %5797
  %5814 = add <16 x i16> %5813, %5807
  %5815 = add <16 x i16> %5781, %5771
  %5816 = add <16 x i16> %5815, %5791
  %5817 = add <16 x i16> %5816, %5800
  %5818 = add <16 x i16> %5817, %5810
  %5819 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5814, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5818, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5821 = shufflevector <16 x i16> %5819, <16 x i16> %5820, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5822 = lshr <32 x i16> %5821, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5823 = shufflevector <32 x i16> %5822, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5824 = sext i32 %a26 to i64
  %5825 = add nsw i64 %5824, 9
  %5826 = mul nsw i64 %5825, %113
  %5827 = add nsw i64 %115, %5826
  %5828 = getelementptr inbounds i16, i16* %66, i64 %5827
  %5829 = getelementptr inbounds i16, i16* %5828, i64 -32
  %5830 = bitcast i16* %5829 to <16 x i16>*
  store <16 x i16> %5823, <16 x i16>* %5830, align 2, !tbaa !401
  %5831 = shufflevector <32 x i16> %5822, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5832 = getelementptr inbounds i16, i16* %5828, i64 -16
  %5833 = bitcast i16* %5832 to <16 x i16>*
  store <16 x i16> %5831, <16 x i16>* %5833, align 2, !tbaa !401
  br label %after_bb289

"for blur_y.s0.x.x.rebased294":                   ; preds = %"for blur_y.s0.x.x.rebased294.preheader", %"consume blur_x301"
  %indvars.iv3286 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased294.preheader" ], [ %indvars.iv.next3287, %"consume blur_x301" ]
  %5834 = add nsw i64 %indvars.iv3286, %101
  %5835 = icmp slt i64 %5834, 1
  %5836 = trunc i64 %5834 to i32
  %5837 = shl nsw i32 %5836, 5
  %5838 = icmp sgt i32 %4, %5837
  %5839 = or i1 %5835, %5838
  br i1 %5839, label %"produce blur_x300", label %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge"

"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased294"
  %.pre3488 = shl nsw i64 %5834, 5
  br label %"consume blur_x301"

"end for blur_y.s0.x.x.rebased295":               ; preds = %"consume blur_x301", %after_bb289
  br i1 %102, label %"for blur_y.s0.x.x.rebased302.preheader", label %"end for blur_y.s0.x.x.rebased303", !prof !386

"for blur_y.s0.x.x.rebased302.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased295"
  %5840 = sext i32 %t1722 to i64
  %5841 = zext i32 %.pre-phi3449 to i64
  %5842 = mul nsw i64 %5841, %112
  %5843 = sub nsw i64 %5842, %96
  %5844 = zext i32 %.pre-phi3445 to i64
  %5845 = mul nsw i64 %5844, %112
  %5846 = sub nsw i64 %5845, %96
  %5847 = zext i32 %.pre-phi3453 to i64
  %5848 = mul nsw i64 %5847, %112
  %5849 = sub nsw i64 %5848, %96
  %5850 = zext i32 %.pre-phi3463 to i64
  %5851 = mul nsw i64 %5850, %112
  %5852 = sub nsw i64 %5851, %96
  %5853 = zext i32 %.pre-phi3457 to i64
  %5854 = mul nsw i64 %5853, %112
  %5855 = sub nsw i64 %5854, %96
  %5856 = sext i32 %a26 to i64
  %5857 = add nsw i64 %5856, 9
  %5858 = mul nsw i64 %5857, %113
  %5859 = add nsw i64 %5858, %116
  br label %"for blur_y.s0.x.x.rebased302"

"produce blur_x300":                              ; preds = %"for blur_y.s0.x.x.rebased294"
  %t856 = add nsw i32 %5837, %t1849
  %5860 = sext i32 %t856 to i64
  %5861 = getelementptr inbounds i16, i16* %read_input, i64 %5860
  %5862 = getelementptr inbounds i16, i16* %5861, i64 1
  %5863 = bitcast i16* %5862 to <16 x i16>*
  %5864 = load <16 x i16>, <16 x i16>* %5863, align 2, !tbaa !396
  %5865 = getelementptr inbounds i16, i16* %5861, i64 17
  %5866 = bitcast i16* %5865 to <16 x i16>*
  %5867 = load <16 x i16>, <16 x i16>* %5866, align 2, !tbaa !396
  %5868 = bitcast i16* %5861 to <16 x i16>*
  %5869 = load <16 x i16>, <16 x i16>* %5868, align 2, !tbaa !396
  %5870 = getelementptr inbounds i16, i16* %5861, i64 16
  %5871 = bitcast i16* %5870 to <16 x i16>*
  %5872 = load <16 x i16>, <16 x i16>* %5871, align 2, !tbaa !396
  %5873 = getelementptr inbounds i16, i16* %5861, i64 2
  %5874 = bitcast i16* %5873 to <16 x i16>*
  %5875 = load <16 x i16>, <16 x i16>* %5874, align 2, !tbaa !396
  %5876 = getelementptr inbounds i16, i16* %5861, i64 18
  %5877 = bitcast i16* %5876 to <16 x i16>*
  %5878 = load <16 x i16>, <16 x i16>* %5877, align 2, !tbaa !396
  %5879 = getelementptr inbounds i16, i16* %5861, i64 4
  %5880 = bitcast i16* %5879 to <16 x i16>*
  %5881 = load <16 x i16>, <16 x i16>* %5880, align 2, !tbaa !396
  %5882 = getelementptr inbounds i16, i16* %5861, i64 20
  %5883 = bitcast i16* %5882 to <16 x i16>*
  %5884 = load <16 x i16>, <16 x i16>* %5883, align 2, !tbaa !396
  %5885 = getelementptr inbounds i16, i16* %5861, i64 3
  %5886 = bitcast i16* %5885 to <16 x i16>*
  %5887 = load <16 x i16>, <16 x i16>* %5886, align 2, !tbaa !396
  %5888 = getelementptr inbounds i16, i16* %5861, i64 19
  %5889 = bitcast i16* %5888 to <16 x i16>*
  %5890 = load <16 x i16>, <16 x i16>* %5889, align 2, !tbaa !396
  %5891 = add <16 x i16> %5869, %5864
  %5892 = add <16 x i16> %5891, %5875
  %5893 = add <16 x i16> %5892, %5881
  %5894 = add <16 x i16> %5893, %5887
  %5895 = add <16 x i16> %5872, %5867
  %5896 = add <16 x i16> %5895, %5878
  %5897 = add <16 x i16> %5896, %5884
  %5898 = add <16 x i16> %5897, %5890
  %5899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5894, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5898, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5901 = shufflevector <16 x i16> %5899, <16 x i16> %5900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5902 = lshr <32 x i16> %5901, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5903 = shufflevector <32 x i16> %5902, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5904 = shl nsw i64 %5834, 5
  %5905 = add nsw i64 %5904, %5689
  %5906 = getelementptr inbounds i16, i16* %blur_x, i64 %5905
  %5907 = bitcast i16* %5906 to <16 x i16>*
  store <16 x i16> %5903, <16 x i16>* %5907, align 2, !tbaa !399
  %5908 = shufflevector <32 x i16> %5902, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5909 = getelementptr inbounds i16, i16* %5906, i64 16
  %5910 = bitcast i16* %5909 to <16 x i16>*
  store <16 x i16> %5908, <16 x i16>* %5910, align 2, !tbaa !399
  br label %"consume blur_x301"

"consume blur_x301":                              ; preds = %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge", %"produce blur_x300"
  %.pre-phi3489 = phi i64 [ %.pre3488, %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge" ], [ %5904, %"produce blur_x300" ]
  %5911 = add nsw i64 %5692, %.pre-phi3489
  %5912 = getelementptr inbounds i16, i16* %blur_x, i64 %5911
  %5913 = bitcast i16* %5912 to <16 x i16>*
  %5914 = load <16 x i16>, <16 x i16>* %5913, align 2, !tbaa !399
  %5915 = getelementptr inbounds i16, i16* %5912, i64 16
  %5916 = bitcast i16* %5915 to <16 x i16>*
  %5917 = load <16 x i16>, <16 x i16>* %5916, align 2, !tbaa !399
  %5918 = add nsw i64 %5695, %.pre-phi3489
  %5919 = getelementptr inbounds i16, i16* %blur_x, i64 %5918
  %5920 = bitcast i16* %5919 to <16 x i16>*
  %5921 = load <16 x i16>, <16 x i16>* %5920, align 2, !tbaa !399
  %5922 = getelementptr inbounds i16, i16* %5919, i64 16
  %5923 = bitcast i16* %5922 to <16 x i16>*
  %5924 = load <16 x i16>, <16 x i16>* %5923, align 2, !tbaa !399
  %5925 = add nsw i64 %5698, %.pre-phi3489
  %5926 = getelementptr inbounds i16, i16* %blur_x, i64 %5925
  %5927 = bitcast i16* %5926 to <16 x i16>*
  %5928 = load <16 x i16>, <16 x i16>* %5927, align 2, !tbaa !399
  %5929 = getelementptr inbounds i16, i16* %5926, i64 16
  %5930 = bitcast i16* %5929 to <16 x i16>*
  %5931 = load <16 x i16>, <16 x i16>* %5930, align 2, !tbaa !399
  %5932 = add nsw i64 %5701, %.pre-phi3489
  %5933 = getelementptr inbounds i16, i16* %blur_x, i64 %5932
  %5934 = bitcast i16* %5933 to <16 x i16>*
  %5935 = load <16 x i16>, <16 x i16>* %5934, align 2, !tbaa !399
  %5936 = getelementptr inbounds i16, i16* %5933, i64 16
  %5937 = bitcast i16* %5936 to <16 x i16>*
  %5938 = load <16 x i16>, <16 x i16>* %5937, align 2, !tbaa !399
  %5939 = add nsw i64 %5704, %.pre-phi3489
  %5940 = getelementptr inbounds i16, i16* %blur_x, i64 %5939
  %5941 = bitcast i16* %5940 to <16 x i16>*
  %5942 = load <16 x i16>, <16 x i16>* %5941, align 2, !tbaa !399
  %5943 = getelementptr inbounds i16, i16* %5940, i64 16
  %5944 = bitcast i16* %5943 to <16 x i16>*
  %5945 = load <16 x i16>, <16 x i16>* %5944, align 2, !tbaa !399
  %5946 = add <16 x i16> %5921, %5914
  %5947 = add <16 x i16> %5946, %5928
  %5948 = add <16 x i16> %5947, %5935
  %5949 = add <16 x i16> %5948, %5942
  %5950 = add <16 x i16> %5924, %5917
  %5951 = add <16 x i16> %5950, %5931
  %5952 = add <16 x i16> %5951, %5938
  %5953 = add <16 x i16> %5952, %5945
  %5954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5949, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5953, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5956 = shufflevector <16 x i16> %5954, <16 x i16> %5955, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5957 = lshr <32 x i16> %5956, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5958 = shufflevector <32 x i16> %5957, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5959 = add nsw i64 %5708, %.pre-phi3489
  %5960 = getelementptr inbounds i16, i16* %66, i64 %5959
  %5961 = bitcast i16* %5960 to <16 x i16>*
  store <16 x i16> %5958, <16 x i16>* %5961, align 2, !tbaa !401
  %5962 = shufflevector <32 x i16> %5957, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5963 = getelementptr inbounds i16, i16* %5960, i64 16
  %5964 = bitcast i16* %5963 to <16 x i16>*
  store <16 x i16> %5962, <16 x i16>* %5964, align 2, !tbaa !401
  %indvars.iv.next3287 = add nuw nsw i64 %indvars.iv3286, 1
  %.not2739 = icmp eq i64 %indvars.iv.next3287, %184
  br i1 %.not2739, label %"end for blur_y.s0.x.x.rebased295", label %"for blur_y.s0.x.x.rebased294"

"for blur_y.s0.x.x.rebased302":                   ; preds = %"for blur_y.s0.x.x.rebased302.preheader", %"consume blur_x310"
  %blur_y.s0.x.x.rebased304 = phi i32 [ %6077, %"consume blur_x310" ], [ 0, %"for blur_y.s0.x.x.rebased302.preheader" ]
  %5965 = add nsw i32 %blur_y.s0.x.x.rebased304, %t1626
  %a168 = shl nsw i32 %5965, 5
  %5966 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %5966, i32 %a168, i32 %a14
  %5967 = icmp slt i32 %5965, 1
  %5968 = icmp sgt i32 %4, %a168
  %5969 = or i1 %5967, %5968
  br i1 %5969, label %"produce blur_x308", label %"consume blur_x310"

"end for blur_y.s0.x.x.rebased303":               ; preds = %"consume blur_x310", %"end for blur_y.s0.x.x.rebased295"
  br i1 %34, label %"produce blur_x314", label %after_bb311

"produce blur_x308":                              ; preds = %"for blur_y.s0.x.x.rebased302"
  %5970 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s309 = select i1 %5970, i32 %b174, i32 %4
  %t861 = add nsw i32 %blur_x.s0.x.v1.base.s309, %t1849
  %5971 = sext i32 %t861 to i64
  %5972 = getelementptr inbounds i16, i16* %read_input, i64 %5971
  %5973 = getelementptr inbounds i16, i16* %5972, i64 1
  %5974 = bitcast i16* %5973 to <16 x i16>*
  %5975 = load <16 x i16>, <16 x i16>* %5974, align 2, !tbaa !396
  %5976 = getelementptr inbounds i16, i16* %5972, i64 17
  %5977 = bitcast i16* %5976 to <16 x i16>*
  %5978 = load <16 x i16>, <16 x i16>* %5977, align 2, !tbaa !396
  %5979 = bitcast i16* %5972 to <16 x i16>*
  %5980 = load <16 x i16>, <16 x i16>* %5979, align 2, !tbaa !396
  %5981 = getelementptr inbounds i16, i16* %5972, i64 16
  %5982 = bitcast i16* %5981 to <16 x i16>*
  %5983 = load <16 x i16>, <16 x i16>* %5982, align 2, !tbaa !396
  %5984 = getelementptr inbounds i16, i16* %5972, i64 2
  %5985 = bitcast i16* %5984 to <16 x i16>*
  %5986 = load <16 x i16>, <16 x i16>* %5985, align 2, !tbaa !396
  %5987 = getelementptr inbounds i16, i16* %5972, i64 18
  %5988 = bitcast i16* %5987 to <16 x i16>*
  %5989 = load <16 x i16>, <16 x i16>* %5988, align 2, !tbaa !396
  %5990 = getelementptr inbounds i16, i16* %5972, i64 4
  %5991 = bitcast i16* %5990 to <16 x i16>*
  %5992 = load <16 x i16>, <16 x i16>* %5991, align 2, !tbaa !396
  %5993 = getelementptr inbounds i16, i16* %5972, i64 20
  %5994 = bitcast i16* %5993 to <16 x i16>*
  %5995 = load <16 x i16>, <16 x i16>* %5994, align 2, !tbaa !396
  %5996 = getelementptr inbounds i16, i16* %5972, i64 3
  %5997 = bitcast i16* %5996 to <16 x i16>*
  %5998 = load <16 x i16>, <16 x i16>* %5997, align 2, !tbaa !396
  %5999 = getelementptr inbounds i16, i16* %5972, i64 19
  %6000 = bitcast i16* %5999 to <16 x i16>*
  %6001 = load <16 x i16>, <16 x i16>* %6000, align 2, !tbaa !396
  %6002 = add <16 x i16> %5980, %5975
  %6003 = add <16 x i16> %6002, %5986
  %6004 = add <16 x i16> %6003, %5992
  %6005 = add <16 x i16> %6004, %5998
  %6006 = add <16 x i16> %5983, %5978
  %6007 = add <16 x i16> %6006, %5989
  %6008 = add <16 x i16> %6007, %5995
  %6009 = add <16 x i16> %6008, %6001
  %6010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6005, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6009, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6012 = shufflevector <16 x i16> %6010, <16 x i16> %6011, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6013 = lshr <32 x i16> %6012, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6014 = shufflevector <32 x i16> %6013, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6015 = sext i32 %blur_x.s0.x.v1.base.s309 to i64
  %6016 = add nsw i64 %6015, %5840
  %6017 = getelementptr inbounds i16, i16* %blur_x, i64 %6016
  %6018 = bitcast i16* %6017 to <16 x i16>*
  store <16 x i16> %6014, <16 x i16>* %6018, align 2, !tbaa !399
  %6019 = shufflevector <32 x i16> %6013, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6020 = getelementptr inbounds i16, i16* %6017, i64 16
  %6021 = bitcast i16* %6020 to <16 x i16>*
  store <16 x i16> %6019, <16 x i16>* %6021, align 2, !tbaa !399
  br label %"consume blur_x310"

"consume blur_x310":                              ; preds = %"for blur_y.s0.x.x.rebased302", %"produce blur_x308"
  %6022 = sext i32 %b174 to i64
  %6023 = add nsw i64 %5843, %6022
  %6024 = getelementptr inbounds i16, i16* %blur_x, i64 %6023
  %6025 = bitcast i16* %6024 to <16 x i16>*
  %6026 = load <16 x i16>, <16 x i16>* %6025, align 2, !tbaa !399
  %6027 = getelementptr inbounds i16, i16* %6024, i64 16
  %6028 = bitcast i16* %6027 to <16 x i16>*
  %6029 = load <16 x i16>, <16 x i16>* %6028, align 2, !tbaa !399
  %6030 = add nsw i64 %5846, %6022
  %6031 = getelementptr inbounds i16, i16* %blur_x, i64 %6030
  %6032 = bitcast i16* %6031 to <16 x i16>*
  %6033 = load <16 x i16>, <16 x i16>* %6032, align 2, !tbaa !399
  %6034 = getelementptr inbounds i16, i16* %6031, i64 16
  %6035 = bitcast i16* %6034 to <16 x i16>*
  %6036 = load <16 x i16>, <16 x i16>* %6035, align 2, !tbaa !399
  %6037 = add nsw i64 %5849, %6022
  %6038 = getelementptr inbounds i16, i16* %blur_x, i64 %6037
  %6039 = bitcast i16* %6038 to <16 x i16>*
  %6040 = load <16 x i16>, <16 x i16>* %6039, align 2, !tbaa !399
  %6041 = getelementptr inbounds i16, i16* %6038, i64 16
  %6042 = bitcast i16* %6041 to <16 x i16>*
  %6043 = load <16 x i16>, <16 x i16>* %6042, align 2, !tbaa !399
  %6044 = add nsw i64 %5852, %6022
  %6045 = getelementptr inbounds i16, i16* %blur_x, i64 %6044
  %6046 = bitcast i16* %6045 to <16 x i16>*
  %6047 = load <16 x i16>, <16 x i16>* %6046, align 2, !tbaa !399
  %6048 = getelementptr inbounds i16, i16* %6045, i64 16
  %6049 = bitcast i16* %6048 to <16 x i16>*
  %6050 = load <16 x i16>, <16 x i16>* %6049, align 2, !tbaa !399
  %6051 = add nsw i64 %5855, %6022
  %6052 = getelementptr inbounds i16, i16* %blur_x, i64 %6051
  %6053 = bitcast i16* %6052 to <16 x i16>*
  %6054 = load <16 x i16>, <16 x i16>* %6053, align 2, !tbaa !399
  %6055 = getelementptr inbounds i16, i16* %6052, i64 16
  %6056 = bitcast i16* %6055 to <16 x i16>*
  %6057 = load <16 x i16>, <16 x i16>* %6056, align 2, !tbaa !399
  %6058 = add <16 x i16> %6033, %6026
  %6059 = add <16 x i16> %6058, %6040
  %6060 = add <16 x i16> %6059, %6047
  %6061 = add <16 x i16> %6060, %6054
  %6062 = add <16 x i16> %6036, %6029
  %6063 = add <16 x i16> %6062, %6043
  %6064 = add <16 x i16> %6063, %6050
  %6065 = add <16 x i16> %6064, %6057
  %6066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6061, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6065, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6068 = shufflevector <16 x i16> %6066, <16 x i16> %6067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6069 = lshr <32 x i16> %6068, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6070 = shufflevector <32 x i16> %6069, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6071 = add nsw i64 %5859, %6022
  %6072 = getelementptr inbounds i16, i16* %66, i64 %6071
  %6073 = bitcast i16* %6072 to <16 x i16>*
  store <16 x i16> %6070, <16 x i16>* %6073, align 2, !tbaa !401
  %6074 = shufflevector <32 x i16> %6069, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6075 = getelementptr inbounds i16, i16* %6072, i64 16
  %6076 = bitcast i16* %6075 to <16 x i16>*
  store <16 x i16> %6074, <16 x i16>* %6076, align 2, !tbaa !401
  %6077 = add nuw nsw i32 %blur_y.s0.x.x.rebased304, 1
  %.not2738 = icmp eq i32 %6077, %t1683
  br i1 %.not2738, label %"end for blur_y.s0.x.x.rebased303", label %"for blur_y.s0.x.x.rebased302"

after_bb311:                                      ; preds = %"end for blur_y.s0.x.x.rebased303", %"produce blur_x314"
  br i1 %100, label %"for blur_y.s0.x.x.rebased316.preheader", label %"end for blur_y.s0.x.x.rebased317", !prof !386

"for blur_y.s0.x.x.rebased316.preheader":         ; preds = %after_bb311
  %6078 = sext i32 %t1738 to i64
  %6079 = zext i32 %.pre-phi3453 to i64
  %6080 = mul nsw i64 %6079, %112
  %6081 = sub nsw i64 %6080, %96
  %6082 = zext i32 %.pre-phi3449 to i64
  %6083 = mul nsw i64 %6082, %112
  %6084 = sub nsw i64 %6083, %96
  %6085 = zext i32 %.pre-phi3457 to i64
  %6086 = mul nsw i64 %6085, %112
  %6087 = sub nsw i64 %6086, %96
  %6088 = zext i32 %.pre-phi3469 to i64
  %6089 = mul nsw i64 %6088, %112
  %6090 = sub nsw i64 %6089, %96
  %6091 = zext i32 %.pre-phi3463 to i64
  %6092 = mul nsw i64 %6091, %112
  %6093 = sub nsw i64 %6092, %96
  %6094 = sext i32 %a26 to i64
  %6095 = add nsw i64 %6094, 10
  %6096 = mul nsw i64 %6095, %113
  %6097 = add nsw i64 %6096, %116
  br label %"for blur_y.s0.x.x.rebased316"

"produce blur_x314":                              ; preds = %"end for blur_y.s0.x.x.rebased303"
  %6098 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %6099 = getelementptr inbounds i16, i16* %6098, i64 -31
  %6100 = bitcast i16* %6099 to <16 x i16>*
  %6101 = load <16 x i16>, <16 x i16>* %6100, align 2, !tbaa !396
  %6102 = getelementptr inbounds i16, i16* %6098, i64 -15
  %6103 = bitcast i16* %6102 to <16 x i16>*
  %6104 = load <16 x i16>, <16 x i16>* %6103, align 2, !tbaa !396
  %6105 = getelementptr inbounds i16, i16* %6098, i64 -32
  %6106 = bitcast i16* %6105 to <16 x i16>*
  %6107 = load <16 x i16>, <16 x i16>* %6106, align 2, !tbaa !396
  %6108 = getelementptr inbounds i16, i16* %6098, i64 -16
  %6109 = bitcast i16* %6108 to <16 x i16>*
  %6110 = load <16 x i16>, <16 x i16>* %6109, align 2, !tbaa !396
  %6111 = getelementptr inbounds i16, i16* %6098, i64 -30
  %6112 = bitcast i16* %6111 to <16 x i16>*
  %6113 = load <16 x i16>, <16 x i16>* %6112, align 2, !tbaa !396
  %6114 = getelementptr inbounds i16, i16* %6098, i64 -14
  %6115 = bitcast i16* %6114 to <16 x i16>*
  %6116 = load <16 x i16>, <16 x i16>* %6115, align 2, !tbaa !396
  %6117 = getelementptr inbounds i16, i16* %6098, i64 -28
  %6118 = bitcast i16* %6117 to <16 x i16>*
  %6119 = load <16 x i16>, <16 x i16>* %6118, align 2, !tbaa !396
  %6120 = getelementptr inbounds i16, i16* %6098, i64 -12
  %6121 = bitcast i16* %6120 to <16 x i16>*
  %6122 = load <16 x i16>, <16 x i16>* %6121, align 2, !tbaa !396
  %6123 = getelementptr inbounds i16, i16* %6098, i64 -29
  %6124 = bitcast i16* %6123 to <16 x i16>*
  %6125 = load <16 x i16>, <16 x i16>* %6124, align 2, !tbaa !396
  %6126 = getelementptr inbounds i16, i16* %6098, i64 -13
  %6127 = bitcast i16* %6126 to <16 x i16>*
  %6128 = load <16 x i16>, <16 x i16>* %6127, align 2, !tbaa !396
  %6129 = add <16 x i16> %6107, %6101
  %6130 = add <16 x i16> %6129, %6113
  %6131 = add <16 x i16> %6130, %6119
  %6132 = add <16 x i16> %6131, %6125
  %6133 = add <16 x i16> %6110, %6104
  %6134 = add <16 x i16> %6133, %6116
  %6135 = add <16 x i16> %6134, %6122
  %6136 = add <16 x i16> %6135, %6128
  %6137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6132, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6136, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6139 = shufflevector <16 x i16> %6137, <16 x i16> %6138, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6140 = lshr <32 x i16> %6139, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6141 = shufflevector <32 x i16> %6140, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6142 = zext i32 %.pre-phi3469 to i64
  %6143 = mul nsw i64 %97, %6142
  %6144 = add nsw i64 %99, %6143
  %6145 = getelementptr inbounds i16, i16* %blur_x, i64 %6144
  %6146 = getelementptr inbounds i16, i16* %6145, i64 -32
  %6147 = bitcast i16* %6146 to <16 x i16>*
  store <16 x i16> %6141, <16 x i16>* %6147, align 2, !tbaa !399
  %6148 = shufflevector <32 x i16> %6140, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6149 = getelementptr inbounds i16, i16* %6145, i64 -16
  %6150 = bitcast i16* %6149 to <16 x i16>*
  store <16 x i16> %6148, <16 x i16>* %6150, align 2, !tbaa !399
  %6151 = zext i32 %.pre-phi3453 to i64
  %6152 = mul nsw i64 %6151, %112
  %6153 = add nsw i64 %6152, %94
  %6154 = getelementptr inbounds i16, i16* %blur_x, i64 %6153
  %6155 = getelementptr inbounds i16, i16* %6154, i64 -32
  %6156 = bitcast i16* %6155 to <16 x i16>*
  %6157 = load <16 x i16>, <16 x i16>* %6156, align 2, !tbaa !399
  %6158 = getelementptr inbounds i16, i16* %6154, i64 -16
  %6159 = bitcast i16* %6158 to <16 x i16>*
  %6160 = load <16 x i16>, <16 x i16>* %6159, align 2, !tbaa !399
  %6161 = zext i32 %.pre-phi3449 to i64
  %6162 = mul nsw i64 %6161, %112
  %6163 = add nsw i64 %6162, %94
  %6164 = getelementptr inbounds i16, i16* %blur_x, i64 %6163
  %6165 = getelementptr inbounds i16, i16* %6164, i64 -32
  %6166 = bitcast i16* %6165 to <16 x i16>*
  %6167 = load <16 x i16>, <16 x i16>* %6166, align 2, !tbaa !399
  %6168 = getelementptr inbounds i16, i16* %6164, i64 -16
  %6169 = bitcast i16* %6168 to <16 x i16>*
  %6170 = load <16 x i16>, <16 x i16>* %6169, align 2, !tbaa !399
  %6171 = zext i32 %.pre-phi3457 to i64
  %6172 = mul nsw i64 %6171, %112
  %6173 = add nsw i64 %6172, %94
  %6174 = getelementptr inbounds i16, i16* %blur_x, i64 %6173
  %6175 = getelementptr inbounds i16, i16* %6174, i64 -32
  %6176 = bitcast i16* %6175 to <16 x i16>*
  %6177 = load <16 x i16>, <16 x i16>* %6176, align 2, !tbaa !399
  %6178 = getelementptr inbounds i16, i16* %6174, i64 -16
  %6179 = bitcast i16* %6178 to <16 x i16>*
  %6180 = load <16 x i16>, <16 x i16>* %6179, align 2, !tbaa !399
  %6181 = mul nsw i64 %6142, %112
  %6182 = add nsw i64 %6181, %94
  %6183 = getelementptr inbounds i16, i16* %blur_x, i64 %6182
  %6184 = getelementptr inbounds i16, i16* %6183, i64 -32
  %6185 = bitcast i16* %6184 to <16 x i16>*
  %6186 = load <16 x i16>, <16 x i16>* %6185, align 2, !tbaa !399
  %6187 = getelementptr inbounds i16, i16* %6183, i64 -16
  %6188 = bitcast i16* %6187 to <16 x i16>*
  %6189 = load <16 x i16>, <16 x i16>* %6188, align 2, !tbaa !399
  %6190 = zext i32 %.pre-phi3463 to i64
  %6191 = mul nsw i64 %6190, %112
  %6192 = add nsw i64 %6191, %94
  %6193 = getelementptr inbounds i16, i16* %blur_x, i64 %6192
  %6194 = getelementptr inbounds i16, i16* %6193, i64 -32
  %6195 = bitcast i16* %6194 to <16 x i16>*
  %6196 = load <16 x i16>, <16 x i16>* %6195, align 2, !tbaa !399
  %6197 = getelementptr inbounds i16, i16* %6193, i64 -16
  %6198 = bitcast i16* %6197 to <16 x i16>*
  %6199 = load <16 x i16>, <16 x i16>* %6198, align 2, !tbaa !399
  %6200 = add <16 x i16> %6167, %6157
  %6201 = add <16 x i16> %6200, %6177
  %6202 = add <16 x i16> %6201, %6186
  %6203 = add <16 x i16> %6202, %6196
  %6204 = add <16 x i16> %6170, %6160
  %6205 = add <16 x i16> %6204, %6180
  %6206 = add <16 x i16> %6205, %6189
  %6207 = add <16 x i16> %6206, %6199
  %6208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6203, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6209 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6207, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6210 = shufflevector <16 x i16> %6208, <16 x i16> %6209, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6211 = lshr <32 x i16> %6210, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6212 = shufflevector <32 x i16> %6211, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6213 = sext i32 %a26 to i64
  %6214 = add nsw i64 %6213, 10
  %6215 = mul nsw i64 %6214, %113
  %6216 = add nsw i64 %115, %6215
  %6217 = getelementptr inbounds i16, i16* %66, i64 %6216
  %6218 = getelementptr inbounds i16, i16* %6217, i64 -32
  %6219 = bitcast i16* %6218 to <16 x i16>*
  store <16 x i16> %6212, <16 x i16>* %6219, align 2, !tbaa !401
  %6220 = shufflevector <32 x i16> %6211, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6221 = getelementptr inbounds i16, i16* %6217, i64 -16
  %6222 = bitcast i16* %6221 to <16 x i16>*
  store <16 x i16> %6220, <16 x i16>* %6222, align 2, !tbaa !401
  br label %after_bb311

"for blur_y.s0.x.x.rebased316":                   ; preds = %"for blur_y.s0.x.x.rebased316.preheader", %"consume blur_x323"
  %indvars.iv3289 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased316.preheader" ], [ %indvars.iv.next3290, %"consume blur_x323" ]
  %6223 = add nsw i64 %indvars.iv3289, %101
  %6224 = icmp slt i64 %6223, 1
  %6225 = trunc i64 %6223 to i32
  %6226 = shl nsw i32 %6225, 5
  %6227 = icmp sgt i32 %4, %6226
  %6228 = or i1 %6224, %6227
  br i1 %6228, label %"produce blur_x322", label %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge"

"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased316"
  %.pre3490 = shl nsw i64 %6223, 5
  br label %"consume blur_x323"

"end for blur_y.s0.x.x.rebased317":               ; preds = %"consume blur_x323", %after_bb311
  br i1 %102, label %"for blur_y.s0.x.x.rebased324.preheader", label %"end for blur_y.s0.x.x.rebased325", !prof !386

"for blur_y.s0.x.x.rebased324.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased317"
  %6229 = sext i32 %t1738 to i64
  %6230 = zext i32 %.pre-phi3453 to i64
  %6231 = mul nsw i64 %6230, %112
  %6232 = sub nsw i64 %6231, %96
  %6233 = zext i32 %.pre-phi3449 to i64
  %6234 = mul nsw i64 %6233, %112
  %6235 = sub nsw i64 %6234, %96
  %6236 = zext i32 %.pre-phi3457 to i64
  %6237 = mul nsw i64 %6236, %112
  %6238 = sub nsw i64 %6237, %96
  %6239 = zext i32 %.pre-phi3469 to i64
  %6240 = mul nsw i64 %6239, %112
  %6241 = sub nsw i64 %6240, %96
  %6242 = zext i32 %.pre-phi3463 to i64
  %6243 = mul nsw i64 %6242, %112
  %6244 = sub nsw i64 %6243, %96
  %6245 = sext i32 %a26 to i64
  %6246 = add nsw i64 %6245, 10
  %6247 = mul nsw i64 %6246, %113
  %6248 = add nsw i64 %6247, %116
  br label %"for blur_y.s0.x.x.rebased324"

"produce blur_x322":                              ; preds = %"for blur_y.s0.x.x.rebased316"
  %t872 = add nsw i32 %6226, %t1865
  %6249 = sext i32 %t872 to i64
  %6250 = getelementptr inbounds i16, i16* %read_input, i64 %6249
  %6251 = getelementptr inbounds i16, i16* %6250, i64 1
  %6252 = bitcast i16* %6251 to <16 x i16>*
  %6253 = load <16 x i16>, <16 x i16>* %6252, align 2, !tbaa !396
  %6254 = getelementptr inbounds i16, i16* %6250, i64 17
  %6255 = bitcast i16* %6254 to <16 x i16>*
  %6256 = load <16 x i16>, <16 x i16>* %6255, align 2, !tbaa !396
  %6257 = bitcast i16* %6250 to <16 x i16>*
  %6258 = load <16 x i16>, <16 x i16>* %6257, align 2, !tbaa !396
  %6259 = getelementptr inbounds i16, i16* %6250, i64 16
  %6260 = bitcast i16* %6259 to <16 x i16>*
  %6261 = load <16 x i16>, <16 x i16>* %6260, align 2, !tbaa !396
  %6262 = getelementptr inbounds i16, i16* %6250, i64 2
  %6263 = bitcast i16* %6262 to <16 x i16>*
  %6264 = load <16 x i16>, <16 x i16>* %6263, align 2, !tbaa !396
  %6265 = getelementptr inbounds i16, i16* %6250, i64 18
  %6266 = bitcast i16* %6265 to <16 x i16>*
  %6267 = load <16 x i16>, <16 x i16>* %6266, align 2, !tbaa !396
  %6268 = getelementptr inbounds i16, i16* %6250, i64 4
  %6269 = bitcast i16* %6268 to <16 x i16>*
  %6270 = load <16 x i16>, <16 x i16>* %6269, align 2, !tbaa !396
  %6271 = getelementptr inbounds i16, i16* %6250, i64 20
  %6272 = bitcast i16* %6271 to <16 x i16>*
  %6273 = load <16 x i16>, <16 x i16>* %6272, align 2, !tbaa !396
  %6274 = getelementptr inbounds i16, i16* %6250, i64 3
  %6275 = bitcast i16* %6274 to <16 x i16>*
  %6276 = load <16 x i16>, <16 x i16>* %6275, align 2, !tbaa !396
  %6277 = getelementptr inbounds i16, i16* %6250, i64 19
  %6278 = bitcast i16* %6277 to <16 x i16>*
  %6279 = load <16 x i16>, <16 x i16>* %6278, align 2, !tbaa !396
  %6280 = add <16 x i16> %6258, %6253
  %6281 = add <16 x i16> %6280, %6264
  %6282 = add <16 x i16> %6281, %6270
  %6283 = add <16 x i16> %6282, %6276
  %6284 = add <16 x i16> %6261, %6256
  %6285 = add <16 x i16> %6284, %6267
  %6286 = add <16 x i16> %6285, %6273
  %6287 = add <16 x i16> %6286, %6279
  %6288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6283, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6287, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6290 = shufflevector <16 x i16> %6288, <16 x i16> %6289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6291 = lshr <32 x i16> %6290, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6292 = shufflevector <32 x i16> %6291, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6293 = shl nsw i64 %6223, 5
  %6294 = add nsw i64 %6293, %6078
  %6295 = getelementptr inbounds i16, i16* %blur_x, i64 %6294
  %6296 = bitcast i16* %6295 to <16 x i16>*
  store <16 x i16> %6292, <16 x i16>* %6296, align 2, !tbaa !399
  %6297 = shufflevector <32 x i16> %6291, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6298 = getelementptr inbounds i16, i16* %6295, i64 16
  %6299 = bitcast i16* %6298 to <16 x i16>*
  store <16 x i16> %6297, <16 x i16>* %6299, align 2, !tbaa !399
  br label %"consume blur_x323"

"consume blur_x323":                              ; preds = %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge", %"produce blur_x322"
  %.pre-phi3491 = phi i64 [ %.pre3490, %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge" ], [ %6293, %"produce blur_x322" ]
  %6300 = add nsw i64 %6081, %.pre-phi3491
  %6301 = getelementptr inbounds i16, i16* %blur_x, i64 %6300
  %6302 = bitcast i16* %6301 to <16 x i16>*
  %6303 = load <16 x i16>, <16 x i16>* %6302, align 2, !tbaa !399
  %6304 = getelementptr inbounds i16, i16* %6301, i64 16
  %6305 = bitcast i16* %6304 to <16 x i16>*
  %6306 = load <16 x i16>, <16 x i16>* %6305, align 2, !tbaa !399
  %6307 = add nsw i64 %6084, %.pre-phi3491
  %6308 = getelementptr inbounds i16, i16* %blur_x, i64 %6307
  %6309 = bitcast i16* %6308 to <16 x i16>*
  %6310 = load <16 x i16>, <16 x i16>* %6309, align 2, !tbaa !399
  %6311 = getelementptr inbounds i16, i16* %6308, i64 16
  %6312 = bitcast i16* %6311 to <16 x i16>*
  %6313 = load <16 x i16>, <16 x i16>* %6312, align 2, !tbaa !399
  %6314 = add nsw i64 %6087, %.pre-phi3491
  %6315 = getelementptr inbounds i16, i16* %blur_x, i64 %6314
  %6316 = bitcast i16* %6315 to <16 x i16>*
  %6317 = load <16 x i16>, <16 x i16>* %6316, align 2, !tbaa !399
  %6318 = getelementptr inbounds i16, i16* %6315, i64 16
  %6319 = bitcast i16* %6318 to <16 x i16>*
  %6320 = load <16 x i16>, <16 x i16>* %6319, align 2, !tbaa !399
  %6321 = add nsw i64 %6090, %.pre-phi3491
  %6322 = getelementptr inbounds i16, i16* %blur_x, i64 %6321
  %6323 = bitcast i16* %6322 to <16 x i16>*
  %6324 = load <16 x i16>, <16 x i16>* %6323, align 2, !tbaa !399
  %6325 = getelementptr inbounds i16, i16* %6322, i64 16
  %6326 = bitcast i16* %6325 to <16 x i16>*
  %6327 = load <16 x i16>, <16 x i16>* %6326, align 2, !tbaa !399
  %6328 = add nsw i64 %6093, %.pre-phi3491
  %6329 = getelementptr inbounds i16, i16* %blur_x, i64 %6328
  %6330 = bitcast i16* %6329 to <16 x i16>*
  %6331 = load <16 x i16>, <16 x i16>* %6330, align 2, !tbaa !399
  %6332 = getelementptr inbounds i16, i16* %6329, i64 16
  %6333 = bitcast i16* %6332 to <16 x i16>*
  %6334 = load <16 x i16>, <16 x i16>* %6333, align 2, !tbaa !399
  %6335 = add <16 x i16> %6310, %6303
  %6336 = add <16 x i16> %6335, %6317
  %6337 = add <16 x i16> %6336, %6324
  %6338 = add <16 x i16> %6337, %6331
  %6339 = add <16 x i16> %6313, %6306
  %6340 = add <16 x i16> %6339, %6320
  %6341 = add <16 x i16> %6340, %6327
  %6342 = add <16 x i16> %6341, %6334
  %6343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6338, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6342, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6345 = shufflevector <16 x i16> %6343, <16 x i16> %6344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6346 = lshr <32 x i16> %6345, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6347 = shufflevector <32 x i16> %6346, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6348 = add nsw i64 %6097, %.pre-phi3491
  %6349 = getelementptr inbounds i16, i16* %66, i64 %6348
  %6350 = bitcast i16* %6349 to <16 x i16>*
  store <16 x i16> %6347, <16 x i16>* %6350, align 2, !tbaa !401
  %6351 = shufflevector <32 x i16> %6346, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6352 = getelementptr inbounds i16, i16* %6349, i64 16
  %6353 = bitcast i16* %6352 to <16 x i16>*
  store <16 x i16> %6351, <16 x i16>* %6353, align 2, !tbaa !401
  %indvars.iv.next3290 = add nuw nsw i64 %indvars.iv3289, 1
  %.not2737 = icmp eq i64 %indvars.iv.next3290, %184
  br i1 %.not2737, label %"end for blur_y.s0.x.x.rebased317", label %"for blur_y.s0.x.x.rebased316"

"for blur_y.s0.x.x.rebased324":                   ; preds = %"for blur_y.s0.x.x.rebased324.preheader", %"consume blur_x332"
  %blur_y.s0.x.x.rebased326 = phi i32 [ %6466, %"consume blur_x332" ], [ 0, %"for blur_y.s0.x.x.rebased324.preheader" ]
  %6354 = add nsw i32 %blur_y.s0.x.x.rebased326, %t1626
  %a175 = shl nsw i32 %6354, 5
  %6355 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %6355, i32 %a175, i32 %a14
  %6356 = icmp slt i32 %6354, 1
  %6357 = icmp sgt i32 %4, %a175
  %6358 = or i1 %6356, %6357
  br i1 %6358, label %"produce blur_x330", label %"consume blur_x332"

"end for blur_y.s0.x.x.rebased325":               ; preds = %"consume blur_x332", %"end for blur_y.s0.x.x.rebased317"
  br i1 %34, label %"produce blur_x336", label %after_bb333

"produce blur_x330":                              ; preds = %"for blur_y.s0.x.x.rebased324"
  %6359 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s331 = select i1 %6359, i32 %b181, i32 %4
  %t877 = add nsw i32 %blur_x.s0.x.v1.base.s331, %t1865
  %6360 = sext i32 %t877 to i64
  %6361 = getelementptr inbounds i16, i16* %read_input, i64 %6360
  %6362 = getelementptr inbounds i16, i16* %6361, i64 1
  %6363 = bitcast i16* %6362 to <16 x i16>*
  %6364 = load <16 x i16>, <16 x i16>* %6363, align 2, !tbaa !396
  %6365 = getelementptr inbounds i16, i16* %6361, i64 17
  %6366 = bitcast i16* %6365 to <16 x i16>*
  %6367 = load <16 x i16>, <16 x i16>* %6366, align 2, !tbaa !396
  %6368 = bitcast i16* %6361 to <16 x i16>*
  %6369 = load <16 x i16>, <16 x i16>* %6368, align 2, !tbaa !396
  %6370 = getelementptr inbounds i16, i16* %6361, i64 16
  %6371 = bitcast i16* %6370 to <16 x i16>*
  %6372 = load <16 x i16>, <16 x i16>* %6371, align 2, !tbaa !396
  %6373 = getelementptr inbounds i16, i16* %6361, i64 2
  %6374 = bitcast i16* %6373 to <16 x i16>*
  %6375 = load <16 x i16>, <16 x i16>* %6374, align 2, !tbaa !396
  %6376 = getelementptr inbounds i16, i16* %6361, i64 18
  %6377 = bitcast i16* %6376 to <16 x i16>*
  %6378 = load <16 x i16>, <16 x i16>* %6377, align 2, !tbaa !396
  %6379 = getelementptr inbounds i16, i16* %6361, i64 4
  %6380 = bitcast i16* %6379 to <16 x i16>*
  %6381 = load <16 x i16>, <16 x i16>* %6380, align 2, !tbaa !396
  %6382 = getelementptr inbounds i16, i16* %6361, i64 20
  %6383 = bitcast i16* %6382 to <16 x i16>*
  %6384 = load <16 x i16>, <16 x i16>* %6383, align 2, !tbaa !396
  %6385 = getelementptr inbounds i16, i16* %6361, i64 3
  %6386 = bitcast i16* %6385 to <16 x i16>*
  %6387 = load <16 x i16>, <16 x i16>* %6386, align 2, !tbaa !396
  %6388 = getelementptr inbounds i16, i16* %6361, i64 19
  %6389 = bitcast i16* %6388 to <16 x i16>*
  %6390 = load <16 x i16>, <16 x i16>* %6389, align 2, !tbaa !396
  %6391 = add <16 x i16> %6369, %6364
  %6392 = add <16 x i16> %6391, %6375
  %6393 = add <16 x i16> %6392, %6381
  %6394 = add <16 x i16> %6393, %6387
  %6395 = add <16 x i16> %6372, %6367
  %6396 = add <16 x i16> %6395, %6378
  %6397 = add <16 x i16> %6396, %6384
  %6398 = add <16 x i16> %6397, %6390
  %6399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6394, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6398, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6401 = shufflevector <16 x i16> %6399, <16 x i16> %6400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6402 = lshr <32 x i16> %6401, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6403 = shufflevector <32 x i16> %6402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6404 = sext i32 %blur_x.s0.x.v1.base.s331 to i64
  %6405 = add nsw i64 %6404, %6229
  %6406 = getelementptr inbounds i16, i16* %blur_x, i64 %6405
  %6407 = bitcast i16* %6406 to <16 x i16>*
  store <16 x i16> %6403, <16 x i16>* %6407, align 2, !tbaa !399
  %6408 = shufflevector <32 x i16> %6402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6409 = getelementptr inbounds i16, i16* %6406, i64 16
  %6410 = bitcast i16* %6409 to <16 x i16>*
  store <16 x i16> %6408, <16 x i16>* %6410, align 2, !tbaa !399
  br label %"consume blur_x332"

"consume blur_x332":                              ; preds = %"for blur_y.s0.x.x.rebased324", %"produce blur_x330"
  %6411 = sext i32 %b181 to i64
  %6412 = add nsw i64 %6232, %6411
  %6413 = getelementptr inbounds i16, i16* %blur_x, i64 %6412
  %6414 = bitcast i16* %6413 to <16 x i16>*
  %6415 = load <16 x i16>, <16 x i16>* %6414, align 2, !tbaa !399
  %6416 = getelementptr inbounds i16, i16* %6413, i64 16
  %6417 = bitcast i16* %6416 to <16 x i16>*
  %6418 = load <16 x i16>, <16 x i16>* %6417, align 2, !tbaa !399
  %6419 = add nsw i64 %6235, %6411
  %6420 = getelementptr inbounds i16, i16* %blur_x, i64 %6419
  %6421 = bitcast i16* %6420 to <16 x i16>*
  %6422 = load <16 x i16>, <16 x i16>* %6421, align 2, !tbaa !399
  %6423 = getelementptr inbounds i16, i16* %6420, i64 16
  %6424 = bitcast i16* %6423 to <16 x i16>*
  %6425 = load <16 x i16>, <16 x i16>* %6424, align 2, !tbaa !399
  %6426 = add nsw i64 %6238, %6411
  %6427 = getelementptr inbounds i16, i16* %blur_x, i64 %6426
  %6428 = bitcast i16* %6427 to <16 x i16>*
  %6429 = load <16 x i16>, <16 x i16>* %6428, align 2, !tbaa !399
  %6430 = getelementptr inbounds i16, i16* %6427, i64 16
  %6431 = bitcast i16* %6430 to <16 x i16>*
  %6432 = load <16 x i16>, <16 x i16>* %6431, align 2, !tbaa !399
  %6433 = add nsw i64 %6241, %6411
  %6434 = getelementptr inbounds i16, i16* %blur_x, i64 %6433
  %6435 = bitcast i16* %6434 to <16 x i16>*
  %6436 = load <16 x i16>, <16 x i16>* %6435, align 2, !tbaa !399
  %6437 = getelementptr inbounds i16, i16* %6434, i64 16
  %6438 = bitcast i16* %6437 to <16 x i16>*
  %6439 = load <16 x i16>, <16 x i16>* %6438, align 2, !tbaa !399
  %6440 = add nsw i64 %6244, %6411
  %6441 = getelementptr inbounds i16, i16* %blur_x, i64 %6440
  %6442 = bitcast i16* %6441 to <16 x i16>*
  %6443 = load <16 x i16>, <16 x i16>* %6442, align 2, !tbaa !399
  %6444 = getelementptr inbounds i16, i16* %6441, i64 16
  %6445 = bitcast i16* %6444 to <16 x i16>*
  %6446 = load <16 x i16>, <16 x i16>* %6445, align 2, !tbaa !399
  %6447 = add <16 x i16> %6422, %6415
  %6448 = add <16 x i16> %6447, %6429
  %6449 = add <16 x i16> %6448, %6436
  %6450 = add <16 x i16> %6449, %6443
  %6451 = add <16 x i16> %6425, %6418
  %6452 = add <16 x i16> %6451, %6432
  %6453 = add <16 x i16> %6452, %6439
  %6454 = add <16 x i16> %6453, %6446
  %6455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6450, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6454, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6457 = shufflevector <16 x i16> %6455, <16 x i16> %6456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6458 = lshr <32 x i16> %6457, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6459 = shufflevector <32 x i16> %6458, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6460 = add nsw i64 %6248, %6411
  %6461 = getelementptr inbounds i16, i16* %66, i64 %6460
  %6462 = bitcast i16* %6461 to <16 x i16>*
  store <16 x i16> %6459, <16 x i16>* %6462, align 2, !tbaa !401
  %6463 = shufflevector <32 x i16> %6458, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6464 = getelementptr inbounds i16, i16* %6461, i64 16
  %6465 = bitcast i16* %6464 to <16 x i16>*
  store <16 x i16> %6463, <16 x i16>* %6465, align 2, !tbaa !401
  %6466 = add nuw nsw i32 %blur_y.s0.x.x.rebased326, 1
  %.not2736 = icmp eq i32 %6466, %t1683
  br i1 %.not2736, label %"end for blur_y.s0.x.x.rebased325", label %"for blur_y.s0.x.x.rebased324"

after_bb333:                                      ; preds = %"end for blur_y.s0.x.x.rebased325", %"produce blur_x336"
  br i1 %100, label %"for blur_y.s0.x.x.rebased338.preheader", label %"end for blur_y.s0.x.x.rebased339", !prof !386

"for blur_y.s0.x.x.rebased338.preheader":         ; preds = %after_bb333
  %6467 = sext i32 %t1754 to i64
  %6468 = zext i32 %.pre-phi3457 to i64
  %6469 = mul nsw i64 %6468, %112
  %6470 = sub nsw i64 %6469, %96
  %6471 = zext i32 %.pre-phi3453 to i64
  %6472 = mul nsw i64 %6471, %112
  %6473 = sub nsw i64 %6472, %96
  %6474 = zext i32 %.pre-phi3463 to i64
  %6475 = mul nsw i64 %6474, %112
  %6476 = sub nsw i64 %6475, %96
  %6477 = zext i32 %.pre-phi3475 to i64
  %6478 = mul nsw i64 %6477, %112
  %6479 = sub nsw i64 %6478, %96
  %6480 = zext i32 %.pre-phi3469 to i64
  %6481 = mul nsw i64 %6480, %112
  %6482 = sub nsw i64 %6481, %96
  %6483 = sext i32 %a26 to i64
  %6484 = add nsw i64 %6483, 11
  %6485 = mul nsw i64 %6484, %113
  %6486 = add nsw i64 %6485, %116
  br label %"for blur_y.s0.x.x.rebased338"

"produce blur_x336":                              ; preds = %"end for blur_y.s0.x.x.rebased325"
  %6487 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %6488 = getelementptr inbounds i16, i16* %6487, i64 -31
  %6489 = bitcast i16* %6488 to <16 x i16>*
  %6490 = load <16 x i16>, <16 x i16>* %6489, align 2, !tbaa !396
  %6491 = getelementptr inbounds i16, i16* %6487, i64 -15
  %6492 = bitcast i16* %6491 to <16 x i16>*
  %6493 = load <16 x i16>, <16 x i16>* %6492, align 2, !tbaa !396
  %6494 = getelementptr inbounds i16, i16* %6487, i64 -32
  %6495 = bitcast i16* %6494 to <16 x i16>*
  %6496 = load <16 x i16>, <16 x i16>* %6495, align 2, !tbaa !396
  %6497 = getelementptr inbounds i16, i16* %6487, i64 -16
  %6498 = bitcast i16* %6497 to <16 x i16>*
  %6499 = load <16 x i16>, <16 x i16>* %6498, align 2, !tbaa !396
  %6500 = getelementptr inbounds i16, i16* %6487, i64 -30
  %6501 = bitcast i16* %6500 to <16 x i16>*
  %6502 = load <16 x i16>, <16 x i16>* %6501, align 2, !tbaa !396
  %6503 = getelementptr inbounds i16, i16* %6487, i64 -14
  %6504 = bitcast i16* %6503 to <16 x i16>*
  %6505 = load <16 x i16>, <16 x i16>* %6504, align 2, !tbaa !396
  %6506 = getelementptr inbounds i16, i16* %6487, i64 -28
  %6507 = bitcast i16* %6506 to <16 x i16>*
  %6508 = load <16 x i16>, <16 x i16>* %6507, align 2, !tbaa !396
  %6509 = getelementptr inbounds i16, i16* %6487, i64 -12
  %6510 = bitcast i16* %6509 to <16 x i16>*
  %6511 = load <16 x i16>, <16 x i16>* %6510, align 2, !tbaa !396
  %6512 = getelementptr inbounds i16, i16* %6487, i64 -29
  %6513 = bitcast i16* %6512 to <16 x i16>*
  %6514 = load <16 x i16>, <16 x i16>* %6513, align 2, !tbaa !396
  %6515 = getelementptr inbounds i16, i16* %6487, i64 -13
  %6516 = bitcast i16* %6515 to <16 x i16>*
  %6517 = load <16 x i16>, <16 x i16>* %6516, align 2, !tbaa !396
  %6518 = add <16 x i16> %6496, %6490
  %6519 = add <16 x i16> %6518, %6502
  %6520 = add <16 x i16> %6519, %6508
  %6521 = add <16 x i16> %6520, %6514
  %6522 = add <16 x i16> %6499, %6493
  %6523 = add <16 x i16> %6522, %6505
  %6524 = add <16 x i16> %6523, %6511
  %6525 = add <16 x i16> %6524, %6517
  %6526 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6521, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6525, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6528 = shufflevector <16 x i16> %6526, <16 x i16> %6527, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6529 = lshr <32 x i16> %6528, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6530 = shufflevector <32 x i16> %6529, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6531 = zext i32 %.pre-phi3475 to i64
  %6532 = mul nsw i64 %97, %6531
  %6533 = add nsw i64 %99, %6532
  %6534 = getelementptr inbounds i16, i16* %blur_x, i64 %6533
  %6535 = getelementptr inbounds i16, i16* %6534, i64 -32
  %6536 = bitcast i16* %6535 to <16 x i16>*
  store <16 x i16> %6530, <16 x i16>* %6536, align 2, !tbaa !399
  %6537 = shufflevector <32 x i16> %6529, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6538 = getelementptr inbounds i16, i16* %6534, i64 -16
  %6539 = bitcast i16* %6538 to <16 x i16>*
  store <16 x i16> %6537, <16 x i16>* %6539, align 2, !tbaa !399
  %6540 = zext i32 %.pre-phi3457 to i64
  %6541 = mul nsw i64 %6540, %112
  %6542 = add nsw i64 %6541, %94
  %6543 = getelementptr inbounds i16, i16* %blur_x, i64 %6542
  %6544 = getelementptr inbounds i16, i16* %6543, i64 -32
  %6545 = bitcast i16* %6544 to <16 x i16>*
  %6546 = load <16 x i16>, <16 x i16>* %6545, align 2, !tbaa !399
  %6547 = getelementptr inbounds i16, i16* %6543, i64 -16
  %6548 = bitcast i16* %6547 to <16 x i16>*
  %6549 = load <16 x i16>, <16 x i16>* %6548, align 2, !tbaa !399
  %6550 = zext i32 %.pre-phi3453 to i64
  %6551 = mul nsw i64 %6550, %112
  %6552 = add nsw i64 %6551, %94
  %6553 = getelementptr inbounds i16, i16* %blur_x, i64 %6552
  %6554 = getelementptr inbounds i16, i16* %6553, i64 -32
  %6555 = bitcast i16* %6554 to <16 x i16>*
  %6556 = load <16 x i16>, <16 x i16>* %6555, align 2, !tbaa !399
  %6557 = getelementptr inbounds i16, i16* %6553, i64 -16
  %6558 = bitcast i16* %6557 to <16 x i16>*
  %6559 = load <16 x i16>, <16 x i16>* %6558, align 2, !tbaa !399
  %6560 = zext i32 %.pre-phi3463 to i64
  %6561 = mul nsw i64 %6560, %112
  %6562 = add nsw i64 %6561, %94
  %6563 = getelementptr inbounds i16, i16* %blur_x, i64 %6562
  %6564 = getelementptr inbounds i16, i16* %6563, i64 -32
  %6565 = bitcast i16* %6564 to <16 x i16>*
  %6566 = load <16 x i16>, <16 x i16>* %6565, align 2, !tbaa !399
  %6567 = getelementptr inbounds i16, i16* %6563, i64 -16
  %6568 = bitcast i16* %6567 to <16 x i16>*
  %6569 = load <16 x i16>, <16 x i16>* %6568, align 2, !tbaa !399
  %6570 = mul nsw i64 %6531, %112
  %6571 = add nsw i64 %6570, %94
  %6572 = getelementptr inbounds i16, i16* %blur_x, i64 %6571
  %6573 = getelementptr inbounds i16, i16* %6572, i64 -32
  %6574 = bitcast i16* %6573 to <16 x i16>*
  %6575 = load <16 x i16>, <16 x i16>* %6574, align 2, !tbaa !399
  %6576 = getelementptr inbounds i16, i16* %6572, i64 -16
  %6577 = bitcast i16* %6576 to <16 x i16>*
  %6578 = load <16 x i16>, <16 x i16>* %6577, align 2, !tbaa !399
  %6579 = zext i32 %.pre-phi3469 to i64
  %6580 = mul nsw i64 %6579, %112
  %6581 = add nsw i64 %6580, %94
  %6582 = getelementptr inbounds i16, i16* %blur_x, i64 %6581
  %6583 = getelementptr inbounds i16, i16* %6582, i64 -32
  %6584 = bitcast i16* %6583 to <16 x i16>*
  %6585 = load <16 x i16>, <16 x i16>* %6584, align 2, !tbaa !399
  %6586 = getelementptr inbounds i16, i16* %6582, i64 -16
  %6587 = bitcast i16* %6586 to <16 x i16>*
  %6588 = load <16 x i16>, <16 x i16>* %6587, align 2, !tbaa !399
  %6589 = add <16 x i16> %6556, %6546
  %6590 = add <16 x i16> %6589, %6566
  %6591 = add <16 x i16> %6590, %6575
  %6592 = add <16 x i16> %6591, %6585
  %6593 = add <16 x i16> %6559, %6549
  %6594 = add <16 x i16> %6593, %6569
  %6595 = add <16 x i16> %6594, %6578
  %6596 = add <16 x i16> %6595, %6588
  %6597 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6592, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6598 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6596, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6599 = shufflevector <16 x i16> %6597, <16 x i16> %6598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6600 = lshr <32 x i16> %6599, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6601 = shufflevector <32 x i16> %6600, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6602 = sext i32 %a26 to i64
  %6603 = add nsw i64 %6602, 11
  %6604 = mul nsw i64 %6603, %113
  %6605 = add nsw i64 %115, %6604
  %6606 = getelementptr inbounds i16, i16* %66, i64 %6605
  %6607 = getelementptr inbounds i16, i16* %6606, i64 -32
  %6608 = bitcast i16* %6607 to <16 x i16>*
  store <16 x i16> %6601, <16 x i16>* %6608, align 2, !tbaa !401
  %6609 = shufflevector <32 x i16> %6600, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6610 = getelementptr inbounds i16, i16* %6606, i64 -16
  %6611 = bitcast i16* %6610 to <16 x i16>*
  store <16 x i16> %6609, <16 x i16>* %6611, align 2, !tbaa !401
  br label %after_bb333

"for blur_y.s0.x.x.rebased338":                   ; preds = %"for blur_y.s0.x.x.rebased338.preheader", %"consume blur_x345"
  %indvars.iv3292 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased338.preheader" ], [ %indvars.iv.next3293, %"consume blur_x345" ]
  %6612 = add nsw i64 %indvars.iv3292, %101
  %6613 = icmp slt i64 %6612, 1
  %6614 = trunc i64 %6612 to i32
  %6615 = shl nsw i32 %6614, 5
  %6616 = icmp sgt i32 %4, %6615
  %6617 = or i1 %6613, %6616
  br i1 %6617, label %"produce blur_x344", label %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge"

"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased338"
  %.pre3492 = shl nsw i64 %6612, 5
  br label %"consume blur_x345"

"end for blur_y.s0.x.x.rebased339":               ; preds = %"consume blur_x345", %after_bb333
  br i1 %102, label %"for blur_y.s0.x.x.rebased346.preheader", label %"end for blur_y.s0.x.x.rebased347", !prof !386

"for blur_y.s0.x.x.rebased346.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased339"
  %6618 = sext i32 %t1754 to i64
  %6619 = zext i32 %.pre-phi3457 to i64
  %6620 = mul nsw i64 %6619, %112
  %6621 = sub nsw i64 %6620, %96
  %6622 = zext i32 %.pre-phi3453 to i64
  %6623 = mul nsw i64 %6622, %112
  %6624 = sub nsw i64 %6623, %96
  %6625 = zext i32 %.pre-phi3463 to i64
  %6626 = mul nsw i64 %6625, %112
  %6627 = sub nsw i64 %6626, %96
  %6628 = zext i32 %.pre-phi3475 to i64
  %6629 = mul nsw i64 %6628, %112
  %6630 = sub nsw i64 %6629, %96
  %6631 = zext i32 %.pre-phi3469 to i64
  %6632 = mul nsw i64 %6631, %112
  %6633 = sub nsw i64 %6632, %96
  %6634 = sext i32 %a26 to i64
  %6635 = add nsw i64 %6634, 11
  %6636 = mul nsw i64 %6635, %113
  %6637 = add nsw i64 %6636, %116
  br label %"for blur_y.s0.x.x.rebased346"

"produce blur_x344":                              ; preds = %"for blur_y.s0.x.x.rebased338"
  %t888 = add nsw i32 %6615, %t1881
  %6638 = sext i32 %t888 to i64
  %6639 = getelementptr inbounds i16, i16* %read_input, i64 %6638
  %6640 = getelementptr inbounds i16, i16* %6639, i64 1
  %6641 = bitcast i16* %6640 to <16 x i16>*
  %6642 = load <16 x i16>, <16 x i16>* %6641, align 2, !tbaa !396
  %6643 = getelementptr inbounds i16, i16* %6639, i64 17
  %6644 = bitcast i16* %6643 to <16 x i16>*
  %6645 = load <16 x i16>, <16 x i16>* %6644, align 2, !tbaa !396
  %6646 = bitcast i16* %6639 to <16 x i16>*
  %6647 = load <16 x i16>, <16 x i16>* %6646, align 2, !tbaa !396
  %6648 = getelementptr inbounds i16, i16* %6639, i64 16
  %6649 = bitcast i16* %6648 to <16 x i16>*
  %6650 = load <16 x i16>, <16 x i16>* %6649, align 2, !tbaa !396
  %6651 = getelementptr inbounds i16, i16* %6639, i64 2
  %6652 = bitcast i16* %6651 to <16 x i16>*
  %6653 = load <16 x i16>, <16 x i16>* %6652, align 2, !tbaa !396
  %6654 = getelementptr inbounds i16, i16* %6639, i64 18
  %6655 = bitcast i16* %6654 to <16 x i16>*
  %6656 = load <16 x i16>, <16 x i16>* %6655, align 2, !tbaa !396
  %6657 = getelementptr inbounds i16, i16* %6639, i64 4
  %6658 = bitcast i16* %6657 to <16 x i16>*
  %6659 = load <16 x i16>, <16 x i16>* %6658, align 2, !tbaa !396
  %6660 = getelementptr inbounds i16, i16* %6639, i64 20
  %6661 = bitcast i16* %6660 to <16 x i16>*
  %6662 = load <16 x i16>, <16 x i16>* %6661, align 2, !tbaa !396
  %6663 = getelementptr inbounds i16, i16* %6639, i64 3
  %6664 = bitcast i16* %6663 to <16 x i16>*
  %6665 = load <16 x i16>, <16 x i16>* %6664, align 2, !tbaa !396
  %6666 = getelementptr inbounds i16, i16* %6639, i64 19
  %6667 = bitcast i16* %6666 to <16 x i16>*
  %6668 = load <16 x i16>, <16 x i16>* %6667, align 2, !tbaa !396
  %6669 = add <16 x i16> %6647, %6642
  %6670 = add <16 x i16> %6669, %6653
  %6671 = add <16 x i16> %6670, %6659
  %6672 = add <16 x i16> %6671, %6665
  %6673 = add <16 x i16> %6650, %6645
  %6674 = add <16 x i16> %6673, %6656
  %6675 = add <16 x i16> %6674, %6662
  %6676 = add <16 x i16> %6675, %6668
  %6677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6672, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6676, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6679 = shufflevector <16 x i16> %6677, <16 x i16> %6678, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6680 = lshr <32 x i16> %6679, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6681 = shufflevector <32 x i16> %6680, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6682 = shl nsw i64 %6612, 5
  %6683 = add nsw i64 %6682, %6467
  %6684 = getelementptr inbounds i16, i16* %blur_x, i64 %6683
  %6685 = bitcast i16* %6684 to <16 x i16>*
  store <16 x i16> %6681, <16 x i16>* %6685, align 2, !tbaa !399
  %6686 = shufflevector <32 x i16> %6680, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6687 = getelementptr inbounds i16, i16* %6684, i64 16
  %6688 = bitcast i16* %6687 to <16 x i16>*
  store <16 x i16> %6686, <16 x i16>* %6688, align 2, !tbaa !399
  br label %"consume blur_x345"

"consume blur_x345":                              ; preds = %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge", %"produce blur_x344"
  %.pre-phi3493 = phi i64 [ %.pre3492, %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge" ], [ %6682, %"produce blur_x344" ]
  %6689 = add nsw i64 %6470, %.pre-phi3493
  %6690 = getelementptr inbounds i16, i16* %blur_x, i64 %6689
  %6691 = bitcast i16* %6690 to <16 x i16>*
  %6692 = load <16 x i16>, <16 x i16>* %6691, align 2, !tbaa !399
  %6693 = getelementptr inbounds i16, i16* %6690, i64 16
  %6694 = bitcast i16* %6693 to <16 x i16>*
  %6695 = load <16 x i16>, <16 x i16>* %6694, align 2, !tbaa !399
  %6696 = add nsw i64 %6473, %.pre-phi3493
  %6697 = getelementptr inbounds i16, i16* %blur_x, i64 %6696
  %6698 = bitcast i16* %6697 to <16 x i16>*
  %6699 = load <16 x i16>, <16 x i16>* %6698, align 2, !tbaa !399
  %6700 = getelementptr inbounds i16, i16* %6697, i64 16
  %6701 = bitcast i16* %6700 to <16 x i16>*
  %6702 = load <16 x i16>, <16 x i16>* %6701, align 2, !tbaa !399
  %6703 = add nsw i64 %6476, %.pre-phi3493
  %6704 = getelementptr inbounds i16, i16* %blur_x, i64 %6703
  %6705 = bitcast i16* %6704 to <16 x i16>*
  %6706 = load <16 x i16>, <16 x i16>* %6705, align 2, !tbaa !399
  %6707 = getelementptr inbounds i16, i16* %6704, i64 16
  %6708 = bitcast i16* %6707 to <16 x i16>*
  %6709 = load <16 x i16>, <16 x i16>* %6708, align 2, !tbaa !399
  %6710 = add nsw i64 %6479, %.pre-phi3493
  %6711 = getelementptr inbounds i16, i16* %blur_x, i64 %6710
  %6712 = bitcast i16* %6711 to <16 x i16>*
  %6713 = load <16 x i16>, <16 x i16>* %6712, align 2, !tbaa !399
  %6714 = getelementptr inbounds i16, i16* %6711, i64 16
  %6715 = bitcast i16* %6714 to <16 x i16>*
  %6716 = load <16 x i16>, <16 x i16>* %6715, align 2, !tbaa !399
  %6717 = add nsw i64 %6482, %.pre-phi3493
  %6718 = getelementptr inbounds i16, i16* %blur_x, i64 %6717
  %6719 = bitcast i16* %6718 to <16 x i16>*
  %6720 = load <16 x i16>, <16 x i16>* %6719, align 2, !tbaa !399
  %6721 = getelementptr inbounds i16, i16* %6718, i64 16
  %6722 = bitcast i16* %6721 to <16 x i16>*
  %6723 = load <16 x i16>, <16 x i16>* %6722, align 2, !tbaa !399
  %6724 = add <16 x i16> %6699, %6692
  %6725 = add <16 x i16> %6724, %6706
  %6726 = add <16 x i16> %6725, %6713
  %6727 = add <16 x i16> %6726, %6720
  %6728 = add <16 x i16> %6702, %6695
  %6729 = add <16 x i16> %6728, %6709
  %6730 = add <16 x i16> %6729, %6716
  %6731 = add <16 x i16> %6730, %6723
  %6732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6727, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6731, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6734 = shufflevector <16 x i16> %6732, <16 x i16> %6733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6735 = lshr <32 x i16> %6734, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6736 = shufflevector <32 x i16> %6735, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6737 = add nsw i64 %6486, %.pre-phi3493
  %6738 = getelementptr inbounds i16, i16* %66, i64 %6737
  %6739 = bitcast i16* %6738 to <16 x i16>*
  store <16 x i16> %6736, <16 x i16>* %6739, align 2, !tbaa !401
  %6740 = shufflevector <32 x i16> %6735, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6741 = getelementptr inbounds i16, i16* %6738, i64 16
  %6742 = bitcast i16* %6741 to <16 x i16>*
  store <16 x i16> %6740, <16 x i16>* %6742, align 2, !tbaa !401
  %indvars.iv.next3293 = add nuw nsw i64 %indvars.iv3292, 1
  %.not2735 = icmp eq i64 %indvars.iv.next3293, %184
  br i1 %.not2735, label %"end for blur_y.s0.x.x.rebased339", label %"for blur_y.s0.x.x.rebased338"

"for blur_y.s0.x.x.rebased346":                   ; preds = %"for blur_y.s0.x.x.rebased346.preheader", %"consume blur_x354"
  %blur_y.s0.x.x.rebased348 = phi i32 [ %6855, %"consume blur_x354" ], [ 0, %"for blur_y.s0.x.x.rebased346.preheader" ]
  %6743 = add nsw i32 %blur_y.s0.x.x.rebased348, %t1626
  %a182 = shl nsw i32 %6743, 5
  %6744 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %6744, i32 %a182, i32 %a14
  %6745 = icmp slt i32 %6743, 1
  %6746 = icmp sgt i32 %4, %a182
  %6747 = or i1 %6745, %6746
  br i1 %6747, label %"produce blur_x352", label %"consume blur_x354"

"end for blur_y.s0.x.x.rebased347":               ; preds = %"consume blur_x354", %"end for blur_y.s0.x.x.rebased339"
  br i1 %34, label %"produce blur_x358", label %after_bb355

"produce blur_x352":                              ; preds = %"for blur_y.s0.x.x.rebased346"
  %6748 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s353 = select i1 %6748, i32 %b188, i32 %4
  %t893 = add nsw i32 %blur_x.s0.x.v1.base.s353, %t1881
  %6749 = sext i32 %t893 to i64
  %6750 = getelementptr inbounds i16, i16* %read_input, i64 %6749
  %6751 = getelementptr inbounds i16, i16* %6750, i64 1
  %6752 = bitcast i16* %6751 to <16 x i16>*
  %6753 = load <16 x i16>, <16 x i16>* %6752, align 2, !tbaa !396
  %6754 = getelementptr inbounds i16, i16* %6750, i64 17
  %6755 = bitcast i16* %6754 to <16 x i16>*
  %6756 = load <16 x i16>, <16 x i16>* %6755, align 2, !tbaa !396
  %6757 = bitcast i16* %6750 to <16 x i16>*
  %6758 = load <16 x i16>, <16 x i16>* %6757, align 2, !tbaa !396
  %6759 = getelementptr inbounds i16, i16* %6750, i64 16
  %6760 = bitcast i16* %6759 to <16 x i16>*
  %6761 = load <16 x i16>, <16 x i16>* %6760, align 2, !tbaa !396
  %6762 = getelementptr inbounds i16, i16* %6750, i64 2
  %6763 = bitcast i16* %6762 to <16 x i16>*
  %6764 = load <16 x i16>, <16 x i16>* %6763, align 2, !tbaa !396
  %6765 = getelementptr inbounds i16, i16* %6750, i64 18
  %6766 = bitcast i16* %6765 to <16 x i16>*
  %6767 = load <16 x i16>, <16 x i16>* %6766, align 2, !tbaa !396
  %6768 = getelementptr inbounds i16, i16* %6750, i64 4
  %6769 = bitcast i16* %6768 to <16 x i16>*
  %6770 = load <16 x i16>, <16 x i16>* %6769, align 2, !tbaa !396
  %6771 = getelementptr inbounds i16, i16* %6750, i64 20
  %6772 = bitcast i16* %6771 to <16 x i16>*
  %6773 = load <16 x i16>, <16 x i16>* %6772, align 2, !tbaa !396
  %6774 = getelementptr inbounds i16, i16* %6750, i64 3
  %6775 = bitcast i16* %6774 to <16 x i16>*
  %6776 = load <16 x i16>, <16 x i16>* %6775, align 2, !tbaa !396
  %6777 = getelementptr inbounds i16, i16* %6750, i64 19
  %6778 = bitcast i16* %6777 to <16 x i16>*
  %6779 = load <16 x i16>, <16 x i16>* %6778, align 2, !tbaa !396
  %6780 = add <16 x i16> %6758, %6753
  %6781 = add <16 x i16> %6780, %6764
  %6782 = add <16 x i16> %6781, %6770
  %6783 = add <16 x i16> %6782, %6776
  %6784 = add <16 x i16> %6761, %6756
  %6785 = add <16 x i16> %6784, %6767
  %6786 = add <16 x i16> %6785, %6773
  %6787 = add <16 x i16> %6786, %6779
  %6788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6783, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6787, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6790 = shufflevector <16 x i16> %6788, <16 x i16> %6789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6791 = lshr <32 x i16> %6790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6792 = shufflevector <32 x i16> %6791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6793 = sext i32 %blur_x.s0.x.v1.base.s353 to i64
  %6794 = add nsw i64 %6793, %6618
  %6795 = getelementptr inbounds i16, i16* %blur_x, i64 %6794
  %6796 = bitcast i16* %6795 to <16 x i16>*
  store <16 x i16> %6792, <16 x i16>* %6796, align 2, !tbaa !399
  %6797 = shufflevector <32 x i16> %6791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6798 = getelementptr inbounds i16, i16* %6795, i64 16
  %6799 = bitcast i16* %6798 to <16 x i16>*
  store <16 x i16> %6797, <16 x i16>* %6799, align 2, !tbaa !399
  br label %"consume blur_x354"

"consume blur_x354":                              ; preds = %"for blur_y.s0.x.x.rebased346", %"produce blur_x352"
  %6800 = sext i32 %b188 to i64
  %6801 = add nsw i64 %6621, %6800
  %6802 = getelementptr inbounds i16, i16* %blur_x, i64 %6801
  %6803 = bitcast i16* %6802 to <16 x i16>*
  %6804 = load <16 x i16>, <16 x i16>* %6803, align 2, !tbaa !399
  %6805 = getelementptr inbounds i16, i16* %6802, i64 16
  %6806 = bitcast i16* %6805 to <16 x i16>*
  %6807 = load <16 x i16>, <16 x i16>* %6806, align 2, !tbaa !399
  %6808 = add nsw i64 %6624, %6800
  %6809 = getelementptr inbounds i16, i16* %blur_x, i64 %6808
  %6810 = bitcast i16* %6809 to <16 x i16>*
  %6811 = load <16 x i16>, <16 x i16>* %6810, align 2, !tbaa !399
  %6812 = getelementptr inbounds i16, i16* %6809, i64 16
  %6813 = bitcast i16* %6812 to <16 x i16>*
  %6814 = load <16 x i16>, <16 x i16>* %6813, align 2, !tbaa !399
  %6815 = add nsw i64 %6627, %6800
  %6816 = getelementptr inbounds i16, i16* %blur_x, i64 %6815
  %6817 = bitcast i16* %6816 to <16 x i16>*
  %6818 = load <16 x i16>, <16 x i16>* %6817, align 2, !tbaa !399
  %6819 = getelementptr inbounds i16, i16* %6816, i64 16
  %6820 = bitcast i16* %6819 to <16 x i16>*
  %6821 = load <16 x i16>, <16 x i16>* %6820, align 2, !tbaa !399
  %6822 = add nsw i64 %6630, %6800
  %6823 = getelementptr inbounds i16, i16* %blur_x, i64 %6822
  %6824 = bitcast i16* %6823 to <16 x i16>*
  %6825 = load <16 x i16>, <16 x i16>* %6824, align 2, !tbaa !399
  %6826 = getelementptr inbounds i16, i16* %6823, i64 16
  %6827 = bitcast i16* %6826 to <16 x i16>*
  %6828 = load <16 x i16>, <16 x i16>* %6827, align 2, !tbaa !399
  %6829 = add nsw i64 %6633, %6800
  %6830 = getelementptr inbounds i16, i16* %blur_x, i64 %6829
  %6831 = bitcast i16* %6830 to <16 x i16>*
  %6832 = load <16 x i16>, <16 x i16>* %6831, align 2, !tbaa !399
  %6833 = getelementptr inbounds i16, i16* %6830, i64 16
  %6834 = bitcast i16* %6833 to <16 x i16>*
  %6835 = load <16 x i16>, <16 x i16>* %6834, align 2, !tbaa !399
  %6836 = add <16 x i16> %6811, %6804
  %6837 = add <16 x i16> %6836, %6818
  %6838 = add <16 x i16> %6837, %6825
  %6839 = add <16 x i16> %6838, %6832
  %6840 = add <16 x i16> %6814, %6807
  %6841 = add <16 x i16> %6840, %6821
  %6842 = add <16 x i16> %6841, %6828
  %6843 = add <16 x i16> %6842, %6835
  %6844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6839, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6843, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6846 = shufflevector <16 x i16> %6844, <16 x i16> %6845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6847 = lshr <32 x i16> %6846, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6848 = shufflevector <32 x i16> %6847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6849 = add nsw i64 %6637, %6800
  %6850 = getelementptr inbounds i16, i16* %66, i64 %6849
  %6851 = bitcast i16* %6850 to <16 x i16>*
  store <16 x i16> %6848, <16 x i16>* %6851, align 2, !tbaa !401
  %6852 = shufflevector <32 x i16> %6847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6853 = getelementptr inbounds i16, i16* %6850, i64 16
  %6854 = bitcast i16* %6853 to <16 x i16>*
  store <16 x i16> %6852, <16 x i16>* %6854, align 2, !tbaa !401
  %6855 = add nuw nsw i32 %blur_y.s0.x.x.rebased348, 1
  %.not2734 = icmp eq i32 %6855, %t1683
  br i1 %.not2734, label %"end for blur_y.s0.x.x.rebased347", label %"for blur_y.s0.x.x.rebased346"

after_bb355:                                      ; preds = %"end for blur_y.s0.x.x.rebased347", %"produce blur_x358"
  br i1 %100, label %"for blur_y.s0.x.x.rebased360.preheader", label %"end for blur_y.s0.x.x.rebased361", !prof !386

"for blur_y.s0.x.x.rebased360.preheader":         ; preds = %after_bb355
  %6856 = sext i32 %t1682 to i64
  %6857 = zext i32 %.pre-phi3463 to i64
  %6858 = mul nsw i64 %6857, %112
  %6859 = sub nsw i64 %6858, %96
  %6860 = zext i32 %.pre-phi3457 to i64
  %6861 = mul nsw i64 %6860, %112
  %6862 = sub nsw i64 %6861, %96
  %6863 = zext i32 %.pre-phi3469 to i64
  %6864 = mul nsw i64 %6863, %112
  %6865 = sub nsw i64 %6864, %96
  %6866 = zext i32 %.pre-phi to i64
  %6867 = mul nsw i64 %6866, %112
  %6868 = sub nsw i64 %6867, %96
  %6869 = zext i32 %.pre-phi3475 to i64
  %6870 = mul nsw i64 %6869, %112
  %6871 = sub nsw i64 %6870, %96
  %6872 = sext i32 %a26 to i64
  %6873 = add nsw i64 %6872, 12
  %6874 = mul nsw i64 %6873, %113
  %6875 = add nsw i64 %6874, %116
  br label %"for blur_y.s0.x.x.rebased360"

"produce blur_x358":                              ; preds = %"end for blur_y.s0.x.x.rebased347"
  %6876 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %6877 = getelementptr inbounds i16, i16* %6876, i64 -31
  %6878 = bitcast i16* %6877 to <16 x i16>*
  %6879 = load <16 x i16>, <16 x i16>* %6878, align 2, !tbaa !396
  %6880 = getelementptr inbounds i16, i16* %6876, i64 -15
  %6881 = bitcast i16* %6880 to <16 x i16>*
  %6882 = load <16 x i16>, <16 x i16>* %6881, align 2, !tbaa !396
  %6883 = getelementptr inbounds i16, i16* %6876, i64 -32
  %6884 = bitcast i16* %6883 to <16 x i16>*
  %6885 = load <16 x i16>, <16 x i16>* %6884, align 2, !tbaa !396
  %6886 = getelementptr inbounds i16, i16* %6876, i64 -16
  %6887 = bitcast i16* %6886 to <16 x i16>*
  %6888 = load <16 x i16>, <16 x i16>* %6887, align 2, !tbaa !396
  %6889 = getelementptr inbounds i16, i16* %6876, i64 -30
  %6890 = bitcast i16* %6889 to <16 x i16>*
  %6891 = load <16 x i16>, <16 x i16>* %6890, align 2, !tbaa !396
  %6892 = getelementptr inbounds i16, i16* %6876, i64 -14
  %6893 = bitcast i16* %6892 to <16 x i16>*
  %6894 = load <16 x i16>, <16 x i16>* %6893, align 2, !tbaa !396
  %6895 = getelementptr inbounds i16, i16* %6876, i64 -28
  %6896 = bitcast i16* %6895 to <16 x i16>*
  %6897 = load <16 x i16>, <16 x i16>* %6896, align 2, !tbaa !396
  %6898 = getelementptr inbounds i16, i16* %6876, i64 -12
  %6899 = bitcast i16* %6898 to <16 x i16>*
  %6900 = load <16 x i16>, <16 x i16>* %6899, align 2, !tbaa !396
  %6901 = getelementptr inbounds i16, i16* %6876, i64 -29
  %6902 = bitcast i16* %6901 to <16 x i16>*
  %6903 = load <16 x i16>, <16 x i16>* %6902, align 2, !tbaa !396
  %6904 = getelementptr inbounds i16, i16* %6876, i64 -13
  %6905 = bitcast i16* %6904 to <16 x i16>*
  %6906 = load <16 x i16>, <16 x i16>* %6905, align 2, !tbaa !396
  %6907 = add <16 x i16> %6885, %6879
  %6908 = add <16 x i16> %6907, %6891
  %6909 = add <16 x i16> %6908, %6897
  %6910 = add <16 x i16> %6909, %6903
  %6911 = add <16 x i16> %6888, %6882
  %6912 = add <16 x i16> %6911, %6894
  %6913 = add <16 x i16> %6912, %6900
  %6914 = add <16 x i16> %6913, %6906
  %6915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6910, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6914, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6917 = shufflevector <16 x i16> %6915, <16 x i16> %6916, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6918 = lshr <32 x i16> %6917, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6919 = shufflevector <32 x i16> %6918, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6920 = zext i32 %.pre-phi to i64
  %6921 = mul nsw i64 %97, %6920
  %6922 = add nsw i64 %99, %6921
  %6923 = getelementptr inbounds i16, i16* %blur_x, i64 %6922
  %6924 = getelementptr inbounds i16, i16* %6923, i64 -32
  %6925 = bitcast i16* %6924 to <16 x i16>*
  store <16 x i16> %6919, <16 x i16>* %6925, align 2, !tbaa !399
  %6926 = shufflevector <32 x i16> %6918, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6927 = getelementptr inbounds i16, i16* %6923, i64 -16
  %6928 = bitcast i16* %6927 to <16 x i16>*
  store <16 x i16> %6926, <16 x i16>* %6928, align 2, !tbaa !399
  %6929 = zext i32 %.pre-phi3463 to i64
  %6930 = mul nsw i64 %6929, %112
  %6931 = add nsw i64 %6930, %94
  %6932 = getelementptr inbounds i16, i16* %blur_x, i64 %6931
  %6933 = getelementptr inbounds i16, i16* %6932, i64 -32
  %6934 = bitcast i16* %6933 to <16 x i16>*
  %6935 = load <16 x i16>, <16 x i16>* %6934, align 2, !tbaa !399
  %6936 = getelementptr inbounds i16, i16* %6932, i64 -16
  %6937 = bitcast i16* %6936 to <16 x i16>*
  %6938 = load <16 x i16>, <16 x i16>* %6937, align 2, !tbaa !399
  %6939 = zext i32 %.pre-phi3457 to i64
  %6940 = mul nsw i64 %6939, %112
  %6941 = add nsw i64 %6940, %94
  %6942 = getelementptr inbounds i16, i16* %blur_x, i64 %6941
  %6943 = getelementptr inbounds i16, i16* %6942, i64 -32
  %6944 = bitcast i16* %6943 to <16 x i16>*
  %6945 = load <16 x i16>, <16 x i16>* %6944, align 2, !tbaa !399
  %6946 = getelementptr inbounds i16, i16* %6942, i64 -16
  %6947 = bitcast i16* %6946 to <16 x i16>*
  %6948 = load <16 x i16>, <16 x i16>* %6947, align 2, !tbaa !399
  %6949 = zext i32 %.pre-phi3469 to i64
  %6950 = mul nsw i64 %6949, %112
  %6951 = add nsw i64 %6950, %94
  %6952 = getelementptr inbounds i16, i16* %blur_x, i64 %6951
  %6953 = getelementptr inbounds i16, i16* %6952, i64 -32
  %6954 = bitcast i16* %6953 to <16 x i16>*
  %6955 = load <16 x i16>, <16 x i16>* %6954, align 2, !tbaa !399
  %6956 = getelementptr inbounds i16, i16* %6952, i64 -16
  %6957 = bitcast i16* %6956 to <16 x i16>*
  %6958 = load <16 x i16>, <16 x i16>* %6957, align 2, !tbaa !399
  %6959 = mul nsw i64 %6920, %112
  %6960 = add nsw i64 %6959, %94
  %6961 = getelementptr inbounds i16, i16* %blur_x, i64 %6960
  %6962 = getelementptr inbounds i16, i16* %6961, i64 -32
  %6963 = bitcast i16* %6962 to <16 x i16>*
  %6964 = load <16 x i16>, <16 x i16>* %6963, align 2, !tbaa !399
  %6965 = getelementptr inbounds i16, i16* %6961, i64 -16
  %6966 = bitcast i16* %6965 to <16 x i16>*
  %6967 = load <16 x i16>, <16 x i16>* %6966, align 2, !tbaa !399
  %6968 = zext i32 %.pre-phi3475 to i64
  %6969 = mul nsw i64 %6968, %112
  %6970 = add nsw i64 %6969, %94
  %6971 = getelementptr inbounds i16, i16* %blur_x, i64 %6970
  %6972 = getelementptr inbounds i16, i16* %6971, i64 -32
  %6973 = bitcast i16* %6972 to <16 x i16>*
  %6974 = load <16 x i16>, <16 x i16>* %6973, align 2, !tbaa !399
  %6975 = getelementptr inbounds i16, i16* %6971, i64 -16
  %6976 = bitcast i16* %6975 to <16 x i16>*
  %6977 = load <16 x i16>, <16 x i16>* %6976, align 2, !tbaa !399
  %6978 = add <16 x i16> %6945, %6935
  %6979 = add <16 x i16> %6978, %6955
  %6980 = add <16 x i16> %6979, %6964
  %6981 = add <16 x i16> %6980, %6974
  %6982 = add <16 x i16> %6948, %6938
  %6983 = add <16 x i16> %6982, %6958
  %6984 = add <16 x i16> %6983, %6967
  %6985 = add <16 x i16> %6984, %6977
  %6986 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6981, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6985, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6988 = shufflevector <16 x i16> %6986, <16 x i16> %6987, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6989 = lshr <32 x i16> %6988, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6990 = shufflevector <32 x i16> %6989, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6991 = sext i32 %a26 to i64
  %6992 = add nsw i64 %6991, 12
  %6993 = mul nsw i64 %6992, %113
  %6994 = add nsw i64 %115, %6993
  %6995 = getelementptr inbounds i16, i16* %66, i64 %6994
  %6996 = getelementptr inbounds i16, i16* %6995, i64 -32
  %6997 = bitcast i16* %6996 to <16 x i16>*
  store <16 x i16> %6990, <16 x i16>* %6997, align 2, !tbaa !401
  %6998 = shufflevector <32 x i16> %6989, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6999 = getelementptr inbounds i16, i16* %6995, i64 -16
  %7000 = bitcast i16* %6999 to <16 x i16>*
  store <16 x i16> %6998, <16 x i16>* %7000, align 2, !tbaa !401
  br label %after_bb355

"for blur_y.s0.x.x.rebased360":                   ; preds = %"for blur_y.s0.x.x.rebased360.preheader", %"consume blur_x367"
  %indvars.iv3295 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased360.preheader" ], [ %indvars.iv.next3296, %"consume blur_x367" ]
  %7001 = add nsw i64 %indvars.iv3295, %101
  %7002 = icmp slt i64 %7001, 1
  %7003 = trunc i64 %7001 to i32
  %7004 = shl nsw i32 %7003, 5
  %7005 = icmp sgt i32 %4, %7004
  %7006 = or i1 %7002, %7005
  br i1 %7006, label %"produce blur_x366", label %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge"

"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased360"
  %.pre3494 = shl nsw i64 %7001, 5
  br label %"consume blur_x367"

"end for blur_y.s0.x.x.rebased361":               ; preds = %"consume blur_x367", %after_bb355
  br i1 %102, label %"for blur_y.s0.x.x.rebased368.preheader", label %"end for blur_y.s0.x.x.rebased369", !prof !386

"for blur_y.s0.x.x.rebased368.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased361"
  %7007 = sext i32 %t1682 to i64
  %7008 = zext i32 %.pre-phi3463 to i64
  %7009 = mul nsw i64 %7008, %112
  %7010 = sub nsw i64 %7009, %96
  %7011 = zext i32 %.pre-phi3457 to i64
  %7012 = mul nsw i64 %7011, %112
  %7013 = sub nsw i64 %7012, %96
  %7014 = zext i32 %.pre-phi3469 to i64
  %7015 = mul nsw i64 %7014, %112
  %7016 = sub nsw i64 %7015, %96
  %7017 = zext i32 %.pre-phi to i64
  %7018 = mul nsw i64 %7017, %112
  %7019 = sub nsw i64 %7018, %96
  %7020 = zext i32 %.pre-phi3475 to i64
  %7021 = mul nsw i64 %7020, %112
  %7022 = sub nsw i64 %7021, %96
  %7023 = sext i32 %a26 to i64
  %7024 = add nsw i64 %7023, 12
  %7025 = mul nsw i64 %7024, %113
  %7026 = add nsw i64 %7025, %116
  br label %"for blur_y.s0.x.x.rebased368"

"produce blur_x366":                              ; preds = %"for blur_y.s0.x.x.rebased360"
  %t904 = add nsw i32 %7004, %t1897
  %7027 = sext i32 %t904 to i64
  %7028 = getelementptr inbounds i16, i16* %read_input, i64 %7027
  %7029 = getelementptr inbounds i16, i16* %7028, i64 1
  %7030 = bitcast i16* %7029 to <16 x i16>*
  %7031 = load <16 x i16>, <16 x i16>* %7030, align 2, !tbaa !396
  %7032 = getelementptr inbounds i16, i16* %7028, i64 17
  %7033 = bitcast i16* %7032 to <16 x i16>*
  %7034 = load <16 x i16>, <16 x i16>* %7033, align 2, !tbaa !396
  %7035 = bitcast i16* %7028 to <16 x i16>*
  %7036 = load <16 x i16>, <16 x i16>* %7035, align 2, !tbaa !396
  %7037 = getelementptr inbounds i16, i16* %7028, i64 16
  %7038 = bitcast i16* %7037 to <16 x i16>*
  %7039 = load <16 x i16>, <16 x i16>* %7038, align 2, !tbaa !396
  %7040 = getelementptr inbounds i16, i16* %7028, i64 2
  %7041 = bitcast i16* %7040 to <16 x i16>*
  %7042 = load <16 x i16>, <16 x i16>* %7041, align 2, !tbaa !396
  %7043 = getelementptr inbounds i16, i16* %7028, i64 18
  %7044 = bitcast i16* %7043 to <16 x i16>*
  %7045 = load <16 x i16>, <16 x i16>* %7044, align 2, !tbaa !396
  %7046 = getelementptr inbounds i16, i16* %7028, i64 4
  %7047 = bitcast i16* %7046 to <16 x i16>*
  %7048 = load <16 x i16>, <16 x i16>* %7047, align 2, !tbaa !396
  %7049 = getelementptr inbounds i16, i16* %7028, i64 20
  %7050 = bitcast i16* %7049 to <16 x i16>*
  %7051 = load <16 x i16>, <16 x i16>* %7050, align 2, !tbaa !396
  %7052 = getelementptr inbounds i16, i16* %7028, i64 3
  %7053 = bitcast i16* %7052 to <16 x i16>*
  %7054 = load <16 x i16>, <16 x i16>* %7053, align 2, !tbaa !396
  %7055 = getelementptr inbounds i16, i16* %7028, i64 19
  %7056 = bitcast i16* %7055 to <16 x i16>*
  %7057 = load <16 x i16>, <16 x i16>* %7056, align 2, !tbaa !396
  %7058 = add <16 x i16> %7036, %7031
  %7059 = add <16 x i16> %7058, %7042
  %7060 = add <16 x i16> %7059, %7048
  %7061 = add <16 x i16> %7060, %7054
  %7062 = add <16 x i16> %7039, %7034
  %7063 = add <16 x i16> %7062, %7045
  %7064 = add <16 x i16> %7063, %7051
  %7065 = add <16 x i16> %7064, %7057
  %7066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7061, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7065, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7068 = shufflevector <16 x i16> %7066, <16 x i16> %7067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7069 = lshr <32 x i16> %7068, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7070 = shufflevector <32 x i16> %7069, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7071 = shl nsw i64 %7001, 5
  %7072 = add nsw i64 %7071, %6856
  %7073 = getelementptr inbounds i16, i16* %blur_x, i64 %7072
  %7074 = bitcast i16* %7073 to <16 x i16>*
  store <16 x i16> %7070, <16 x i16>* %7074, align 2, !tbaa !399
  %7075 = shufflevector <32 x i16> %7069, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7076 = getelementptr inbounds i16, i16* %7073, i64 16
  %7077 = bitcast i16* %7076 to <16 x i16>*
  store <16 x i16> %7075, <16 x i16>* %7077, align 2, !tbaa !399
  br label %"consume blur_x367"

"consume blur_x367":                              ; preds = %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge", %"produce blur_x366"
  %.pre-phi3495 = phi i64 [ %.pre3494, %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge" ], [ %7071, %"produce blur_x366" ]
  %7078 = add nsw i64 %6859, %.pre-phi3495
  %7079 = getelementptr inbounds i16, i16* %blur_x, i64 %7078
  %7080 = bitcast i16* %7079 to <16 x i16>*
  %7081 = load <16 x i16>, <16 x i16>* %7080, align 2, !tbaa !399
  %7082 = getelementptr inbounds i16, i16* %7079, i64 16
  %7083 = bitcast i16* %7082 to <16 x i16>*
  %7084 = load <16 x i16>, <16 x i16>* %7083, align 2, !tbaa !399
  %7085 = add nsw i64 %6862, %.pre-phi3495
  %7086 = getelementptr inbounds i16, i16* %blur_x, i64 %7085
  %7087 = bitcast i16* %7086 to <16 x i16>*
  %7088 = load <16 x i16>, <16 x i16>* %7087, align 2, !tbaa !399
  %7089 = getelementptr inbounds i16, i16* %7086, i64 16
  %7090 = bitcast i16* %7089 to <16 x i16>*
  %7091 = load <16 x i16>, <16 x i16>* %7090, align 2, !tbaa !399
  %7092 = add nsw i64 %6865, %.pre-phi3495
  %7093 = getelementptr inbounds i16, i16* %blur_x, i64 %7092
  %7094 = bitcast i16* %7093 to <16 x i16>*
  %7095 = load <16 x i16>, <16 x i16>* %7094, align 2, !tbaa !399
  %7096 = getelementptr inbounds i16, i16* %7093, i64 16
  %7097 = bitcast i16* %7096 to <16 x i16>*
  %7098 = load <16 x i16>, <16 x i16>* %7097, align 2, !tbaa !399
  %7099 = add nsw i64 %6868, %.pre-phi3495
  %7100 = getelementptr inbounds i16, i16* %blur_x, i64 %7099
  %7101 = bitcast i16* %7100 to <16 x i16>*
  %7102 = load <16 x i16>, <16 x i16>* %7101, align 2, !tbaa !399
  %7103 = getelementptr inbounds i16, i16* %7100, i64 16
  %7104 = bitcast i16* %7103 to <16 x i16>*
  %7105 = load <16 x i16>, <16 x i16>* %7104, align 2, !tbaa !399
  %7106 = add nsw i64 %6871, %.pre-phi3495
  %7107 = getelementptr inbounds i16, i16* %blur_x, i64 %7106
  %7108 = bitcast i16* %7107 to <16 x i16>*
  %7109 = load <16 x i16>, <16 x i16>* %7108, align 2, !tbaa !399
  %7110 = getelementptr inbounds i16, i16* %7107, i64 16
  %7111 = bitcast i16* %7110 to <16 x i16>*
  %7112 = load <16 x i16>, <16 x i16>* %7111, align 2, !tbaa !399
  %7113 = add <16 x i16> %7088, %7081
  %7114 = add <16 x i16> %7113, %7095
  %7115 = add <16 x i16> %7114, %7102
  %7116 = add <16 x i16> %7115, %7109
  %7117 = add <16 x i16> %7091, %7084
  %7118 = add <16 x i16> %7117, %7098
  %7119 = add <16 x i16> %7118, %7105
  %7120 = add <16 x i16> %7119, %7112
  %7121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7116, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7120, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7123 = shufflevector <16 x i16> %7121, <16 x i16> %7122, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7124 = lshr <32 x i16> %7123, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7125 = shufflevector <32 x i16> %7124, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7126 = add nsw i64 %6875, %.pre-phi3495
  %7127 = getelementptr inbounds i16, i16* %66, i64 %7126
  %7128 = bitcast i16* %7127 to <16 x i16>*
  store <16 x i16> %7125, <16 x i16>* %7128, align 2, !tbaa !401
  %7129 = shufflevector <32 x i16> %7124, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7130 = getelementptr inbounds i16, i16* %7127, i64 16
  %7131 = bitcast i16* %7130 to <16 x i16>*
  store <16 x i16> %7129, <16 x i16>* %7131, align 2, !tbaa !401
  %indvars.iv.next3296 = add nuw nsw i64 %indvars.iv3295, 1
  %.not2733 = icmp eq i64 %indvars.iv.next3296, %184
  br i1 %.not2733, label %"end for blur_y.s0.x.x.rebased361", label %"for blur_y.s0.x.x.rebased360"

"for blur_y.s0.x.x.rebased368":                   ; preds = %"for blur_y.s0.x.x.rebased368.preheader", %"consume blur_x376"
  %blur_y.s0.x.x.rebased370 = phi i32 [ %7244, %"consume blur_x376" ], [ 0, %"for blur_y.s0.x.x.rebased368.preheader" ]
  %7132 = add nsw i32 %blur_y.s0.x.x.rebased370, %t1626
  %a189 = shl nsw i32 %7132, 5
  %7133 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %7133, i32 %a189, i32 %a14
  %7134 = icmp slt i32 %7132, 1
  %7135 = icmp sgt i32 %4, %a189
  %7136 = or i1 %7134, %7135
  br i1 %7136, label %"produce blur_x374", label %"consume blur_x376"

"end for blur_y.s0.x.x.rebased369":               ; preds = %"consume blur_x376", %"end for blur_y.s0.x.x.rebased361"
  br i1 %34, label %"produce blur_x380", label %after_bb377

"produce blur_x374":                              ; preds = %"for blur_y.s0.x.x.rebased368"
  %7137 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s375 = select i1 %7137, i32 %b195, i32 %4
  %t909 = add nsw i32 %blur_x.s0.x.v1.base.s375, %t1897
  %7138 = sext i32 %t909 to i64
  %7139 = getelementptr inbounds i16, i16* %read_input, i64 %7138
  %7140 = getelementptr inbounds i16, i16* %7139, i64 1
  %7141 = bitcast i16* %7140 to <16 x i16>*
  %7142 = load <16 x i16>, <16 x i16>* %7141, align 2, !tbaa !396
  %7143 = getelementptr inbounds i16, i16* %7139, i64 17
  %7144 = bitcast i16* %7143 to <16 x i16>*
  %7145 = load <16 x i16>, <16 x i16>* %7144, align 2, !tbaa !396
  %7146 = bitcast i16* %7139 to <16 x i16>*
  %7147 = load <16 x i16>, <16 x i16>* %7146, align 2, !tbaa !396
  %7148 = getelementptr inbounds i16, i16* %7139, i64 16
  %7149 = bitcast i16* %7148 to <16 x i16>*
  %7150 = load <16 x i16>, <16 x i16>* %7149, align 2, !tbaa !396
  %7151 = getelementptr inbounds i16, i16* %7139, i64 2
  %7152 = bitcast i16* %7151 to <16 x i16>*
  %7153 = load <16 x i16>, <16 x i16>* %7152, align 2, !tbaa !396
  %7154 = getelementptr inbounds i16, i16* %7139, i64 18
  %7155 = bitcast i16* %7154 to <16 x i16>*
  %7156 = load <16 x i16>, <16 x i16>* %7155, align 2, !tbaa !396
  %7157 = getelementptr inbounds i16, i16* %7139, i64 4
  %7158 = bitcast i16* %7157 to <16 x i16>*
  %7159 = load <16 x i16>, <16 x i16>* %7158, align 2, !tbaa !396
  %7160 = getelementptr inbounds i16, i16* %7139, i64 20
  %7161 = bitcast i16* %7160 to <16 x i16>*
  %7162 = load <16 x i16>, <16 x i16>* %7161, align 2, !tbaa !396
  %7163 = getelementptr inbounds i16, i16* %7139, i64 3
  %7164 = bitcast i16* %7163 to <16 x i16>*
  %7165 = load <16 x i16>, <16 x i16>* %7164, align 2, !tbaa !396
  %7166 = getelementptr inbounds i16, i16* %7139, i64 19
  %7167 = bitcast i16* %7166 to <16 x i16>*
  %7168 = load <16 x i16>, <16 x i16>* %7167, align 2, !tbaa !396
  %7169 = add <16 x i16> %7147, %7142
  %7170 = add <16 x i16> %7169, %7153
  %7171 = add <16 x i16> %7170, %7159
  %7172 = add <16 x i16> %7171, %7165
  %7173 = add <16 x i16> %7150, %7145
  %7174 = add <16 x i16> %7173, %7156
  %7175 = add <16 x i16> %7174, %7162
  %7176 = add <16 x i16> %7175, %7168
  %7177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7172, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7176, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7179 = shufflevector <16 x i16> %7177, <16 x i16> %7178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7180 = lshr <32 x i16> %7179, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7181 = shufflevector <32 x i16> %7180, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7182 = sext i32 %blur_x.s0.x.v1.base.s375 to i64
  %7183 = add nsw i64 %7182, %7007
  %7184 = getelementptr inbounds i16, i16* %blur_x, i64 %7183
  %7185 = bitcast i16* %7184 to <16 x i16>*
  store <16 x i16> %7181, <16 x i16>* %7185, align 2, !tbaa !399
  %7186 = shufflevector <32 x i16> %7180, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7187 = getelementptr inbounds i16, i16* %7184, i64 16
  %7188 = bitcast i16* %7187 to <16 x i16>*
  store <16 x i16> %7186, <16 x i16>* %7188, align 2, !tbaa !399
  br label %"consume blur_x376"

"consume blur_x376":                              ; preds = %"for blur_y.s0.x.x.rebased368", %"produce blur_x374"
  %7189 = sext i32 %b195 to i64
  %7190 = add nsw i64 %7010, %7189
  %7191 = getelementptr inbounds i16, i16* %blur_x, i64 %7190
  %7192 = bitcast i16* %7191 to <16 x i16>*
  %7193 = load <16 x i16>, <16 x i16>* %7192, align 2, !tbaa !399
  %7194 = getelementptr inbounds i16, i16* %7191, i64 16
  %7195 = bitcast i16* %7194 to <16 x i16>*
  %7196 = load <16 x i16>, <16 x i16>* %7195, align 2, !tbaa !399
  %7197 = add nsw i64 %7013, %7189
  %7198 = getelementptr inbounds i16, i16* %blur_x, i64 %7197
  %7199 = bitcast i16* %7198 to <16 x i16>*
  %7200 = load <16 x i16>, <16 x i16>* %7199, align 2, !tbaa !399
  %7201 = getelementptr inbounds i16, i16* %7198, i64 16
  %7202 = bitcast i16* %7201 to <16 x i16>*
  %7203 = load <16 x i16>, <16 x i16>* %7202, align 2, !tbaa !399
  %7204 = add nsw i64 %7016, %7189
  %7205 = getelementptr inbounds i16, i16* %blur_x, i64 %7204
  %7206 = bitcast i16* %7205 to <16 x i16>*
  %7207 = load <16 x i16>, <16 x i16>* %7206, align 2, !tbaa !399
  %7208 = getelementptr inbounds i16, i16* %7205, i64 16
  %7209 = bitcast i16* %7208 to <16 x i16>*
  %7210 = load <16 x i16>, <16 x i16>* %7209, align 2, !tbaa !399
  %7211 = add nsw i64 %7019, %7189
  %7212 = getelementptr inbounds i16, i16* %blur_x, i64 %7211
  %7213 = bitcast i16* %7212 to <16 x i16>*
  %7214 = load <16 x i16>, <16 x i16>* %7213, align 2, !tbaa !399
  %7215 = getelementptr inbounds i16, i16* %7212, i64 16
  %7216 = bitcast i16* %7215 to <16 x i16>*
  %7217 = load <16 x i16>, <16 x i16>* %7216, align 2, !tbaa !399
  %7218 = add nsw i64 %7022, %7189
  %7219 = getelementptr inbounds i16, i16* %blur_x, i64 %7218
  %7220 = bitcast i16* %7219 to <16 x i16>*
  %7221 = load <16 x i16>, <16 x i16>* %7220, align 2, !tbaa !399
  %7222 = getelementptr inbounds i16, i16* %7219, i64 16
  %7223 = bitcast i16* %7222 to <16 x i16>*
  %7224 = load <16 x i16>, <16 x i16>* %7223, align 2, !tbaa !399
  %7225 = add <16 x i16> %7200, %7193
  %7226 = add <16 x i16> %7225, %7207
  %7227 = add <16 x i16> %7226, %7214
  %7228 = add <16 x i16> %7227, %7221
  %7229 = add <16 x i16> %7203, %7196
  %7230 = add <16 x i16> %7229, %7210
  %7231 = add <16 x i16> %7230, %7217
  %7232 = add <16 x i16> %7231, %7224
  %7233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7228, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7232, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7235 = shufflevector <16 x i16> %7233, <16 x i16> %7234, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7236 = lshr <32 x i16> %7235, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7237 = shufflevector <32 x i16> %7236, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7238 = add nsw i64 %7026, %7189
  %7239 = getelementptr inbounds i16, i16* %66, i64 %7238
  %7240 = bitcast i16* %7239 to <16 x i16>*
  store <16 x i16> %7237, <16 x i16>* %7240, align 2, !tbaa !401
  %7241 = shufflevector <32 x i16> %7236, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7242 = getelementptr inbounds i16, i16* %7239, i64 16
  %7243 = bitcast i16* %7242 to <16 x i16>*
  store <16 x i16> %7241, <16 x i16>* %7243, align 2, !tbaa !401
  %7244 = add nuw nsw i32 %blur_y.s0.x.x.rebased370, 1
  %.not2732 = icmp eq i32 %7244, %t1683
  br i1 %.not2732, label %"end for blur_y.s0.x.x.rebased369", label %"for blur_y.s0.x.x.rebased368"

after_bb377:                                      ; preds = %"end for blur_y.s0.x.x.rebased369", %"produce blur_x380"
  br i1 %100, label %"for blur_y.s0.x.x.rebased382.preheader", label %"end for blur_y.s0.x.x.rebased383", !prof !386

"for blur_y.s0.x.x.rebased382.preheader":         ; preds = %after_bb377
  %7245 = sext i32 %t1688 to i64
  %7246 = zext i32 %.pre-phi3469 to i64
  %7247 = mul nsw i64 %7246, %112
  %7248 = sub nsw i64 %7247, %96
  %7249 = zext i32 %.pre-phi3463 to i64
  %7250 = mul nsw i64 %7249, %112
  %7251 = sub nsw i64 %7250, %96
  %7252 = zext i32 %.pre-phi3475 to i64
  %7253 = mul nsw i64 %7252, %112
  %7254 = sub nsw i64 %7253, %96
  %7255 = zext i32 %.pre-phi3445 to i64
  %7256 = mul nsw i64 %7255, %112
  %7257 = sub nsw i64 %7256, %96
  %7258 = zext i32 %.pre-phi to i64
  %7259 = mul nsw i64 %7258, %112
  %7260 = sub nsw i64 %7259, %96
  %7261 = sext i32 %a26 to i64
  %7262 = add nsw i64 %7261, 13
  %7263 = mul nsw i64 %7262, %113
  %7264 = add nsw i64 %7263, %116
  br label %"for blur_y.s0.x.x.rebased382"

"produce blur_x380":                              ; preds = %"end for blur_y.s0.x.x.rebased369"
  %7265 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %7266 = getelementptr inbounds i16, i16* %7265, i64 -31
  %7267 = bitcast i16* %7266 to <16 x i16>*
  %7268 = load <16 x i16>, <16 x i16>* %7267, align 2, !tbaa !396
  %7269 = getelementptr inbounds i16, i16* %7265, i64 -15
  %7270 = bitcast i16* %7269 to <16 x i16>*
  %7271 = load <16 x i16>, <16 x i16>* %7270, align 2, !tbaa !396
  %7272 = getelementptr inbounds i16, i16* %7265, i64 -32
  %7273 = bitcast i16* %7272 to <16 x i16>*
  %7274 = load <16 x i16>, <16 x i16>* %7273, align 2, !tbaa !396
  %7275 = getelementptr inbounds i16, i16* %7265, i64 -16
  %7276 = bitcast i16* %7275 to <16 x i16>*
  %7277 = load <16 x i16>, <16 x i16>* %7276, align 2, !tbaa !396
  %7278 = getelementptr inbounds i16, i16* %7265, i64 -30
  %7279 = bitcast i16* %7278 to <16 x i16>*
  %7280 = load <16 x i16>, <16 x i16>* %7279, align 2, !tbaa !396
  %7281 = getelementptr inbounds i16, i16* %7265, i64 -14
  %7282 = bitcast i16* %7281 to <16 x i16>*
  %7283 = load <16 x i16>, <16 x i16>* %7282, align 2, !tbaa !396
  %7284 = getelementptr inbounds i16, i16* %7265, i64 -28
  %7285 = bitcast i16* %7284 to <16 x i16>*
  %7286 = load <16 x i16>, <16 x i16>* %7285, align 2, !tbaa !396
  %7287 = getelementptr inbounds i16, i16* %7265, i64 -12
  %7288 = bitcast i16* %7287 to <16 x i16>*
  %7289 = load <16 x i16>, <16 x i16>* %7288, align 2, !tbaa !396
  %7290 = getelementptr inbounds i16, i16* %7265, i64 -29
  %7291 = bitcast i16* %7290 to <16 x i16>*
  %7292 = load <16 x i16>, <16 x i16>* %7291, align 2, !tbaa !396
  %7293 = getelementptr inbounds i16, i16* %7265, i64 -13
  %7294 = bitcast i16* %7293 to <16 x i16>*
  %7295 = load <16 x i16>, <16 x i16>* %7294, align 2, !tbaa !396
  %7296 = add <16 x i16> %7274, %7268
  %7297 = add <16 x i16> %7296, %7280
  %7298 = add <16 x i16> %7297, %7286
  %7299 = add <16 x i16> %7298, %7292
  %7300 = add <16 x i16> %7277, %7271
  %7301 = add <16 x i16> %7300, %7283
  %7302 = add <16 x i16> %7301, %7289
  %7303 = add <16 x i16> %7302, %7295
  %7304 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7299, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7305 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7303, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7306 = shufflevector <16 x i16> %7304, <16 x i16> %7305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7307 = lshr <32 x i16> %7306, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7308 = shufflevector <32 x i16> %7307, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7309 = zext i32 %.pre-phi3445 to i64
  %7310 = mul nsw i64 %97, %7309
  %7311 = add nsw i64 %99, %7310
  %7312 = getelementptr inbounds i16, i16* %blur_x, i64 %7311
  %7313 = getelementptr inbounds i16, i16* %7312, i64 -32
  %7314 = bitcast i16* %7313 to <16 x i16>*
  store <16 x i16> %7308, <16 x i16>* %7314, align 2, !tbaa !399
  %7315 = shufflevector <32 x i16> %7307, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7316 = getelementptr inbounds i16, i16* %7312, i64 -16
  %7317 = bitcast i16* %7316 to <16 x i16>*
  store <16 x i16> %7315, <16 x i16>* %7317, align 2, !tbaa !399
  %7318 = zext i32 %.pre-phi3469 to i64
  %7319 = mul nsw i64 %7318, %112
  %7320 = add nsw i64 %7319, %94
  %7321 = getelementptr inbounds i16, i16* %blur_x, i64 %7320
  %7322 = getelementptr inbounds i16, i16* %7321, i64 -32
  %7323 = bitcast i16* %7322 to <16 x i16>*
  %7324 = load <16 x i16>, <16 x i16>* %7323, align 2, !tbaa !399
  %7325 = getelementptr inbounds i16, i16* %7321, i64 -16
  %7326 = bitcast i16* %7325 to <16 x i16>*
  %7327 = load <16 x i16>, <16 x i16>* %7326, align 2, !tbaa !399
  %7328 = zext i32 %.pre-phi3463 to i64
  %7329 = mul nsw i64 %7328, %112
  %7330 = add nsw i64 %7329, %94
  %7331 = getelementptr inbounds i16, i16* %blur_x, i64 %7330
  %7332 = getelementptr inbounds i16, i16* %7331, i64 -32
  %7333 = bitcast i16* %7332 to <16 x i16>*
  %7334 = load <16 x i16>, <16 x i16>* %7333, align 2, !tbaa !399
  %7335 = getelementptr inbounds i16, i16* %7331, i64 -16
  %7336 = bitcast i16* %7335 to <16 x i16>*
  %7337 = load <16 x i16>, <16 x i16>* %7336, align 2, !tbaa !399
  %7338 = zext i32 %.pre-phi3475 to i64
  %7339 = mul nsw i64 %7338, %112
  %7340 = add nsw i64 %7339, %94
  %7341 = getelementptr inbounds i16, i16* %blur_x, i64 %7340
  %7342 = getelementptr inbounds i16, i16* %7341, i64 -32
  %7343 = bitcast i16* %7342 to <16 x i16>*
  %7344 = load <16 x i16>, <16 x i16>* %7343, align 2, !tbaa !399
  %7345 = getelementptr inbounds i16, i16* %7341, i64 -16
  %7346 = bitcast i16* %7345 to <16 x i16>*
  %7347 = load <16 x i16>, <16 x i16>* %7346, align 2, !tbaa !399
  %7348 = mul nsw i64 %7309, %112
  %7349 = add nsw i64 %7348, %94
  %7350 = getelementptr inbounds i16, i16* %blur_x, i64 %7349
  %7351 = getelementptr inbounds i16, i16* %7350, i64 -32
  %7352 = bitcast i16* %7351 to <16 x i16>*
  %7353 = load <16 x i16>, <16 x i16>* %7352, align 2, !tbaa !399
  %7354 = getelementptr inbounds i16, i16* %7350, i64 -16
  %7355 = bitcast i16* %7354 to <16 x i16>*
  %7356 = load <16 x i16>, <16 x i16>* %7355, align 2, !tbaa !399
  %7357 = zext i32 %.pre-phi to i64
  %7358 = mul nsw i64 %7357, %112
  %7359 = add nsw i64 %7358, %94
  %7360 = getelementptr inbounds i16, i16* %blur_x, i64 %7359
  %7361 = getelementptr inbounds i16, i16* %7360, i64 -32
  %7362 = bitcast i16* %7361 to <16 x i16>*
  %7363 = load <16 x i16>, <16 x i16>* %7362, align 2, !tbaa !399
  %7364 = getelementptr inbounds i16, i16* %7360, i64 -16
  %7365 = bitcast i16* %7364 to <16 x i16>*
  %7366 = load <16 x i16>, <16 x i16>* %7365, align 2, !tbaa !399
  %7367 = add <16 x i16> %7334, %7324
  %7368 = add <16 x i16> %7367, %7344
  %7369 = add <16 x i16> %7368, %7353
  %7370 = add <16 x i16> %7369, %7363
  %7371 = add <16 x i16> %7337, %7327
  %7372 = add <16 x i16> %7371, %7347
  %7373 = add <16 x i16> %7372, %7356
  %7374 = add <16 x i16> %7373, %7366
  %7375 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7370, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7374, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7377 = shufflevector <16 x i16> %7375, <16 x i16> %7376, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7378 = lshr <32 x i16> %7377, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7379 = shufflevector <32 x i16> %7378, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7380 = sext i32 %a26 to i64
  %7381 = add nsw i64 %7380, 13
  %7382 = mul nsw i64 %7381, %113
  %7383 = add nsw i64 %115, %7382
  %7384 = getelementptr inbounds i16, i16* %66, i64 %7383
  %7385 = getelementptr inbounds i16, i16* %7384, i64 -32
  %7386 = bitcast i16* %7385 to <16 x i16>*
  store <16 x i16> %7379, <16 x i16>* %7386, align 2, !tbaa !401
  %7387 = shufflevector <32 x i16> %7378, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7388 = getelementptr inbounds i16, i16* %7384, i64 -16
  %7389 = bitcast i16* %7388 to <16 x i16>*
  store <16 x i16> %7387, <16 x i16>* %7389, align 2, !tbaa !401
  br label %after_bb377

"for blur_y.s0.x.x.rebased382":                   ; preds = %"for blur_y.s0.x.x.rebased382.preheader", %"consume blur_x389"
  %indvars.iv3298 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased382.preheader" ], [ %indvars.iv.next3299, %"consume blur_x389" ]
  %7390 = add nsw i64 %indvars.iv3298, %101
  %7391 = icmp slt i64 %7390, 1
  %7392 = trunc i64 %7390 to i32
  %7393 = shl nsw i32 %7392, 5
  %7394 = icmp sgt i32 %4, %7393
  %7395 = or i1 %7391, %7394
  br i1 %7395, label %"produce blur_x388", label %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge"

"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased382"
  %.pre3496 = shl nsw i64 %7390, 5
  br label %"consume blur_x389"

"end for blur_y.s0.x.x.rebased383":               ; preds = %"consume blur_x389", %after_bb377
  br i1 %102, label %"for blur_y.s0.x.x.rebased390.preheader", label %"end for blur_y.s0.x.x.rebased391", !prof !386

"for blur_y.s0.x.x.rebased390.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased383"
  %7396 = sext i32 %t1688 to i64
  %7397 = zext i32 %.pre-phi3469 to i64
  %7398 = mul nsw i64 %7397, %112
  %7399 = sub nsw i64 %7398, %96
  %7400 = zext i32 %.pre-phi3463 to i64
  %7401 = mul nsw i64 %7400, %112
  %7402 = sub nsw i64 %7401, %96
  %7403 = zext i32 %.pre-phi3475 to i64
  %7404 = mul nsw i64 %7403, %112
  %7405 = sub nsw i64 %7404, %96
  %7406 = zext i32 %.pre-phi3445 to i64
  %7407 = mul nsw i64 %7406, %112
  %7408 = sub nsw i64 %7407, %96
  %7409 = zext i32 %.pre-phi to i64
  %7410 = mul nsw i64 %7409, %112
  %7411 = sub nsw i64 %7410, %96
  %7412 = sext i32 %a26 to i64
  %7413 = add nsw i64 %7412, 13
  %7414 = mul nsw i64 %7413, %113
  %7415 = add nsw i64 %7414, %116
  br label %"for blur_y.s0.x.x.rebased390"

"produce blur_x388":                              ; preds = %"for blur_y.s0.x.x.rebased382"
  %t920 = add nsw i32 %7393, %t1913
  %7416 = sext i32 %t920 to i64
  %7417 = getelementptr inbounds i16, i16* %read_input, i64 %7416
  %7418 = getelementptr inbounds i16, i16* %7417, i64 1
  %7419 = bitcast i16* %7418 to <16 x i16>*
  %7420 = load <16 x i16>, <16 x i16>* %7419, align 2, !tbaa !396
  %7421 = getelementptr inbounds i16, i16* %7417, i64 17
  %7422 = bitcast i16* %7421 to <16 x i16>*
  %7423 = load <16 x i16>, <16 x i16>* %7422, align 2, !tbaa !396
  %7424 = bitcast i16* %7417 to <16 x i16>*
  %7425 = load <16 x i16>, <16 x i16>* %7424, align 2, !tbaa !396
  %7426 = getelementptr inbounds i16, i16* %7417, i64 16
  %7427 = bitcast i16* %7426 to <16 x i16>*
  %7428 = load <16 x i16>, <16 x i16>* %7427, align 2, !tbaa !396
  %7429 = getelementptr inbounds i16, i16* %7417, i64 2
  %7430 = bitcast i16* %7429 to <16 x i16>*
  %7431 = load <16 x i16>, <16 x i16>* %7430, align 2, !tbaa !396
  %7432 = getelementptr inbounds i16, i16* %7417, i64 18
  %7433 = bitcast i16* %7432 to <16 x i16>*
  %7434 = load <16 x i16>, <16 x i16>* %7433, align 2, !tbaa !396
  %7435 = getelementptr inbounds i16, i16* %7417, i64 4
  %7436 = bitcast i16* %7435 to <16 x i16>*
  %7437 = load <16 x i16>, <16 x i16>* %7436, align 2, !tbaa !396
  %7438 = getelementptr inbounds i16, i16* %7417, i64 20
  %7439 = bitcast i16* %7438 to <16 x i16>*
  %7440 = load <16 x i16>, <16 x i16>* %7439, align 2, !tbaa !396
  %7441 = getelementptr inbounds i16, i16* %7417, i64 3
  %7442 = bitcast i16* %7441 to <16 x i16>*
  %7443 = load <16 x i16>, <16 x i16>* %7442, align 2, !tbaa !396
  %7444 = getelementptr inbounds i16, i16* %7417, i64 19
  %7445 = bitcast i16* %7444 to <16 x i16>*
  %7446 = load <16 x i16>, <16 x i16>* %7445, align 2, !tbaa !396
  %7447 = add <16 x i16> %7425, %7420
  %7448 = add <16 x i16> %7447, %7431
  %7449 = add <16 x i16> %7448, %7437
  %7450 = add <16 x i16> %7449, %7443
  %7451 = add <16 x i16> %7428, %7423
  %7452 = add <16 x i16> %7451, %7434
  %7453 = add <16 x i16> %7452, %7440
  %7454 = add <16 x i16> %7453, %7446
  %7455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7450, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7454, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7457 = shufflevector <16 x i16> %7455, <16 x i16> %7456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7458 = lshr <32 x i16> %7457, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7459 = shufflevector <32 x i16> %7458, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7460 = shl nsw i64 %7390, 5
  %7461 = add nsw i64 %7460, %7245
  %7462 = getelementptr inbounds i16, i16* %blur_x, i64 %7461
  %7463 = bitcast i16* %7462 to <16 x i16>*
  store <16 x i16> %7459, <16 x i16>* %7463, align 2, !tbaa !399
  %7464 = shufflevector <32 x i16> %7458, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7465 = getelementptr inbounds i16, i16* %7462, i64 16
  %7466 = bitcast i16* %7465 to <16 x i16>*
  store <16 x i16> %7464, <16 x i16>* %7466, align 2, !tbaa !399
  br label %"consume blur_x389"

"consume blur_x389":                              ; preds = %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge", %"produce blur_x388"
  %.pre-phi3497 = phi i64 [ %.pre3496, %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge" ], [ %7460, %"produce blur_x388" ]
  %7467 = add nsw i64 %7248, %.pre-phi3497
  %7468 = getelementptr inbounds i16, i16* %blur_x, i64 %7467
  %7469 = bitcast i16* %7468 to <16 x i16>*
  %7470 = load <16 x i16>, <16 x i16>* %7469, align 2, !tbaa !399
  %7471 = getelementptr inbounds i16, i16* %7468, i64 16
  %7472 = bitcast i16* %7471 to <16 x i16>*
  %7473 = load <16 x i16>, <16 x i16>* %7472, align 2, !tbaa !399
  %7474 = add nsw i64 %7251, %.pre-phi3497
  %7475 = getelementptr inbounds i16, i16* %blur_x, i64 %7474
  %7476 = bitcast i16* %7475 to <16 x i16>*
  %7477 = load <16 x i16>, <16 x i16>* %7476, align 2, !tbaa !399
  %7478 = getelementptr inbounds i16, i16* %7475, i64 16
  %7479 = bitcast i16* %7478 to <16 x i16>*
  %7480 = load <16 x i16>, <16 x i16>* %7479, align 2, !tbaa !399
  %7481 = add nsw i64 %7254, %.pre-phi3497
  %7482 = getelementptr inbounds i16, i16* %blur_x, i64 %7481
  %7483 = bitcast i16* %7482 to <16 x i16>*
  %7484 = load <16 x i16>, <16 x i16>* %7483, align 2, !tbaa !399
  %7485 = getelementptr inbounds i16, i16* %7482, i64 16
  %7486 = bitcast i16* %7485 to <16 x i16>*
  %7487 = load <16 x i16>, <16 x i16>* %7486, align 2, !tbaa !399
  %7488 = add nsw i64 %7257, %.pre-phi3497
  %7489 = getelementptr inbounds i16, i16* %blur_x, i64 %7488
  %7490 = bitcast i16* %7489 to <16 x i16>*
  %7491 = load <16 x i16>, <16 x i16>* %7490, align 2, !tbaa !399
  %7492 = getelementptr inbounds i16, i16* %7489, i64 16
  %7493 = bitcast i16* %7492 to <16 x i16>*
  %7494 = load <16 x i16>, <16 x i16>* %7493, align 2, !tbaa !399
  %7495 = add nsw i64 %7260, %.pre-phi3497
  %7496 = getelementptr inbounds i16, i16* %blur_x, i64 %7495
  %7497 = bitcast i16* %7496 to <16 x i16>*
  %7498 = load <16 x i16>, <16 x i16>* %7497, align 2, !tbaa !399
  %7499 = getelementptr inbounds i16, i16* %7496, i64 16
  %7500 = bitcast i16* %7499 to <16 x i16>*
  %7501 = load <16 x i16>, <16 x i16>* %7500, align 2, !tbaa !399
  %7502 = add <16 x i16> %7477, %7470
  %7503 = add <16 x i16> %7502, %7484
  %7504 = add <16 x i16> %7503, %7491
  %7505 = add <16 x i16> %7504, %7498
  %7506 = add <16 x i16> %7480, %7473
  %7507 = add <16 x i16> %7506, %7487
  %7508 = add <16 x i16> %7507, %7494
  %7509 = add <16 x i16> %7508, %7501
  %7510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7505, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7509, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7512 = shufflevector <16 x i16> %7510, <16 x i16> %7511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7513 = lshr <32 x i16> %7512, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7514 = shufflevector <32 x i16> %7513, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7515 = add nsw i64 %7264, %.pre-phi3497
  %7516 = getelementptr inbounds i16, i16* %66, i64 %7515
  %7517 = bitcast i16* %7516 to <16 x i16>*
  store <16 x i16> %7514, <16 x i16>* %7517, align 2, !tbaa !401
  %7518 = shufflevector <32 x i16> %7513, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7519 = getelementptr inbounds i16, i16* %7516, i64 16
  %7520 = bitcast i16* %7519 to <16 x i16>*
  store <16 x i16> %7518, <16 x i16>* %7520, align 2, !tbaa !401
  %indvars.iv.next3299 = add nuw nsw i64 %indvars.iv3298, 1
  %.not2731 = icmp eq i64 %indvars.iv.next3299, %184
  br i1 %.not2731, label %"end for blur_y.s0.x.x.rebased383", label %"for blur_y.s0.x.x.rebased382"

"for blur_y.s0.x.x.rebased390":                   ; preds = %"for blur_y.s0.x.x.rebased390.preheader", %"consume blur_x398"
  %blur_y.s0.x.x.rebased392 = phi i32 [ %7633, %"consume blur_x398" ], [ 0, %"for blur_y.s0.x.x.rebased390.preheader" ]
  %7521 = add nsw i32 %blur_y.s0.x.x.rebased392, %t1626
  %a196 = shl nsw i32 %7521, 5
  %7522 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %7522, i32 %a196, i32 %a14
  %7523 = icmp slt i32 %7521, 1
  %7524 = icmp sgt i32 %4, %a196
  %7525 = or i1 %7523, %7524
  br i1 %7525, label %"produce blur_x396", label %"consume blur_x398"

"end for blur_y.s0.x.x.rebased391":               ; preds = %"consume blur_x398", %"end for blur_y.s0.x.x.rebased383"
  br i1 %34, label %"produce blur_x402", label %after_bb399

"produce blur_x396":                              ; preds = %"for blur_y.s0.x.x.rebased390"
  %7526 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s397 = select i1 %7526, i32 %b202, i32 %4
  %t925 = add nsw i32 %blur_x.s0.x.v1.base.s397, %t1913
  %7527 = sext i32 %t925 to i64
  %7528 = getelementptr inbounds i16, i16* %read_input, i64 %7527
  %7529 = getelementptr inbounds i16, i16* %7528, i64 1
  %7530 = bitcast i16* %7529 to <16 x i16>*
  %7531 = load <16 x i16>, <16 x i16>* %7530, align 2, !tbaa !396
  %7532 = getelementptr inbounds i16, i16* %7528, i64 17
  %7533 = bitcast i16* %7532 to <16 x i16>*
  %7534 = load <16 x i16>, <16 x i16>* %7533, align 2, !tbaa !396
  %7535 = bitcast i16* %7528 to <16 x i16>*
  %7536 = load <16 x i16>, <16 x i16>* %7535, align 2, !tbaa !396
  %7537 = getelementptr inbounds i16, i16* %7528, i64 16
  %7538 = bitcast i16* %7537 to <16 x i16>*
  %7539 = load <16 x i16>, <16 x i16>* %7538, align 2, !tbaa !396
  %7540 = getelementptr inbounds i16, i16* %7528, i64 2
  %7541 = bitcast i16* %7540 to <16 x i16>*
  %7542 = load <16 x i16>, <16 x i16>* %7541, align 2, !tbaa !396
  %7543 = getelementptr inbounds i16, i16* %7528, i64 18
  %7544 = bitcast i16* %7543 to <16 x i16>*
  %7545 = load <16 x i16>, <16 x i16>* %7544, align 2, !tbaa !396
  %7546 = getelementptr inbounds i16, i16* %7528, i64 4
  %7547 = bitcast i16* %7546 to <16 x i16>*
  %7548 = load <16 x i16>, <16 x i16>* %7547, align 2, !tbaa !396
  %7549 = getelementptr inbounds i16, i16* %7528, i64 20
  %7550 = bitcast i16* %7549 to <16 x i16>*
  %7551 = load <16 x i16>, <16 x i16>* %7550, align 2, !tbaa !396
  %7552 = getelementptr inbounds i16, i16* %7528, i64 3
  %7553 = bitcast i16* %7552 to <16 x i16>*
  %7554 = load <16 x i16>, <16 x i16>* %7553, align 2, !tbaa !396
  %7555 = getelementptr inbounds i16, i16* %7528, i64 19
  %7556 = bitcast i16* %7555 to <16 x i16>*
  %7557 = load <16 x i16>, <16 x i16>* %7556, align 2, !tbaa !396
  %7558 = add <16 x i16> %7536, %7531
  %7559 = add <16 x i16> %7558, %7542
  %7560 = add <16 x i16> %7559, %7548
  %7561 = add <16 x i16> %7560, %7554
  %7562 = add <16 x i16> %7539, %7534
  %7563 = add <16 x i16> %7562, %7545
  %7564 = add <16 x i16> %7563, %7551
  %7565 = add <16 x i16> %7564, %7557
  %7566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7561, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7565, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7568 = shufflevector <16 x i16> %7566, <16 x i16> %7567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7569 = lshr <32 x i16> %7568, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7570 = shufflevector <32 x i16> %7569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7571 = sext i32 %blur_x.s0.x.v1.base.s397 to i64
  %7572 = add nsw i64 %7571, %7396
  %7573 = getelementptr inbounds i16, i16* %blur_x, i64 %7572
  %7574 = bitcast i16* %7573 to <16 x i16>*
  store <16 x i16> %7570, <16 x i16>* %7574, align 2, !tbaa !399
  %7575 = shufflevector <32 x i16> %7569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7576 = getelementptr inbounds i16, i16* %7573, i64 16
  %7577 = bitcast i16* %7576 to <16 x i16>*
  store <16 x i16> %7575, <16 x i16>* %7577, align 2, !tbaa !399
  br label %"consume blur_x398"

"consume blur_x398":                              ; preds = %"for blur_y.s0.x.x.rebased390", %"produce blur_x396"
  %7578 = sext i32 %b202 to i64
  %7579 = add nsw i64 %7399, %7578
  %7580 = getelementptr inbounds i16, i16* %blur_x, i64 %7579
  %7581 = bitcast i16* %7580 to <16 x i16>*
  %7582 = load <16 x i16>, <16 x i16>* %7581, align 2, !tbaa !399
  %7583 = getelementptr inbounds i16, i16* %7580, i64 16
  %7584 = bitcast i16* %7583 to <16 x i16>*
  %7585 = load <16 x i16>, <16 x i16>* %7584, align 2, !tbaa !399
  %7586 = add nsw i64 %7402, %7578
  %7587 = getelementptr inbounds i16, i16* %blur_x, i64 %7586
  %7588 = bitcast i16* %7587 to <16 x i16>*
  %7589 = load <16 x i16>, <16 x i16>* %7588, align 2, !tbaa !399
  %7590 = getelementptr inbounds i16, i16* %7587, i64 16
  %7591 = bitcast i16* %7590 to <16 x i16>*
  %7592 = load <16 x i16>, <16 x i16>* %7591, align 2, !tbaa !399
  %7593 = add nsw i64 %7405, %7578
  %7594 = getelementptr inbounds i16, i16* %blur_x, i64 %7593
  %7595 = bitcast i16* %7594 to <16 x i16>*
  %7596 = load <16 x i16>, <16 x i16>* %7595, align 2, !tbaa !399
  %7597 = getelementptr inbounds i16, i16* %7594, i64 16
  %7598 = bitcast i16* %7597 to <16 x i16>*
  %7599 = load <16 x i16>, <16 x i16>* %7598, align 2, !tbaa !399
  %7600 = add nsw i64 %7408, %7578
  %7601 = getelementptr inbounds i16, i16* %blur_x, i64 %7600
  %7602 = bitcast i16* %7601 to <16 x i16>*
  %7603 = load <16 x i16>, <16 x i16>* %7602, align 2, !tbaa !399
  %7604 = getelementptr inbounds i16, i16* %7601, i64 16
  %7605 = bitcast i16* %7604 to <16 x i16>*
  %7606 = load <16 x i16>, <16 x i16>* %7605, align 2, !tbaa !399
  %7607 = add nsw i64 %7411, %7578
  %7608 = getelementptr inbounds i16, i16* %blur_x, i64 %7607
  %7609 = bitcast i16* %7608 to <16 x i16>*
  %7610 = load <16 x i16>, <16 x i16>* %7609, align 2, !tbaa !399
  %7611 = getelementptr inbounds i16, i16* %7608, i64 16
  %7612 = bitcast i16* %7611 to <16 x i16>*
  %7613 = load <16 x i16>, <16 x i16>* %7612, align 2, !tbaa !399
  %7614 = add <16 x i16> %7589, %7582
  %7615 = add <16 x i16> %7614, %7596
  %7616 = add <16 x i16> %7615, %7603
  %7617 = add <16 x i16> %7616, %7610
  %7618 = add <16 x i16> %7592, %7585
  %7619 = add <16 x i16> %7618, %7599
  %7620 = add <16 x i16> %7619, %7606
  %7621 = add <16 x i16> %7620, %7613
  %7622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7617, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7621, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7624 = shufflevector <16 x i16> %7622, <16 x i16> %7623, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7625 = lshr <32 x i16> %7624, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7626 = shufflevector <32 x i16> %7625, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7627 = add nsw i64 %7415, %7578
  %7628 = getelementptr inbounds i16, i16* %66, i64 %7627
  %7629 = bitcast i16* %7628 to <16 x i16>*
  store <16 x i16> %7626, <16 x i16>* %7629, align 2, !tbaa !401
  %7630 = shufflevector <32 x i16> %7625, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7631 = getelementptr inbounds i16, i16* %7628, i64 16
  %7632 = bitcast i16* %7631 to <16 x i16>*
  store <16 x i16> %7630, <16 x i16>* %7632, align 2, !tbaa !401
  %7633 = add nuw nsw i32 %blur_y.s0.x.x.rebased392, 1
  %.not2730 = icmp eq i32 %7633, %t1683
  br i1 %.not2730, label %"end for blur_y.s0.x.x.rebased391", label %"for blur_y.s0.x.x.rebased390"

after_bb399:                                      ; preds = %"end for blur_y.s0.x.x.rebased391", %"produce blur_x402"
  br i1 %100, label %"for blur_y.s0.x.x.rebased404.preheader", label %"end for blur_y.s0.x.x.rebased405", !prof !386

"for blur_y.s0.x.x.rebased404.preheader":         ; preds = %after_bb399
  %7634 = sext i32 %t1694 to i64
  %7635 = zext i32 %.pre-phi3475 to i64
  %7636 = mul nsw i64 %7635, %112
  %7637 = sub nsw i64 %7636, %96
  %7638 = zext i32 %.pre-phi3469 to i64
  %7639 = mul nsw i64 %7638, %112
  %7640 = sub nsw i64 %7639, %96
  %7641 = zext i32 %.pre-phi to i64
  %7642 = mul nsw i64 %7641, %112
  %7643 = sub nsw i64 %7642, %96
  %7644 = zext i32 %.pre-phi3449 to i64
  %7645 = mul nsw i64 %7644, %112
  %7646 = sub nsw i64 %7645, %96
  %7647 = zext i32 %.pre-phi3445 to i64
  %7648 = mul nsw i64 %7647, %112
  %7649 = sub nsw i64 %7648, %96
  %7650 = sext i32 %a26 to i64
  %7651 = add nsw i64 %7650, 14
  %7652 = mul nsw i64 %7651, %113
  %7653 = add nsw i64 %7652, %116
  br label %"for blur_y.s0.x.x.rebased404"

"produce blur_x402":                              ; preds = %"end for blur_y.s0.x.x.rebased391"
  %7654 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %7655 = getelementptr inbounds i16, i16* %7654, i64 -31
  %7656 = bitcast i16* %7655 to <16 x i16>*
  %7657 = load <16 x i16>, <16 x i16>* %7656, align 2, !tbaa !396
  %7658 = getelementptr inbounds i16, i16* %7654, i64 -15
  %7659 = bitcast i16* %7658 to <16 x i16>*
  %7660 = load <16 x i16>, <16 x i16>* %7659, align 2, !tbaa !396
  %7661 = getelementptr inbounds i16, i16* %7654, i64 -32
  %7662 = bitcast i16* %7661 to <16 x i16>*
  %7663 = load <16 x i16>, <16 x i16>* %7662, align 2, !tbaa !396
  %7664 = getelementptr inbounds i16, i16* %7654, i64 -16
  %7665 = bitcast i16* %7664 to <16 x i16>*
  %7666 = load <16 x i16>, <16 x i16>* %7665, align 2, !tbaa !396
  %7667 = getelementptr inbounds i16, i16* %7654, i64 -30
  %7668 = bitcast i16* %7667 to <16 x i16>*
  %7669 = load <16 x i16>, <16 x i16>* %7668, align 2, !tbaa !396
  %7670 = getelementptr inbounds i16, i16* %7654, i64 -14
  %7671 = bitcast i16* %7670 to <16 x i16>*
  %7672 = load <16 x i16>, <16 x i16>* %7671, align 2, !tbaa !396
  %7673 = getelementptr inbounds i16, i16* %7654, i64 -28
  %7674 = bitcast i16* %7673 to <16 x i16>*
  %7675 = load <16 x i16>, <16 x i16>* %7674, align 2, !tbaa !396
  %7676 = getelementptr inbounds i16, i16* %7654, i64 -12
  %7677 = bitcast i16* %7676 to <16 x i16>*
  %7678 = load <16 x i16>, <16 x i16>* %7677, align 2, !tbaa !396
  %7679 = getelementptr inbounds i16, i16* %7654, i64 -29
  %7680 = bitcast i16* %7679 to <16 x i16>*
  %7681 = load <16 x i16>, <16 x i16>* %7680, align 2, !tbaa !396
  %7682 = getelementptr inbounds i16, i16* %7654, i64 -13
  %7683 = bitcast i16* %7682 to <16 x i16>*
  %7684 = load <16 x i16>, <16 x i16>* %7683, align 2, !tbaa !396
  %7685 = add <16 x i16> %7663, %7657
  %7686 = add <16 x i16> %7685, %7669
  %7687 = add <16 x i16> %7686, %7675
  %7688 = add <16 x i16> %7687, %7681
  %7689 = add <16 x i16> %7666, %7660
  %7690 = add <16 x i16> %7689, %7672
  %7691 = add <16 x i16> %7690, %7678
  %7692 = add <16 x i16> %7691, %7684
  %7693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7688, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7694 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7692, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7695 = shufflevector <16 x i16> %7693, <16 x i16> %7694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7696 = lshr <32 x i16> %7695, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7697 = shufflevector <32 x i16> %7696, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7698 = zext i32 %.pre-phi3449 to i64
  %7699 = mul nsw i64 %97, %7698
  %7700 = add nsw i64 %99, %7699
  %7701 = getelementptr inbounds i16, i16* %blur_x, i64 %7700
  %7702 = getelementptr inbounds i16, i16* %7701, i64 -32
  %7703 = bitcast i16* %7702 to <16 x i16>*
  store <16 x i16> %7697, <16 x i16>* %7703, align 2, !tbaa !399
  %7704 = shufflevector <32 x i16> %7696, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7705 = getelementptr inbounds i16, i16* %7701, i64 -16
  %7706 = bitcast i16* %7705 to <16 x i16>*
  store <16 x i16> %7704, <16 x i16>* %7706, align 2, !tbaa !399
  %7707 = zext i32 %.pre-phi3475 to i64
  %7708 = mul nsw i64 %7707, %112
  %7709 = add nsw i64 %7708, %94
  %7710 = getelementptr inbounds i16, i16* %blur_x, i64 %7709
  %7711 = getelementptr inbounds i16, i16* %7710, i64 -32
  %7712 = bitcast i16* %7711 to <16 x i16>*
  %7713 = load <16 x i16>, <16 x i16>* %7712, align 2, !tbaa !399
  %7714 = getelementptr inbounds i16, i16* %7710, i64 -16
  %7715 = bitcast i16* %7714 to <16 x i16>*
  %7716 = load <16 x i16>, <16 x i16>* %7715, align 2, !tbaa !399
  %7717 = zext i32 %.pre-phi3469 to i64
  %7718 = mul nsw i64 %7717, %112
  %7719 = add nsw i64 %7718, %94
  %7720 = getelementptr inbounds i16, i16* %blur_x, i64 %7719
  %7721 = getelementptr inbounds i16, i16* %7720, i64 -32
  %7722 = bitcast i16* %7721 to <16 x i16>*
  %7723 = load <16 x i16>, <16 x i16>* %7722, align 2, !tbaa !399
  %7724 = getelementptr inbounds i16, i16* %7720, i64 -16
  %7725 = bitcast i16* %7724 to <16 x i16>*
  %7726 = load <16 x i16>, <16 x i16>* %7725, align 2, !tbaa !399
  %7727 = zext i32 %.pre-phi to i64
  %7728 = mul nsw i64 %7727, %112
  %7729 = add nsw i64 %7728, %94
  %7730 = getelementptr inbounds i16, i16* %blur_x, i64 %7729
  %7731 = getelementptr inbounds i16, i16* %7730, i64 -32
  %7732 = bitcast i16* %7731 to <16 x i16>*
  %7733 = load <16 x i16>, <16 x i16>* %7732, align 2, !tbaa !399
  %7734 = getelementptr inbounds i16, i16* %7730, i64 -16
  %7735 = bitcast i16* %7734 to <16 x i16>*
  %7736 = load <16 x i16>, <16 x i16>* %7735, align 2, !tbaa !399
  %7737 = mul nsw i64 %7698, %112
  %7738 = add nsw i64 %7737, %94
  %7739 = getelementptr inbounds i16, i16* %blur_x, i64 %7738
  %7740 = getelementptr inbounds i16, i16* %7739, i64 -32
  %7741 = bitcast i16* %7740 to <16 x i16>*
  %7742 = load <16 x i16>, <16 x i16>* %7741, align 2, !tbaa !399
  %7743 = getelementptr inbounds i16, i16* %7739, i64 -16
  %7744 = bitcast i16* %7743 to <16 x i16>*
  %7745 = load <16 x i16>, <16 x i16>* %7744, align 2, !tbaa !399
  %7746 = zext i32 %.pre-phi3445 to i64
  %7747 = mul nsw i64 %7746, %112
  %7748 = add nsw i64 %7747, %94
  %7749 = getelementptr inbounds i16, i16* %blur_x, i64 %7748
  %7750 = getelementptr inbounds i16, i16* %7749, i64 -32
  %7751 = bitcast i16* %7750 to <16 x i16>*
  %7752 = load <16 x i16>, <16 x i16>* %7751, align 2, !tbaa !399
  %7753 = getelementptr inbounds i16, i16* %7749, i64 -16
  %7754 = bitcast i16* %7753 to <16 x i16>*
  %7755 = load <16 x i16>, <16 x i16>* %7754, align 2, !tbaa !399
  %7756 = add <16 x i16> %7723, %7713
  %7757 = add <16 x i16> %7756, %7733
  %7758 = add <16 x i16> %7757, %7742
  %7759 = add <16 x i16> %7758, %7752
  %7760 = add <16 x i16> %7726, %7716
  %7761 = add <16 x i16> %7760, %7736
  %7762 = add <16 x i16> %7761, %7745
  %7763 = add <16 x i16> %7762, %7755
  %7764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7759, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7765 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7763, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7766 = shufflevector <16 x i16> %7764, <16 x i16> %7765, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7767 = lshr <32 x i16> %7766, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7768 = shufflevector <32 x i16> %7767, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7769 = sext i32 %a26 to i64
  %7770 = add nsw i64 %7769, 14
  %7771 = mul nsw i64 %7770, %113
  %7772 = add nsw i64 %115, %7771
  %7773 = getelementptr inbounds i16, i16* %66, i64 %7772
  %7774 = getelementptr inbounds i16, i16* %7773, i64 -32
  %7775 = bitcast i16* %7774 to <16 x i16>*
  store <16 x i16> %7768, <16 x i16>* %7775, align 2, !tbaa !401
  %7776 = shufflevector <32 x i16> %7767, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7777 = getelementptr inbounds i16, i16* %7773, i64 -16
  %7778 = bitcast i16* %7777 to <16 x i16>*
  store <16 x i16> %7776, <16 x i16>* %7778, align 2, !tbaa !401
  br label %after_bb399

"for blur_y.s0.x.x.rebased404":                   ; preds = %"for blur_y.s0.x.x.rebased404.preheader", %"consume blur_x411"
  %indvars.iv3301 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased404.preheader" ], [ %indvars.iv.next3302, %"consume blur_x411" ]
  %7779 = add nsw i64 %indvars.iv3301, %101
  %7780 = icmp slt i64 %7779, 1
  %7781 = trunc i64 %7779 to i32
  %7782 = shl nsw i32 %7781, 5
  %7783 = icmp sgt i32 %4, %7782
  %7784 = or i1 %7780, %7783
  br i1 %7784, label %"produce blur_x410", label %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge"

"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased404"
  %.pre3498 = shl nsw i64 %7779, 5
  br label %"consume blur_x411"

"end for blur_y.s0.x.x.rebased405":               ; preds = %"consume blur_x411", %after_bb399
  br i1 %102, label %"for blur_y.s0.x.x.rebased412.preheader", label %"end for blur_y.s0.x.x.rebased413", !prof !386

"for blur_y.s0.x.x.rebased412.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased405"
  %7785 = sext i32 %t1694 to i64
  %7786 = zext i32 %.pre-phi3475 to i64
  %7787 = mul nsw i64 %7786, %112
  %7788 = sub nsw i64 %7787, %96
  %7789 = zext i32 %.pre-phi3469 to i64
  %7790 = mul nsw i64 %7789, %112
  %7791 = sub nsw i64 %7790, %96
  %7792 = zext i32 %.pre-phi to i64
  %7793 = mul nsw i64 %7792, %112
  %7794 = sub nsw i64 %7793, %96
  %7795 = zext i32 %.pre-phi3449 to i64
  %7796 = mul nsw i64 %7795, %112
  %7797 = sub nsw i64 %7796, %96
  %7798 = zext i32 %.pre-phi3445 to i64
  %7799 = mul nsw i64 %7798, %112
  %7800 = sub nsw i64 %7799, %96
  %7801 = sext i32 %a26 to i64
  %7802 = add nsw i64 %7801, 14
  %7803 = mul nsw i64 %7802, %113
  %7804 = add nsw i64 %7803, %116
  br label %"for blur_y.s0.x.x.rebased412"

"produce blur_x410":                              ; preds = %"for blur_y.s0.x.x.rebased404"
  %t936 = add nsw i32 %7782, %t1929
  %7805 = sext i32 %t936 to i64
  %7806 = getelementptr inbounds i16, i16* %read_input, i64 %7805
  %7807 = getelementptr inbounds i16, i16* %7806, i64 1
  %7808 = bitcast i16* %7807 to <16 x i16>*
  %7809 = load <16 x i16>, <16 x i16>* %7808, align 2, !tbaa !396
  %7810 = getelementptr inbounds i16, i16* %7806, i64 17
  %7811 = bitcast i16* %7810 to <16 x i16>*
  %7812 = load <16 x i16>, <16 x i16>* %7811, align 2, !tbaa !396
  %7813 = bitcast i16* %7806 to <16 x i16>*
  %7814 = load <16 x i16>, <16 x i16>* %7813, align 2, !tbaa !396
  %7815 = getelementptr inbounds i16, i16* %7806, i64 16
  %7816 = bitcast i16* %7815 to <16 x i16>*
  %7817 = load <16 x i16>, <16 x i16>* %7816, align 2, !tbaa !396
  %7818 = getelementptr inbounds i16, i16* %7806, i64 2
  %7819 = bitcast i16* %7818 to <16 x i16>*
  %7820 = load <16 x i16>, <16 x i16>* %7819, align 2, !tbaa !396
  %7821 = getelementptr inbounds i16, i16* %7806, i64 18
  %7822 = bitcast i16* %7821 to <16 x i16>*
  %7823 = load <16 x i16>, <16 x i16>* %7822, align 2, !tbaa !396
  %7824 = getelementptr inbounds i16, i16* %7806, i64 4
  %7825 = bitcast i16* %7824 to <16 x i16>*
  %7826 = load <16 x i16>, <16 x i16>* %7825, align 2, !tbaa !396
  %7827 = getelementptr inbounds i16, i16* %7806, i64 20
  %7828 = bitcast i16* %7827 to <16 x i16>*
  %7829 = load <16 x i16>, <16 x i16>* %7828, align 2, !tbaa !396
  %7830 = getelementptr inbounds i16, i16* %7806, i64 3
  %7831 = bitcast i16* %7830 to <16 x i16>*
  %7832 = load <16 x i16>, <16 x i16>* %7831, align 2, !tbaa !396
  %7833 = getelementptr inbounds i16, i16* %7806, i64 19
  %7834 = bitcast i16* %7833 to <16 x i16>*
  %7835 = load <16 x i16>, <16 x i16>* %7834, align 2, !tbaa !396
  %7836 = add <16 x i16> %7814, %7809
  %7837 = add <16 x i16> %7836, %7820
  %7838 = add <16 x i16> %7837, %7826
  %7839 = add <16 x i16> %7838, %7832
  %7840 = add <16 x i16> %7817, %7812
  %7841 = add <16 x i16> %7840, %7823
  %7842 = add <16 x i16> %7841, %7829
  %7843 = add <16 x i16> %7842, %7835
  %7844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7839, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7843, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7846 = shufflevector <16 x i16> %7844, <16 x i16> %7845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7847 = lshr <32 x i16> %7846, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7848 = shufflevector <32 x i16> %7847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7849 = shl nsw i64 %7779, 5
  %7850 = add nsw i64 %7849, %7634
  %7851 = getelementptr inbounds i16, i16* %blur_x, i64 %7850
  %7852 = bitcast i16* %7851 to <16 x i16>*
  store <16 x i16> %7848, <16 x i16>* %7852, align 2, !tbaa !399
  %7853 = shufflevector <32 x i16> %7847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7854 = getelementptr inbounds i16, i16* %7851, i64 16
  %7855 = bitcast i16* %7854 to <16 x i16>*
  store <16 x i16> %7853, <16 x i16>* %7855, align 2, !tbaa !399
  br label %"consume blur_x411"

"consume blur_x411":                              ; preds = %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge", %"produce blur_x410"
  %.pre-phi3499 = phi i64 [ %.pre3498, %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge" ], [ %7849, %"produce blur_x410" ]
  %7856 = add nsw i64 %7637, %.pre-phi3499
  %7857 = getelementptr inbounds i16, i16* %blur_x, i64 %7856
  %7858 = bitcast i16* %7857 to <16 x i16>*
  %7859 = load <16 x i16>, <16 x i16>* %7858, align 2, !tbaa !399
  %7860 = getelementptr inbounds i16, i16* %7857, i64 16
  %7861 = bitcast i16* %7860 to <16 x i16>*
  %7862 = load <16 x i16>, <16 x i16>* %7861, align 2, !tbaa !399
  %7863 = add nsw i64 %7640, %.pre-phi3499
  %7864 = getelementptr inbounds i16, i16* %blur_x, i64 %7863
  %7865 = bitcast i16* %7864 to <16 x i16>*
  %7866 = load <16 x i16>, <16 x i16>* %7865, align 2, !tbaa !399
  %7867 = getelementptr inbounds i16, i16* %7864, i64 16
  %7868 = bitcast i16* %7867 to <16 x i16>*
  %7869 = load <16 x i16>, <16 x i16>* %7868, align 2, !tbaa !399
  %7870 = add nsw i64 %7643, %.pre-phi3499
  %7871 = getelementptr inbounds i16, i16* %blur_x, i64 %7870
  %7872 = bitcast i16* %7871 to <16 x i16>*
  %7873 = load <16 x i16>, <16 x i16>* %7872, align 2, !tbaa !399
  %7874 = getelementptr inbounds i16, i16* %7871, i64 16
  %7875 = bitcast i16* %7874 to <16 x i16>*
  %7876 = load <16 x i16>, <16 x i16>* %7875, align 2, !tbaa !399
  %7877 = add nsw i64 %7646, %.pre-phi3499
  %7878 = getelementptr inbounds i16, i16* %blur_x, i64 %7877
  %7879 = bitcast i16* %7878 to <16 x i16>*
  %7880 = load <16 x i16>, <16 x i16>* %7879, align 2, !tbaa !399
  %7881 = getelementptr inbounds i16, i16* %7878, i64 16
  %7882 = bitcast i16* %7881 to <16 x i16>*
  %7883 = load <16 x i16>, <16 x i16>* %7882, align 2, !tbaa !399
  %7884 = add nsw i64 %7649, %.pre-phi3499
  %7885 = getelementptr inbounds i16, i16* %blur_x, i64 %7884
  %7886 = bitcast i16* %7885 to <16 x i16>*
  %7887 = load <16 x i16>, <16 x i16>* %7886, align 2, !tbaa !399
  %7888 = getelementptr inbounds i16, i16* %7885, i64 16
  %7889 = bitcast i16* %7888 to <16 x i16>*
  %7890 = load <16 x i16>, <16 x i16>* %7889, align 2, !tbaa !399
  %7891 = add <16 x i16> %7866, %7859
  %7892 = add <16 x i16> %7891, %7873
  %7893 = add <16 x i16> %7892, %7880
  %7894 = add <16 x i16> %7893, %7887
  %7895 = add <16 x i16> %7869, %7862
  %7896 = add <16 x i16> %7895, %7876
  %7897 = add <16 x i16> %7896, %7883
  %7898 = add <16 x i16> %7897, %7890
  %7899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7894, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7898, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7901 = shufflevector <16 x i16> %7899, <16 x i16> %7900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7902 = lshr <32 x i16> %7901, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7903 = shufflevector <32 x i16> %7902, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7904 = add nsw i64 %7653, %.pre-phi3499
  %7905 = getelementptr inbounds i16, i16* %66, i64 %7904
  %7906 = bitcast i16* %7905 to <16 x i16>*
  store <16 x i16> %7903, <16 x i16>* %7906, align 2, !tbaa !401
  %7907 = shufflevector <32 x i16> %7902, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7908 = getelementptr inbounds i16, i16* %7905, i64 16
  %7909 = bitcast i16* %7908 to <16 x i16>*
  store <16 x i16> %7907, <16 x i16>* %7909, align 2, !tbaa !401
  %indvars.iv.next3302 = add nuw nsw i64 %indvars.iv3301, 1
  %.not2729 = icmp eq i64 %indvars.iv.next3302, %184
  br i1 %.not2729, label %"end for blur_y.s0.x.x.rebased405", label %"for blur_y.s0.x.x.rebased404"

"for blur_y.s0.x.x.rebased412":                   ; preds = %"for blur_y.s0.x.x.rebased412.preheader", %"consume blur_x420"
  %blur_y.s0.x.x.rebased414 = phi i32 [ %8022, %"consume blur_x420" ], [ 0, %"for blur_y.s0.x.x.rebased412.preheader" ]
  %7910 = add nsw i32 %blur_y.s0.x.x.rebased414, %t1626
  %a203 = shl nsw i32 %7910, 5
  %7911 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %7911, i32 %a203, i32 %a14
  %7912 = icmp slt i32 %7910, 1
  %7913 = icmp sgt i32 %4, %a203
  %7914 = or i1 %7912, %7913
  br i1 %7914, label %"produce blur_x418", label %"consume blur_x420"

"end for blur_y.s0.x.x.rebased413":               ; preds = %"consume blur_x420", %"end for blur_y.s0.x.x.rebased405"
  br i1 %34, label %"produce blur_x424", label %after_bb421

"produce blur_x418":                              ; preds = %"for blur_y.s0.x.x.rebased412"
  %7915 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s419 = select i1 %7915, i32 %b209, i32 %4
  %t941 = add nsw i32 %blur_x.s0.x.v1.base.s419, %t1929
  %7916 = sext i32 %t941 to i64
  %7917 = getelementptr inbounds i16, i16* %read_input, i64 %7916
  %7918 = getelementptr inbounds i16, i16* %7917, i64 1
  %7919 = bitcast i16* %7918 to <16 x i16>*
  %7920 = load <16 x i16>, <16 x i16>* %7919, align 2, !tbaa !396
  %7921 = getelementptr inbounds i16, i16* %7917, i64 17
  %7922 = bitcast i16* %7921 to <16 x i16>*
  %7923 = load <16 x i16>, <16 x i16>* %7922, align 2, !tbaa !396
  %7924 = bitcast i16* %7917 to <16 x i16>*
  %7925 = load <16 x i16>, <16 x i16>* %7924, align 2, !tbaa !396
  %7926 = getelementptr inbounds i16, i16* %7917, i64 16
  %7927 = bitcast i16* %7926 to <16 x i16>*
  %7928 = load <16 x i16>, <16 x i16>* %7927, align 2, !tbaa !396
  %7929 = getelementptr inbounds i16, i16* %7917, i64 2
  %7930 = bitcast i16* %7929 to <16 x i16>*
  %7931 = load <16 x i16>, <16 x i16>* %7930, align 2, !tbaa !396
  %7932 = getelementptr inbounds i16, i16* %7917, i64 18
  %7933 = bitcast i16* %7932 to <16 x i16>*
  %7934 = load <16 x i16>, <16 x i16>* %7933, align 2, !tbaa !396
  %7935 = getelementptr inbounds i16, i16* %7917, i64 4
  %7936 = bitcast i16* %7935 to <16 x i16>*
  %7937 = load <16 x i16>, <16 x i16>* %7936, align 2, !tbaa !396
  %7938 = getelementptr inbounds i16, i16* %7917, i64 20
  %7939 = bitcast i16* %7938 to <16 x i16>*
  %7940 = load <16 x i16>, <16 x i16>* %7939, align 2, !tbaa !396
  %7941 = getelementptr inbounds i16, i16* %7917, i64 3
  %7942 = bitcast i16* %7941 to <16 x i16>*
  %7943 = load <16 x i16>, <16 x i16>* %7942, align 2, !tbaa !396
  %7944 = getelementptr inbounds i16, i16* %7917, i64 19
  %7945 = bitcast i16* %7944 to <16 x i16>*
  %7946 = load <16 x i16>, <16 x i16>* %7945, align 2, !tbaa !396
  %7947 = add <16 x i16> %7925, %7920
  %7948 = add <16 x i16> %7947, %7931
  %7949 = add <16 x i16> %7948, %7937
  %7950 = add <16 x i16> %7949, %7943
  %7951 = add <16 x i16> %7928, %7923
  %7952 = add <16 x i16> %7951, %7934
  %7953 = add <16 x i16> %7952, %7940
  %7954 = add <16 x i16> %7953, %7946
  %7955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7950, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7954, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7957 = shufflevector <16 x i16> %7955, <16 x i16> %7956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7958 = lshr <32 x i16> %7957, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7959 = shufflevector <32 x i16> %7958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7960 = sext i32 %blur_x.s0.x.v1.base.s419 to i64
  %7961 = add nsw i64 %7960, %7785
  %7962 = getelementptr inbounds i16, i16* %blur_x, i64 %7961
  %7963 = bitcast i16* %7962 to <16 x i16>*
  store <16 x i16> %7959, <16 x i16>* %7963, align 2, !tbaa !399
  %7964 = shufflevector <32 x i16> %7958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7965 = getelementptr inbounds i16, i16* %7962, i64 16
  %7966 = bitcast i16* %7965 to <16 x i16>*
  store <16 x i16> %7964, <16 x i16>* %7966, align 2, !tbaa !399
  br label %"consume blur_x420"

"consume blur_x420":                              ; preds = %"for blur_y.s0.x.x.rebased412", %"produce blur_x418"
  %7967 = sext i32 %b209 to i64
  %7968 = add nsw i64 %7788, %7967
  %7969 = getelementptr inbounds i16, i16* %blur_x, i64 %7968
  %7970 = bitcast i16* %7969 to <16 x i16>*
  %7971 = load <16 x i16>, <16 x i16>* %7970, align 2, !tbaa !399
  %7972 = getelementptr inbounds i16, i16* %7969, i64 16
  %7973 = bitcast i16* %7972 to <16 x i16>*
  %7974 = load <16 x i16>, <16 x i16>* %7973, align 2, !tbaa !399
  %7975 = add nsw i64 %7791, %7967
  %7976 = getelementptr inbounds i16, i16* %blur_x, i64 %7975
  %7977 = bitcast i16* %7976 to <16 x i16>*
  %7978 = load <16 x i16>, <16 x i16>* %7977, align 2, !tbaa !399
  %7979 = getelementptr inbounds i16, i16* %7976, i64 16
  %7980 = bitcast i16* %7979 to <16 x i16>*
  %7981 = load <16 x i16>, <16 x i16>* %7980, align 2, !tbaa !399
  %7982 = add nsw i64 %7794, %7967
  %7983 = getelementptr inbounds i16, i16* %blur_x, i64 %7982
  %7984 = bitcast i16* %7983 to <16 x i16>*
  %7985 = load <16 x i16>, <16 x i16>* %7984, align 2, !tbaa !399
  %7986 = getelementptr inbounds i16, i16* %7983, i64 16
  %7987 = bitcast i16* %7986 to <16 x i16>*
  %7988 = load <16 x i16>, <16 x i16>* %7987, align 2, !tbaa !399
  %7989 = add nsw i64 %7797, %7967
  %7990 = getelementptr inbounds i16, i16* %blur_x, i64 %7989
  %7991 = bitcast i16* %7990 to <16 x i16>*
  %7992 = load <16 x i16>, <16 x i16>* %7991, align 2, !tbaa !399
  %7993 = getelementptr inbounds i16, i16* %7990, i64 16
  %7994 = bitcast i16* %7993 to <16 x i16>*
  %7995 = load <16 x i16>, <16 x i16>* %7994, align 2, !tbaa !399
  %7996 = add nsw i64 %7800, %7967
  %7997 = getelementptr inbounds i16, i16* %blur_x, i64 %7996
  %7998 = bitcast i16* %7997 to <16 x i16>*
  %7999 = load <16 x i16>, <16 x i16>* %7998, align 2, !tbaa !399
  %8000 = getelementptr inbounds i16, i16* %7997, i64 16
  %8001 = bitcast i16* %8000 to <16 x i16>*
  %8002 = load <16 x i16>, <16 x i16>* %8001, align 2, !tbaa !399
  %8003 = add <16 x i16> %7978, %7971
  %8004 = add <16 x i16> %8003, %7985
  %8005 = add <16 x i16> %8004, %7992
  %8006 = add <16 x i16> %8005, %7999
  %8007 = add <16 x i16> %7981, %7974
  %8008 = add <16 x i16> %8007, %7988
  %8009 = add <16 x i16> %8008, %7995
  %8010 = add <16 x i16> %8009, %8002
  %8011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8006, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8012 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8010, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8013 = shufflevector <16 x i16> %8011, <16 x i16> %8012, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8014 = lshr <32 x i16> %8013, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8015 = shufflevector <32 x i16> %8014, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8016 = add nsw i64 %7804, %7967
  %8017 = getelementptr inbounds i16, i16* %66, i64 %8016
  %8018 = bitcast i16* %8017 to <16 x i16>*
  store <16 x i16> %8015, <16 x i16>* %8018, align 2, !tbaa !401
  %8019 = shufflevector <32 x i16> %8014, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8020 = getelementptr inbounds i16, i16* %8017, i64 16
  %8021 = bitcast i16* %8020 to <16 x i16>*
  store <16 x i16> %8019, <16 x i16>* %8021, align 2, !tbaa !401
  %8022 = add nuw nsw i32 %blur_y.s0.x.x.rebased414, 1
  %.not2728 = icmp eq i32 %8022, %t1683
  br i1 %.not2728, label %"end for blur_y.s0.x.x.rebased413", label %"for blur_y.s0.x.x.rebased412"

after_bb421:                                      ; preds = %"end for blur_y.s0.x.x.rebased413", %"produce blur_x424"
  br i1 %100, label %"for blur_y.s0.x.x.rebased426.preheader", label %"end for blur_y.s0.x.x.rebased427", !prof !386

"for blur_y.s0.x.x.rebased426.preheader":         ; preds = %after_bb421
  %8023 = sext i32 %t1700 to i64
  %8024 = zext i32 %.pre-phi to i64
  %8025 = mul nsw i64 %8024, %112
  %8026 = sub nsw i64 %8025, %96
  %8027 = zext i32 %.pre-phi3475 to i64
  %8028 = mul nsw i64 %8027, %112
  %8029 = sub nsw i64 %8028, %96
  %8030 = zext i32 %.pre-phi3445 to i64
  %8031 = mul nsw i64 %8030, %112
  %8032 = sub nsw i64 %8031, %96
  %8033 = zext i32 %.pre-phi3453 to i64
  %8034 = mul nsw i64 %8033, %112
  %8035 = sub nsw i64 %8034, %96
  %8036 = zext i32 %.pre-phi3449 to i64
  %8037 = mul nsw i64 %8036, %112
  %8038 = sub nsw i64 %8037, %96
  %8039 = sext i32 %a26 to i64
  %8040 = add nsw i64 %8039, 15
  %8041 = mul nsw i64 %8040, %113
  %8042 = add nsw i64 %8041, %116
  br label %"for blur_y.s0.x.x.rebased426"

"produce blur_x424":                              ; preds = %"end for blur_y.s0.x.x.rebased413"
  %8043 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %8044 = getelementptr inbounds i16, i16* %8043, i64 -31
  %8045 = bitcast i16* %8044 to <16 x i16>*
  %8046 = load <16 x i16>, <16 x i16>* %8045, align 2, !tbaa !396
  %8047 = getelementptr inbounds i16, i16* %8043, i64 -15
  %8048 = bitcast i16* %8047 to <16 x i16>*
  %8049 = load <16 x i16>, <16 x i16>* %8048, align 2, !tbaa !396
  %8050 = getelementptr inbounds i16, i16* %8043, i64 -32
  %8051 = bitcast i16* %8050 to <16 x i16>*
  %8052 = load <16 x i16>, <16 x i16>* %8051, align 2, !tbaa !396
  %8053 = getelementptr inbounds i16, i16* %8043, i64 -16
  %8054 = bitcast i16* %8053 to <16 x i16>*
  %8055 = load <16 x i16>, <16 x i16>* %8054, align 2, !tbaa !396
  %8056 = getelementptr inbounds i16, i16* %8043, i64 -30
  %8057 = bitcast i16* %8056 to <16 x i16>*
  %8058 = load <16 x i16>, <16 x i16>* %8057, align 2, !tbaa !396
  %8059 = getelementptr inbounds i16, i16* %8043, i64 -14
  %8060 = bitcast i16* %8059 to <16 x i16>*
  %8061 = load <16 x i16>, <16 x i16>* %8060, align 2, !tbaa !396
  %8062 = getelementptr inbounds i16, i16* %8043, i64 -28
  %8063 = bitcast i16* %8062 to <16 x i16>*
  %8064 = load <16 x i16>, <16 x i16>* %8063, align 2, !tbaa !396
  %8065 = getelementptr inbounds i16, i16* %8043, i64 -12
  %8066 = bitcast i16* %8065 to <16 x i16>*
  %8067 = load <16 x i16>, <16 x i16>* %8066, align 2, !tbaa !396
  %8068 = getelementptr inbounds i16, i16* %8043, i64 -29
  %8069 = bitcast i16* %8068 to <16 x i16>*
  %8070 = load <16 x i16>, <16 x i16>* %8069, align 2, !tbaa !396
  %8071 = getelementptr inbounds i16, i16* %8043, i64 -13
  %8072 = bitcast i16* %8071 to <16 x i16>*
  %8073 = load <16 x i16>, <16 x i16>* %8072, align 2, !tbaa !396
  %8074 = add <16 x i16> %8052, %8046
  %8075 = add <16 x i16> %8074, %8058
  %8076 = add <16 x i16> %8075, %8064
  %8077 = add <16 x i16> %8076, %8070
  %8078 = add <16 x i16> %8055, %8049
  %8079 = add <16 x i16> %8078, %8061
  %8080 = add <16 x i16> %8079, %8067
  %8081 = add <16 x i16> %8080, %8073
  %8082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8077, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8083 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8081, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8084 = shufflevector <16 x i16> %8082, <16 x i16> %8083, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8085 = lshr <32 x i16> %8084, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8086 = shufflevector <32 x i16> %8085, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8087 = zext i32 %.pre-phi3453 to i64
  %8088 = mul nsw i64 %97, %8087
  %8089 = add nsw i64 %99, %8088
  %8090 = getelementptr inbounds i16, i16* %blur_x, i64 %8089
  %8091 = getelementptr inbounds i16, i16* %8090, i64 -32
  %8092 = bitcast i16* %8091 to <16 x i16>*
  store <16 x i16> %8086, <16 x i16>* %8092, align 2, !tbaa !399
  %8093 = shufflevector <32 x i16> %8085, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8094 = getelementptr inbounds i16, i16* %8090, i64 -16
  %8095 = bitcast i16* %8094 to <16 x i16>*
  store <16 x i16> %8093, <16 x i16>* %8095, align 2, !tbaa !399
  %8096 = zext i32 %.pre-phi to i64
  %8097 = mul nsw i64 %8096, %112
  %8098 = add nsw i64 %8097, %94
  %8099 = getelementptr inbounds i16, i16* %blur_x, i64 %8098
  %8100 = getelementptr inbounds i16, i16* %8099, i64 -32
  %8101 = bitcast i16* %8100 to <16 x i16>*
  %8102 = load <16 x i16>, <16 x i16>* %8101, align 2, !tbaa !399
  %8103 = getelementptr inbounds i16, i16* %8099, i64 -16
  %8104 = bitcast i16* %8103 to <16 x i16>*
  %8105 = load <16 x i16>, <16 x i16>* %8104, align 2, !tbaa !399
  %8106 = zext i32 %.pre-phi3475 to i64
  %8107 = mul nsw i64 %8106, %112
  %8108 = add nsw i64 %8107, %94
  %8109 = getelementptr inbounds i16, i16* %blur_x, i64 %8108
  %8110 = getelementptr inbounds i16, i16* %8109, i64 -32
  %8111 = bitcast i16* %8110 to <16 x i16>*
  %8112 = load <16 x i16>, <16 x i16>* %8111, align 2, !tbaa !399
  %8113 = getelementptr inbounds i16, i16* %8109, i64 -16
  %8114 = bitcast i16* %8113 to <16 x i16>*
  %8115 = load <16 x i16>, <16 x i16>* %8114, align 2, !tbaa !399
  %8116 = zext i32 %.pre-phi3445 to i64
  %8117 = mul nsw i64 %8116, %112
  %8118 = add nsw i64 %8117, %94
  %8119 = getelementptr inbounds i16, i16* %blur_x, i64 %8118
  %8120 = getelementptr inbounds i16, i16* %8119, i64 -32
  %8121 = bitcast i16* %8120 to <16 x i16>*
  %8122 = load <16 x i16>, <16 x i16>* %8121, align 2, !tbaa !399
  %8123 = getelementptr inbounds i16, i16* %8119, i64 -16
  %8124 = bitcast i16* %8123 to <16 x i16>*
  %8125 = load <16 x i16>, <16 x i16>* %8124, align 2, !tbaa !399
  %8126 = mul nsw i64 %8087, %112
  %8127 = add nsw i64 %8126, %94
  %8128 = getelementptr inbounds i16, i16* %blur_x, i64 %8127
  %8129 = getelementptr inbounds i16, i16* %8128, i64 -32
  %8130 = bitcast i16* %8129 to <16 x i16>*
  %8131 = load <16 x i16>, <16 x i16>* %8130, align 2, !tbaa !399
  %8132 = getelementptr inbounds i16, i16* %8128, i64 -16
  %8133 = bitcast i16* %8132 to <16 x i16>*
  %8134 = load <16 x i16>, <16 x i16>* %8133, align 2, !tbaa !399
  %8135 = zext i32 %.pre-phi3449 to i64
  %8136 = mul nsw i64 %8135, %112
  %8137 = add nsw i64 %8136, %94
  %8138 = getelementptr inbounds i16, i16* %blur_x, i64 %8137
  %8139 = getelementptr inbounds i16, i16* %8138, i64 -32
  %8140 = bitcast i16* %8139 to <16 x i16>*
  %8141 = load <16 x i16>, <16 x i16>* %8140, align 2, !tbaa !399
  %8142 = getelementptr inbounds i16, i16* %8138, i64 -16
  %8143 = bitcast i16* %8142 to <16 x i16>*
  %8144 = load <16 x i16>, <16 x i16>* %8143, align 2, !tbaa !399
  %8145 = add <16 x i16> %8112, %8102
  %8146 = add <16 x i16> %8145, %8122
  %8147 = add <16 x i16> %8146, %8131
  %8148 = add <16 x i16> %8147, %8141
  %8149 = add <16 x i16> %8115, %8105
  %8150 = add <16 x i16> %8149, %8125
  %8151 = add <16 x i16> %8150, %8134
  %8152 = add <16 x i16> %8151, %8144
  %8153 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8148, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8154 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8152, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8155 = shufflevector <16 x i16> %8153, <16 x i16> %8154, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8156 = lshr <32 x i16> %8155, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8157 = shufflevector <32 x i16> %8156, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8158 = sext i32 %a26 to i64
  %8159 = add nsw i64 %8158, 15
  %8160 = mul nsw i64 %8159, %113
  %8161 = add nsw i64 %115, %8160
  %8162 = getelementptr inbounds i16, i16* %66, i64 %8161
  %8163 = getelementptr inbounds i16, i16* %8162, i64 -32
  %8164 = bitcast i16* %8163 to <16 x i16>*
  store <16 x i16> %8157, <16 x i16>* %8164, align 2, !tbaa !401
  %8165 = shufflevector <32 x i16> %8156, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8166 = getelementptr inbounds i16, i16* %8162, i64 -16
  %8167 = bitcast i16* %8166 to <16 x i16>*
  store <16 x i16> %8165, <16 x i16>* %8167, align 2, !tbaa !401
  br label %after_bb421

"for blur_y.s0.x.x.rebased426":                   ; preds = %"for blur_y.s0.x.x.rebased426.preheader", %"consume blur_x433"
  %indvars.iv3304 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased426.preheader" ], [ %indvars.iv.next3305, %"consume blur_x433" ]
  %8168 = add nsw i64 %indvars.iv3304, %101
  %8169 = icmp slt i64 %8168, 1
  %8170 = trunc i64 %8168 to i32
  %8171 = shl nsw i32 %8170, 5
  %8172 = icmp sgt i32 %4, %8171
  %8173 = or i1 %8169, %8172
  br i1 %8173, label %"produce blur_x432", label %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge"

"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased426"
  %.pre3500 = shl nsw i64 %8168, 5
  br label %"consume blur_x433"

"end for blur_y.s0.x.x.rebased427":               ; preds = %"consume blur_x433", %after_bb421
  br i1 %102, label %"for blur_y.s0.x.x.rebased434.preheader", label %"end for blur_y.s0.x.x.rebased435", !prof !386

"for blur_y.s0.x.x.rebased434.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased427"
  %8174 = sext i32 %t1700 to i64
  %8175 = zext i32 %.pre-phi to i64
  %8176 = mul nsw i64 %8175, %112
  %8177 = sub nsw i64 %8176, %96
  %8178 = zext i32 %.pre-phi3475 to i64
  %8179 = mul nsw i64 %8178, %112
  %8180 = sub nsw i64 %8179, %96
  %8181 = zext i32 %.pre-phi3445 to i64
  %8182 = mul nsw i64 %8181, %112
  %8183 = sub nsw i64 %8182, %96
  %8184 = zext i32 %.pre-phi3453 to i64
  %8185 = mul nsw i64 %8184, %112
  %8186 = sub nsw i64 %8185, %96
  %8187 = zext i32 %.pre-phi3449 to i64
  %8188 = mul nsw i64 %8187, %112
  %8189 = sub nsw i64 %8188, %96
  %8190 = sext i32 %a26 to i64
  %8191 = add nsw i64 %8190, 15
  %8192 = mul nsw i64 %8191, %113
  %8193 = add nsw i64 %8192, %116
  br label %"for blur_y.s0.x.x.rebased434"

"produce blur_x432":                              ; preds = %"for blur_y.s0.x.x.rebased426"
  %t952 = add nsw i32 %8171, %t1945
  %8194 = sext i32 %t952 to i64
  %8195 = getelementptr inbounds i16, i16* %read_input, i64 %8194
  %8196 = getelementptr inbounds i16, i16* %8195, i64 1
  %8197 = bitcast i16* %8196 to <16 x i16>*
  %8198 = load <16 x i16>, <16 x i16>* %8197, align 2, !tbaa !396
  %8199 = getelementptr inbounds i16, i16* %8195, i64 17
  %8200 = bitcast i16* %8199 to <16 x i16>*
  %8201 = load <16 x i16>, <16 x i16>* %8200, align 2, !tbaa !396
  %8202 = bitcast i16* %8195 to <16 x i16>*
  %8203 = load <16 x i16>, <16 x i16>* %8202, align 2, !tbaa !396
  %8204 = getelementptr inbounds i16, i16* %8195, i64 16
  %8205 = bitcast i16* %8204 to <16 x i16>*
  %8206 = load <16 x i16>, <16 x i16>* %8205, align 2, !tbaa !396
  %8207 = getelementptr inbounds i16, i16* %8195, i64 2
  %8208 = bitcast i16* %8207 to <16 x i16>*
  %8209 = load <16 x i16>, <16 x i16>* %8208, align 2, !tbaa !396
  %8210 = getelementptr inbounds i16, i16* %8195, i64 18
  %8211 = bitcast i16* %8210 to <16 x i16>*
  %8212 = load <16 x i16>, <16 x i16>* %8211, align 2, !tbaa !396
  %8213 = getelementptr inbounds i16, i16* %8195, i64 4
  %8214 = bitcast i16* %8213 to <16 x i16>*
  %8215 = load <16 x i16>, <16 x i16>* %8214, align 2, !tbaa !396
  %8216 = getelementptr inbounds i16, i16* %8195, i64 20
  %8217 = bitcast i16* %8216 to <16 x i16>*
  %8218 = load <16 x i16>, <16 x i16>* %8217, align 2, !tbaa !396
  %8219 = getelementptr inbounds i16, i16* %8195, i64 3
  %8220 = bitcast i16* %8219 to <16 x i16>*
  %8221 = load <16 x i16>, <16 x i16>* %8220, align 2, !tbaa !396
  %8222 = getelementptr inbounds i16, i16* %8195, i64 19
  %8223 = bitcast i16* %8222 to <16 x i16>*
  %8224 = load <16 x i16>, <16 x i16>* %8223, align 2, !tbaa !396
  %8225 = add <16 x i16> %8203, %8198
  %8226 = add <16 x i16> %8225, %8209
  %8227 = add <16 x i16> %8226, %8215
  %8228 = add <16 x i16> %8227, %8221
  %8229 = add <16 x i16> %8206, %8201
  %8230 = add <16 x i16> %8229, %8212
  %8231 = add <16 x i16> %8230, %8218
  %8232 = add <16 x i16> %8231, %8224
  %8233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8228, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8232, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8235 = shufflevector <16 x i16> %8233, <16 x i16> %8234, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8236 = lshr <32 x i16> %8235, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8237 = shufflevector <32 x i16> %8236, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8238 = shl nsw i64 %8168, 5
  %8239 = add nsw i64 %8238, %8023
  %8240 = getelementptr inbounds i16, i16* %blur_x, i64 %8239
  %8241 = bitcast i16* %8240 to <16 x i16>*
  store <16 x i16> %8237, <16 x i16>* %8241, align 2, !tbaa !399
  %8242 = shufflevector <32 x i16> %8236, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8243 = getelementptr inbounds i16, i16* %8240, i64 16
  %8244 = bitcast i16* %8243 to <16 x i16>*
  store <16 x i16> %8242, <16 x i16>* %8244, align 2, !tbaa !399
  br label %"consume blur_x433"

"consume blur_x433":                              ; preds = %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge", %"produce blur_x432"
  %.pre-phi3501 = phi i64 [ %.pre3500, %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge" ], [ %8238, %"produce blur_x432" ]
  %8245 = add nsw i64 %8026, %.pre-phi3501
  %8246 = getelementptr inbounds i16, i16* %blur_x, i64 %8245
  %8247 = bitcast i16* %8246 to <16 x i16>*
  %8248 = load <16 x i16>, <16 x i16>* %8247, align 2, !tbaa !399
  %8249 = getelementptr inbounds i16, i16* %8246, i64 16
  %8250 = bitcast i16* %8249 to <16 x i16>*
  %8251 = load <16 x i16>, <16 x i16>* %8250, align 2, !tbaa !399
  %8252 = add nsw i64 %8029, %.pre-phi3501
  %8253 = getelementptr inbounds i16, i16* %blur_x, i64 %8252
  %8254 = bitcast i16* %8253 to <16 x i16>*
  %8255 = load <16 x i16>, <16 x i16>* %8254, align 2, !tbaa !399
  %8256 = getelementptr inbounds i16, i16* %8253, i64 16
  %8257 = bitcast i16* %8256 to <16 x i16>*
  %8258 = load <16 x i16>, <16 x i16>* %8257, align 2, !tbaa !399
  %8259 = add nsw i64 %8032, %.pre-phi3501
  %8260 = getelementptr inbounds i16, i16* %blur_x, i64 %8259
  %8261 = bitcast i16* %8260 to <16 x i16>*
  %8262 = load <16 x i16>, <16 x i16>* %8261, align 2, !tbaa !399
  %8263 = getelementptr inbounds i16, i16* %8260, i64 16
  %8264 = bitcast i16* %8263 to <16 x i16>*
  %8265 = load <16 x i16>, <16 x i16>* %8264, align 2, !tbaa !399
  %8266 = add nsw i64 %8035, %.pre-phi3501
  %8267 = getelementptr inbounds i16, i16* %blur_x, i64 %8266
  %8268 = bitcast i16* %8267 to <16 x i16>*
  %8269 = load <16 x i16>, <16 x i16>* %8268, align 2, !tbaa !399
  %8270 = getelementptr inbounds i16, i16* %8267, i64 16
  %8271 = bitcast i16* %8270 to <16 x i16>*
  %8272 = load <16 x i16>, <16 x i16>* %8271, align 2, !tbaa !399
  %8273 = add nsw i64 %8038, %.pre-phi3501
  %8274 = getelementptr inbounds i16, i16* %blur_x, i64 %8273
  %8275 = bitcast i16* %8274 to <16 x i16>*
  %8276 = load <16 x i16>, <16 x i16>* %8275, align 2, !tbaa !399
  %8277 = getelementptr inbounds i16, i16* %8274, i64 16
  %8278 = bitcast i16* %8277 to <16 x i16>*
  %8279 = load <16 x i16>, <16 x i16>* %8278, align 2, !tbaa !399
  %8280 = add <16 x i16> %8255, %8248
  %8281 = add <16 x i16> %8280, %8262
  %8282 = add <16 x i16> %8281, %8269
  %8283 = add <16 x i16> %8282, %8276
  %8284 = add <16 x i16> %8258, %8251
  %8285 = add <16 x i16> %8284, %8265
  %8286 = add <16 x i16> %8285, %8272
  %8287 = add <16 x i16> %8286, %8279
  %8288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8283, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8287, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8290 = shufflevector <16 x i16> %8288, <16 x i16> %8289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8291 = lshr <32 x i16> %8290, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8292 = shufflevector <32 x i16> %8291, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8293 = add nsw i64 %8042, %.pre-phi3501
  %8294 = getelementptr inbounds i16, i16* %66, i64 %8293
  %8295 = bitcast i16* %8294 to <16 x i16>*
  store <16 x i16> %8292, <16 x i16>* %8295, align 2, !tbaa !401
  %8296 = shufflevector <32 x i16> %8291, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8297 = getelementptr inbounds i16, i16* %8294, i64 16
  %8298 = bitcast i16* %8297 to <16 x i16>*
  store <16 x i16> %8296, <16 x i16>* %8298, align 2, !tbaa !401
  %indvars.iv.next3305 = add nuw nsw i64 %indvars.iv3304, 1
  %.not2727 = icmp eq i64 %indvars.iv.next3305, %184
  br i1 %.not2727, label %"end for blur_y.s0.x.x.rebased427", label %"for blur_y.s0.x.x.rebased426"

"for blur_y.s0.x.x.rebased434":                   ; preds = %"for blur_y.s0.x.x.rebased434.preheader", %"consume blur_x442"
  %blur_y.s0.x.x.rebased436 = phi i32 [ %8411, %"consume blur_x442" ], [ 0, %"for blur_y.s0.x.x.rebased434.preheader" ]
  %8299 = add nsw i32 %blur_y.s0.x.x.rebased436, %t1626
  %a210 = shl nsw i32 %8299, 5
  %8300 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %8300, i32 %a210, i32 %a14
  %8301 = icmp slt i32 %8299, 1
  %8302 = icmp sgt i32 %4, %a210
  %8303 = or i1 %8301, %8302
  br i1 %8303, label %"produce blur_x440", label %"consume blur_x442"

"end for blur_y.s0.x.x.rebased435":               ; preds = %"consume blur_x442", %"end for blur_y.s0.x.x.rebased427"
  br i1 %34, label %"produce blur_x446", label %after_bb443

"produce blur_x440":                              ; preds = %"for blur_y.s0.x.x.rebased434"
  %8304 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s441 = select i1 %8304, i32 %b216, i32 %4
  %t957 = add nsw i32 %blur_x.s0.x.v1.base.s441, %t1945
  %8305 = sext i32 %t957 to i64
  %8306 = getelementptr inbounds i16, i16* %read_input, i64 %8305
  %8307 = getelementptr inbounds i16, i16* %8306, i64 1
  %8308 = bitcast i16* %8307 to <16 x i16>*
  %8309 = load <16 x i16>, <16 x i16>* %8308, align 2, !tbaa !396
  %8310 = getelementptr inbounds i16, i16* %8306, i64 17
  %8311 = bitcast i16* %8310 to <16 x i16>*
  %8312 = load <16 x i16>, <16 x i16>* %8311, align 2, !tbaa !396
  %8313 = bitcast i16* %8306 to <16 x i16>*
  %8314 = load <16 x i16>, <16 x i16>* %8313, align 2, !tbaa !396
  %8315 = getelementptr inbounds i16, i16* %8306, i64 16
  %8316 = bitcast i16* %8315 to <16 x i16>*
  %8317 = load <16 x i16>, <16 x i16>* %8316, align 2, !tbaa !396
  %8318 = getelementptr inbounds i16, i16* %8306, i64 2
  %8319 = bitcast i16* %8318 to <16 x i16>*
  %8320 = load <16 x i16>, <16 x i16>* %8319, align 2, !tbaa !396
  %8321 = getelementptr inbounds i16, i16* %8306, i64 18
  %8322 = bitcast i16* %8321 to <16 x i16>*
  %8323 = load <16 x i16>, <16 x i16>* %8322, align 2, !tbaa !396
  %8324 = getelementptr inbounds i16, i16* %8306, i64 4
  %8325 = bitcast i16* %8324 to <16 x i16>*
  %8326 = load <16 x i16>, <16 x i16>* %8325, align 2, !tbaa !396
  %8327 = getelementptr inbounds i16, i16* %8306, i64 20
  %8328 = bitcast i16* %8327 to <16 x i16>*
  %8329 = load <16 x i16>, <16 x i16>* %8328, align 2, !tbaa !396
  %8330 = getelementptr inbounds i16, i16* %8306, i64 3
  %8331 = bitcast i16* %8330 to <16 x i16>*
  %8332 = load <16 x i16>, <16 x i16>* %8331, align 2, !tbaa !396
  %8333 = getelementptr inbounds i16, i16* %8306, i64 19
  %8334 = bitcast i16* %8333 to <16 x i16>*
  %8335 = load <16 x i16>, <16 x i16>* %8334, align 2, !tbaa !396
  %8336 = add <16 x i16> %8314, %8309
  %8337 = add <16 x i16> %8336, %8320
  %8338 = add <16 x i16> %8337, %8326
  %8339 = add <16 x i16> %8338, %8332
  %8340 = add <16 x i16> %8317, %8312
  %8341 = add <16 x i16> %8340, %8323
  %8342 = add <16 x i16> %8341, %8329
  %8343 = add <16 x i16> %8342, %8335
  %8344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8339, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8343, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8346 = shufflevector <16 x i16> %8344, <16 x i16> %8345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8347 = lshr <32 x i16> %8346, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8348 = shufflevector <32 x i16> %8347, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8349 = sext i32 %blur_x.s0.x.v1.base.s441 to i64
  %8350 = add nsw i64 %8349, %8174
  %8351 = getelementptr inbounds i16, i16* %blur_x, i64 %8350
  %8352 = bitcast i16* %8351 to <16 x i16>*
  store <16 x i16> %8348, <16 x i16>* %8352, align 2, !tbaa !399
  %8353 = shufflevector <32 x i16> %8347, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8354 = getelementptr inbounds i16, i16* %8351, i64 16
  %8355 = bitcast i16* %8354 to <16 x i16>*
  store <16 x i16> %8353, <16 x i16>* %8355, align 2, !tbaa !399
  br label %"consume blur_x442"

"consume blur_x442":                              ; preds = %"for blur_y.s0.x.x.rebased434", %"produce blur_x440"
  %8356 = sext i32 %b216 to i64
  %8357 = add nsw i64 %8177, %8356
  %8358 = getelementptr inbounds i16, i16* %blur_x, i64 %8357
  %8359 = bitcast i16* %8358 to <16 x i16>*
  %8360 = load <16 x i16>, <16 x i16>* %8359, align 2, !tbaa !399
  %8361 = getelementptr inbounds i16, i16* %8358, i64 16
  %8362 = bitcast i16* %8361 to <16 x i16>*
  %8363 = load <16 x i16>, <16 x i16>* %8362, align 2, !tbaa !399
  %8364 = add nsw i64 %8180, %8356
  %8365 = getelementptr inbounds i16, i16* %blur_x, i64 %8364
  %8366 = bitcast i16* %8365 to <16 x i16>*
  %8367 = load <16 x i16>, <16 x i16>* %8366, align 2, !tbaa !399
  %8368 = getelementptr inbounds i16, i16* %8365, i64 16
  %8369 = bitcast i16* %8368 to <16 x i16>*
  %8370 = load <16 x i16>, <16 x i16>* %8369, align 2, !tbaa !399
  %8371 = add nsw i64 %8183, %8356
  %8372 = getelementptr inbounds i16, i16* %blur_x, i64 %8371
  %8373 = bitcast i16* %8372 to <16 x i16>*
  %8374 = load <16 x i16>, <16 x i16>* %8373, align 2, !tbaa !399
  %8375 = getelementptr inbounds i16, i16* %8372, i64 16
  %8376 = bitcast i16* %8375 to <16 x i16>*
  %8377 = load <16 x i16>, <16 x i16>* %8376, align 2, !tbaa !399
  %8378 = add nsw i64 %8186, %8356
  %8379 = getelementptr inbounds i16, i16* %blur_x, i64 %8378
  %8380 = bitcast i16* %8379 to <16 x i16>*
  %8381 = load <16 x i16>, <16 x i16>* %8380, align 2, !tbaa !399
  %8382 = getelementptr inbounds i16, i16* %8379, i64 16
  %8383 = bitcast i16* %8382 to <16 x i16>*
  %8384 = load <16 x i16>, <16 x i16>* %8383, align 2, !tbaa !399
  %8385 = add nsw i64 %8189, %8356
  %8386 = getelementptr inbounds i16, i16* %blur_x, i64 %8385
  %8387 = bitcast i16* %8386 to <16 x i16>*
  %8388 = load <16 x i16>, <16 x i16>* %8387, align 2, !tbaa !399
  %8389 = getelementptr inbounds i16, i16* %8386, i64 16
  %8390 = bitcast i16* %8389 to <16 x i16>*
  %8391 = load <16 x i16>, <16 x i16>* %8390, align 2, !tbaa !399
  %8392 = add <16 x i16> %8367, %8360
  %8393 = add <16 x i16> %8392, %8374
  %8394 = add <16 x i16> %8393, %8381
  %8395 = add <16 x i16> %8394, %8388
  %8396 = add <16 x i16> %8370, %8363
  %8397 = add <16 x i16> %8396, %8377
  %8398 = add <16 x i16> %8397, %8384
  %8399 = add <16 x i16> %8398, %8391
  %8400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8395, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8399, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8402 = shufflevector <16 x i16> %8400, <16 x i16> %8401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8403 = lshr <32 x i16> %8402, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8404 = shufflevector <32 x i16> %8403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8405 = add nsw i64 %8193, %8356
  %8406 = getelementptr inbounds i16, i16* %66, i64 %8405
  %8407 = bitcast i16* %8406 to <16 x i16>*
  store <16 x i16> %8404, <16 x i16>* %8407, align 2, !tbaa !401
  %8408 = shufflevector <32 x i16> %8403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8409 = getelementptr inbounds i16, i16* %8406, i64 16
  %8410 = bitcast i16* %8409 to <16 x i16>*
  store <16 x i16> %8408, <16 x i16>* %8410, align 2, !tbaa !401
  %8411 = add nuw nsw i32 %blur_y.s0.x.x.rebased436, 1
  %.not2726 = icmp eq i32 %8411, %t1683
  br i1 %.not2726, label %"end for blur_y.s0.x.x.rebased435", label %"for blur_y.s0.x.x.rebased434"

after_bb443:                                      ; preds = %"end for blur_y.s0.x.x.rebased435", %"produce blur_x446"
  br i1 %100, label %"for blur_y.s0.x.x.rebased448.preheader", label %"end for blur_y.s0.x.x.rebased449", !prof !386

"for blur_y.s0.x.x.rebased448.preheader":         ; preds = %after_bb443
  %8412 = sext i32 %t1706 to i64
  %8413 = zext i32 %.pre-phi3445 to i64
  %8414 = mul nsw i64 %8413, %112
  %8415 = sub nsw i64 %8414, %96
  %8416 = zext i32 %.pre-phi to i64
  %8417 = mul nsw i64 %8416, %112
  %8418 = sub nsw i64 %8417, %96
  %8419 = zext i32 %.pre-phi3449 to i64
  %8420 = mul nsw i64 %8419, %112
  %8421 = sub nsw i64 %8420, %96
  %8422 = zext i32 %.pre-phi3457 to i64
  %8423 = mul nsw i64 %8422, %112
  %8424 = sub nsw i64 %8423, %96
  %8425 = zext i32 %.pre-phi3453 to i64
  %8426 = mul nsw i64 %8425, %112
  %8427 = sub nsw i64 %8426, %96
  %8428 = sext i32 %a26 to i64
  %8429 = add nsw i64 %8428, 16
  %8430 = mul nsw i64 %8429, %113
  %8431 = add nsw i64 %8430, %116
  br label %"for blur_y.s0.x.x.rebased448"

"produce blur_x446":                              ; preds = %"end for blur_y.s0.x.x.rebased435"
  %8432 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %8433 = getelementptr inbounds i16, i16* %8432, i64 -31
  %8434 = bitcast i16* %8433 to <16 x i16>*
  %8435 = load <16 x i16>, <16 x i16>* %8434, align 2, !tbaa !396
  %8436 = getelementptr inbounds i16, i16* %8432, i64 -15
  %8437 = bitcast i16* %8436 to <16 x i16>*
  %8438 = load <16 x i16>, <16 x i16>* %8437, align 2, !tbaa !396
  %8439 = getelementptr inbounds i16, i16* %8432, i64 -32
  %8440 = bitcast i16* %8439 to <16 x i16>*
  %8441 = load <16 x i16>, <16 x i16>* %8440, align 2, !tbaa !396
  %8442 = getelementptr inbounds i16, i16* %8432, i64 -16
  %8443 = bitcast i16* %8442 to <16 x i16>*
  %8444 = load <16 x i16>, <16 x i16>* %8443, align 2, !tbaa !396
  %8445 = getelementptr inbounds i16, i16* %8432, i64 -30
  %8446 = bitcast i16* %8445 to <16 x i16>*
  %8447 = load <16 x i16>, <16 x i16>* %8446, align 2, !tbaa !396
  %8448 = getelementptr inbounds i16, i16* %8432, i64 -14
  %8449 = bitcast i16* %8448 to <16 x i16>*
  %8450 = load <16 x i16>, <16 x i16>* %8449, align 2, !tbaa !396
  %8451 = getelementptr inbounds i16, i16* %8432, i64 -28
  %8452 = bitcast i16* %8451 to <16 x i16>*
  %8453 = load <16 x i16>, <16 x i16>* %8452, align 2, !tbaa !396
  %8454 = getelementptr inbounds i16, i16* %8432, i64 -12
  %8455 = bitcast i16* %8454 to <16 x i16>*
  %8456 = load <16 x i16>, <16 x i16>* %8455, align 2, !tbaa !396
  %8457 = getelementptr inbounds i16, i16* %8432, i64 -29
  %8458 = bitcast i16* %8457 to <16 x i16>*
  %8459 = load <16 x i16>, <16 x i16>* %8458, align 2, !tbaa !396
  %8460 = getelementptr inbounds i16, i16* %8432, i64 -13
  %8461 = bitcast i16* %8460 to <16 x i16>*
  %8462 = load <16 x i16>, <16 x i16>* %8461, align 2, !tbaa !396
  %8463 = add <16 x i16> %8441, %8435
  %8464 = add <16 x i16> %8463, %8447
  %8465 = add <16 x i16> %8464, %8453
  %8466 = add <16 x i16> %8465, %8459
  %8467 = add <16 x i16> %8444, %8438
  %8468 = add <16 x i16> %8467, %8450
  %8469 = add <16 x i16> %8468, %8456
  %8470 = add <16 x i16> %8469, %8462
  %8471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8466, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8472 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8470, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8473 = shufflevector <16 x i16> %8471, <16 x i16> %8472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8474 = lshr <32 x i16> %8473, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8475 = shufflevector <32 x i16> %8474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8476 = zext i32 %.pre-phi3457 to i64
  %8477 = mul nsw i64 %97, %8476
  %8478 = add nsw i64 %99, %8477
  %8479 = getelementptr inbounds i16, i16* %blur_x, i64 %8478
  %8480 = getelementptr inbounds i16, i16* %8479, i64 -32
  %8481 = bitcast i16* %8480 to <16 x i16>*
  store <16 x i16> %8475, <16 x i16>* %8481, align 2, !tbaa !399
  %8482 = shufflevector <32 x i16> %8474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8483 = getelementptr inbounds i16, i16* %8479, i64 -16
  %8484 = bitcast i16* %8483 to <16 x i16>*
  store <16 x i16> %8482, <16 x i16>* %8484, align 2, !tbaa !399
  %8485 = zext i32 %.pre-phi3445 to i64
  %8486 = mul nsw i64 %8485, %112
  %8487 = add nsw i64 %8486, %94
  %8488 = getelementptr inbounds i16, i16* %blur_x, i64 %8487
  %8489 = getelementptr inbounds i16, i16* %8488, i64 -32
  %8490 = bitcast i16* %8489 to <16 x i16>*
  %8491 = load <16 x i16>, <16 x i16>* %8490, align 2, !tbaa !399
  %8492 = getelementptr inbounds i16, i16* %8488, i64 -16
  %8493 = bitcast i16* %8492 to <16 x i16>*
  %8494 = load <16 x i16>, <16 x i16>* %8493, align 2, !tbaa !399
  %8495 = zext i32 %.pre-phi to i64
  %8496 = mul nsw i64 %8495, %112
  %8497 = add nsw i64 %8496, %94
  %8498 = getelementptr inbounds i16, i16* %blur_x, i64 %8497
  %8499 = getelementptr inbounds i16, i16* %8498, i64 -32
  %8500 = bitcast i16* %8499 to <16 x i16>*
  %8501 = load <16 x i16>, <16 x i16>* %8500, align 2, !tbaa !399
  %8502 = getelementptr inbounds i16, i16* %8498, i64 -16
  %8503 = bitcast i16* %8502 to <16 x i16>*
  %8504 = load <16 x i16>, <16 x i16>* %8503, align 2, !tbaa !399
  %8505 = zext i32 %.pre-phi3449 to i64
  %8506 = mul nsw i64 %8505, %112
  %8507 = add nsw i64 %8506, %94
  %8508 = getelementptr inbounds i16, i16* %blur_x, i64 %8507
  %8509 = getelementptr inbounds i16, i16* %8508, i64 -32
  %8510 = bitcast i16* %8509 to <16 x i16>*
  %8511 = load <16 x i16>, <16 x i16>* %8510, align 2, !tbaa !399
  %8512 = getelementptr inbounds i16, i16* %8508, i64 -16
  %8513 = bitcast i16* %8512 to <16 x i16>*
  %8514 = load <16 x i16>, <16 x i16>* %8513, align 2, !tbaa !399
  %8515 = mul nsw i64 %8476, %112
  %8516 = add nsw i64 %8515, %94
  %8517 = getelementptr inbounds i16, i16* %blur_x, i64 %8516
  %8518 = getelementptr inbounds i16, i16* %8517, i64 -32
  %8519 = bitcast i16* %8518 to <16 x i16>*
  %8520 = load <16 x i16>, <16 x i16>* %8519, align 2, !tbaa !399
  %8521 = getelementptr inbounds i16, i16* %8517, i64 -16
  %8522 = bitcast i16* %8521 to <16 x i16>*
  %8523 = load <16 x i16>, <16 x i16>* %8522, align 2, !tbaa !399
  %8524 = zext i32 %.pre-phi3453 to i64
  %8525 = mul nsw i64 %8524, %112
  %8526 = add nsw i64 %8525, %94
  %8527 = getelementptr inbounds i16, i16* %blur_x, i64 %8526
  %8528 = getelementptr inbounds i16, i16* %8527, i64 -32
  %8529 = bitcast i16* %8528 to <16 x i16>*
  %8530 = load <16 x i16>, <16 x i16>* %8529, align 2, !tbaa !399
  %8531 = getelementptr inbounds i16, i16* %8527, i64 -16
  %8532 = bitcast i16* %8531 to <16 x i16>*
  %8533 = load <16 x i16>, <16 x i16>* %8532, align 2, !tbaa !399
  %8534 = add <16 x i16> %8501, %8491
  %8535 = add <16 x i16> %8534, %8511
  %8536 = add <16 x i16> %8535, %8520
  %8537 = add <16 x i16> %8536, %8530
  %8538 = add <16 x i16> %8504, %8494
  %8539 = add <16 x i16> %8538, %8514
  %8540 = add <16 x i16> %8539, %8523
  %8541 = add <16 x i16> %8540, %8533
  %8542 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8537, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8543 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8541, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8544 = shufflevector <16 x i16> %8542, <16 x i16> %8543, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8545 = lshr <32 x i16> %8544, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8546 = shufflevector <32 x i16> %8545, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8547 = sext i32 %a26 to i64
  %8548 = add nsw i64 %8547, 16
  %8549 = mul nsw i64 %8548, %113
  %8550 = add nsw i64 %115, %8549
  %8551 = getelementptr inbounds i16, i16* %66, i64 %8550
  %8552 = getelementptr inbounds i16, i16* %8551, i64 -32
  %8553 = bitcast i16* %8552 to <16 x i16>*
  store <16 x i16> %8546, <16 x i16>* %8553, align 2, !tbaa !401
  %8554 = shufflevector <32 x i16> %8545, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8555 = getelementptr inbounds i16, i16* %8551, i64 -16
  %8556 = bitcast i16* %8555 to <16 x i16>*
  store <16 x i16> %8554, <16 x i16>* %8556, align 2, !tbaa !401
  br label %after_bb443

"for blur_y.s0.x.x.rebased448":                   ; preds = %"for blur_y.s0.x.x.rebased448.preheader", %"consume blur_x455"
  %indvars.iv3307 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased448.preheader" ], [ %indvars.iv.next3308, %"consume blur_x455" ]
  %8557 = add nsw i64 %indvars.iv3307, %101
  %8558 = icmp slt i64 %8557, 1
  %8559 = trunc i64 %8557 to i32
  %8560 = shl nsw i32 %8559, 5
  %8561 = icmp sgt i32 %4, %8560
  %8562 = or i1 %8558, %8561
  br i1 %8562, label %"produce blur_x454", label %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge"

"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased448"
  %.pre3502 = shl nsw i64 %8557, 5
  br label %"consume blur_x455"

"end for blur_y.s0.x.x.rebased449":               ; preds = %"consume blur_x455", %after_bb443
  br i1 %102, label %"for blur_y.s0.x.x.rebased456.preheader", label %"end for blur_y.s0.x.x.rebased457", !prof !386

"for blur_y.s0.x.x.rebased456.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased449"
  %8563 = sext i32 %t1706 to i64
  %8564 = zext i32 %.pre-phi3445 to i64
  %8565 = mul nsw i64 %8564, %112
  %8566 = sub nsw i64 %8565, %96
  %8567 = zext i32 %.pre-phi to i64
  %8568 = mul nsw i64 %8567, %112
  %8569 = sub nsw i64 %8568, %96
  %8570 = zext i32 %.pre-phi3449 to i64
  %8571 = mul nsw i64 %8570, %112
  %8572 = sub nsw i64 %8571, %96
  %8573 = zext i32 %.pre-phi3457 to i64
  %8574 = mul nsw i64 %8573, %112
  %8575 = sub nsw i64 %8574, %96
  %8576 = zext i32 %.pre-phi3453 to i64
  %8577 = mul nsw i64 %8576, %112
  %8578 = sub nsw i64 %8577, %96
  %8579 = sext i32 %a26 to i64
  %8580 = add nsw i64 %8579, 16
  %8581 = mul nsw i64 %8580, %113
  %8582 = add nsw i64 %8581, %116
  br label %"for blur_y.s0.x.x.rebased456"

"produce blur_x454":                              ; preds = %"for blur_y.s0.x.x.rebased448"
  %t968 = add nsw i32 %8560, %t1961
  %8583 = sext i32 %t968 to i64
  %8584 = getelementptr inbounds i16, i16* %read_input, i64 %8583
  %8585 = getelementptr inbounds i16, i16* %8584, i64 1
  %8586 = bitcast i16* %8585 to <16 x i16>*
  %8587 = load <16 x i16>, <16 x i16>* %8586, align 2, !tbaa !396
  %8588 = getelementptr inbounds i16, i16* %8584, i64 17
  %8589 = bitcast i16* %8588 to <16 x i16>*
  %8590 = load <16 x i16>, <16 x i16>* %8589, align 2, !tbaa !396
  %8591 = bitcast i16* %8584 to <16 x i16>*
  %8592 = load <16 x i16>, <16 x i16>* %8591, align 2, !tbaa !396
  %8593 = getelementptr inbounds i16, i16* %8584, i64 16
  %8594 = bitcast i16* %8593 to <16 x i16>*
  %8595 = load <16 x i16>, <16 x i16>* %8594, align 2, !tbaa !396
  %8596 = getelementptr inbounds i16, i16* %8584, i64 2
  %8597 = bitcast i16* %8596 to <16 x i16>*
  %8598 = load <16 x i16>, <16 x i16>* %8597, align 2, !tbaa !396
  %8599 = getelementptr inbounds i16, i16* %8584, i64 18
  %8600 = bitcast i16* %8599 to <16 x i16>*
  %8601 = load <16 x i16>, <16 x i16>* %8600, align 2, !tbaa !396
  %8602 = getelementptr inbounds i16, i16* %8584, i64 4
  %8603 = bitcast i16* %8602 to <16 x i16>*
  %8604 = load <16 x i16>, <16 x i16>* %8603, align 2, !tbaa !396
  %8605 = getelementptr inbounds i16, i16* %8584, i64 20
  %8606 = bitcast i16* %8605 to <16 x i16>*
  %8607 = load <16 x i16>, <16 x i16>* %8606, align 2, !tbaa !396
  %8608 = getelementptr inbounds i16, i16* %8584, i64 3
  %8609 = bitcast i16* %8608 to <16 x i16>*
  %8610 = load <16 x i16>, <16 x i16>* %8609, align 2, !tbaa !396
  %8611 = getelementptr inbounds i16, i16* %8584, i64 19
  %8612 = bitcast i16* %8611 to <16 x i16>*
  %8613 = load <16 x i16>, <16 x i16>* %8612, align 2, !tbaa !396
  %8614 = add <16 x i16> %8592, %8587
  %8615 = add <16 x i16> %8614, %8598
  %8616 = add <16 x i16> %8615, %8604
  %8617 = add <16 x i16> %8616, %8610
  %8618 = add <16 x i16> %8595, %8590
  %8619 = add <16 x i16> %8618, %8601
  %8620 = add <16 x i16> %8619, %8607
  %8621 = add <16 x i16> %8620, %8613
  %8622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8617, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8621, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8624 = shufflevector <16 x i16> %8622, <16 x i16> %8623, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8625 = lshr <32 x i16> %8624, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8626 = shufflevector <32 x i16> %8625, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8627 = shl nsw i64 %8557, 5
  %8628 = add nsw i64 %8627, %8412
  %8629 = getelementptr inbounds i16, i16* %blur_x, i64 %8628
  %8630 = bitcast i16* %8629 to <16 x i16>*
  store <16 x i16> %8626, <16 x i16>* %8630, align 2, !tbaa !399
  %8631 = shufflevector <32 x i16> %8625, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8632 = getelementptr inbounds i16, i16* %8629, i64 16
  %8633 = bitcast i16* %8632 to <16 x i16>*
  store <16 x i16> %8631, <16 x i16>* %8633, align 2, !tbaa !399
  br label %"consume blur_x455"

"consume blur_x455":                              ; preds = %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge", %"produce blur_x454"
  %.pre-phi3503 = phi i64 [ %.pre3502, %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge" ], [ %8627, %"produce blur_x454" ]
  %8634 = add nsw i64 %8415, %.pre-phi3503
  %8635 = getelementptr inbounds i16, i16* %blur_x, i64 %8634
  %8636 = bitcast i16* %8635 to <16 x i16>*
  %8637 = load <16 x i16>, <16 x i16>* %8636, align 2, !tbaa !399
  %8638 = getelementptr inbounds i16, i16* %8635, i64 16
  %8639 = bitcast i16* %8638 to <16 x i16>*
  %8640 = load <16 x i16>, <16 x i16>* %8639, align 2, !tbaa !399
  %8641 = add nsw i64 %8418, %.pre-phi3503
  %8642 = getelementptr inbounds i16, i16* %blur_x, i64 %8641
  %8643 = bitcast i16* %8642 to <16 x i16>*
  %8644 = load <16 x i16>, <16 x i16>* %8643, align 2, !tbaa !399
  %8645 = getelementptr inbounds i16, i16* %8642, i64 16
  %8646 = bitcast i16* %8645 to <16 x i16>*
  %8647 = load <16 x i16>, <16 x i16>* %8646, align 2, !tbaa !399
  %8648 = add nsw i64 %8421, %.pre-phi3503
  %8649 = getelementptr inbounds i16, i16* %blur_x, i64 %8648
  %8650 = bitcast i16* %8649 to <16 x i16>*
  %8651 = load <16 x i16>, <16 x i16>* %8650, align 2, !tbaa !399
  %8652 = getelementptr inbounds i16, i16* %8649, i64 16
  %8653 = bitcast i16* %8652 to <16 x i16>*
  %8654 = load <16 x i16>, <16 x i16>* %8653, align 2, !tbaa !399
  %8655 = add nsw i64 %8424, %.pre-phi3503
  %8656 = getelementptr inbounds i16, i16* %blur_x, i64 %8655
  %8657 = bitcast i16* %8656 to <16 x i16>*
  %8658 = load <16 x i16>, <16 x i16>* %8657, align 2, !tbaa !399
  %8659 = getelementptr inbounds i16, i16* %8656, i64 16
  %8660 = bitcast i16* %8659 to <16 x i16>*
  %8661 = load <16 x i16>, <16 x i16>* %8660, align 2, !tbaa !399
  %8662 = add nsw i64 %8427, %.pre-phi3503
  %8663 = getelementptr inbounds i16, i16* %blur_x, i64 %8662
  %8664 = bitcast i16* %8663 to <16 x i16>*
  %8665 = load <16 x i16>, <16 x i16>* %8664, align 2, !tbaa !399
  %8666 = getelementptr inbounds i16, i16* %8663, i64 16
  %8667 = bitcast i16* %8666 to <16 x i16>*
  %8668 = load <16 x i16>, <16 x i16>* %8667, align 2, !tbaa !399
  %8669 = add <16 x i16> %8644, %8637
  %8670 = add <16 x i16> %8669, %8651
  %8671 = add <16 x i16> %8670, %8658
  %8672 = add <16 x i16> %8671, %8665
  %8673 = add <16 x i16> %8647, %8640
  %8674 = add <16 x i16> %8673, %8654
  %8675 = add <16 x i16> %8674, %8661
  %8676 = add <16 x i16> %8675, %8668
  %8677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8672, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8676, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8679 = shufflevector <16 x i16> %8677, <16 x i16> %8678, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8680 = lshr <32 x i16> %8679, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8681 = shufflevector <32 x i16> %8680, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8682 = add nsw i64 %8431, %.pre-phi3503
  %8683 = getelementptr inbounds i16, i16* %66, i64 %8682
  %8684 = bitcast i16* %8683 to <16 x i16>*
  store <16 x i16> %8681, <16 x i16>* %8684, align 2, !tbaa !401
  %8685 = shufflevector <32 x i16> %8680, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8686 = getelementptr inbounds i16, i16* %8683, i64 16
  %8687 = bitcast i16* %8686 to <16 x i16>*
  store <16 x i16> %8685, <16 x i16>* %8687, align 2, !tbaa !401
  %indvars.iv.next3308 = add nuw nsw i64 %indvars.iv3307, 1
  %.not2725 = icmp eq i64 %indvars.iv.next3308, %184
  br i1 %.not2725, label %"end for blur_y.s0.x.x.rebased449", label %"for blur_y.s0.x.x.rebased448"

"for blur_y.s0.x.x.rebased456":                   ; preds = %"for blur_y.s0.x.x.rebased456.preheader", %"consume blur_x464"
  %blur_y.s0.x.x.rebased458 = phi i32 [ %8800, %"consume blur_x464" ], [ 0, %"for blur_y.s0.x.x.rebased456.preheader" ]
  %8688 = add nsw i32 %blur_y.s0.x.x.rebased458, %t1626
  %a217 = shl nsw i32 %8688, 5
  %8689 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %8689, i32 %a217, i32 %a14
  %8690 = icmp slt i32 %8688, 1
  %8691 = icmp sgt i32 %4, %a217
  %8692 = or i1 %8690, %8691
  br i1 %8692, label %"produce blur_x462", label %"consume blur_x464"

"end for blur_y.s0.x.x.rebased457":               ; preds = %"consume blur_x464", %"end for blur_y.s0.x.x.rebased449"
  br i1 %34, label %"produce blur_x468", label %after_bb465

"produce blur_x462":                              ; preds = %"for blur_y.s0.x.x.rebased456"
  %8693 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s463 = select i1 %8693, i32 %b223, i32 %4
  %t973 = add nsw i32 %blur_x.s0.x.v1.base.s463, %t1961
  %8694 = sext i32 %t973 to i64
  %8695 = getelementptr inbounds i16, i16* %read_input, i64 %8694
  %8696 = getelementptr inbounds i16, i16* %8695, i64 1
  %8697 = bitcast i16* %8696 to <16 x i16>*
  %8698 = load <16 x i16>, <16 x i16>* %8697, align 2, !tbaa !396
  %8699 = getelementptr inbounds i16, i16* %8695, i64 17
  %8700 = bitcast i16* %8699 to <16 x i16>*
  %8701 = load <16 x i16>, <16 x i16>* %8700, align 2, !tbaa !396
  %8702 = bitcast i16* %8695 to <16 x i16>*
  %8703 = load <16 x i16>, <16 x i16>* %8702, align 2, !tbaa !396
  %8704 = getelementptr inbounds i16, i16* %8695, i64 16
  %8705 = bitcast i16* %8704 to <16 x i16>*
  %8706 = load <16 x i16>, <16 x i16>* %8705, align 2, !tbaa !396
  %8707 = getelementptr inbounds i16, i16* %8695, i64 2
  %8708 = bitcast i16* %8707 to <16 x i16>*
  %8709 = load <16 x i16>, <16 x i16>* %8708, align 2, !tbaa !396
  %8710 = getelementptr inbounds i16, i16* %8695, i64 18
  %8711 = bitcast i16* %8710 to <16 x i16>*
  %8712 = load <16 x i16>, <16 x i16>* %8711, align 2, !tbaa !396
  %8713 = getelementptr inbounds i16, i16* %8695, i64 4
  %8714 = bitcast i16* %8713 to <16 x i16>*
  %8715 = load <16 x i16>, <16 x i16>* %8714, align 2, !tbaa !396
  %8716 = getelementptr inbounds i16, i16* %8695, i64 20
  %8717 = bitcast i16* %8716 to <16 x i16>*
  %8718 = load <16 x i16>, <16 x i16>* %8717, align 2, !tbaa !396
  %8719 = getelementptr inbounds i16, i16* %8695, i64 3
  %8720 = bitcast i16* %8719 to <16 x i16>*
  %8721 = load <16 x i16>, <16 x i16>* %8720, align 2, !tbaa !396
  %8722 = getelementptr inbounds i16, i16* %8695, i64 19
  %8723 = bitcast i16* %8722 to <16 x i16>*
  %8724 = load <16 x i16>, <16 x i16>* %8723, align 2, !tbaa !396
  %8725 = add <16 x i16> %8703, %8698
  %8726 = add <16 x i16> %8725, %8709
  %8727 = add <16 x i16> %8726, %8715
  %8728 = add <16 x i16> %8727, %8721
  %8729 = add <16 x i16> %8706, %8701
  %8730 = add <16 x i16> %8729, %8712
  %8731 = add <16 x i16> %8730, %8718
  %8732 = add <16 x i16> %8731, %8724
  %8733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8728, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8732, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8735 = shufflevector <16 x i16> %8733, <16 x i16> %8734, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8736 = lshr <32 x i16> %8735, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8737 = shufflevector <32 x i16> %8736, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8738 = sext i32 %blur_x.s0.x.v1.base.s463 to i64
  %8739 = add nsw i64 %8738, %8563
  %8740 = getelementptr inbounds i16, i16* %blur_x, i64 %8739
  %8741 = bitcast i16* %8740 to <16 x i16>*
  store <16 x i16> %8737, <16 x i16>* %8741, align 2, !tbaa !399
  %8742 = shufflevector <32 x i16> %8736, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8743 = getelementptr inbounds i16, i16* %8740, i64 16
  %8744 = bitcast i16* %8743 to <16 x i16>*
  store <16 x i16> %8742, <16 x i16>* %8744, align 2, !tbaa !399
  br label %"consume blur_x464"

"consume blur_x464":                              ; preds = %"for blur_y.s0.x.x.rebased456", %"produce blur_x462"
  %8745 = sext i32 %b223 to i64
  %8746 = add nsw i64 %8566, %8745
  %8747 = getelementptr inbounds i16, i16* %blur_x, i64 %8746
  %8748 = bitcast i16* %8747 to <16 x i16>*
  %8749 = load <16 x i16>, <16 x i16>* %8748, align 2, !tbaa !399
  %8750 = getelementptr inbounds i16, i16* %8747, i64 16
  %8751 = bitcast i16* %8750 to <16 x i16>*
  %8752 = load <16 x i16>, <16 x i16>* %8751, align 2, !tbaa !399
  %8753 = add nsw i64 %8569, %8745
  %8754 = getelementptr inbounds i16, i16* %blur_x, i64 %8753
  %8755 = bitcast i16* %8754 to <16 x i16>*
  %8756 = load <16 x i16>, <16 x i16>* %8755, align 2, !tbaa !399
  %8757 = getelementptr inbounds i16, i16* %8754, i64 16
  %8758 = bitcast i16* %8757 to <16 x i16>*
  %8759 = load <16 x i16>, <16 x i16>* %8758, align 2, !tbaa !399
  %8760 = add nsw i64 %8572, %8745
  %8761 = getelementptr inbounds i16, i16* %blur_x, i64 %8760
  %8762 = bitcast i16* %8761 to <16 x i16>*
  %8763 = load <16 x i16>, <16 x i16>* %8762, align 2, !tbaa !399
  %8764 = getelementptr inbounds i16, i16* %8761, i64 16
  %8765 = bitcast i16* %8764 to <16 x i16>*
  %8766 = load <16 x i16>, <16 x i16>* %8765, align 2, !tbaa !399
  %8767 = add nsw i64 %8575, %8745
  %8768 = getelementptr inbounds i16, i16* %blur_x, i64 %8767
  %8769 = bitcast i16* %8768 to <16 x i16>*
  %8770 = load <16 x i16>, <16 x i16>* %8769, align 2, !tbaa !399
  %8771 = getelementptr inbounds i16, i16* %8768, i64 16
  %8772 = bitcast i16* %8771 to <16 x i16>*
  %8773 = load <16 x i16>, <16 x i16>* %8772, align 2, !tbaa !399
  %8774 = add nsw i64 %8578, %8745
  %8775 = getelementptr inbounds i16, i16* %blur_x, i64 %8774
  %8776 = bitcast i16* %8775 to <16 x i16>*
  %8777 = load <16 x i16>, <16 x i16>* %8776, align 2, !tbaa !399
  %8778 = getelementptr inbounds i16, i16* %8775, i64 16
  %8779 = bitcast i16* %8778 to <16 x i16>*
  %8780 = load <16 x i16>, <16 x i16>* %8779, align 2, !tbaa !399
  %8781 = add <16 x i16> %8756, %8749
  %8782 = add <16 x i16> %8781, %8763
  %8783 = add <16 x i16> %8782, %8770
  %8784 = add <16 x i16> %8783, %8777
  %8785 = add <16 x i16> %8759, %8752
  %8786 = add <16 x i16> %8785, %8766
  %8787 = add <16 x i16> %8786, %8773
  %8788 = add <16 x i16> %8787, %8780
  %8789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8784, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8788, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8791 = shufflevector <16 x i16> %8789, <16 x i16> %8790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8792 = lshr <32 x i16> %8791, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8793 = shufflevector <32 x i16> %8792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8794 = add nsw i64 %8582, %8745
  %8795 = getelementptr inbounds i16, i16* %66, i64 %8794
  %8796 = bitcast i16* %8795 to <16 x i16>*
  store <16 x i16> %8793, <16 x i16>* %8796, align 2, !tbaa !401
  %8797 = shufflevector <32 x i16> %8792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8798 = getelementptr inbounds i16, i16* %8795, i64 16
  %8799 = bitcast i16* %8798 to <16 x i16>*
  store <16 x i16> %8797, <16 x i16>* %8799, align 2, !tbaa !401
  %8800 = add nuw nsw i32 %blur_y.s0.x.x.rebased458, 1
  %.not2724 = icmp eq i32 %8800, %t1683
  br i1 %.not2724, label %"end for blur_y.s0.x.x.rebased457", label %"for blur_y.s0.x.x.rebased456"

after_bb465:                                      ; preds = %"end for blur_y.s0.x.x.rebased457", %"produce blur_x468"
  br i1 %100, label %"for blur_y.s0.x.x.rebased470.preheader", label %"end for blur_y.s0.x.x.rebased471", !prof !386

"for blur_y.s0.x.x.rebased470.preheader":         ; preds = %after_bb465
  %8801 = sext i32 %t1722 to i64
  %8802 = zext i32 %.pre-phi3449 to i64
  %8803 = mul nsw i64 %8802, %112
  %8804 = sub nsw i64 %8803, %96
  %8805 = zext i32 %.pre-phi3445 to i64
  %8806 = mul nsw i64 %8805, %112
  %8807 = sub nsw i64 %8806, %96
  %8808 = zext i32 %.pre-phi3453 to i64
  %8809 = mul nsw i64 %8808, %112
  %8810 = sub nsw i64 %8809, %96
  %8811 = zext i32 %.pre-phi3463 to i64
  %8812 = mul nsw i64 %8811, %112
  %8813 = sub nsw i64 %8812, %96
  %8814 = zext i32 %.pre-phi3457 to i64
  %8815 = mul nsw i64 %8814, %112
  %8816 = sub nsw i64 %8815, %96
  %8817 = sext i32 %a26 to i64
  %8818 = add nsw i64 %8817, 17
  %8819 = mul nsw i64 %8818, %113
  %8820 = add nsw i64 %8819, %116
  br label %"for blur_y.s0.x.x.rebased470"

"produce blur_x468":                              ; preds = %"end for blur_y.s0.x.x.rebased457"
  %8821 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %8822 = getelementptr inbounds i16, i16* %8821, i64 -31
  %8823 = bitcast i16* %8822 to <16 x i16>*
  %8824 = load <16 x i16>, <16 x i16>* %8823, align 2, !tbaa !396
  %8825 = getelementptr inbounds i16, i16* %8821, i64 -15
  %8826 = bitcast i16* %8825 to <16 x i16>*
  %8827 = load <16 x i16>, <16 x i16>* %8826, align 2, !tbaa !396
  %8828 = getelementptr inbounds i16, i16* %8821, i64 -32
  %8829 = bitcast i16* %8828 to <16 x i16>*
  %8830 = load <16 x i16>, <16 x i16>* %8829, align 2, !tbaa !396
  %8831 = getelementptr inbounds i16, i16* %8821, i64 -16
  %8832 = bitcast i16* %8831 to <16 x i16>*
  %8833 = load <16 x i16>, <16 x i16>* %8832, align 2, !tbaa !396
  %8834 = getelementptr inbounds i16, i16* %8821, i64 -30
  %8835 = bitcast i16* %8834 to <16 x i16>*
  %8836 = load <16 x i16>, <16 x i16>* %8835, align 2, !tbaa !396
  %8837 = getelementptr inbounds i16, i16* %8821, i64 -14
  %8838 = bitcast i16* %8837 to <16 x i16>*
  %8839 = load <16 x i16>, <16 x i16>* %8838, align 2, !tbaa !396
  %8840 = getelementptr inbounds i16, i16* %8821, i64 -28
  %8841 = bitcast i16* %8840 to <16 x i16>*
  %8842 = load <16 x i16>, <16 x i16>* %8841, align 2, !tbaa !396
  %8843 = getelementptr inbounds i16, i16* %8821, i64 -12
  %8844 = bitcast i16* %8843 to <16 x i16>*
  %8845 = load <16 x i16>, <16 x i16>* %8844, align 2, !tbaa !396
  %8846 = getelementptr inbounds i16, i16* %8821, i64 -29
  %8847 = bitcast i16* %8846 to <16 x i16>*
  %8848 = load <16 x i16>, <16 x i16>* %8847, align 2, !tbaa !396
  %8849 = getelementptr inbounds i16, i16* %8821, i64 -13
  %8850 = bitcast i16* %8849 to <16 x i16>*
  %8851 = load <16 x i16>, <16 x i16>* %8850, align 2, !tbaa !396
  %8852 = add <16 x i16> %8830, %8824
  %8853 = add <16 x i16> %8852, %8836
  %8854 = add <16 x i16> %8853, %8842
  %8855 = add <16 x i16> %8854, %8848
  %8856 = add <16 x i16> %8833, %8827
  %8857 = add <16 x i16> %8856, %8839
  %8858 = add <16 x i16> %8857, %8845
  %8859 = add <16 x i16> %8858, %8851
  %8860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8855, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8859, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8862 = shufflevector <16 x i16> %8860, <16 x i16> %8861, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8863 = lshr <32 x i16> %8862, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8864 = shufflevector <32 x i16> %8863, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8865 = zext i32 %.pre-phi3463 to i64
  %8866 = mul nsw i64 %97, %8865
  %8867 = add nsw i64 %99, %8866
  %8868 = getelementptr inbounds i16, i16* %blur_x, i64 %8867
  %8869 = getelementptr inbounds i16, i16* %8868, i64 -32
  %8870 = bitcast i16* %8869 to <16 x i16>*
  store <16 x i16> %8864, <16 x i16>* %8870, align 2, !tbaa !399
  %8871 = shufflevector <32 x i16> %8863, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8872 = getelementptr inbounds i16, i16* %8868, i64 -16
  %8873 = bitcast i16* %8872 to <16 x i16>*
  store <16 x i16> %8871, <16 x i16>* %8873, align 2, !tbaa !399
  %8874 = zext i32 %.pre-phi3449 to i64
  %8875 = mul nsw i64 %8874, %112
  %8876 = add nsw i64 %8875, %94
  %8877 = getelementptr inbounds i16, i16* %blur_x, i64 %8876
  %8878 = getelementptr inbounds i16, i16* %8877, i64 -32
  %8879 = bitcast i16* %8878 to <16 x i16>*
  %8880 = load <16 x i16>, <16 x i16>* %8879, align 2, !tbaa !399
  %8881 = getelementptr inbounds i16, i16* %8877, i64 -16
  %8882 = bitcast i16* %8881 to <16 x i16>*
  %8883 = load <16 x i16>, <16 x i16>* %8882, align 2, !tbaa !399
  %8884 = zext i32 %.pre-phi3445 to i64
  %8885 = mul nsw i64 %8884, %112
  %8886 = add nsw i64 %8885, %94
  %8887 = getelementptr inbounds i16, i16* %blur_x, i64 %8886
  %8888 = getelementptr inbounds i16, i16* %8887, i64 -32
  %8889 = bitcast i16* %8888 to <16 x i16>*
  %8890 = load <16 x i16>, <16 x i16>* %8889, align 2, !tbaa !399
  %8891 = getelementptr inbounds i16, i16* %8887, i64 -16
  %8892 = bitcast i16* %8891 to <16 x i16>*
  %8893 = load <16 x i16>, <16 x i16>* %8892, align 2, !tbaa !399
  %8894 = zext i32 %.pre-phi3453 to i64
  %8895 = mul nsw i64 %8894, %112
  %8896 = add nsw i64 %8895, %94
  %8897 = getelementptr inbounds i16, i16* %blur_x, i64 %8896
  %8898 = getelementptr inbounds i16, i16* %8897, i64 -32
  %8899 = bitcast i16* %8898 to <16 x i16>*
  %8900 = load <16 x i16>, <16 x i16>* %8899, align 2, !tbaa !399
  %8901 = getelementptr inbounds i16, i16* %8897, i64 -16
  %8902 = bitcast i16* %8901 to <16 x i16>*
  %8903 = load <16 x i16>, <16 x i16>* %8902, align 2, !tbaa !399
  %8904 = mul nsw i64 %8865, %112
  %8905 = add nsw i64 %8904, %94
  %8906 = getelementptr inbounds i16, i16* %blur_x, i64 %8905
  %8907 = getelementptr inbounds i16, i16* %8906, i64 -32
  %8908 = bitcast i16* %8907 to <16 x i16>*
  %8909 = load <16 x i16>, <16 x i16>* %8908, align 2, !tbaa !399
  %8910 = getelementptr inbounds i16, i16* %8906, i64 -16
  %8911 = bitcast i16* %8910 to <16 x i16>*
  %8912 = load <16 x i16>, <16 x i16>* %8911, align 2, !tbaa !399
  %8913 = zext i32 %.pre-phi3457 to i64
  %8914 = mul nsw i64 %8913, %112
  %8915 = add nsw i64 %8914, %94
  %8916 = getelementptr inbounds i16, i16* %blur_x, i64 %8915
  %8917 = getelementptr inbounds i16, i16* %8916, i64 -32
  %8918 = bitcast i16* %8917 to <16 x i16>*
  %8919 = load <16 x i16>, <16 x i16>* %8918, align 2, !tbaa !399
  %8920 = getelementptr inbounds i16, i16* %8916, i64 -16
  %8921 = bitcast i16* %8920 to <16 x i16>*
  %8922 = load <16 x i16>, <16 x i16>* %8921, align 2, !tbaa !399
  %8923 = add <16 x i16> %8890, %8880
  %8924 = add <16 x i16> %8923, %8900
  %8925 = add <16 x i16> %8924, %8909
  %8926 = add <16 x i16> %8925, %8919
  %8927 = add <16 x i16> %8893, %8883
  %8928 = add <16 x i16> %8927, %8903
  %8929 = add <16 x i16> %8928, %8912
  %8930 = add <16 x i16> %8929, %8922
  %8931 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8926, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8932 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8930, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8933 = shufflevector <16 x i16> %8931, <16 x i16> %8932, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8934 = lshr <32 x i16> %8933, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8935 = shufflevector <32 x i16> %8934, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8936 = sext i32 %a26 to i64
  %8937 = add nsw i64 %8936, 17
  %8938 = mul nsw i64 %8937, %113
  %8939 = add nsw i64 %115, %8938
  %8940 = getelementptr inbounds i16, i16* %66, i64 %8939
  %8941 = getelementptr inbounds i16, i16* %8940, i64 -32
  %8942 = bitcast i16* %8941 to <16 x i16>*
  store <16 x i16> %8935, <16 x i16>* %8942, align 2, !tbaa !401
  %8943 = shufflevector <32 x i16> %8934, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8944 = getelementptr inbounds i16, i16* %8940, i64 -16
  %8945 = bitcast i16* %8944 to <16 x i16>*
  store <16 x i16> %8943, <16 x i16>* %8945, align 2, !tbaa !401
  br label %after_bb465

"for blur_y.s0.x.x.rebased470":                   ; preds = %"for blur_y.s0.x.x.rebased470.preheader", %"consume blur_x477"
  %indvars.iv3310 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased470.preheader" ], [ %indvars.iv.next3311, %"consume blur_x477" ]
  %8946 = add nsw i64 %indvars.iv3310, %101
  %8947 = icmp slt i64 %8946, 1
  %8948 = trunc i64 %8946 to i32
  %8949 = shl nsw i32 %8948, 5
  %8950 = icmp sgt i32 %4, %8949
  %8951 = or i1 %8947, %8950
  br i1 %8951, label %"produce blur_x476", label %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge"

"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased470"
  %.pre3504 = shl nsw i64 %8946, 5
  br label %"consume blur_x477"

"end for blur_y.s0.x.x.rebased471":               ; preds = %"consume blur_x477", %after_bb465
  br i1 %102, label %"for blur_y.s0.x.x.rebased478.preheader", label %"end for blur_y.s0.x.x.rebased479", !prof !386

"for blur_y.s0.x.x.rebased478.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased471"
  %8952 = sext i32 %t1722 to i64
  %8953 = zext i32 %.pre-phi3449 to i64
  %8954 = mul nsw i64 %8953, %112
  %8955 = sub nsw i64 %8954, %96
  %8956 = zext i32 %.pre-phi3445 to i64
  %8957 = mul nsw i64 %8956, %112
  %8958 = sub nsw i64 %8957, %96
  %8959 = zext i32 %.pre-phi3453 to i64
  %8960 = mul nsw i64 %8959, %112
  %8961 = sub nsw i64 %8960, %96
  %8962 = zext i32 %.pre-phi3463 to i64
  %8963 = mul nsw i64 %8962, %112
  %8964 = sub nsw i64 %8963, %96
  %8965 = zext i32 %.pre-phi3457 to i64
  %8966 = mul nsw i64 %8965, %112
  %8967 = sub nsw i64 %8966, %96
  %8968 = sext i32 %a26 to i64
  %8969 = add nsw i64 %8968, 17
  %8970 = mul nsw i64 %8969, %113
  %8971 = add nsw i64 %8970, %116
  br label %"for blur_y.s0.x.x.rebased478"

"produce blur_x476":                              ; preds = %"for blur_y.s0.x.x.rebased470"
  %t984 = add nsw i32 %8949, %t1977
  %8972 = sext i32 %t984 to i64
  %8973 = getelementptr inbounds i16, i16* %read_input, i64 %8972
  %8974 = getelementptr inbounds i16, i16* %8973, i64 1
  %8975 = bitcast i16* %8974 to <16 x i16>*
  %8976 = load <16 x i16>, <16 x i16>* %8975, align 2, !tbaa !396
  %8977 = getelementptr inbounds i16, i16* %8973, i64 17
  %8978 = bitcast i16* %8977 to <16 x i16>*
  %8979 = load <16 x i16>, <16 x i16>* %8978, align 2, !tbaa !396
  %8980 = bitcast i16* %8973 to <16 x i16>*
  %8981 = load <16 x i16>, <16 x i16>* %8980, align 2, !tbaa !396
  %8982 = getelementptr inbounds i16, i16* %8973, i64 16
  %8983 = bitcast i16* %8982 to <16 x i16>*
  %8984 = load <16 x i16>, <16 x i16>* %8983, align 2, !tbaa !396
  %8985 = getelementptr inbounds i16, i16* %8973, i64 2
  %8986 = bitcast i16* %8985 to <16 x i16>*
  %8987 = load <16 x i16>, <16 x i16>* %8986, align 2, !tbaa !396
  %8988 = getelementptr inbounds i16, i16* %8973, i64 18
  %8989 = bitcast i16* %8988 to <16 x i16>*
  %8990 = load <16 x i16>, <16 x i16>* %8989, align 2, !tbaa !396
  %8991 = getelementptr inbounds i16, i16* %8973, i64 4
  %8992 = bitcast i16* %8991 to <16 x i16>*
  %8993 = load <16 x i16>, <16 x i16>* %8992, align 2, !tbaa !396
  %8994 = getelementptr inbounds i16, i16* %8973, i64 20
  %8995 = bitcast i16* %8994 to <16 x i16>*
  %8996 = load <16 x i16>, <16 x i16>* %8995, align 2, !tbaa !396
  %8997 = getelementptr inbounds i16, i16* %8973, i64 3
  %8998 = bitcast i16* %8997 to <16 x i16>*
  %8999 = load <16 x i16>, <16 x i16>* %8998, align 2, !tbaa !396
  %9000 = getelementptr inbounds i16, i16* %8973, i64 19
  %9001 = bitcast i16* %9000 to <16 x i16>*
  %9002 = load <16 x i16>, <16 x i16>* %9001, align 2, !tbaa !396
  %9003 = add <16 x i16> %8981, %8976
  %9004 = add <16 x i16> %9003, %8987
  %9005 = add <16 x i16> %9004, %8993
  %9006 = add <16 x i16> %9005, %8999
  %9007 = add <16 x i16> %8984, %8979
  %9008 = add <16 x i16> %9007, %8990
  %9009 = add <16 x i16> %9008, %8996
  %9010 = add <16 x i16> %9009, %9002
  %9011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9006, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9012 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9010, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9013 = shufflevector <16 x i16> %9011, <16 x i16> %9012, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9014 = lshr <32 x i16> %9013, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9015 = shufflevector <32 x i16> %9014, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9016 = shl nsw i64 %8946, 5
  %9017 = add nsw i64 %9016, %8801
  %9018 = getelementptr inbounds i16, i16* %blur_x, i64 %9017
  %9019 = bitcast i16* %9018 to <16 x i16>*
  store <16 x i16> %9015, <16 x i16>* %9019, align 2, !tbaa !399
  %9020 = shufflevector <32 x i16> %9014, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9021 = getelementptr inbounds i16, i16* %9018, i64 16
  %9022 = bitcast i16* %9021 to <16 x i16>*
  store <16 x i16> %9020, <16 x i16>* %9022, align 2, !tbaa !399
  br label %"consume blur_x477"

"consume blur_x477":                              ; preds = %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge", %"produce blur_x476"
  %.pre-phi3505 = phi i64 [ %.pre3504, %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge" ], [ %9016, %"produce blur_x476" ]
  %9023 = add nsw i64 %8804, %.pre-phi3505
  %9024 = getelementptr inbounds i16, i16* %blur_x, i64 %9023
  %9025 = bitcast i16* %9024 to <16 x i16>*
  %9026 = load <16 x i16>, <16 x i16>* %9025, align 2, !tbaa !399
  %9027 = getelementptr inbounds i16, i16* %9024, i64 16
  %9028 = bitcast i16* %9027 to <16 x i16>*
  %9029 = load <16 x i16>, <16 x i16>* %9028, align 2, !tbaa !399
  %9030 = add nsw i64 %8807, %.pre-phi3505
  %9031 = getelementptr inbounds i16, i16* %blur_x, i64 %9030
  %9032 = bitcast i16* %9031 to <16 x i16>*
  %9033 = load <16 x i16>, <16 x i16>* %9032, align 2, !tbaa !399
  %9034 = getelementptr inbounds i16, i16* %9031, i64 16
  %9035 = bitcast i16* %9034 to <16 x i16>*
  %9036 = load <16 x i16>, <16 x i16>* %9035, align 2, !tbaa !399
  %9037 = add nsw i64 %8810, %.pre-phi3505
  %9038 = getelementptr inbounds i16, i16* %blur_x, i64 %9037
  %9039 = bitcast i16* %9038 to <16 x i16>*
  %9040 = load <16 x i16>, <16 x i16>* %9039, align 2, !tbaa !399
  %9041 = getelementptr inbounds i16, i16* %9038, i64 16
  %9042 = bitcast i16* %9041 to <16 x i16>*
  %9043 = load <16 x i16>, <16 x i16>* %9042, align 2, !tbaa !399
  %9044 = add nsw i64 %8813, %.pre-phi3505
  %9045 = getelementptr inbounds i16, i16* %blur_x, i64 %9044
  %9046 = bitcast i16* %9045 to <16 x i16>*
  %9047 = load <16 x i16>, <16 x i16>* %9046, align 2, !tbaa !399
  %9048 = getelementptr inbounds i16, i16* %9045, i64 16
  %9049 = bitcast i16* %9048 to <16 x i16>*
  %9050 = load <16 x i16>, <16 x i16>* %9049, align 2, !tbaa !399
  %9051 = add nsw i64 %8816, %.pre-phi3505
  %9052 = getelementptr inbounds i16, i16* %blur_x, i64 %9051
  %9053 = bitcast i16* %9052 to <16 x i16>*
  %9054 = load <16 x i16>, <16 x i16>* %9053, align 2, !tbaa !399
  %9055 = getelementptr inbounds i16, i16* %9052, i64 16
  %9056 = bitcast i16* %9055 to <16 x i16>*
  %9057 = load <16 x i16>, <16 x i16>* %9056, align 2, !tbaa !399
  %9058 = add <16 x i16> %9033, %9026
  %9059 = add <16 x i16> %9058, %9040
  %9060 = add <16 x i16> %9059, %9047
  %9061 = add <16 x i16> %9060, %9054
  %9062 = add <16 x i16> %9036, %9029
  %9063 = add <16 x i16> %9062, %9043
  %9064 = add <16 x i16> %9063, %9050
  %9065 = add <16 x i16> %9064, %9057
  %9066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9061, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9065, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9068 = shufflevector <16 x i16> %9066, <16 x i16> %9067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9069 = lshr <32 x i16> %9068, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9070 = shufflevector <32 x i16> %9069, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9071 = add nsw i64 %8820, %.pre-phi3505
  %9072 = getelementptr inbounds i16, i16* %66, i64 %9071
  %9073 = bitcast i16* %9072 to <16 x i16>*
  store <16 x i16> %9070, <16 x i16>* %9073, align 2, !tbaa !401
  %9074 = shufflevector <32 x i16> %9069, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9075 = getelementptr inbounds i16, i16* %9072, i64 16
  %9076 = bitcast i16* %9075 to <16 x i16>*
  store <16 x i16> %9074, <16 x i16>* %9076, align 2, !tbaa !401
  %indvars.iv.next3311 = add nuw nsw i64 %indvars.iv3310, 1
  %.not2723 = icmp eq i64 %indvars.iv.next3311, %184
  br i1 %.not2723, label %"end for blur_y.s0.x.x.rebased471", label %"for blur_y.s0.x.x.rebased470"

"for blur_y.s0.x.x.rebased478":                   ; preds = %"for blur_y.s0.x.x.rebased478.preheader", %"consume blur_x486"
  %blur_y.s0.x.x.rebased480 = phi i32 [ %9189, %"consume blur_x486" ], [ 0, %"for blur_y.s0.x.x.rebased478.preheader" ]
  %9077 = add nsw i32 %blur_y.s0.x.x.rebased480, %t1626
  %a224 = shl nsw i32 %9077, 5
  %9078 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %9078, i32 %a224, i32 %a14
  %9079 = icmp slt i32 %9077, 1
  %9080 = icmp sgt i32 %4, %a224
  %9081 = or i1 %9079, %9080
  br i1 %9081, label %"produce blur_x484", label %"consume blur_x486"

"end for blur_y.s0.x.x.rebased479":               ; preds = %"consume blur_x486", %"end for blur_y.s0.x.x.rebased471"
  br i1 %34, label %"produce blur_x490", label %after_bb487

"produce blur_x484":                              ; preds = %"for blur_y.s0.x.x.rebased478"
  %9082 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s485 = select i1 %9082, i32 %b230, i32 %4
  %t989 = add nsw i32 %blur_x.s0.x.v1.base.s485, %t1977
  %9083 = sext i32 %t989 to i64
  %9084 = getelementptr inbounds i16, i16* %read_input, i64 %9083
  %9085 = getelementptr inbounds i16, i16* %9084, i64 1
  %9086 = bitcast i16* %9085 to <16 x i16>*
  %9087 = load <16 x i16>, <16 x i16>* %9086, align 2, !tbaa !396
  %9088 = getelementptr inbounds i16, i16* %9084, i64 17
  %9089 = bitcast i16* %9088 to <16 x i16>*
  %9090 = load <16 x i16>, <16 x i16>* %9089, align 2, !tbaa !396
  %9091 = bitcast i16* %9084 to <16 x i16>*
  %9092 = load <16 x i16>, <16 x i16>* %9091, align 2, !tbaa !396
  %9093 = getelementptr inbounds i16, i16* %9084, i64 16
  %9094 = bitcast i16* %9093 to <16 x i16>*
  %9095 = load <16 x i16>, <16 x i16>* %9094, align 2, !tbaa !396
  %9096 = getelementptr inbounds i16, i16* %9084, i64 2
  %9097 = bitcast i16* %9096 to <16 x i16>*
  %9098 = load <16 x i16>, <16 x i16>* %9097, align 2, !tbaa !396
  %9099 = getelementptr inbounds i16, i16* %9084, i64 18
  %9100 = bitcast i16* %9099 to <16 x i16>*
  %9101 = load <16 x i16>, <16 x i16>* %9100, align 2, !tbaa !396
  %9102 = getelementptr inbounds i16, i16* %9084, i64 4
  %9103 = bitcast i16* %9102 to <16 x i16>*
  %9104 = load <16 x i16>, <16 x i16>* %9103, align 2, !tbaa !396
  %9105 = getelementptr inbounds i16, i16* %9084, i64 20
  %9106 = bitcast i16* %9105 to <16 x i16>*
  %9107 = load <16 x i16>, <16 x i16>* %9106, align 2, !tbaa !396
  %9108 = getelementptr inbounds i16, i16* %9084, i64 3
  %9109 = bitcast i16* %9108 to <16 x i16>*
  %9110 = load <16 x i16>, <16 x i16>* %9109, align 2, !tbaa !396
  %9111 = getelementptr inbounds i16, i16* %9084, i64 19
  %9112 = bitcast i16* %9111 to <16 x i16>*
  %9113 = load <16 x i16>, <16 x i16>* %9112, align 2, !tbaa !396
  %9114 = add <16 x i16> %9092, %9087
  %9115 = add <16 x i16> %9114, %9098
  %9116 = add <16 x i16> %9115, %9104
  %9117 = add <16 x i16> %9116, %9110
  %9118 = add <16 x i16> %9095, %9090
  %9119 = add <16 x i16> %9118, %9101
  %9120 = add <16 x i16> %9119, %9107
  %9121 = add <16 x i16> %9120, %9113
  %9122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9117, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9121, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9124 = shufflevector <16 x i16> %9122, <16 x i16> %9123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9125 = lshr <32 x i16> %9124, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9126 = shufflevector <32 x i16> %9125, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9127 = sext i32 %blur_x.s0.x.v1.base.s485 to i64
  %9128 = add nsw i64 %9127, %8952
  %9129 = getelementptr inbounds i16, i16* %blur_x, i64 %9128
  %9130 = bitcast i16* %9129 to <16 x i16>*
  store <16 x i16> %9126, <16 x i16>* %9130, align 2, !tbaa !399
  %9131 = shufflevector <32 x i16> %9125, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9132 = getelementptr inbounds i16, i16* %9129, i64 16
  %9133 = bitcast i16* %9132 to <16 x i16>*
  store <16 x i16> %9131, <16 x i16>* %9133, align 2, !tbaa !399
  br label %"consume blur_x486"

"consume blur_x486":                              ; preds = %"for blur_y.s0.x.x.rebased478", %"produce blur_x484"
  %9134 = sext i32 %b230 to i64
  %9135 = add nsw i64 %8955, %9134
  %9136 = getelementptr inbounds i16, i16* %blur_x, i64 %9135
  %9137 = bitcast i16* %9136 to <16 x i16>*
  %9138 = load <16 x i16>, <16 x i16>* %9137, align 2, !tbaa !399
  %9139 = getelementptr inbounds i16, i16* %9136, i64 16
  %9140 = bitcast i16* %9139 to <16 x i16>*
  %9141 = load <16 x i16>, <16 x i16>* %9140, align 2, !tbaa !399
  %9142 = add nsw i64 %8958, %9134
  %9143 = getelementptr inbounds i16, i16* %blur_x, i64 %9142
  %9144 = bitcast i16* %9143 to <16 x i16>*
  %9145 = load <16 x i16>, <16 x i16>* %9144, align 2, !tbaa !399
  %9146 = getelementptr inbounds i16, i16* %9143, i64 16
  %9147 = bitcast i16* %9146 to <16 x i16>*
  %9148 = load <16 x i16>, <16 x i16>* %9147, align 2, !tbaa !399
  %9149 = add nsw i64 %8961, %9134
  %9150 = getelementptr inbounds i16, i16* %blur_x, i64 %9149
  %9151 = bitcast i16* %9150 to <16 x i16>*
  %9152 = load <16 x i16>, <16 x i16>* %9151, align 2, !tbaa !399
  %9153 = getelementptr inbounds i16, i16* %9150, i64 16
  %9154 = bitcast i16* %9153 to <16 x i16>*
  %9155 = load <16 x i16>, <16 x i16>* %9154, align 2, !tbaa !399
  %9156 = add nsw i64 %8964, %9134
  %9157 = getelementptr inbounds i16, i16* %blur_x, i64 %9156
  %9158 = bitcast i16* %9157 to <16 x i16>*
  %9159 = load <16 x i16>, <16 x i16>* %9158, align 2, !tbaa !399
  %9160 = getelementptr inbounds i16, i16* %9157, i64 16
  %9161 = bitcast i16* %9160 to <16 x i16>*
  %9162 = load <16 x i16>, <16 x i16>* %9161, align 2, !tbaa !399
  %9163 = add nsw i64 %8967, %9134
  %9164 = getelementptr inbounds i16, i16* %blur_x, i64 %9163
  %9165 = bitcast i16* %9164 to <16 x i16>*
  %9166 = load <16 x i16>, <16 x i16>* %9165, align 2, !tbaa !399
  %9167 = getelementptr inbounds i16, i16* %9164, i64 16
  %9168 = bitcast i16* %9167 to <16 x i16>*
  %9169 = load <16 x i16>, <16 x i16>* %9168, align 2, !tbaa !399
  %9170 = add <16 x i16> %9145, %9138
  %9171 = add <16 x i16> %9170, %9152
  %9172 = add <16 x i16> %9171, %9159
  %9173 = add <16 x i16> %9172, %9166
  %9174 = add <16 x i16> %9148, %9141
  %9175 = add <16 x i16> %9174, %9155
  %9176 = add <16 x i16> %9175, %9162
  %9177 = add <16 x i16> %9176, %9169
  %9178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9173, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9177, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9180 = shufflevector <16 x i16> %9178, <16 x i16> %9179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9181 = lshr <32 x i16> %9180, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9182 = shufflevector <32 x i16> %9181, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9183 = add nsw i64 %8971, %9134
  %9184 = getelementptr inbounds i16, i16* %66, i64 %9183
  %9185 = bitcast i16* %9184 to <16 x i16>*
  store <16 x i16> %9182, <16 x i16>* %9185, align 2, !tbaa !401
  %9186 = shufflevector <32 x i16> %9181, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9187 = getelementptr inbounds i16, i16* %9184, i64 16
  %9188 = bitcast i16* %9187 to <16 x i16>*
  store <16 x i16> %9186, <16 x i16>* %9188, align 2, !tbaa !401
  %9189 = add nuw nsw i32 %blur_y.s0.x.x.rebased480, 1
  %.not2722 = icmp eq i32 %9189, %t1683
  br i1 %.not2722, label %"end for blur_y.s0.x.x.rebased479", label %"for blur_y.s0.x.x.rebased478"

after_bb487:                                      ; preds = %"end for blur_y.s0.x.x.rebased479", %"produce blur_x490"
  br i1 %100, label %"for blur_y.s0.x.x.rebased492.preheader", label %"end for blur_y.s0.x.x.rebased493", !prof !386

"for blur_y.s0.x.x.rebased492.preheader":         ; preds = %after_bb487
  %9190 = sext i32 %t1738 to i64
  %9191 = zext i32 %.pre-phi3453 to i64
  %9192 = mul nsw i64 %9191, %112
  %9193 = sub nsw i64 %9192, %96
  %9194 = zext i32 %.pre-phi3449 to i64
  %9195 = mul nsw i64 %9194, %112
  %9196 = sub nsw i64 %9195, %96
  %9197 = zext i32 %.pre-phi3457 to i64
  %9198 = mul nsw i64 %9197, %112
  %9199 = sub nsw i64 %9198, %96
  %9200 = zext i32 %.pre-phi3469 to i64
  %9201 = mul nsw i64 %9200, %112
  %9202 = sub nsw i64 %9201, %96
  %9203 = zext i32 %.pre-phi3463 to i64
  %9204 = mul nsw i64 %9203, %112
  %9205 = sub nsw i64 %9204, %96
  %9206 = sext i32 %a26 to i64
  %9207 = add nsw i64 %9206, 18
  %9208 = mul nsw i64 %9207, %113
  %9209 = add nsw i64 %9208, %116
  br label %"for blur_y.s0.x.x.rebased492"

"produce blur_x490":                              ; preds = %"end for blur_y.s0.x.x.rebased479"
  %9210 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %9211 = getelementptr inbounds i16, i16* %9210, i64 -31
  %9212 = bitcast i16* %9211 to <16 x i16>*
  %9213 = load <16 x i16>, <16 x i16>* %9212, align 2, !tbaa !396
  %9214 = getelementptr inbounds i16, i16* %9210, i64 -15
  %9215 = bitcast i16* %9214 to <16 x i16>*
  %9216 = load <16 x i16>, <16 x i16>* %9215, align 2, !tbaa !396
  %9217 = getelementptr inbounds i16, i16* %9210, i64 -32
  %9218 = bitcast i16* %9217 to <16 x i16>*
  %9219 = load <16 x i16>, <16 x i16>* %9218, align 2, !tbaa !396
  %9220 = getelementptr inbounds i16, i16* %9210, i64 -16
  %9221 = bitcast i16* %9220 to <16 x i16>*
  %9222 = load <16 x i16>, <16 x i16>* %9221, align 2, !tbaa !396
  %9223 = getelementptr inbounds i16, i16* %9210, i64 -30
  %9224 = bitcast i16* %9223 to <16 x i16>*
  %9225 = load <16 x i16>, <16 x i16>* %9224, align 2, !tbaa !396
  %9226 = getelementptr inbounds i16, i16* %9210, i64 -14
  %9227 = bitcast i16* %9226 to <16 x i16>*
  %9228 = load <16 x i16>, <16 x i16>* %9227, align 2, !tbaa !396
  %9229 = getelementptr inbounds i16, i16* %9210, i64 -28
  %9230 = bitcast i16* %9229 to <16 x i16>*
  %9231 = load <16 x i16>, <16 x i16>* %9230, align 2, !tbaa !396
  %9232 = getelementptr inbounds i16, i16* %9210, i64 -12
  %9233 = bitcast i16* %9232 to <16 x i16>*
  %9234 = load <16 x i16>, <16 x i16>* %9233, align 2, !tbaa !396
  %9235 = getelementptr inbounds i16, i16* %9210, i64 -29
  %9236 = bitcast i16* %9235 to <16 x i16>*
  %9237 = load <16 x i16>, <16 x i16>* %9236, align 2, !tbaa !396
  %9238 = getelementptr inbounds i16, i16* %9210, i64 -13
  %9239 = bitcast i16* %9238 to <16 x i16>*
  %9240 = load <16 x i16>, <16 x i16>* %9239, align 2, !tbaa !396
  %9241 = add <16 x i16> %9219, %9213
  %9242 = add <16 x i16> %9241, %9225
  %9243 = add <16 x i16> %9242, %9231
  %9244 = add <16 x i16> %9243, %9237
  %9245 = add <16 x i16> %9222, %9216
  %9246 = add <16 x i16> %9245, %9228
  %9247 = add <16 x i16> %9246, %9234
  %9248 = add <16 x i16> %9247, %9240
  %9249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9244, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9248, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9251 = shufflevector <16 x i16> %9249, <16 x i16> %9250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9252 = lshr <32 x i16> %9251, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9253 = shufflevector <32 x i16> %9252, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9254 = zext i32 %.pre-phi3469 to i64
  %9255 = mul nsw i64 %97, %9254
  %9256 = add nsw i64 %99, %9255
  %9257 = getelementptr inbounds i16, i16* %blur_x, i64 %9256
  %9258 = getelementptr inbounds i16, i16* %9257, i64 -32
  %9259 = bitcast i16* %9258 to <16 x i16>*
  store <16 x i16> %9253, <16 x i16>* %9259, align 2, !tbaa !399
  %9260 = shufflevector <32 x i16> %9252, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9261 = getelementptr inbounds i16, i16* %9257, i64 -16
  %9262 = bitcast i16* %9261 to <16 x i16>*
  store <16 x i16> %9260, <16 x i16>* %9262, align 2, !tbaa !399
  %9263 = zext i32 %.pre-phi3453 to i64
  %9264 = mul nsw i64 %9263, %112
  %9265 = add nsw i64 %9264, %94
  %9266 = getelementptr inbounds i16, i16* %blur_x, i64 %9265
  %9267 = getelementptr inbounds i16, i16* %9266, i64 -32
  %9268 = bitcast i16* %9267 to <16 x i16>*
  %9269 = load <16 x i16>, <16 x i16>* %9268, align 2, !tbaa !399
  %9270 = getelementptr inbounds i16, i16* %9266, i64 -16
  %9271 = bitcast i16* %9270 to <16 x i16>*
  %9272 = load <16 x i16>, <16 x i16>* %9271, align 2, !tbaa !399
  %9273 = zext i32 %.pre-phi3449 to i64
  %9274 = mul nsw i64 %9273, %112
  %9275 = add nsw i64 %9274, %94
  %9276 = getelementptr inbounds i16, i16* %blur_x, i64 %9275
  %9277 = getelementptr inbounds i16, i16* %9276, i64 -32
  %9278 = bitcast i16* %9277 to <16 x i16>*
  %9279 = load <16 x i16>, <16 x i16>* %9278, align 2, !tbaa !399
  %9280 = getelementptr inbounds i16, i16* %9276, i64 -16
  %9281 = bitcast i16* %9280 to <16 x i16>*
  %9282 = load <16 x i16>, <16 x i16>* %9281, align 2, !tbaa !399
  %9283 = zext i32 %.pre-phi3457 to i64
  %9284 = mul nsw i64 %9283, %112
  %9285 = add nsw i64 %9284, %94
  %9286 = getelementptr inbounds i16, i16* %blur_x, i64 %9285
  %9287 = getelementptr inbounds i16, i16* %9286, i64 -32
  %9288 = bitcast i16* %9287 to <16 x i16>*
  %9289 = load <16 x i16>, <16 x i16>* %9288, align 2, !tbaa !399
  %9290 = getelementptr inbounds i16, i16* %9286, i64 -16
  %9291 = bitcast i16* %9290 to <16 x i16>*
  %9292 = load <16 x i16>, <16 x i16>* %9291, align 2, !tbaa !399
  %9293 = mul nsw i64 %9254, %112
  %9294 = add nsw i64 %9293, %94
  %9295 = getelementptr inbounds i16, i16* %blur_x, i64 %9294
  %9296 = getelementptr inbounds i16, i16* %9295, i64 -32
  %9297 = bitcast i16* %9296 to <16 x i16>*
  %9298 = load <16 x i16>, <16 x i16>* %9297, align 2, !tbaa !399
  %9299 = getelementptr inbounds i16, i16* %9295, i64 -16
  %9300 = bitcast i16* %9299 to <16 x i16>*
  %9301 = load <16 x i16>, <16 x i16>* %9300, align 2, !tbaa !399
  %9302 = zext i32 %.pre-phi3463 to i64
  %9303 = mul nsw i64 %9302, %112
  %9304 = add nsw i64 %9303, %94
  %9305 = getelementptr inbounds i16, i16* %blur_x, i64 %9304
  %9306 = getelementptr inbounds i16, i16* %9305, i64 -32
  %9307 = bitcast i16* %9306 to <16 x i16>*
  %9308 = load <16 x i16>, <16 x i16>* %9307, align 2, !tbaa !399
  %9309 = getelementptr inbounds i16, i16* %9305, i64 -16
  %9310 = bitcast i16* %9309 to <16 x i16>*
  %9311 = load <16 x i16>, <16 x i16>* %9310, align 2, !tbaa !399
  %9312 = add <16 x i16> %9279, %9269
  %9313 = add <16 x i16> %9312, %9289
  %9314 = add <16 x i16> %9313, %9298
  %9315 = add <16 x i16> %9314, %9308
  %9316 = add <16 x i16> %9282, %9272
  %9317 = add <16 x i16> %9316, %9292
  %9318 = add <16 x i16> %9317, %9301
  %9319 = add <16 x i16> %9318, %9311
  %9320 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9315, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9321 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9319, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9322 = shufflevector <16 x i16> %9320, <16 x i16> %9321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9323 = lshr <32 x i16> %9322, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9324 = shufflevector <32 x i16> %9323, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9325 = sext i32 %a26 to i64
  %9326 = add nsw i64 %9325, 18
  %9327 = mul nsw i64 %9326, %113
  %9328 = add nsw i64 %115, %9327
  %9329 = getelementptr inbounds i16, i16* %66, i64 %9328
  %9330 = getelementptr inbounds i16, i16* %9329, i64 -32
  %9331 = bitcast i16* %9330 to <16 x i16>*
  store <16 x i16> %9324, <16 x i16>* %9331, align 2, !tbaa !401
  %9332 = shufflevector <32 x i16> %9323, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9333 = getelementptr inbounds i16, i16* %9329, i64 -16
  %9334 = bitcast i16* %9333 to <16 x i16>*
  store <16 x i16> %9332, <16 x i16>* %9334, align 2, !tbaa !401
  br label %after_bb487

"for blur_y.s0.x.x.rebased492":                   ; preds = %"for blur_y.s0.x.x.rebased492.preheader", %"consume blur_x499"
  %indvars.iv3313 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased492.preheader" ], [ %indvars.iv.next3314, %"consume blur_x499" ]
  %9335 = add nsw i64 %indvars.iv3313, %101
  %9336 = icmp slt i64 %9335, 1
  %9337 = trunc i64 %9335 to i32
  %9338 = shl nsw i32 %9337, 5
  %9339 = icmp sgt i32 %4, %9338
  %9340 = or i1 %9336, %9339
  br i1 %9340, label %"produce blur_x498", label %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge"

"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased492"
  %.pre3506 = shl nsw i64 %9335, 5
  br label %"consume blur_x499"

"end for blur_y.s0.x.x.rebased493":               ; preds = %"consume blur_x499", %after_bb487
  br i1 %102, label %"for blur_y.s0.x.x.rebased500.preheader", label %"end for blur_y.s0.x.x.rebased501", !prof !386

"for blur_y.s0.x.x.rebased500.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased493"
  %9341 = sext i32 %t1738 to i64
  %9342 = zext i32 %.pre-phi3453 to i64
  %9343 = mul nsw i64 %9342, %112
  %9344 = sub nsw i64 %9343, %96
  %9345 = zext i32 %.pre-phi3449 to i64
  %9346 = mul nsw i64 %9345, %112
  %9347 = sub nsw i64 %9346, %96
  %9348 = zext i32 %.pre-phi3457 to i64
  %9349 = mul nsw i64 %9348, %112
  %9350 = sub nsw i64 %9349, %96
  %9351 = zext i32 %.pre-phi3469 to i64
  %9352 = mul nsw i64 %9351, %112
  %9353 = sub nsw i64 %9352, %96
  %9354 = zext i32 %.pre-phi3463 to i64
  %9355 = mul nsw i64 %9354, %112
  %9356 = sub nsw i64 %9355, %96
  %9357 = sext i32 %a26 to i64
  %9358 = add nsw i64 %9357, 18
  %9359 = mul nsw i64 %9358, %113
  %9360 = add nsw i64 %9359, %116
  br label %"for blur_y.s0.x.x.rebased500"

"produce blur_x498":                              ; preds = %"for blur_y.s0.x.x.rebased492"
  %t1000 = add nsw i32 %9338, %t1993
  %9361 = sext i32 %t1000 to i64
  %9362 = getelementptr inbounds i16, i16* %read_input, i64 %9361
  %9363 = getelementptr inbounds i16, i16* %9362, i64 1
  %9364 = bitcast i16* %9363 to <16 x i16>*
  %9365 = load <16 x i16>, <16 x i16>* %9364, align 2, !tbaa !396
  %9366 = getelementptr inbounds i16, i16* %9362, i64 17
  %9367 = bitcast i16* %9366 to <16 x i16>*
  %9368 = load <16 x i16>, <16 x i16>* %9367, align 2, !tbaa !396
  %9369 = bitcast i16* %9362 to <16 x i16>*
  %9370 = load <16 x i16>, <16 x i16>* %9369, align 2, !tbaa !396
  %9371 = getelementptr inbounds i16, i16* %9362, i64 16
  %9372 = bitcast i16* %9371 to <16 x i16>*
  %9373 = load <16 x i16>, <16 x i16>* %9372, align 2, !tbaa !396
  %9374 = getelementptr inbounds i16, i16* %9362, i64 2
  %9375 = bitcast i16* %9374 to <16 x i16>*
  %9376 = load <16 x i16>, <16 x i16>* %9375, align 2, !tbaa !396
  %9377 = getelementptr inbounds i16, i16* %9362, i64 18
  %9378 = bitcast i16* %9377 to <16 x i16>*
  %9379 = load <16 x i16>, <16 x i16>* %9378, align 2, !tbaa !396
  %9380 = getelementptr inbounds i16, i16* %9362, i64 4
  %9381 = bitcast i16* %9380 to <16 x i16>*
  %9382 = load <16 x i16>, <16 x i16>* %9381, align 2, !tbaa !396
  %9383 = getelementptr inbounds i16, i16* %9362, i64 20
  %9384 = bitcast i16* %9383 to <16 x i16>*
  %9385 = load <16 x i16>, <16 x i16>* %9384, align 2, !tbaa !396
  %9386 = getelementptr inbounds i16, i16* %9362, i64 3
  %9387 = bitcast i16* %9386 to <16 x i16>*
  %9388 = load <16 x i16>, <16 x i16>* %9387, align 2, !tbaa !396
  %9389 = getelementptr inbounds i16, i16* %9362, i64 19
  %9390 = bitcast i16* %9389 to <16 x i16>*
  %9391 = load <16 x i16>, <16 x i16>* %9390, align 2, !tbaa !396
  %9392 = add <16 x i16> %9370, %9365
  %9393 = add <16 x i16> %9392, %9376
  %9394 = add <16 x i16> %9393, %9382
  %9395 = add <16 x i16> %9394, %9388
  %9396 = add <16 x i16> %9373, %9368
  %9397 = add <16 x i16> %9396, %9379
  %9398 = add <16 x i16> %9397, %9385
  %9399 = add <16 x i16> %9398, %9391
  %9400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9395, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9399, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9402 = shufflevector <16 x i16> %9400, <16 x i16> %9401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9403 = lshr <32 x i16> %9402, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9404 = shufflevector <32 x i16> %9403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9405 = shl nsw i64 %9335, 5
  %9406 = add nsw i64 %9405, %9190
  %9407 = getelementptr inbounds i16, i16* %blur_x, i64 %9406
  %9408 = bitcast i16* %9407 to <16 x i16>*
  store <16 x i16> %9404, <16 x i16>* %9408, align 2, !tbaa !399
  %9409 = shufflevector <32 x i16> %9403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9410 = getelementptr inbounds i16, i16* %9407, i64 16
  %9411 = bitcast i16* %9410 to <16 x i16>*
  store <16 x i16> %9409, <16 x i16>* %9411, align 2, !tbaa !399
  br label %"consume blur_x499"

"consume blur_x499":                              ; preds = %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge", %"produce blur_x498"
  %.pre-phi3507 = phi i64 [ %.pre3506, %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge" ], [ %9405, %"produce blur_x498" ]
  %9412 = add nsw i64 %9193, %.pre-phi3507
  %9413 = getelementptr inbounds i16, i16* %blur_x, i64 %9412
  %9414 = bitcast i16* %9413 to <16 x i16>*
  %9415 = load <16 x i16>, <16 x i16>* %9414, align 2, !tbaa !399
  %9416 = getelementptr inbounds i16, i16* %9413, i64 16
  %9417 = bitcast i16* %9416 to <16 x i16>*
  %9418 = load <16 x i16>, <16 x i16>* %9417, align 2, !tbaa !399
  %9419 = add nsw i64 %9196, %.pre-phi3507
  %9420 = getelementptr inbounds i16, i16* %blur_x, i64 %9419
  %9421 = bitcast i16* %9420 to <16 x i16>*
  %9422 = load <16 x i16>, <16 x i16>* %9421, align 2, !tbaa !399
  %9423 = getelementptr inbounds i16, i16* %9420, i64 16
  %9424 = bitcast i16* %9423 to <16 x i16>*
  %9425 = load <16 x i16>, <16 x i16>* %9424, align 2, !tbaa !399
  %9426 = add nsw i64 %9199, %.pre-phi3507
  %9427 = getelementptr inbounds i16, i16* %blur_x, i64 %9426
  %9428 = bitcast i16* %9427 to <16 x i16>*
  %9429 = load <16 x i16>, <16 x i16>* %9428, align 2, !tbaa !399
  %9430 = getelementptr inbounds i16, i16* %9427, i64 16
  %9431 = bitcast i16* %9430 to <16 x i16>*
  %9432 = load <16 x i16>, <16 x i16>* %9431, align 2, !tbaa !399
  %9433 = add nsw i64 %9202, %.pre-phi3507
  %9434 = getelementptr inbounds i16, i16* %blur_x, i64 %9433
  %9435 = bitcast i16* %9434 to <16 x i16>*
  %9436 = load <16 x i16>, <16 x i16>* %9435, align 2, !tbaa !399
  %9437 = getelementptr inbounds i16, i16* %9434, i64 16
  %9438 = bitcast i16* %9437 to <16 x i16>*
  %9439 = load <16 x i16>, <16 x i16>* %9438, align 2, !tbaa !399
  %9440 = add nsw i64 %9205, %.pre-phi3507
  %9441 = getelementptr inbounds i16, i16* %blur_x, i64 %9440
  %9442 = bitcast i16* %9441 to <16 x i16>*
  %9443 = load <16 x i16>, <16 x i16>* %9442, align 2, !tbaa !399
  %9444 = getelementptr inbounds i16, i16* %9441, i64 16
  %9445 = bitcast i16* %9444 to <16 x i16>*
  %9446 = load <16 x i16>, <16 x i16>* %9445, align 2, !tbaa !399
  %9447 = add <16 x i16> %9422, %9415
  %9448 = add <16 x i16> %9447, %9429
  %9449 = add <16 x i16> %9448, %9436
  %9450 = add <16 x i16> %9449, %9443
  %9451 = add <16 x i16> %9425, %9418
  %9452 = add <16 x i16> %9451, %9432
  %9453 = add <16 x i16> %9452, %9439
  %9454 = add <16 x i16> %9453, %9446
  %9455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9450, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9454, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9457 = shufflevector <16 x i16> %9455, <16 x i16> %9456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9458 = lshr <32 x i16> %9457, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9459 = shufflevector <32 x i16> %9458, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9460 = add nsw i64 %9209, %.pre-phi3507
  %9461 = getelementptr inbounds i16, i16* %66, i64 %9460
  %9462 = bitcast i16* %9461 to <16 x i16>*
  store <16 x i16> %9459, <16 x i16>* %9462, align 2, !tbaa !401
  %9463 = shufflevector <32 x i16> %9458, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9464 = getelementptr inbounds i16, i16* %9461, i64 16
  %9465 = bitcast i16* %9464 to <16 x i16>*
  store <16 x i16> %9463, <16 x i16>* %9465, align 2, !tbaa !401
  %indvars.iv.next3314 = add nuw nsw i64 %indvars.iv3313, 1
  %.not2721 = icmp eq i64 %indvars.iv.next3314, %184
  br i1 %.not2721, label %"end for blur_y.s0.x.x.rebased493", label %"for blur_y.s0.x.x.rebased492"

"for blur_y.s0.x.x.rebased500":                   ; preds = %"for blur_y.s0.x.x.rebased500.preheader", %"consume blur_x508"
  %blur_y.s0.x.x.rebased502 = phi i32 [ %9578, %"consume blur_x508" ], [ 0, %"for blur_y.s0.x.x.rebased500.preheader" ]
  %9466 = add nsw i32 %blur_y.s0.x.x.rebased502, %t1626
  %a231 = shl nsw i32 %9466, 5
  %9467 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %9467, i32 %a231, i32 %a14
  %9468 = icmp slt i32 %9466, 1
  %9469 = icmp sgt i32 %4, %a231
  %9470 = or i1 %9468, %9469
  br i1 %9470, label %"produce blur_x506", label %"consume blur_x508"

"end for blur_y.s0.x.x.rebased501":               ; preds = %"consume blur_x508", %"end for blur_y.s0.x.x.rebased493"
  br i1 %34, label %"produce blur_x512", label %after_bb509

"produce blur_x506":                              ; preds = %"for blur_y.s0.x.x.rebased500"
  %9471 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s507 = select i1 %9471, i32 %b237, i32 %4
  %t1005 = add nsw i32 %blur_x.s0.x.v1.base.s507, %t1993
  %9472 = sext i32 %t1005 to i64
  %9473 = getelementptr inbounds i16, i16* %read_input, i64 %9472
  %9474 = getelementptr inbounds i16, i16* %9473, i64 1
  %9475 = bitcast i16* %9474 to <16 x i16>*
  %9476 = load <16 x i16>, <16 x i16>* %9475, align 2, !tbaa !396
  %9477 = getelementptr inbounds i16, i16* %9473, i64 17
  %9478 = bitcast i16* %9477 to <16 x i16>*
  %9479 = load <16 x i16>, <16 x i16>* %9478, align 2, !tbaa !396
  %9480 = bitcast i16* %9473 to <16 x i16>*
  %9481 = load <16 x i16>, <16 x i16>* %9480, align 2, !tbaa !396
  %9482 = getelementptr inbounds i16, i16* %9473, i64 16
  %9483 = bitcast i16* %9482 to <16 x i16>*
  %9484 = load <16 x i16>, <16 x i16>* %9483, align 2, !tbaa !396
  %9485 = getelementptr inbounds i16, i16* %9473, i64 2
  %9486 = bitcast i16* %9485 to <16 x i16>*
  %9487 = load <16 x i16>, <16 x i16>* %9486, align 2, !tbaa !396
  %9488 = getelementptr inbounds i16, i16* %9473, i64 18
  %9489 = bitcast i16* %9488 to <16 x i16>*
  %9490 = load <16 x i16>, <16 x i16>* %9489, align 2, !tbaa !396
  %9491 = getelementptr inbounds i16, i16* %9473, i64 4
  %9492 = bitcast i16* %9491 to <16 x i16>*
  %9493 = load <16 x i16>, <16 x i16>* %9492, align 2, !tbaa !396
  %9494 = getelementptr inbounds i16, i16* %9473, i64 20
  %9495 = bitcast i16* %9494 to <16 x i16>*
  %9496 = load <16 x i16>, <16 x i16>* %9495, align 2, !tbaa !396
  %9497 = getelementptr inbounds i16, i16* %9473, i64 3
  %9498 = bitcast i16* %9497 to <16 x i16>*
  %9499 = load <16 x i16>, <16 x i16>* %9498, align 2, !tbaa !396
  %9500 = getelementptr inbounds i16, i16* %9473, i64 19
  %9501 = bitcast i16* %9500 to <16 x i16>*
  %9502 = load <16 x i16>, <16 x i16>* %9501, align 2, !tbaa !396
  %9503 = add <16 x i16> %9481, %9476
  %9504 = add <16 x i16> %9503, %9487
  %9505 = add <16 x i16> %9504, %9493
  %9506 = add <16 x i16> %9505, %9499
  %9507 = add <16 x i16> %9484, %9479
  %9508 = add <16 x i16> %9507, %9490
  %9509 = add <16 x i16> %9508, %9496
  %9510 = add <16 x i16> %9509, %9502
  %9511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9506, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9510, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9513 = shufflevector <16 x i16> %9511, <16 x i16> %9512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9514 = lshr <32 x i16> %9513, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9515 = shufflevector <32 x i16> %9514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9516 = sext i32 %blur_x.s0.x.v1.base.s507 to i64
  %9517 = add nsw i64 %9516, %9341
  %9518 = getelementptr inbounds i16, i16* %blur_x, i64 %9517
  %9519 = bitcast i16* %9518 to <16 x i16>*
  store <16 x i16> %9515, <16 x i16>* %9519, align 2, !tbaa !399
  %9520 = shufflevector <32 x i16> %9514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9521 = getelementptr inbounds i16, i16* %9518, i64 16
  %9522 = bitcast i16* %9521 to <16 x i16>*
  store <16 x i16> %9520, <16 x i16>* %9522, align 2, !tbaa !399
  br label %"consume blur_x508"

"consume blur_x508":                              ; preds = %"for blur_y.s0.x.x.rebased500", %"produce blur_x506"
  %9523 = sext i32 %b237 to i64
  %9524 = add nsw i64 %9344, %9523
  %9525 = getelementptr inbounds i16, i16* %blur_x, i64 %9524
  %9526 = bitcast i16* %9525 to <16 x i16>*
  %9527 = load <16 x i16>, <16 x i16>* %9526, align 2, !tbaa !399
  %9528 = getelementptr inbounds i16, i16* %9525, i64 16
  %9529 = bitcast i16* %9528 to <16 x i16>*
  %9530 = load <16 x i16>, <16 x i16>* %9529, align 2, !tbaa !399
  %9531 = add nsw i64 %9347, %9523
  %9532 = getelementptr inbounds i16, i16* %blur_x, i64 %9531
  %9533 = bitcast i16* %9532 to <16 x i16>*
  %9534 = load <16 x i16>, <16 x i16>* %9533, align 2, !tbaa !399
  %9535 = getelementptr inbounds i16, i16* %9532, i64 16
  %9536 = bitcast i16* %9535 to <16 x i16>*
  %9537 = load <16 x i16>, <16 x i16>* %9536, align 2, !tbaa !399
  %9538 = add nsw i64 %9350, %9523
  %9539 = getelementptr inbounds i16, i16* %blur_x, i64 %9538
  %9540 = bitcast i16* %9539 to <16 x i16>*
  %9541 = load <16 x i16>, <16 x i16>* %9540, align 2, !tbaa !399
  %9542 = getelementptr inbounds i16, i16* %9539, i64 16
  %9543 = bitcast i16* %9542 to <16 x i16>*
  %9544 = load <16 x i16>, <16 x i16>* %9543, align 2, !tbaa !399
  %9545 = add nsw i64 %9353, %9523
  %9546 = getelementptr inbounds i16, i16* %blur_x, i64 %9545
  %9547 = bitcast i16* %9546 to <16 x i16>*
  %9548 = load <16 x i16>, <16 x i16>* %9547, align 2, !tbaa !399
  %9549 = getelementptr inbounds i16, i16* %9546, i64 16
  %9550 = bitcast i16* %9549 to <16 x i16>*
  %9551 = load <16 x i16>, <16 x i16>* %9550, align 2, !tbaa !399
  %9552 = add nsw i64 %9356, %9523
  %9553 = getelementptr inbounds i16, i16* %blur_x, i64 %9552
  %9554 = bitcast i16* %9553 to <16 x i16>*
  %9555 = load <16 x i16>, <16 x i16>* %9554, align 2, !tbaa !399
  %9556 = getelementptr inbounds i16, i16* %9553, i64 16
  %9557 = bitcast i16* %9556 to <16 x i16>*
  %9558 = load <16 x i16>, <16 x i16>* %9557, align 2, !tbaa !399
  %9559 = add <16 x i16> %9534, %9527
  %9560 = add <16 x i16> %9559, %9541
  %9561 = add <16 x i16> %9560, %9548
  %9562 = add <16 x i16> %9561, %9555
  %9563 = add <16 x i16> %9537, %9530
  %9564 = add <16 x i16> %9563, %9544
  %9565 = add <16 x i16> %9564, %9551
  %9566 = add <16 x i16> %9565, %9558
  %9567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9562, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9568 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9566, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9569 = shufflevector <16 x i16> %9567, <16 x i16> %9568, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9570 = lshr <32 x i16> %9569, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9571 = shufflevector <32 x i16> %9570, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9572 = add nsw i64 %9360, %9523
  %9573 = getelementptr inbounds i16, i16* %66, i64 %9572
  %9574 = bitcast i16* %9573 to <16 x i16>*
  store <16 x i16> %9571, <16 x i16>* %9574, align 2, !tbaa !401
  %9575 = shufflevector <32 x i16> %9570, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9576 = getelementptr inbounds i16, i16* %9573, i64 16
  %9577 = bitcast i16* %9576 to <16 x i16>*
  store <16 x i16> %9575, <16 x i16>* %9577, align 2, !tbaa !401
  %9578 = add nuw nsw i32 %blur_y.s0.x.x.rebased502, 1
  %.not2720 = icmp eq i32 %9578, %t1683
  br i1 %.not2720, label %"end for blur_y.s0.x.x.rebased501", label %"for blur_y.s0.x.x.rebased500"

after_bb509:                                      ; preds = %"end for blur_y.s0.x.x.rebased501", %"produce blur_x512"
  br i1 %100, label %"for blur_y.s0.x.x.rebased514.preheader", label %"end for blur_y.s0.x.x.rebased515", !prof !386

"for blur_y.s0.x.x.rebased514.preheader":         ; preds = %after_bb509
  %9579 = sext i32 %t1754 to i64
  %9580 = zext i32 %.pre-phi3457 to i64
  %9581 = mul nsw i64 %9580, %112
  %9582 = sub nsw i64 %9581, %96
  %9583 = zext i32 %.pre-phi3453 to i64
  %9584 = mul nsw i64 %9583, %112
  %9585 = sub nsw i64 %9584, %96
  %9586 = zext i32 %.pre-phi3463 to i64
  %9587 = mul nsw i64 %9586, %112
  %9588 = sub nsw i64 %9587, %96
  %9589 = zext i32 %.pre-phi3475 to i64
  %9590 = mul nsw i64 %9589, %112
  %9591 = sub nsw i64 %9590, %96
  %9592 = zext i32 %.pre-phi3469 to i64
  %9593 = mul nsw i64 %9592, %112
  %9594 = sub nsw i64 %9593, %96
  %9595 = sext i32 %a26 to i64
  %9596 = add nsw i64 %9595, 19
  %9597 = mul nsw i64 %9596, %113
  %9598 = add nsw i64 %9597, %116
  br label %"for blur_y.s0.x.x.rebased514"

"produce blur_x512":                              ; preds = %"end for blur_y.s0.x.x.rebased501"
  %9599 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %9600 = getelementptr inbounds i16, i16* %9599, i64 -31
  %9601 = bitcast i16* %9600 to <16 x i16>*
  %9602 = load <16 x i16>, <16 x i16>* %9601, align 2, !tbaa !396
  %9603 = getelementptr inbounds i16, i16* %9599, i64 -15
  %9604 = bitcast i16* %9603 to <16 x i16>*
  %9605 = load <16 x i16>, <16 x i16>* %9604, align 2, !tbaa !396
  %9606 = getelementptr inbounds i16, i16* %9599, i64 -32
  %9607 = bitcast i16* %9606 to <16 x i16>*
  %9608 = load <16 x i16>, <16 x i16>* %9607, align 2, !tbaa !396
  %9609 = getelementptr inbounds i16, i16* %9599, i64 -16
  %9610 = bitcast i16* %9609 to <16 x i16>*
  %9611 = load <16 x i16>, <16 x i16>* %9610, align 2, !tbaa !396
  %9612 = getelementptr inbounds i16, i16* %9599, i64 -30
  %9613 = bitcast i16* %9612 to <16 x i16>*
  %9614 = load <16 x i16>, <16 x i16>* %9613, align 2, !tbaa !396
  %9615 = getelementptr inbounds i16, i16* %9599, i64 -14
  %9616 = bitcast i16* %9615 to <16 x i16>*
  %9617 = load <16 x i16>, <16 x i16>* %9616, align 2, !tbaa !396
  %9618 = getelementptr inbounds i16, i16* %9599, i64 -28
  %9619 = bitcast i16* %9618 to <16 x i16>*
  %9620 = load <16 x i16>, <16 x i16>* %9619, align 2, !tbaa !396
  %9621 = getelementptr inbounds i16, i16* %9599, i64 -12
  %9622 = bitcast i16* %9621 to <16 x i16>*
  %9623 = load <16 x i16>, <16 x i16>* %9622, align 2, !tbaa !396
  %9624 = getelementptr inbounds i16, i16* %9599, i64 -29
  %9625 = bitcast i16* %9624 to <16 x i16>*
  %9626 = load <16 x i16>, <16 x i16>* %9625, align 2, !tbaa !396
  %9627 = getelementptr inbounds i16, i16* %9599, i64 -13
  %9628 = bitcast i16* %9627 to <16 x i16>*
  %9629 = load <16 x i16>, <16 x i16>* %9628, align 2, !tbaa !396
  %9630 = add <16 x i16> %9608, %9602
  %9631 = add <16 x i16> %9630, %9614
  %9632 = add <16 x i16> %9631, %9620
  %9633 = add <16 x i16> %9632, %9626
  %9634 = add <16 x i16> %9611, %9605
  %9635 = add <16 x i16> %9634, %9617
  %9636 = add <16 x i16> %9635, %9623
  %9637 = add <16 x i16> %9636, %9629
  %9638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9633, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9639 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9637, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9640 = shufflevector <16 x i16> %9638, <16 x i16> %9639, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9641 = lshr <32 x i16> %9640, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9642 = shufflevector <32 x i16> %9641, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9643 = zext i32 %.pre-phi3475 to i64
  %9644 = mul nsw i64 %97, %9643
  %9645 = add nsw i64 %99, %9644
  %9646 = getelementptr inbounds i16, i16* %blur_x, i64 %9645
  %9647 = getelementptr inbounds i16, i16* %9646, i64 -32
  %9648 = bitcast i16* %9647 to <16 x i16>*
  store <16 x i16> %9642, <16 x i16>* %9648, align 2, !tbaa !399
  %9649 = shufflevector <32 x i16> %9641, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9650 = getelementptr inbounds i16, i16* %9646, i64 -16
  %9651 = bitcast i16* %9650 to <16 x i16>*
  store <16 x i16> %9649, <16 x i16>* %9651, align 2, !tbaa !399
  %9652 = zext i32 %.pre-phi3457 to i64
  %9653 = mul nsw i64 %9652, %112
  %9654 = add nsw i64 %9653, %94
  %9655 = getelementptr inbounds i16, i16* %blur_x, i64 %9654
  %9656 = getelementptr inbounds i16, i16* %9655, i64 -32
  %9657 = bitcast i16* %9656 to <16 x i16>*
  %9658 = load <16 x i16>, <16 x i16>* %9657, align 2, !tbaa !399
  %9659 = getelementptr inbounds i16, i16* %9655, i64 -16
  %9660 = bitcast i16* %9659 to <16 x i16>*
  %9661 = load <16 x i16>, <16 x i16>* %9660, align 2, !tbaa !399
  %9662 = zext i32 %.pre-phi3453 to i64
  %9663 = mul nsw i64 %9662, %112
  %9664 = add nsw i64 %9663, %94
  %9665 = getelementptr inbounds i16, i16* %blur_x, i64 %9664
  %9666 = getelementptr inbounds i16, i16* %9665, i64 -32
  %9667 = bitcast i16* %9666 to <16 x i16>*
  %9668 = load <16 x i16>, <16 x i16>* %9667, align 2, !tbaa !399
  %9669 = getelementptr inbounds i16, i16* %9665, i64 -16
  %9670 = bitcast i16* %9669 to <16 x i16>*
  %9671 = load <16 x i16>, <16 x i16>* %9670, align 2, !tbaa !399
  %9672 = zext i32 %.pre-phi3463 to i64
  %9673 = mul nsw i64 %9672, %112
  %9674 = add nsw i64 %9673, %94
  %9675 = getelementptr inbounds i16, i16* %blur_x, i64 %9674
  %9676 = getelementptr inbounds i16, i16* %9675, i64 -32
  %9677 = bitcast i16* %9676 to <16 x i16>*
  %9678 = load <16 x i16>, <16 x i16>* %9677, align 2, !tbaa !399
  %9679 = getelementptr inbounds i16, i16* %9675, i64 -16
  %9680 = bitcast i16* %9679 to <16 x i16>*
  %9681 = load <16 x i16>, <16 x i16>* %9680, align 2, !tbaa !399
  %9682 = mul nsw i64 %9643, %112
  %9683 = add nsw i64 %9682, %94
  %9684 = getelementptr inbounds i16, i16* %blur_x, i64 %9683
  %9685 = getelementptr inbounds i16, i16* %9684, i64 -32
  %9686 = bitcast i16* %9685 to <16 x i16>*
  %9687 = load <16 x i16>, <16 x i16>* %9686, align 2, !tbaa !399
  %9688 = getelementptr inbounds i16, i16* %9684, i64 -16
  %9689 = bitcast i16* %9688 to <16 x i16>*
  %9690 = load <16 x i16>, <16 x i16>* %9689, align 2, !tbaa !399
  %9691 = zext i32 %.pre-phi3469 to i64
  %9692 = mul nsw i64 %9691, %112
  %9693 = add nsw i64 %9692, %94
  %9694 = getelementptr inbounds i16, i16* %blur_x, i64 %9693
  %9695 = getelementptr inbounds i16, i16* %9694, i64 -32
  %9696 = bitcast i16* %9695 to <16 x i16>*
  %9697 = load <16 x i16>, <16 x i16>* %9696, align 2, !tbaa !399
  %9698 = getelementptr inbounds i16, i16* %9694, i64 -16
  %9699 = bitcast i16* %9698 to <16 x i16>*
  %9700 = load <16 x i16>, <16 x i16>* %9699, align 2, !tbaa !399
  %9701 = add <16 x i16> %9668, %9658
  %9702 = add <16 x i16> %9701, %9678
  %9703 = add <16 x i16> %9702, %9687
  %9704 = add <16 x i16> %9703, %9697
  %9705 = add <16 x i16> %9671, %9661
  %9706 = add <16 x i16> %9705, %9681
  %9707 = add <16 x i16> %9706, %9690
  %9708 = add <16 x i16> %9707, %9700
  %9709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9704, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9708, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9711 = shufflevector <16 x i16> %9709, <16 x i16> %9710, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9712 = lshr <32 x i16> %9711, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9713 = shufflevector <32 x i16> %9712, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9714 = sext i32 %a26 to i64
  %9715 = add nsw i64 %9714, 19
  %9716 = mul nsw i64 %9715, %113
  %9717 = add nsw i64 %115, %9716
  %9718 = getelementptr inbounds i16, i16* %66, i64 %9717
  %9719 = getelementptr inbounds i16, i16* %9718, i64 -32
  %9720 = bitcast i16* %9719 to <16 x i16>*
  store <16 x i16> %9713, <16 x i16>* %9720, align 2, !tbaa !401
  %9721 = shufflevector <32 x i16> %9712, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9722 = getelementptr inbounds i16, i16* %9718, i64 -16
  %9723 = bitcast i16* %9722 to <16 x i16>*
  store <16 x i16> %9721, <16 x i16>* %9723, align 2, !tbaa !401
  br label %after_bb509

"for blur_y.s0.x.x.rebased514":                   ; preds = %"for blur_y.s0.x.x.rebased514.preheader", %"consume blur_x521"
  %indvars.iv3316 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased514.preheader" ], [ %indvars.iv.next3317, %"consume blur_x521" ]
  %9724 = add nsw i64 %indvars.iv3316, %101
  %9725 = icmp slt i64 %9724, 1
  %9726 = trunc i64 %9724 to i32
  %9727 = shl nsw i32 %9726, 5
  %9728 = icmp sgt i32 %4, %9727
  %9729 = or i1 %9725, %9728
  br i1 %9729, label %"produce blur_x520", label %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge"

"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased514"
  %.pre3508 = shl nsw i64 %9724, 5
  br label %"consume blur_x521"

"end for blur_y.s0.x.x.rebased515":               ; preds = %"consume blur_x521", %after_bb509
  br i1 %102, label %"for blur_y.s0.x.x.rebased522.preheader", label %"end for blur_y.s0.x.x.rebased523", !prof !386

"for blur_y.s0.x.x.rebased522.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased515"
  %9730 = sext i32 %t1754 to i64
  %9731 = zext i32 %.pre-phi3457 to i64
  %9732 = mul nsw i64 %9731, %112
  %9733 = sub nsw i64 %9732, %96
  %9734 = zext i32 %.pre-phi3453 to i64
  %9735 = mul nsw i64 %9734, %112
  %9736 = sub nsw i64 %9735, %96
  %9737 = zext i32 %.pre-phi3463 to i64
  %9738 = mul nsw i64 %9737, %112
  %9739 = sub nsw i64 %9738, %96
  %9740 = zext i32 %.pre-phi3475 to i64
  %9741 = mul nsw i64 %9740, %112
  %9742 = sub nsw i64 %9741, %96
  %9743 = zext i32 %.pre-phi3469 to i64
  %9744 = mul nsw i64 %9743, %112
  %9745 = sub nsw i64 %9744, %96
  %9746 = sext i32 %a26 to i64
  %9747 = add nsw i64 %9746, 19
  %9748 = mul nsw i64 %9747, %113
  %9749 = add nsw i64 %9748, %116
  br label %"for blur_y.s0.x.x.rebased522"

"produce blur_x520":                              ; preds = %"for blur_y.s0.x.x.rebased514"
  %t1016 = add nsw i32 %9727, %t2009
  %9750 = sext i32 %t1016 to i64
  %9751 = getelementptr inbounds i16, i16* %read_input, i64 %9750
  %9752 = getelementptr inbounds i16, i16* %9751, i64 1
  %9753 = bitcast i16* %9752 to <16 x i16>*
  %9754 = load <16 x i16>, <16 x i16>* %9753, align 2, !tbaa !396
  %9755 = getelementptr inbounds i16, i16* %9751, i64 17
  %9756 = bitcast i16* %9755 to <16 x i16>*
  %9757 = load <16 x i16>, <16 x i16>* %9756, align 2, !tbaa !396
  %9758 = bitcast i16* %9751 to <16 x i16>*
  %9759 = load <16 x i16>, <16 x i16>* %9758, align 2, !tbaa !396
  %9760 = getelementptr inbounds i16, i16* %9751, i64 16
  %9761 = bitcast i16* %9760 to <16 x i16>*
  %9762 = load <16 x i16>, <16 x i16>* %9761, align 2, !tbaa !396
  %9763 = getelementptr inbounds i16, i16* %9751, i64 2
  %9764 = bitcast i16* %9763 to <16 x i16>*
  %9765 = load <16 x i16>, <16 x i16>* %9764, align 2, !tbaa !396
  %9766 = getelementptr inbounds i16, i16* %9751, i64 18
  %9767 = bitcast i16* %9766 to <16 x i16>*
  %9768 = load <16 x i16>, <16 x i16>* %9767, align 2, !tbaa !396
  %9769 = getelementptr inbounds i16, i16* %9751, i64 4
  %9770 = bitcast i16* %9769 to <16 x i16>*
  %9771 = load <16 x i16>, <16 x i16>* %9770, align 2, !tbaa !396
  %9772 = getelementptr inbounds i16, i16* %9751, i64 20
  %9773 = bitcast i16* %9772 to <16 x i16>*
  %9774 = load <16 x i16>, <16 x i16>* %9773, align 2, !tbaa !396
  %9775 = getelementptr inbounds i16, i16* %9751, i64 3
  %9776 = bitcast i16* %9775 to <16 x i16>*
  %9777 = load <16 x i16>, <16 x i16>* %9776, align 2, !tbaa !396
  %9778 = getelementptr inbounds i16, i16* %9751, i64 19
  %9779 = bitcast i16* %9778 to <16 x i16>*
  %9780 = load <16 x i16>, <16 x i16>* %9779, align 2, !tbaa !396
  %9781 = add <16 x i16> %9759, %9754
  %9782 = add <16 x i16> %9781, %9765
  %9783 = add <16 x i16> %9782, %9771
  %9784 = add <16 x i16> %9783, %9777
  %9785 = add <16 x i16> %9762, %9757
  %9786 = add <16 x i16> %9785, %9768
  %9787 = add <16 x i16> %9786, %9774
  %9788 = add <16 x i16> %9787, %9780
  %9789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9784, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9788, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9791 = shufflevector <16 x i16> %9789, <16 x i16> %9790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9792 = lshr <32 x i16> %9791, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9793 = shufflevector <32 x i16> %9792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9794 = shl nsw i64 %9724, 5
  %9795 = add nsw i64 %9794, %9579
  %9796 = getelementptr inbounds i16, i16* %blur_x, i64 %9795
  %9797 = bitcast i16* %9796 to <16 x i16>*
  store <16 x i16> %9793, <16 x i16>* %9797, align 2, !tbaa !399
  %9798 = shufflevector <32 x i16> %9792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9799 = getelementptr inbounds i16, i16* %9796, i64 16
  %9800 = bitcast i16* %9799 to <16 x i16>*
  store <16 x i16> %9798, <16 x i16>* %9800, align 2, !tbaa !399
  br label %"consume blur_x521"

"consume blur_x521":                              ; preds = %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge", %"produce blur_x520"
  %.pre-phi3509 = phi i64 [ %.pre3508, %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge" ], [ %9794, %"produce blur_x520" ]
  %9801 = add nsw i64 %9582, %.pre-phi3509
  %9802 = getelementptr inbounds i16, i16* %blur_x, i64 %9801
  %9803 = bitcast i16* %9802 to <16 x i16>*
  %9804 = load <16 x i16>, <16 x i16>* %9803, align 2, !tbaa !399
  %9805 = getelementptr inbounds i16, i16* %9802, i64 16
  %9806 = bitcast i16* %9805 to <16 x i16>*
  %9807 = load <16 x i16>, <16 x i16>* %9806, align 2, !tbaa !399
  %9808 = add nsw i64 %9585, %.pre-phi3509
  %9809 = getelementptr inbounds i16, i16* %blur_x, i64 %9808
  %9810 = bitcast i16* %9809 to <16 x i16>*
  %9811 = load <16 x i16>, <16 x i16>* %9810, align 2, !tbaa !399
  %9812 = getelementptr inbounds i16, i16* %9809, i64 16
  %9813 = bitcast i16* %9812 to <16 x i16>*
  %9814 = load <16 x i16>, <16 x i16>* %9813, align 2, !tbaa !399
  %9815 = add nsw i64 %9588, %.pre-phi3509
  %9816 = getelementptr inbounds i16, i16* %blur_x, i64 %9815
  %9817 = bitcast i16* %9816 to <16 x i16>*
  %9818 = load <16 x i16>, <16 x i16>* %9817, align 2, !tbaa !399
  %9819 = getelementptr inbounds i16, i16* %9816, i64 16
  %9820 = bitcast i16* %9819 to <16 x i16>*
  %9821 = load <16 x i16>, <16 x i16>* %9820, align 2, !tbaa !399
  %9822 = add nsw i64 %9591, %.pre-phi3509
  %9823 = getelementptr inbounds i16, i16* %blur_x, i64 %9822
  %9824 = bitcast i16* %9823 to <16 x i16>*
  %9825 = load <16 x i16>, <16 x i16>* %9824, align 2, !tbaa !399
  %9826 = getelementptr inbounds i16, i16* %9823, i64 16
  %9827 = bitcast i16* %9826 to <16 x i16>*
  %9828 = load <16 x i16>, <16 x i16>* %9827, align 2, !tbaa !399
  %9829 = add nsw i64 %9594, %.pre-phi3509
  %9830 = getelementptr inbounds i16, i16* %blur_x, i64 %9829
  %9831 = bitcast i16* %9830 to <16 x i16>*
  %9832 = load <16 x i16>, <16 x i16>* %9831, align 2, !tbaa !399
  %9833 = getelementptr inbounds i16, i16* %9830, i64 16
  %9834 = bitcast i16* %9833 to <16 x i16>*
  %9835 = load <16 x i16>, <16 x i16>* %9834, align 2, !tbaa !399
  %9836 = add <16 x i16> %9811, %9804
  %9837 = add <16 x i16> %9836, %9818
  %9838 = add <16 x i16> %9837, %9825
  %9839 = add <16 x i16> %9838, %9832
  %9840 = add <16 x i16> %9814, %9807
  %9841 = add <16 x i16> %9840, %9821
  %9842 = add <16 x i16> %9841, %9828
  %9843 = add <16 x i16> %9842, %9835
  %9844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9839, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9843, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9846 = shufflevector <16 x i16> %9844, <16 x i16> %9845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9847 = lshr <32 x i16> %9846, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9848 = shufflevector <32 x i16> %9847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9849 = add nsw i64 %9598, %.pre-phi3509
  %9850 = getelementptr inbounds i16, i16* %66, i64 %9849
  %9851 = bitcast i16* %9850 to <16 x i16>*
  store <16 x i16> %9848, <16 x i16>* %9851, align 2, !tbaa !401
  %9852 = shufflevector <32 x i16> %9847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9853 = getelementptr inbounds i16, i16* %9850, i64 16
  %9854 = bitcast i16* %9853 to <16 x i16>*
  store <16 x i16> %9852, <16 x i16>* %9854, align 2, !tbaa !401
  %indvars.iv.next3317 = add nuw nsw i64 %indvars.iv3316, 1
  %.not2719 = icmp eq i64 %indvars.iv.next3317, %184
  br i1 %.not2719, label %"end for blur_y.s0.x.x.rebased515", label %"for blur_y.s0.x.x.rebased514"

"for blur_y.s0.x.x.rebased522":                   ; preds = %"for blur_y.s0.x.x.rebased522.preheader", %"consume blur_x530"
  %blur_y.s0.x.x.rebased524 = phi i32 [ %9967, %"consume blur_x530" ], [ 0, %"for blur_y.s0.x.x.rebased522.preheader" ]
  %9855 = add nsw i32 %blur_y.s0.x.x.rebased524, %t1626
  %a238 = shl nsw i32 %9855, 5
  %9856 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %9856, i32 %a238, i32 %a14
  %9857 = icmp slt i32 %9855, 1
  %9858 = icmp sgt i32 %4, %a238
  %9859 = or i1 %9857, %9858
  br i1 %9859, label %"produce blur_x528", label %"consume blur_x530"

"end for blur_y.s0.x.x.rebased523":               ; preds = %"consume blur_x530", %"end for blur_y.s0.x.x.rebased515"
  br i1 %34, label %"produce blur_x534", label %after_bb531

"produce blur_x528":                              ; preds = %"for blur_y.s0.x.x.rebased522"
  %9860 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s529 = select i1 %9860, i32 %b244, i32 %4
  %t1021 = add nsw i32 %blur_x.s0.x.v1.base.s529, %t2009
  %9861 = sext i32 %t1021 to i64
  %9862 = getelementptr inbounds i16, i16* %read_input, i64 %9861
  %9863 = getelementptr inbounds i16, i16* %9862, i64 1
  %9864 = bitcast i16* %9863 to <16 x i16>*
  %9865 = load <16 x i16>, <16 x i16>* %9864, align 2, !tbaa !396
  %9866 = getelementptr inbounds i16, i16* %9862, i64 17
  %9867 = bitcast i16* %9866 to <16 x i16>*
  %9868 = load <16 x i16>, <16 x i16>* %9867, align 2, !tbaa !396
  %9869 = bitcast i16* %9862 to <16 x i16>*
  %9870 = load <16 x i16>, <16 x i16>* %9869, align 2, !tbaa !396
  %9871 = getelementptr inbounds i16, i16* %9862, i64 16
  %9872 = bitcast i16* %9871 to <16 x i16>*
  %9873 = load <16 x i16>, <16 x i16>* %9872, align 2, !tbaa !396
  %9874 = getelementptr inbounds i16, i16* %9862, i64 2
  %9875 = bitcast i16* %9874 to <16 x i16>*
  %9876 = load <16 x i16>, <16 x i16>* %9875, align 2, !tbaa !396
  %9877 = getelementptr inbounds i16, i16* %9862, i64 18
  %9878 = bitcast i16* %9877 to <16 x i16>*
  %9879 = load <16 x i16>, <16 x i16>* %9878, align 2, !tbaa !396
  %9880 = getelementptr inbounds i16, i16* %9862, i64 4
  %9881 = bitcast i16* %9880 to <16 x i16>*
  %9882 = load <16 x i16>, <16 x i16>* %9881, align 2, !tbaa !396
  %9883 = getelementptr inbounds i16, i16* %9862, i64 20
  %9884 = bitcast i16* %9883 to <16 x i16>*
  %9885 = load <16 x i16>, <16 x i16>* %9884, align 2, !tbaa !396
  %9886 = getelementptr inbounds i16, i16* %9862, i64 3
  %9887 = bitcast i16* %9886 to <16 x i16>*
  %9888 = load <16 x i16>, <16 x i16>* %9887, align 2, !tbaa !396
  %9889 = getelementptr inbounds i16, i16* %9862, i64 19
  %9890 = bitcast i16* %9889 to <16 x i16>*
  %9891 = load <16 x i16>, <16 x i16>* %9890, align 2, !tbaa !396
  %9892 = add <16 x i16> %9870, %9865
  %9893 = add <16 x i16> %9892, %9876
  %9894 = add <16 x i16> %9893, %9882
  %9895 = add <16 x i16> %9894, %9888
  %9896 = add <16 x i16> %9873, %9868
  %9897 = add <16 x i16> %9896, %9879
  %9898 = add <16 x i16> %9897, %9885
  %9899 = add <16 x i16> %9898, %9891
  %9900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9895, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9899, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9902 = shufflevector <16 x i16> %9900, <16 x i16> %9901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9903 = lshr <32 x i16> %9902, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9904 = shufflevector <32 x i16> %9903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9905 = sext i32 %blur_x.s0.x.v1.base.s529 to i64
  %9906 = add nsw i64 %9905, %9730
  %9907 = getelementptr inbounds i16, i16* %blur_x, i64 %9906
  %9908 = bitcast i16* %9907 to <16 x i16>*
  store <16 x i16> %9904, <16 x i16>* %9908, align 2, !tbaa !399
  %9909 = shufflevector <32 x i16> %9903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9910 = getelementptr inbounds i16, i16* %9907, i64 16
  %9911 = bitcast i16* %9910 to <16 x i16>*
  store <16 x i16> %9909, <16 x i16>* %9911, align 2, !tbaa !399
  br label %"consume blur_x530"

"consume blur_x530":                              ; preds = %"for blur_y.s0.x.x.rebased522", %"produce blur_x528"
  %9912 = sext i32 %b244 to i64
  %9913 = add nsw i64 %9733, %9912
  %9914 = getelementptr inbounds i16, i16* %blur_x, i64 %9913
  %9915 = bitcast i16* %9914 to <16 x i16>*
  %9916 = load <16 x i16>, <16 x i16>* %9915, align 2, !tbaa !399
  %9917 = getelementptr inbounds i16, i16* %9914, i64 16
  %9918 = bitcast i16* %9917 to <16 x i16>*
  %9919 = load <16 x i16>, <16 x i16>* %9918, align 2, !tbaa !399
  %9920 = add nsw i64 %9736, %9912
  %9921 = getelementptr inbounds i16, i16* %blur_x, i64 %9920
  %9922 = bitcast i16* %9921 to <16 x i16>*
  %9923 = load <16 x i16>, <16 x i16>* %9922, align 2, !tbaa !399
  %9924 = getelementptr inbounds i16, i16* %9921, i64 16
  %9925 = bitcast i16* %9924 to <16 x i16>*
  %9926 = load <16 x i16>, <16 x i16>* %9925, align 2, !tbaa !399
  %9927 = add nsw i64 %9739, %9912
  %9928 = getelementptr inbounds i16, i16* %blur_x, i64 %9927
  %9929 = bitcast i16* %9928 to <16 x i16>*
  %9930 = load <16 x i16>, <16 x i16>* %9929, align 2, !tbaa !399
  %9931 = getelementptr inbounds i16, i16* %9928, i64 16
  %9932 = bitcast i16* %9931 to <16 x i16>*
  %9933 = load <16 x i16>, <16 x i16>* %9932, align 2, !tbaa !399
  %9934 = add nsw i64 %9742, %9912
  %9935 = getelementptr inbounds i16, i16* %blur_x, i64 %9934
  %9936 = bitcast i16* %9935 to <16 x i16>*
  %9937 = load <16 x i16>, <16 x i16>* %9936, align 2, !tbaa !399
  %9938 = getelementptr inbounds i16, i16* %9935, i64 16
  %9939 = bitcast i16* %9938 to <16 x i16>*
  %9940 = load <16 x i16>, <16 x i16>* %9939, align 2, !tbaa !399
  %9941 = add nsw i64 %9745, %9912
  %9942 = getelementptr inbounds i16, i16* %blur_x, i64 %9941
  %9943 = bitcast i16* %9942 to <16 x i16>*
  %9944 = load <16 x i16>, <16 x i16>* %9943, align 2, !tbaa !399
  %9945 = getelementptr inbounds i16, i16* %9942, i64 16
  %9946 = bitcast i16* %9945 to <16 x i16>*
  %9947 = load <16 x i16>, <16 x i16>* %9946, align 2, !tbaa !399
  %9948 = add <16 x i16> %9923, %9916
  %9949 = add <16 x i16> %9948, %9930
  %9950 = add <16 x i16> %9949, %9937
  %9951 = add <16 x i16> %9950, %9944
  %9952 = add <16 x i16> %9926, %9919
  %9953 = add <16 x i16> %9952, %9933
  %9954 = add <16 x i16> %9953, %9940
  %9955 = add <16 x i16> %9954, %9947
  %9956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9951, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9955, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9958 = shufflevector <16 x i16> %9956, <16 x i16> %9957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9959 = lshr <32 x i16> %9958, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9960 = shufflevector <32 x i16> %9959, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9961 = add nsw i64 %9749, %9912
  %9962 = getelementptr inbounds i16, i16* %66, i64 %9961
  %9963 = bitcast i16* %9962 to <16 x i16>*
  store <16 x i16> %9960, <16 x i16>* %9963, align 2, !tbaa !401
  %9964 = shufflevector <32 x i16> %9959, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9965 = getelementptr inbounds i16, i16* %9962, i64 16
  %9966 = bitcast i16* %9965 to <16 x i16>*
  store <16 x i16> %9964, <16 x i16>* %9966, align 2, !tbaa !401
  %9967 = add nuw nsw i32 %blur_y.s0.x.x.rebased524, 1
  %.not2718 = icmp eq i32 %9967, %t1683
  br i1 %.not2718, label %"end for blur_y.s0.x.x.rebased523", label %"for blur_y.s0.x.x.rebased522"

after_bb531:                                      ; preds = %"end for blur_y.s0.x.x.rebased523", %"produce blur_x534"
  br i1 %100, label %"for blur_y.s0.x.x.rebased536.preheader", label %"end for blur_y.s0.x.x.rebased537", !prof !386

"for blur_y.s0.x.x.rebased536.preheader":         ; preds = %after_bb531
  %9968 = sext i32 %t1682 to i64
  %9969 = zext i32 %.pre-phi3463 to i64
  %9970 = mul nsw i64 %9969, %112
  %9971 = sub nsw i64 %9970, %96
  %9972 = zext i32 %.pre-phi3457 to i64
  %9973 = mul nsw i64 %9972, %112
  %9974 = sub nsw i64 %9973, %96
  %9975 = zext i32 %.pre-phi3469 to i64
  %9976 = mul nsw i64 %9975, %112
  %9977 = sub nsw i64 %9976, %96
  %9978 = zext i32 %.pre-phi to i64
  %9979 = mul nsw i64 %9978, %112
  %9980 = sub nsw i64 %9979, %96
  %9981 = zext i32 %.pre-phi3475 to i64
  %9982 = mul nsw i64 %9981, %112
  %9983 = sub nsw i64 %9982, %96
  %9984 = sext i32 %a26 to i64
  %9985 = add nsw i64 %9984, 20
  %9986 = mul nsw i64 %9985, %113
  %9987 = add nsw i64 %9986, %116
  br label %"for blur_y.s0.x.x.rebased536"

"produce blur_x534":                              ; preds = %"end for blur_y.s0.x.x.rebased523"
  %9988 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %9989 = getelementptr inbounds i16, i16* %9988, i64 -31
  %9990 = bitcast i16* %9989 to <16 x i16>*
  %9991 = load <16 x i16>, <16 x i16>* %9990, align 2, !tbaa !396
  %9992 = getelementptr inbounds i16, i16* %9988, i64 -15
  %9993 = bitcast i16* %9992 to <16 x i16>*
  %9994 = load <16 x i16>, <16 x i16>* %9993, align 2, !tbaa !396
  %9995 = getelementptr inbounds i16, i16* %9988, i64 -32
  %9996 = bitcast i16* %9995 to <16 x i16>*
  %9997 = load <16 x i16>, <16 x i16>* %9996, align 2, !tbaa !396
  %9998 = getelementptr inbounds i16, i16* %9988, i64 -16
  %9999 = bitcast i16* %9998 to <16 x i16>*
  %10000 = load <16 x i16>, <16 x i16>* %9999, align 2, !tbaa !396
  %10001 = getelementptr inbounds i16, i16* %9988, i64 -30
  %10002 = bitcast i16* %10001 to <16 x i16>*
  %10003 = load <16 x i16>, <16 x i16>* %10002, align 2, !tbaa !396
  %10004 = getelementptr inbounds i16, i16* %9988, i64 -14
  %10005 = bitcast i16* %10004 to <16 x i16>*
  %10006 = load <16 x i16>, <16 x i16>* %10005, align 2, !tbaa !396
  %10007 = getelementptr inbounds i16, i16* %9988, i64 -28
  %10008 = bitcast i16* %10007 to <16 x i16>*
  %10009 = load <16 x i16>, <16 x i16>* %10008, align 2, !tbaa !396
  %10010 = getelementptr inbounds i16, i16* %9988, i64 -12
  %10011 = bitcast i16* %10010 to <16 x i16>*
  %10012 = load <16 x i16>, <16 x i16>* %10011, align 2, !tbaa !396
  %10013 = getelementptr inbounds i16, i16* %9988, i64 -29
  %10014 = bitcast i16* %10013 to <16 x i16>*
  %10015 = load <16 x i16>, <16 x i16>* %10014, align 2, !tbaa !396
  %10016 = getelementptr inbounds i16, i16* %9988, i64 -13
  %10017 = bitcast i16* %10016 to <16 x i16>*
  %10018 = load <16 x i16>, <16 x i16>* %10017, align 2, !tbaa !396
  %10019 = add <16 x i16> %9997, %9991
  %10020 = add <16 x i16> %10019, %10003
  %10021 = add <16 x i16> %10020, %10009
  %10022 = add <16 x i16> %10021, %10015
  %10023 = add <16 x i16> %10000, %9994
  %10024 = add <16 x i16> %10023, %10006
  %10025 = add <16 x i16> %10024, %10012
  %10026 = add <16 x i16> %10025, %10018
  %10027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10022, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10028 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10026, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10029 = shufflevector <16 x i16> %10027, <16 x i16> %10028, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10030 = lshr <32 x i16> %10029, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10031 = shufflevector <32 x i16> %10030, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10032 = zext i32 %.pre-phi to i64
  %10033 = mul nsw i64 %97, %10032
  %10034 = add nsw i64 %99, %10033
  %10035 = getelementptr inbounds i16, i16* %blur_x, i64 %10034
  %10036 = getelementptr inbounds i16, i16* %10035, i64 -32
  %10037 = bitcast i16* %10036 to <16 x i16>*
  store <16 x i16> %10031, <16 x i16>* %10037, align 2, !tbaa !399
  %10038 = shufflevector <32 x i16> %10030, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10039 = getelementptr inbounds i16, i16* %10035, i64 -16
  %10040 = bitcast i16* %10039 to <16 x i16>*
  store <16 x i16> %10038, <16 x i16>* %10040, align 2, !tbaa !399
  %10041 = zext i32 %.pre-phi3463 to i64
  %10042 = mul nsw i64 %10041, %112
  %10043 = add nsw i64 %10042, %94
  %10044 = getelementptr inbounds i16, i16* %blur_x, i64 %10043
  %10045 = getelementptr inbounds i16, i16* %10044, i64 -32
  %10046 = bitcast i16* %10045 to <16 x i16>*
  %10047 = load <16 x i16>, <16 x i16>* %10046, align 2, !tbaa !399
  %10048 = getelementptr inbounds i16, i16* %10044, i64 -16
  %10049 = bitcast i16* %10048 to <16 x i16>*
  %10050 = load <16 x i16>, <16 x i16>* %10049, align 2, !tbaa !399
  %10051 = zext i32 %.pre-phi3457 to i64
  %10052 = mul nsw i64 %10051, %112
  %10053 = add nsw i64 %10052, %94
  %10054 = getelementptr inbounds i16, i16* %blur_x, i64 %10053
  %10055 = getelementptr inbounds i16, i16* %10054, i64 -32
  %10056 = bitcast i16* %10055 to <16 x i16>*
  %10057 = load <16 x i16>, <16 x i16>* %10056, align 2, !tbaa !399
  %10058 = getelementptr inbounds i16, i16* %10054, i64 -16
  %10059 = bitcast i16* %10058 to <16 x i16>*
  %10060 = load <16 x i16>, <16 x i16>* %10059, align 2, !tbaa !399
  %10061 = zext i32 %.pre-phi3469 to i64
  %10062 = mul nsw i64 %10061, %112
  %10063 = add nsw i64 %10062, %94
  %10064 = getelementptr inbounds i16, i16* %blur_x, i64 %10063
  %10065 = getelementptr inbounds i16, i16* %10064, i64 -32
  %10066 = bitcast i16* %10065 to <16 x i16>*
  %10067 = load <16 x i16>, <16 x i16>* %10066, align 2, !tbaa !399
  %10068 = getelementptr inbounds i16, i16* %10064, i64 -16
  %10069 = bitcast i16* %10068 to <16 x i16>*
  %10070 = load <16 x i16>, <16 x i16>* %10069, align 2, !tbaa !399
  %10071 = mul nsw i64 %10032, %112
  %10072 = add nsw i64 %10071, %94
  %10073 = getelementptr inbounds i16, i16* %blur_x, i64 %10072
  %10074 = getelementptr inbounds i16, i16* %10073, i64 -32
  %10075 = bitcast i16* %10074 to <16 x i16>*
  %10076 = load <16 x i16>, <16 x i16>* %10075, align 2, !tbaa !399
  %10077 = getelementptr inbounds i16, i16* %10073, i64 -16
  %10078 = bitcast i16* %10077 to <16 x i16>*
  %10079 = load <16 x i16>, <16 x i16>* %10078, align 2, !tbaa !399
  %10080 = zext i32 %.pre-phi3475 to i64
  %10081 = mul nsw i64 %10080, %112
  %10082 = add nsw i64 %10081, %94
  %10083 = getelementptr inbounds i16, i16* %blur_x, i64 %10082
  %10084 = getelementptr inbounds i16, i16* %10083, i64 -32
  %10085 = bitcast i16* %10084 to <16 x i16>*
  %10086 = load <16 x i16>, <16 x i16>* %10085, align 2, !tbaa !399
  %10087 = getelementptr inbounds i16, i16* %10083, i64 -16
  %10088 = bitcast i16* %10087 to <16 x i16>*
  %10089 = load <16 x i16>, <16 x i16>* %10088, align 2, !tbaa !399
  %10090 = add <16 x i16> %10057, %10047
  %10091 = add <16 x i16> %10090, %10067
  %10092 = add <16 x i16> %10091, %10076
  %10093 = add <16 x i16> %10092, %10086
  %10094 = add <16 x i16> %10060, %10050
  %10095 = add <16 x i16> %10094, %10070
  %10096 = add <16 x i16> %10095, %10079
  %10097 = add <16 x i16> %10096, %10089
  %10098 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10093, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10099 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10097, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10100 = shufflevector <16 x i16> %10098, <16 x i16> %10099, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10101 = lshr <32 x i16> %10100, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10102 = shufflevector <32 x i16> %10101, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10103 = sext i32 %a26 to i64
  %10104 = add nsw i64 %10103, 20
  %10105 = mul nsw i64 %10104, %113
  %10106 = add nsw i64 %115, %10105
  %10107 = getelementptr inbounds i16, i16* %66, i64 %10106
  %10108 = getelementptr inbounds i16, i16* %10107, i64 -32
  %10109 = bitcast i16* %10108 to <16 x i16>*
  store <16 x i16> %10102, <16 x i16>* %10109, align 2, !tbaa !401
  %10110 = shufflevector <32 x i16> %10101, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10111 = getelementptr inbounds i16, i16* %10107, i64 -16
  %10112 = bitcast i16* %10111 to <16 x i16>*
  store <16 x i16> %10110, <16 x i16>* %10112, align 2, !tbaa !401
  br label %after_bb531

"for blur_y.s0.x.x.rebased536":                   ; preds = %"for blur_y.s0.x.x.rebased536.preheader", %"consume blur_x543"
  %indvars.iv3319 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased536.preheader" ], [ %indvars.iv.next3320, %"consume blur_x543" ]
  %10113 = add nsw i64 %indvars.iv3319, %101
  %10114 = icmp slt i64 %10113, 1
  %10115 = trunc i64 %10113 to i32
  %10116 = shl nsw i32 %10115, 5
  %10117 = icmp sgt i32 %4, %10116
  %10118 = or i1 %10114, %10117
  br i1 %10118, label %"produce blur_x542", label %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge"

"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased536"
  %.pre3510 = shl nsw i64 %10113, 5
  br label %"consume blur_x543"

"end for blur_y.s0.x.x.rebased537":               ; preds = %"consume blur_x543", %after_bb531
  br i1 %102, label %"for blur_y.s0.x.x.rebased544.preheader", label %"end for blur_y.s0.x.x.rebased545", !prof !386

"for blur_y.s0.x.x.rebased544.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased537"
  %10119 = sext i32 %t1682 to i64
  %10120 = zext i32 %.pre-phi3463 to i64
  %10121 = mul nsw i64 %10120, %112
  %10122 = sub nsw i64 %10121, %96
  %10123 = zext i32 %.pre-phi3457 to i64
  %10124 = mul nsw i64 %10123, %112
  %10125 = sub nsw i64 %10124, %96
  %10126 = zext i32 %.pre-phi3469 to i64
  %10127 = mul nsw i64 %10126, %112
  %10128 = sub nsw i64 %10127, %96
  %10129 = zext i32 %.pre-phi to i64
  %10130 = mul nsw i64 %10129, %112
  %10131 = sub nsw i64 %10130, %96
  %10132 = zext i32 %.pre-phi3475 to i64
  %10133 = mul nsw i64 %10132, %112
  %10134 = sub nsw i64 %10133, %96
  %10135 = sext i32 %a26 to i64
  %10136 = add nsw i64 %10135, 20
  %10137 = mul nsw i64 %10136, %113
  %10138 = add nsw i64 %10137, %116
  br label %"for blur_y.s0.x.x.rebased544"

"produce blur_x542":                              ; preds = %"for blur_y.s0.x.x.rebased536"
  %t1032 = add nsw i32 %10116, %t2025
  %10139 = sext i32 %t1032 to i64
  %10140 = getelementptr inbounds i16, i16* %read_input, i64 %10139
  %10141 = getelementptr inbounds i16, i16* %10140, i64 1
  %10142 = bitcast i16* %10141 to <16 x i16>*
  %10143 = load <16 x i16>, <16 x i16>* %10142, align 2, !tbaa !396
  %10144 = getelementptr inbounds i16, i16* %10140, i64 17
  %10145 = bitcast i16* %10144 to <16 x i16>*
  %10146 = load <16 x i16>, <16 x i16>* %10145, align 2, !tbaa !396
  %10147 = bitcast i16* %10140 to <16 x i16>*
  %10148 = load <16 x i16>, <16 x i16>* %10147, align 2, !tbaa !396
  %10149 = getelementptr inbounds i16, i16* %10140, i64 16
  %10150 = bitcast i16* %10149 to <16 x i16>*
  %10151 = load <16 x i16>, <16 x i16>* %10150, align 2, !tbaa !396
  %10152 = getelementptr inbounds i16, i16* %10140, i64 2
  %10153 = bitcast i16* %10152 to <16 x i16>*
  %10154 = load <16 x i16>, <16 x i16>* %10153, align 2, !tbaa !396
  %10155 = getelementptr inbounds i16, i16* %10140, i64 18
  %10156 = bitcast i16* %10155 to <16 x i16>*
  %10157 = load <16 x i16>, <16 x i16>* %10156, align 2, !tbaa !396
  %10158 = getelementptr inbounds i16, i16* %10140, i64 4
  %10159 = bitcast i16* %10158 to <16 x i16>*
  %10160 = load <16 x i16>, <16 x i16>* %10159, align 2, !tbaa !396
  %10161 = getelementptr inbounds i16, i16* %10140, i64 20
  %10162 = bitcast i16* %10161 to <16 x i16>*
  %10163 = load <16 x i16>, <16 x i16>* %10162, align 2, !tbaa !396
  %10164 = getelementptr inbounds i16, i16* %10140, i64 3
  %10165 = bitcast i16* %10164 to <16 x i16>*
  %10166 = load <16 x i16>, <16 x i16>* %10165, align 2, !tbaa !396
  %10167 = getelementptr inbounds i16, i16* %10140, i64 19
  %10168 = bitcast i16* %10167 to <16 x i16>*
  %10169 = load <16 x i16>, <16 x i16>* %10168, align 2, !tbaa !396
  %10170 = add <16 x i16> %10148, %10143
  %10171 = add <16 x i16> %10170, %10154
  %10172 = add <16 x i16> %10171, %10160
  %10173 = add <16 x i16> %10172, %10166
  %10174 = add <16 x i16> %10151, %10146
  %10175 = add <16 x i16> %10174, %10157
  %10176 = add <16 x i16> %10175, %10163
  %10177 = add <16 x i16> %10176, %10169
  %10178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10173, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10177, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10180 = shufflevector <16 x i16> %10178, <16 x i16> %10179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10181 = lshr <32 x i16> %10180, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10182 = shufflevector <32 x i16> %10181, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10183 = shl nsw i64 %10113, 5
  %10184 = add nsw i64 %10183, %9968
  %10185 = getelementptr inbounds i16, i16* %blur_x, i64 %10184
  %10186 = bitcast i16* %10185 to <16 x i16>*
  store <16 x i16> %10182, <16 x i16>* %10186, align 2, !tbaa !399
  %10187 = shufflevector <32 x i16> %10181, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10188 = getelementptr inbounds i16, i16* %10185, i64 16
  %10189 = bitcast i16* %10188 to <16 x i16>*
  store <16 x i16> %10187, <16 x i16>* %10189, align 2, !tbaa !399
  br label %"consume blur_x543"

"consume blur_x543":                              ; preds = %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge", %"produce blur_x542"
  %.pre-phi3511 = phi i64 [ %.pre3510, %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge" ], [ %10183, %"produce blur_x542" ]
  %10190 = add nsw i64 %9971, %.pre-phi3511
  %10191 = getelementptr inbounds i16, i16* %blur_x, i64 %10190
  %10192 = bitcast i16* %10191 to <16 x i16>*
  %10193 = load <16 x i16>, <16 x i16>* %10192, align 2, !tbaa !399
  %10194 = getelementptr inbounds i16, i16* %10191, i64 16
  %10195 = bitcast i16* %10194 to <16 x i16>*
  %10196 = load <16 x i16>, <16 x i16>* %10195, align 2, !tbaa !399
  %10197 = add nsw i64 %9974, %.pre-phi3511
  %10198 = getelementptr inbounds i16, i16* %blur_x, i64 %10197
  %10199 = bitcast i16* %10198 to <16 x i16>*
  %10200 = load <16 x i16>, <16 x i16>* %10199, align 2, !tbaa !399
  %10201 = getelementptr inbounds i16, i16* %10198, i64 16
  %10202 = bitcast i16* %10201 to <16 x i16>*
  %10203 = load <16 x i16>, <16 x i16>* %10202, align 2, !tbaa !399
  %10204 = add nsw i64 %9977, %.pre-phi3511
  %10205 = getelementptr inbounds i16, i16* %blur_x, i64 %10204
  %10206 = bitcast i16* %10205 to <16 x i16>*
  %10207 = load <16 x i16>, <16 x i16>* %10206, align 2, !tbaa !399
  %10208 = getelementptr inbounds i16, i16* %10205, i64 16
  %10209 = bitcast i16* %10208 to <16 x i16>*
  %10210 = load <16 x i16>, <16 x i16>* %10209, align 2, !tbaa !399
  %10211 = add nsw i64 %9980, %.pre-phi3511
  %10212 = getelementptr inbounds i16, i16* %blur_x, i64 %10211
  %10213 = bitcast i16* %10212 to <16 x i16>*
  %10214 = load <16 x i16>, <16 x i16>* %10213, align 2, !tbaa !399
  %10215 = getelementptr inbounds i16, i16* %10212, i64 16
  %10216 = bitcast i16* %10215 to <16 x i16>*
  %10217 = load <16 x i16>, <16 x i16>* %10216, align 2, !tbaa !399
  %10218 = add nsw i64 %9983, %.pre-phi3511
  %10219 = getelementptr inbounds i16, i16* %blur_x, i64 %10218
  %10220 = bitcast i16* %10219 to <16 x i16>*
  %10221 = load <16 x i16>, <16 x i16>* %10220, align 2, !tbaa !399
  %10222 = getelementptr inbounds i16, i16* %10219, i64 16
  %10223 = bitcast i16* %10222 to <16 x i16>*
  %10224 = load <16 x i16>, <16 x i16>* %10223, align 2, !tbaa !399
  %10225 = add <16 x i16> %10200, %10193
  %10226 = add <16 x i16> %10225, %10207
  %10227 = add <16 x i16> %10226, %10214
  %10228 = add <16 x i16> %10227, %10221
  %10229 = add <16 x i16> %10203, %10196
  %10230 = add <16 x i16> %10229, %10210
  %10231 = add <16 x i16> %10230, %10217
  %10232 = add <16 x i16> %10231, %10224
  %10233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10228, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10232, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10235 = shufflevector <16 x i16> %10233, <16 x i16> %10234, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10236 = lshr <32 x i16> %10235, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10237 = shufflevector <32 x i16> %10236, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10238 = add nsw i64 %9987, %.pre-phi3511
  %10239 = getelementptr inbounds i16, i16* %66, i64 %10238
  %10240 = bitcast i16* %10239 to <16 x i16>*
  store <16 x i16> %10237, <16 x i16>* %10240, align 2, !tbaa !401
  %10241 = shufflevector <32 x i16> %10236, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10242 = getelementptr inbounds i16, i16* %10239, i64 16
  %10243 = bitcast i16* %10242 to <16 x i16>*
  store <16 x i16> %10241, <16 x i16>* %10243, align 2, !tbaa !401
  %indvars.iv.next3320 = add nuw nsw i64 %indvars.iv3319, 1
  %.not2717 = icmp eq i64 %indvars.iv.next3320, %184
  br i1 %.not2717, label %"end for blur_y.s0.x.x.rebased537", label %"for blur_y.s0.x.x.rebased536"

"for blur_y.s0.x.x.rebased544":                   ; preds = %"for blur_y.s0.x.x.rebased544.preheader", %"consume blur_x552"
  %blur_y.s0.x.x.rebased546 = phi i32 [ %10356, %"consume blur_x552" ], [ 0, %"for blur_y.s0.x.x.rebased544.preheader" ]
  %10244 = add nsw i32 %blur_y.s0.x.x.rebased546, %t1626
  %a245 = shl nsw i32 %10244, 5
  %10245 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %10245, i32 %a245, i32 %a14
  %10246 = icmp slt i32 %10244, 1
  %10247 = icmp sgt i32 %4, %a245
  %10248 = or i1 %10246, %10247
  br i1 %10248, label %"produce blur_x550", label %"consume blur_x552"

"end for blur_y.s0.x.x.rebased545":               ; preds = %"consume blur_x552", %"end for blur_y.s0.x.x.rebased537"
  br i1 %34, label %"produce blur_x556", label %after_bb553

"produce blur_x550":                              ; preds = %"for blur_y.s0.x.x.rebased544"
  %10249 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s551 = select i1 %10249, i32 %b251, i32 %4
  %t1037 = add nsw i32 %blur_x.s0.x.v1.base.s551, %t2025
  %10250 = sext i32 %t1037 to i64
  %10251 = getelementptr inbounds i16, i16* %read_input, i64 %10250
  %10252 = getelementptr inbounds i16, i16* %10251, i64 1
  %10253 = bitcast i16* %10252 to <16 x i16>*
  %10254 = load <16 x i16>, <16 x i16>* %10253, align 2, !tbaa !396
  %10255 = getelementptr inbounds i16, i16* %10251, i64 17
  %10256 = bitcast i16* %10255 to <16 x i16>*
  %10257 = load <16 x i16>, <16 x i16>* %10256, align 2, !tbaa !396
  %10258 = bitcast i16* %10251 to <16 x i16>*
  %10259 = load <16 x i16>, <16 x i16>* %10258, align 2, !tbaa !396
  %10260 = getelementptr inbounds i16, i16* %10251, i64 16
  %10261 = bitcast i16* %10260 to <16 x i16>*
  %10262 = load <16 x i16>, <16 x i16>* %10261, align 2, !tbaa !396
  %10263 = getelementptr inbounds i16, i16* %10251, i64 2
  %10264 = bitcast i16* %10263 to <16 x i16>*
  %10265 = load <16 x i16>, <16 x i16>* %10264, align 2, !tbaa !396
  %10266 = getelementptr inbounds i16, i16* %10251, i64 18
  %10267 = bitcast i16* %10266 to <16 x i16>*
  %10268 = load <16 x i16>, <16 x i16>* %10267, align 2, !tbaa !396
  %10269 = getelementptr inbounds i16, i16* %10251, i64 4
  %10270 = bitcast i16* %10269 to <16 x i16>*
  %10271 = load <16 x i16>, <16 x i16>* %10270, align 2, !tbaa !396
  %10272 = getelementptr inbounds i16, i16* %10251, i64 20
  %10273 = bitcast i16* %10272 to <16 x i16>*
  %10274 = load <16 x i16>, <16 x i16>* %10273, align 2, !tbaa !396
  %10275 = getelementptr inbounds i16, i16* %10251, i64 3
  %10276 = bitcast i16* %10275 to <16 x i16>*
  %10277 = load <16 x i16>, <16 x i16>* %10276, align 2, !tbaa !396
  %10278 = getelementptr inbounds i16, i16* %10251, i64 19
  %10279 = bitcast i16* %10278 to <16 x i16>*
  %10280 = load <16 x i16>, <16 x i16>* %10279, align 2, !tbaa !396
  %10281 = add <16 x i16> %10259, %10254
  %10282 = add <16 x i16> %10281, %10265
  %10283 = add <16 x i16> %10282, %10271
  %10284 = add <16 x i16> %10283, %10277
  %10285 = add <16 x i16> %10262, %10257
  %10286 = add <16 x i16> %10285, %10268
  %10287 = add <16 x i16> %10286, %10274
  %10288 = add <16 x i16> %10287, %10280
  %10289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10284, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10288, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10291 = shufflevector <16 x i16> %10289, <16 x i16> %10290, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10292 = lshr <32 x i16> %10291, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10293 = shufflevector <32 x i16> %10292, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10294 = sext i32 %blur_x.s0.x.v1.base.s551 to i64
  %10295 = add nsw i64 %10294, %10119
  %10296 = getelementptr inbounds i16, i16* %blur_x, i64 %10295
  %10297 = bitcast i16* %10296 to <16 x i16>*
  store <16 x i16> %10293, <16 x i16>* %10297, align 2, !tbaa !399
  %10298 = shufflevector <32 x i16> %10292, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10299 = getelementptr inbounds i16, i16* %10296, i64 16
  %10300 = bitcast i16* %10299 to <16 x i16>*
  store <16 x i16> %10298, <16 x i16>* %10300, align 2, !tbaa !399
  br label %"consume blur_x552"

"consume blur_x552":                              ; preds = %"for blur_y.s0.x.x.rebased544", %"produce blur_x550"
  %10301 = sext i32 %b251 to i64
  %10302 = add nsw i64 %10122, %10301
  %10303 = getelementptr inbounds i16, i16* %blur_x, i64 %10302
  %10304 = bitcast i16* %10303 to <16 x i16>*
  %10305 = load <16 x i16>, <16 x i16>* %10304, align 2, !tbaa !399
  %10306 = getelementptr inbounds i16, i16* %10303, i64 16
  %10307 = bitcast i16* %10306 to <16 x i16>*
  %10308 = load <16 x i16>, <16 x i16>* %10307, align 2, !tbaa !399
  %10309 = add nsw i64 %10125, %10301
  %10310 = getelementptr inbounds i16, i16* %blur_x, i64 %10309
  %10311 = bitcast i16* %10310 to <16 x i16>*
  %10312 = load <16 x i16>, <16 x i16>* %10311, align 2, !tbaa !399
  %10313 = getelementptr inbounds i16, i16* %10310, i64 16
  %10314 = bitcast i16* %10313 to <16 x i16>*
  %10315 = load <16 x i16>, <16 x i16>* %10314, align 2, !tbaa !399
  %10316 = add nsw i64 %10128, %10301
  %10317 = getelementptr inbounds i16, i16* %blur_x, i64 %10316
  %10318 = bitcast i16* %10317 to <16 x i16>*
  %10319 = load <16 x i16>, <16 x i16>* %10318, align 2, !tbaa !399
  %10320 = getelementptr inbounds i16, i16* %10317, i64 16
  %10321 = bitcast i16* %10320 to <16 x i16>*
  %10322 = load <16 x i16>, <16 x i16>* %10321, align 2, !tbaa !399
  %10323 = add nsw i64 %10131, %10301
  %10324 = getelementptr inbounds i16, i16* %blur_x, i64 %10323
  %10325 = bitcast i16* %10324 to <16 x i16>*
  %10326 = load <16 x i16>, <16 x i16>* %10325, align 2, !tbaa !399
  %10327 = getelementptr inbounds i16, i16* %10324, i64 16
  %10328 = bitcast i16* %10327 to <16 x i16>*
  %10329 = load <16 x i16>, <16 x i16>* %10328, align 2, !tbaa !399
  %10330 = add nsw i64 %10134, %10301
  %10331 = getelementptr inbounds i16, i16* %blur_x, i64 %10330
  %10332 = bitcast i16* %10331 to <16 x i16>*
  %10333 = load <16 x i16>, <16 x i16>* %10332, align 2, !tbaa !399
  %10334 = getelementptr inbounds i16, i16* %10331, i64 16
  %10335 = bitcast i16* %10334 to <16 x i16>*
  %10336 = load <16 x i16>, <16 x i16>* %10335, align 2, !tbaa !399
  %10337 = add <16 x i16> %10312, %10305
  %10338 = add <16 x i16> %10337, %10319
  %10339 = add <16 x i16> %10338, %10326
  %10340 = add <16 x i16> %10339, %10333
  %10341 = add <16 x i16> %10315, %10308
  %10342 = add <16 x i16> %10341, %10322
  %10343 = add <16 x i16> %10342, %10329
  %10344 = add <16 x i16> %10343, %10336
  %10345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10340, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10346 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10344, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10347 = shufflevector <16 x i16> %10345, <16 x i16> %10346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10348 = lshr <32 x i16> %10347, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10349 = shufflevector <32 x i16> %10348, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10350 = add nsw i64 %10138, %10301
  %10351 = getelementptr inbounds i16, i16* %66, i64 %10350
  %10352 = bitcast i16* %10351 to <16 x i16>*
  store <16 x i16> %10349, <16 x i16>* %10352, align 2, !tbaa !401
  %10353 = shufflevector <32 x i16> %10348, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10354 = getelementptr inbounds i16, i16* %10351, i64 16
  %10355 = bitcast i16* %10354 to <16 x i16>*
  store <16 x i16> %10353, <16 x i16>* %10355, align 2, !tbaa !401
  %10356 = add nuw nsw i32 %blur_y.s0.x.x.rebased546, 1
  %.not2716 = icmp eq i32 %10356, %t1683
  br i1 %.not2716, label %"end for blur_y.s0.x.x.rebased545", label %"for blur_y.s0.x.x.rebased544"

after_bb553:                                      ; preds = %"end for blur_y.s0.x.x.rebased545", %"produce blur_x556"
  br i1 %100, label %"for blur_y.s0.x.x.rebased558.preheader", label %"end for blur_y.s0.x.x.rebased559", !prof !386

"for blur_y.s0.x.x.rebased558.preheader":         ; preds = %after_bb553
  %10357 = sext i32 %t1688 to i64
  %10358 = zext i32 %.pre-phi3469 to i64
  %10359 = mul nsw i64 %10358, %112
  %10360 = sub nsw i64 %10359, %96
  %10361 = zext i32 %.pre-phi3463 to i64
  %10362 = mul nsw i64 %10361, %112
  %10363 = sub nsw i64 %10362, %96
  %10364 = zext i32 %.pre-phi3475 to i64
  %10365 = mul nsw i64 %10364, %112
  %10366 = sub nsw i64 %10365, %96
  %10367 = zext i32 %.pre-phi3445 to i64
  %10368 = mul nsw i64 %10367, %112
  %10369 = sub nsw i64 %10368, %96
  %10370 = zext i32 %.pre-phi to i64
  %10371 = mul nsw i64 %10370, %112
  %10372 = sub nsw i64 %10371, %96
  %10373 = sext i32 %a26 to i64
  %10374 = add nsw i64 %10373, 21
  %10375 = mul nsw i64 %10374, %113
  %10376 = add nsw i64 %10375, %116
  br label %"for blur_y.s0.x.x.rebased558"

"produce blur_x556":                              ; preds = %"end for blur_y.s0.x.x.rebased545"
  %10377 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %10378 = getelementptr inbounds i16, i16* %10377, i64 -31
  %10379 = bitcast i16* %10378 to <16 x i16>*
  %10380 = load <16 x i16>, <16 x i16>* %10379, align 2, !tbaa !396
  %10381 = getelementptr inbounds i16, i16* %10377, i64 -15
  %10382 = bitcast i16* %10381 to <16 x i16>*
  %10383 = load <16 x i16>, <16 x i16>* %10382, align 2, !tbaa !396
  %10384 = getelementptr inbounds i16, i16* %10377, i64 -32
  %10385 = bitcast i16* %10384 to <16 x i16>*
  %10386 = load <16 x i16>, <16 x i16>* %10385, align 2, !tbaa !396
  %10387 = getelementptr inbounds i16, i16* %10377, i64 -16
  %10388 = bitcast i16* %10387 to <16 x i16>*
  %10389 = load <16 x i16>, <16 x i16>* %10388, align 2, !tbaa !396
  %10390 = getelementptr inbounds i16, i16* %10377, i64 -30
  %10391 = bitcast i16* %10390 to <16 x i16>*
  %10392 = load <16 x i16>, <16 x i16>* %10391, align 2, !tbaa !396
  %10393 = getelementptr inbounds i16, i16* %10377, i64 -14
  %10394 = bitcast i16* %10393 to <16 x i16>*
  %10395 = load <16 x i16>, <16 x i16>* %10394, align 2, !tbaa !396
  %10396 = getelementptr inbounds i16, i16* %10377, i64 -28
  %10397 = bitcast i16* %10396 to <16 x i16>*
  %10398 = load <16 x i16>, <16 x i16>* %10397, align 2, !tbaa !396
  %10399 = getelementptr inbounds i16, i16* %10377, i64 -12
  %10400 = bitcast i16* %10399 to <16 x i16>*
  %10401 = load <16 x i16>, <16 x i16>* %10400, align 2, !tbaa !396
  %10402 = getelementptr inbounds i16, i16* %10377, i64 -29
  %10403 = bitcast i16* %10402 to <16 x i16>*
  %10404 = load <16 x i16>, <16 x i16>* %10403, align 2, !tbaa !396
  %10405 = getelementptr inbounds i16, i16* %10377, i64 -13
  %10406 = bitcast i16* %10405 to <16 x i16>*
  %10407 = load <16 x i16>, <16 x i16>* %10406, align 2, !tbaa !396
  %10408 = add <16 x i16> %10386, %10380
  %10409 = add <16 x i16> %10408, %10392
  %10410 = add <16 x i16> %10409, %10398
  %10411 = add <16 x i16> %10410, %10404
  %10412 = add <16 x i16> %10389, %10383
  %10413 = add <16 x i16> %10412, %10395
  %10414 = add <16 x i16> %10413, %10401
  %10415 = add <16 x i16> %10414, %10407
  %10416 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10411, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10417 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10415, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10418 = shufflevector <16 x i16> %10416, <16 x i16> %10417, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10419 = lshr <32 x i16> %10418, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10420 = shufflevector <32 x i16> %10419, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10421 = zext i32 %.pre-phi3445 to i64
  %10422 = mul nsw i64 %97, %10421
  %10423 = add nsw i64 %99, %10422
  %10424 = getelementptr inbounds i16, i16* %blur_x, i64 %10423
  %10425 = getelementptr inbounds i16, i16* %10424, i64 -32
  %10426 = bitcast i16* %10425 to <16 x i16>*
  store <16 x i16> %10420, <16 x i16>* %10426, align 2, !tbaa !399
  %10427 = shufflevector <32 x i16> %10419, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10428 = getelementptr inbounds i16, i16* %10424, i64 -16
  %10429 = bitcast i16* %10428 to <16 x i16>*
  store <16 x i16> %10427, <16 x i16>* %10429, align 2, !tbaa !399
  %10430 = zext i32 %.pre-phi3469 to i64
  %10431 = mul nsw i64 %10430, %112
  %10432 = add nsw i64 %10431, %94
  %10433 = getelementptr inbounds i16, i16* %blur_x, i64 %10432
  %10434 = getelementptr inbounds i16, i16* %10433, i64 -32
  %10435 = bitcast i16* %10434 to <16 x i16>*
  %10436 = load <16 x i16>, <16 x i16>* %10435, align 2, !tbaa !399
  %10437 = getelementptr inbounds i16, i16* %10433, i64 -16
  %10438 = bitcast i16* %10437 to <16 x i16>*
  %10439 = load <16 x i16>, <16 x i16>* %10438, align 2, !tbaa !399
  %10440 = zext i32 %.pre-phi3463 to i64
  %10441 = mul nsw i64 %10440, %112
  %10442 = add nsw i64 %10441, %94
  %10443 = getelementptr inbounds i16, i16* %blur_x, i64 %10442
  %10444 = getelementptr inbounds i16, i16* %10443, i64 -32
  %10445 = bitcast i16* %10444 to <16 x i16>*
  %10446 = load <16 x i16>, <16 x i16>* %10445, align 2, !tbaa !399
  %10447 = getelementptr inbounds i16, i16* %10443, i64 -16
  %10448 = bitcast i16* %10447 to <16 x i16>*
  %10449 = load <16 x i16>, <16 x i16>* %10448, align 2, !tbaa !399
  %10450 = zext i32 %.pre-phi3475 to i64
  %10451 = mul nsw i64 %10450, %112
  %10452 = add nsw i64 %10451, %94
  %10453 = getelementptr inbounds i16, i16* %blur_x, i64 %10452
  %10454 = getelementptr inbounds i16, i16* %10453, i64 -32
  %10455 = bitcast i16* %10454 to <16 x i16>*
  %10456 = load <16 x i16>, <16 x i16>* %10455, align 2, !tbaa !399
  %10457 = getelementptr inbounds i16, i16* %10453, i64 -16
  %10458 = bitcast i16* %10457 to <16 x i16>*
  %10459 = load <16 x i16>, <16 x i16>* %10458, align 2, !tbaa !399
  %10460 = mul nsw i64 %10421, %112
  %10461 = add nsw i64 %10460, %94
  %10462 = getelementptr inbounds i16, i16* %blur_x, i64 %10461
  %10463 = getelementptr inbounds i16, i16* %10462, i64 -32
  %10464 = bitcast i16* %10463 to <16 x i16>*
  %10465 = load <16 x i16>, <16 x i16>* %10464, align 2, !tbaa !399
  %10466 = getelementptr inbounds i16, i16* %10462, i64 -16
  %10467 = bitcast i16* %10466 to <16 x i16>*
  %10468 = load <16 x i16>, <16 x i16>* %10467, align 2, !tbaa !399
  %10469 = zext i32 %.pre-phi to i64
  %10470 = mul nsw i64 %10469, %112
  %10471 = add nsw i64 %10470, %94
  %10472 = getelementptr inbounds i16, i16* %blur_x, i64 %10471
  %10473 = getelementptr inbounds i16, i16* %10472, i64 -32
  %10474 = bitcast i16* %10473 to <16 x i16>*
  %10475 = load <16 x i16>, <16 x i16>* %10474, align 2, !tbaa !399
  %10476 = getelementptr inbounds i16, i16* %10472, i64 -16
  %10477 = bitcast i16* %10476 to <16 x i16>*
  %10478 = load <16 x i16>, <16 x i16>* %10477, align 2, !tbaa !399
  %10479 = add <16 x i16> %10446, %10436
  %10480 = add <16 x i16> %10479, %10456
  %10481 = add <16 x i16> %10480, %10465
  %10482 = add <16 x i16> %10481, %10475
  %10483 = add <16 x i16> %10449, %10439
  %10484 = add <16 x i16> %10483, %10459
  %10485 = add <16 x i16> %10484, %10468
  %10486 = add <16 x i16> %10485, %10478
  %10487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10482, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10488 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10486, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10489 = shufflevector <16 x i16> %10487, <16 x i16> %10488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10490 = lshr <32 x i16> %10489, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10491 = shufflevector <32 x i16> %10490, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10492 = sext i32 %a26 to i64
  %10493 = add nsw i64 %10492, 21
  %10494 = mul nsw i64 %10493, %113
  %10495 = add nsw i64 %115, %10494
  %10496 = getelementptr inbounds i16, i16* %66, i64 %10495
  %10497 = getelementptr inbounds i16, i16* %10496, i64 -32
  %10498 = bitcast i16* %10497 to <16 x i16>*
  store <16 x i16> %10491, <16 x i16>* %10498, align 2, !tbaa !401
  %10499 = shufflevector <32 x i16> %10490, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10500 = getelementptr inbounds i16, i16* %10496, i64 -16
  %10501 = bitcast i16* %10500 to <16 x i16>*
  store <16 x i16> %10499, <16 x i16>* %10501, align 2, !tbaa !401
  br label %after_bb553

"for blur_y.s0.x.x.rebased558":                   ; preds = %"for blur_y.s0.x.x.rebased558.preheader", %"consume blur_x565"
  %indvars.iv3322 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased558.preheader" ], [ %indvars.iv.next3323, %"consume blur_x565" ]
  %10502 = add nsw i64 %indvars.iv3322, %101
  %10503 = icmp slt i64 %10502, 1
  %10504 = trunc i64 %10502 to i32
  %10505 = shl nsw i32 %10504, 5
  %10506 = icmp sgt i32 %4, %10505
  %10507 = or i1 %10503, %10506
  br i1 %10507, label %"produce blur_x564", label %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge"

"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased558"
  %.pre3512 = shl nsw i64 %10502, 5
  br label %"consume blur_x565"

"end for blur_y.s0.x.x.rebased559":               ; preds = %"consume blur_x565", %after_bb553
  br i1 %102, label %"for blur_y.s0.x.x.rebased566.preheader", label %"end for blur_y.s0.x.x.rebased567", !prof !386

"for blur_y.s0.x.x.rebased566.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased559"
  %10508 = sext i32 %t1688 to i64
  %10509 = zext i32 %.pre-phi3469 to i64
  %10510 = mul nsw i64 %10509, %112
  %10511 = sub nsw i64 %10510, %96
  %10512 = zext i32 %.pre-phi3463 to i64
  %10513 = mul nsw i64 %10512, %112
  %10514 = sub nsw i64 %10513, %96
  %10515 = zext i32 %.pre-phi3475 to i64
  %10516 = mul nsw i64 %10515, %112
  %10517 = sub nsw i64 %10516, %96
  %10518 = zext i32 %.pre-phi3445 to i64
  %10519 = mul nsw i64 %10518, %112
  %10520 = sub nsw i64 %10519, %96
  %10521 = zext i32 %.pre-phi to i64
  %10522 = mul nsw i64 %10521, %112
  %10523 = sub nsw i64 %10522, %96
  %10524 = sext i32 %a26 to i64
  %10525 = add nsw i64 %10524, 21
  %10526 = mul nsw i64 %10525, %113
  %10527 = add nsw i64 %10526, %116
  br label %"for blur_y.s0.x.x.rebased566"

"produce blur_x564":                              ; preds = %"for blur_y.s0.x.x.rebased558"
  %t1048 = add nsw i32 %10505, %t2041
  %10528 = sext i32 %t1048 to i64
  %10529 = getelementptr inbounds i16, i16* %read_input, i64 %10528
  %10530 = getelementptr inbounds i16, i16* %10529, i64 1
  %10531 = bitcast i16* %10530 to <16 x i16>*
  %10532 = load <16 x i16>, <16 x i16>* %10531, align 2, !tbaa !396
  %10533 = getelementptr inbounds i16, i16* %10529, i64 17
  %10534 = bitcast i16* %10533 to <16 x i16>*
  %10535 = load <16 x i16>, <16 x i16>* %10534, align 2, !tbaa !396
  %10536 = bitcast i16* %10529 to <16 x i16>*
  %10537 = load <16 x i16>, <16 x i16>* %10536, align 2, !tbaa !396
  %10538 = getelementptr inbounds i16, i16* %10529, i64 16
  %10539 = bitcast i16* %10538 to <16 x i16>*
  %10540 = load <16 x i16>, <16 x i16>* %10539, align 2, !tbaa !396
  %10541 = getelementptr inbounds i16, i16* %10529, i64 2
  %10542 = bitcast i16* %10541 to <16 x i16>*
  %10543 = load <16 x i16>, <16 x i16>* %10542, align 2, !tbaa !396
  %10544 = getelementptr inbounds i16, i16* %10529, i64 18
  %10545 = bitcast i16* %10544 to <16 x i16>*
  %10546 = load <16 x i16>, <16 x i16>* %10545, align 2, !tbaa !396
  %10547 = getelementptr inbounds i16, i16* %10529, i64 4
  %10548 = bitcast i16* %10547 to <16 x i16>*
  %10549 = load <16 x i16>, <16 x i16>* %10548, align 2, !tbaa !396
  %10550 = getelementptr inbounds i16, i16* %10529, i64 20
  %10551 = bitcast i16* %10550 to <16 x i16>*
  %10552 = load <16 x i16>, <16 x i16>* %10551, align 2, !tbaa !396
  %10553 = getelementptr inbounds i16, i16* %10529, i64 3
  %10554 = bitcast i16* %10553 to <16 x i16>*
  %10555 = load <16 x i16>, <16 x i16>* %10554, align 2, !tbaa !396
  %10556 = getelementptr inbounds i16, i16* %10529, i64 19
  %10557 = bitcast i16* %10556 to <16 x i16>*
  %10558 = load <16 x i16>, <16 x i16>* %10557, align 2, !tbaa !396
  %10559 = add <16 x i16> %10537, %10532
  %10560 = add <16 x i16> %10559, %10543
  %10561 = add <16 x i16> %10560, %10549
  %10562 = add <16 x i16> %10561, %10555
  %10563 = add <16 x i16> %10540, %10535
  %10564 = add <16 x i16> %10563, %10546
  %10565 = add <16 x i16> %10564, %10552
  %10566 = add <16 x i16> %10565, %10558
  %10567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10562, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10568 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10566, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10569 = shufflevector <16 x i16> %10567, <16 x i16> %10568, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10570 = lshr <32 x i16> %10569, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10571 = shufflevector <32 x i16> %10570, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10572 = shl nsw i64 %10502, 5
  %10573 = add nsw i64 %10572, %10357
  %10574 = getelementptr inbounds i16, i16* %blur_x, i64 %10573
  %10575 = bitcast i16* %10574 to <16 x i16>*
  store <16 x i16> %10571, <16 x i16>* %10575, align 2, !tbaa !399
  %10576 = shufflevector <32 x i16> %10570, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10577 = getelementptr inbounds i16, i16* %10574, i64 16
  %10578 = bitcast i16* %10577 to <16 x i16>*
  store <16 x i16> %10576, <16 x i16>* %10578, align 2, !tbaa !399
  br label %"consume blur_x565"

"consume blur_x565":                              ; preds = %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge", %"produce blur_x564"
  %.pre-phi3513 = phi i64 [ %.pre3512, %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge" ], [ %10572, %"produce blur_x564" ]
  %10579 = add nsw i64 %10360, %.pre-phi3513
  %10580 = getelementptr inbounds i16, i16* %blur_x, i64 %10579
  %10581 = bitcast i16* %10580 to <16 x i16>*
  %10582 = load <16 x i16>, <16 x i16>* %10581, align 2, !tbaa !399
  %10583 = getelementptr inbounds i16, i16* %10580, i64 16
  %10584 = bitcast i16* %10583 to <16 x i16>*
  %10585 = load <16 x i16>, <16 x i16>* %10584, align 2, !tbaa !399
  %10586 = add nsw i64 %10363, %.pre-phi3513
  %10587 = getelementptr inbounds i16, i16* %blur_x, i64 %10586
  %10588 = bitcast i16* %10587 to <16 x i16>*
  %10589 = load <16 x i16>, <16 x i16>* %10588, align 2, !tbaa !399
  %10590 = getelementptr inbounds i16, i16* %10587, i64 16
  %10591 = bitcast i16* %10590 to <16 x i16>*
  %10592 = load <16 x i16>, <16 x i16>* %10591, align 2, !tbaa !399
  %10593 = add nsw i64 %10366, %.pre-phi3513
  %10594 = getelementptr inbounds i16, i16* %blur_x, i64 %10593
  %10595 = bitcast i16* %10594 to <16 x i16>*
  %10596 = load <16 x i16>, <16 x i16>* %10595, align 2, !tbaa !399
  %10597 = getelementptr inbounds i16, i16* %10594, i64 16
  %10598 = bitcast i16* %10597 to <16 x i16>*
  %10599 = load <16 x i16>, <16 x i16>* %10598, align 2, !tbaa !399
  %10600 = add nsw i64 %10369, %.pre-phi3513
  %10601 = getelementptr inbounds i16, i16* %blur_x, i64 %10600
  %10602 = bitcast i16* %10601 to <16 x i16>*
  %10603 = load <16 x i16>, <16 x i16>* %10602, align 2, !tbaa !399
  %10604 = getelementptr inbounds i16, i16* %10601, i64 16
  %10605 = bitcast i16* %10604 to <16 x i16>*
  %10606 = load <16 x i16>, <16 x i16>* %10605, align 2, !tbaa !399
  %10607 = add nsw i64 %10372, %.pre-phi3513
  %10608 = getelementptr inbounds i16, i16* %blur_x, i64 %10607
  %10609 = bitcast i16* %10608 to <16 x i16>*
  %10610 = load <16 x i16>, <16 x i16>* %10609, align 2, !tbaa !399
  %10611 = getelementptr inbounds i16, i16* %10608, i64 16
  %10612 = bitcast i16* %10611 to <16 x i16>*
  %10613 = load <16 x i16>, <16 x i16>* %10612, align 2, !tbaa !399
  %10614 = add <16 x i16> %10589, %10582
  %10615 = add <16 x i16> %10614, %10596
  %10616 = add <16 x i16> %10615, %10603
  %10617 = add <16 x i16> %10616, %10610
  %10618 = add <16 x i16> %10592, %10585
  %10619 = add <16 x i16> %10618, %10599
  %10620 = add <16 x i16> %10619, %10606
  %10621 = add <16 x i16> %10620, %10613
  %10622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10617, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10621, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10624 = shufflevector <16 x i16> %10622, <16 x i16> %10623, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10625 = lshr <32 x i16> %10624, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10626 = shufflevector <32 x i16> %10625, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10627 = add nsw i64 %10376, %.pre-phi3513
  %10628 = getelementptr inbounds i16, i16* %66, i64 %10627
  %10629 = bitcast i16* %10628 to <16 x i16>*
  store <16 x i16> %10626, <16 x i16>* %10629, align 2, !tbaa !401
  %10630 = shufflevector <32 x i16> %10625, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10631 = getelementptr inbounds i16, i16* %10628, i64 16
  %10632 = bitcast i16* %10631 to <16 x i16>*
  store <16 x i16> %10630, <16 x i16>* %10632, align 2, !tbaa !401
  %indvars.iv.next3323 = add nuw nsw i64 %indvars.iv3322, 1
  %.not2715 = icmp eq i64 %indvars.iv.next3323, %184
  br i1 %.not2715, label %"end for blur_y.s0.x.x.rebased559", label %"for blur_y.s0.x.x.rebased558"

"for blur_y.s0.x.x.rebased566":                   ; preds = %"for blur_y.s0.x.x.rebased566.preheader", %"consume blur_x574"
  %blur_y.s0.x.x.rebased568 = phi i32 [ %10745, %"consume blur_x574" ], [ 0, %"for blur_y.s0.x.x.rebased566.preheader" ]
  %10633 = add nsw i32 %blur_y.s0.x.x.rebased568, %t1626
  %a252 = shl nsw i32 %10633, 5
  %10634 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %10634, i32 %a252, i32 %a14
  %10635 = icmp slt i32 %10633, 1
  %10636 = icmp sgt i32 %4, %a252
  %10637 = or i1 %10635, %10636
  br i1 %10637, label %"produce blur_x572", label %"consume blur_x574"

"end for blur_y.s0.x.x.rebased567":               ; preds = %"consume blur_x574", %"end for blur_y.s0.x.x.rebased559"
  br i1 %34, label %"produce blur_x578", label %after_bb575

"produce blur_x572":                              ; preds = %"for blur_y.s0.x.x.rebased566"
  %10638 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s573 = select i1 %10638, i32 %b258, i32 %4
  %t1053 = add nsw i32 %blur_x.s0.x.v1.base.s573, %t2041
  %10639 = sext i32 %t1053 to i64
  %10640 = getelementptr inbounds i16, i16* %read_input, i64 %10639
  %10641 = getelementptr inbounds i16, i16* %10640, i64 1
  %10642 = bitcast i16* %10641 to <16 x i16>*
  %10643 = load <16 x i16>, <16 x i16>* %10642, align 2, !tbaa !396
  %10644 = getelementptr inbounds i16, i16* %10640, i64 17
  %10645 = bitcast i16* %10644 to <16 x i16>*
  %10646 = load <16 x i16>, <16 x i16>* %10645, align 2, !tbaa !396
  %10647 = bitcast i16* %10640 to <16 x i16>*
  %10648 = load <16 x i16>, <16 x i16>* %10647, align 2, !tbaa !396
  %10649 = getelementptr inbounds i16, i16* %10640, i64 16
  %10650 = bitcast i16* %10649 to <16 x i16>*
  %10651 = load <16 x i16>, <16 x i16>* %10650, align 2, !tbaa !396
  %10652 = getelementptr inbounds i16, i16* %10640, i64 2
  %10653 = bitcast i16* %10652 to <16 x i16>*
  %10654 = load <16 x i16>, <16 x i16>* %10653, align 2, !tbaa !396
  %10655 = getelementptr inbounds i16, i16* %10640, i64 18
  %10656 = bitcast i16* %10655 to <16 x i16>*
  %10657 = load <16 x i16>, <16 x i16>* %10656, align 2, !tbaa !396
  %10658 = getelementptr inbounds i16, i16* %10640, i64 4
  %10659 = bitcast i16* %10658 to <16 x i16>*
  %10660 = load <16 x i16>, <16 x i16>* %10659, align 2, !tbaa !396
  %10661 = getelementptr inbounds i16, i16* %10640, i64 20
  %10662 = bitcast i16* %10661 to <16 x i16>*
  %10663 = load <16 x i16>, <16 x i16>* %10662, align 2, !tbaa !396
  %10664 = getelementptr inbounds i16, i16* %10640, i64 3
  %10665 = bitcast i16* %10664 to <16 x i16>*
  %10666 = load <16 x i16>, <16 x i16>* %10665, align 2, !tbaa !396
  %10667 = getelementptr inbounds i16, i16* %10640, i64 19
  %10668 = bitcast i16* %10667 to <16 x i16>*
  %10669 = load <16 x i16>, <16 x i16>* %10668, align 2, !tbaa !396
  %10670 = add <16 x i16> %10648, %10643
  %10671 = add <16 x i16> %10670, %10654
  %10672 = add <16 x i16> %10671, %10660
  %10673 = add <16 x i16> %10672, %10666
  %10674 = add <16 x i16> %10651, %10646
  %10675 = add <16 x i16> %10674, %10657
  %10676 = add <16 x i16> %10675, %10663
  %10677 = add <16 x i16> %10676, %10669
  %10678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10673, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10677, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10680 = shufflevector <16 x i16> %10678, <16 x i16> %10679, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10681 = lshr <32 x i16> %10680, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10682 = shufflevector <32 x i16> %10681, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10683 = sext i32 %blur_x.s0.x.v1.base.s573 to i64
  %10684 = add nsw i64 %10683, %10508
  %10685 = getelementptr inbounds i16, i16* %blur_x, i64 %10684
  %10686 = bitcast i16* %10685 to <16 x i16>*
  store <16 x i16> %10682, <16 x i16>* %10686, align 2, !tbaa !399
  %10687 = shufflevector <32 x i16> %10681, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10688 = getelementptr inbounds i16, i16* %10685, i64 16
  %10689 = bitcast i16* %10688 to <16 x i16>*
  store <16 x i16> %10687, <16 x i16>* %10689, align 2, !tbaa !399
  br label %"consume blur_x574"

"consume blur_x574":                              ; preds = %"for blur_y.s0.x.x.rebased566", %"produce blur_x572"
  %10690 = sext i32 %b258 to i64
  %10691 = add nsw i64 %10511, %10690
  %10692 = getelementptr inbounds i16, i16* %blur_x, i64 %10691
  %10693 = bitcast i16* %10692 to <16 x i16>*
  %10694 = load <16 x i16>, <16 x i16>* %10693, align 2, !tbaa !399
  %10695 = getelementptr inbounds i16, i16* %10692, i64 16
  %10696 = bitcast i16* %10695 to <16 x i16>*
  %10697 = load <16 x i16>, <16 x i16>* %10696, align 2, !tbaa !399
  %10698 = add nsw i64 %10514, %10690
  %10699 = getelementptr inbounds i16, i16* %blur_x, i64 %10698
  %10700 = bitcast i16* %10699 to <16 x i16>*
  %10701 = load <16 x i16>, <16 x i16>* %10700, align 2, !tbaa !399
  %10702 = getelementptr inbounds i16, i16* %10699, i64 16
  %10703 = bitcast i16* %10702 to <16 x i16>*
  %10704 = load <16 x i16>, <16 x i16>* %10703, align 2, !tbaa !399
  %10705 = add nsw i64 %10517, %10690
  %10706 = getelementptr inbounds i16, i16* %blur_x, i64 %10705
  %10707 = bitcast i16* %10706 to <16 x i16>*
  %10708 = load <16 x i16>, <16 x i16>* %10707, align 2, !tbaa !399
  %10709 = getelementptr inbounds i16, i16* %10706, i64 16
  %10710 = bitcast i16* %10709 to <16 x i16>*
  %10711 = load <16 x i16>, <16 x i16>* %10710, align 2, !tbaa !399
  %10712 = add nsw i64 %10520, %10690
  %10713 = getelementptr inbounds i16, i16* %blur_x, i64 %10712
  %10714 = bitcast i16* %10713 to <16 x i16>*
  %10715 = load <16 x i16>, <16 x i16>* %10714, align 2, !tbaa !399
  %10716 = getelementptr inbounds i16, i16* %10713, i64 16
  %10717 = bitcast i16* %10716 to <16 x i16>*
  %10718 = load <16 x i16>, <16 x i16>* %10717, align 2, !tbaa !399
  %10719 = add nsw i64 %10523, %10690
  %10720 = getelementptr inbounds i16, i16* %blur_x, i64 %10719
  %10721 = bitcast i16* %10720 to <16 x i16>*
  %10722 = load <16 x i16>, <16 x i16>* %10721, align 2, !tbaa !399
  %10723 = getelementptr inbounds i16, i16* %10720, i64 16
  %10724 = bitcast i16* %10723 to <16 x i16>*
  %10725 = load <16 x i16>, <16 x i16>* %10724, align 2, !tbaa !399
  %10726 = add <16 x i16> %10701, %10694
  %10727 = add <16 x i16> %10726, %10708
  %10728 = add <16 x i16> %10727, %10715
  %10729 = add <16 x i16> %10728, %10722
  %10730 = add <16 x i16> %10704, %10697
  %10731 = add <16 x i16> %10730, %10711
  %10732 = add <16 x i16> %10731, %10718
  %10733 = add <16 x i16> %10732, %10725
  %10734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10729, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10735 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10733, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10736 = shufflevector <16 x i16> %10734, <16 x i16> %10735, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10737 = lshr <32 x i16> %10736, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10738 = shufflevector <32 x i16> %10737, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10739 = add nsw i64 %10527, %10690
  %10740 = getelementptr inbounds i16, i16* %66, i64 %10739
  %10741 = bitcast i16* %10740 to <16 x i16>*
  store <16 x i16> %10738, <16 x i16>* %10741, align 2, !tbaa !401
  %10742 = shufflevector <32 x i16> %10737, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10743 = getelementptr inbounds i16, i16* %10740, i64 16
  %10744 = bitcast i16* %10743 to <16 x i16>*
  store <16 x i16> %10742, <16 x i16>* %10744, align 2, !tbaa !401
  %10745 = add nuw nsw i32 %blur_y.s0.x.x.rebased568, 1
  %.not2714 = icmp eq i32 %10745, %t1683
  br i1 %.not2714, label %"end for blur_y.s0.x.x.rebased567", label %"for blur_y.s0.x.x.rebased566"

after_bb575:                                      ; preds = %"end for blur_y.s0.x.x.rebased567", %"produce blur_x578"
  br i1 %100, label %"for blur_y.s0.x.x.rebased580.preheader", label %"end for blur_y.s0.x.x.rebased581", !prof !386

"for blur_y.s0.x.x.rebased580.preheader":         ; preds = %after_bb575
  %10746 = sext i32 %t1694 to i64
  %10747 = zext i32 %.pre-phi3475 to i64
  %10748 = mul nsw i64 %10747, %112
  %10749 = sub nsw i64 %10748, %96
  %10750 = zext i32 %.pre-phi3469 to i64
  %10751 = mul nsw i64 %10750, %112
  %10752 = sub nsw i64 %10751, %96
  %10753 = zext i32 %.pre-phi to i64
  %10754 = mul nsw i64 %10753, %112
  %10755 = sub nsw i64 %10754, %96
  %10756 = zext i32 %.pre-phi3449 to i64
  %10757 = mul nsw i64 %10756, %112
  %10758 = sub nsw i64 %10757, %96
  %10759 = zext i32 %.pre-phi3445 to i64
  %10760 = mul nsw i64 %10759, %112
  %10761 = sub nsw i64 %10760, %96
  %10762 = sext i32 %a26 to i64
  %10763 = add nsw i64 %10762, 22
  %10764 = mul nsw i64 %10763, %113
  %10765 = add nsw i64 %10764, %116
  br label %"for blur_y.s0.x.x.rebased580"

"produce blur_x578":                              ; preds = %"end for blur_y.s0.x.x.rebased567"
  %10766 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %10767 = getelementptr inbounds i16, i16* %10766, i64 -31
  %10768 = bitcast i16* %10767 to <16 x i16>*
  %10769 = load <16 x i16>, <16 x i16>* %10768, align 2, !tbaa !396
  %10770 = getelementptr inbounds i16, i16* %10766, i64 -15
  %10771 = bitcast i16* %10770 to <16 x i16>*
  %10772 = load <16 x i16>, <16 x i16>* %10771, align 2, !tbaa !396
  %10773 = getelementptr inbounds i16, i16* %10766, i64 -32
  %10774 = bitcast i16* %10773 to <16 x i16>*
  %10775 = load <16 x i16>, <16 x i16>* %10774, align 2, !tbaa !396
  %10776 = getelementptr inbounds i16, i16* %10766, i64 -16
  %10777 = bitcast i16* %10776 to <16 x i16>*
  %10778 = load <16 x i16>, <16 x i16>* %10777, align 2, !tbaa !396
  %10779 = getelementptr inbounds i16, i16* %10766, i64 -30
  %10780 = bitcast i16* %10779 to <16 x i16>*
  %10781 = load <16 x i16>, <16 x i16>* %10780, align 2, !tbaa !396
  %10782 = getelementptr inbounds i16, i16* %10766, i64 -14
  %10783 = bitcast i16* %10782 to <16 x i16>*
  %10784 = load <16 x i16>, <16 x i16>* %10783, align 2, !tbaa !396
  %10785 = getelementptr inbounds i16, i16* %10766, i64 -28
  %10786 = bitcast i16* %10785 to <16 x i16>*
  %10787 = load <16 x i16>, <16 x i16>* %10786, align 2, !tbaa !396
  %10788 = getelementptr inbounds i16, i16* %10766, i64 -12
  %10789 = bitcast i16* %10788 to <16 x i16>*
  %10790 = load <16 x i16>, <16 x i16>* %10789, align 2, !tbaa !396
  %10791 = getelementptr inbounds i16, i16* %10766, i64 -29
  %10792 = bitcast i16* %10791 to <16 x i16>*
  %10793 = load <16 x i16>, <16 x i16>* %10792, align 2, !tbaa !396
  %10794 = getelementptr inbounds i16, i16* %10766, i64 -13
  %10795 = bitcast i16* %10794 to <16 x i16>*
  %10796 = load <16 x i16>, <16 x i16>* %10795, align 2, !tbaa !396
  %10797 = add <16 x i16> %10775, %10769
  %10798 = add <16 x i16> %10797, %10781
  %10799 = add <16 x i16> %10798, %10787
  %10800 = add <16 x i16> %10799, %10793
  %10801 = add <16 x i16> %10778, %10772
  %10802 = add <16 x i16> %10801, %10784
  %10803 = add <16 x i16> %10802, %10790
  %10804 = add <16 x i16> %10803, %10796
  %10805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10800, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10806 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10804, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10807 = shufflevector <16 x i16> %10805, <16 x i16> %10806, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10808 = lshr <32 x i16> %10807, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10809 = shufflevector <32 x i16> %10808, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10810 = zext i32 %.pre-phi3449 to i64
  %10811 = mul nsw i64 %97, %10810
  %10812 = add nsw i64 %99, %10811
  %10813 = getelementptr inbounds i16, i16* %blur_x, i64 %10812
  %10814 = getelementptr inbounds i16, i16* %10813, i64 -32
  %10815 = bitcast i16* %10814 to <16 x i16>*
  store <16 x i16> %10809, <16 x i16>* %10815, align 2, !tbaa !399
  %10816 = shufflevector <32 x i16> %10808, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10817 = getelementptr inbounds i16, i16* %10813, i64 -16
  %10818 = bitcast i16* %10817 to <16 x i16>*
  store <16 x i16> %10816, <16 x i16>* %10818, align 2, !tbaa !399
  %10819 = zext i32 %.pre-phi3475 to i64
  %10820 = mul nsw i64 %10819, %112
  %10821 = add nsw i64 %10820, %94
  %10822 = getelementptr inbounds i16, i16* %blur_x, i64 %10821
  %10823 = getelementptr inbounds i16, i16* %10822, i64 -32
  %10824 = bitcast i16* %10823 to <16 x i16>*
  %10825 = load <16 x i16>, <16 x i16>* %10824, align 2, !tbaa !399
  %10826 = getelementptr inbounds i16, i16* %10822, i64 -16
  %10827 = bitcast i16* %10826 to <16 x i16>*
  %10828 = load <16 x i16>, <16 x i16>* %10827, align 2, !tbaa !399
  %10829 = zext i32 %.pre-phi3469 to i64
  %10830 = mul nsw i64 %10829, %112
  %10831 = add nsw i64 %10830, %94
  %10832 = getelementptr inbounds i16, i16* %blur_x, i64 %10831
  %10833 = getelementptr inbounds i16, i16* %10832, i64 -32
  %10834 = bitcast i16* %10833 to <16 x i16>*
  %10835 = load <16 x i16>, <16 x i16>* %10834, align 2, !tbaa !399
  %10836 = getelementptr inbounds i16, i16* %10832, i64 -16
  %10837 = bitcast i16* %10836 to <16 x i16>*
  %10838 = load <16 x i16>, <16 x i16>* %10837, align 2, !tbaa !399
  %10839 = zext i32 %.pre-phi to i64
  %10840 = mul nsw i64 %10839, %112
  %10841 = add nsw i64 %10840, %94
  %10842 = getelementptr inbounds i16, i16* %blur_x, i64 %10841
  %10843 = getelementptr inbounds i16, i16* %10842, i64 -32
  %10844 = bitcast i16* %10843 to <16 x i16>*
  %10845 = load <16 x i16>, <16 x i16>* %10844, align 2, !tbaa !399
  %10846 = getelementptr inbounds i16, i16* %10842, i64 -16
  %10847 = bitcast i16* %10846 to <16 x i16>*
  %10848 = load <16 x i16>, <16 x i16>* %10847, align 2, !tbaa !399
  %10849 = mul nsw i64 %10810, %112
  %10850 = add nsw i64 %10849, %94
  %10851 = getelementptr inbounds i16, i16* %blur_x, i64 %10850
  %10852 = getelementptr inbounds i16, i16* %10851, i64 -32
  %10853 = bitcast i16* %10852 to <16 x i16>*
  %10854 = load <16 x i16>, <16 x i16>* %10853, align 2, !tbaa !399
  %10855 = getelementptr inbounds i16, i16* %10851, i64 -16
  %10856 = bitcast i16* %10855 to <16 x i16>*
  %10857 = load <16 x i16>, <16 x i16>* %10856, align 2, !tbaa !399
  %10858 = zext i32 %.pre-phi3445 to i64
  %10859 = mul nsw i64 %10858, %112
  %10860 = add nsw i64 %10859, %94
  %10861 = getelementptr inbounds i16, i16* %blur_x, i64 %10860
  %10862 = getelementptr inbounds i16, i16* %10861, i64 -32
  %10863 = bitcast i16* %10862 to <16 x i16>*
  %10864 = load <16 x i16>, <16 x i16>* %10863, align 2, !tbaa !399
  %10865 = getelementptr inbounds i16, i16* %10861, i64 -16
  %10866 = bitcast i16* %10865 to <16 x i16>*
  %10867 = load <16 x i16>, <16 x i16>* %10866, align 2, !tbaa !399
  %10868 = add <16 x i16> %10835, %10825
  %10869 = add <16 x i16> %10868, %10845
  %10870 = add <16 x i16> %10869, %10854
  %10871 = add <16 x i16> %10870, %10864
  %10872 = add <16 x i16> %10838, %10828
  %10873 = add <16 x i16> %10872, %10848
  %10874 = add <16 x i16> %10873, %10857
  %10875 = add <16 x i16> %10874, %10867
  %10876 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10871, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10877 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10875, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10878 = shufflevector <16 x i16> %10876, <16 x i16> %10877, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10879 = lshr <32 x i16> %10878, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10880 = shufflevector <32 x i16> %10879, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10881 = sext i32 %a26 to i64
  %10882 = add nsw i64 %10881, 22
  %10883 = mul nsw i64 %10882, %113
  %10884 = add nsw i64 %115, %10883
  %10885 = getelementptr inbounds i16, i16* %66, i64 %10884
  %10886 = getelementptr inbounds i16, i16* %10885, i64 -32
  %10887 = bitcast i16* %10886 to <16 x i16>*
  store <16 x i16> %10880, <16 x i16>* %10887, align 2, !tbaa !401
  %10888 = shufflevector <32 x i16> %10879, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10889 = getelementptr inbounds i16, i16* %10885, i64 -16
  %10890 = bitcast i16* %10889 to <16 x i16>*
  store <16 x i16> %10888, <16 x i16>* %10890, align 2, !tbaa !401
  br label %after_bb575

"for blur_y.s0.x.x.rebased580":                   ; preds = %"for blur_y.s0.x.x.rebased580.preheader", %"consume blur_x587"
  %indvars.iv3325 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased580.preheader" ], [ %indvars.iv.next3326, %"consume blur_x587" ]
  %10891 = add nsw i64 %indvars.iv3325, %101
  %10892 = icmp slt i64 %10891, 1
  %10893 = trunc i64 %10891 to i32
  %10894 = shl nsw i32 %10893, 5
  %10895 = icmp sgt i32 %4, %10894
  %10896 = or i1 %10892, %10895
  br i1 %10896, label %"produce blur_x586", label %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge"

"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased580"
  %.pre3514 = shl nsw i64 %10891, 5
  br label %"consume blur_x587"

"end for blur_y.s0.x.x.rebased581":               ; preds = %"consume blur_x587", %after_bb575
  br i1 %102, label %"for blur_y.s0.x.x.rebased588.preheader", label %"end for blur_y.s0.x.x.rebased589", !prof !386

"for blur_y.s0.x.x.rebased588.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased581"
  %10897 = sext i32 %t1694 to i64
  %10898 = zext i32 %.pre-phi3475 to i64
  %10899 = mul nsw i64 %10898, %112
  %10900 = sub nsw i64 %10899, %96
  %10901 = zext i32 %.pre-phi3469 to i64
  %10902 = mul nsw i64 %10901, %112
  %10903 = sub nsw i64 %10902, %96
  %10904 = zext i32 %.pre-phi to i64
  %10905 = mul nsw i64 %10904, %112
  %10906 = sub nsw i64 %10905, %96
  %10907 = zext i32 %.pre-phi3449 to i64
  %10908 = mul nsw i64 %10907, %112
  %10909 = sub nsw i64 %10908, %96
  %10910 = zext i32 %.pre-phi3445 to i64
  %10911 = mul nsw i64 %10910, %112
  %10912 = sub nsw i64 %10911, %96
  %10913 = sext i32 %a26 to i64
  %10914 = add nsw i64 %10913, 22
  %10915 = mul nsw i64 %10914, %113
  %10916 = add nsw i64 %10915, %116
  br label %"for blur_y.s0.x.x.rebased588"

"produce blur_x586":                              ; preds = %"for blur_y.s0.x.x.rebased580"
  %t1064 = add nsw i32 %10894, %t2057
  %10917 = sext i32 %t1064 to i64
  %10918 = getelementptr inbounds i16, i16* %read_input, i64 %10917
  %10919 = getelementptr inbounds i16, i16* %10918, i64 1
  %10920 = bitcast i16* %10919 to <16 x i16>*
  %10921 = load <16 x i16>, <16 x i16>* %10920, align 2, !tbaa !396
  %10922 = getelementptr inbounds i16, i16* %10918, i64 17
  %10923 = bitcast i16* %10922 to <16 x i16>*
  %10924 = load <16 x i16>, <16 x i16>* %10923, align 2, !tbaa !396
  %10925 = bitcast i16* %10918 to <16 x i16>*
  %10926 = load <16 x i16>, <16 x i16>* %10925, align 2, !tbaa !396
  %10927 = getelementptr inbounds i16, i16* %10918, i64 16
  %10928 = bitcast i16* %10927 to <16 x i16>*
  %10929 = load <16 x i16>, <16 x i16>* %10928, align 2, !tbaa !396
  %10930 = getelementptr inbounds i16, i16* %10918, i64 2
  %10931 = bitcast i16* %10930 to <16 x i16>*
  %10932 = load <16 x i16>, <16 x i16>* %10931, align 2, !tbaa !396
  %10933 = getelementptr inbounds i16, i16* %10918, i64 18
  %10934 = bitcast i16* %10933 to <16 x i16>*
  %10935 = load <16 x i16>, <16 x i16>* %10934, align 2, !tbaa !396
  %10936 = getelementptr inbounds i16, i16* %10918, i64 4
  %10937 = bitcast i16* %10936 to <16 x i16>*
  %10938 = load <16 x i16>, <16 x i16>* %10937, align 2, !tbaa !396
  %10939 = getelementptr inbounds i16, i16* %10918, i64 20
  %10940 = bitcast i16* %10939 to <16 x i16>*
  %10941 = load <16 x i16>, <16 x i16>* %10940, align 2, !tbaa !396
  %10942 = getelementptr inbounds i16, i16* %10918, i64 3
  %10943 = bitcast i16* %10942 to <16 x i16>*
  %10944 = load <16 x i16>, <16 x i16>* %10943, align 2, !tbaa !396
  %10945 = getelementptr inbounds i16, i16* %10918, i64 19
  %10946 = bitcast i16* %10945 to <16 x i16>*
  %10947 = load <16 x i16>, <16 x i16>* %10946, align 2, !tbaa !396
  %10948 = add <16 x i16> %10926, %10921
  %10949 = add <16 x i16> %10948, %10932
  %10950 = add <16 x i16> %10949, %10938
  %10951 = add <16 x i16> %10950, %10944
  %10952 = add <16 x i16> %10929, %10924
  %10953 = add <16 x i16> %10952, %10935
  %10954 = add <16 x i16> %10953, %10941
  %10955 = add <16 x i16> %10954, %10947
  %10956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10951, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10955, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10958 = shufflevector <16 x i16> %10956, <16 x i16> %10957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10959 = lshr <32 x i16> %10958, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10960 = shufflevector <32 x i16> %10959, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10961 = shl nsw i64 %10891, 5
  %10962 = add nsw i64 %10961, %10746
  %10963 = getelementptr inbounds i16, i16* %blur_x, i64 %10962
  %10964 = bitcast i16* %10963 to <16 x i16>*
  store <16 x i16> %10960, <16 x i16>* %10964, align 2, !tbaa !399
  %10965 = shufflevector <32 x i16> %10959, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10966 = getelementptr inbounds i16, i16* %10963, i64 16
  %10967 = bitcast i16* %10966 to <16 x i16>*
  store <16 x i16> %10965, <16 x i16>* %10967, align 2, !tbaa !399
  br label %"consume blur_x587"

"consume blur_x587":                              ; preds = %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge", %"produce blur_x586"
  %.pre-phi3515 = phi i64 [ %.pre3514, %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge" ], [ %10961, %"produce blur_x586" ]
  %10968 = add nsw i64 %10749, %.pre-phi3515
  %10969 = getelementptr inbounds i16, i16* %blur_x, i64 %10968
  %10970 = bitcast i16* %10969 to <16 x i16>*
  %10971 = load <16 x i16>, <16 x i16>* %10970, align 2, !tbaa !399
  %10972 = getelementptr inbounds i16, i16* %10969, i64 16
  %10973 = bitcast i16* %10972 to <16 x i16>*
  %10974 = load <16 x i16>, <16 x i16>* %10973, align 2, !tbaa !399
  %10975 = add nsw i64 %10752, %.pre-phi3515
  %10976 = getelementptr inbounds i16, i16* %blur_x, i64 %10975
  %10977 = bitcast i16* %10976 to <16 x i16>*
  %10978 = load <16 x i16>, <16 x i16>* %10977, align 2, !tbaa !399
  %10979 = getelementptr inbounds i16, i16* %10976, i64 16
  %10980 = bitcast i16* %10979 to <16 x i16>*
  %10981 = load <16 x i16>, <16 x i16>* %10980, align 2, !tbaa !399
  %10982 = add nsw i64 %10755, %.pre-phi3515
  %10983 = getelementptr inbounds i16, i16* %blur_x, i64 %10982
  %10984 = bitcast i16* %10983 to <16 x i16>*
  %10985 = load <16 x i16>, <16 x i16>* %10984, align 2, !tbaa !399
  %10986 = getelementptr inbounds i16, i16* %10983, i64 16
  %10987 = bitcast i16* %10986 to <16 x i16>*
  %10988 = load <16 x i16>, <16 x i16>* %10987, align 2, !tbaa !399
  %10989 = add nsw i64 %10758, %.pre-phi3515
  %10990 = getelementptr inbounds i16, i16* %blur_x, i64 %10989
  %10991 = bitcast i16* %10990 to <16 x i16>*
  %10992 = load <16 x i16>, <16 x i16>* %10991, align 2, !tbaa !399
  %10993 = getelementptr inbounds i16, i16* %10990, i64 16
  %10994 = bitcast i16* %10993 to <16 x i16>*
  %10995 = load <16 x i16>, <16 x i16>* %10994, align 2, !tbaa !399
  %10996 = add nsw i64 %10761, %.pre-phi3515
  %10997 = getelementptr inbounds i16, i16* %blur_x, i64 %10996
  %10998 = bitcast i16* %10997 to <16 x i16>*
  %10999 = load <16 x i16>, <16 x i16>* %10998, align 2, !tbaa !399
  %11000 = getelementptr inbounds i16, i16* %10997, i64 16
  %11001 = bitcast i16* %11000 to <16 x i16>*
  %11002 = load <16 x i16>, <16 x i16>* %11001, align 2, !tbaa !399
  %11003 = add <16 x i16> %10978, %10971
  %11004 = add <16 x i16> %11003, %10985
  %11005 = add <16 x i16> %11004, %10992
  %11006 = add <16 x i16> %11005, %10999
  %11007 = add <16 x i16> %10981, %10974
  %11008 = add <16 x i16> %11007, %10988
  %11009 = add <16 x i16> %11008, %10995
  %11010 = add <16 x i16> %11009, %11002
  %11011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11006, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11012 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11010, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11013 = shufflevector <16 x i16> %11011, <16 x i16> %11012, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11014 = lshr <32 x i16> %11013, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11015 = shufflevector <32 x i16> %11014, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11016 = add nsw i64 %10765, %.pre-phi3515
  %11017 = getelementptr inbounds i16, i16* %66, i64 %11016
  %11018 = bitcast i16* %11017 to <16 x i16>*
  store <16 x i16> %11015, <16 x i16>* %11018, align 2, !tbaa !401
  %11019 = shufflevector <32 x i16> %11014, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11020 = getelementptr inbounds i16, i16* %11017, i64 16
  %11021 = bitcast i16* %11020 to <16 x i16>*
  store <16 x i16> %11019, <16 x i16>* %11021, align 2, !tbaa !401
  %indvars.iv.next3326 = add nuw nsw i64 %indvars.iv3325, 1
  %.not2713 = icmp eq i64 %indvars.iv.next3326, %184
  br i1 %.not2713, label %"end for blur_y.s0.x.x.rebased581", label %"for blur_y.s0.x.x.rebased580"

"for blur_y.s0.x.x.rebased588":                   ; preds = %"for blur_y.s0.x.x.rebased588.preheader", %"consume blur_x596"
  %blur_y.s0.x.x.rebased590 = phi i32 [ %11134, %"consume blur_x596" ], [ 0, %"for blur_y.s0.x.x.rebased588.preheader" ]
  %11022 = add nsw i32 %blur_y.s0.x.x.rebased590, %t1626
  %a259 = shl nsw i32 %11022, 5
  %11023 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %11023, i32 %a259, i32 %a14
  %11024 = icmp slt i32 %11022, 1
  %11025 = icmp sgt i32 %4, %a259
  %11026 = or i1 %11024, %11025
  br i1 %11026, label %"produce blur_x594", label %"consume blur_x596"

"end for blur_y.s0.x.x.rebased589":               ; preds = %"consume blur_x596", %"end for blur_y.s0.x.x.rebased581"
  br i1 %34, label %"produce blur_x600", label %after_bb597

"produce blur_x594":                              ; preds = %"for blur_y.s0.x.x.rebased588"
  %11027 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s595 = select i1 %11027, i32 %b265, i32 %4
  %t1069 = add nsw i32 %blur_x.s0.x.v1.base.s595, %t2057
  %11028 = sext i32 %t1069 to i64
  %11029 = getelementptr inbounds i16, i16* %read_input, i64 %11028
  %11030 = getelementptr inbounds i16, i16* %11029, i64 1
  %11031 = bitcast i16* %11030 to <16 x i16>*
  %11032 = load <16 x i16>, <16 x i16>* %11031, align 2, !tbaa !396
  %11033 = getelementptr inbounds i16, i16* %11029, i64 17
  %11034 = bitcast i16* %11033 to <16 x i16>*
  %11035 = load <16 x i16>, <16 x i16>* %11034, align 2, !tbaa !396
  %11036 = bitcast i16* %11029 to <16 x i16>*
  %11037 = load <16 x i16>, <16 x i16>* %11036, align 2, !tbaa !396
  %11038 = getelementptr inbounds i16, i16* %11029, i64 16
  %11039 = bitcast i16* %11038 to <16 x i16>*
  %11040 = load <16 x i16>, <16 x i16>* %11039, align 2, !tbaa !396
  %11041 = getelementptr inbounds i16, i16* %11029, i64 2
  %11042 = bitcast i16* %11041 to <16 x i16>*
  %11043 = load <16 x i16>, <16 x i16>* %11042, align 2, !tbaa !396
  %11044 = getelementptr inbounds i16, i16* %11029, i64 18
  %11045 = bitcast i16* %11044 to <16 x i16>*
  %11046 = load <16 x i16>, <16 x i16>* %11045, align 2, !tbaa !396
  %11047 = getelementptr inbounds i16, i16* %11029, i64 4
  %11048 = bitcast i16* %11047 to <16 x i16>*
  %11049 = load <16 x i16>, <16 x i16>* %11048, align 2, !tbaa !396
  %11050 = getelementptr inbounds i16, i16* %11029, i64 20
  %11051 = bitcast i16* %11050 to <16 x i16>*
  %11052 = load <16 x i16>, <16 x i16>* %11051, align 2, !tbaa !396
  %11053 = getelementptr inbounds i16, i16* %11029, i64 3
  %11054 = bitcast i16* %11053 to <16 x i16>*
  %11055 = load <16 x i16>, <16 x i16>* %11054, align 2, !tbaa !396
  %11056 = getelementptr inbounds i16, i16* %11029, i64 19
  %11057 = bitcast i16* %11056 to <16 x i16>*
  %11058 = load <16 x i16>, <16 x i16>* %11057, align 2, !tbaa !396
  %11059 = add <16 x i16> %11037, %11032
  %11060 = add <16 x i16> %11059, %11043
  %11061 = add <16 x i16> %11060, %11049
  %11062 = add <16 x i16> %11061, %11055
  %11063 = add <16 x i16> %11040, %11035
  %11064 = add <16 x i16> %11063, %11046
  %11065 = add <16 x i16> %11064, %11052
  %11066 = add <16 x i16> %11065, %11058
  %11067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11062, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11066, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11069 = shufflevector <16 x i16> %11067, <16 x i16> %11068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11070 = lshr <32 x i16> %11069, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11071 = shufflevector <32 x i16> %11070, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11072 = sext i32 %blur_x.s0.x.v1.base.s595 to i64
  %11073 = add nsw i64 %11072, %10897
  %11074 = getelementptr inbounds i16, i16* %blur_x, i64 %11073
  %11075 = bitcast i16* %11074 to <16 x i16>*
  store <16 x i16> %11071, <16 x i16>* %11075, align 2, !tbaa !399
  %11076 = shufflevector <32 x i16> %11070, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11077 = getelementptr inbounds i16, i16* %11074, i64 16
  %11078 = bitcast i16* %11077 to <16 x i16>*
  store <16 x i16> %11076, <16 x i16>* %11078, align 2, !tbaa !399
  br label %"consume blur_x596"

"consume blur_x596":                              ; preds = %"for blur_y.s0.x.x.rebased588", %"produce blur_x594"
  %11079 = sext i32 %b265 to i64
  %11080 = add nsw i64 %10900, %11079
  %11081 = getelementptr inbounds i16, i16* %blur_x, i64 %11080
  %11082 = bitcast i16* %11081 to <16 x i16>*
  %11083 = load <16 x i16>, <16 x i16>* %11082, align 2, !tbaa !399
  %11084 = getelementptr inbounds i16, i16* %11081, i64 16
  %11085 = bitcast i16* %11084 to <16 x i16>*
  %11086 = load <16 x i16>, <16 x i16>* %11085, align 2, !tbaa !399
  %11087 = add nsw i64 %10903, %11079
  %11088 = getelementptr inbounds i16, i16* %blur_x, i64 %11087
  %11089 = bitcast i16* %11088 to <16 x i16>*
  %11090 = load <16 x i16>, <16 x i16>* %11089, align 2, !tbaa !399
  %11091 = getelementptr inbounds i16, i16* %11088, i64 16
  %11092 = bitcast i16* %11091 to <16 x i16>*
  %11093 = load <16 x i16>, <16 x i16>* %11092, align 2, !tbaa !399
  %11094 = add nsw i64 %10906, %11079
  %11095 = getelementptr inbounds i16, i16* %blur_x, i64 %11094
  %11096 = bitcast i16* %11095 to <16 x i16>*
  %11097 = load <16 x i16>, <16 x i16>* %11096, align 2, !tbaa !399
  %11098 = getelementptr inbounds i16, i16* %11095, i64 16
  %11099 = bitcast i16* %11098 to <16 x i16>*
  %11100 = load <16 x i16>, <16 x i16>* %11099, align 2, !tbaa !399
  %11101 = add nsw i64 %10909, %11079
  %11102 = getelementptr inbounds i16, i16* %blur_x, i64 %11101
  %11103 = bitcast i16* %11102 to <16 x i16>*
  %11104 = load <16 x i16>, <16 x i16>* %11103, align 2, !tbaa !399
  %11105 = getelementptr inbounds i16, i16* %11102, i64 16
  %11106 = bitcast i16* %11105 to <16 x i16>*
  %11107 = load <16 x i16>, <16 x i16>* %11106, align 2, !tbaa !399
  %11108 = add nsw i64 %10912, %11079
  %11109 = getelementptr inbounds i16, i16* %blur_x, i64 %11108
  %11110 = bitcast i16* %11109 to <16 x i16>*
  %11111 = load <16 x i16>, <16 x i16>* %11110, align 2, !tbaa !399
  %11112 = getelementptr inbounds i16, i16* %11109, i64 16
  %11113 = bitcast i16* %11112 to <16 x i16>*
  %11114 = load <16 x i16>, <16 x i16>* %11113, align 2, !tbaa !399
  %11115 = add <16 x i16> %11090, %11083
  %11116 = add <16 x i16> %11115, %11097
  %11117 = add <16 x i16> %11116, %11104
  %11118 = add <16 x i16> %11117, %11111
  %11119 = add <16 x i16> %11093, %11086
  %11120 = add <16 x i16> %11119, %11100
  %11121 = add <16 x i16> %11120, %11107
  %11122 = add <16 x i16> %11121, %11114
  %11123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11118, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11124 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11122, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11125 = shufflevector <16 x i16> %11123, <16 x i16> %11124, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11126 = lshr <32 x i16> %11125, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11127 = shufflevector <32 x i16> %11126, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11128 = add nsw i64 %10916, %11079
  %11129 = getelementptr inbounds i16, i16* %66, i64 %11128
  %11130 = bitcast i16* %11129 to <16 x i16>*
  store <16 x i16> %11127, <16 x i16>* %11130, align 2, !tbaa !401
  %11131 = shufflevector <32 x i16> %11126, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11132 = getelementptr inbounds i16, i16* %11129, i64 16
  %11133 = bitcast i16* %11132 to <16 x i16>*
  store <16 x i16> %11131, <16 x i16>* %11133, align 2, !tbaa !401
  %11134 = add nuw nsw i32 %blur_y.s0.x.x.rebased590, 1
  %.not2712 = icmp eq i32 %11134, %t1683
  br i1 %.not2712, label %"end for blur_y.s0.x.x.rebased589", label %"for blur_y.s0.x.x.rebased588"

after_bb597:                                      ; preds = %"end for blur_y.s0.x.x.rebased589", %"produce blur_x600"
  br i1 %100, label %"for blur_y.s0.x.x.rebased602.preheader", label %"end for blur_y.s0.x.x.rebased603", !prof !386

"for blur_y.s0.x.x.rebased602.preheader":         ; preds = %after_bb597
  %11135 = sext i32 %t1700 to i64
  %11136 = zext i32 %.pre-phi to i64
  %11137 = mul nsw i64 %11136, %112
  %11138 = sub nsw i64 %11137, %96
  %11139 = zext i32 %.pre-phi3475 to i64
  %11140 = mul nsw i64 %11139, %112
  %11141 = sub nsw i64 %11140, %96
  %11142 = zext i32 %.pre-phi3445 to i64
  %11143 = mul nsw i64 %11142, %112
  %11144 = sub nsw i64 %11143, %96
  %11145 = zext i32 %.pre-phi3453 to i64
  %11146 = mul nsw i64 %11145, %112
  %11147 = sub nsw i64 %11146, %96
  %11148 = zext i32 %.pre-phi3449 to i64
  %11149 = mul nsw i64 %11148, %112
  %11150 = sub nsw i64 %11149, %96
  %11151 = sext i32 %a26 to i64
  %11152 = add nsw i64 %11151, 23
  %11153 = mul nsw i64 %11152, %113
  %11154 = add nsw i64 %11153, %116
  br label %"for blur_y.s0.x.x.rebased602"

"produce blur_x600":                              ; preds = %"end for blur_y.s0.x.x.rebased589"
  %11155 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %11156 = getelementptr inbounds i16, i16* %11155, i64 -31
  %11157 = bitcast i16* %11156 to <16 x i16>*
  %11158 = load <16 x i16>, <16 x i16>* %11157, align 2, !tbaa !396
  %11159 = getelementptr inbounds i16, i16* %11155, i64 -15
  %11160 = bitcast i16* %11159 to <16 x i16>*
  %11161 = load <16 x i16>, <16 x i16>* %11160, align 2, !tbaa !396
  %11162 = getelementptr inbounds i16, i16* %11155, i64 -32
  %11163 = bitcast i16* %11162 to <16 x i16>*
  %11164 = load <16 x i16>, <16 x i16>* %11163, align 2, !tbaa !396
  %11165 = getelementptr inbounds i16, i16* %11155, i64 -16
  %11166 = bitcast i16* %11165 to <16 x i16>*
  %11167 = load <16 x i16>, <16 x i16>* %11166, align 2, !tbaa !396
  %11168 = getelementptr inbounds i16, i16* %11155, i64 -30
  %11169 = bitcast i16* %11168 to <16 x i16>*
  %11170 = load <16 x i16>, <16 x i16>* %11169, align 2, !tbaa !396
  %11171 = getelementptr inbounds i16, i16* %11155, i64 -14
  %11172 = bitcast i16* %11171 to <16 x i16>*
  %11173 = load <16 x i16>, <16 x i16>* %11172, align 2, !tbaa !396
  %11174 = getelementptr inbounds i16, i16* %11155, i64 -28
  %11175 = bitcast i16* %11174 to <16 x i16>*
  %11176 = load <16 x i16>, <16 x i16>* %11175, align 2, !tbaa !396
  %11177 = getelementptr inbounds i16, i16* %11155, i64 -12
  %11178 = bitcast i16* %11177 to <16 x i16>*
  %11179 = load <16 x i16>, <16 x i16>* %11178, align 2, !tbaa !396
  %11180 = getelementptr inbounds i16, i16* %11155, i64 -29
  %11181 = bitcast i16* %11180 to <16 x i16>*
  %11182 = load <16 x i16>, <16 x i16>* %11181, align 2, !tbaa !396
  %11183 = getelementptr inbounds i16, i16* %11155, i64 -13
  %11184 = bitcast i16* %11183 to <16 x i16>*
  %11185 = load <16 x i16>, <16 x i16>* %11184, align 2, !tbaa !396
  %11186 = add <16 x i16> %11164, %11158
  %11187 = add <16 x i16> %11186, %11170
  %11188 = add <16 x i16> %11187, %11176
  %11189 = add <16 x i16> %11188, %11182
  %11190 = add <16 x i16> %11167, %11161
  %11191 = add <16 x i16> %11190, %11173
  %11192 = add <16 x i16> %11191, %11179
  %11193 = add <16 x i16> %11192, %11185
  %11194 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11189, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11195 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11193, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11196 = shufflevector <16 x i16> %11194, <16 x i16> %11195, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11197 = lshr <32 x i16> %11196, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11198 = shufflevector <32 x i16> %11197, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11199 = zext i32 %.pre-phi3453 to i64
  %11200 = mul nsw i64 %97, %11199
  %11201 = add nsw i64 %99, %11200
  %11202 = getelementptr inbounds i16, i16* %blur_x, i64 %11201
  %11203 = getelementptr inbounds i16, i16* %11202, i64 -32
  %11204 = bitcast i16* %11203 to <16 x i16>*
  store <16 x i16> %11198, <16 x i16>* %11204, align 2, !tbaa !399
  %11205 = shufflevector <32 x i16> %11197, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11206 = getelementptr inbounds i16, i16* %11202, i64 -16
  %11207 = bitcast i16* %11206 to <16 x i16>*
  store <16 x i16> %11205, <16 x i16>* %11207, align 2, !tbaa !399
  %11208 = zext i32 %.pre-phi to i64
  %11209 = mul nsw i64 %11208, %112
  %11210 = add nsw i64 %11209, %94
  %11211 = getelementptr inbounds i16, i16* %blur_x, i64 %11210
  %11212 = getelementptr inbounds i16, i16* %11211, i64 -32
  %11213 = bitcast i16* %11212 to <16 x i16>*
  %11214 = load <16 x i16>, <16 x i16>* %11213, align 2, !tbaa !399
  %11215 = getelementptr inbounds i16, i16* %11211, i64 -16
  %11216 = bitcast i16* %11215 to <16 x i16>*
  %11217 = load <16 x i16>, <16 x i16>* %11216, align 2, !tbaa !399
  %11218 = zext i32 %.pre-phi3475 to i64
  %11219 = mul nsw i64 %11218, %112
  %11220 = add nsw i64 %11219, %94
  %11221 = getelementptr inbounds i16, i16* %blur_x, i64 %11220
  %11222 = getelementptr inbounds i16, i16* %11221, i64 -32
  %11223 = bitcast i16* %11222 to <16 x i16>*
  %11224 = load <16 x i16>, <16 x i16>* %11223, align 2, !tbaa !399
  %11225 = getelementptr inbounds i16, i16* %11221, i64 -16
  %11226 = bitcast i16* %11225 to <16 x i16>*
  %11227 = load <16 x i16>, <16 x i16>* %11226, align 2, !tbaa !399
  %11228 = zext i32 %.pre-phi3445 to i64
  %11229 = mul nsw i64 %11228, %112
  %11230 = add nsw i64 %11229, %94
  %11231 = getelementptr inbounds i16, i16* %blur_x, i64 %11230
  %11232 = getelementptr inbounds i16, i16* %11231, i64 -32
  %11233 = bitcast i16* %11232 to <16 x i16>*
  %11234 = load <16 x i16>, <16 x i16>* %11233, align 2, !tbaa !399
  %11235 = getelementptr inbounds i16, i16* %11231, i64 -16
  %11236 = bitcast i16* %11235 to <16 x i16>*
  %11237 = load <16 x i16>, <16 x i16>* %11236, align 2, !tbaa !399
  %11238 = mul nsw i64 %11199, %112
  %11239 = add nsw i64 %11238, %94
  %11240 = getelementptr inbounds i16, i16* %blur_x, i64 %11239
  %11241 = getelementptr inbounds i16, i16* %11240, i64 -32
  %11242 = bitcast i16* %11241 to <16 x i16>*
  %11243 = load <16 x i16>, <16 x i16>* %11242, align 2, !tbaa !399
  %11244 = getelementptr inbounds i16, i16* %11240, i64 -16
  %11245 = bitcast i16* %11244 to <16 x i16>*
  %11246 = load <16 x i16>, <16 x i16>* %11245, align 2, !tbaa !399
  %11247 = zext i32 %.pre-phi3449 to i64
  %11248 = mul nsw i64 %11247, %112
  %11249 = add nsw i64 %11248, %94
  %11250 = getelementptr inbounds i16, i16* %blur_x, i64 %11249
  %11251 = getelementptr inbounds i16, i16* %11250, i64 -32
  %11252 = bitcast i16* %11251 to <16 x i16>*
  %11253 = load <16 x i16>, <16 x i16>* %11252, align 2, !tbaa !399
  %11254 = getelementptr inbounds i16, i16* %11250, i64 -16
  %11255 = bitcast i16* %11254 to <16 x i16>*
  %11256 = load <16 x i16>, <16 x i16>* %11255, align 2, !tbaa !399
  %11257 = add <16 x i16> %11224, %11214
  %11258 = add <16 x i16> %11257, %11234
  %11259 = add <16 x i16> %11258, %11243
  %11260 = add <16 x i16> %11259, %11253
  %11261 = add <16 x i16> %11227, %11217
  %11262 = add <16 x i16> %11261, %11237
  %11263 = add <16 x i16> %11262, %11246
  %11264 = add <16 x i16> %11263, %11256
  %11265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11260, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11266 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11264, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11267 = shufflevector <16 x i16> %11265, <16 x i16> %11266, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11268 = lshr <32 x i16> %11267, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11269 = shufflevector <32 x i16> %11268, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11270 = sext i32 %a26 to i64
  %11271 = add nsw i64 %11270, 23
  %11272 = mul nsw i64 %11271, %113
  %11273 = add nsw i64 %115, %11272
  %11274 = getelementptr inbounds i16, i16* %66, i64 %11273
  %11275 = getelementptr inbounds i16, i16* %11274, i64 -32
  %11276 = bitcast i16* %11275 to <16 x i16>*
  store <16 x i16> %11269, <16 x i16>* %11276, align 2, !tbaa !401
  %11277 = shufflevector <32 x i16> %11268, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11278 = getelementptr inbounds i16, i16* %11274, i64 -16
  %11279 = bitcast i16* %11278 to <16 x i16>*
  store <16 x i16> %11277, <16 x i16>* %11279, align 2, !tbaa !401
  br label %after_bb597

"for blur_y.s0.x.x.rebased602":                   ; preds = %"for blur_y.s0.x.x.rebased602.preheader", %"consume blur_x609"
  %indvars.iv3328 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased602.preheader" ], [ %indvars.iv.next3329, %"consume blur_x609" ]
  %11280 = add nsw i64 %indvars.iv3328, %101
  %11281 = icmp slt i64 %11280, 1
  %11282 = trunc i64 %11280 to i32
  %11283 = shl nsw i32 %11282, 5
  %11284 = icmp sgt i32 %4, %11283
  %11285 = or i1 %11281, %11284
  br i1 %11285, label %"produce blur_x608", label %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge"

"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased602"
  %.pre3516 = shl nsw i64 %11280, 5
  br label %"consume blur_x609"

"end for blur_y.s0.x.x.rebased603":               ; preds = %"consume blur_x609", %after_bb597
  br i1 %102, label %"for blur_y.s0.x.x.rebased610.preheader", label %"end for blur_y.s0.x.x.rebased611", !prof !386

"for blur_y.s0.x.x.rebased610.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased603"
  %11286 = sext i32 %t1700 to i64
  %11287 = zext i32 %.pre-phi to i64
  %11288 = mul nsw i64 %11287, %112
  %11289 = sub nsw i64 %11288, %96
  %11290 = zext i32 %.pre-phi3475 to i64
  %11291 = mul nsw i64 %11290, %112
  %11292 = sub nsw i64 %11291, %96
  %11293 = zext i32 %.pre-phi3445 to i64
  %11294 = mul nsw i64 %11293, %112
  %11295 = sub nsw i64 %11294, %96
  %11296 = zext i32 %.pre-phi3453 to i64
  %11297 = mul nsw i64 %11296, %112
  %11298 = sub nsw i64 %11297, %96
  %11299 = zext i32 %.pre-phi3449 to i64
  %11300 = mul nsw i64 %11299, %112
  %11301 = sub nsw i64 %11300, %96
  %11302 = sext i32 %a26 to i64
  %11303 = add nsw i64 %11302, 23
  %11304 = mul nsw i64 %11303, %113
  %11305 = add nsw i64 %11304, %116
  br label %"for blur_y.s0.x.x.rebased610"

"produce blur_x608":                              ; preds = %"for blur_y.s0.x.x.rebased602"
  %t1080 = add nsw i32 %11283, %t2073
  %11306 = sext i32 %t1080 to i64
  %11307 = getelementptr inbounds i16, i16* %read_input, i64 %11306
  %11308 = getelementptr inbounds i16, i16* %11307, i64 1
  %11309 = bitcast i16* %11308 to <16 x i16>*
  %11310 = load <16 x i16>, <16 x i16>* %11309, align 2, !tbaa !396
  %11311 = getelementptr inbounds i16, i16* %11307, i64 17
  %11312 = bitcast i16* %11311 to <16 x i16>*
  %11313 = load <16 x i16>, <16 x i16>* %11312, align 2, !tbaa !396
  %11314 = bitcast i16* %11307 to <16 x i16>*
  %11315 = load <16 x i16>, <16 x i16>* %11314, align 2, !tbaa !396
  %11316 = getelementptr inbounds i16, i16* %11307, i64 16
  %11317 = bitcast i16* %11316 to <16 x i16>*
  %11318 = load <16 x i16>, <16 x i16>* %11317, align 2, !tbaa !396
  %11319 = getelementptr inbounds i16, i16* %11307, i64 2
  %11320 = bitcast i16* %11319 to <16 x i16>*
  %11321 = load <16 x i16>, <16 x i16>* %11320, align 2, !tbaa !396
  %11322 = getelementptr inbounds i16, i16* %11307, i64 18
  %11323 = bitcast i16* %11322 to <16 x i16>*
  %11324 = load <16 x i16>, <16 x i16>* %11323, align 2, !tbaa !396
  %11325 = getelementptr inbounds i16, i16* %11307, i64 4
  %11326 = bitcast i16* %11325 to <16 x i16>*
  %11327 = load <16 x i16>, <16 x i16>* %11326, align 2, !tbaa !396
  %11328 = getelementptr inbounds i16, i16* %11307, i64 20
  %11329 = bitcast i16* %11328 to <16 x i16>*
  %11330 = load <16 x i16>, <16 x i16>* %11329, align 2, !tbaa !396
  %11331 = getelementptr inbounds i16, i16* %11307, i64 3
  %11332 = bitcast i16* %11331 to <16 x i16>*
  %11333 = load <16 x i16>, <16 x i16>* %11332, align 2, !tbaa !396
  %11334 = getelementptr inbounds i16, i16* %11307, i64 19
  %11335 = bitcast i16* %11334 to <16 x i16>*
  %11336 = load <16 x i16>, <16 x i16>* %11335, align 2, !tbaa !396
  %11337 = add <16 x i16> %11315, %11310
  %11338 = add <16 x i16> %11337, %11321
  %11339 = add <16 x i16> %11338, %11327
  %11340 = add <16 x i16> %11339, %11333
  %11341 = add <16 x i16> %11318, %11313
  %11342 = add <16 x i16> %11341, %11324
  %11343 = add <16 x i16> %11342, %11330
  %11344 = add <16 x i16> %11343, %11336
  %11345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11340, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11346 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11344, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11347 = shufflevector <16 x i16> %11345, <16 x i16> %11346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11348 = lshr <32 x i16> %11347, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11349 = shufflevector <32 x i16> %11348, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11350 = shl nsw i64 %11280, 5
  %11351 = add nsw i64 %11350, %11135
  %11352 = getelementptr inbounds i16, i16* %blur_x, i64 %11351
  %11353 = bitcast i16* %11352 to <16 x i16>*
  store <16 x i16> %11349, <16 x i16>* %11353, align 2, !tbaa !399
  %11354 = shufflevector <32 x i16> %11348, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11355 = getelementptr inbounds i16, i16* %11352, i64 16
  %11356 = bitcast i16* %11355 to <16 x i16>*
  store <16 x i16> %11354, <16 x i16>* %11356, align 2, !tbaa !399
  br label %"consume blur_x609"

"consume blur_x609":                              ; preds = %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge", %"produce blur_x608"
  %.pre-phi3517 = phi i64 [ %.pre3516, %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge" ], [ %11350, %"produce blur_x608" ]
  %11357 = add nsw i64 %11138, %.pre-phi3517
  %11358 = getelementptr inbounds i16, i16* %blur_x, i64 %11357
  %11359 = bitcast i16* %11358 to <16 x i16>*
  %11360 = load <16 x i16>, <16 x i16>* %11359, align 2, !tbaa !399
  %11361 = getelementptr inbounds i16, i16* %11358, i64 16
  %11362 = bitcast i16* %11361 to <16 x i16>*
  %11363 = load <16 x i16>, <16 x i16>* %11362, align 2, !tbaa !399
  %11364 = add nsw i64 %11141, %.pre-phi3517
  %11365 = getelementptr inbounds i16, i16* %blur_x, i64 %11364
  %11366 = bitcast i16* %11365 to <16 x i16>*
  %11367 = load <16 x i16>, <16 x i16>* %11366, align 2, !tbaa !399
  %11368 = getelementptr inbounds i16, i16* %11365, i64 16
  %11369 = bitcast i16* %11368 to <16 x i16>*
  %11370 = load <16 x i16>, <16 x i16>* %11369, align 2, !tbaa !399
  %11371 = add nsw i64 %11144, %.pre-phi3517
  %11372 = getelementptr inbounds i16, i16* %blur_x, i64 %11371
  %11373 = bitcast i16* %11372 to <16 x i16>*
  %11374 = load <16 x i16>, <16 x i16>* %11373, align 2, !tbaa !399
  %11375 = getelementptr inbounds i16, i16* %11372, i64 16
  %11376 = bitcast i16* %11375 to <16 x i16>*
  %11377 = load <16 x i16>, <16 x i16>* %11376, align 2, !tbaa !399
  %11378 = add nsw i64 %11147, %.pre-phi3517
  %11379 = getelementptr inbounds i16, i16* %blur_x, i64 %11378
  %11380 = bitcast i16* %11379 to <16 x i16>*
  %11381 = load <16 x i16>, <16 x i16>* %11380, align 2, !tbaa !399
  %11382 = getelementptr inbounds i16, i16* %11379, i64 16
  %11383 = bitcast i16* %11382 to <16 x i16>*
  %11384 = load <16 x i16>, <16 x i16>* %11383, align 2, !tbaa !399
  %11385 = add nsw i64 %11150, %.pre-phi3517
  %11386 = getelementptr inbounds i16, i16* %blur_x, i64 %11385
  %11387 = bitcast i16* %11386 to <16 x i16>*
  %11388 = load <16 x i16>, <16 x i16>* %11387, align 2, !tbaa !399
  %11389 = getelementptr inbounds i16, i16* %11386, i64 16
  %11390 = bitcast i16* %11389 to <16 x i16>*
  %11391 = load <16 x i16>, <16 x i16>* %11390, align 2, !tbaa !399
  %11392 = add <16 x i16> %11367, %11360
  %11393 = add <16 x i16> %11392, %11374
  %11394 = add <16 x i16> %11393, %11381
  %11395 = add <16 x i16> %11394, %11388
  %11396 = add <16 x i16> %11370, %11363
  %11397 = add <16 x i16> %11396, %11377
  %11398 = add <16 x i16> %11397, %11384
  %11399 = add <16 x i16> %11398, %11391
  %11400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11395, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11399, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11402 = shufflevector <16 x i16> %11400, <16 x i16> %11401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11403 = lshr <32 x i16> %11402, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11404 = shufflevector <32 x i16> %11403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11405 = add nsw i64 %11154, %.pre-phi3517
  %11406 = getelementptr inbounds i16, i16* %66, i64 %11405
  %11407 = bitcast i16* %11406 to <16 x i16>*
  store <16 x i16> %11404, <16 x i16>* %11407, align 2, !tbaa !401
  %11408 = shufflevector <32 x i16> %11403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11409 = getelementptr inbounds i16, i16* %11406, i64 16
  %11410 = bitcast i16* %11409 to <16 x i16>*
  store <16 x i16> %11408, <16 x i16>* %11410, align 2, !tbaa !401
  %indvars.iv.next3329 = add nuw nsw i64 %indvars.iv3328, 1
  %.not2711 = icmp eq i64 %indvars.iv.next3329, %184
  br i1 %.not2711, label %"end for blur_y.s0.x.x.rebased603", label %"for blur_y.s0.x.x.rebased602"

"for blur_y.s0.x.x.rebased610":                   ; preds = %"for blur_y.s0.x.x.rebased610.preheader", %"consume blur_x618"
  %blur_y.s0.x.x.rebased612 = phi i32 [ %11523, %"consume blur_x618" ], [ 0, %"for blur_y.s0.x.x.rebased610.preheader" ]
  %11411 = add nsw i32 %blur_y.s0.x.x.rebased612, %t1626
  %a266 = shl nsw i32 %11411, 5
  %11412 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %11412, i32 %a266, i32 %a14
  %11413 = icmp slt i32 %11411, 1
  %11414 = icmp sgt i32 %4, %a266
  %11415 = or i1 %11413, %11414
  br i1 %11415, label %"produce blur_x616", label %"consume blur_x618"

"end for blur_y.s0.x.x.rebased611":               ; preds = %"consume blur_x618", %"end for blur_y.s0.x.x.rebased603"
  br i1 %34, label %"produce blur_x622", label %after_bb619

"produce blur_x616":                              ; preds = %"for blur_y.s0.x.x.rebased610"
  %11416 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s617 = select i1 %11416, i32 %b272, i32 %4
  %t1085 = add nsw i32 %blur_x.s0.x.v1.base.s617, %t2073
  %11417 = sext i32 %t1085 to i64
  %11418 = getelementptr inbounds i16, i16* %read_input, i64 %11417
  %11419 = getelementptr inbounds i16, i16* %11418, i64 1
  %11420 = bitcast i16* %11419 to <16 x i16>*
  %11421 = load <16 x i16>, <16 x i16>* %11420, align 2, !tbaa !396
  %11422 = getelementptr inbounds i16, i16* %11418, i64 17
  %11423 = bitcast i16* %11422 to <16 x i16>*
  %11424 = load <16 x i16>, <16 x i16>* %11423, align 2, !tbaa !396
  %11425 = bitcast i16* %11418 to <16 x i16>*
  %11426 = load <16 x i16>, <16 x i16>* %11425, align 2, !tbaa !396
  %11427 = getelementptr inbounds i16, i16* %11418, i64 16
  %11428 = bitcast i16* %11427 to <16 x i16>*
  %11429 = load <16 x i16>, <16 x i16>* %11428, align 2, !tbaa !396
  %11430 = getelementptr inbounds i16, i16* %11418, i64 2
  %11431 = bitcast i16* %11430 to <16 x i16>*
  %11432 = load <16 x i16>, <16 x i16>* %11431, align 2, !tbaa !396
  %11433 = getelementptr inbounds i16, i16* %11418, i64 18
  %11434 = bitcast i16* %11433 to <16 x i16>*
  %11435 = load <16 x i16>, <16 x i16>* %11434, align 2, !tbaa !396
  %11436 = getelementptr inbounds i16, i16* %11418, i64 4
  %11437 = bitcast i16* %11436 to <16 x i16>*
  %11438 = load <16 x i16>, <16 x i16>* %11437, align 2, !tbaa !396
  %11439 = getelementptr inbounds i16, i16* %11418, i64 20
  %11440 = bitcast i16* %11439 to <16 x i16>*
  %11441 = load <16 x i16>, <16 x i16>* %11440, align 2, !tbaa !396
  %11442 = getelementptr inbounds i16, i16* %11418, i64 3
  %11443 = bitcast i16* %11442 to <16 x i16>*
  %11444 = load <16 x i16>, <16 x i16>* %11443, align 2, !tbaa !396
  %11445 = getelementptr inbounds i16, i16* %11418, i64 19
  %11446 = bitcast i16* %11445 to <16 x i16>*
  %11447 = load <16 x i16>, <16 x i16>* %11446, align 2, !tbaa !396
  %11448 = add <16 x i16> %11426, %11421
  %11449 = add <16 x i16> %11448, %11432
  %11450 = add <16 x i16> %11449, %11438
  %11451 = add <16 x i16> %11450, %11444
  %11452 = add <16 x i16> %11429, %11424
  %11453 = add <16 x i16> %11452, %11435
  %11454 = add <16 x i16> %11453, %11441
  %11455 = add <16 x i16> %11454, %11447
  %11456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11451, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11455, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11458 = shufflevector <16 x i16> %11456, <16 x i16> %11457, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11459 = lshr <32 x i16> %11458, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11460 = shufflevector <32 x i16> %11459, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11461 = sext i32 %blur_x.s0.x.v1.base.s617 to i64
  %11462 = add nsw i64 %11461, %11286
  %11463 = getelementptr inbounds i16, i16* %blur_x, i64 %11462
  %11464 = bitcast i16* %11463 to <16 x i16>*
  store <16 x i16> %11460, <16 x i16>* %11464, align 2, !tbaa !399
  %11465 = shufflevector <32 x i16> %11459, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11466 = getelementptr inbounds i16, i16* %11463, i64 16
  %11467 = bitcast i16* %11466 to <16 x i16>*
  store <16 x i16> %11465, <16 x i16>* %11467, align 2, !tbaa !399
  br label %"consume blur_x618"

"consume blur_x618":                              ; preds = %"for blur_y.s0.x.x.rebased610", %"produce blur_x616"
  %11468 = sext i32 %b272 to i64
  %11469 = add nsw i64 %11289, %11468
  %11470 = getelementptr inbounds i16, i16* %blur_x, i64 %11469
  %11471 = bitcast i16* %11470 to <16 x i16>*
  %11472 = load <16 x i16>, <16 x i16>* %11471, align 2, !tbaa !399
  %11473 = getelementptr inbounds i16, i16* %11470, i64 16
  %11474 = bitcast i16* %11473 to <16 x i16>*
  %11475 = load <16 x i16>, <16 x i16>* %11474, align 2, !tbaa !399
  %11476 = add nsw i64 %11292, %11468
  %11477 = getelementptr inbounds i16, i16* %blur_x, i64 %11476
  %11478 = bitcast i16* %11477 to <16 x i16>*
  %11479 = load <16 x i16>, <16 x i16>* %11478, align 2, !tbaa !399
  %11480 = getelementptr inbounds i16, i16* %11477, i64 16
  %11481 = bitcast i16* %11480 to <16 x i16>*
  %11482 = load <16 x i16>, <16 x i16>* %11481, align 2, !tbaa !399
  %11483 = add nsw i64 %11295, %11468
  %11484 = getelementptr inbounds i16, i16* %blur_x, i64 %11483
  %11485 = bitcast i16* %11484 to <16 x i16>*
  %11486 = load <16 x i16>, <16 x i16>* %11485, align 2, !tbaa !399
  %11487 = getelementptr inbounds i16, i16* %11484, i64 16
  %11488 = bitcast i16* %11487 to <16 x i16>*
  %11489 = load <16 x i16>, <16 x i16>* %11488, align 2, !tbaa !399
  %11490 = add nsw i64 %11298, %11468
  %11491 = getelementptr inbounds i16, i16* %blur_x, i64 %11490
  %11492 = bitcast i16* %11491 to <16 x i16>*
  %11493 = load <16 x i16>, <16 x i16>* %11492, align 2, !tbaa !399
  %11494 = getelementptr inbounds i16, i16* %11491, i64 16
  %11495 = bitcast i16* %11494 to <16 x i16>*
  %11496 = load <16 x i16>, <16 x i16>* %11495, align 2, !tbaa !399
  %11497 = add nsw i64 %11301, %11468
  %11498 = getelementptr inbounds i16, i16* %blur_x, i64 %11497
  %11499 = bitcast i16* %11498 to <16 x i16>*
  %11500 = load <16 x i16>, <16 x i16>* %11499, align 2, !tbaa !399
  %11501 = getelementptr inbounds i16, i16* %11498, i64 16
  %11502 = bitcast i16* %11501 to <16 x i16>*
  %11503 = load <16 x i16>, <16 x i16>* %11502, align 2, !tbaa !399
  %11504 = add <16 x i16> %11479, %11472
  %11505 = add <16 x i16> %11504, %11486
  %11506 = add <16 x i16> %11505, %11493
  %11507 = add <16 x i16> %11506, %11500
  %11508 = add <16 x i16> %11482, %11475
  %11509 = add <16 x i16> %11508, %11489
  %11510 = add <16 x i16> %11509, %11496
  %11511 = add <16 x i16> %11510, %11503
  %11512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11507, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11511, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11514 = shufflevector <16 x i16> %11512, <16 x i16> %11513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11515 = lshr <32 x i16> %11514, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11516 = shufflevector <32 x i16> %11515, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11517 = add nsw i64 %11305, %11468
  %11518 = getelementptr inbounds i16, i16* %66, i64 %11517
  %11519 = bitcast i16* %11518 to <16 x i16>*
  store <16 x i16> %11516, <16 x i16>* %11519, align 2, !tbaa !401
  %11520 = shufflevector <32 x i16> %11515, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11521 = getelementptr inbounds i16, i16* %11518, i64 16
  %11522 = bitcast i16* %11521 to <16 x i16>*
  store <16 x i16> %11520, <16 x i16>* %11522, align 2, !tbaa !401
  %11523 = add nuw nsw i32 %blur_y.s0.x.x.rebased612, 1
  %.not2710 = icmp eq i32 %11523, %t1683
  br i1 %.not2710, label %"end for blur_y.s0.x.x.rebased611", label %"for blur_y.s0.x.x.rebased610"

after_bb619:                                      ; preds = %"end for blur_y.s0.x.x.rebased611", %"produce blur_x622"
  br i1 %100, label %"for blur_y.s0.x.x.rebased624.preheader", label %"end for blur_y.s0.x.x.rebased625", !prof !386

"for blur_y.s0.x.x.rebased624.preheader":         ; preds = %after_bb619
  %11524 = sext i32 %t1706 to i64
  %11525 = zext i32 %.pre-phi3445 to i64
  %11526 = mul nsw i64 %11525, %112
  %11527 = sub nsw i64 %11526, %96
  %11528 = zext i32 %.pre-phi to i64
  %11529 = mul nsw i64 %11528, %112
  %11530 = sub nsw i64 %11529, %96
  %11531 = zext i32 %.pre-phi3449 to i64
  %11532 = mul nsw i64 %11531, %112
  %11533 = sub nsw i64 %11532, %96
  %11534 = zext i32 %.pre-phi3457 to i64
  %11535 = mul nsw i64 %11534, %112
  %11536 = sub nsw i64 %11535, %96
  %11537 = zext i32 %.pre-phi3453 to i64
  %11538 = mul nsw i64 %11537, %112
  %11539 = sub nsw i64 %11538, %96
  %11540 = sext i32 %a26 to i64
  %11541 = add nsw i64 %11540, 24
  %11542 = mul nsw i64 %11541, %113
  %11543 = add nsw i64 %11542, %116
  br label %"for blur_y.s0.x.x.rebased624"

"produce blur_x622":                              ; preds = %"end for blur_y.s0.x.x.rebased611"
  %11544 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %11545 = getelementptr inbounds i16, i16* %11544, i64 -31
  %11546 = bitcast i16* %11545 to <16 x i16>*
  %11547 = load <16 x i16>, <16 x i16>* %11546, align 2, !tbaa !396
  %11548 = getelementptr inbounds i16, i16* %11544, i64 -15
  %11549 = bitcast i16* %11548 to <16 x i16>*
  %11550 = load <16 x i16>, <16 x i16>* %11549, align 2, !tbaa !396
  %11551 = getelementptr inbounds i16, i16* %11544, i64 -32
  %11552 = bitcast i16* %11551 to <16 x i16>*
  %11553 = load <16 x i16>, <16 x i16>* %11552, align 2, !tbaa !396
  %11554 = getelementptr inbounds i16, i16* %11544, i64 -16
  %11555 = bitcast i16* %11554 to <16 x i16>*
  %11556 = load <16 x i16>, <16 x i16>* %11555, align 2, !tbaa !396
  %11557 = getelementptr inbounds i16, i16* %11544, i64 -30
  %11558 = bitcast i16* %11557 to <16 x i16>*
  %11559 = load <16 x i16>, <16 x i16>* %11558, align 2, !tbaa !396
  %11560 = getelementptr inbounds i16, i16* %11544, i64 -14
  %11561 = bitcast i16* %11560 to <16 x i16>*
  %11562 = load <16 x i16>, <16 x i16>* %11561, align 2, !tbaa !396
  %11563 = getelementptr inbounds i16, i16* %11544, i64 -28
  %11564 = bitcast i16* %11563 to <16 x i16>*
  %11565 = load <16 x i16>, <16 x i16>* %11564, align 2, !tbaa !396
  %11566 = getelementptr inbounds i16, i16* %11544, i64 -12
  %11567 = bitcast i16* %11566 to <16 x i16>*
  %11568 = load <16 x i16>, <16 x i16>* %11567, align 2, !tbaa !396
  %11569 = getelementptr inbounds i16, i16* %11544, i64 -29
  %11570 = bitcast i16* %11569 to <16 x i16>*
  %11571 = load <16 x i16>, <16 x i16>* %11570, align 2, !tbaa !396
  %11572 = getelementptr inbounds i16, i16* %11544, i64 -13
  %11573 = bitcast i16* %11572 to <16 x i16>*
  %11574 = load <16 x i16>, <16 x i16>* %11573, align 2, !tbaa !396
  %11575 = add <16 x i16> %11553, %11547
  %11576 = add <16 x i16> %11575, %11559
  %11577 = add <16 x i16> %11576, %11565
  %11578 = add <16 x i16> %11577, %11571
  %11579 = add <16 x i16> %11556, %11550
  %11580 = add <16 x i16> %11579, %11562
  %11581 = add <16 x i16> %11580, %11568
  %11582 = add <16 x i16> %11581, %11574
  %11583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11578, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11584 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11582, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11585 = shufflevector <16 x i16> %11583, <16 x i16> %11584, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11586 = lshr <32 x i16> %11585, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11587 = shufflevector <32 x i16> %11586, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11588 = zext i32 %.pre-phi3457 to i64
  %11589 = mul nsw i64 %97, %11588
  %11590 = add nsw i64 %99, %11589
  %11591 = getelementptr inbounds i16, i16* %blur_x, i64 %11590
  %11592 = getelementptr inbounds i16, i16* %11591, i64 -32
  %11593 = bitcast i16* %11592 to <16 x i16>*
  store <16 x i16> %11587, <16 x i16>* %11593, align 2, !tbaa !399
  %11594 = shufflevector <32 x i16> %11586, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11595 = getelementptr inbounds i16, i16* %11591, i64 -16
  %11596 = bitcast i16* %11595 to <16 x i16>*
  store <16 x i16> %11594, <16 x i16>* %11596, align 2, !tbaa !399
  %11597 = zext i32 %.pre-phi3445 to i64
  %11598 = mul nsw i64 %11597, %112
  %11599 = add nsw i64 %11598, %94
  %11600 = getelementptr inbounds i16, i16* %blur_x, i64 %11599
  %11601 = getelementptr inbounds i16, i16* %11600, i64 -32
  %11602 = bitcast i16* %11601 to <16 x i16>*
  %11603 = load <16 x i16>, <16 x i16>* %11602, align 2, !tbaa !399
  %11604 = getelementptr inbounds i16, i16* %11600, i64 -16
  %11605 = bitcast i16* %11604 to <16 x i16>*
  %11606 = load <16 x i16>, <16 x i16>* %11605, align 2, !tbaa !399
  %11607 = zext i32 %.pre-phi to i64
  %11608 = mul nsw i64 %11607, %112
  %11609 = add nsw i64 %11608, %94
  %11610 = getelementptr inbounds i16, i16* %blur_x, i64 %11609
  %11611 = getelementptr inbounds i16, i16* %11610, i64 -32
  %11612 = bitcast i16* %11611 to <16 x i16>*
  %11613 = load <16 x i16>, <16 x i16>* %11612, align 2, !tbaa !399
  %11614 = getelementptr inbounds i16, i16* %11610, i64 -16
  %11615 = bitcast i16* %11614 to <16 x i16>*
  %11616 = load <16 x i16>, <16 x i16>* %11615, align 2, !tbaa !399
  %11617 = zext i32 %.pre-phi3449 to i64
  %11618 = mul nsw i64 %11617, %112
  %11619 = add nsw i64 %11618, %94
  %11620 = getelementptr inbounds i16, i16* %blur_x, i64 %11619
  %11621 = getelementptr inbounds i16, i16* %11620, i64 -32
  %11622 = bitcast i16* %11621 to <16 x i16>*
  %11623 = load <16 x i16>, <16 x i16>* %11622, align 2, !tbaa !399
  %11624 = getelementptr inbounds i16, i16* %11620, i64 -16
  %11625 = bitcast i16* %11624 to <16 x i16>*
  %11626 = load <16 x i16>, <16 x i16>* %11625, align 2, !tbaa !399
  %11627 = mul nsw i64 %11588, %112
  %11628 = add nsw i64 %11627, %94
  %11629 = getelementptr inbounds i16, i16* %blur_x, i64 %11628
  %11630 = getelementptr inbounds i16, i16* %11629, i64 -32
  %11631 = bitcast i16* %11630 to <16 x i16>*
  %11632 = load <16 x i16>, <16 x i16>* %11631, align 2, !tbaa !399
  %11633 = getelementptr inbounds i16, i16* %11629, i64 -16
  %11634 = bitcast i16* %11633 to <16 x i16>*
  %11635 = load <16 x i16>, <16 x i16>* %11634, align 2, !tbaa !399
  %11636 = zext i32 %.pre-phi3453 to i64
  %11637 = mul nsw i64 %11636, %112
  %11638 = add nsw i64 %11637, %94
  %11639 = getelementptr inbounds i16, i16* %blur_x, i64 %11638
  %11640 = getelementptr inbounds i16, i16* %11639, i64 -32
  %11641 = bitcast i16* %11640 to <16 x i16>*
  %11642 = load <16 x i16>, <16 x i16>* %11641, align 2, !tbaa !399
  %11643 = getelementptr inbounds i16, i16* %11639, i64 -16
  %11644 = bitcast i16* %11643 to <16 x i16>*
  %11645 = load <16 x i16>, <16 x i16>* %11644, align 2, !tbaa !399
  %11646 = add <16 x i16> %11613, %11603
  %11647 = add <16 x i16> %11646, %11623
  %11648 = add <16 x i16> %11647, %11632
  %11649 = add <16 x i16> %11648, %11642
  %11650 = add <16 x i16> %11616, %11606
  %11651 = add <16 x i16> %11650, %11626
  %11652 = add <16 x i16> %11651, %11635
  %11653 = add <16 x i16> %11652, %11645
  %11654 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11649, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11655 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11653, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11656 = shufflevector <16 x i16> %11654, <16 x i16> %11655, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11657 = lshr <32 x i16> %11656, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11658 = shufflevector <32 x i16> %11657, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11659 = sext i32 %a26 to i64
  %11660 = add nsw i64 %11659, 24
  %11661 = mul nsw i64 %11660, %113
  %11662 = add nsw i64 %115, %11661
  %11663 = getelementptr inbounds i16, i16* %66, i64 %11662
  %11664 = getelementptr inbounds i16, i16* %11663, i64 -32
  %11665 = bitcast i16* %11664 to <16 x i16>*
  store <16 x i16> %11658, <16 x i16>* %11665, align 2, !tbaa !401
  %11666 = shufflevector <32 x i16> %11657, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11667 = getelementptr inbounds i16, i16* %11663, i64 -16
  %11668 = bitcast i16* %11667 to <16 x i16>*
  store <16 x i16> %11666, <16 x i16>* %11668, align 2, !tbaa !401
  br label %after_bb619

"for blur_y.s0.x.x.rebased624":                   ; preds = %"for blur_y.s0.x.x.rebased624.preheader", %"consume blur_x631"
  %indvars.iv3331 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased624.preheader" ], [ %indvars.iv.next3332, %"consume blur_x631" ]
  %11669 = add nsw i64 %indvars.iv3331, %101
  %11670 = icmp slt i64 %11669, 1
  %11671 = trunc i64 %11669 to i32
  %11672 = shl nsw i32 %11671, 5
  %11673 = icmp sgt i32 %4, %11672
  %11674 = or i1 %11670, %11673
  br i1 %11674, label %"produce blur_x630", label %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge"

"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased624"
  %.pre3518 = shl nsw i64 %11669, 5
  br label %"consume blur_x631"

"end for blur_y.s0.x.x.rebased625":               ; preds = %"consume blur_x631", %after_bb619
  br i1 %102, label %"for blur_y.s0.x.x.rebased632.preheader", label %"end for blur_y.s0.x.x.rebased633", !prof !386

"for blur_y.s0.x.x.rebased632.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased625"
  %11675 = sext i32 %t1706 to i64
  %11676 = zext i32 %.pre-phi3445 to i64
  %11677 = mul nsw i64 %11676, %112
  %11678 = sub nsw i64 %11677, %96
  %11679 = zext i32 %.pre-phi to i64
  %11680 = mul nsw i64 %11679, %112
  %11681 = sub nsw i64 %11680, %96
  %11682 = zext i32 %.pre-phi3449 to i64
  %11683 = mul nsw i64 %11682, %112
  %11684 = sub nsw i64 %11683, %96
  %11685 = zext i32 %.pre-phi3457 to i64
  %11686 = mul nsw i64 %11685, %112
  %11687 = sub nsw i64 %11686, %96
  %11688 = zext i32 %.pre-phi3453 to i64
  %11689 = mul nsw i64 %11688, %112
  %11690 = sub nsw i64 %11689, %96
  %11691 = sext i32 %a26 to i64
  %11692 = add nsw i64 %11691, 24
  %11693 = mul nsw i64 %11692, %113
  %11694 = add nsw i64 %11693, %116
  br label %"for blur_y.s0.x.x.rebased632"

"produce blur_x630":                              ; preds = %"for blur_y.s0.x.x.rebased624"
  %t1096 = add nsw i32 %11672, %t2089
  %11695 = sext i32 %t1096 to i64
  %11696 = getelementptr inbounds i16, i16* %read_input, i64 %11695
  %11697 = getelementptr inbounds i16, i16* %11696, i64 1
  %11698 = bitcast i16* %11697 to <16 x i16>*
  %11699 = load <16 x i16>, <16 x i16>* %11698, align 2, !tbaa !396
  %11700 = getelementptr inbounds i16, i16* %11696, i64 17
  %11701 = bitcast i16* %11700 to <16 x i16>*
  %11702 = load <16 x i16>, <16 x i16>* %11701, align 2, !tbaa !396
  %11703 = bitcast i16* %11696 to <16 x i16>*
  %11704 = load <16 x i16>, <16 x i16>* %11703, align 2, !tbaa !396
  %11705 = getelementptr inbounds i16, i16* %11696, i64 16
  %11706 = bitcast i16* %11705 to <16 x i16>*
  %11707 = load <16 x i16>, <16 x i16>* %11706, align 2, !tbaa !396
  %11708 = getelementptr inbounds i16, i16* %11696, i64 2
  %11709 = bitcast i16* %11708 to <16 x i16>*
  %11710 = load <16 x i16>, <16 x i16>* %11709, align 2, !tbaa !396
  %11711 = getelementptr inbounds i16, i16* %11696, i64 18
  %11712 = bitcast i16* %11711 to <16 x i16>*
  %11713 = load <16 x i16>, <16 x i16>* %11712, align 2, !tbaa !396
  %11714 = getelementptr inbounds i16, i16* %11696, i64 4
  %11715 = bitcast i16* %11714 to <16 x i16>*
  %11716 = load <16 x i16>, <16 x i16>* %11715, align 2, !tbaa !396
  %11717 = getelementptr inbounds i16, i16* %11696, i64 20
  %11718 = bitcast i16* %11717 to <16 x i16>*
  %11719 = load <16 x i16>, <16 x i16>* %11718, align 2, !tbaa !396
  %11720 = getelementptr inbounds i16, i16* %11696, i64 3
  %11721 = bitcast i16* %11720 to <16 x i16>*
  %11722 = load <16 x i16>, <16 x i16>* %11721, align 2, !tbaa !396
  %11723 = getelementptr inbounds i16, i16* %11696, i64 19
  %11724 = bitcast i16* %11723 to <16 x i16>*
  %11725 = load <16 x i16>, <16 x i16>* %11724, align 2, !tbaa !396
  %11726 = add <16 x i16> %11704, %11699
  %11727 = add <16 x i16> %11726, %11710
  %11728 = add <16 x i16> %11727, %11716
  %11729 = add <16 x i16> %11728, %11722
  %11730 = add <16 x i16> %11707, %11702
  %11731 = add <16 x i16> %11730, %11713
  %11732 = add <16 x i16> %11731, %11719
  %11733 = add <16 x i16> %11732, %11725
  %11734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11729, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11735 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11733, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11736 = shufflevector <16 x i16> %11734, <16 x i16> %11735, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11737 = lshr <32 x i16> %11736, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11738 = shufflevector <32 x i16> %11737, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11739 = shl nsw i64 %11669, 5
  %11740 = add nsw i64 %11739, %11524
  %11741 = getelementptr inbounds i16, i16* %blur_x, i64 %11740
  %11742 = bitcast i16* %11741 to <16 x i16>*
  store <16 x i16> %11738, <16 x i16>* %11742, align 2, !tbaa !399
  %11743 = shufflevector <32 x i16> %11737, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11744 = getelementptr inbounds i16, i16* %11741, i64 16
  %11745 = bitcast i16* %11744 to <16 x i16>*
  store <16 x i16> %11743, <16 x i16>* %11745, align 2, !tbaa !399
  br label %"consume blur_x631"

"consume blur_x631":                              ; preds = %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge", %"produce blur_x630"
  %.pre-phi3519 = phi i64 [ %.pre3518, %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge" ], [ %11739, %"produce blur_x630" ]
  %11746 = add nsw i64 %11527, %.pre-phi3519
  %11747 = getelementptr inbounds i16, i16* %blur_x, i64 %11746
  %11748 = bitcast i16* %11747 to <16 x i16>*
  %11749 = load <16 x i16>, <16 x i16>* %11748, align 2, !tbaa !399
  %11750 = getelementptr inbounds i16, i16* %11747, i64 16
  %11751 = bitcast i16* %11750 to <16 x i16>*
  %11752 = load <16 x i16>, <16 x i16>* %11751, align 2, !tbaa !399
  %11753 = add nsw i64 %11530, %.pre-phi3519
  %11754 = getelementptr inbounds i16, i16* %blur_x, i64 %11753
  %11755 = bitcast i16* %11754 to <16 x i16>*
  %11756 = load <16 x i16>, <16 x i16>* %11755, align 2, !tbaa !399
  %11757 = getelementptr inbounds i16, i16* %11754, i64 16
  %11758 = bitcast i16* %11757 to <16 x i16>*
  %11759 = load <16 x i16>, <16 x i16>* %11758, align 2, !tbaa !399
  %11760 = add nsw i64 %11533, %.pre-phi3519
  %11761 = getelementptr inbounds i16, i16* %blur_x, i64 %11760
  %11762 = bitcast i16* %11761 to <16 x i16>*
  %11763 = load <16 x i16>, <16 x i16>* %11762, align 2, !tbaa !399
  %11764 = getelementptr inbounds i16, i16* %11761, i64 16
  %11765 = bitcast i16* %11764 to <16 x i16>*
  %11766 = load <16 x i16>, <16 x i16>* %11765, align 2, !tbaa !399
  %11767 = add nsw i64 %11536, %.pre-phi3519
  %11768 = getelementptr inbounds i16, i16* %blur_x, i64 %11767
  %11769 = bitcast i16* %11768 to <16 x i16>*
  %11770 = load <16 x i16>, <16 x i16>* %11769, align 2, !tbaa !399
  %11771 = getelementptr inbounds i16, i16* %11768, i64 16
  %11772 = bitcast i16* %11771 to <16 x i16>*
  %11773 = load <16 x i16>, <16 x i16>* %11772, align 2, !tbaa !399
  %11774 = add nsw i64 %11539, %.pre-phi3519
  %11775 = getelementptr inbounds i16, i16* %blur_x, i64 %11774
  %11776 = bitcast i16* %11775 to <16 x i16>*
  %11777 = load <16 x i16>, <16 x i16>* %11776, align 2, !tbaa !399
  %11778 = getelementptr inbounds i16, i16* %11775, i64 16
  %11779 = bitcast i16* %11778 to <16 x i16>*
  %11780 = load <16 x i16>, <16 x i16>* %11779, align 2, !tbaa !399
  %11781 = add <16 x i16> %11756, %11749
  %11782 = add <16 x i16> %11781, %11763
  %11783 = add <16 x i16> %11782, %11770
  %11784 = add <16 x i16> %11783, %11777
  %11785 = add <16 x i16> %11759, %11752
  %11786 = add <16 x i16> %11785, %11766
  %11787 = add <16 x i16> %11786, %11773
  %11788 = add <16 x i16> %11787, %11780
  %11789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11784, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11788, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11791 = shufflevector <16 x i16> %11789, <16 x i16> %11790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11792 = lshr <32 x i16> %11791, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11793 = shufflevector <32 x i16> %11792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11794 = add nsw i64 %11543, %.pre-phi3519
  %11795 = getelementptr inbounds i16, i16* %66, i64 %11794
  %11796 = bitcast i16* %11795 to <16 x i16>*
  store <16 x i16> %11793, <16 x i16>* %11796, align 2, !tbaa !401
  %11797 = shufflevector <32 x i16> %11792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11798 = getelementptr inbounds i16, i16* %11795, i64 16
  %11799 = bitcast i16* %11798 to <16 x i16>*
  store <16 x i16> %11797, <16 x i16>* %11799, align 2, !tbaa !401
  %indvars.iv.next3332 = add nuw nsw i64 %indvars.iv3331, 1
  %.not2709 = icmp eq i64 %indvars.iv.next3332, %184
  br i1 %.not2709, label %"end for blur_y.s0.x.x.rebased625", label %"for blur_y.s0.x.x.rebased624"

"for blur_y.s0.x.x.rebased632":                   ; preds = %"for blur_y.s0.x.x.rebased632.preheader", %"consume blur_x640"
  %blur_y.s0.x.x.rebased634 = phi i32 [ %11912, %"consume blur_x640" ], [ 0, %"for blur_y.s0.x.x.rebased632.preheader" ]
  %11800 = add nsw i32 %blur_y.s0.x.x.rebased634, %t1626
  %a273 = shl nsw i32 %11800, 5
  %11801 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %11801, i32 %a273, i32 %a14
  %11802 = icmp slt i32 %11800, 1
  %11803 = icmp sgt i32 %4, %a273
  %11804 = or i1 %11802, %11803
  br i1 %11804, label %"produce blur_x638", label %"consume blur_x640"

"end for blur_y.s0.x.x.rebased633":               ; preds = %"consume blur_x640", %"end for blur_y.s0.x.x.rebased625"
  br i1 %34, label %"produce blur_x644", label %after_bb641

"produce blur_x638":                              ; preds = %"for blur_y.s0.x.x.rebased632"
  %11805 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s639 = select i1 %11805, i32 %b279, i32 %4
  %t1101 = add nsw i32 %blur_x.s0.x.v1.base.s639, %t2089
  %11806 = sext i32 %t1101 to i64
  %11807 = getelementptr inbounds i16, i16* %read_input, i64 %11806
  %11808 = getelementptr inbounds i16, i16* %11807, i64 1
  %11809 = bitcast i16* %11808 to <16 x i16>*
  %11810 = load <16 x i16>, <16 x i16>* %11809, align 2, !tbaa !396
  %11811 = getelementptr inbounds i16, i16* %11807, i64 17
  %11812 = bitcast i16* %11811 to <16 x i16>*
  %11813 = load <16 x i16>, <16 x i16>* %11812, align 2, !tbaa !396
  %11814 = bitcast i16* %11807 to <16 x i16>*
  %11815 = load <16 x i16>, <16 x i16>* %11814, align 2, !tbaa !396
  %11816 = getelementptr inbounds i16, i16* %11807, i64 16
  %11817 = bitcast i16* %11816 to <16 x i16>*
  %11818 = load <16 x i16>, <16 x i16>* %11817, align 2, !tbaa !396
  %11819 = getelementptr inbounds i16, i16* %11807, i64 2
  %11820 = bitcast i16* %11819 to <16 x i16>*
  %11821 = load <16 x i16>, <16 x i16>* %11820, align 2, !tbaa !396
  %11822 = getelementptr inbounds i16, i16* %11807, i64 18
  %11823 = bitcast i16* %11822 to <16 x i16>*
  %11824 = load <16 x i16>, <16 x i16>* %11823, align 2, !tbaa !396
  %11825 = getelementptr inbounds i16, i16* %11807, i64 4
  %11826 = bitcast i16* %11825 to <16 x i16>*
  %11827 = load <16 x i16>, <16 x i16>* %11826, align 2, !tbaa !396
  %11828 = getelementptr inbounds i16, i16* %11807, i64 20
  %11829 = bitcast i16* %11828 to <16 x i16>*
  %11830 = load <16 x i16>, <16 x i16>* %11829, align 2, !tbaa !396
  %11831 = getelementptr inbounds i16, i16* %11807, i64 3
  %11832 = bitcast i16* %11831 to <16 x i16>*
  %11833 = load <16 x i16>, <16 x i16>* %11832, align 2, !tbaa !396
  %11834 = getelementptr inbounds i16, i16* %11807, i64 19
  %11835 = bitcast i16* %11834 to <16 x i16>*
  %11836 = load <16 x i16>, <16 x i16>* %11835, align 2, !tbaa !396
  %11837 = add <16 x i16> %11815, %11810
  %11838 = add <16 x i16> %11837, %11821
  %11839 = add <16 x i16> %11838, %11827
  %11840 = add <16 x i16> %11839, %11833
  %11841 = add <16 x i16> %11818, %11813
  %11842 = add <16 x i16> %11841, %11824
  %11843 = add <16 x i16> %11842, %11830
  %11844 = add <16 x i16> %11843, %11836
  %11845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11840, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11846 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11844, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11847 = shufflevector <16 x i16> %11845, <16 x i16> %11846, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11848 = lshr <32 x i16> %11847, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11849 = shufflevector <32 x i16> %11848, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11850 = sext i32 %blur_x.s0.x.v1.base.s639 to i64
  %11851 = add nsw i64 %11850, %11675
  %11852 = getelementptr inbounds i16, i16* %blur_x, i64 %11851
  %11853 = bitcast i16* %11852 to <16 x i16>*
  store <16 x i16> %11849, <16 x i16>* %11853, align 2, !tbaa !399
  %11854 = shufflevector <32 x i16> %11848, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11855 = getelementptr inbounds i16, i16* %11852, i64 16
  %11856 = bitcast i16* %11855 to <16 x i16>*
  store <16 x i16> %11854, <16 x i16>* %11856, align 2, !tbaa !399
  br label %"consume blur_x640"

"consume blur_x640":                              ; preds = %"for blur_y.s0.x.x.rebased632", %"produce blur_x638"
  %11857 = sext i32 %b279 to i64
  %11858 = add nsw i64 %11678, %11857
  %11859 = getelementptr inbounds i16, i16* %blur_x, i64 %11858
  %11860 = bitcast i16* %11859 to <16 x i16>*
  %11861 = load <16 x i16>, <16 x i16>* %11860, align 2, !tbaa !399
  %11862 = getelementptr inbounds i16, i16* %11859, i64 16
  %11863 = bitcast i16* %11862 to <16 x i16>*
  %11864 = load <16 x i16>, <16 x i16>* %11863, align 2, !tbaa !399
  %11865 = add nsw i64 %11681, %11857
  %11866 = getelementptr inbounds i16, i16* %blur_x, i64 %11865
  %11867 = bitcast i16* %11866 to <16 x i16>*
  %11868 = load <16 x i16>, <16 x i16>* %11867, align 2, !tbaa !399
  %11869 = getelementptr inbounds i16, i16* %11866, i64 16
  %11870 = bitcast i16* %11869 to <16 x i16>*
  %11871 = load <16 x i16>, <16 x i16>* %11870, align 2, !tbaa !399
  %11872 = add nsw i64 %11684, %11857
  %11873 = getelementptr inbounds i16, i16* %blur_x, i64 %11872
  %11874 = bitcast i16* %11873 to <16 x i16>*
  %11875 = load <16 x i16>, <16 x i16>* %11874, align 2, !tbaa !399
  %11876 = getelementptr inbounds i16, i16* %11873, i64 16
  %11877 = bitcast i16* %11876 to <16 x i16>*
  %11878 = load <16 x i16>, <16 x i16>* %11877, align 2, !tbaa !399
  %11879 = add nsw i64 %11687, %11857
  %11880 = getelementptr inbounds i16, i16* %blur_x, i64 %11879
  %11881 = bitcast i16* %11880 to <16 x i16>*
  %11882 = load <16 x i16>, <16 x i16>* %11881, align 2, !tbaa !399
  %11883 = getelementptr inbounds i16, i16* %11880, i64 16
  %11884 = bitcast i16* %11883 to <16 x i16>*
  %11885 = load <16 x i16>, <16 x i16>* %11884, align 2, !tbaa !399
  %11886 = add nsw i64 %11690, %11857
  %11887 = getelementptr inbounds i16, i16* %blur_x, i64 %11886
  %11888 = bitcast i16* %11887 to <16 x i16>*
  %11889 = load <16 x i16>, <16 x i16>* %11888, align 2, !tbaa !399
  %11890 = getelementptr inbounds i16, i16* %11887, i64 16
  %11891 = bitcast i16* %11890 to <16 x i16>*
  %11892 = load <16 x i16>, <16 x i16>* %11891, align 2, !tbaa !399
  %11893 = add <16 x i16> %11868, %11861
  %11894 = add <16 x i16> %11893, %11875
  %11895 = add <16 x i16> %11894, %11882
  %11896 = add <16 x i16> %11895, %11889
  %11897 = add <16 x i16> %11871, %11864
  %11898 = add <16 x i16> %11897, %11878
  %11899 = add <16 x i16> %11898, %11885
  %11900 = add <16 x i16> %11899, %11892
  %11901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11896, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11902 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11900, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11903 = shufflevector <16 x i16> %11901, <16 x i16> %11902, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11904 = lshr <32 x i16> %11903, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11905 = shufflevector <32 x i16> %11904, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11906 = add nsw i64 %11694, %11857
  %11907 = getelementptr inbounds i16, i16* %66, i64 %11906
  %11908 = bitcast i16* %11907 to <16 x i16>*
  store <16 x i16> %11905, <16 x i16>* %11908, align 2, !tbaa !401
  %11909 = shufflevector <32 x i16> %11904, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11910 = getelementptr inbounds i16, i16* %11907, i64 16
  %11911 = bitcast i16* %11910 to <16 x i16>*
  store <16 x i16> %11909, <16 x i16>* %11911, align 2, !tbaa !401
  %11912 = add nuw nsw i32 %blur_y.s0.x.x.rebased634, 1
  %.not2708 = icmp eq i32 %11912, %t1683
  br i1 %.not2708, label %"end for blur_y.s0.x.x.rebased633", label %"for blur_y.s0.x.x.rebased632"

after_bb641:                                      ; preds = %"end for blur_y.s0.x.x.rebased633", %"produce blur_x644"
  br i1 %100, label %"for blur_y.s0.x.x.rebased646.preheader", label %"end for blur_y.s0.x.x.rebased647", !prof !386

"for blur_y.s0.x.x.rebased646.preheader":         ; preds = %after_bb641
  %11913 = sext i32 %t1722 to i64
  %11914 = zext i32 %.pre-phi3449 to i64
  %11915 = mul nsw i64 %11914, %112
  %11916 = sub nsw i64 %11915, %96
  %11917 = zext i32 %.pre-phi3445 to i64
  %11918 = mul nsw i64 %11917, %112
  %11919 = sub nsw i64 %11918, %96
  %11920 = zext i32 %.pre-phi3453 to i64
  %11921 = mul nsw i64 %11920, %112
  %11922 = sub nsw i64 %11921, %96
  %11923 = zext i32 %.pre-phi3463 to i64
  %11924 = mul nsw i64 %11923, %112
  %11925 = sub nsw i64 %11924, %96
  %11926 = zext i32 %.pre-phi3457 to i64
  %11927 = mul nsw i64 %11926, %112
  %11928 = sub nsw i64 %11927, %96
  %11929 = sext i32 %a26 to i64
  %11930 = add nsw i64 %11929, 25
  %11931 = mul nsw i64 %11930, %113
  %11932 = add nsw i64 %11931, %116
  br label %"for blur_y.s0.x.x.rebased646"

"produce blur_x644":                              ; preds = %"end for blur_y.s0.x.x.rebased633"
  %11933 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %11934 = getelementptr inbounds i16, i16* %11933, i64 -31
  %11935 = bitcast i16* %11934 to <16 x i16>*
  %11936 = load <16 x i16>, <16 x i16>* %11935, align 2, !tbaa !396
  %11937 = getelementptr inbounds i16, i16* %11933, i64 -15
  %11938 = bitcast i16* %11937 to <16 x i16>*
  %11939 = load <16 x i16>, <16 x i16>* %11938, align 2, !tbaa !396
  %11940 = getelementptr inbounds i16, i16* %11933, i64 -32
  %11941 = bitcast i16* %11940 to <16 x i16>*
  %11942 = load <16 x i16>, <16 x i16>* %11941, align 2, !tbaa !396
  %11943 = getelementptr inbounds i16, i16* %11933, i64 -16
  %11944 = bitcast i16* %11943 to <16 x i16>*
  %11945 = load <16 x i16>, <16 x i16>* %11944, align 2, !tbaa !396
  %11946 = getelementptr inbounds i16, i16* %11933, i64 -30
  %11947 = bitcast i16* %11946 to <16 x i16>*
  %11948 = load <16 x i16>, <16 x i16>* %11947, align 2, !tbaa !396
  %11949 = getelementptr inbounds i16, i16* %11933, i64 -14
  %11950 = bitcast i16* %11949 to <16 x i16>*
  %11951 = load <16 x i16>, <16 x i16>* %11950, align 2, !tbaa !396
  %11952 = getelementptr inbounds i16, i16* %11933, i64 -28
  %11953 = bitcast i16* %11952 to <16 x i16>*
  %11954 = load <16 x i16>, <16 x i16>* %11953, align 2, !tbaa !396
  %11955 = getelementptr inbounds i16, i16* %11933, i64 -12
  %11956 = bitcast i16* %11955 to <16 x i16>*
  %11957 = load <16 x i16>, <16 x i16>* %11956, align 2, !tbaa !396
  %11958 = getelementptr inbounds i16, i16* %11933, i64 -29
  %11959 = bitcast i16* %11958 to <16 x i16>*
  %11960 = load <16 x i16>, <16 x i16>* %11959, align 2, !tbaa !396
  %11961 = getelementptr inbounds i16, i16* %11933, i64 -13
  %11962 = bitcast i16* %11961 to <16 x i16>*
  %11963 = load <16 x i16>, <16 x i16>* %11962, align 2, !tbaa !396
  %11964 = add <16 x i16> %11942, %11936
  %11965 = add <16 x i16> %11964, %11948
  %11966 = add <16 x i16> %11965, %11954
  %11967 = add <16 x i16> %11966, %11960
  %11968 = add <16 x i16> %11945, %11939
  %11969 = add <16 x i16> %11968, %11951
  %11970 = add <16 x i16> %11969, %11957
  %11971 = add <16 x i16> %11970, %11963
  %11972 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11967, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11973 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11971, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11974 = shufflevector <16 x i16> %11972, <16 x i16> %11973, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11975 = lshr <32 x i16> %11974, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11976 = shufflevector <32 x i16> %11975, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11977 = zext i32 %.pre-phi3463 to i64
  %11978 = mul nsw i64 %97, %11977
  %11979 = add nsw i64 %99, %11978
  %11980 = getelementptr inbounds i16, i16* %blur_x, i64 %11979
  %11981 = getelementptr inbounds i16, i16* %11980, i64 -32
  %11982 = bitcast i16* %11981 to <16 x i16>*
  store <16 x i16> %11976, <16 x i16>* %11982, align 2, !tbaa !399
  %11983 = shufflevector <32 x i16> %11975, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11984 = getelementptr inbounds i16, i16* %11980, i64 -16
  %11985 = bitcast i16* %11984 to <16 x i16>*
  store <16 x i16> %11983, <16 x i16>* %11985, align 2, !tbaa !399
  %11986 = zext i32 %.pre-phi3449 to i64
  %11987 = mul nsw i64 %11986, %112
  %11988 = add nsw i64 %11987, %94
  %11989 = getelementptr inbounds i16, i16* %blur_x, i64 %11988
  %11990 = getelementptr inbounds i16, i16* %11989, i64 -32
  %11991 = bitcast i16* %11990 to <16 x i16>*
  %11992 = load <16 x i16>, <16 x i16>* %11991, align 2, !tbaa !399
  %11993 = getelementptr inbounds i16, i16* %11989, i64 -16
  %11994 = bitcast i16* %11993 to <16 x i16>*
  %11995 = load <16 x i16>, <16 x i16>* %11994, align 2, !tbaa !399
  %11996 = zext i32 %.pre-phi3445 to i64
  %11997 = mul nsw i64 %11996, %112
  %11998 = add nsw i64 %11997, %94
  %11999 = getelementptr inbounds i16, i16* %blur_x, i64 %11998
  %12000 = getelementptr inbounds i16, i16* %11999, i64 -32
  %12001 = bitcast i16* %12000 to <16 x i16>*
  %12002 = load <16 x i16>, <16 x i16>* %12001, align 2, !tbaa !399
  %12003 = getelementptr inbounds i16, i16* %11999, i64 -16
  %12004 = bitcast i16* %12003 to <16 x i16>*
  %12005 = load <16 x i16>, <16 x i16>* %12004, align 2, !tbaa !399
  %12006 = zext i32 %.pre-phi3453 to i64
  %12007 = mul nsw i64 %12006, %112
  %12008 = add nsw i64 %12007, %94
  %12009 = getelementptr inbounds i16, i16* %blur_x, i64 %12008
  %12010 = getelementptr inbounds i16, i16* %12009, i64 -32
  %12011 = bitcast i16* %12010 to <16 x i16>*
  %12012 = load <16 x i16>, <16 x i16>* %12011, align 2, !tbaa !399
  %12013 = getelementptr inbounds i16, i16* %12009, i64 -16
  %12014 = bitcast i16* %12013 to <16 x i16>*
  %12015 = load <16 x i16>, <16 x i16>* %12014, align 2, !tbaa !399
  %12016 = mul nsw i64 %11977, %112
  %12017 = add nsw i64 %12016, %94
  %12018 = getelementptr inbounds i16, i16* %blur_x, i64 %12017
  %12019 = getelementptr inbounds i16, i16* %12018, i64 -32
  %12020 = bitcast i16* %12019 to <16 x i16>*
  %12021 = load <16 x i16>, <16 x i16>* %12020, align 2, !tbaa !399
  %12022 = getelementptr inbounds i16, i16* %12018, i64 -16
  %12023 = bitcast i16* %12022 to <16 x i16>*
  %12024 = load <16 x i16>, <16 x i16>* %12023, align 2, !tbaa !399
  %12025 = zext i32 %.pre-phi3457 to i64
  %12026 = mul nsw i64 %12025, %112
  %12027 = add nsw i64 %12026, %94
  %12028 = getelementptr inbounds i16, i16* %blur_x, i64 %12027
  %12029 = getelementptr inbounds i16, i16* %12028, i64 -32
  %12030 = bitcast i16* %12029 to <16 x i16>*
  %12031 = load <16 x i16>, <16 x i16>* %12030, align 2, !tbaa !399
  %12032 = getelementptr inbounds i16, i16* %12028, i64 -16
  %12033 = bitcast i16* %12032 to <16 x i16>*
  %12034 = load <16 x i16>, <16 x i16>* %12033, align 2, !tbaa !399
  %12035 = add <16 x i16> %12002, %11992
  %12036 = add <16 x i16> %12035, %12012
  %12037 = add <16 x i16> %12036, %12021
  %12038 = add <16 x i16> %12037, %12031
  %12039 = add <16 x i16> %12005, %11995
  %12040 = add <16 x i16> %12039, %12015
  %12041 = add <16 x i16> %12040, %12024
  %12042 = add <16 x i16> %12041, %12034
  %12043 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12038, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12044 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12042, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12045 = shufflevector <16 x i16> %12043, <16 x i16> %12044, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12046 = lshr <32 x i16> %12045, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12047 = shufflevector <32 x i16> %12046, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12048 = sext i32 %a26 to i64
  %12049 = add nsw i64 %12048, 25
  %12050 = mul nsw i64 %12049, %113
  %12051 = add nsw i64 %115, %12050
  %12052 = getelementptr inbounds i16, i16* %66, i64 %12051
  %12053 = getelementptr inbounds i16, i16* %12052, i64 -32
  %12054 = bitcast i16* %12053 to <16 x i16>*
  store <16 x i16> %12047, <16 x i16>* %12054, align 2, !tbaa !401
  %12055 = shufflevector <32 x i16> %12046, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12056 = getelementptr inbounds i16, i16* %12052, i64 -16
  %12057 = bitcast i16* %12056 to <16 x i16>*
  store <16 x i16> %12055, <16 x i16>* %12057, align 2, !tbaa !401
  br label %after_bb641

"for blur_y.s0.x.x.rebased646":                   ; preds = %"for blur_y.s0.x.x.rebased646.preheader", %"consume blur_x653"
  %indvars.iv3334 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased646.preheader" ], [ %indvars.iv.next3335, %"consume blur_x653" ]
  %12058 = add nsw i64 %indvars.iv3334, %101
  %12059 = icmp slt i64 %12058, 1
  %12060 = trunc i64 %12058 to i32
  %12061 = shl nsw i32 %12060, 5
  %12062 = icmp sgt i32 %4, %12061
  %12063 = or i1 %12059, %12062
  br i1 %12063, label %"produce blur_x652", label %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge"

"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased646"
  %.pre3520 = shl nsw i64 %12058, 5
  br label %"consume blur_x653"

"end for blur_y.s0.x.x.rebased647":               ; preds = %"consume blur_x653", %after_bb641
  br i1 %102, label %"for blur_y.s0.x.x.rebased654.preheader", label %"end for blur_y.s0.x.x.rebased655", !prof !386

"for blur_y.s0.x.x.rebased654.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased647"
  %12064 = sext i32 %t1722 to i64
  %12065 = zext i32 %.pre-phi3449 to i64
  %12066 = mul nsw i64 %12065, %112
  %12067 = sub nsw i64 %12066, %96
  %12068 = zext i32 %.pre-phi3445 to i64
  %12069 = mul nsw i64 %12068, %112
  %12070 = sub nsw i64 %12069, %96
  %12071 = zext i32 %.pre-phi3453 to i64
  %12072 = mul nsw i64 %12071, %112
  %12073 = sub nsw i64 %12072, %96
  %12074 = zext i32 %.pre-phi3463 to i64
  %12075 = mul nsw i64 %12074, %112
  %12076 = sub nsw i64 %12075, %96
  %12077 = zext i32 %.pre-phi3457 to i64
  %12078 = mul nsw i64 %12077, %112
  %12079 = sub nsw i64 %12078, %96
  %12080 = sext i32 %a26 to i64
  %12081 = add nsw i64 %12080, 25
  %12082 = mul nsw i64 %12081, %113
  %12083 = add nsw i64 %12082, %116
  br label %"for blur_y.s0.x.x.rebased654"

"produce blur_x652":                              ; preds = %"for blur_y.s0.x.x.rebased646"
  %t1112 = add nsw i32 %12061, %t2105
  %12084 = sext i32 %t1112 to i64
  %12085 = getelementptr inbounds i16, i16* %read_input, i64 %12084
  %12086 = getelementptr inbounds i16, i16* %12085, i64 1
  %12087 = bitcast i16* %12086 to <16 x i16>*
  %12088 = load <16 x i16>, <16 x i16>* %12087, align 2, !tbaa !396
  %12089 = getelementptr inbounds i16, i16* %12085, i64 17
  %12090 = bitcast i16* %12089 to <16 x i16>*
  %12091 = load <16 x i16>, <16 x i16>* %12090, align 2, !tbaa !396
  %12092 = bitcast i16* %12085 to <16 x i16>*
  %12093 = load <16 x i16>, <16 x i16>* %12092, align 2, !tbaa !396
  %12094 = getelementptr inbounds i16, i16* %12085, i64 16
  %12095 = bitcast i16* %12094 to <16 x i16>*
  %12096 = load <16 x i16>, <16 x i16>* %12095, align 2, !tbaa !396
  %12097 = getelementptr inbounds i16, i16* %12085, i64 2
  %12098 = bitcast i16* %12097 to <16 x i16>*
  %12099 = load <16 x i16>, <16 x i16>* %12098, align 2, !tbaa !396
  %12100 = getelementptr inbounds i16, i16* %12085, i64 18
  %12101 = bitcast i16* %12100 to <16 x i16>*
  %12102 = load <16 x i16>, <16 x i16>* %12101, align 2, !tbaa !396
  %12103 = getelementptr inbounds i16, i16* %12085, i64 4
  %12104 = bitcast i16* %12103 to <16 x i16>*
  %12105 = load <16 x i16>, <16 x i16>* %12104, align 2, !tbaa !396
  %12106 = getelementptr inbounds i16, i16* %12085, i64 20
  %12107 = bitcast i16* %12106 to <16 x i16>*
  %12108 = load <16 x i16>, <16 x i16>* %12107, align 2, !tbaa !396
  %12109 = getelementptr inbounds i16, i16* %12085, i64 3
  %12110 = bitcast i16* %12109 to <16 x i16>*
  %12111 = load <16 x i16>, <16 x i16>* %12110, align 2, !tbaa !396
  %12112 = getelementptr inbounds i16, i16* %12085, i64 19
  %12113 = bitcast i16* %12112 to <16 x i16>*
  %12114 = load <16 x i16>, <16 x i16>* %12113, align 2, !tbaa !396
  %12115 = add <16 x i16> %12093, %12088
  %12116 = add <16 x i16> %12115, %12099
  %12117 = add <16 x i16> %12116, %12105
  %12118 = add <16 x i16> %12117, %12111
  %12119 = add <16 x i16> %12096, %12091
  %12120 = add <16 x i16> %12119, %12102
  %12121 = add <16 x i16> %12120, %12108
  %12122 = add <16 x i16> %12121, %12114
  %12123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12118, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12124 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12122, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12125 = shufflevector <16 x i16> %12123, <16 x i16> %12124, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12126 = lshr <32 x i16> %12125, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12127 = shufflevector <32 x i16> %12126, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12128 = shl nsw i64 %12058, 5
  %12129 = add nsw i64 %12128, %11913
  %12130 = getelementptr inbounds i16, i16* %blur_x, i64 %12129
  %12131 = bitcast i16* %12130 to <16 x i16>*
  store <16 x i16> %12127, <16 x i16>* %12131, align 2, !tbaa !399
  %12132 = shufflevector <32 x i16> %12126, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12133 = getelementptr inbounds i16, i16* %12130, i64 16
  %12134 = bitcast i16* %12133 to <16 x i16>*
  store <16 x i16> %12132, <16 x i16>* %12134, align 2, !tbaa !399
  br label %"consume blur_x653"

"consume blur_x653":                              ; preds = %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge", %"produce blur_x652"
  %.pre-phi3521 = phi i64 [ %.pre3520, %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge" ], [ %12128, %"produce blur_x652" ]
  %12135 = add nsw i64 %11916, %.pre-phi3521
  %12136 = getelementptr inbounds i16, i16* %blur_x, i64 %12135
  %12137 = bitcast i16* %12136 to <16 x i16>*
  %12138 = load <16 x i16>, <16 x i16>* %12137, align 2, !tbaa !399
  %12139 = getelementptr inbounds i16, i16* %12136, i64 16
  %12140 = bitcast i16* %12139 to <16 x i16>*
  %12141 = load <16 x i16>, <16 x i16>* %12140, align 2, !tbaa !399
  %12142 = add nsw i64 %11919, %.pre-phi3521
  %12143 = getelementptr inbounds i16, i16* %blur_x, i64 %12142
  %12144 = bitcast i16* %12143 to <16 x i16>*
  %12145 = load <16 x i16>, <16 x i16>* %12144, align 2, !tbaa !399
  %12146 = getelementptr inbounds i16, i16* %12143, i64 16
  %12147 = bitcast i16* %12146 to <16 x i16>*
  %12148 = load <16 x i16>, <16 x i16>* %12147, align 2, !tbaa !399
  %12149 = add nsw i64 %11922, %.pre-phi3521
  %12150 = getelementptr inbounds i16, i16* %blur_x, i64 %12149
  %12151 = bitcast i16* %12150 to <16 x i16>*
  %12152 = load <16 x i16>, <16 x i16>* %12151, align 2, !tbaa !399
  %12153 = getelementptr inbounds i16, i16* %12150, i64 16
  %12154 = bitcast i16* %12153 to <16 x i16>*
  %12155 = load <16 x i16>, <16 x i16>* %12154, align 2, !tbaa !399
  %12156 = add nsw i64 %11925, %.pre-phi3521
  %12157 = getelementptr inbounds i16, i16* %blur_x, i64 %12156
  %12158 = bitcast i16* %12157 to <16 x i16>*
  %12159 = load <16 x i16>, <16 x i16>* %12158, align 2, !tbaa !399
  %12160 = getelementptr inbounds i16, i16* %12157, i64 16
  %12161 = bitcast i16* %12160 to <16 x i16>*
  %12162 = load <16 x i16>, <16 x i16>* %12161, align 2, !tbaa !399
  %12163 = add nsw i64 %11928, %.pre-phi3521
  %12164 = getelementptr inbounds i16, i16* %blur_x, i64 %12163
  %12165 = bitcast i16* %12164 to <16 x i16>*
  %12166 = load <16 x i16>, <16 x i16>* %12165, align 2, !tbaa !399
  %12167 = getelementptr inbounds i16, i16* %12164, i64 16
  %12168 = bitcast i16* %12167 to <16 x i16>*
  %12169 = load <16 x i16>, <16 x i16>* %12168, align 2, !tbaa !399
  %12170 = add <16 x i16> %12145, %12138
  %12171 = add <16 x i16> %12170, %12152
  %12172 = add <16 x i16> %12171, %12159
  %12173 = add <16 x i16> %12172, %12166
  %12174 = add <16 x i16> %12148, %12141
  %12175 = add <16 x i16> %12174, %12155
  %12176 = add <16 x i16> %12175, %12162
  %12177 = add <16 x i16> %12176, %12169
  %12178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12173, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12177, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12180 = shufflevector <16 x i16> %12178, <16 x i16> %12179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12181 = lshr <32 x i16> %12180, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12182 = shufflevector <32 x i16> %12181, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12183 = add nsw i64 %11932, %.pre-phi3521
  %12184 = getelementptr inbounds i16, i16* %66, i64 %12183
  %12185 = bitcast i16* %12184 to <16 x i16>*
  store <16 x i16> %12182, <16 x i16>* %12185, align 2, !tbaa !401
  %12186 = shufflevector <32 x i16> %12181, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12187 = getelementptr inbounds i16, i16* %12184, i64 16
  %12188 = bitcast i16* %12187 to <16 x i16>*
  store <16 x i16> %12186, <16 x i16>* %12188, align 2, !tbaa !401
  %indvars.iv.next3335 = add nuw nsw i64 %indvars.iv3334, 1
  %.not2707 = icmp eq i64 %indvars.iv.next3335, %184
  br i1 %.not2707, label %"end for blur_y.s0.x.x.rebased647", label %"for blur_y.s0.x.x.rebased646"

"for blur_y.s0.x.x.rebased654":                   ; preds = %"for blur_y.s0.x.x.rebased654.preheader", %"consume blur_x662"
  %blur_y.s0.x.x.rebased656 = phi i32 [ %12301, %"consume blur_x662" ], [ 0, %"for blur_y.s0.x.x.rebased654.preheader" ]
  %12189 = add nsw i32 %blur_y.s0.x.x.rebased656, %t1626
  %a280 = shl nsw i32 %12189, 5
  %12190 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %12190, i32 %a280, i32 %a14
  %12191 = icmp slt i32 %12189, 1
  %12192 = icmp sgt i32 %4, %a280
  %12193 = or i1 %12191, %12192
  br i1 %12193, label %"produce blur_x660", label %"consume blur_x662"

"end for blur_y.s0.x.x.rebased655":               ; preds = %"consume blur_x662", %"end for blur_y.s0.x.x.rebased647"
  br i1 %34, label %"produce blur_x666", label %after_bb663

"produce blur_x660":                              ; preds = %"for blur_y.s0.x.x.rebased654"
  %12194 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s661 = select i1 %12194, i32 %b286, i32 %4
  %t1117 = add nsw i32 %blur_x.s0.x.v1.base.s661, %t2105
  %12195 = sext i32 %t1117 to i64
  %12196 = getelementptr inbounds i16, i16* %read_input, i64 %12195
  %12197 = getelementptr inbounds i16, i16* %12196, i64 1
  %12198 = bitcast i16* %12197 to <16 x i16>*
  %12199 = load <16 x i16>, <16 x i16>* %12198, align 2, !tbaa !396
  %12200 = getelementptr inbounds i16, i16* %12196, i64 17
  %12201 = bitcast i16* %12200 to <16 x i16>*
  %12202 = load <16 x i16>, <16 x i16>* %12201, align 2, !tbaa !396
  %12203 = bitcast i16* %12196 to <16 x i16>*
  %12204 = load <16 x i16>, <16 x i16>* %12203, align 2, !tbaa !396
  %12205 = getelementptr inbounds i16, i16* %12196, i64 16
  %12206 = bitcast i16* %12205 to <16 x i16>*
  %12207 = load <16 x i16>, <16 x i16>* %12206, align 2, !tbaa !396
  %12208 = getelementptr inbounds i16, i16* %12196, i64 2
  %12209 = bitcast i16* %12208 to <16 x i16>*
  %12210 = load <16 x i16>, <16 x i16>* %12209, align 2, !tbaa !396
  %12211 = getelementptr inbounds i16, i16* %12196, i64 18
  %12212 = bitcast i16* %12211 to <16 x i16>*
  %12213 = load <16 x i16>, <16 x i16>* %12212, align 2, !tbaa !396
  %12214 = getelementptr inbounds i16, i16* %12196, i64 4
  %12215 = bitcast i16* %12214 to <16 x i16>*
  %12216 = load <16 x i16>, <16 x i16>* %12215, align 2, !tbaa !396
  %12217 = getelementptr inbounds i16, i16* %12196, i64 20
  %12218 = bitcast i16* %12217 to <16 x i16>*
  %12219 = load <16 x i16>, <16 x i16>* %12218, align 2, !tbaa !396
  %12220 = getelementptr inbounds i16, i16* %12196, i64 3
  %12221 = bitcast i16* %12220 to <16 x i16>*
  %12222 = load <16 x i16>, <16 x i16>* %12221, align 2, !tbaa !396
  %12223 = getelementptr inbounds i16, i16* %12196, i64 19
  %12224 = bitcast i16* %12223 to <16 x i16>*
  %12225 = load <16 x i16>, <16 x i16>* %12224, align 2, !tbaa !396
  %12226 = add <16 x i16> %12204, %12199
  %12227 = add <16 x i16> %12226, %12210
  %12228 = add <16 x i16> %12227, %12216
  %12229 = add <16 x i16> %12228, %12222
  %12230 = add <16 x i16> %12207, %12202
  %12231 = add <16 x i16> %12230, %12213
  %12232 = add <16 x i16> %12231, %12219
  %12233 = add <16 x i16> %12232, %12225
  %12234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12229, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12235 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12233, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12236 = shufflevector <16 x i16> %12234, <16 x i16> %12235, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12237 = lshr <32 x i16> %12236, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12238 = shufflevector <32 x i16> %12237, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12239 = sext i32 %blur_x.s0.x.v1.base.s661 to i64
  %12240 = add nsw i64 %12239, %12064
  %12241 = getelementptr inbounds i16, i16* %blur_x, i64 %12240
  %12242 = bitcast i16* %12241 to <16 x i16>*
  store <16 x i16> %12238, <16 x i16>* %12242, align 2, !tbaa !399
  %12243 = shufflevector <32 x i16> %12237, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12244 = getelementptr inbounds i16, i16* %12241, i64 16
  %12245 = bitcast i16* %12244 to <16 x i16>*
  store <16 x i16> %12243, <16 x i16>* %12245, align 2, !tbaa !399
  br label %"consume blur_x662"

"consume blur_x662":                              ; preds = %"for blur_y.s0.x.x.rebased654", %"produce blur_x660"
  %12246 = sext i32 %b286 to i64
  %12247 = add nsw i64 %12067, %12246
  %12248 = getelementptr inbounds i16, i16* %blur_x, i64 %12247
  %12249 = bitcast i16* %12248 to <16 x i16>*
  %12250 = load <16 x i16>, <16 x i16>* %12249, align 2, !tbaa !399
  %12251 = getelementptr inbounds i16, i16* %12248, i64 16
  %12252 = bitcast i16* %12251 to <16 x i16>*
  %12253 = load <16 x i16>, <16 x i16>* %12252, align 2, !tbaa !399
  %12254 = add nsw i64 %12070, %12246
  %12255 = getelementptr inbounds i16, i16* %blur_x, i64 %12254
  %12256 = bitcast i16* %12255 to <16 x i16>*
  %12257 = load <16 x i16>, <16 x i16>* %12256, align 2, !tbaa !399
  %12258 = getelementptr inbounds i16, i16* %12255, i64 16
  %12259 = bitcast i16* %12258 to <16 x i16>*
  %12260 = load <16 x i16>, <16 x i16>* %12259, align 2, !tbaa !399
  %12261 = add nsw i64 %12073, %12246
  %12262 = getelementptr inbounds i16, i16* %blur_x, i64 %12261
  %12263 = bitcast i16* %12262 to <16 x i16>*
  %12264 = load <16 x i16>, <16 x i16>* %12263, align 2, !tbaa !399
  %12265 = getelementptr inbounds i16, i16* %12262, i64 16
  %12266 = bitcast i16* %12265 to <16 x i16>*
  %12267 = load <16 x i16>, <16 x i16>* %12266, align 2, !tbaa !399
  %12268 = add nsw i64 %12076, %12246
  %12269 = getelementptr inbounds i16, i16* %blur_x, i64 %12268
  %12270 = bitcast i16* %12269 to <16 x i16>*
  %12271 = load <16 x i16>, <16 x i16>* %12270, align 2, !tbaa !399
  %12272 = getelementptr inbounds i16, i16* %12269, i64 16
  %12273 = bitcast i16* %12272 to <16 x i16>*
  %12274 = load <16 x i16>, <16 x i16>* %12273, align 2, !tbaa !399
  %12275 = add nsw i64 %12079, %12246
  %12276 = getelementptr inbounds i16, i16* %blur_x, i64 %12275
  %12277 = bitcast i16* %12276 to <16 x i16>*
  %12278 = load <16 x i16>, <16 x i16>* %12277, align 2, !tbaa !399
  %12279 = getelementptr inbounds i16, i16* %12276, i64 16
  %12280 = bitcast i16* %12279 to <16 x i16>*
  %12281 = load <16 x i16>, <16 x i16>* %12280, align 2, !tbaa !399
  %12282 = add <16 x i16> %12257, %12250
  %12283 = add <16 x i16> %12282, %12264
  %12284 = add <16 x i16> %12283, %12271
  %12285 = add <16 x i16> %12284, %12278
  %12286 = add <16 x i16> %12260, %12253
  %12287 = add <16 x i16> %12286, %12267
  %12288 = add <16 x i16> %12287, %12274
  %12289 = add <16 x i16> %12288, %12281
  %12290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12285, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12291 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12289, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12292 = shufflevector <16 x i16> %12290, <16 x i16> %12291, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12293 = lshr <32 x i16> %12292, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12294 = shufflevector <32 x i16> %12293, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12295 = add nsw i64 %12083, %12246
  %12296 = getelementptr inbounds i16, i16* %66, i64 %12295
  %12297 = bitcast i16* %12296 to <16 x i16>*
  store <16 x i16> %12294, <16 x i16>* %12297, align 2, !tbaa !401
  %12298 = shufflevector <32 x i16> %12293, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12299 = getelementptr inbounds i16, i16* %12296, i64 16
  %12300 = bitcast i16* %12299 to <16 x i16>*
  store <16 x i16> %12298, <16 x i16>* %12300, align 2, !tbaa !401
  %12301 = add nuw nsw i32 %blur_y.s0.x.x.rebased656, 1
  %.not2706 = icmp eq i32 %12301, %t1683
  br i1 %.not2706, label %"end for blur_y.s0.x.x.rebased655", label %"for blur_y.s0.x.x.rebased654"

after_bb663:                                      ; preds = %"end for blur_y.s0.x.x.rebased655", %"produce blur_x666"
  br i1 %100, label %"for blur_y.s0.x.x.rebased668.preheader", label %"end for blur_y.s0.x.x.rebased669", !prof !386

"for blur_y.s0.x.x.rebased668.preheader":         ; preds = %after_bb663
  %12302 = sext i32 %t1738 to i64
  %12303 = zext i32 %.pre-phi3453 to i64
  %12304 = mul nsw i64 %12303, %112
  %12305 = sub nsw i64 %12304, %96
  %12306 = zext i32 %.pre-phi3449 to i64
  %12307 = mul nsw i64 %12306, %112
  %12308 = sub nsw i64 %12307, %96
  %12309 = zext i32 %.pre-phi3457 to i64
  %12310 = mul nsw i64 %12309, %112
  %12311 = sub nsw i64 %12310, %96
  %12312 = zext i32 %.pre-phi3469 to i64
  %12313 = mul nsw i64 %12312, %112
  %12314 = sub nsw i64 %12313, %96
  %12315 = zext i32 %.pre-phi3463 to i64
  %12316 = mul nsw i64 %12315, %112
  %12317 = sub nsw i64 %12316, %96
  %12318 = sext i32 %a26 to i64
  %12319 = add nsw i64 %12318, 26
  %12320 = mul nsw i64 %12319, %113
  %12321 = add nsw i64 %12320, %116
  br label %"for blur_y.s0.x.x.rebased668"

"produce blur_x666":                              ; preds = %"end for blur_y.s0.x.x.rebased655"
  %12322 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %12323 = getelementptr inbounds i16, i16* %12322, i64 -31
  %12324 = bitcast i16* %12323 to <16 x i16>*
  %12325 = load <16 x i16>, <16 x i16>* %12324, align 2, !tbaa !396
  %12326 = getelementptr inbounds i16, i16* %12322, i64 -15
  %12327 = bitcast i16* %12326 to <16 x i16>*
  %12328 = load <16 x i16>, <16 x i16>* %12327, align 2, !tbaa !396
  %12329 = getelementptr inbounds i16, i16* %12322, i64 -32
  %12330 = bitcast i16* %12329 to <16 x i16>*
  %12331 = load <16 x i16>, <16 x i16>* %12330, align 2, !tbaa !396
  %12332 = getelementptr inbounds i16, i16* %12322, i64 -16
  %12333 = bitcast i16* %12332 to <16 x i16>*
  %12334 = load <16 x i16>, <16 x i16>* %12333, align 2, !tbaa !396
  %12335 = getelementptr inbounds i16, i16* %12322, i64 -30
  %12336 = bitcast i16* %12335 to <16 x i16>*
  %12337 = load <16 x i16>, <16 x i16>* %12336, align 2, !tbaa !396
  %12338 = getelementptr inbounds i16, i16* %12322, i64 -14
  %12339 = bitcast i16* %12338 to <16 x i16>*
  %12340 = load <16 x i16>, <16 x i16>* %12339, align 2, !tbaa !396
  %12341 = getelementptr inbounds i16, i16* %12322, i64 -28
  %12342 = bitcast i16* %12341 to <16 x i16>*
  %12343 = load <16 x i16>, <16 x i16>* %12342, align 2, !tbaa !396
  %12344 = getelementptr inbounds i16, i16* %12322, i64 -12
  %12345 = bitcast i16* %12344 to <16 x i16>*
  %12346 = load <16 x i16>, <16 x i16>* %12345, align 2, !tbaa !396
  %12347 = getelementptr inbounds i16, i16* %12322, i64 -29
  %12348 = bitcast i16* %12347 to <16 x i16>*
  %12349 = load <16 x i16>, <16 x i16>* %12348, align 2, !tbaa !396
  %12350 = getelementptr inbounds i16, i16* %12322, i64 -13
  %12351 = bitcast i16* %12350 to <16 x i16>*
  %12352 = load <16 x i16>, <16 x i16>* %12351, align 2, !tbaa !396
  %12353 = add <16 x i16> %12331, %12325
  %12354 = add <16 x i16> %12353, %12337
  %12355 = add <16 x i16> %12354, %12343
  %12356 = add <16 x i16> %12355, %12349
  %12357 = add <16 x i16> %12334, %12328
  %12358 = add <16 x i16> %12357, %12340
  %12359 = add <16 x i16> %12358, %12346
  %12360 = add <16 x i16> %12359, %12352
  %12361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12356, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12362 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12360, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12363 = shufflevector <16 x i16> %12361, <16 x i16> %12362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12364 = lshr <32 x i16> %12363, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12365 = shufflevector <32 x i16> %12364, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12366 = zext i32 %.pre-phi3469 to i64
  %12367 = mul nsw i64 %97, %12366
  %12368 = add nsw i64 %99, %12367
  %12369 = getelementptr inbounds i16, i16* %blur_x, i64 %12368
  %12370 = getelementptr inbounds i16, i16* %12369, i64 -32
  %12371 = bitcast i16* %12370 to <16 x i16>*
  store <16 x i16> %12365, <16 x i16>* %12371, align 2, !tbaa !399
  %12372 = shufflevector <32 x i16> %12364, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12373 = getelementptr inbounds i16, i16* %12369, i64 -16
  %12374 = bitcast i16* %12373 to <16 x i16>*
  store <16 x i16> %12372, <16 x i16>* %12374, align 2, !tbaa !399
  %12375 = zext i32 %.pre-phi3453 to i64
  %12376 = mul nsw i64 %12375, %112
  %12377 = add nsw i64 %12376, %94
  %12378 = getelementptr inbounds i16, i16* %blur_x, i64 %12377
  %12379 = getelementptr inbounds i16, i16* %12378, i64 -32
  %12380 = bitcast i16* %12379 to <16 x i16>*
  %12381 = load <16 x i16>, <16 x i16>* %12380, align 2, !tbaa !399
  %12382 = getelementptr inbounds i16, i16* %12378, i64 -16
  %12383 = bitcast i16* %12382 to <16 x i16>*
  %12384 = load <16 x i16>, <16 x i16>* %12383, align 2, !tbaa !399
  %12385 = zext i32 %.pre-phi3449 to i64
  %12386 = mul nsw i64 %12385, %112
  %12387 = add nsw i64 %12386, %94
  %12388 = getelementptr inbounds i16, i16* %blur_x, i64 %12387
  %12389 = getelementptr inbounds i16, i16* %12388, i64 -32
  %12390 = bitcast i16* %12389 to <16 x i16>*
  %12391 = load <16 x i16>, <16 x i16>* %12390, align 2, !tbaa !399
  %12392 = getelementptr inbounds i16, i16* %12388, i64 -16
  %12393 = bitcast i16* %12392 to <16 x i16>*
  %12394 = load <16 x i16>, <16 x i16>* %12393, align 2, !tbaa !399
  %12395 = zext i32 %.pre-phi3457 to i64
  %12396 = mul nsw i64 %12395, %112
  %12397 = add nsw i64 %12396, %94
  %12398 = getelementptr inbounds i16, i16* %blur_x, i64 %12397
  %12399 = getelementptr inbounds i16, i16* %12398, i64 -32
  %12400 = bitcast i16* %12399 to <16 x i16>*
  %12401 = load <16 x i16>, <16 x i16>* %12400, align 2, !tbaa !399
  %12402 = getelementptr inbounds i16, i16* %12398, i64 -16
  %12403 = bitcast i16* %12402 to <16 x i16>*
  %12404 = load <16 x i16>, <16 x i16>* %12403, align 2, !tbaa !399
  %12405 = mul nsw i64 %12366, %112
  %12406 = add nsw i64 %12405, %94
  %12407 = getelementptr inbounds i16, i16* %blur_x, i64 %12406
  %12408 = getelementptr inbounds i16, i16* %12407, i64 -32
  %12409 = bitcast i16* %12408 to <16 x i16>*
  %12410 = load <16 x i16>, <16 x i16>* %12409, align 2, !tbaa !399
  %12411 = getelementptr inbounds i16, i16* %12407, i64 -16
  %12412 = bitcast i16* %12411 to <16 x i16>*
  %12413 = load <16 x i16>, <16 x i16>* %12412, align 2, !tbaa !399
  %12414 = zext i32 %.pre-phi3463 to i64
  %12415 = mul nsw i64 %12414, %112
  %12416 = add nsw i64 %12415, %94
  %12417 = getelementptr inbounds i16, i16* %blur_x, i64 %12416
  %12418 = getelementptr inbounds i16, i16* %12417, i64 -32
  %12419 = bitcast i16* %12418 to <16 x i16>*
  %12420 = load <16 x i16>, <16 x i16>* %12419, align 2, !tbaa !399
  %12421 = getelementptr inbounds i16, i16* %12417, i64 -16
  %12422 = bitcast i16* %12421 to <16 x i16>*
  %12423 = load <16 x i16>, <16 x i16>* %12422, align 2, !tbaa !399
  %12424 = add <16 x i16> %12391, %12381
  %12425 = add <16 x i16> %12424, %12401
  %12426 = add <16 x i16> %12425, %12410
  %12427 = add <16 x i16> %12426, %12420
  %12428 = add <16 x i16> %12394, %12384
  %12429 = add <16 x i16> %12428, %12404
  %12430 = add <16 x i16> %12429, %12413
  %12431 = add <16 x i16> %12430, %12423
  %12432 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12427, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12433 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12431, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12434 = shufflevector <16 x i16> %12432, <16 x i16> %12433, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12435 = lshr <32 x i16> %12434, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12436 = shufflevector <32 x i16> %12435, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12437 = sext i32 %a26 to i64
  %12438 = add nsw i64 %12437, 26
  %12439 = mul nsw i64 %12438, %113
  %12440 = add nsw i64 %115, %12439
  %12441 = getelementptr inbounds i16, i16* %66, i64 %12440
  %12442 = getelementptr inbounds i16, i16* %12441, i64 -32
  %12443 = bitcast i16* %12442 to <16 x i16>*
  store <16 x i16> %12436, <16 x i16>* %12443, align 2, !tbaa !401
  %12444 = shufflevector <32 x i16> %12435, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12445 = getelementptr inbounds i16, i16* %12441, i64 -16
  %12446 = bitcast i16* %12445 to <16 x i16>*
  store <16 x i16> %12444, <16 x i16>* %12446, align 2, !tbaa !401
  br label %after_bb663

"for blur_y.s0.x.x.rebased668":                   ; preds = %"for blur_y.s0.x.x.rebased668.preheader", %"consume blur_x675"
  %indvars.iv3337 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased668.preheader" ], [ %indvars.iv.next3338, %"consume blur_x675" ]
  %12447 = add nsw i64 %indvars.iv3337, %101
  %12448 = icmp slt i64 %12447, 1
  %12449 = trunc i64 %12447 to i32
  %12450 = shl nsw i32 %12449, 5
  %12451 = icmp sgt i32 %4, %12450
  %12452 = or i1 %12448, %12451
  br i1 %12452, label %"produce blur_x674", label %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge"

"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased668"
  %.pre3522 = shl nsw i64 %12447, 5
  br label %"consume blur_x675"

"end for blur_y.s0.x.x.rebased669":               ; preds = %"consume blur_x675", %after_bb663
  br i1 %102, label %"for blur_y.s0.x.x.rebased676.preheader", label %"end for blur_y.s0.x.x.rebased677", !prof !386

"for blur_y.s0.x.x.rebased676.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased669"
  %12453 = sext i32 %t1738 to i64
  %12454 = zext i32 %.pre-phi3453 to i64
  %12455 = mul nsw i64 %12454, %112
  %12456 = sub nsw i64 %12455, %96
  %12457 = zext i32 %.pre-phi3449 to i64
  %12458 = mul nsw i64 %12457, %112
  %12459 = sub nsw i64 %12458, %96
  %12460 = zext i32 %.pre-phi3457 to i64
  %12461 = mul nsw i64 %12460, %112
  %12462 = sub nsw i64 %12461, %96
  %12463 = zext i32 %.pre-phi3469 to i64
  %12464 = mul nsw i64 %12463, %112
  %12465 = sub nsw i64 %12464, %96
  %12466 = zext i32 %.pre-phi3463 to i64
  %12467 = mul nsw i64 %12466, %112
  %12468 = sub nsw i64 %12467, %96
  %12469 = sext i32 %a26 to i64
  %12470 = add nsw i64 %12469, 26
  %12471 = mul nsw i64 %12470, %113
  %12472 = add nsw i64 %12471, %116
  br label %"for blur_y.s0.x.x.rebased676"

"produce blur_x674":                              ; preds = %"for blur_y.s0.x.x.rebased668"
  %t1128 = add nsw i32 %12450, %t2121
  %12473 = sext i32 %t1128 to i64
  %12474 = getelementptr inbounds i16, i16* %read_input, i64 %12473
  %12475 = getelementptr inbounds i16, i16* %12474, i64 1
  %12476 = bitcast i16* %12475 to <16 x i16>*
  %12477 = load <16 x i16>, <16 x i16>* %12476, align 2, !tbaa !396
  %12478 = getelementptr inbounds i16, i16* %12474, i64 17
  %12479 = bitcast i16* %12478 to <16 x i16>*
  %12480 = load <16 x i16>, <16 x i16>* %12479, align 2, !tbaa !396
  %12481 = bitcast i16* %12474 to <16 x i16>*
  %12482 = load <16 x i16>, <16 x i16>* %12481, align 2, !tbaa !396
  %12483 = getelementptr inbounds i16, i16* %12474, i64 16
  %12484 = bitcast i16* %12483 to <16 x i16>*
  %12485 = load <16 x i16>, <16 x i16>* %12484, align 2, !tbaa !396
  %12486 = getelementptr inbounds i16, i16* %12474, i64 2
  %12487 = bitcast i16* %12486 to <16 x i16>*
  %12488 = load <16 x i16>, <16 x i16>* %12487, align 2, !tbaa !396
  %12489 = getelementptr inbounds i16, i16* %12474, i64 18
  %12490 = bitcast i16* %12489 to <16 x i16>*
  %12491 = load <16 x i16>, <16 x i16>* %12490, align 2, !tbaa !396
  %12492 = getelementptr inbounds i16, i16* %12474, i64 4
  %12493 = bitcast i16* %12492 to <16 x i16>*
  %12494 = load <16 x i16>, <16 x i16>* %12493, align 2, !tbaa !396
  %12495 = getelementptr inbounds i16, i16* %12474, i64 20
  %12496 = bitcast i16* %12495 to <16 x i16>*
  %12497 = load <16 x i16>, <16 x i16>* %12496, align 2, !tbaa !396
  %12498 = getelementptr inbounds i16, i16* %12474, i64 3
  %12499 = bitcast i16* %12498 to <16 x i16>*
  %12500 = load <16 x i16>, <16 x i16>* %12499, align 2, !tbaa !396
  %12501 = getelementptr inbounds i16, i16* %12474, i64 19
  %12502 = bitcast i16* %12501 to <16 x i16>*
  %12503 = load <16 x i16>, <16 x i16>* %12502, align 2, !tbaa !396
  %12504 = add <16 x i16> %12482, %12477
  %12505 = add <16 x i16> %12504, %12488
  %12506 = add <16 x i16> %12505, %12494
  %12507 = add <16 x i16> %12506, %12500
  %12508 = add <16 x i16> %12485, %12480
  %12509 = add <16 x i16> %12508, %12491
  %12510 = add <16 x i16> %12509, %12497
  %12511 = add <16 x i16> %12510, %12503
  %12512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12507, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12511, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12514 = shufflevector <16 x i16> %12512, <16 x i16> %12513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12515 = lshr <32 x i16> %12514, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12516 = shufflevector <32 x i16> %12515, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12517 = shl nsw i64 %12447, 5
  %12518 = add nsw i64 %12517, %12302
  %12519 = getelementptr inbounds i16, i16* %blur_x, i64 %12518
  %12520 = bitcast i16* %12519 to <16 x i16>*
  store <16 x i16> %12516, <16 x i16>* %12520, align 2, !tbaa !399
  %12521 = shufflevector <32 x i16> %12515, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12522 = getelementptr inbounds i16, i16* %12519, i64 16
  %12523 = bitcast i16* %12522 to <16 x i16>*
  store <16 x i16> %12521, <16 x i16>* %12523, align 2, !tbaa !399
  br label %"consume blur_x675"

"consume blur_x675":                              ; preds = %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge", %"produce blur_x674"
  %.pre-phi3523 = phi i64 [ %.pre3522, %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge" ], [ %12517, %"produce blur_x674" ]
  %12524 = add nsw i64 %12305, %.pre-phi3523
  %12525 = getelementptr inbounds i16, i16* %blur_x, i64 %12524
  %12526 = bitcast i16* %12525 to <16 x i16>*
  %12527 = load <16 x i16>, <16 x i16>* %12526, align 2, !tbaa !399
  %12528 = getelementptr inbounds i16, i16* %12525, i64 16
  %12529 = bitcast i16* %12528 to <16 x i16>*
  %12530 = load <16 x i16>, <16 x i16>* %12529, align 2, !tbaa !399
  %12531 = add nsw i64 %12308, %.pre-phi3523
  %12532 = getelementptr inbounds i16, i16* %blur_x, i64 %12531
  %12533 = bitcast i16* %12532 to <16 x i16>*
  %12534 = load <16 x i16>, <16 x i16>* %12533, align 2, !tbaa !399
  %12535 = getelementptr inbounds i16, i16* %12532, i64 16
  %12536 = bitcast i16* %12535 to <16 x i16>*
  %12537 = load <16 x i16>, <16 x i16>* %12536, align 2, !tbaa !399
  %12538 = add nsw i64 %12311, %.pre-phi3523
  %12539 = getelementptr inbounds i16, i16* %blur_x, i64 %12538
  %12540 = bitcast i16* %12539 to <16 x i16>*
  %12541 = load <16 x i16>, <16 x i16>* %12540, align 2, !tbaa !399
  %12542 = getelementptr inbounds i16, i16* %12539, i64 16
  %12543 = bitcast i16* %12542 to <16 x i16>*
  %12544 = load <16 x i16>, <16 x i16>* %12543, align 2, !tbaa !399
  %12545 = add nsw i64 %12314, %.pre-phi3523
  %12546 = getelementptr inbounds i16, i16* %blur_x, i64 %12545
  %12547 = bitcast i16* %12546 to <16 x i16>*
  %12548 = load <16 x i16>, <16 x i16>* %12547, align 2, !tbaa !399
  %12549 = getelementptr inbounds i16, i16* %12546, i64 16
  %12550 = bitcast i16* %12549 to <16 x i16>*
  %12551 = load <16 x i16>, <16 x i16>* %12550, align 2, !tbaa !399
  %12552 = add nsw i64 %12317, %.pre-phi3523
  %12553 = getelementptr inbounds i16, i16* %blur_x, i64 %12552
  %12554 = bitcast i16* %12553 to <16 x i16>*
  %12555 = load <16 x i16>, <16 x i16>* %12554, align 2, !tbaa !399
  %12556 = getelementptr inbounds i16, i16* %12553, i64 16
  %12557 = bitcast i16* %12556 to <16 x i16>*
  %12558 = load <16 x i16>, <16 x i16>* %12557, align 2, !tbaa !399
  %12559 = add <16 x i16> %12534, %12527
  %12560 = add <16 x i16> %12559, %12541
  %12561 = add <16 x i16> %12560, %12548
  %12562 = add <16 x i16> %12561, %12555
  %12563 = add <16 x i16> %12537, %12530
  %12564 = add <16 x i16> %12563, %12544
  %12565 = add <16 x i16> %12564, %12551
  %12566 = add <16 x i16> %12565, %12558
  %12567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12562, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12568 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12566, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12569 = shufflevector <16 x i16> %12567, <16 x i16> %12568, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12570 = lshr <32 x i16> %12569, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12571 = shufflevector <32 x i16> %12570, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12572 = add nsw i64 %12321, %.pre-phi3523
  %12573 = getelementptr inbounds i16, i16* %66, i64 %12572
  %12574 = bitcast i16* %12573 to <16 x i16>*
  store <16 x i16> %12571, <16 x i16>* %12574, align 2, !tbaa !401
  %12575 = shufflevector <32 x i16> %12570, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12576 = getelementptr inbounds i16, i16* %12573, i64 16
  %12577 = bitcast i16* %12576 to <16 x i16>*
  store <16 x i16> %12575, <16 x i16>* %12577, align 2, !tbaa !401
  %indvars.iv.next3338 = add nuw nsw i64 %indvars.iv3337, 1
  %.not2705 = icmp eq i64 %indvars.iv.next3338, %184
  br i1 %.not2705, label %"end for blur_y.s0.x.x.rebased669", label %"for blur_y.s0.x.x.rebased668"

"for blur_y.s0.x.x.rebased676":                   ; preds = %"for blur_y.s0.x.x.rebased676.preheader", %"consume blur_x684"
  %blur_y.s0.x.x.rebased678 = phi i32 [ %12690, %"consume blur_x684" ], [ 0, %"for blur_y.s0.x.x.rebased676.preheader" ]
  %12578 = add nsw i32 %blur_y.s0.x.x.rebased678, %t1626
  %a287 = shl nsw i32 %12578, 5
  %12579 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %12579, i32 %a287, i32 %a14
  %12580 = icmp slt i32 %12578, 1
  %12581 = icmp sgt i32 %4, %a287
  %12582 = or i1 %12580, %12581
  br i1 %12582, label %"produce blur_x682", label %"consume blur_x684"

"end for blur_y.s0.x.x.rebased677":               ; preds = %"consume blur_x684", %"end for blur_y.s0.x.x.rebased669"
  br i1 %34, label %"produce blur_x688", label %after_bb685

"produce blur_x682":                              ; preds = %"for blur_y.s0.x.x.rebased676"
  %12583 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s683 = select i1 %12583, i32 %b293, i32 %4
  %t1133 = add nsw i32 %blur_x.s0.x.v1.base.s683, %t2121
  %12584 = sext i32 %t1133 to i64
  %12585 = getelementptr inbounds i16, i16* %read_input, i64 %12584
  %12586 = getelementptr inbounds i16, i16* %12585, i64 1
  %12587 = bitcast i16* %12586 to <16 x i16>*
  %12588 = load <16 x i16>, <16 x i16>* %12587, align 2, !tbaa !396
  %12589 = getelementptr inbounds i16, i16* %12585, i64 17
  %12590 = bitcast i16* %12589 to <16 x i16>*
  %12591 = load <16 x i16>, <16 x i16>* %12590, align 2, !tbaa !396
  %12592 = bitcast i16* %12585 to <16 x i16>*
  %12593 = load <16 x i16>, <16 x i16>* %12592, align 2, !tbaa !396
  %12594 = getelementptr inbounds i16, i16* %12585, i64 16
  %12595 = bitcast i16* %12594 to <16 x i16>*
  %12596 = load <16 x i16>, <16 x i16>* %12595, align 2, !tbaa !396
  %12597 = getelementptr inbounds i16, i16* %12585, i64 2
  %12598 = bitcast i16* %12597 to <16 x i16>*
  %12599 = load <16 x i16>, <16 x i16>* %12598, align 2, !tbaa !396
  %12600 = getelementptr inbounds i16, i16* %12585, i64 18
  %12601 = bitcast i16* %12600 to <16 x i16>*
  %12602 = load <16 x i16>, <16 x i16>* %12601, align 2, !tbaa !396
  %12603 = getelementptr inbounds i16, i16* %12585, i64 4
  %12604 = bitcast i16* %12603 to <16 x i16>*
  %12605 = load <16 x i16>, <16 x i16>* %12604, align 2, !tbaa !396
  %12606 = getelementptr inbounds i16, i16* %12585, i64 20
  %12607 = bitcast i16* %12606 to <16 x i16>*
  %12608 = load <16 x i16>, <16 x i16>* %12607, align 2, !tbaa !396
  %12609 = getelementptr inbounds i16, i16* %12585, i64 3
  %12610 = bitcast i16* %12609 to <16 x i16>*
  %12611 = load <16 x i16>, <16 x i16>* %12610, align 2, !tbaa !396
  %12612 = getelementptr inbounds i16, i16* %12585, i64 19
  %12613 = bitcast i16* %12612 to <16 x i16>*
  %12614 = load <16 x i16>, <16 x i16>* %12613, align 2, !tbaa !396
  %12615 = add <16 x i16> %12593, %12588
  %12616 = add <16 x i16> %12615, %12599
  %12617 = add <16 x i16> %12616, %12605
  %12618 = add <16 x i16> %12617, %12611
  %12619 = add <16 x i16> %12596, %12591
  %12620 = add <16 x i16> %12619, %12602
  %12621 = add <16 x i16> %12620, %12608
  %12622 = add <16 x i16> %12621, %12614
  %12623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12618, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12622, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12625 = shufflevector <16 x i16> %12623, <16 x i16> %12624, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12626 = lshr <32 x i16> %12625, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12627 = shufflevector <32 x i16> %12626, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12628 = sext i32 %blur_x.s0.x.v1.base.s683 to i64
  %12629 = add nsw i64 %12628, %12453
  %12630 = getelementptr inbounds i16, i16* %blur_x, i64 %12629
  %12631 = bitcast i16* %12630 to <16 x i16>*
  store <16 x i16> %12627, <16 x i16>* %12631, align 2, !tbaa !399
  %12632 = shufflevector <32 x i16> %12626, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12633 = getelementptr inbounds i16, i16* %12630, i64 16
  %12634 = bitcast i16* %12633 to <16 x i16>*
  store <16 x i16> %12632, <16 x i16>* %12634, align 2, !tbaa !399
  br label %"consume blur_x684"

"consume blur_x684":                              ; preds = %"for blur_y.s0.x.x.rebased676", %"produce blur_x682"
  %12635 = sext i32 %b293 to i64
  %12636 = add nsw i64 %12456, %12635
  %12637 = getelementptr inbounds i16, i16* %blur_x, i64 %12636
  %12638 = bitcast i16* %12637 to <16 x i16>*
  %12639 = load <16 x i16>, <16 x i16>* %12638, align 2, !tbaa !399
  %12640 = getelementptr inbounds i16, i16* %12637, i64 16
  %12641 = bitcast i16* %12640 to <16 x i16>*
  %12642 = load <16 x i16>, <16 x i16>* %12641, align 2, !tbaa !399
  %12643 = add nsw i64 %12459, %12635
  %12644 = getelementptr inbounds i16, i16* %blur_x, i64 %12643
  %12645 = bitcast i16* %12644 to <16 x i16>*
  %12646 = load <16 x i16>, <16 x i16>* %12645, align 2, !tbaa !399
  %12647 = getelementptr inbounds i16, i16* %12644, i64 16
  %12648 = bitcast i16* %12647 to <16 x i16>*
  %12649 = load <16 x i16>, <16 x i16>* %12648, align 2, !tbaa !399
  %12650 = add nsw i64 %12462, %12635
  %12651 = getelementptr inbounds i16, i16* %blur_x, i64 %12650
  %12652 = bitcast i16* %12651 to <16 x i16>*
  %12653 = load <16 x i16>, <16 x i16>* %12652, align 2, !tbaa !399
  %12654 = getelementptr inbounds i16, i16* %12651, i64 16
  %12655 = bitcast i16* %12654 to <16 x i16>*
  %12656 = load <16 x i16>, <16 x i16>* %12655, align 2, !tbaa !399
  %12657 = add nsw i64 %12465, %12635
  %12658 = getelementptr inbounds i16, i16* %blur_x, i64 %12657
  %12659 = bitcast i16* %12658 to <16 x i16>*
  %12660 = load <16 x i16>, <16 x i16>* %12659, align 2, !tbaa !399
  %12661 = getelementptr inbounds i16, i16* %12658, i64 16
  %12662 = bitcast i16* %12661 to <16 x i16>*
  %12663 = load <16 x i16>, <16 x i16>* %12662, align 2, !tbaa !399
  %12664 = add nsw i64 %12468, %12635
  %12665 = getelementptr inbounds i16, i16* %blur_x, i64 %12664
  %12666 = bitcast i16* %12665 to <16 x i16>*
  %12667 = load <16 x i16>, <16 x i16>* %12666, align 2, !tbaa !399
  %12668 = getelementptr inbounds i16, i16* %12665, i64 16
  %12669 = bitcast i16* %12668 to <16 x i16>*
  %12670 = load <16 x i16>, <16 x i16>* %12669, align 2, !tbaa !399
  %12671 = add <16 x i16> %12646, %12639
  %12672 = add <16 x i16> %12671, %12653
  %12673 = add <16 x i16> %12672, %12660
  %12674 = add <16 x i16> %12673, %12667
  %12675 = add <16 x i16> %12649, %12642
  %12676 = add <16 x i16> %12675, %12656
  %12677 = add <16 x i16> %12676, %12663
  %12678 = add <16 x i16> %12677, %12670
  %12679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12674, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12678, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12681 = shufflevector <16 x i16> %12679, <16 x i16> %12680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12682 = lshr <32 x i16> %12681, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12683 = shufflevector <32 x i16> %12682, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12684 = add nsw i64 %12472, %12635
  %12685 = getelementptr inbounds i16, i16* %66, i64 %12684
  %12686 = bitcast i16* %12685 to <16 x i16>*
  store <16 x i16> %12683, <16 x i16>* %12686, align 2, !tbaa !401
  %12687 = shufflevector <32 x i16> %12682, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12688 = getelementptr inbounds i16, i16* %12685, i64 16
  %12689 = bitcast i16* %12688 to <16 x i16>*
  store <16 x i16> %12687, <16 x i16>* %12689, align 2, !tbaa !401
  %12690 = add nuw nsw i32 %blur_y.s0.x.x.rebased678, 1
  %.not2704 = icmp eq i32 %12690, %t1683
  br i1 %.not2704, label %"end for blur_y.s0.x.x.rebased677", label %"for blur_y.s0.x.x.rebased676"

after_bb685:                                      ; preds = %"end for blur_y.s0.x.x.rebased677", %"produce blur_x688"
  br i1 %100, label %"for blur_y.s0.x.x.rebased690.preheader", label %"end for blur_y.s0.x.x.rebased691", !prof !386

"for blur_y.s0.x.x.rebased690.preheader":         ; preds = %after_bb685
  %12691 = sext i32 %t1754 to i64
  %12692 = zext i32 %.pre-phi3457 to i64
  %12693 = mul nsw i64 %12692, %112
  %12694 = sub nsw i64 %12693, %96
  %12695 = zext i32 %.pre-phi3453 to i64
  %12696 = mul nsw i64 %12695, %112
  %12697 = sub nsw i64 %12696, %96
  %12698 = zext i32 %.pre-phi3463 to i64
  %12699 = mul nsw i64 %12698, %112
  %12700 = sub nsw i64 %12699, %96
  %12701 = zext i32 %.pre-phi3475 to i64
  %12702 = mul nsw i64 %12701, %112
  %12703 = sub nsw i64 %12702, %96
  %12704 = zext i32 %.pre-phi3469 to i64
  %12705 = mul nsw i64 %12704, %112
  %12706 = sub nsw i64 %12705, %96
  %12707 = sext i32 %a26 to i64
  %12708 = add nsw i64 %12707, 27
  %12709 = mul nsw i64 %12708, %113
  %12710 = add nsw i64 %12709, %116
  br label %"for blur_y.s0.x.x.rebased690"

"produce blur_x688":                              ; preds = %"end for blur_y.s0.x.x.rebased677"
  %12711 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %12712 = getelementptr inbounds i16, i16* %12711, i64 -31
  %12713 = bitcast i16* %12712 to <16 x i16>*
  %12714 = load <16 x i16>, <16 x i16>* %12713, align 2, !tbaa !396
  %12715 = getelementptr inbounds i16, i16* %12711, i64 -15
  %12716 = bitcast i16* %12715 to <16 x i16>*
  %12717 = load <16 x i16>, <16 x i16>* %12716, align 2, !tbaa !396
  %12718 = getelementptr inbounds i16, i16* %12711, i64 -32
  %12719 = bitcast i16* %12718 to <16 x i16>*
  %12720 = load <16 x i16>, <16 x i16>* %12719, align 2, !tbaa !396
  %12721 = getelementptr inbounds i16, i16* %12711, i64 -16
  %12722 = bitcast i16* %12721 to <16 x i16>*
  %12723 = load <16 x i16>, <16 x i16>* %12722, align 2, !tbaa !396
  %12724 = getelementptr inbounds i16, i16* %12711, i64 -30
  %12725 = bitcast i16* %12724 to <16 x i16>*
  %12726 = load <16 x i16>, <16 x i16>* %12725, align 2, !tbaa !396
  %12727 = getelementptr inbounds i16, i16* %12711, i64 -14
  %12728 = bitcast i16* %12727 to <16 x i16>*
  %12729 = load <16 x i16>, <16 x i16>* %12728, align 2, !tbaa !396
  %12730 = getelementptr inbounds i16, i16* %12711, i64 -28
  %12731 = bitcast i16* %12730 to <16 x i16>*
  %12732 = load <16 x i16>, <16 x i16>* %12731, align 2, !tbaa !396
  %12733 = getelementptr inbounds i16, i16* %12711, i64 -12
  %12734 = bitcast i16* %12733 to <16 x i16>*
  %12735 = load <16 x i16>, <16 x i16>* %12734, align 2, !tbaa !396
  %12736 = getelementptr inbounds i16, i16* %12711, i64 -29
  %12737 = bitcast i16* %12736 to <16 x i16>*
  %12738 = load <16 x i16>, <16 x i16>* %12737, align 2, !tbaa !396
  %12739 = getelementptr inbounds i16, i16* %12711, i64 -13
  %12740 = bitcast i16* %12739 to <16 x i16>*
  %12741 = load <16 x i16>, <16 x i16>* %12740, align 2, !tbaa !396
  %12742 = add <16 x i16> %12720, %12714
  %12743 = add <16 x i16> %12742, %12726
  %12744 = add <16 x i16> %12743, %12732
  %12745 = add <16 x i16> %12744, %12738
  %12746 = add <16 x i16> %12723, %12717
  %12747 = add <16 x i16> %12746, %12729
  %12748 = add <16 x i16> %12747, %12735
  %12749 = add <16 x i16> %12748, %12741
  %12750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12745, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12751 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12749, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12752 = shufflevector <16 x i16> %12750, <16 x i16> %12751, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12753 = lshr <32 x i16> %12752, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12754 = shufflevector <32 x i16> %12753, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12755 = zext i32 %.pre-phi3475 to i64
  %12756 = mul nsw i64 %97, %12755
  %12757 = add nsw i64 %99, %12756
  %12758 = getelementptr inbounds i16, i16* %blur_x, i64 %12757
  %12759 = getelementptr inbounds i16, i16* %12758, i64 -32
  %12760 = bitcast i16* %12759 to <16 x i16>*
  store <16 x i16> %12754, <16 x i16>* %12760, align 2, !tbaa !399
  %12761 = shufflevector <32 x i16> %12753, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12762 = getelementptr inbounds i16, i16* %12758, i64 -16
  %12763 = bitcast i16* %12762 to <16 x i16>*
  store <16 x i16> %12761, <16 x i16>* %12763, align 2, !tbaa !399
  %12764 = zext i32 %.pre-phi3457 to i64
  %12765 = mul nsw i64 %12764, %112
  %12766 = add nsw i64 %12765, %94
  %12767 = getelementptr inbounds i16, i16* %blur_x, i64 %12766
  %12768 = getelementptr inbounds i16, i16* %12767, i64 -32
  %12769 = bitcast i16* %12768 to <16 x i16>*
  %12770 = load <16 x i16>, <16 x i16>* %12769, align 2, !tbaa !399
  %12771 = getelementptr inbounds i16, i16* %12767, i64 -16
  %12772 = bitcast i16* %12771 to <16 x i16>*
  %12773 = load <16 x i16>, <16 x i16>* %12772, align 2, !tbaa !399
  %12774 = zext i32 %.pre-phi3453 to i64
  %12775 = mul nsw i64 %12774, %112
  %12776 = add nsw i64 %12775, %94
  %12777 = getelementptr inbounds i16, i16* %blur_x, i64 %12776
  %12778 = getelementptr inbounds i16, i16* %12777, i64 -32
  %12779 = bitcast i16* %12778 to <16 x i16>*
  %12780 = load <16 x i16>, <16 x i16>* %12779, align 2, !tbaa !399
  %12781 = getelementptr inbounds i16, i16* %12777, i64 -16
  %12782 = bitcast i16* %12781 to <16 x i16>*
  %12783 = load <16 x i16>, <16 x i16>* %12782, align 2, !tbaa !399
  %12784 = zext i32 %.pre-phi3463 to i64
  %12785 = mul nsw i64 %12784, %112
  %12786 = add nsw i64 %12785, %94
  %12787 = getelementptr inbounds i16, i16* %blur_x, i64 %12786
  %12788 = getelementptr inbounds i16, i16* %12787, i64 -32
  %12789 = bitcast i16* %12788 to <16 x i16>*
  %12790 = load <16 x i16>, <16 x i16>* %12789, align 2, !tbaa !399
  %12791 = getelementptr inbounds i16, i16* %12787, i64 -16
  %12792 = bitcast i16* %12791 to <16 x i16>*
  %12793 = load <16 x i16>, <16 x i16>* %12792, align 2, !tbaa !399
  %12794 = mul nsw i64 %12755, %112
  %12795 = add nsw i64 %12794, %94
  %12796 = getelementptr inbounds i16, i16* %blur_x, i64 %12795
  %12797 = getelementptr inbounds i16, i16* %12796, i64 -32
  %12798 = bitcast i16* %12797 to <16 x i16>*
  %12799 = load <16 x i16>, <16 x i16>* %12798, align 2, !tbaa !399
  %12800 = getelementptr inbounds i16, i16* %12796, i64 -16
  %12801 = bitcast i16* %12800 to <16 x i16>*
  %12802 = load <16 x i16>, <16 x i16>* %12801, align 2, !tbaa !399
  %12803 = zext i32 %.pre-phi3469 to i64
  %12804 = mul nsw i64 %12803, %112
  %12805 = add nsw i64 %12804, %94
  %12806 = getelementptr inbounds i16, i16* %blur_x, i64 %12805
  %12807 = getelementptr inbounds i16, i16* %12806, i64 -32
  %12808 = bitcast i16* %12807 to <16 x i16>*
  %12809 = load <16 x i16>, <16 x i16>* %12808, align 2, !tbaa !399
  %12810 = getelementptr inbounds i16, i16* %12806, i64 -16
  %12811 = bitcast i16* %12810 to <16 x i16>*
  %12812 = load <16 x i16>, <16 x i16>* %12811, align 2, !tbaa !399
  %12813 = add <16 x i16> %12780, %12770
  %12814 = add <16 x i16> %12813, %12790
  %12815 = add <16 x i16> %12814, %12799
  %12816 = add <16 x i16> %12815, %12809
  %12817 = add <16 x i16> %12783, %12773
  %12818 = add <16 x i16> %12817, %12793
  %12819 = add <16 x i16> %12818, %12802
  %12820 = add <16 x i16> %12819, %12812
  %12821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12816, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12822 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12820, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12823 = shufflevector <16 x i16> %12821, <16 x i16> %12822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12824 = lshr <32 x i16> %12823, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12825 = shufflevector <32 x i16> %12824, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12826 = sext i32 %a26 to i64
  %12827 = add nsw i64 %12826, 27
  %12828 = mul nsw i64 %12827, %113
  %12829 = add nsw i64 %115, %12828
  %12830 = getelementptr inbounds i16, i16* %66, i64 %12829
  %12831 = getelementptr inbounds i16, i16* %12830, i64 -32
  %12832 = bitcast i16* %12831 to <16 x i16>*
  store <16 x i16> %12825, <16 x i16>* %12832, align 2, !tbaa !401
  %12833 = shufflevector <32 x i16> %12824, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12834 = getelementptr inbounds i16, i16* %12830, i64 -16
  %12835 = bitcast i16* %12834 to <16 x i16>*
  store <16 x i16> %12833, <16 x i16>* %12835, align 2, !tbaa !401
  br label %after_bb685

"for blur_y.s0.x.x.rebased690":                   ; preds = %"for blur_y.s0.x.x.rebased690.preheader", %"consume blur_x697"
  %indvars.iv3340 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased690.preheader" ], [ %indvars.iv.next3341, %"consume blur_x697" ]
  %12836 = add nsw i64 %indvars.iv3340, %101
  %12837 = icmp slt i64 %12836, 1
  %12838 = trunc i64 %12836 to i32
  %12839 = shl nsw i32 %12838, 5
  %12840 = icmp sgt i32 %4, %12839
  %12841 = or i1 %12837, %12840
  br i1 %12841, label %"produce blur_x696", label %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge"

"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased690"
  %.pre3524 = shl nsw i64 %12836, 5
  br label %"consume blur_x697"

"end for blur_y.s0.x.x.rebased691":               ; preds = %"consume blur_x697", %after_bb685
  br i1 %102, label %"for blur_y.s0.x.x.rebased698.preheader", label %"end for blur_y.s0.x.x.rebased699", !prof !386

"for blur_y.s0.x.x.rebased698.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased691"
  %12842 = sext i32 %t1754 to i64
  %12843 = zext i32 %.pre-phi3457 to i64
  %12844 = mul nsw i64 %12843, %112
  %12845 = sub nsw i64 %12844, %96
  %12846 = zext i32 %.pre-phi3453 to i64
  %12847 = mul nsw i64 %12846, %112
  %12848 = sub nsw i64 %12847, %96
  %12849 = zext i32 %.pre-phi3463 to i64
  %12850 = mul nsw i64 %12849, %112
  %12851 = sub nsw i64 %12850, %96
  %12852 = zext i32 %.pre-phi3475 to i64
  %12853 = mul nsw i64 %12852, %112
  %12854 = sub nsw i64 %12853, %96
  %12855 = zext i32 %.pre-phi3469 to i64
  %12856 = mul nsw i64 %12855, %112
  %12857 = sub nsw i64 %12856, %96
  %12858 = sext i32 %a26 to i64
  %12859 = add nsw i64 %12858, 27
  %12860 = mul nsw i64 %12859, %113
  %12861 = add nsw i64 %12860, %116
  br label %"for blur_y.s0.x.x.rebased698"

"produce blur_x696":                              ; preds = %"for blur_y.s0.x.x.rebased690"
  %t1144 = add nsw i32 %12839, %t2137
  %12862 = sext i32 %t1144 to i64
  %12863 = getelementptr inbounds i16, i16* %read_input, i64 %12862
  %12864 = getelementptr inbounds i16, i16* %12863, i64 1
  %12865 = bitcast i16* %12864 to <16 x i16>*
  %12866 = load <16 x i16>, <16 x i16>* %12865, align 2, !tbaa !396
  %12867 = getelementptr inbounds i16, i16* %12863, i64 17
  %12868 = bitcast i16* %12867 to <16 x i16>*
  %12869 = load <16 x i16>, <16 x i16>* %12868, align 2, !tbaa !396
  %12870 = bitcast i16* %12863 to <16 x i16>*
  %12871 = load <16 x i16>, <16 x i16>* %12870, align 2, !tbaa !396
  %12872 = getelementptr inbounds i16, i16* %12863, i64 16
  %12873 = bitcast i16* %12872 to <16 x i16>*
  %12874 = load <16 x i16>, <16 x i16>* %12873, align 2, !tbaa !396
  %12875 = getelementptr inbounds i16, i16* %12863, i64 2
  %12876 = bitcast i16* %12875 to <16 x i16>*
  %12877 = load <16 x i16>, <16 x i16>* %12876, align 2, !tbaa !396
  %12878 = getelementptr inbounds i16, i16* %12863, i64 18
  %12879 = bitcast i16* %12878 to <16 x i16>*
  %12880 = load <16 x i16>, <16 x i16>* %12879, align 2, !tbaa !396
  %12881 = getelementptr inbounds i16, i16* %12863, i64 4
  %12882 = bitcast i16* %12881 to <16 x i16>*
  %12883 = load <16 x i16>, <16 x i16>* %12882, align 2, !tbaa !396
  %12884 = getelementptr inbounds i16, i16* %12863, i64 20
  %12885 = bitcast i16* %12884 to <16 x i16>*
  %12886 = load <16 x i16>, <16 x i16>* %12885, align 2, !tbaa !396
  %12887 = getelementptr inbounds i16, i16* %12863, i64 3
  %12888 = bitcast i16* %12887 to <16 x i16>*
  %12889 = load <16 x i16>, <16 x i16>* %12888, align 2, !tbaa !396
  %12890 = getelementptr inbounds i16, i16* %12863, i64 19
  %12891 = bitcast i16* %12890 to <16 x i16>*
  %12892 = load <16 x i16>, <16 x i16>* %12891, align 2, !tbaa !396
  %12893 = add <16 x i16> %12871, %12866
  %12894 = add <16 x i16> %12893, %12877
  %12895 = add <16 x i16> %12894, %12883
  %12896 = add <16 x i16> %12895, %12889
  %12897 = add <16 x i16> %12874, %12869
  %12898 = add <16 x i16> %12897, %12880
  %12899 = add <16 x i16> %12898, %12886
  %12900 = add <16 x i16> %12899, %12892
  %12901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12896, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12902 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12900, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12903 = shufflevector <16 x i16> %12901, <16 x i16> %12902, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12904 = lshr <32 x i16> %12903, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12905 = shufflevector <32 x i16> %12904, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12906 = shl nsw i64 %12836, 5
  %12907 = add nsw i64 %12906, %12691
  %12908 = getelementptr inbounds i16, i16* %blur_x, i64 %12907
  %12909 = bitcast i16* %12908 to <16 x i16>*
  store <16 x i16> %12905, <16 x i16>* %12909, align 2, !tbaa !399
  %12910 = shufflevector <32 x i16> %12904, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12911 = getelementptr inbounds i16, i16* %12908, i64 16
  %12912 = bitcast i16* %12911 to <16 x i16>*
  store <16 x i16> %12910, <16 x i16>* %12912, align 2, !tbaa !399
  br label %"consume blur_x697"

"consume blur_x697":                              ; preds = %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge", %"produce blur_x696"
  %.pre-phi3525 = phi i64 [ %.pre3524, %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge" ], [ %12906, %"produce blur_x696" ]
  %12913 = add nsw i64 %12694, %.pre-phi3525
  %12914 = getelementptr inbounds i16, i16* %blur_x, i64 %12913
  %12915 = bitcast i16* %12914 to <16 x i16>*
  %12916 = load <16 x i16>, <16 x i16>* %12915, align 2, !tbaa !399
  %12917 = getelementptr inbounds i16, i16* %12914, i64 16
  %12918 = bitcast i16* %12917 to <16 x i16>*
  %12919 = load <16 x i16>, <16 x i16>* %12918, align 2, !tbaa !399
  %12920 = add nsw i64 %12697, %.pre-phi3525
  %12921 = getelementptr inbounds i16, i16* %blur_x, i64 %12920
  %12922 = bitcast i16* %12921 to <16 x i16>*
  %12923 = load <16 x i16>, <16 x i16>* %12922, align 2, !tbaa !399
  %12924 = getelementptr inbounds i16, i16* %12921, i64 16
  %12925 = bitcast i16* %12924 to <16 x i16>*
  %12926 = load <16 x i16>, <16 x i16>* %12925, align 2, !tbaa !399
  %12927 = add nsw i64 %12700, %.pre-phi3525
  %12928 = getelementptr inbounds i16, i16* %blur_x, i64 %12927
  %12929 = bitcast i16* %12928 to <16 x i16>*
  %12930 = load <16 x i16>, <16 x i16>* %12929, align 2, !tbaa !399
  %12931 = getelementptr inbounds i16, i16* %12928, i64 16
  %12932 = bitcast i16* %12931 to <16 x i16>*
  %12933 = load <16 x i16>, <16 x i16>* %12932, align 2, !tbaa !399
  %12934 = add nsw i64 %12703, %.pre-phi3525
  %12935 = getelementptr inbounds i16, i16* %blur_x, i64 %12934
  %12936 = bitcast i16* %12935 to <16 x i16>*
  %12937 = load <16 x i16>, <16 x i16>* %12936, align 2, !tbaa !399
  %12938 = getelementptr inbounds i16, i16* %12935, i64 16
  %12939 = bitcast i16* %12938 to <16 x i16>*
  %12940 = load <16 x i16>, <16 x i16>* %12939, align 2, !tbaa !399
  %12941 = add nsw i64 %12706, %.pre-phi3525
  %12942 = getelementptr inbounds i16, i16* %blur_x, i64 %12941
  %12943 = bitcast i16* %12942 to <16 x i16>*
  %12944 = load <16 x i16>, <16 x i16>* %12943, align 2, !tbaa !399
  %12945 = getelementptr inbounds i16, i16* %12942, i64 16
  %12946 = bitcast i16* %12945 to <16 x i16>*
  %12947 = load <16 x i16>, <16 x i16>* %12946, align 2, !tbaa !399
  %12948 = add <16 x i16> %12923, %12916
  %12949 = add <16 x i16> %12948, %12930
  %12950 = add <16 x i16> %12949, %12937
  %12951 = add <16 x i16> %12950, %12944
  %12952 = add <16 x i16> %12926, %12919
  %12953 = add <16 x i16> %12952, %12933
  %12954 = add <16 x i16> %12953, %12940
  %12955 = add <16 x i16> %12954, %12947
  %12956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12951, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12955, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12958 = shufflevector <16 x i16> %12956, <16 x i16> %12957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12959 = lshr <32 x i16> %12958, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12960 = shufflevector <32 x i16> %12959, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12961 = add nsw i64 %12710, %.pre-phi3525
  %12962 = getelementptr inbounds i16, i16* %66, i64 %12961
  %12963 = bitcast i16* %12962 to <16 x i16>*
  store <16 x i16> %12960, <16 x i16>* %12963, align 2, !tbaa !401
  %12964 = shufflevector <32 x i16> %12959, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12965 = getelementptr inbounds i16, i16* %12962, i64 16
  %12966 = bitcast i16* %12965 to <16 x i16>*
  store <16 x i16> %12964, <16 x i16>* %12966, align 2, !tbaa !401
  %indvars.iv.next3341 = add nuw nsw i64 %indvars.iv3340, 1
  %.not2703 = icmp eq i64 %indvars.iv.next3341, %184
  br i1 %.not2703, label %"end for blur_y.s0.x.x.rebased691", label %"for blur_y.s0.x.x.rebased690"

"for blur_y.s0.x.x.rebased698":                   ; preds = %"for blur_y.s0.x.x.rebased698.preheader", %"consume blur_x706"
  %blur_y.s0.x.x.rebased700 = phi i32 [ %13079, %"consume blur_x706" ], [ 0, %"for blur_y.s0.x.x.rebased698.preheader" ]
  %12967 = add nsw i32 %blur_y.s0.x.x.rebased700, %t1626
  %a294 = shl nsw i32 %12967, 5
  %12968 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %12968, i32 %a294, i32 %a14
  %12969 = icmp slt i32 %12967, 1
  %12970 = icmp sgt i32 %4, %a294
  %12971 = or i1 %12969, %12970
  br i1 %12971, label %"produce blur_x704", label %"consume blur_x706"

"end for blur_y.s0.x.x.rebased699":               ; preds = %"consume blur_x706", %"end for blur_y.s0.x.x.rebased691"
  br i1 %34, label %"produce blur_x710", label %after_bb707

"produce blur_x704":                              ; preds = %"for blur_y.s0.x.x.rebased698"
  %12972 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s705 = select i1 %12972, i32 %b300, i32 %4
  %t1149 = add nsw i32 %blur_x.s0.x.v1.base.s705, %t2137
  %12973 = sext i32 %t1149 to i64
  %12974 = getelementptr inbounds i16, i16* %read_input, i64 %12973
  %12975 = getelementptr inbounds i16, i16* %12974, i64 1
  %12976 = bitcast i16* %12975 to <16 x i16>*
  %12977 = load <16 x i16>, <16 x i16>* %12976, align 2, !tbaa !396
  %12978 = getelementptr inbounds i16, i16* %12974, i64 17
  %12979 = bitcast i16* %12978 to <16 x i16>*
  %12980 = load <16 x i16>, <16 x i16>* %12979, align 2, !tbaa !396
  %12981 = bitcast i16* %12974 to <16 x i16>*
  %12982 = load <16 x i16>, <16 x i16>* %12981, align 2, !tbaa !396
  %12983 = getelementptr inbounds i16, i16* %12974, i64 16
  %12984 = bitcast i16* %12983 to <16 x i16>*
  %12985 = load <16 x i16>, <16 x i16>* %12984, align 2, !tbaa !396
  %12986 = getelementptr inbounds i16, i16* %12974, i64 2
  %12987 = bitcast i16* %12986 to <16 x i16>*
  %12988 = load <16 x i16>, <16 x i16>* %12987, align 2, !tbaa !396
  %12989 = getelementptr inbounds i16, i16* %12974, i64 18
  %12990 = bitcast i16* %12989 to <16 x i16>*
  %12991 = load <16 x i16>, <16 x i16>* %12990, align 2, !tbaa !396
  %12992 = getelementptr inbounds i16, i16* %12974, i64 4
  %12993 = bitcast i16* %12992 to <16 x i16>*
  %12994 = load <16 x i16>, <16 x i16>* %12993, align 2, !tbaa !396
  %12995 = getelementptr inbounds i16, i16* %12974, i64 20
  %12996 = bitcast i16* %12995 to <16 x i16>*
  %12997 = load <16 x i16>, <16 x i16>* %12996, align 2, !tbaa !396
  %12998 = getelementptr inbounds i16, i16* %12974, i64 3
  %12999 = bitcast i16* %12998 to <16 x i16>*
  %13000 = load <16 x i16>, <16 x i16>* %12999, align 2, !tbaa !396
  %13001 = getelementptr inbounds i16, i16* %12974, i64 19
  %13002 = bitcast i16* %13001 to <16 x i16>*
  %13003 = load <16 x i16>, <16 x i16>* %13002, align 2, !tbaa !396
  %13004 = add <16 x i16> %12982, %12977
  %13005 = add <16 x i16> %13004, %12988
  %13006 = add <16 x i16> %13005, %12994
  %13007 = add <16 x i16> %13006, %13000
  %13008 = add <16 x i16> %12985, %12980
  %13009 = add <16 x i16> %13008, %12991
  %13010 = add <16 x i16> %13009, %12997
  %13011 = add <16 x i16> %13010, %13003
  %13012 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13007, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13013 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13011, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13014 = shufflevector <16 x i16> %13012, <16 x i16> %13013, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13015 = lshr <32 x i16> %13014, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13016 = shufflevector <32 x i16> %13015, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13017 = sext i32 %blur_x.s0.x.v1.base.s705 to i64
  %13018 = add nsw i64 %13017, %12842
  %13019 = getelementptr inbounds i16, i16* %blur_x, i64 %13018
  %13020 = bitcast i16* %13019 to <16 x i16>*
  store <16 x i16> %13016, <16 x i16>* %13020, align 2, !tbaa !399
  %13021 = shufflevector <32 x i16> %13015, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13022 = getelementptr inbounds i16, i16* %13019, i64 16
  %13023 = bitcast i16* %13022 to <16 x i16>*
  store <16 x i16> %13021, <16 x i16>* %13023, align 2, !tbaa !399
  br label %"consume blur_x706"

"consume blur_x706":                              ; preds = %"for blur_y.s0.x.x.rebased698", %"produce blur_x704"
  %13024 = sext i32 %b300 to i64
  %13025 = add nsw i64 %12845, %13024
  %13026 = getelementptr inbounds i16, i16* %blur_x, i64 %13025
  %13027 = bitcast i16* %13026 to <16 x i16>*
  %13028 = load <16 x i16>, <16 x i16>* %13027, align 2, !tbaa !399
  %13029 = getelementptr inbounds i16, i16* %13026, i64 16
  %13030 = bitcast i16* %13029 to <16 x i16>*
  %13031 = load <16 x i16>, <16 x i16>* %13030, align 2, !tbaa !399
  %13032 = add nsw i64 %12848, %13024
  %13033 = getelementptr inbounds i16, i16* %blur_x, i64 %13032
  %13034 = bitcast i16* %13033 to <16 x i16>*
  %13035 = load <16 x i16>, <16 x i16>* %13034, align 2, !tbaa !399
  %13036 = getelementptr inbounds i16, i16* %13033, i64 16
  %13037 = bitcast i16* %13036 to <16 x i16>*
  %13038 = load <16 x i16>, <16 x i16>* %13037, align 2, !tbaa !399
  %13039 = add nsw i64 %12851, %13024
  %13040 = getelementptr inbounds i16, i16* %blur_x, i64 %13039
  %13041 = bitcast i16* %13040 to <16 x i16>*
  %13042 = load <16 x i16>, <16 x i16>* %13041, align 2, !tbaa !399
  %13043 = getelementptr inbounds i16, i16* %13040, i64 16
  %13044 = bitcast i16* %13043 to <16 x i16>*
  %13045 = load <16 x i16>, <16 x i16>* %13044, align 2, !tbaa !399
  %13046 = add nsw i64 %12854, %13024
  %13047 = getelementptr inbounds i16, i16* %blur_x, i64 %13046
  %13048 = bitcast i16* %13047 to <16 x i16>*
  %13049 = load <16 x i16>, <16 x i16>* %13048, align 2, !tbaa !399
  %13050 = getelementptr inbounds i16, i16* %13047, i64 16
  %13051 = bitcast i16* %13050 to <16 x i16>*
  %13052 = load <16 x i16>, <16 x i16>* %13051, align 2, !tbaa !399
  %13053 = add nsw i64 %12857, %13024
  %13054 = getelementptr inbounds i16, i16* %blur_x, i64 %13053
  %13055 = bitcast i16* %13054 to <16 x i16>*
  %13056 = load <16 x i16>, <16 x i16>* %13055, align 2, !tbaa !399
  %13057 = getelementptr inbounds i16, i16* %13054, i64 16
  %13058 = bitcast i16* %13057 to <16 x i16>*
  %13059 = load <16 x i16>, <16 x i16>* %13058, align 2, !tbaa !399
  %13060 = add <16 x i16> %13035, %13028
  %13061 = add <16 x i16> %13060, %13042
  %13062 = add <16 x i16> %13061, %13049
  %13063 = add <16 x i16> %13062, %13056
  %13064 = add <16 x i16> %13038, %13031
  %13065 = add <16 x i16> %13064, %13045
  %13066 = add <16 x i16> %13065, %13052
  %13067 = add <16 x i16> %13066, %13059
  %13068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13063, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13069 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13067, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13070 = shufflevector <16 x i16> %13068, <16 x i16> %13069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13071 = lshr <32 x i16> %13070, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13072 = shufflevector <32 x i16> %13071, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13073 = add nsw i64 %12861, %13024
  %13074 = getelementptr inbounds i16, i16* %66, i64 %13073
  %13075 = bitcast i16* %13074 to <16 x i16>*
  store <16 x i16> %13072, <16 x i16>* %13075, align 2, !tbaa !401
  %13076 = shufflevector <32 x i16> %13071, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13077 = getelementptr inbounds i16, i16* %13074, i64 16
  %13078 = bitcast i16* %13077 to <16 x i16>*
  store <16 x i16> %13076, <16 x i16>* %13078, align 2, !tbaa !401
  %13079 = add nuw nsw i32 %blur_y.s0.x.x.rebased700, 1
  %.not2702 = icmp eq i32 %13079, %t1683
  br i1 %.not2702, label %"end for blur_y.s0.x.x.rebased699", label %"for blur_y.s0.x.x.rebased698"

after_bb707:                                      ; preds = %"end for blur_y.s0.x.x.rebased699", %"produce blur_x710"
  br i1 %100, label %"for blur_y.s0.x.x.rebased712.preheader", label %"end for blur_y.s0.x.x.rebased713", !prof !386

"for blur_y.s0.x.x.rebased712.preheader":         ; preds = %after_bb707
  %13080 = sext i32 %t1682 to i64
  %13081 = zext i32 %.pre-phi3463 to i64
  %13082 = mul nsw i64 %13081, %112
  %13083 = sub nsw i64 %13082, %96
  %13084 = zext i32 %.pre-phi3457 to i64
  %13085 = mul nsw i64 %13084, %112
  %13086 = sub nsw i64 %13085, %96
  %13087 = zext i32 %.pre-phi3469 to i64
  %13088 = mul nsw i64 %13087, %112
  %13089 = sub nsw i64 %13088, %96
  %13090 = zext i32 %.pre-phi to i64
  %13091 = mul nsw i64 %13090, %112
  %13092 = sub nsw i64 %13091, %96
  %13093 = zext i32 %.pre-phi3475 to i64
  %13094 = mul nsw i64 %13093, %112
  %13095 = sub nsw i64 %13094, %96
  %13096 = sext i32 %a26 to i64
  %13097 = add nsw i64 %13096, 28
  %13098 = mul nsw i64 %13097, %113
  %13099 = add nsw i64 %13098, %116
  br label %"for blur_y.s0.x.x.rebased712"

"produce blur_x710":                              ; preds = %"end for blur_y.s0.x.x.rebased699"
  %13100 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %13101 = getelementptr inbounds i16, i16* %13100, i64 -31
  %13102 = bitcast i16* %13101 to <16 x i16>*
  %13103 = load <16 x i16>, <16 x i16>* %13102, align 2, !tbaa !396
  %13104 = getelementptr inbounds i16, i16* %13100, i64 -15
  %13105 = bitcast i16* %13104 to <16 x i16>*
  %13106 = load <16 x i16>, <16 x i16>* %13105, align 2, !tbaa !396
  %13107 = getelementptr inbounds i16, i16* %13100, i64 -32
  %13108 = bitcast i16* %13107 to <16 x i16>*
  %13109 = load <16 x i16>, <16 x i16>* %13108, align 2, !tbaa !396
  %13110 = getelementptr inbounds i16, i16* %13100, i64 -16
  %13111 = bitcast i16* %13110 to <16 x i16>*
  %13112 = load <16 x i16>, <16 x i16>* %13111, align 2, !tbaa !396
  %13113 = getelementptr inbounds i16, i16* %13100, i64 -30
  %13114 = bitcast i16* %13113 to <16 x i16>*
  %13115 = load <16 x i16>, <16 x i16>* %13114, align 2, !tbaa !396
  %13116 = getelementptr inbounds i16, i16* %13100, i64 -14
  %13117 = bitcast i16* %13116 to <16 x i16>*
  %13118 = load <16 x i16>, <16 x i16>* %13117, align 2, !tbaa !396
  %13119 = getelementptr inbounds i16, i16* %13100, i64 -28
  %13120 = bitcast i16* %13119 to <16 x i16>*
  %13121 = load <16 x i16>, <16 x i16>* %13120, align 2, !tbaa !396
  %13122 = getelementptr inbounds i16, i16* %13100, i64 -12
  %13123 = bitcast i16* %13122 to <16 x i16>*
  %13124 = load <16 x i16>, <16 x i16>* %13123, align 2, !tbaa !396
  %13125 = getelementptr inbounds i16, i16* %13100, i64 -29
  %13126 = bitcast i16* %13125 to <16 x i16>*
  %13127 = load <16 x i16>, <16 x i16>* %13126, align 2, !tbaa !396
  %13128 = getelementptr inbounds i16, i16* %13100, i64 -13
  %13129 = bitcast i16* %13128 to <16 x i16>*
  %13130 = load <16 x i16>, <16 x i16>* %13129, align 2, !tbaa !396
  %13131 = add <16 x i16> %13109, %13103
  %13132 = add <16 x i16> %13131, %13115
  %13133 = add <16 x i16> %13132, %13121
  %13134 = add <16 x i16> %13133, %13127
  %13135 = add <16 x i16> %13112, %13106
  %13136 = add <16 x i16> %13135, %13118
  %13137 = add <16 x i16> %13136, %13124
  %13138 = add <16 x i16> %13137, %13130
  %13139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13134, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13140 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13138, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13141 = shufflevector <16 x i16> %13139, <16 x i16> %13140, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13142 = lshr <32 x i16> %13141, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13143 = shufflevector <32 x i16> %13142, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13144 = zext i32 %.pre-phi to i64
  %13145 = mul nsw i64 %97, %13144
  %13146 = add nsw i64 %99, %13145
  %13147 = getelementptr inbounds i16, i16* %blur_x, i64 %13146
  %13148 = getelementptr inbounds i16, i16* %13147, i64 -32
  %13149 = bitcast i16* %13148 to <16 x i16>*
  store <16 x i16> %13143, <16 x i16>* %13149, align 2, !tbaa !399
  %13150 = shufflevector <32 x i16> %13142, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13151 = getelementptr inbounds i16, i16* %13147, i64 -16
  %13152 = bitcast i16* %13151 to <16 x i16>*
  store <16 x i16> %13150, <16 x i16>* %13152, align 2, !tbaa !399
  %13153 = zext i32 %.pre-phi3463 to i64
  %13154 = mul nsw i64 %13153, %112
  %13155 = add nsw i64 %13154, %94
  %13156 = getelementptr inbounds i16, i16* %blur_x, i64 %13155
  %13157 = getelementptr inbounds i16, i16* %13156, i64 -32
  %13158 = bitcast i16* %13157 to <16 x i16>*
  %13159 = load <16 x i16>, <16 x i16>* %13158, align 2, !tbaa !399
  %13160 = getelementptr inbounds i16, i16* %13156, i64 -16
  %13161 = bitcast i16* %13160 to <16 x i16>*
  %13162 = load <16 x i16>, <16 x i16>* %13161, align 2, !tbaa !399
  %13163 = zext i32 %.pre-phi3457 to i64
  %13164 = mul nsw i64 %13163, %112
  %13165 = add nsw i64 %13164, %94
  %13166 = getelementptr inbounds i16, i16* %blur_x, i64 %13165
  %13167 = getelementptr inbounds i16, i16* %13166, i64 -32
  %13168 = bitcast i16* %13167 to <16 x i16>*
  %13169 = load <16 x i16>, <16 x i16>* %13168, align 2, !tbaa !399
  %13170 = getelementptr inbounds i16, i16* %13166, i64 -16
  %13171 = bitcast i16* %13170 to <16 x i16>*
  %13172 = load <16 x i16>, <16 x i16>* %13171, align 2, !tbaa !399
  %13173 = zext i32 %.pre-phi3469 to i64
  %13174 = mul nsw i64 %13173, %112
  %13175 = add nsw i64 %13174, %94
  %13176 = getelementptr inbounds i16, i16* %blur_x, i64 %13175
  %13177 = getelementptr inbounds i16, i16* %13176, i64 -32
  %13178 = bitcast i16* %13177 to <16 x i16>*
  %13179 = load <16 x i16>, <16 x i16>* %13178, align 2, !tbaa !399
  %13180 = getelementptr inbounds i16, i16* %13176, i64 -16
  %13181 = bitcast i16* %13180 to <16 x i16>*
  %13182 = load <16 x i16>, <16 x i16>* %13181, align 2, !tbaa !399
  %13183 = mul nsw i64 %13144, %112
  %13184 = add nsw i64 %13183, %94
  %13185 = getelementptr inbounds i16, i16* %blur_x, i64 %13184
  %13186 = getelementptr inbounds i16, i16* %13185, i64 -32
  %13187 = bitcast i16* %13186 to <16 x i16>*
  %13188 = load <16 x i16>, <16 x i16>* %13187, align 2, !tbaa !399
  %13189 = getelementptr inbounds i16, i16* %13185, i64 -16
  %13190 = bitcast i16* %13189 to <16 x i16>*
  %13191 = load <16 x i16>, <16 x i16>* %13190, align 2, !tbaa !399
  %13192 = zext i32 %.pre-phi3475 to i64
  %13193 = mul nsw i64 %13192, %112
  %13194 = add nsw i64 %13193, %94
  %13195 = getelementptr inbounds i16, i16* %blur_x, i64 %13194
  %13196 = getelementptr inbounds i16, i16* %13195, i64 -32
  %13197 = bitcast i16* %13196 to <16 x i16>*
  %13198 = load <16 x i16>, <16 x i16>* %13197, align 2, !tbaa !399
  %13199 = getelementptr inbounds i16, i16* %13195, i64 -16
  %13200 = bitcast i16* %13199 to <16 x i16>*
  %13201 = load <16 x i16>, <16 x i16>* %13200, align 2, !tbaa !399
  %13202 = add <16 x i16> %13169, %13159
  %13203 = add <16 x i16> %13202, %13179
  %13204 = add <16 x i16> %13203, %13188
  %13205 = add <16 x i16> %13204, %13198
  %13206 = add <16 x i16> %13172, %13162
  %13207 = add <16 x i16> %13206, %13182
  %13208 = add <16 x i16> %13207, %13191
  %13209 = add <16 x i16> %13208, %13201
  %13210 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13205, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13211 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13209, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13212 = shufflevector <16 x i16> %13210, <16 x i16> %13211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13213 = lshr <32 x i16> %13212, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13214 = shufflevector <32 x i16> %13213, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13215 = sext i32 %a26 to i64
  %13216 = add nsw i64 %13215, 28
  %13217 = mul nsw i64 %13216, %113
  %13218 = add nsw i64 %115, %13217
  %13219 = getelementptr inbounds i16, i16* %66, i64 %13218
  %13220 = getelementptr inbounds i16, i16* %13219, i64 -32
  %13221 = bitcast i16* %13220 to <16 x i16>*
  store <16 x i16> %13214, <16 x i16>* %13221, align 2, !tbaa !401
  %13222 = shufflevector <32 x i16> %13213, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13223 = getelementptr inbounds i16, i16* %13219, i64 -16
  %13224 = bitcast i16* %13223 to <16 x i16>*
  store <16 x i16> %13222, <16 x i16>* %13224, align 2, !tbaa !401
  br label %after_bb707

"for blur_y.s0.x.x.rebased712":                   ; preds = %"for blur_y.s0.x.x.rebased712.preheader", %"consume blur_x719"
  %indvars.iv3343 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased712.preheader" ], [ %indvars.iv.next3344, %"consume blur_x719" ]
  %13225 = add nsw i64 %indvars.iv3343, %101
  %13226 = icmp slt i64 %13225, 1
  %13227 = trunc i64 %13225 to i32
  %13228 = shl nsw i32 %13227, 5
  %13229 = icmp sgt i32 %4, %13228
  %13230 = or i1 %13226, %13229
  br i1 %13230, label %"produce blur_x718", label %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge"

"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased712"
  %.pre3526 = shl nsw i64 %13225, 5
  br label %"consume blur_x719"

"end for blur_y.s0.x.x.rebased713":               ; preds = %"consume blur_x719", %after_bb707
  br i1 %102, label %"for blur_y.s0.x.x.rebased720.preheader", label %"end for blur_y.s0.x.x.rebased721", !prof !386

"for blur_y.s0.x.x.rebased720.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased713"
  %13231 = sext i32 %t1682 to i64
  %13232 = zext i32 %.pre-phi3463 to i64
  %13233 = mul nsw i64 %13232, %112
  %13234 = sub nsw i64 %13233, %96
  %13235 = zext i32 %.pre-phi3457 to i64
  %13236 = mul nsw i64 %13235, %112
  %13237 = sub nsw i64 %13236, %96
  %13238 = zext i32 %.pre-phi3469 to i64
  %13239 = mul nsw i64 %13238, %112
  %13240 = sub nsw i64 %13239, %96
  %13241 = zext i32 %.pre-phi to i64
  %13242 = mul nsw i64 %13241, %112
  %13243 = sub nsw i64 %13242, %96
  %13244 = zext i32 %.pre-phi3475 to i64
  %13245 = mul nsw i64 %13244, %112
  %13246 = sub nsw i64 %13245, %96
  %13247 = sext i32 %a26 to i64
  %13248 = add nsw i64 %13247, 28
  %13249 = mul nsw i64 %13248, %113
  %13250 = add nsw i64 %13249, %116
  br label %"for blur_y.s0.x.x.rebased720"

"produce blur_x718":                              ; preds = %"for blur_y.s0.x.x.rebased712"
  %t1160 = add nsw i32 %13228, %t2153
  %13251 = sext i32 %t1160 to i64
  %13252 = getelementptr inbounds i16, i16* %read_input, i64 %13251
  %13253 = getelementptr inbounds i16, i16* %13252, i64 1
  %13254 = bitcast i16* %13253 to <16 x i16>*
  %13255 = load <16 x i16>, <16 x i16>* %13254, align 2, !tbaa !396
  %13256 = getelementptr inbounds i16, i16* %13252, i64 17
  %13257 = bitcast i16* %13256 to <16 x i16>*
  %13258 = load <16 x i16>, <16 x i16>* %13257, align 2, !tbaa !396
  %13259 = bitcast i16* %13252 to <16 x i16>*
  %13260 = load <16 x i16>, <16 x i16>* %13259, align 2, !tbaa !396
  %13261 = getelementptr inbounds i16, i16* %13252, i64 16
  %13262 = bitcast i16* %13261 to <16 x i16>*
  %13263 = load <16 x i16>, <16 x i16>* %13262, align 2, !tbaa !396
  %13264 = getelementptr inbounds i16, i16* %13252, i64 2
  %13265 = bitcast i16* %13264 to <16 x i16>*
  %13266 = load <16 x i16>, <16 x i16>* %13265, align 2, !tbaa !396
  %13267 = getelementptr inbounds i16, i16* %13252, i64 18
  %13268 = bitcast i16* %13267 to <16 x i16>*
  %13269 = load <16 x i16>, <16 x i16>* %13268, align 2, !tbaa !396
  %13270 = getelementptr inbounds i16, i16* %13252, i64 4
  %13271 = bitcast i16* %13270 to <16 x i16>*
  %13272 = load <16 x i16>, <16 x i16>* %13271, align 2, !tbaa !396
  %13273 = getelementptr inbounds i16, i16* %13252, i64 20
  %13274 = bitcast i16* %13273 to <16 x i16>*
  %13275 = load <16 x i16>, <16 x i16>* %13274, align 2, !tbaa !396
  %13276 = getelementptr inbounds i16, i16* %13252, i64 3
  %13277 = bitcast i16* %13276 to <16 x i16>*
  %13278 = load <16 x i16>, <16 x i16>* %13277, align 2, !tbaa !396
  %13279 = getelementptr inbounds i16, i16* %13252, i64 19
  %13280 = bitcast i16* %13279 to <16 x i16>*
  %13281 = load <16 x i16>, <16 x i16>* %13280, align 2, !tbaa !396
  %13282 = add <16 x i16> %13260, %13255
  %13283 = add <16 x i16> %13282, %13266
  %13284 = add <16 x i16> %13283, %13272
  %13285 = add <16 x i16> %13284, %13278
  %13286 = add <16 x i16> %13263, %13258
  %13287 = add <16 x i16> %13286, %13269
  %13288 = add <16 x i16> %13287, %13275
  %13289 = add <16 x i16> %13288, %13281
  %13290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13285, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13291 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13289, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13292 = shufflevector <16 x i16> %13290, <16 x i16> %13291, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13293 = lshr <32 x i16> %13292, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13294 = shufflevector <32 x i16> %13293, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13295 = shl nsw i64 %13225, 5
  %13296 = add nsw i64 %13295, %13080
  %13297 = getelementptr inbounds i16, i16* %blur_x, i64 %13296
  %13298 = bitcast i16* %13297 to <16 x i16>*
  store <16 x i16> %13294, <16 x i16>* %13298, align 2, !tbaa !399
  %13299 = shufflevector <32 x i16> %13293, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13300 = getelementptr inbounds i16, i16* %13297, i64 16
  %13301 = bitcast i16* %13300 to <16 x i16>*
  store <16 x i16> %13299, <16 x i16>* %13301, align 2, !tbaa !399
  br label %"consume blur_x719"

"consume blur_x719":                              ; preds = %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge", %"produce blur_x718"
  %.pre-phi3527 = phi i64 [ %.pre3526, %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge" ], [ %13295, %"produce blur_x718" ]
  %13302 = add nsw i64 %13083, %.pre-phi3527
  %13303 = getelementptr inbounds i16, i16* %blur_x, i64 %13302
  %13304 = bitcast i16* %13303 to <16 x i16>*
  %13305 = load <16 x i16>, <16 x i16>* %13304, align 2, !tbaa !399
  %13306 = getelementptr inbounds i16, i16* %13303, i64 16
  %13307 = bitcast i16* %13306 to <16 x i16>*
  %13308 = load <16 x i16>, <16 x i16>* %13307, align 2, !tbaa !399
  %13309 = add nsw i64 %13086, %.pre-phi3527
  %13310 = getelementptr inbounds i16, i16* %blur_x, i64 %13309
  %13311 = bitcast i16* %13310 to <16 x i16>*
  %13312 = load <16 x i16>, <16 x i16>* %13311, align 2, !tbaa !399
  %13313 = getelementptr inbounds i16, i16* %13310, i64 16
  %13314 = bitcast i16* %13313 to <16 x i16>*
  %13315 = load <16 x i16>, <16 x i16>* %13314, align 2, !tbaa !399
  %13316 = add nsw i64 %13089, %.pre-phi3527
  %13317 = getelementptr inbounds i16, i16* %blur_x, i64 %13316
  %13318 = bitcast i16* %13317 to <16 x i16>*
  %13319 = load <16 x i16>, <16 x i16>* %13318, align 2, !tbaa !399
  %13320 = getelementptr inbounds i16, i16* %13317, i64 16
  %13321 = bitcast i16* %13320 to <16 x i16>*
  %13322 = load <16 x i16>, <16 x i16>* %13321, align 2, !tbaa !399
  %13323 = add nsw i64 %13092, %.pre-phi3527
  %13324 = getelementptr inbounds i16, i16* %blur_x, i64 %13323
  %13325 = bitcast i16* %13324 to <16 x i16>*
  %13326 = load <16 x i16>, <16 x i16>* %13325, align 2, !tbaa !399
  %13327 = getelementptr inbounds i16, i16* %13324, i64 16
  %13328 = bitcast i16* %13327 to <16 x i16>*
  %13329 = load <16 x i16>, <16 x i16>* %13328, align 2, !tbaa !399
  %13330 = add nsw i64 %13095, %.pre-phi3527
  %13331 = getelementptr inbounds i16, i16* %blur_x, i64 %13330
  %13332 = bitcast i16* %13331 to <16 x i16>*
  %13333 = load <16 x i16>, <16 x i16>* %13332, align 2, !tbaa !399
  %13334 = getelementptr inbounds i16, i16* %13331, i64 16
  %13335 = bitcast i16* %13334 to <16 x i16>*
  %13336 = load <16 x i16>, <16 x i16>* %13335, align 2, !tbaa !399
  %13337 = add <16 x i16> %13312, %13305
  %13338 = add <16 x i16> %13337, %13319
  %13339 = add <16 x i16> %13338, %13326
  %13340 = add <16 x i16> %13339, %13333
  %13341 = add <16 x i16> %13315, %13308
  %13342 = add <16 x i16> %13341, %13322
  %13343 = add <16 x i16> %13342, %13329
  %13344 = add <16 x i16> %13343, %13336
  %13345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13340, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13346 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13344, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13347 = shufflevector <16 x i16> %13345, <16 x i16> %13346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13348 = lshr <32 x i16> %13347, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13349 = shufflevector <32 x i16> %13348, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13350 = add nsw i64 %13099, %.pre-phi3527
  %13351 = getelementptr inbounds i16, i16* %66, i64 %13350
  %13352 = bitcast i16* %13351 to <16 x i16>*
  store <16 x i16> %13349, <16 x i16>* %13352, align 2, !tbaa !401
  %13353 = shufflevector <32 x i16> %13348, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13354 = getelementptr inbounds i16, i16* %13351, i64 16
  %13355 = bitcast i16* %13354 to <16 x i16>*
  store <16 x i16> %13353, <16 x i16>* %13355, align 2, !tbaa !401
  %indvars.iv.next3344 = add nuw nsw i64 %indvars.iv3343, 1
  %.not2701 = icmp eq i64 %indvars.iv.next3344, %184
  br i1 %.not2701, label %"end for blur_y.s0.x.x.rebased713", label %"for blur_y.s0.x.x.rebased712"

"for blur_y.s0.x.x.rebased720":                   ; preds = %"for blur_y.s0.x.x.rebased720.preheader", %"consume blur_x728"
  %blur_y.s0.x.x.rebased722 = phi i32 [ %13468, %"consume blur_x728" ], [ 0, %"for blur_y.s0.x.x.rebased720.preheader" ]
  %13356 = add nsw i32 %blur_y.s0.x.x.rebased722, %t1626
  %a301 = shl nsw i32 %13356, 5
  %13357 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %13357, i32 %a301, i32 %a14
  %13358 = icmp slt i32 %13356, 1
  %13359 = icmp sgt i32 %4, %a301
  %13360 = or i1 %13358, %13359
  br i1 %13360, label %"produce blur_x726", label %"consume blur_x728"

"end for blur_y.s0.x.x.rebased721":               ; preds = %"consume blur_x728", %"end for blur_y.s0.x.x.rebased713"
  br i1 %34, label %"produce blur_x732", label %after_bb729

"produce blur_x726":                              ; preds = %"for blur_y.s0.x.x.rebased720"
  %13361 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s727 = select i1 %13361, i32 %b307, i32 %4
  %t1165 = add nsw i32 %blur_x.s0.x.v1.base.s727, %t2153
  %13362 = sext i32 %t1165 to i64
  %13363 = getelementptr inbounds i16, i16* %read_input, i64 %13362
  %13364 = getelementptr inbounds i16, i16* %13363, i64 1
  %13365 = bitcast i16* %13364 to <16 x i16>*
  %13366 = load <16 x i16>, <16 x i16>* %13365, align 2, !tbaa !396
  %13367 = getelementptr inbounds i16, i16* %13363, i64 17
  %13368 = bitcast i16* %13367 to <16 x i16>*
  %13369 = load <16 x i16>, <16 x i16>* %13368, align 2, !tbaa !396
  %13370 = bitcast i16* %13363 to <16 x i16>*
  %13371 = load <16 x i16>, <16 x i16>* %13370, align 2, !tbaa !396
  %13372 = getelementptr inbounds i16, i16* %13363, i64 16
  %13373 = bitcast i16* %13372 to <16 x i16>*
  %13374 = load <16 x i16>, <16 x i16>* %13373, align 2, !tbaa !396
  %13375 = getelementptr inbounds i16, i16* %13363, i64 2
  %13376 = bitcast i16* %13375 to <16 x i16>*
  %13377 = load <16 x i16>, <16 x i16>* %13376, align 2, !tbaa !396
  %13378 = getelementptr inbounds i16, i16* %13363, i64 18
  %13379 = bitcast i16* %13378 to <16 x i16>*
  %13380 = load <16 x i16>, <16 x i16>* %13379, align 2, !tbaa !396
  %13381 = getelementptr inbounds i16, i16* %13363, i64 4
  %13382 = bitcast i16* %13381 to <16 x i16>*
  %13383 = load <16 x i16>, <16 x i16>* %13382, align 2, !tbaa !396
  %13384 = getelementptr inbounds i16, i16* %13363, i64 20
  %13385 = bitcast i16* %13384 to <16 x i16>*
  %13386 = load <16 x i16>, <16 x i16>* %13385, align 2, !tbaa !396
  %13387 = getelementptr inbounds i16, i16* %13363, i64 3
  %13388 = bitcast i16* %13387 to <16 x i16>*
  %13389 = load <16 x i16>, <16 x i16>* %13388, align 2, !tbaa !396
  %13390 = getelementptr inbounds i16, i16* %13363, i64 19
  %13391 = bitcast i16* %13390 to <16 x i16>*
  %13392 = load <16 x i16>, <16 x i16>* %13391, align 2, !tbaa !396
  %13393 = add <16 x i16> %13371, %13366
  %13394 = add <16 x i16> %13393, %13377
  %13395 = add <16 x i16> %13394, %13383
  %13396 = add <16 x i16> %13395, %13389
  %13397 = add <16 x i16> %13374, %13369
  %13398 = add <16 x i16> %13397, %13380
  %13399 = add <16 x i16> %13398, %13386
  %13400 = add <16 x i16> %13399, %13392
  %13401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13396, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13402 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13400, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13403 = shufflevector <16 x i16> %13401, <16 x i16> %13402, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13404 = lshr <32 x i16> %13403, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13405 = shufflevector <32 x i16> %13404, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13406 = sext i32 %blur_x.s0.x.v1.base.s727 to i64
  %13407 = add nsw i64 %13406, %13231
  %13408 = getelementptr inbounds i16, i16* %blur_x, i64 %13407
  %13409 = bitcast i16* %13408 to <16 x i16>*
  store <16 x i16> %13405, <16 x i16>* %13409, align 2, !tbaa !399
  %13410 = shufflevector <32 x i16> %13404, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13411 = getelementptr inbounds i16, i16* %13408, i64 16
  %13412 = bitcast i16* %13411 to <16 x i16>*
  store <16 x i16> %13410, <16 x i16>* %13412, align 2, !tbaa !399
  br label %"consume blur_x728"

"consume blur_x728":                              ; preds = %"for blur_y.s0.x.x.rebased720", %"produce blur_x726"
  %13413 = sext i32 %b307 to i64
  %13414 = add nsw i64 %13234, %13413
  %13415 = getelementptr inbounds i16, i16* %blur_x, i64 %13414
  %13416 = bitcast i16* %13415 to <16 x i16>*
  %13417 = load <16 x i16>, <16 x i16>* %13416, align 2, !tbaa !399
  %13418 = getelementptr inbounds i16, i16* %13415, i64 16
  %13419 = bitcast i16* %13418 to <16 x i16>*
  %13420 = load <16 x i16>, <16 x i16>* %13419, align 2, !tbaa !399
  %13421 = add nsw i64 %13237, %13413
  %13422 = getelementptr inbounds i16, i16* %blur_x, i64 %13421
  %13423 = bitcast i16* %13422 to <16 x i16>*
  %13424 = load <16 x i16>, <16 x i16>* %13423, align 2, !tbaa !399
  %13425 = getelementptr inbounds i16, i16* %13422, i64 16
  %13426 = bitcast i16* %13425 to <16 x i16>*
  %13427 = load <16 x i16>, <16 x i16>* %13426, align 2, !tbaa !399
  %13428 = add nsw i64 %13240, %13413
  %13429 = getelementptr inbounds i16, i16* %blur_x, i64 %13428
  %13430 = bitcast i16* %13429 to <16 x i16>*
  %13431 = load <16 x i16>, <16 x i16>* %13430, align 2, !tbaa !399
  %13432 = getelementptr inbounds i16, i16* %13429, i64 16
  %13433 = bitcast i16* %13432 to <16 x i16>*
  %13434 = load <16 x i16>, <16 x i16>* %13433, align 2, !tbaa !399
  %13435 = add nsw i64 %13243, %13413
  %13436 = getelementptr inbounds i16, i16* %blur_x, i64 %13435
  %13437 = bitcast i16* %13436 to <16 x i16>*
  %13438 = load <16 x i16>, <16 x i16>* %13437, align 2, !tbaa !399
  %13439 = getelementptr inbounds i16, i16* %13436, i64 16
  %13440 = bitcast i16* %13439 to <16 x i16>*
  %13441 = load <16 x i16>, <16 x i16>* %13440, align 2, !tbaa !399
  %13442 = add nsw i64 %13246, %13413
  %13443 = getelementptr inbounds i16, i16* %blur_x, i64 %13442
  %13444 = bitcast i16* %13443 to <16 x i16>*
  %13445 = load <16 x i16>, <16 x i16>* %13444, align 2, !tbaa !399
  %13446 = getelementptr inbounds i16, i16* %13443, i64 16
  %13447 = bitcast i16* %13446 to <16 x i16>*
  %13448 = load <16 x i16>, <16 x i16>* %13447, align 2, !tbaa !399
  %13449 = add <16 x i16> %13424, %13417
  %13450 = add <16 x i16> %13449, %13431
  %13451 = add <16 x i16> %13450, %13438
  %13452 = add <16 x i16> %13451, %13445
  %13453 = add <16 x i16> %13427, %13420
  %13454 = add <16 x i16> %13453, %13434
  %13455 = add <16 x i16> %13454, %13441
  %13456 = add <16 x i16> %13455, %13448
  %13457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13452, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13458 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13456, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13459 = shufflevector <16 x i16> %13457, <16 x i16> %13458, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13460 = lshr <32 x i16> %13459, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13461 = shufflevector <32 x i16> %13460, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13462 = add nsw i64 %13250, %13413
  %13463 = getelementptr inbounds i16, i16* %66, i64 %13462
  %13464 = bitcast i16* %13463 to <16 x i16>*
  store <16 x i16> %13461, <16 x i16>* %13464, align 2, !tbaa !401
  %13465 = shufflevector <32 x i16> %13460, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13466 = getelementptr inbounds i16, i16* %13463, i64 16
  %13467 = bitcast i16* %13466 to <16 x i16>*
  store <16 x i16> %13465, <16 x i16>* %13467, align 2, !tbaa !401
  %13468 = add nuw nsw i32 %blur_y.s0.x.x.rebased722, 1
  %.not2700 = icmp eq i32 %13468, %t1683
  br i1 %.not2700, label %"end for blur_y.s0.x.x.rebased721", label %"for blur_y.s0.x.x.rebased720"

after_bb729:                                      ; preds = %"end for blur_y.s0.x.x.rebased721", %"produce blur_x732"
  br i1 %100, label %"for blur_y.s0.x.x.rebased734.preheader", label %"end for blur_y.s0.x.x.rebased735", !prof !386

"for blur_y.s0.x.x.rebased734.preheader":         ; preds = %after_bb729
  %13469 = sext i32 %t1688 to i64
  %13470 = zext i32 %.pre-phi3469 to i64
  %13471 = mul nsw i64 %13470, %112
  %13472 = sub nsw i64 %13471, %96
  %13473 = zext i32 %.pre-phi3463 to i64
  %13474 = mul nsw i64 %13473, %112
  %13475 = sub nsw i64 %13474, %96
  %13476 = zext i32 %.pre-phi3475 to i64
  %13477 = mul nsw i64 %13476, %112
  %13478 = sub nsw i64 %13477, %96
  %13479 = zext i32 %.pre-phi3445 to i64
  %13480 = mul nsw i64 %13479, %112
  %13481 = sub nsw i64 %13480, %96
  %13482 = zext i32 %.pre-phi to i64
  %13483 = mul nsw i64 %13482, %112
  %13484 = sub nsw i64 %13483, %96
  %13485 = sext i32 %a26 to i64
  %13486 = add nsw i64 %13485, 29
  %13487 = mul nsw i64 %13486, %113
  %13488 = add nsw i64 %13487, %116
  br label %"for blur_y.s0.x.x.rebased734"

"produce blur_x732":                              ; preds = %"end for blur_y.s0.x.x.rebased721"
  %13489 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %13490 = getelementptr inbounds i16, i16* %13489, i64 -31
  %13491 = bitcast i16* %13490 to <16 x i16>*
  %13492 = load <16 x i16>, <16 x i16>* %13491, align 2, !tbaa !396
  %13493 = getelementptr inbounds i16, i16* %13489, i64 -15
  %13494 = bitcast i16* %13493 to <16 x i16>*
  %13495 = load <16 x i16>, <16 x i16>* %13494, align 2, !tbaa !396
  %13496 = getelementptr inbounds i16, i16* %13489, i64 -32
  %13497 = bitcast i16* %13496 to <16 x i16>*
  %13498 = load <16 x i16>, <16 x i16>* %13497, align 2, !tbaa !396
  %13499 = getelementptr inbounds i16, i16* %13489, i64 -16
  %13500 = bitcast i16* %13499 to <16 x i16>*
  %13501 = load <16 x i16>, <16 x i16>* %13500, align 2, !tbaa !396
  %13502 = getelementptr inbounds i16, i16* %13489, i64 -30
  %13503 = bitcast i16* %13502 to <16 x i16>*
  %13504 = load <16 x i16>, <16 x i16>* %13503, align 2, !tbaa !396
  %13505 = getelementptr inbounds i16, i16* %13489, i64 -14
  %13506 = bitcast i16* %13505 to <16 x i16>*
  %13507 = load <16 x i16>, <16 x i16>* %13506, align 2, !tbaa !396
  %13508 = getelementptr inbounds i16, i16* %13489, i64 -28
  %13509 = bitcast i16* %13508 to <16 x i16>*
  %13510 = load <16 x i16>, <16 x i16>* %13509, align 2, !tbaa !396
  %13511 = getelementptr inbounds i16, i16* %13489, i64 -12
  %13512 = bitcast i16* %13511 to <16 x i16>*
  %13513 = load <16 x i16>, <16 x i16>* %13512, align 2, !tbaa !396
  %13514 = getelementptr inbounds i16, i16* %13489, i64 -29
  %13515 = bitcast i16* %13514 to <16 x i16>*
  %13516 = load <16 x i16>, <16 x i16>* %13515, align 2, !tbaa !396
  %13517 = getelementptr inbounds i16, i16* %13489, i64 -13
  %13518 = bitcast i16* %13517 to <16 x i16>*
  %13519 = load <16 x i16>, <16 x i16>* %13518, align 2, !tbaa !396
  %13520 = add <16 x i16> %13498, %13492
  %13521 = add <16 x i16> %13520, %13504
  %13522 = add <16 x i16> %13521, %13510
  %13523 = add <16 x i16> %13522, %13516
  %13524 = add <16 x i16> %13501, %13495
  %13525 = add <16 x i16> %13524, %13507
  %13526 = add <16 x i16> %13525, %13513
  %13527 = add <16 x i16> %13526, %13519
  %13528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13523, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13529 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13527, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13530 = shufflevector <16 x i16> %13528, <16 x i16> %13529, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13531 = lshr <32 x i16> %13530, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13532 = shufflevector <32 x i16> %13531, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13533 = zext i32 %.pre-phi3445 to i64
  %13534 = mul nsw i64 %97, %13533
  %13535 = add nsw i64 %99, %13534
  %13536 = getelementptr inbounds i16, i16* %blur_x, i64 %13535
  %13537 = getelementptr inbounds i16, i16* %13536, i64 -32
  %13538 = bitcast i16* %13537 to <16 x i16>*
  store <16 x i16> %13532, <16 x i16>* %13538, align 2, !tbaa !399
  %13539 = shufflevector <32 x i16> %13531, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13540 = getelementptr inbounds i16, i16* %13536, i64 -16
  %13541 = bitcast i16* %13540 to <16 x i16>*
  store <16 x i16> %13539, <16 x i16>* %13541, align 2, !tbaa !399
  %13542 = zext i32 %.pre-phi3469 to i64
  %13543 = mul nsw i64 %13542, %112
  %13544 = add nsw i64 %13543, %94
  %13545 = getelementptr inbounds i16, i16* %blur_x, i64 %13544
  %13546 = getelementptr inbounds i16, i16* %13545, i64 -32
  %13547 = bitcast i16* %13546 to <16 x i16>*
  %13548 = load <16 x i16>, <16 x i16>* %13547, align 2, !tbaa !399
  %13549 = getelementptr inbounds i16, i16* %13545, i64 -16
  %13550 = bitcast i16* %13549 to <16 x i16>*
  %13551 = load <16 x i16>, <16 x i16>* %13550, align 2, !tbaa !399
  %13552 = zext i32 %.pre-phi3463 to i64
  %13553 = mul nsw i64 %13552, %112
  %13554 = add nsw i64 %13553, %94
  %13555 = getelementptr inbounds i16, i16* %blur_x, i64 %13554
  %13556 = getelementptr inbounds i16, i16* %13555, i64 -32
  %13557 = bitcast i16* %13556 to <16 x i16>*
  %13558 = load <16 x i16>, <16 x i16>* %13557, align 2, !tbaa !399
  %13559 = getelementptr inbounds i16, i16* %13555, i64 -16
  %13560 = bitcast i16* %13559 to <16 x i16>*
  %13561 = load <16 x i16>, <16 x i16>* %13560, align 2, !tbaa !399
  %13562 = zext i32 %.pre-phi3475 to i64
  %13563 = mul nsw i64 %13562, %112
  %13564 = add nsw i64 %13563, %94
  %13565 = getelementptr inbounds i16, i16* %blur_x, i64 %13564
  %13566 = getelementptr inbounds i16, i16* %13565, i64 -32
  %13567 = bitcast i16* %13566 to <16 x i16>*
  %13568 = load <16 x i16>, <16 x i16>* %13567, align 2, !tbaa !399
  %13569 = getelementptr inbounds i16, i16* %13565, i64 -16
  %13570 = bitcast i16* %13569 to <16 x i16>*
  %13571 = load <16 x i16>, <16 x i16>* %13570, align 2, !tbaa !399
  %13572 = mul nsw i64 %13533, %112
  %13573 = add nsw i64 %13572, %94
  %13574 = getelementptr inbounds i16, i16* %blur_x, i64 %13573
  %13575 = getelementptr inbounds i16, i16* %13574, i64 -32
  %13576 = bitcast i16* %13575 to <16 x i16>*
  %13577 = load <16 x i16>, <16 x i16>* %13576, align 2, !tbaa !399
  %13578 = getelementptr inbounds i16, i16* %13574, i64 -16
  %13579 = bitcast i16* %13578 to <16 x i16>*
  %13580 = load <16 x i16>, <16 x i16>* %13579, align 2, !tbaa !399
  %13581 = zext i32 %.pre-phi to i64
  %13582 = mul nsw i64 %13581, %112
  %13583 = add nsw i64 %13582, %94
  %13584 = getelementptr inbounds i16, i16* %blur_x, i64 %13583
  %13585 = getelementptr inbounds i16, i16* %13584, i64 -32
  %13586 = bitcast i16* %13585 to <16 x i16>*
  %13587 = load <16 x i16>, <16 x i16>* %13586, align 2, !tbaa !399
  %13588 = getelementptr inbounds i16, i16* %13584, i64 -16
  %13589 = bitcast i16* %13588 to <16 x i16>*
  %13590 = load <16 x i16>, <16 x i16>* %13589, align 2, !tbaa !399
  %13591 = add <16 x i16> %13558, %13548
  %13592 = add <16 x i16> %13591, %13568
  %13593 = add <16 x i16> %13592, %13577
  %13594 = add <16 x i16> %13593, %13587
  %13595 = add <16 x i16> %13561, %13551
  %13596 = add <16 x i16> %13595, %13571
  %13597 = add <16 x i16> %13596, %13580
  %13598 = add <16 x i16> %13597, %13590
  %13599 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13594, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13600 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13598, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13601 = shufflevector <16 x i16> %13599, <16 x i16> %13600, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13602 = lshr <32 x i16> %13601, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13603 = shufflevector <32 x i16> %13602, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13604 = sext i32 %a26 to i64
  %13605 = add nsw i64 %13604, 29
  %13606 = mul nsw i64 %13605, %113
  %13607 = add nsw i64 %115, %13606
  %13608 = getelementptr inbounds i16, i16* %66, i64 %13607
  %13609 = getelementptr inbounds i16, i16* %13608, i64 -32
  %13610 = bitcast i16* %13609 to <16 x i16>*
  store <16 x i16> %13603, <16 x i16>* %13610, align 2, !tbaa !401
  %13611 = shufflevector <32 x i16> %13602, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13612 = getelementptr inbounds i16, i16* %13608, i64 -16
  %13613 = bitcast i16* %13612 to <16 x i16>*
  store <16 x i16> %13611, <16 x i16>* %13613, align 2, !tbaa !401
  br label %after_bb729

"for blur_y.s0.x.x.rebased734":                   ; preds = %"for blur_y.s0.x.x.rebased734.preheader", %"consume blur_x741"
  %indvars.iv3346 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased734.preheader" ], [ %indvars.iv.next3347, %"consume blur_x741" ]
  %13614 = add nsw i64 %indvars.iv3346, %101
  %13615 = icmp slt i64 %13614, 1
  %13616 = trunc i64 %13614 to i32
  %13617 = shl nsw i32 %13616, 5
  %13618 = icmp sgt i32 %4, %13617
  %13619 = or i1 %13615, %13618
  br i1 %13619, label %"produce blur_x740", label %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge"

"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased734"
  %.pre3528 = shl nsw i64 %13614, 5
  br label %"consume blur_x741"

"end for blur_y.s0.x.x.rebased735":               ; preds = %"consume blur_x741", %after_bb729
  br i1 %102, label %"for blur_y.s0.x.x.rebased742.preheader", label %"end for blur_y.s0.x.x.rebased743", !prof !386

"for blur_y.s0.x.x.rebased742.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased735"
  %13620 = sext i32 %t1688 to i64
  %13621 = zext i32 %.pre-phi3469 to i64
  %13622 = mul nsw i64 %13621, %112
  %13623 = sub nsw i64 %13622, %96
  %13624 = zext i32 %.pre-phi3463 to i64
  %13625 = mul nsw i64 %13624, %112
  %13626 = sub nsw i64 %13625, %96
  %13627 = zext i32 %.pre-phi3475 to i64
  %13628 = mul nsw i64 %13627, %112
  %13629 = sub nsw i64 %13628, %96
  %13630 = zext i32 %.pre-phi3445 to i64
  %13631 = mul nsw i64 %13630, %112
  %13632 = sub nsw i64 %13631, %96
  %13633 = zext i32 %.pre-phi to i64
  %13634 = mul nsw i64 %13633, %112
  %13635 = sub nsw i64 %13634, %96
  %13636 = sext i32 %a26 to i64
  %13637 = add nsw i64 %13636, 29
  %13638 = mul nsw i64 %13637, %113
  %13639 = add nsw i64 %13638, %116
  br label %"for blur_y.s0.x.x.rebased742"

"produce blur_x740":                              ; preds = %"for blur_y.s0.x.x.rebased734"
  %t1176 = add nsw i32 %13617, %t2169
  %13640 = sext i32 %t1176 to i64
  %13641 = getelementptr inbounds i16, i16* %read_input, i64 %13640
  %13642 = getelementptr inbounds i16, i16* %13641, i64 1
  %13643 = bitcast i16* %13642 to <16 x i16>*
  %13644 = load <16 x i16>, <16 x i16>* %13643, align 2, !tbaa !396
  %13645 = getelementptr inbounds i16, i16* %13641, i64 17
  %13646 = bitcast i16* %13645 to <16 x i16>*
  %13647 = load <16 x i16>, <16 x i16>* %13646, align 2, !tbaa !396
  %13648 = bitcast i16* %13641 to <16 x i16>*
  %13649 = load <16 x i16>, <16 x i16>* %13648, align 2, !tbaa !396
  %13650 = getelementptr inbounds i16, i16* %13641, i64 16
  %13651 = bitcast i16* %13650 to <16 x i16>*
  %13652 = load <16 x i16>, <16 x i16>* %13651, align 2, !tbaa !396
  %13653 = getelementptr inbounds i16, i16* %13641, i64 2
  %13654 = bitcast i16* %13653 to <16 x i16>*
  %13655 = load <16 x i16>, <16 x i16>* %13654, align 2, !tbaa !396
  %13656 = getelementptr inbounds i16, i16* %13641, i64 18
  %13657 = bitcast i16* %13656 to <16 x i16>*
  %13658 = load <16 x i16>, <16 x i16>* %13657, align 2, !tbaa !396
  %13659 = getelementptr inbounds i16, i16* %13641, i64 4
  %13660 = bitcast i16* %13659 to <16 x i16>*
  %13661 = load <16 x i16>, <16 x i16>* %13660, align 2, !tbaa !396
  %13662 = getelementptr inbounds i16, i16* %13641, i64 20
  %13663 = bitcast i16* %13662 to <16 x i16>*
  %13664 = load <16 x i16>, <16 x i16>* %13663, align 2, !tbaa !396
  %13665 = getelementptr inbounds i16, i16* %13641, i64 3
  %13666 = bitcast i16* %13665 to <16 x i16>*
  %13667 = load <16 x i16>, <16 x i16>* %13666, align 2, !tbaa !396
  %13668 = getelementptr inbounds i16, i16* %13641, i64 19
  %13669 = bitcast i16* %13668 to <16 x i16>*
  %13670 = load <16 x i16>, <16 x i16>* %13669, align 2, !tbaa !396
  %13671 = add <16 x i16> %13649, %13644
  %13672 = add <16 x i16> %13671, %13655
  %13673 = add <16 x i16> %13672, %13661
  %13674 = add <16 x i16> %13673, %13667
  %13675 = add <16 x i16> %13652, %13647
  %13676 = add <16 x i16> %13675, %13658
  %13677 = add <16 x i16> %13676, %13664
  %13678 = add <16 x i16> %13677, %13670
  %13679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13674, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13678, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13681 = shufflevector <16 x i16> %13679, <16 x i16> %13680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13682 = lshr <32 x i16> %13681, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13683 = shufflevector <32 x i16> %13682, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13684 = shl nsw i64 %13614, 5
  %13685 = add nsw i64 %13684, %13469
  %13686 = getelementptr inbounds i16, i16* %blur_x, i64 %13685
  %13687 = bitcast i16* %13686 to <16 x i16>*
  store <16 x i16> %13683, <16 x i16>* %13687, align 2, !tbaa !399
  %13688 = shufflevector <32 x i16> %13682, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13689 = getelementptr inbounds i16, i16* %13686, i64 16
  %13690 = bitcast i16* %13689 to <16 x i16>*
  store <16 x i16> %13688, <16 x i16>* %13690, align 2, !tbaa !399
  br label %"consume blur_x741"

"consume blur_x741":                              ; preds = %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge", %"produce blur_x740"
  %.pre-phi3529 = phi i64 [ %.pre3528, %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge" ], [ %13684, %"produce blur_x740" ]
  %13691 = add nsw i64 %13472, %.pre-phi3529
  %13692 = getelementptr inbounds i16, i16* %blur_x, i64 %13691
  %13693 = bitcast i16* %13692 to <16 x i16>*
  %13694 = load <16 x i16>, <16 x i16>* %13693, align 2, !tbaa !399
  %13695 = getelementptr inbounds i16, i16* %13692, i64 16
  %13696 = bitcast i16* %13695 to <16 x i16>*
  %13697 = load <16 x i16>, <16 x i16>* %13696, align 2, !tbaa !399
  %13698 = add nsw i64 %13475, %.pre-phi3529
  %13699 = getelementptr inbounds i16, i16* %blur_x, i64 %13698
  %13700 = bitcast i16* %13699 to <16 x i16>*
  %13701 = load <16 x i16>, <16 x i16>* %13700, align 2, !tbaa !399
  %13702 = getelementptr inbounds i16, i16* %13699, i64 16
  %13703 = bitcast i16* %13702 to <16 x i16>*
  %13704 = load <16 x i16>, <16 x i16>* %13703, align 2, !tbaa !399
  %13705 = add nsw i64 %13478, %.pre-phi3529
  %13706 = getelementptr inbounds i16, i16* %blur_x, i64 %13705
  %13707 = bitcast i16* %13706 to <16 x i16>*
  %13708 = load <16 x i16>, <16 x i16>* %13707, align 2, !tbaa !399
  %13709 = getelementptr inbounds i16, i16* %13706, i64 16
  %13710 = bitcast i16* %13709 to <16 x i16>*
  %13711 = load <16 x i16>, <16 x i16>* %13710, align 2, !tbaa !399
  %13712 = add nsw i64 %13481, %.pre-phi3529
  %13713 = getelementptr inbounds i16, i16* %blur_x, i64 %13712
  %13714 = bitcast i16* %13713 to <16 x i16>*
  %13715 = load <16 x i16>, <16 x i16>* %13714, align 2, !tbaa !399
  %13716 = getelementptr inbounds i16, i16* %13713, i64 16
  %13717 = bitcast i16* %13716 to <16 x i16>*
  %13718 = load <16 x i16>, <16 x i16>* %13717, align 2, !tbaa !399
  %13719 = add nsw i64 %13484, %.pre-phi3529
  %13720 = getelementptr inbounds i16, i16* %blur_x, i64 %13719
  %13721 = bitcast i16* %13720 to <16 x i16>*
  %13722 = load <16 x i16>, <16 x i16>* %13721, align 2, !tbaa !399
  %13723 = getelementptr inbounds i16, i16* %13720, i64 16
  %13724 = bitcast i16* %13723 to <16 x i16>*
  %13725 = load <16 x i16>, <16 x i16>* %13724, align 2, !tbaa !399
  %13726 = add <16 x i16> %13701, %13694
  %13727 = add <16 x i16> %13726, %13708
  %13728 = add <16 x i16> %13727, %13715
  %13729 = add <16 x i16> %13728, %13722
  %13730 = add <16 x i16> %13704, %13697
  %13731 = add <16 x i16> %13730, %13711
  %13732 = add <16 x i16> %13731, %13718
  %13733 = add <16 x i16> %13732, %13725
  %13734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13729, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13735 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13733, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13736 = shufflevector <16 x i16> %13734, <16 x i16> %13735, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13737 = lshr <32 x i16> %13736, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13738 = shufflevector <32 x i16> %13737, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13739 = add nsw i64 %13488, %.pre-phi3529
  %13740 = getelementptr inbounds i16, i16* %66, i64 %13739
  %13741 = bitcast i16* %13740 to <16 x i16>*
  store <16 x i16> %13738, <16 x i16>* %13741, align 2, !tbaa !401
  %13742 = shufflevector <32 x i16> %13737, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13743 = getelementptr inbounds i16, i16* %13740, i64 16
  %13744 = bitcast i16* %13743 to <16 x i16>*
  store <16 x i16> %13742, <16 x i16>* %13744, align 2, !tbaa !401
  %indvars.iv.next3347 = add nuw nsw i64 %indvars.iv3346, 1
  %.not2699 = icmp eq i64 %indvars.iv.next3347, %184
  br i1 %.not2699, label %"end for blur_y.s0.x.x.rebased735", label %"for blur_y.s0.x.x.rebased734"

"for blur_y.s0.x.x.rebased742":                   ; preds = %"for blur_y.s0.x.x.rebased742.preheader", %"consume blur_x750"
  %blur_y.s0.x.x.rebased744 = phi i32 [ %13857, %"consume blur_x750" ], [ 0, %"for blur_y.s0.x.x.rebased742.preheader" ]
  %13745 = add nsw i32 %blur_y.s0.x.x.rebased744, %t1626
  %a308 = shl nsw i32 %13745, 5
  %13746 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %13746, i32 %a308, i32 %a14
  %13747 = icmp slt i32 %13745, 1
  %13748 = icmp sgt i32 %4, %a308
  %13749 = or i1 %13747, %13748
  br i1 %13749, label %"produce blur_x748", label %"consume blur_x750"

"end for blur_y.s0.x.x.rebased743":               ; preds = %"consume blur_x750", %"end for blur_y.s0.x.x.rebased735"
  br i1 %34, label %"produce blur_x754", label %after_bb751

"produce blur_x748":                              ; preds = %"for blur_y.s0.x.x.rebased742"
  %13750 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s749 = select i1 %13750, i32 %b314, i32 %4
  %t1181 = add nsw i32 %blur_x.s0.x.v1.base.s749, %t2169
  %13751 = sext i32 %t1181 to i64
  %13752 = getelementptr inbounds i16, i16* %read_input, i64 %13751
  %13753 = getelementptr inbounds i16, i16* %13752, i64 1
  %13754 = bitcast i16* %13753 to <16 x i16>*
  %13755 = load <16 x i16>, <16 x i16>* %13754, align 2, !tbaa !396
  %13756 = getelementptr inbounds i16, i16* %13752, i64 17
  %13757 = bitcast i16* %13756 to <16 x i16>*
  %13758 = load <16 x i16>, <16 x i16>* %13757, align 2, !tbaa !396
  %13759 = bitcast i16* %13752 to <16 x i16>*
  %13760 = load <16 x i16>, <16 x i16>* %13759, align 2, !tbaa !396
  %13761 = getelementptr inbounds i16, i16* %13752, i64 16
  %13762 = bitcast i16* %13761 to <16 x i16>*
  %13763 = load <16 x i16>, <16 x i16>* %13762, align 2, !tbaa !396
  %13764 = getelementptr inbounds i16, i16* %13752, i64 2
  %13765 = bitcast i16* %13764 to <16 x i16>*
  %13766 = load <16 x i16>, <16 x i16>* %13765, align 2, !tbaa !396
  %13767 = getelementptr inbounds i16, i16* %13752, i64 18
  %13768 = bitcast i16* %13767 to <16 x i16>*
  %13769 = load <16 x i16>, <16 x i16>* %13768, align 2, !tbaa !396
  %13770 = getelementptr inbounds i16, i16* %13752, i64 4
  %13771 = bitcast i16* %13770 to <16 x i16>*
  %13772 = load <16 x i16>, <16 x i16>* %13771, align 2, !tbaa !396
  %13773 = getelementptr inbounds i16, i16* %13752, i64 20
  %13774 = bitcast i16* %13773 to <16 x i16>*
  %13775 = load <16 x i16>, <16 x i16>* %13774, align 2, !tbaa !396
  %13776 = getelementptr inbounds i16, i16* %13752, i64 3
  %13777 = bitcast i16* %13776 to <16 x i16>*
  %13778 = load <16 x i16>, <16 x i16>* %13777, align 2, !tbaa !396
  %13779 = getelementptr inbounds i16, i16* %13752, i64 19
  %13780 = bitcast i16* %13779 to <16 x i16>*
  %13781 = load <16 x i16>, <16 x i16>* %13780, align 2, !tbaa !396
  %13782 = add <16 x i16> %13760, %13755
  %13783 = add <16 x i16> %13782, %13766
  %13784 = add <16 x i16> %13783, %13772
  %13785 = add <16 x i16> %13784, %13778
  %13786 = add <16 x i16> %13763, %13758
  %13787 = add <16 x i16> %13786, %13769
  %13788 = add <16 x i16> %13787, %13775
  %13789 = add <16 x i16> %13788, %13781
  %13790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13785, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13791 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13789, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13792 = shufflevector <16 x i16> %13790, <16 x i16> %13791, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13793 = lshr <32 x i16> %13792, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13794 = shufflevector <32 x i16> %13793, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13795 = sext i32 %blur_x.s0.x.v1.base.s749 to i64
  %13796 = add nsw i64 %13795, %13620
  %13797 = getelementptr inbounds i16, i16* %blur_x, i64 %13796
  %13798 = bitcast i16* %13797 to <16 x i16>*
  store <16 x i16> %13794, <16 x i16>* %13798, align 2, !tbaa !399
  %13799 = shufflevector <32 x i16> %13793, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13800 = getelementptr inbounds i16, i16* %13797, i64 16
  %13801 = bitcast i16* %13800 to <16 x i16>*
  store <16 x i16> %13799, <16 x i16>* %13801, align 2, !tbaa !399
  br label %"consume blur_x750"

"consume blur_x750":                              ; preds = %"for blur_y.s0.x.x.rebased742", %"produce blur_x748"
  %13802 = sext i32 %b314 to i64
  %13803 = add nsw i64 %13623, %13802
  %13804 = getelementptr inbounds i16, i16* %blur_x, i64 %13803
  %13805 = bitcast i16* %13804 to <16 x i16>*
  %13806 = load <16 x i16>, <16 x i16>* %13805, align 2, !tbaa !399
  %13807 = getelementptr inbounds i16, i16* %13804, i64 16
  %13808 = bitcast i16* %13807 to <16 x i16>*
  %13809 = load <16 x i16>, <16 x i16>* %13808, align 2, !tbaa !399
  %13810 = add nsw i64 %13626, %13802
  %13811 = getelementptr inbounds i16, i16* %blur_x, i64 %13810
  %13812 = bitcast i16* %13811 to <16 x i16>*
  %13813 = load <16 x i16>, <16 x i16>* %13812, align 2, !tbaa !399
  %13814 = getelementptr inbounds i16, i16* %13811, i64 16
  %13815 = bitcast i16* %13814 to <16 x i16>*
  %13816 = load <16 x i16>, <16 x i16>* %13815, align 2, !tbaa !399
  %13817 = add nsw i64 %13629, %13802
  %13818 = getelementptr inbounds i16, i16* %blur_x, i64 %13817
  %13819 = bitcast i16* %13818 to <16 x i16>*
  %13820 = load <16 x i16>, <16 x i16>* %13819, align 2, !tbaa !399
  %13821 = getelementptr inbounds i16, i16* %13818, i64 16
  %13822 = bitcast i16* %13821 to <16 x i16>*
  %13823 = load <16 x i16>, <16 x i16>* %13822, align 2, !tbaa !399
  %13824 = add nsw i64 %13632, %13802
  %13825 = getelementptr inbounds i16, i16* %blur_x, i64 %13824
  %13826 = bitcast i16* %13825 to <16 x i16>*
  %13827 = load <16 x i16>, <16 x i16>* %13826, align 2, !tbaa !399
  %13828 = getelementptr inbounds i16, i16* %13825, i64 16
  %13829 = bitcast i16* %13828 to <16 x i16>*
  %13830 = load <16 x i16>, <16 x i16>* %13829, align 2, !tbaa !399
  %13831 = add nsw i64 %13635, %13802
  %13832 = getelementptr inbounds i16, i16* %blur_x, i64 %13831
  %13833 = bitcast i16* %13832 to <16 x i16>*
  %13834 = load <16 x i16>, <16 x i16>* %13833, align 2, !tbaa !399
  %13835 = getelementptr inbounds i16, i16* %13832, i64 16
  %13836 = bitcast i16* %13835 to <16 x i16>*
  %13837 = load <16 x i16>, <16 x i16>* %13836, align 2, !tbaa !399
  %13838 = add <16 x i16> %13813, %13806
  %13839 = add <16 x i16> %13838, %13820
  %13840 = add <16 x i16> %13839, %13827
  %13841 = add <16 x i16> %13840, %13834
  %13842 = add <16 x i16> %13816, %13809
  %13843 = add <16 x i16> %13842, %13823
  %13844 = add <16 x i16> %13843, %13830
  %13845 = add <16 x i16> %13844, %13837
  %13846 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13841, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13847 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13845, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13848 = shufflevector <16 x i16> %13846, <16 x i16> %13847, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13849 = lshr <32 x i16> %13848, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13850 = shufflevector <32 x i16> %13849, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13851 = add nsw i64 %13639, %13802
  %13852 = getelementptr inbounds i16, i16* %66, i64 %13851
  %13853 = bitcast i16* %13852 to <16 x i16>*
  store <16 x i16> %13850, <16 x i16>* %13853, align 2, !tbaa !401
  %13854 = shufflevector <32 x i16> %13849, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13855 = getelementptr inbounds i16, i16* %13852, i64 16
  %13856 = bitcast i16* %13855 to <16 x i16>*
  store <16 x i16> %13854, <16 x i16>* %13856, align 2, !tbaa !401
  %13857 = add nuw nsw i32 %blur_y.s0.x.x.rebased744, 1
  %.not2698 = icmp eq i32 %13857, %t1683
  br i1 %.not2698, label %"end for blur_y.s0.x.x.rebased743", label %"for blur_y.s0.x.x.rebased742"

after_bb751:                                      ; preds = %"end for blur_y.s0.x.x.rebased743", %"produce blur_x754"
  br i1 %100, label %"for blur_y.s0.x.x.rebased756.preheader", label %"end for blur_y.s0.x.x.rebased757", !prof !386

"for blur_y.s0.x.x.rebased756.preheader":         ; preds = %after_bb751
  %13858 = sext i32 %t1694 to i64
  %13859 = zext i32 %.pre-phi3475 to i64
  %13860 = mul nsw i64 %13859, %112
  %13861 = sub nsw i64 %13860, %96
  %13862 = zext i32 %.pre-phi3469 to i64
  %13863 = mul nsw i64 %13862, %112
  %13864 = sub nsw i64 %13863, %96
  %13865 = zext i32 %.pre-phi to i64
  %13866 = mul nsw i64 %13865, %112
  %13867 = sub nsw i64 %13866, %96
  %13868 = zext i32 %.pre-phi3449 to i64
  %13869 = mul nsw i64 %13868, %112
  %13870 = sub nsw i64 %13869, %96
  %13871 = zext i32 %.pre-phi3445 to i64
  %13872 = mul nsw i64 %13871, %112
  %13873 = sub nsw i64 %13872, %96
  %13874 = sext i32 %a26 to i64
  %13875 = add nsw i64 %13874, 30
  %13876 = mul nsw i64 %13875, %113
  %13877 = add nsw i64 %13876, %116
  br label %"for blur_y.s0.x.x.rebased756"

"produce blur_x754":                              ; preds = %"end for blur_y.s0.x.x.rebased743"
  %13878 = getelementptr inbounds i16, i16* %read_input, i64 %175
  %13879 = getelementptr inbounds i16, i16* %13878, i64 -31
  %13880 = bitcast i16* %13879 to <16 x i16>*
  %13881 = load <16 x i16>, <16 x i16>* %13880, align 2, !tbaa !396
  %13882 = getelementptr inbounds i16, i16* %13878, i64 -15
  %13883 = bitcast i16* %13882 to <16 x i16>*
  %13884 = load <16 x i16>, <16 x i16>* %13883, align 2, !tbaa !396
  %13885 = getelementptr inbounds i16, i16* %13878, i64 -32
  %13886 = bitcast i16* %13885 to <16 x i16>*
  %13887 = load <16 x i16>, <16 x i16>* %13886, align 2, !tbaa !396
  %13888 = getelementptr inbounds i16, i16* %13878, i64 -16
  %13889 = bitcast i16* %13888 to <16 x i16>*
  %13890 = load <16 x i16>, <16 x i16>* %13889, align 2, !tbaa !396
  %13891 = getelementptr inbounds i16, i16* %13878, i64 -30
  %13892 = bitcast i16* %13891 to <16 x i16>*
  %13893 = load <16 x i16>, <16 x i16>* %13892, align 2, !tbaa !396
  %13894 = getelementptr inbounds i16, i16* %13878, i64 -14
  %13895 = bitcast i16* %13894 to <16 x i16>*
  %13896 = load <16 x i16>, <16 x i16>* %13895, align 2, !tbaa !396
  %13897 = getelementptr inbounds i16, i16* %13878, i64 -28
  %13898 = bitcast i16* %13897 to <16 x i16>*
  %13899 = load <16 x i16>, <16 x i16>* %13898, align 2, !tbaa !396
  %13900 = getelementptr inbounds i16, i16* %13878, i64 -12
  %13901 = bitcast i16* %13900 to <16 x i16>*
  %13902 = load <16 x i16>, <16 x i16>* %13901, align 2, !tbaa !396
  %13903 = getelementptr inbounds i16, i16* %13878, i64 -29
  %13904 = bitcast i16* %13903 to <16 x i16>*
  %13905 = load <16 x i16>, <16 x i16>* %13904, align 2, !tbaa !396
  %13906 = getelementptr inbounds i16, i16* %13878, i64 -13
  %13907 = bitcast i16* %13906 to <16 x i16>*
  %13908 = load <16 x i16>, <16 x i16>* %13907, align 2, !tbaa !396
  %13909 = add <16 x i16> %13887, %13881
  %13910 = add <16 x i16> %13909, %13893
  %13911 = add <16 x i16> %13910, %13899
  %13912 = add <16 x i16> %13911, %13905
  %13913 = add <16 x i16> %13890, %13884
  %13914 = add <16 x i16> %13913, %13896
  %13915 = add <16 x i16> %13914, %13902
  %13916 = add <16 x i16> %13915, %13908
  %13917 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13912, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13918 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13916, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13919 = shufflevector <16 x i16> %13917, <16 x i16> %13918, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13920 = lshr <32 x i16> %13919, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13921 = shufflevector <32 x i16> %13920, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13922 = zext i32 %.pre-phi3449 to i64
  %13923 = mul nsw i64 %97, %13922
  %13924 = add nsw i64 %99, %13923
  %13925 = getelementptr inbounds i16, i16* %blur_x, i64 %13924
  %13926 = getelementptr inbounds i16, i16* %13925, i64 -32
  %13927 = bitcast i16* %13926 to <16 x i16>*
  store <16 x i16> %13921, <16 x i16>* %13927, align 2, !tbaa !399
  %13928 = shufflevector <32 x i16> %13920, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13929 = getelementptr inbounds i16, i16* %13925, i64 -16
  %13930 = bitcast i16* %13929 to <16 x i16>*
  store <16 x i16> %13928, <16 x i16>* %13930, align 2, !tbaa !399
  %13931 = zext i32 %.pre-phi3475 to i64
  %13932 = mul nsw i64 %13931, %112
  %13933 = add nsw i64 %13932, %94
  %13934 = getelementptr inbounds i16, i16* %blur_x, i64 %13933
  %13935 = getelementptr inbounds i16, i16* %13934, i64 -32
  %13936 = bitcast i16* %13935 to <16 x i16>*
  %13937 = load <16 x i16>, <16 x i16>* %13936, align 2, !tbaa !399
  %13938 = getelementptr inbounds i16, i16* %13934, i64 -16
  %13939 = bitcast i16* %13938 to <16 x i16>*
  %13940 = load <16 x i16>, <16 x i16>* %13939, align 2, !tbaa !399
  %13941 = zext i32 %.pre-phi3469 to i64
  %13942 = mul nsw i64 %13941, %112
  %13943 = add nsw i64 %13942, %94
  %13944 = getelementptr inbounds i16, i16* %blur_x, i64 %13943
  %13945 = getelementptr inbounds i16, i16* %13944, i64 -32
  %13946 = bitcast i16* %13945 to <16 x i16>*
  %13947 = load <16 x i16>, <16 x i16>* %13946, align 2, !tbaa !399
  %13948 = getelementptr inbounds i16, i16* %13944, i64 -16
  %13949 = bitcast i16* %13948 to <16 x i16>*
  %13950 = load <16 x i16>, <16 x i16>* %13949, align 2, !tbaa !399
  %13951 = zext i32 %.pre-phi to i64
  %13952 = mul nsw i64 %13951, %112
  %13953 = add nsw i64 %13952, %94
  %13954 = getelementptr inbounds i16, i16* %blur_x, i64 %13953
  %13955 = getelementptr inbounds i16, i16* %13954, i64 -32
  %13956 = bitcast i16* %13955 to <16 x i16>*
  %13957 = load <16 x i16>, <16 x i16>* %13956, align 2, !tbaa !399
  %13958 = getelementptr inbounds i16, i16* %13954, i64 -16
  %13959 = bitcast i16* %13958 to <16 x i16>*
  %13960 = load <16 x i16>, <16 x i16>* %13959, align 2, !tbaa !399
  %13961 = mul nsw i64 %13922, %112
  %13962 = add nsw i64 %13961, %94
  %13963 = getelementptr inbounds i16, i16* %blur_x, i64 %13962
  %13964 = getelementptr inbounds i16, i16* %13963, i64 -32
  %13965 = bitcast i16* %13964 to <16 x i16>*
  %13966 = load <16 x i16>, <16 x i16>* %13965, align 2, !tbaa !399
  %13967 = getelementptr inbounds i16, i16* %13963, i64 -16
  %13968 = bitcast i16* %13967 to <16 x i16>*
  %13969 = load <16 x i16>, <16 x i16>* %13968, align 2, !tbaa !399
  %13970 = zext i32 %.pre-phi3445 to i64
  %13971 = mul nsw i64 %13970, %112
  %13972 = add nsw i64 %13971, %94
  %13973 = getelementptr inbounds i16, i16* %blur_x, i64 %13972
  %13974 = getelementptr inbounds i16, i16* %13973, i64 -32
  %13975 = bitcast i16* %13974 to <16 x i16>*
  %13976 = load <16 x i16>, <16 x i16>* %13975, align 2, !tbaa !399
  %13977 = getelementptr inbounds i16, i16* %13973, i64 -16
  %13978 = bitcast i16* %13977 to <16 x i16>*
  %13979 = load <16 x i16>, <16 x i16>* %13978, align 2, !tbaa !399
  %13980 = add <16 x i16> %13947, %13937
  %13981 = add <16 x i16> %13980, %13957
  %13982 = add <16 x i16> %13981, %13966
  %13983 = add <16 x i16> %13982, %13976
  %13984 = add <16 x i16> %13950, %13940
  %13985 = add <16 x i16> %13984, %13960
  %13986 = add <16 x i16> %13985, %13969
  %13987 = add <16 x i16> %13986, %13979
  %13988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13983, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13989 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13987, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13990 = shufflevector <16 x i16> %13988, <16 x i16> %13989, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13991 = lshr <32 x i16> %13990, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13992 = shufflevector <32 x i16> %13991, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13993 = sext i32 %a26 to i64
  %13994 = add nsw i64 %13993, 30
  %13995 = mul nsw i64 %13994, %113
  %13996 = add nsw i64 %115, %13995
  %13997 = getelementptr inbounds i16, i16* %66, i64 %13996
  %13998 = getelementptr inbounds i16, i16* %13997, i64 -32
  %13999 = bitcast i16* %13998 to <16 x i16>*
  store <16 x i16> %13992, <16 x i16>* %13999, align 2, !tbaa !401
  %14000 = shufflevector <32 x i16> %13991, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14001 = getelementptr inbounds i16, i16* %13997, i64 -16
  %14002 = bitcast i16* %14001 to <16 x i16>*
  store <16 x i16> %14000, <16 x i16>* %14002, align 2, !tbaa !401
  br label %after_bb751

"for blur_y.s0.x.x.rebased756":                   ; preds = %"for blur_y.s0.x.x.rebased756.preheader", %"consume blur_x763"
  %indvars.iv3349 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased756.preheader" ], [ %indvars.iv.next3350, %"consume blur_x763" ]
  %14003 = add nsw i64 %indvars.iv3349, %101
  %14004 = icmp slt i64 %14003, 1
  %14005 = trunc i64 %14003 to i32
  %14006 = shl nsw i32 %14005, 5
  %14007 = icmp sgt i32 %4, %14006
  %14008 = or i1 %14004, %14007
  br i1 %14008, label %"produce blur_x762", label %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge"

"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased756"
  %.pre3530 = shl nsw i64 %14003, 5
  br label %"consume blur_x763"

"end for blur_y.s0.x.x.rebased757":               ; preds = %"consume blur_x763", %after_bb751
  br i1 %102, label %"for blur_y.s0.x.x.rebased764.preheader", label %"end for blur_y.s0.x.x.rebased765", !prof !386

"for blur_y.s0.x.x.rebased764.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased757"
  %14009 = sext i32 %t1694 to i64
  %14010 = zext i32 %.pre-phi3475 to i64
  %14011 = mul nsw i64 %14010, %112
  %14012 = sub nsw i64 %14011, %96
  %14013 = zext i32 %.pre-phi3469 to i64
  %14014 = mul nsw i64 %14013, %112
  %14015 = sub nsw i64 %14014, %96
  %14016 = zext i32 %.pre-phi to i64
  %14017 = mul nsw i64 %14016, %112
  %14018 = sub nsw i64 %14017, %96
  %14019 = zext i32 %.pre-phi3449 to i64
  %14020 = mul nsw i64 %14019, %112
  %14021 = sub nsw i64 %14020, %96
  %14022 = zext i32 %.pre-phi3445 to i64
  %14023 = mul nsw i64 %14022, %112
  %14024 = sub nsw i64 %14023, %96
  %14025 = sext i32 %a26 to i64
  %14026 = add nsw i64 %14025, 30
  %14027 = mul nsw i64 %14026, %113
  %14028 = add nsw i64 %14027, %116
  br label %"for blur_y.s0.x.x.rebased764"

"produce blur_x762":                              ; preds = %"for blur_y.s0.x.x.rebased756"
  %t1192 = add nsw i32 %14006, %t2185
  %14029 = sext i32 %t1192 to i64
  %14030 = getelementptr inbounds i16, i16* %read_input, i64 %14029
  %14031 = getelementptr inbounds i16, i16* %14030, i64 1
  %14032 = bitcast i16* %14031 to <16 x i16>*
  %14033 = load <16 x i16>, <16 x i16>* %14032, align 2, !tbaa !396
  %14034 = getelementptr inbounds i16, i16* %14030, i64 17
  %14035 = bitcast i16* %14034 to <16 x i16>*
  %14036 = load <16 x i16>, <16 x i16>* %14035, align 2, !tbaa !396
  %14037 = bitcast i16* %14030 to <16 x i16>*
  %14038 = load <16 x i16>, <16 x i16>* %14037, align 2, !tbaa !396
  %14039 = getelementptr inbounds i16, i16* %14030, i64 16
  %14040 = bitcast i16* %14039 to <16 x i16>*
  %14041 = load <16 x i16>, <16 x i16>* %14040, align 2, !tbaa !396
  %14042 = getelementptr inbounds i16, i16* %14030, i64 2
  %14043 = bitcast i16* %14042 to <16 x i16>*
  %14044 = load <16 x i16>, <16 x i16>* %14043, align 2, !tbaa !396
  %14045 = getelementptr inbounds i16, i16* %14030, i64 18
  %14046 = bitcast i16* %14045 to <16 x i16>*
  %14047 = load <16 x i16>, <16 x i16>* %14046, align 2, !tbaa !396
  %14048 = getelementptr inbounds i16, i16* %14030, i64 4
  %14049 = bitcast i16* %14048 to <16 x i16>*
  %14050 = load <16 x i16>, <16 x i16>* %14049, align 2, !tbaa !396
  %14051 = getelementptr inbounds i16, i16* %14030, i64 20
  %14052 = bitcast i16* %14051 to <16 x i16>*
  %14053 = load <16 x i16>, <16 x i16>* %14052, align 2, !tbaa !396
  %14054 = getelementptr inbounds i16, i16* %14030, i64 3
  %14055 = bitcast i16* %14054 to <16 x i16>*
  %14056 = load <16 x i16>, <16 x i16>* %14055, align 2, !tbaa !396
  %14057 = getelementptr inbounds i16, i16* %14030, i64 19
  %14058 = bitcast i16* %14057 to <16 x i16>*
  %14059 = load <16 x i16>, <16 x i16>* %14058, align 2, !tbaa !396
  %14060 = add <16 x i16> %14038, %14033
  %14061 = add <16 x i16> %14060, %14044
  %14062 = add <16 x i16> %14061, %14050
  %14063 = add <16 x i16> %14062, %14056
  %14064 = add <16 x i16> %14041, %14036
  %14065 = add <16 x i16> %14064, %14047
  %14066 = add <16 x i16> %14065, %14053
  %14067 = add <16 x i16> %14066, %14059
  %14068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14063, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14069 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14067, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14070 = shufflevector <16 x i16> %14068, <16 x i16> %14069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14071 = lshr <32 x i16> %14070, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14072 = shufflevector <32 x i16> %14071, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14073 = shl nsw i64 %14003, 5
  %14074 = add nsw i64 %14073, %13858
  %14075 = getelementptr inbounds i16, i16* %blur_x, i64 %14074
  %14076 = bitcast i16* %14075 to <16 x i16>*
  store <16 x i16> %14072, <16 x i16>* %14076, align 2, !tbaa !399
  %14077 = shufflevector <32 x i16> %14071, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14078 = getelementptr inbounds i16, i16* %14075, i64 16
  %14079 = bitcast i16* %14078 to <16 x i16>*
  store <16 x i16> %14077, <16 x i16>* %14079, align 2, !tbaa !399
  br label %"consume blur_x763"

"consume blur_x763":                              ; preds = %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge", %"produce blur_x762"
  %.pre-phi3531 = phi i64 [ %.pre3530, %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge" ], [ %14073, %"produce blur_x762" ]
  %14080 = add nsw i64 %13861, %.pre-phi3531
  %14081 = getelementptr inbounds i16, i16* %blur_x, i64 %14080
  %14082 = bitcast i16* %14081 to <16 x i16>*
  %14083 = load <16 x i16>, <16 x i16>* %14082, align 2, !tbaa !399
  %14084 = getelementptr inbounds i16, i16* %14081, i64 16
  %14085 = bitcast i16* %14084 to <16 x i16>*
  %14086 = load <16 x i16>, <16 x i16>* %14085, align 2, !tbaa !399
  %14087 = add nsw i64 %13864, %.pre-phi3531
  %14088 = getelementptr inbounds i16, i16* %blur_x, i64 %14087
  %14089 = bitcast i16* %14088 to <16 x i16>*
  %14090 = load <16 x i16>, <16 x i16>* %14089, align 2, !tbaa !399
  %14091 = getelementptr inbounds i16, i16* %14088, i64 16
  %14092 = bitcast i16* %14091 to <16 x i16>*
  %14093 = load <16 x i16>, <16 x i16>* %14092, align 2, !tbaa !399
  %14094 = add nsw i64 %13867, %.pre-phi3531
  %14095 = getelementptr inbounds i16, i16* %blur_x, i64 %14094
  %14096 = bitcast i16* %14095 to <16 x i16>*
  %14097 = load <16 x i16>, <16 x i16>* %14096, align 2, !tbaa !399
  %14098 = getelementptr inbounds i16, i16* %14095, i64 16
  %14099 = bitcast i16* %14098 to <16 x i16>*
  %14100 = load <16 x i16>, <16 x i16>* %14099, align 2, !tbaa !399
  %14101 = add nsw i64 %13870, %.pre-phi3531
  %14102 = getelementptr inbounds i16, i16* %blur_x, i64 %14101
  %14103 = bitcast i16* %14102 to <16 x i16>*
  %14104 = load <16 x i16>, <16 x i16>* %14103, align 2, !tbaa !399
  %14105 = getelementptr inbounds i16, i16* %14102, i64 16
  %14106 = bitcast i16* %14105 to <16 x i16>*
  %14107 = load <16 x i16>, <16 x i16>* %14106, align 2, !tbaa !399
  %14108 = add nsw i64 %13873, %.pre-phi3531
  %14109 = getelementptr inbounds i16, i16* %blur_x, i64 %14108
  %14110 = bitcast i16* %14109 to <16 x i16>*
  %14111 = load <16 x i16>, <16 x i16>* %14110, align 2, !tbaa !399
  %14112 = getelementptr inbounds i16, i16* %14109, i64 16
  %14113 = bitcast i16* %14112 to <16 x i16>*
  %14114 = load <16 x i16>, <16 x i16>* %14113, align 2, !tbaa !399
  %14115 = add <16 x i16> %14090, %14083
  %14116 = add <16 x i16> %14115, %14097
  %14117 = add <16 x i16> %14116, %14104
  %14118 = add <16 x i16> %14117, %14111
  %14119 = add <16 x i16> %14093, %14086
  %14120 = add <16 x i16> %14119, %14100
  %14121 = add <16 x i16> %14120, %14107
  %14122 = add <16 x i16> %14121, %14114
  %14123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14118, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14124 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14122, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14125 = shufflevector <16 x i16> %14123, <16 x i16> %14124, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14126 = lshr <32 x i16> %14125, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14127 = shufflevector <32 x i16> %14126, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14128 = add nsw i64 %13877, %.pre-phi3531
  %14129 = getelementptr inbounds i16, i16* %66, i64 %14128
  %14130 = bitcast i16* %14129 to <16 x i16>*
  store <16 x i16> %14127, <16 x i16>* %14130, align 2, !tbaa !401
  %14131 = shufflevector <32 x i16> %14126, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14132 = getelementptr inbounds i16, i16* %14129, i64 16
  %14133 = bitcast i16* %14132 to <16 x i16>*
  store <16 x i16> %14131, <16 x i16>* %14133, align 2, !tbaa !401
  %indvars.iv.next3350 = add nuw nsw i64 %indvars.iv3349, 1
  %.not2697 = icmp eq i64 %indvars.iv.next3350, %184
  br i1 %.not2697, label %"end for blur_y.s0.x.x.rebased757", label %"for blur_y.s0.x.x.rebased756"

"for blur_y.s0.x.x.rebased764":                   ; preds = %"for blur_y.s0.x.x.rebased764.preheader", %"consume blur_x772"
  %blur_y.s0.x.x.rebased766 = phi i32 [ %14246, %"consume blur_x772" ], [ 0, %"for blur_y.s0.x.x.rebased764.preheader" ]
  %14134 = add nsw i32 %blur_y.s0.x.x.rebased766, %t1626
  %a315 = shl nsw i32 %14134, 5
  %14135 = icmp sgt i32 %a14, %a315
  %b321 = select i1 %14135, i32 %a315, i32 %a14
  %14136 = icmp slt i32 %14134, 1
  %14137 = icmp sgt i32 %4, %a315
  %14138 = or i1 %14136, %14137
  br i1 %14138, label %"produce blur_x770", label %"consume blur_x772"

"end for blur_y.s0.x.x.rebased765":               ; preds = %"consume blur_x772", %"end for blur_y.s0.x.x.rebased757"
  br i1 %34, label %"produce blur_x776", label %after_bb773

"produce blur_x770":                              ; preds = %"for blur_y.s0.x.x.rebased764"
  %14139 = icmp slt i32 %b321, %4
  %blur_x.s0.x.v1.base.s771 = select i1 %14139, i32 %b321, i32 %4
  %t1197 = add nsw i32 %blur_x.s0.x.v1.base.s771, %t2185
  %14140 = sext i32 %t1197 to i64
  %14141 = getelementptr inbounds i16, i16* %read_input, i64 %14140
  %14142 = getelementptr inbounds i16, i16* %14141, i64 1
  %14143 = bitcast i16* %14142 to <16 x i16>*
  %14144 = load <16 x i16>, <16 x i16>* %14143, align 2, !tbaa !396
  %14145 = getelementptr inbounds i16, i16* %14141, i64 17
  %14146 = bitcast i16* %14145 to <16 x i16>*
  %14147 = load <16 x i16>, <16 x i16>* %14146, align 2, !tbaa !396
  %14148 = bitcast i16* %14141 to <16 x i16>*
  %14149 = load <16 x i16>, <16 x i16>* %14148, align 2, !tbaa !396
  %14150 = getelementptr inbounds i16, i16* %14141, i64 16
  %14151 = bitcast i16* %14150 to <16 x i16>*
  %14152 = load <16 x i16>, <16 x i16>* %14151, align 2, !tbaa !396
  %14153 = getelementptr inbounds i16, i16* %14141, i64 2
  %14154 = bitcast i16* %14153 to <16 x i16>*
  %14155 = load <16 x i16>, <16 x i16>* %14154, align 2, !tbaa !396
  %14156 = getelementptr inbounds i16, i16* %14141, i64 18
  %14157 = bitcast i16* %14156 to <16 x i16>*
  %14158 = load <16 x i16>, <16 x i16>* %14157, align 2, !tbaa !396
  %14159 = getelementptr inbounds i16, i16* %14141, i64 4
  %14160 = bitcast i16* %14159 to <16 x i16>*
  %14161 = load <16 x i16>, <16 x i16>* %14160, align 2, !tbaa !396
  %14162 = getelementptr inbounds i16, i16* %14141, i64 20
  %14163 = bitcast i16* %14162 to <16 x i16>*
  %14164 = load <16 x i16>, <16 x i16>* %14163, align 2, !tbaa !396
  %14165 = getelementptr inbounds i16, i16* %14141, i64 3
  %14166 = bitcast i16* %14165 to <16 x i16>*
  %14167 = load <16 x i16>, <16 x i16>* %14166, align 2, !tbaa !396
  %14168 = getelementptr inbounds i16, i16* %14141, i64 19
  %14169 = bitcast i16* %14168 to <16 x i16>*
  %14170 = load <16 x i16>, <16 x i16>* %14169, align 2, !tbaa !396
  %14171 = add <16 x i16> %14149, %14144
  %14172 = add <16 x i16> %14171, %14155
  %14173 = add <16 x i16> %14172, %14161
  %14174 = add <16 x i16> %14173, %14167
  %14175 = add <16 x i16> %14152, %14147
  %14176 = add <16 x i16> %14175, %14158
  %14177 = add <16 x i16> %14176, %14164
  %14178 = add <16 x i16> %14177, %14170
  %14179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14174, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14180 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14178, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14181 = shufflevector <16 x i16> %14179, <16 x i16> %14180, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14182 = lshr <32 x i16> %14181, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14183 = shufflevector <32 x i16> %14182, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14184 = sext i32 %blur_x.s0.x.v1.base.s771 to i64
  %14185 = add nsw i64 %14184, %14009
  %14186 = getelementptr inbounds i16, i16* %blur_x, i64 %14185
  %14187 = bitcast i16* %14186 to <16 x i16>*
  store <16 x i16> %14183, <16 x i16>* %14187, align 2, !tbaa !399
  %14188 = shufflevector <32 x i16> %14182, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14189 = getelementptr inbounds i16, i16* %14186, i64 16
  %14190 = bitcast i16* %14189 to <16 x i16>*
  store <16 x i16> %14188, <16 x i16>* %14190, align 2, !tbaa !399
  br label %"consume blur_x772"

"consume blur_x772":                              ; preds = %"for blur_y.s0.x.x.rebased764", %"produce blur_x770"
  %14191 = sext i32 %b321 to i64
  %14192 = add nsw i64 %14012, %14191
  %14193 = getelementptr inbounds i16, i16* %blur_x, i64 %14192
  %14194 = bitcast i16* %14193 to <16 x i16>*
  %14195 = load <16 x i16>, <16 x i16>* %14194, align 2, !tbaa !399
  %14196 = getelementptr inbounds i16, i16* %14193, i64 16
  %14197 = bitcast i16* %14196 to <16 x i16>*
  %14198 = load <16 x i16>, <16 x i16>* %14197, align 2, !tbaa !399
  %14199 = add nsw i64 %14015, %14191
  %14200 = getelementptr inbounds i16, i16* %blur_x, i64 %14199
  %14201 = bitcast i16* %14200 to <16 x i16>*
  %14202 = load <16 x i16>, <16 x i16>* %14201, align 2, !tbaa !399
  %14203 = getelementptr inbounds i16, i16* %14200, i64 16
  %14204 = bitcast i16* %14203 to <16 x i16>*
  %14205 = load <16 x i16>, <16 x i16>* %14204, align 2, !tbaa !399
  %14206 = add nsw i64 %14018, %14191
  %14207 = getelementptr inbounds i16, i16* %blur_x, i64 %14206
  %14208 = bitcast i16* %14207 to <16 x i16>*
  %14209 = load <16 x i16>, <16 x i16>* %14208, align 2, !tbaa !399
  %14210 = getelementptr inbounds i16, i16* %14207, i64 16
  %14211 = bitcast i16* %14210 to <16 x i16>*
  %14212 = load <16 x i16>, <16 x i16>* %14211, align 2, !tbaa !399
  %14213 = add nsw i64 %14021, %14191
  %14214 = getelementptr inbounds i16, i16* %blur_x, i64 %14213
  %14215 = bitcast i16* %14214 to <16 x i16>*
  %14216 = load <16 x i16>, <16 x i16>* %14215, align 2, !tbaa !399
  %14217 = getelementptr inbounds i16, i16* %14214, i64 16
  %14218 = bitcast i16* %14217 to <16 x i16>*
  %14219 = load <16 x i16>, <16 x i16>* %14218, align 2, !tbaa !399
  %14220 = add nsw i64 %14024, %14191
  %14221 = getelementptr inbounds i16, i16* %blur_x, i64 %14220
  %14222 = bitcast i16* %14221 to <16 x i16>*
  %14223 = load <16 x i16>, <16 x i16>* %14222, align 2, !tbaa !399
  %14224 = getelementptr inbounds i16, i16* %14221, i64 16
  %14225 = bitcast i16* %14224 to <16 x i16>*
  %14226 = load <16 x i16>, <16 x i16>* %14225, align 2, !tbaa !399
  %14227 = add <16 x i16> %14202, %14195
  %14228 = add <16 x i16> %14227, %14209
  %14229 = add <16 x i16> %14228, %14216
  %14230 = add <16 x i16> %14229, %14223
  %14231 = add <16 x i16> %14205, %14198
  %14232 = add <16 x i16> %14231, %14212
  %14233 = add <16 x i16> %14232, %14219
  %14234 = add <16 x i16> %14233, %14226
  %14235 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14230, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14236 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14234, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14237 = shufflevector <16 x i16> %14235, <16 x i16> %14236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14238 = lshr <32 x i16> %14237, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14239 = shufflevector <32 x i16> %14238, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14240 = add nsw i64 %14028, %14191
  %14241 = getelementptr inbounds i16, i16* %66, i64 %14240
  %14242 = bitcast i16* %14241 to <16 x i16>*
  store <16 x i16> %14239, <16 x i16>* %14242, align 2, !tbaa !401
  %14243 = shufflevector <32 x i16> %14238, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14244 = getelementptr inbounds i16, i16* %14241, i64 16
  %14245 = bitcast i16* %14244 to <16 x i16>*
  store <16 x i16> %14243, <16 x i16>* %14245, align 2, !tbaa !401
  %14246 = add nuw nsw i32 %blur_y.s0.x.x.rebased766, 1
  %.not2696 = icmp eq i32 %14246, %t1683
  br i1 %.not2696, label %"end for blur_y.s0.x.x.rebased765", label %"for blur_y.s0.x.x.rebased764"

after_bb773:                                      ; preds = %"end for blur_y.s0.x.x.rebased765", %"produce blur_x776"
  br i1 %100, label %"for blur_y.s0.x.x.rebased778.preheader", label %"end for blur_y.s0.x.x.rebased779", !prof !386

"for blur_y.s0.x.x.rebased778.preheader":         ; preds = %after_bb773
  %14247 = sext i32 %t1700 to i64
  %14248 = zext i32 %.pre-phi to i64
  %14249 = mul nsw i64 %14248, %112
  %14250 = sub nsw i64 %14249, %96
  %14251 = zext i32 %.pre-phi3475 to i64
  %14252 = mul nsw i64 %14251, %112
  %14253 = sub nsw i64 %14252, %96
  %14254 = zext i32 %.pre-phi3445 to i64
  %14255 = mul nsw i64 %14254, %112
  %14256 = sub nsw i64 %14255, %96
  %14257 = zext i32 %.pre-phi3453 to i64
  %14258 = mul nsw i64 %14257, %112
  %14259 = sub nsw i64 %14258, %96
  %14260 = zext i32 %.pre-phi3449 to i64
  %14261 = mul nsw i64 %14260, %112
  %14262 = sub nsw i64 %14261, %96
  %14263 = sext i32 %a26 to i64
  %14264 = add nsw i64 %14263, 31
  %14265 = mul nsw i64 %14264, %113
  %14266 = add nsw i64 %14265, %116
  br label %"for blur_y.s0.x.x.rebased778"

"produce blur_x776":                              ; preds = %"end for blur_y.s0.x.x.rebased765"
  %14267 = getelementptr inbounds i16, i16* %read_input, i64 %177
  %14268 = getelementptr inbounds i16, i16* %14267, i64 -31
  %14269 = bitcast i16* %14268 to <16 x i16>*
  %14270 = load <16 x i16>, <16 x i16>* %14269, align 2, !tbaa !396
  %14271 = getelementptr inbounds i16, i16* %14267, i64 -15
  %14272 = bitcast i16* %14271 to <16 x i16>*
  %14273 = load <16 x i16>, <16 x i16>* %14272, align 2, !tbaa !396
  %14274 = getelementptr inbounds i16, i16* %14267, i64 -32
  %14275 = bitcast i16* %14274 to <16 x i16>*
  %14276 = load <16 x i16>, <16 x i16>* %14275, align 2, !tbaa !396
  %14277 = getelementptr inbounds i16, i16* %14267, i64 -16
  %14278 = bitcast i16* %14277 to <16 x i16>*
  %14279 = load <16 x i16>, <16 x i16>* %14278, align 2, !tbaa !396
  %14280 = getelementptr inbounds i16, i16* %14267, i64 -30
  %14281 = bitcast i16* %14280 to <16 x i16>*
  %14282 = load <16 x i16>, <16 x i16>* %14281, align 2, !tbaa !396
  %14283 = getelementptr inbounds i16, i16* %14267, i64 -14
  %14284 = bitcast i16* %14283 to <16 x i16>*
  %14285 = load <16 x i16>, <16 x i16>* %14284, align 2, !tbaa !396
  %14286 = getelementptr inbounds i16, i16* %14267, i64 -28
  %14287 = bitcast i16* %14286 to <16 x i16>*
  %14288 = load <16 x i16>, <16 x i16>* %14287, align 2, !tbaa !396
  %14289 = getelementptr inbounds i16, i16* %14267, i64 -12
  %14290 = bitcast i16* %14289 to <16 x i16>*
  %14291 = load <16 x i16>, <16 x i16>* %14290, align 2, !tbaa !396
  %14292 = getelementptr inbounds i16, i16* %14267, i64 -29
  %14293 = bitcast i16* %14292 to <16 x i16>*
  %14294 = load <16 x i16>, <16 x i16>* %14293, align 2, !tbaa !396
  %14295 = getelementptr inbounds i16, i16* %14267, i64 -13
  %14296 = bitcast i16* %14295 to <16 x i16>*
  %14297 = load <16 x i16>, <16 x i16>* %14296, align 2, !tbaa !396
  %14298 = add <16 x i16> %14276, %14270
  %14299 = add <16 x i16> %14298, %14282
  %14300 = add <16 x i16> %14299, %14288
  %14301 = add <16 x i16> %14300, %14294
  %14302 = add <16 x i16> %14279, %14273
  %14303 = add <16 x i16> %14302, %14285
  %14304 = add <16 x i16> %14303, %14291
  %14305 = add <16 x i16> %14304, %14297
  %14306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14301, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14305, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14308 = shufflevector <16 x i16> %14306, <16 x i16> %14307, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14309 = lshr <32 x i16> %14308, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14310 = shufflevector <32 x i16> %14309, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14311 = zext i32 %.pre-phi3453 to i64
  %14312 = mul nsw i64 %97, %14311
  %14313 = add nsw i64 %99, %14312
  %14314 = getelementptr inbounds i16, i16* %blur_x, i64 %14313
  %14315 = getelementptr inbounds i16, i16* %14314, i64 -32
  %14316 = bitcast i16* %14315 to <16 x i16>*
  store <16 x i16> %14310, <16 x i16>* %14316, align 2, !tbaa !399
  %14317 = shufflevector <32 x i16> %14309, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14318 = getelementptr inbounds i16, i16* %14314, i64 -16
  %14319 = bitcast i16* %14318 to <16 x i16>*
  store <16 x i16> %14317, <16 x i16>* %14319, align 2, !tbaa !399
  %14320 = zext i32 %.pre-phi to i64
  %14321 = mul nsw i64 %14320, %112
  %14322 = add nsw i64 %14321, %94
  %14323 = getelementptr inbounds i16, i16* %blur_x, i64 %14322
  %14324 = getelementptr inbounds i16, i16* %14323, i64 -32
  %14325 = bitcast i16* %14324 to <16 x i16>*
  %14326 = load <16 x i16>, <16 x i16>* %14325, align 2, !tbaa !399
  %14327 = getelementptr inbounds i16, i16* %14323, i64 -16
  %14328 = bitcast i16* %14327 to <16 x i16>*
  %14329 = load <16 x i16>, <16 x i16>* %14328, align 2, !tbaa !399
  %14330 = zext i32 %.pre-phi3475 to i64
  %14331 = mul nsw i64 %14330, %112
  %14332 = add nsw i64 %14331, %94
  %14333 = getelementptr inbounds i16, i16* %blur_x, i64 %14332
  %14334 = getelementptr inbounds i16, i16* %14333, i64 -32
  %14335 = bitcast i16* %14334 to <16 x i16>*
  %14336 = load <16 x i16>, <16 x i16>* %14335, align 2, !tbaa !399
  %14337 = getelementptr inbounds i16, i16* %14333, i64 -16
  %14338 = bitcast i16* %14337 to <16 x i16>*
  %14339 = load <16 x i16>, <16 x i16>* %14338, align 2, !tbaa !399
  %14340 = zext i32 %.pre-phi3445 to i64
  %14341 = mul nsw i64 %14340, %112
  %14342 = add nsw i64 %14341, %94
  %14343 = getelementptr inbounds i16, i16* %blur_x, i64 %14342
  %14344 = getelementptr inbounds i16, i16* %14343, i64 -32
  %14345 = bitcast i16* %14344 to <16 x i16>*
  %14346 = load <16 x i16>, <16 x i16>* %14345, align 2, !tbaa !399
  %14347 = getelementptr inbounds i16, i16* %14343, i64 -16
  %14348 = bitcast i16* %14347 to <16 x i16>*
  %14349 = load <16 x i16>, <16 x i16>* %14348, align 2, !tbaa !399
  %14350 = mul nsw i64 %14311, %112
  %14351 = add nsw i64 %14350, %94
  %14352 = getelementptr inbounds i16, i16* %blur_x, i64 %14351
  %14353 = getelementptr inbounds i16, i16* %14352, i64 -32
  %14354 = bitcast i16* %14353 to <16 x i16>*
  %14355 = load <16 x i16>, <16 x i16>* %14354, align 2, !tbaa !399
  %14356 = getelementptr inbounds i16, i16* %14352, i64 -16
  %14357 = bitcast i16* %14356 to <16 x i16>*
  %14358 = load <16 x i16>, <16 x i16>* %14357, align 2, !tbaa !399
  %14359 = zext i32 %.pre-phi3449 to i64
  %14360 = mul nsw i64 %14359, %112
  %14361 = add nsw i64 %14360, %94
  %14362 = getelementptr inbounds i16, i16* %blur_x, i64 %14361
  %14363 = getelementptr inbounds i16, i16* %14362, i64 -32
  %14364 = bitcast i16* %14363 to <16 x i16>*
  %14365 = load <16 x i16>, <16 x i16>* %14364, align 2, !tbaa !399
  %14366 = getelementptr inbounds i16, i16* %14362, i64 -16
  %14367 = bitcast i16* %14366 to <16 x i16>*
  %14368 = load <16 x i16>, <16 x i16>* %14367, align 2, !tbaa !399
  %14369 = add <16 x i16> %14336, %14326
  %14370 = add <16 x i16> %14369, %14346
  %14371 = add <16 x i16> %14370, %14355
  %14372 = add <16 x i16> %14371, %14365
  %14373 = add <16 x i16> %14339, %14329
  %14374 = add <16 x i16> %14373, %14349
  %14375 = add <16 x i16> %14374, %14358
  %14376 = add <16 x i16> %14375, %14368
  %14377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14372, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14378 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14376, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14379 = shufflevector <16 x i16> %14377, <16 x i16> %14378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14380 = lshr <32 x i16> %14379, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14381 = shufflevector <32 x i16> %14380, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14382 = sext i32 %a26 to i64
  %14383 = add nsw i64 %14382, 31
  %14384 = mul nsw i64 %14383, %113
  %14385 = add nsw i64 %115, %14384
  %14386 = getelementptr inbounds i16, i16* %66, i64 %14385
  %14387 = getelementptr inbounds i16, i16* %14386, i64 -32
  %14388 = bitcast i16* %14387 to <16 x i16>*
  store <16 x i16> %14381, <16 x i16>* %14388, align 2, !tbaa !401
  %14389 = shufflevector <32 x i16> %14380, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14390 = getelementptr inbounds i16, i16* %14386, i64 -16
  %14391 = bitcast i16* %14390 to <16 x i16>*
  store <16 x i16> %14389, <16 x i16>* %14391, align 2, !tbaa !401
  br label %after_bb773

"for blur_y.s0.x.x.rebased778":                   ; preds = %"for blur_y.s0.x.x.rebased778.preheader", %"consume blur_x785"
  %indvars.iv3352 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased778.preheader" ], [ %indvars.iv.next3353, %"consume blur_x785" ]
  %14392 = add nsw i64 %indvars.iv3352, %101
  %14393 = icmp slt i64 %14392, 1
  %14394 = trunc i64 %14392 to i32
  %14395 = shl nsw i32 %14394, 5
  %14396 = icmp sgt i32 %4, %14395
  %14397 = or i1 %14393, %14396
  br i1 %14397, label %"produce blur_x784", label %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge"

"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased778"
  %.pre3532 = shl nsw i64 %14392, 5
  br label %"consume blur_x785"

"end for blur_y.s0.x.x.rebased779":               ; preds = %"consume blur_x785", %after_bb773
  br i1 %102, label %"for blur_y.s0.x.x.rebased786.preheader", label %"end for blur_y.s0.x.x.rebased787", !prof !386

"for blur_y.s0.x.x.rebased786.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased779"
  %14398 = sext i32 %t1700 to i64
  %14399 = zext i32 %.pre-phi to i64
  %14400 = mul nsw i64 %14399, %112
  %14401 = sub nsw i64 %14400, %96
  %14402 = zext i32 %.pre-phi3475 to i64
  %14403 = mul nsw i64 %14402, %112
  %14404 = sub nsw i64 %14403, %96
  %14405 = zext i32 %.pre-phi3445 to i64
  %14406 = mul nsw i64 %14405, %112
  %14407 = sub nsw i64 %14406, %96
  %14408 = zext i32 %.pre-phi3453 to i64
  %14409 = mul nsw i64 %14408, %112
  %14410 = sub nsw i64 %14409, %96
  %14411 = zext i32 %.pre-phi3449 to i64
  %14412 = mul nsw i64 %14411, %112
  %14413 = sub nsw i64 %14412, %96
  %14414 = sext i32 %a26 to i64
  %14415 = add nsw i64 %14414, 31
  %14416 = mul nsw i64 %14415, %113
  %14417 = add nsw i64 %14416, %116
  br label %"for blur_y.s0.x.x.rebased786"

"produce blur_x784":                              ; preds = %"for blur_y.s0.x.x.rebased778"
  %t1208 = add nsw i32 %14395, %t2201
  %14418 = sext i32 %t1208 to i64
  %14419 = getelementptr inbounds i16, i16* %read_input, i64 %14418
  %14420 = getelementptr inbounds i16, i16* %14419, i64 1
  %14421 = bitcast i16* %14420 to <16 x i16>*
  %14422 = load <16 x i16>, <16 x i16>* %14421, align 2, !tbaa !396
  %14423 = getelementptr inbounds i16, i16* %14419, i64 17
  %14424 = bitcast i16* %14423 to <16 x i16>*
  %14425 = load <16 x i16>, <16 x i16>* %14424, align 2, !tbaa !396
  %14426 = bitcast i16* %14419 to <16 x i16>*
  %14427 = load <16 x i16>, <16 x i16>* %14426, align 2, !tbaa !396
  %14428 = getelementptr inbounds i16, i16* %14419, i64 16
  %14429 = bitcast i16* %14428 to <16 x i16>*
  %14430 = load <16 x i16>, <16 x i16>* %14429, align 2, !tbaa !396
  %14431 = getelementptr inbounds i16, i16* %14419, i64 2
  %14432 = bitcast i16* %14431 to <16 x i16>*
  %14433 = load <16 x i16>, <16 x i16>* %14432, align 2, !tbaa !396
  %14434 = getelementptr inbounds i16, i16* %14419, i64 18
  %14435 = bitcast i16* %14434 to <16 x i16>*
  %14436 = load <16 x i16>, <16 x i16>* %14435, align 2, !tbaa !396
  %14437 = getelementptr inbounds i16, i16* %14419, i64 4
  %14438 = bitcast i16* %14437 to <16 x i16>*
  %14439 = load <16 x i16>, <16 x i16>* %14438, align 2, !tbaa !396
  %14440 = getelementptr inbounds i16, i16* %14419, i64 20
  %14441 = bitcast i16* %14440 to <16 x i16>*
  %14442 = load <16 x i16>, <16 x i16>* %14441, align 2, !tbaa !396
  %14443 = getelementptr inbounds i16, i16* %14419, i64 3
  %14444 = bitcast i16* %14443 to <16 x i16>*
  %14445 = load <16 x i16>, <16 x i16>* %14444, align 2, !tbaa !396
  %14446 = getelementptr inbounds i16, i16* %14419, i64 19
  %14447 = bitcast i16* %14446 to <16 x i16>*
  %14448 = load <16 x i16>, <16 x i16>* %14447, align 2, !tbaa !396
  %14449 = add <16 x i16> %14427, %14422
  %14450 = add <16 x i16> %14449, %14433
  %14451 = add <16 x i16> %14450, %14439
  %14452 = add <16 x i16> %14451, %14445
  %14453 = add <16 x i16> %14430, %14425
  %14454 = add <16 x i16> %14453, %14436
  %14455 = add <16 x i16> %14454, %14442
  %14456 = add <16 x i16> %14455, %14448
  %14457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14452, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14458 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14456, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14459 = shufflevector <16 x i16> %14457, <16 x i16> %14458, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14460 = lshr <32 x i16> %14459, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14461 = shufflevector <32 x i16> %14460, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14462 = shl nsw i64 %14392, 5
  %14463 = add nsw i64 %14462, %14247
  %14464 = getelementptr inbounds i16, i16* %blur_x, i64 %14463
  %14465 = bitcast i16* %14464 to <16 x i16>*
  store <16 x i16> %14461, <16 x i16>* %14465, align 2, !tbaa !399
  %14466 = shufflevector <32 x i16> %14460, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14467 = getelementptr inbounds i16, i16* %14464, i64 16
  %14468 = bitcast i16* %14467 to <16 x i16>*
  store <16 x i16> %14466, <16 x i16>* %14468, align 2, !tbaa !399
  br label %"consume blur_x785"

"consume blur_x785":                              ; preds = %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge", %"produce blur_x784"
  %.pre-phi3533 = phi i64 [ %.pre3532, %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge" ], [ %14462, %"produce blur_x784" ]
  %14469 = add nsw i64 %14250, %.pre-phi3533
  %14470 = getelementptr inbounds i16, i16* %blur_x, i64 %14469
  %14471 = bitcast i16* %14470 to <16 x i16>*
  %14472 = load <16 x i16>, <16 x i16>* %14471, align 2, !tbaa !399
  %14473 = getelementptr inbounds i16, i16* %14470, i64 16
  %14474 = bitcast i16* %14473 to <16 x i16>*
  %14475 = load <16 x i16>, <16 x i16>* %14474, align 2, !tbaa !399
  %14476 = add nsw i64 %14253, %.pre-phi3533
  %14477 = getelementptr inbounds i16, i16* %blur_x, i64 %14476
  %14478 = bitcast i16* %14477 to <16 x i16>*
  %14479 = load <16 x i16>, <16 x i16>* %14478, align 2, !tbaa !399
  %14480 = getelementptr inbounds i16, i16* %14477, i64 16
  %14481 = bitcast i16* %14480 to <16 x i16>*
  %14482 = load <16 x i16>, <16 x i16>* %14481, align 2, !tbaa !399
  %14483 = add nsw i64 %14256, %.pre-phi3533
  %14484 = getelementptr inbounds i16, i16* %blur_x, i64 %14483
  %14485 = bitcast i16* %14484 to <16 x i16>*
  %14486 = load <16 x i16>, <16 x i16>* %14485, align 2, !tbaa !399
  %14487 = getelementptr inbounds i16, i16* %14484, i64 16
  %14488 = bitcast i16* %14487 to <16 x i16>*
  %14489 = load <16 x i16>, <16 x i16>* %14488, align 2, !tbaa !399
  %14490 = add nsw i64 %14259, %.pre-phi3533
  %14491 = getelementptr inbounds i16, i16* %blur_x, i64 %14490
  %14492 = bitcast i16* %14491 to <16 x i16>*
  %14493 = load <16 x i16>, <16 x i16>* %14492, align 2, !tbaa !399
  %14494 = getelementptr inbounds i16, i16* %14491, i64 16
  %14495 = bitcast i16* %14494 to <16 x i16>*
  %14496 = load <16 x i16>, <16 x i16>* %14495, align 2, !tbaa !399
  %14497 = add nsw i64 %14262, %.pre-phi3533
  %14498 = getelementptr inbounds i16, i16* %blur_x, i64 %14497
  %14499 = bitcast i16* %14498 to <16 x i16>*
  %14500 = load <16 x i16>, <16 x i16>* %14499, align 2, !tbaa !399
  %14501 = getelementptr inbounds i16, i16* %14498, i64 16
  %14502 = bitcast i16* %14501 to <16 x i16>*
  %14503 = load <16 x i16>, <16 x i16>* %14502, align 2, !tbaa !399
  %14504 = add <16 x i16> %14479, %14472
  %14505 = add <16 x i16> %14504, %14486
  %14506 = add <16 x i16> %14505, %14493
  %14507 = add <16 x i16> %14506, %14500
  %14508 = add <16 x i16> %14482, %14475
  %14509 = add <16 x i16> %14508, %14489
  %14510 = add <16 x i16> %14509, %14496
  %14511 = add <16 x i16> %14510, %14503
  %14512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14507, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14511, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14514 = shufflevector <16 x i16> %14512, <16 x i16> %14513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14515 = lshr <32 x i16> %14514, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14516 = shufflevector <32 x i16> %14515, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14517 = add nsw i64 %14266, %.pre-phi3533
  %14518 = getelementptr inbounds i16, i16* %66, i64 %14517
  %14519 = bitcast i16* %14518 to <16 x i16>*
  store <16 x i16> %14516, <16 x i16>* %14519, align 2, !tbaa !401
  %14520 = shufflevector <32 x i16> %14515, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14521 = getelementptr inbounds i16, i16* %14518, i64 16
  %14522 = bitcast i16* %14521 to <16 x i16>*
  store <16 x i16> %14520, <16 x i16>* %14522, align 2, !tbaa !401
  %indvars.iv.next3353 = add nuw nsw i64 %indvars.iv3352, 1
  %.not2695 = icmp eq i64 %indvars.iv.next3353, %184
  br i1 %.not2695, label %"end for blur_y.s0.x.x.rebased779", label %"for blur_y.s0.x.x.rebased778"

"for blur_y.s0.x.x.rebased786":                   ; preds = %"for blur_y.s0.x.x.rebased786.preheader", %"consume blur_x794"
  %blur_y.s0.x.x.rebased788 = phi i32 [ %14636, %"consume blur_x794" ], [ 0, %"for blur_y.s0.x.x.rebased786.preheader" ]
  %14523 = add nsw i32 %blur_y.s0.x.x.rebased788, %t1626
  %a322 = shl nsw i32 %14523, 5
  %14524 = icmp sgt i32 %a14, %a322
  %b328 = select i1 %14524, i32 %a322, i32 %a14
  %14525 = icmp slt i32 %14523, 1
  %14526 = icmp sgt i32 %4, %a322
  %14527 = or i1 %14525, %14526
  br i1 %14527, label %"produce blur_x792", label %"consume blur_x794"

"end for blur_y.s0.x.x.rebased787":               ; preds = %"consume blur_x794", %"end for blur_y.s0.x.x.rebased779"
  %14528 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2693 = icmp eq i32 %14528, %t1612
  br i1 %.not2693, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x792":                              ; preds = %"for blur_y.s0.x.x.rebased786"
  %14529 = icmp slt i32 %b328, %4
  %blur_x.s0.x.v1.base.s793 = select i1 %14529, i32 %b328, i32 %4
  %t1213 = add nsw i32 %blur_x.s0.x.v1.base.s793, %t2201
  %14530 = sext i32 %t1213 to i64
  %14531 = getelementptr inbounds i16, i16* %read_input, i64 %14530
  %14532 = getelementptr inbounds i16, i16* %14531, i64 1
  %14533 = bitcast i16* %14532 to <16 x i16>*
  %14534 = load <16 x i16>, <16 x i16>* %14533, align 2, !tbaa !396
  %14535 = getelementptr inbounds i16, i16* %14531, i64 17
  %14536 = bitcast i16* %14535 to <16 x i16>*
  %14537 = load <16 x i16>, <16 x i16>* %14536, align 2, !tbaa !396
  %14538 = bitcast i16* %14531 to <16 x i16>*
  %14539 = load <16 x i16>, <16 x i16>* %14538, align 2, !tbaa !396
  %14540 = getelementptr inbounds i16, i16* %14531, i64 16
  %14541 = bitcast i16* %14540 to <16 x i16>*
  %14542 = load <16 x i16>, <16 x i16>* %14541, align 2, !tbaa !396
  %14543 = getelementptr inbounds i16, i16* %14531, i64 2
  %14544 = bitcast i16* %14543 to <16 x i16>*
  %14545 = load <16 x i16>, <16 x i16>* %14544, align 2, !tbaa !396
  %14546 = getelementptr inbounds i16, i16* %14531, i64 18
  %14547 = bitcast i16* %14546 to <16 x i16>*
  %14548 = load <16 x i16>, <16 x i16>* %14547, align 2, !tbaa !396
  %14549 = getelementptr inbounds i16, i16* %14531, i64 4
  %14550 = bitcast i16* %14549 to <16 x i16>*
  %14551 = load <16 x i16>, <16 x i16>* %14550, align 2, !tbaa !396
  %14552 = getelementptr inbounds i16, i16* %14531, i64 20
  %14553 = bitcast i16* %14552 to <16 x i16>*
  %14554 = load <16 x i16>, <16 x i16>* %14553, align 2, !tbaa !396
  %14555 = getelementptr inbounds i16, i16* %14531, i64 3
  %14556 = bitcast i16* %14555 to <16 x i16>*
  %14557 = load <16 x i16>, <16 x i16>* %14556, align 2, !tbaa !396
  %14558 = getelementptr inbounds i16, i16* %14531, i64 19
  %14559 = bitcast i16* %14558 to <16 x i16>*
  %14560 = load <16 x i16>, <16 x i16>* %14559, align 2, !tbaa !396
  %14561 = add <16 x i16> %14539, %14534
  %14562 = add <16 x i16> %14561, %14545
  %14563 = add <16 x i16> %14562, %14551
  %14564 = add <16 x i16> %14563, %14557
  %14565 = add <16 x i16> %14542, %14537
  %14566 = add <16 x i16> %14565, %14548
  %14567 = add <16 x i16> %14566, %14554
  %14568 = add <16 x i16> %14567, %14560
  %14569 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14564, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14570 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14568, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14571 = shufflevector <16 x i16> %14569, <16 x i16> %14570, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14572 = lshr <32 x i16> %14571, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14573 = shufflevector <32 x i16> %14572, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14574 = sext i32 %blur_x.s0.x.v1.base.s793 to i64
  %14575 = add nsw i64 %14574, %14398
  %14576 = getelementptr inbounds i16, i16* %blur_x, i64 %14575
  %14577 = bitcast i16* %14576 to <16 x i16>*
  store <16 x i16> %14573, <16 x i16>* %14577, align 2, !tbaa !399
  %14578 = shufflevector <32 x i16> %14572, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14579 = getelementptr inbounds i16, i16* %14576, i64 16
  %14580 = bitcast i16* %14579 to <16 x i16>*
  store <16 x i16> %14578, <16 x i16>* %14580, align 2, !tbaa !399
  br label %"consume blur_x794"

"consume blur_x794":                              ; preds = %"for blur_y.s0.x.x.rebased786", %"produce blur_x792"
  %14581 = sext i32 %b328 to i64
  %14582 = add nsw i64 %14401, %14581
  %14583 = getelementptr inbounds i16, i16* %blur_x, i64 %14582
  %14584 = bitcast i16* %14583 to <16 x i16>*
  %14585 = load <16 x i16>, <16 x i16>* %14584, align 2, !tbaa !399
  %14586 = getelementptr inbounds i16, i16* %14583, i64 16
  %14587 = bitcast i16* %14586 to <16 x i16>*
  %14588 = load <16 x i16>, <16 x i16>* %14587, align 2, !tbaa !399
  %14589 = add nsw i64 %14404, %14581
  %14590 = getelementptr inbounds i16, i16* %blur_x, i64 %14589
  %14591 = bitcast i16* %14590 to <16 x i16>*
  %14592 = load <16 x i16>, <16 x i16>* %14591, align 2, !tbaa !399
  %14593 = getelementptr inbounds i16, i16* %14590, i64 16
  %14594 = bitcast i16* %14593 to <16 x i16>*
  %14595 = load <16 x i16>, <16 x i16>* %14594, align 2, !tbaa !399
  %14596 = add nsw i64 %14407, %14581
  %14597 = getelementptr inbounds i16, i16* %blur_x, i64 %14596
  %14598 = bitcast i16* %14597 to <16 x i16>*
  %14599 = load <16 x i16>, <16 x i16>* %14598, align 2, !tbaa !399
  %14600 = getelementptr inbounds i16, i16* %14597, i64 16
  %14601 = bitcast i16* %14600 to <16 x i16>*
  %14602 = load <16 x i16>, <16 x i16>* %14601, align 2, !tbaa !399
  %14603 = add nsw i64 %14410, %14581
  %14604 = getelementptr inbounds i16, i16* %blur_x, i64 %14603
  %14605 = bitcast i16* %14604 to <16 x i16>*
  %14606 = load <16 x i16>, <16 x i16>* %14605, align 2, !tbaa !399
  %14607 = getelementptr inbounds i16, i16* %14604, i64 16
  %14608 = bitcast i16* %14607 to <16 x i16>*
  %14609 = load <16 x i16>, <16 x i16>* %14608, align 2, !tbaa !399
  %14610 = add nsw i64 %14413, %14581
  %14611 = getelementptr inbounds i16, i16* %blur_x, i64 %14610
  %14612 = bitcast i16* %14611 to <16 x i16>*
  %14613 = load <16 x i16>, <16 x i16>* %14612, align 2, !tbaa !399
  %14614 = getelementptr inbounds i16, i16* %14611, i64 16
  %14615 = bitcast i16* %14614 to <16 x i16>*
  %14616 = load <16 x i16>, <16 x i16>* %14615, align 2, !tbaa !399
  %14617 = add <16 x i16> %14592, %14585
  %14618 = add <16 x i16> %14617, %14599
  %14619 = add <16 x i16> %14618, %14606
  %14620 = add <16 x i16> %14619, %14613
  %14621 = add <16 x i16> %14595, %14588
  %14622 = add <16 x i16> %14621, %14602
  %14623 = add <16 x i16> %14622, %14609
  %14624 = add <16 x i16> %14623, %14616
  %14625 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14620, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14626 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14624, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14627 = shufflevector <16 x i16> %14625, <16 x i16> %14626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14628 = lshr <32 x i16> %14627, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14629 = shufflevector <32 x i16> %14628, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14630 = add nsw i64 %14417, %14581
  %14631 = getelementptr inbounds i16, i16* %66, i64 %14630
  %14632 = bitcast i16* %14631 to <16 x i16>*
  store <16 x i16> %14629, <16 x i16>* %14632, align 2, !tbaa !401
  %14633 = shufflevector <32 x i16> %14628, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14634 = getelementptr inbounds i16, i16* %14631, i64 16
  %14635 = bitcast i16* %14634 to <16 x i16>*
  store <16 x i16> %14633, <16 x i16>* %14635, align 2, !tbaa !401
  %14636 = add nuw nsw i32 %blur_y.s0.x.x.rebased788, 1
  %.not2694 = icmp eq i32 %14636, %t1683
  br i1 %.not2694, label %"end for blur_y.s0.x.x.rebased787", label %"for blur_y.s0.x.x.rebased786"

"for blur_y.s0.y.y816":                           ; preds = %"for blur_y.s0.y.y816.preheader", %"end for blur_y.s0.x.x.rebased2364"
  %blur_y.s0.y.y818 = phi i32 [ %28253, %"end for blur_y.s0.x.x.rebased2364" ], [ 0, %"for blur_y.s0.y.y816.preheader" ]
  %a375 = shl nsw i32 %blur_y.s0.y.y818, 5
  %14637 = icmp sgt i32 %b377, %a375
  %blur_y.s0.y.yi.base.s819 = select i1 %14637, i32 %a375, i32 %b377
  %14638 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2842 = icmp ult i64 %14638, %266
  %14639 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2842, label %if.then.i2845, label %pseudostack_alloc.exit2858, !prof !390

if.then.i2845:                                    ; preds = %"for blur_y.s0.y.y816"
  %tobool1.not.i2844 = icmp ne i8* %14639, null
  %14640 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2847 = icmp ugt i64 %14640, 16384
  %or.cond2912 = and i1 %tobool1.not.i2844, %cmp2.i2847
  br i1 %or.cond2912, label %if.then3.i2849, label %if.end.i2853

if.then3.i2849:                                   ; preds = %if.then.i2845
  call void @halide_free(i8* null, i8* nonnull %14639) #16
  %.pre3439 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2853

if.end.i2853:                                     ; preds = %if.then3.i2849, %if.then.i2845
  %14641 = phi i64 [ %.pre3439, %if.then3.i2849 ], [ %14640, %if.then.i2845 ]
  %add.i2851 = add i64 %14641, %266
  store i64 %add.i2851, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2852 = icmp ugt i64 %add.i2851, 16384
  br i1 %cmp7.i2852, label %if.then8.i2855, label %if.end11.i2857

if.then8.i2855:                                   ; preds = %if.end.i2853
  %call.i2854 = call i8* @halide_malloc(i8* null, i64 %266) #16
  br label %if.end11.i2857

if.end11.i2857:                                   ; preds = %if.then8.i2855, %if.end.i2853
  %storemerge.i2856 = phi i8* [ %call.i2854, %if.then8.i2855 ], [ null, %if.end.i2853 ]
  store i8* %storemerge.i2856, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %266, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2858

pseudostack_alloc.exit2858:                       ; preds = %"for blur_y.s0.y.y816", %if.end11.i2857
  %14642 = phi i8* [ %storemerge.i2856, %if.end11.i2857 ], [ %14639, %"for blur_y.s0.y.y816" ]
  %14643 = bitcast i8* %14642 to i16*
  %.not2536 = icmp eq i8* %14642, null
  br i1 %.not2536, label %then_bb821, label %"produce read_input823", !prof !392

"end for blur_y.s0.y.y817":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.02901, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2859

if.then.i2859.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2364"
  %14644 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %14645 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2859

if.then.i2859:                                    ; preds = %if.then.i2859.loopexit, %"end for blur_y.s0.y.y817"
  %.12909 = phi i8* [ %.0, %"end for blur_y.s0.y.y817" ], [ %14644, %if.then.i2859.loopexit ]
  %.129022906 = phi i8* [ %.02901, %"end for blur_y.s0.y.y817" ], [ %14645, %if.then.i2859.loopexit ]
  %ptr1.i = bitcast i8* %.129022906 to i8**
  %14646 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i2883 = icmp eq i8* %14646, null
  br i1 %tobool.not.i2883, label %pseudostack_free.exit, label %land.lhs.true.i2886

land.lhs.true.i2886:                              ; preds = %if.then.i2859
  %cumulative_size.i2884 = getelementptr inbounds i8, i8* %.129022906, i64 16
  %14647 = bitcast i8* %cumulative_size.i2884 to i64*
  %14648 = load i64, i64* %14647, align 8, !tbaa !391
  %cmp.i2885 = icmp ugt i64 %14648, 16384
  br i1 %cmp.i2885, label %if.then.i2887, label %pseudostack_free.exit

if.then.i2887:                                    ; preds = %land.lhs.true.i2886
  call void @halide_free(i8* null, i8* nonnull %14646) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2859, %land.lhs.true.i2886, %if.then.i2887
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.129022906, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y817", %pseudostack_free.exit
  %.12908 = phi i8* [ %.0, %"end for blur_y.s0.y.y817" ], [ %.12909, %pseudostack_free.exit ]
  %tobool.not.i2861.not = icmp eq i8* %.12908, null
  br i1 %tobool.not.i2861.not, label %call_destructor.exit2864, label %if.then.i2862

if.then.i2862:                                    ; preds = %call_destructor.exit
  %ptr1.i2890 = bitcast i8* %.12908 to i8**
  %14649 = load i8*, i8** %ptr1.i2890, align 8, !tbaa !389
  %tobool.not.i2891 = icmp eq i8* %14649, null
  br i1 %tobool.not.i2891, label %pseudostack_free.exit2899, label %land.lhs.true.i2894

land.lhs.true.i2894:                              ; preds = %if.then.i2862
  %cumulative_size.i2892 = getelementptr inbounds i8, i8* %.12908, i64 16
  %14650 = bitcast i8* %cumulative_size.i2892 to i64*
  %14651 = load i64, i64* %14650, align 8, !tbaa !391
  %cmp.i2893 = icmp ugt i64 %14651, 16384
  br i1 %cmp.i2893, label %if.then.i2895, label %pseudostack_free.exit2899

if.then.i2895:                                    ; preds = %land.lhs.true.i2894
  call void @halide_free(i8* null, i8* nonnull %14649) #16
  br label %pseudostack_free.exit2899

pseudostack_free.exit2899:                        ; preds = %if.then.i2862, %land.lhs.true.i2894, %if.then.i2895
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.12908, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2864

call_destructor.exit2864:                         ; preds = %call_destructor.exit, %pseudostack_free.exit2899
  ret i32 0

then_bb821:                                       ; preds = %pseudostack_alloc.exit2858
  %14652 = alloca i8*, i64 %266, align 32
  %14653 = bitcast i8** %14652 to i16*
  store i8** %14652, i8*** %267, align 8
  br label %"produce read_input823"

"produce read_input823":                          ; preds = %pseudostack_alloc.exit2858, %then_bb821
  %read_input822 = phi i16* [ %14653, %then_bb821 ], [ %14643, %pseudostack_alloc.exit2858 ]
  %a379 = add nsw i32 %blur_y.s0.y.yi.base.s819, %199
  %14654 = icmp sgt i32 %a379, %205
  %a378 = select i1 %14654, i32 %a379, i32 %205
  %b380 = add nsw i32 %a379, 36
  %14655 = icmp sgt i32 %b380, %a378
  %14656 = icmp sgt i32 %a378, %b385
  %a382 = select i1 %14656, i32 %a378, i32 %b385
  %14657 = icmp sgt i32 %b380, %a382
  %a388 = sub i32 %268, %blur_y.s0.y.yi.base.s819
  %14658 = icmp sgt i32 %a388, 0
  br i1 %14658, label %"for read_input.s0.y.rebased830.preheader", label %"end for read_input.s0.y.rebased831", !prof !386

"for read_input.s0.y.rebased830.preheader":       ; preds = %"produce read_input823"
  %14659 = icmp slt i32 %a388, 36
  %a387 = select i1 %14659, i32 %a388, i32 36
  %14660 = add nsw i32 %269, %blur_y.s0.y.yi.base.s819
  %14661 = sext i32 %14660 to i64
  %14662 = zext i32 %a387 to i64
  br label %"for read_input.s0.y.rebased830"

"for read_input.s0.y.rebased830":                 ; preds = %"for read_input.s0.y.rebased830.preheader", %"end for read_input.s0.x.x836"
  %indvars.iv3355 = phi i64 [ 0, %"for read_input.s0.y.rebased830.preheader" ], [ %indvars.iv.next3356, %"end for read_input.s0.x.x836" ]
  %14663 = add nsw i64 %indvars.iv3355, %14661
  %14664 = icmp slt i64 %14663, %524
  %14665 = trunc i64 %14663 to i32
  %a395 = select i1 %14664, i32 %14665, i32 %b398
  %14666 = trunc i64 %indvars.iv3355 to i32
  %14667 = mul i32 %a377, %14666
  %t1654834 = sub i32 %14667, %270
  %14668 = icmp sgt i32 %a395, 0
  %14669 = select i1 %14668, i32 %a395, i32 0
  %14670 = mul nsw i32 %14669, %207
  %t1653833 = sub nsw i32 %14670, %203
  %14671 = insertelement <32 x i32> undef, i32 %t1653833, i32 0
  %14672 = shufflevector <32 x i32> %14671, <32 x i32> undef, <32 x i32> zeroinitializer
  %14673 = sext i32 %t1654834 to i64
  br label %"for read_input.s0.x.x835"

"end for read_input.s0.y.rebased831":             ; preds = %"end for read_input.s0.x.x836", %"produce read_input823"
  %14674 = icmp sgt i32 %t1636, %a379
  %a424 = select i1 %14674, i32 %t1636, i32 %a379
  %14675 = icmp sgt i32 %b380, %a424
  %14676 = select i1 %14675, i32 %a424, i32 %b380
  %14677 = select i1 %14655, i32 %a378, i32 %b380
  %t1655840 = sub nsw i32 %14676, %14677
  %14678 = icmp sgt i32 %t1655840, 0
  br i1 %14678, label %"for read_input.s0.y.rebased845.preheader", label %"end for read_input.s0.y.rebased846", !prof !386

"for read_input.s0.y.rebased845.preheader":       ; preds = %"end for read_input.s0.y.rebased831"
  %14679 = sub i32 %14677, %205
  %14680 = sext i32 %blur_y.s0.y.yi.base.s819 to i64
  %a464 = sub nsw i64 %281, %14680
  %14681 = icmp slt i64 %a464, 36
  %a463 = select i1 %14681, i64 %a464, i64 36
  %14682 = icmp sgt i64 %a463, 0
  %14683 = select i1 %14682, i64 %a463, i64 0
  %14684 = sext i32 %14679 to i64
  %14685 = zext i32 %t1655840 to i64
  br label %"for read_input.s0.y.rebased845"

"for read_input.s0.x.x835":                       ; preds = %"for read_input.s0.y.rebased830", %"for read_input.s0.x.x835"
  %read_input.s0.x.x837 = phi i32 [ %14884, %"for read_input.s0.x.x835" ], [ 0, %"for read_input.s0.y.rebased830" ]
  %14686 = shl nsw i32 %read_input.s0.x.x837, 5
  %a417 = add nsw i32 %271, %14686
  %14687 = icmp sgt i32 %b419, %a417
  %read_input.s0.x.v2.base.s838 = select i1 %14687, i32 %a417, i32 %b419
  %14688 = add nsw i32 %read_input.s0.x.v2.base.s838, -32
  %14689 = insertelement <32 x i32> undef, i32 %14688, i32 0
  %14690 = shufflevector <32 x i32> %14689, <32 x i32> undef, <32 x i32> zeroinitializer
  %a420 = add nsw <32 x i32> %14690, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14691 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14692 = icmp sgt <8 x i32> %274, %14691
  %14693 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14694 = icmp sgt <8 x i32> %274, %14693
  %14695 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14696 = icmp sgt <8 x i32> %274, %14695
  %14697 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14698 = icmp sgt <8 x i32> %274, %14697
  %14699 = select <8 x i1> %14692, <8 x i32> %14691, <8 x i32> %274
  %14700 = select <8 x i1> %14694, <8 x i32> %14693, <8 x i32> %274
  %14701 = select <8 x i1> %14696, <8 x i32> %14695, <8 x i32> %274
  %14702 = select <8 x i1> %14698, <8 x i32> %14697, <8 x i32> %274
  %14703 = icmp sgt <8 x i32> %14699, %276
  %14704 = icmp sgt <8 x i32> %14700, %276
  %14705 = icmp sgt <8 x i32> %14701, %276
  %14706 = icmp sgt <8 x i32> %14702, %276
  %14707 = select <8 x i1> %14703, <8 x i32> %14699, <8 x i32> %276
  %14708 = select <8 x i1> %14704, <8 x i32> %14700, <8 x i32> %276
  %14709 = select <8 x i1> %14705, <8 x i32> %14701, <8 x i32> %276
  %14710 = select <8 x i1> %14706, <8 x i32> %14702, <8 x i32> %276
  %14711 = shufflevector <8 x i32> %14707, <8 x i32> %14708, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14712 = shufflevector <8 x i32> %14709, <8 x i32> %14710, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14713 = shufflevector <16 x i32> %14711, <16 x i32> %14712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14714 = add nsw <32 x i32> %14713, %14672
  %14715 = extractelement <32 x i32> %14714, i32 0
  %14716 = sext i32 %14715 to i64
  %14717 = getelementptr inbounds i16, i16* %261, i64 %14716
  %14718 = load i16, i16* %14717, align 2, !tbaa !393
  %14719 = insertelement <32 x i16> undef, i16 %14718, i32 0
  %14720 = extractelement <32 x i32> %14714, i32 1
  %14721 = sext i32 %14720 to i64
  %14722 = getelementptr inbounds i16, i16* %261, i64 %14721
  %14723 = load i16, i16* %14722, align 2, !tbaa !393
  %14724 = insertelement <32 x i16> %14719, i16 %14723, i32 1
  %14725 = extractelement <32 x i32> %14714, i32 2
  %14726 = sext i32 %14725 to i64
  %14727 = getelementptr inbounds i16, i16* %261, i64 %14726
  %14728 = load i16, i16* %14727, align 2, !tbaa !393
  %14729 = insertelement <32 x i16> %14724, i16 %14728, i32 2
  %14730 = extractelement <32 x i32> %14714, i32 3
  %14731 = sext i32 %14730 to i64
  %14732 = getelementptr inbounds i16, i16* %261, i64 %14731
  %14733 = load i16, i16* %14732, align 2, !tbaa !393
  %14734 = insertelement <32 x i16> %14729, i16 %14733, i32 3
  %14735 = extractelement <32 x i32> %14714, i32 4
  %14736 = sext i32 %14735 to i64
  %14737 = getelementptr inbounds i16, i16* %261, i64 %14736
  %14738 = load i16, i16* %14737, align 2, !tbaa !393
  %14739 = insertelement <32 x i16> %14734, i16 %14738, i32 4
  %14740 = extractelement <32 x i32> %14714, i32 5
  %14741 = sext i32 %14740 to i64
  %14742 = getelementptr inbounds i16, i16* %261, i64 %14741
  %14743 = load i16, i16* %14742, align 2, !tbaa !393
  %14744 = insertelement <32 x i16> %14739, i16 %14743, i32 5
  %14745 = extractelement <32 x i32> %14714, i32 6
  %14746 = sext i32 %14745 to i64
  %14747 = getelementptr inbounds i16, i16* %261, i64 %14746
  %14748 = load i16, i16* %14747, align 2, !tbaa !393
  %14749 = insertelement <32 x i16> %14744, i16 %14748, i32 6
  %14750 = extractelement <32 x i32> %14714, i32 7
  %14751 = sext i32 %14750 to i64
  %14752 = getelementptr inbounds i16, i16* %261, i64 %14751
  %14753 = load i16, i16* %14752, align 2, !tbaa !393
  %14754 = insertelement <32 x i16> %14749, i16 %14753, i32 7
  %14755 = extractelement <32 x i32> %14714, i32 8
  %14756 = sext i32 %14755 to i64
  %14757 = getelementptr inbounds i16, i16* %261, i64 %14756
  %14758 = load i16, i16* %14757, align 2, !tbaa !393
  %14759 = insertelement <32 x i16> %14754, i16 %14758, i32 8
  %14760 = extractelement <32 x i32> %14714, i32 9
  %14761 = sext i32 %14760 to i64
  %14762 = getelementptr inbounds i16, i16* %261, i64 %14761
  %14763 = load i16, i16* %14762, align 2, !tbaa !393
  %14764 = insertelement <32 x i16> %14759, i16 %14763, i32 9
  %14765 = extractelement <32 x i32> %14714, i32 10
  %14766 = sext i32 %14765 to i64
  %14767 = getelementptr inbounds i16, i16* %261, i64 %14766
  %14768 = load i16, i16* %14767, align 2, !tbaa !393
  %14769 = insertelement <32 x i16> %14764, i16 %14768, i32 10
  %14770 = extractelement <32 x i32> %14714, i32 11
  %14771 = sext i32 %14770 to i64
  %14772 = getelementptr inbounds i16, i16* %261, i64 %14771
  %14773 = load i16, i16* %14772, align 2, !tbaa !393
  %14774 = insertelement <32 x i16> %14769, i16 %14773, i32 11
  %14775 = extractelement <32 x i32> %14714, i32 12
  %14776 = sext i32 %14775 to i64
  %14777 = getelementptr inbounds i16, i16* %261, i64 %14776
  %14778 = load i16, i16* %14777, align 2, !tbaa !393
  %14779 = insertelement <32 x i16> %14774, i16 %14778, i32 12
  %14780 = extractelement <32 x i32> %14714, i32 13
  %14781 = sext i32 %14780 to i64
  %14782 = getelementptr inbounds i16, i16* %261, i64 %14781
  %14783 = load i16, i16* %14782, align 2, !tbaa !393
  %14784 = insertelement <32 x i16> %14779, i16 %14783, i32 13
  %14785 = extractelement <32 x i32> %14714, i32 14
  %14786 = sext i32 %14785 to i64
  %14787 = getelementptr inbounds i16, i16* %261, i64 %14786
  %14788 = load i16, i16* %14787, align 2, !tbaa !393
  %14789 = insertelement <32 x i16> %14784, i16 %14788, i32 14
  %14790 = extractelement <32 x i32> %14714, i32 15
  %14791 = sext i32 %14790 to i64
  %14792 = getelementptr inbounds i16, i16* %261, i64 %14791
  %14793 = load i16, i16* %14792, align 2, !tbaa !393
  %14794 = insertelement <32 x i16> %14789, i16 %14793, i32 15
  %14795 = extractelement <32 x i32> %14714, i32 16
  %14796 = sext i32 %14795 to i64
  %14797 = getelementptr inbounds i16, i16* %261, i64 %14796
  %14798 = load i16, i16* %14797, align 2, !tbaa !393
  %14799 = insertelement <32 x i16> %14794, i16 %14798, i32 16
  %14800 = extractelement <32 x i32> %14714, i32 17
  %14801 = sext i32 %14800 to i64
  %14802 = getelementptr inbounds i16, i16* %261, i64 %14801
  %14803 = load i16, i16* %14802, align 2, !tbaa !393
  %14804 = insertelement <32 x i16> %14799, i16 %14803, i32 17
  %14805 = extractelement <32 x i32> %14714, i32 18
  %14806 = sext i32 %14805 to i64
  %14807 = getelementptr inbounds i16, i16* %261, i64 %14806
  %14808 = load i16, i16* %14807, align 2, !tbaa !393
  %14809 = insertelement <32 x i16> %14804, i16 %14808, i32 18
  %14810 = extractelement <32 x i32> %14714, i32 19
  %14811 = sext i32 %14810 to i64
  %14812 = getelementptr inbounds i16, i16* %261, i64 %14811
  %14813 = load i16, i16* %14812, align 2, !tbaa !393
  %14814 = insertelement <32 x i16> %14809, i16 %14813, i32 19
  %14815 = extractelement <32 x i32> %14714, i32 20
  %14816 = sext i32 %14815 to i64
  %14817 = getelementptr inbounds i16, i16* %261, i64 %14816
  %14818 = load i16, i16* %14817, align 2, !tbaa !393
  %14819 = insertelement <32 x i16> %14814, i16 %14818, i32 20
  %14820 = extractelement <32 x i32> %14714, i32 21
  %14821 = sext i32 %14820 to i64
  %14822 = getelementptr inbounds i16, i16* %261, i64 %14821
  %14823 = load i16, i16* %14822, align 2, !tbaa !393
  %14824 = insertelement <32 x i16> %14819, i16 %14823, i32 21
  %14825 = extractelement <32 x i32> %14714, i32 22
  %14826 = sext i32 %14825 to i64
  %14827 = getelementptr inbounds i16, i16* %261, i64 %14826
  %14828 = load i16, i16* %14827, align 2, !tbaa !393
  %14829 = insertelement <32 x i16> %14824, i16 %14828, i32 22
  %14830 = extractelement <32 x i32> %14714, i32 23
  %14831 = sext i32 %14830 to i64
  %14832 = getelementptr inbounds i16, i16* %261, i64 %14831
  %14833 = load i16, i16* %14832, align 2, !tbaa !393
  %14834 = insertelement <32 x i16> %14829, i16 %14833, i32 23
  %14835 = extractelement <32 x i32> %14714, i32 24
  %14836 = sext i32 %14835 to i64
  %14837 = getelementptr inbounds i16, i16* %261, i64 %14836
  %14838 = load i16, i16* %14837, align 2, !tbaa !393
  %14839 = insertelement <32 x i16> %14834, i16 %14838, i32 24
  %14840 = extractelement <32 x i32> %14714, i32 25
  %14841 = sext i32 %14840 to i64
  %14842 = getelementptr inbounds i16, i16* %261, i64 %14841
  %14843 = load i16, i16* %14842, align 2, !tbaa !393
  %14844 = insertelement <32 x i16> %14839, i16 %14843, i32 25
  %14845 = extractelement <32 x i32> %14714, i32 26
  %14846 = sext i32 %14845 to i64
  %14847 = getelementptr inbounds i16, i16* %261, i64 %14846
  %14848 = load i16, i16* %14847, align 2, !tbaa !393
  %14849 = insertelement <32 x i16> %14844, i16 %14848, i32 26
  %14850 = extractelement <32 x i32> %14714, i32 27
  %14851 = sext i32 %14850 to i64
  %14852 = getelementptr inbounds i16, i16* %261, i64 %14851
  %14853 = load i16, i16* %14852, align 2, !tbaa !393
  %14854 = insertelement <32 x i16> %14849, i16 %14853, i32 27
  %14855 = extractelement <32 x i32> %14714, i32 28
  %14856 = sext i32 %14855 to i64
  %14857 = getelementptr inbounds i16, i16* %261, i64 %14856
  %14858 = load i16, i16* %14857, align 2, !tbaa !393
  %14859 = insertelement <32 x i16> %14854, i16 %14858, i32 28
  %14860 = extractelement <32 x i32> %14714, i32 29
  %14861 = sext i32 %14860 to i64
  %14862 = getelementptr inbounds i16, i16* %261, i64 %14861
  %14863 = load i16, i16* %14862, align 2, !tbaa !393
  %14864 = insertelement <32 x i16> %14859, i16 %14863, i32 29
  %14865 = extractelement <32 x i32> %14714, i32 30
  %14866 = sext i32 %14865 to i64
  %14867 = getelementptr inbounds i16, i16* %261, i64 %14866
  %14868 = load i16, i16* %14867, align 2, !tbaa !393
  %14869 = insertelement <32 x i16> %14864, i16 %14868, i32 30
  %14870 = extractelement <32 x i32> %14714, i32 31
  %14871 = sext i32 %14870 to i64
  %14872 = getelementptr inbounds i16, i16* %261, i64 %14871
  %14873 = load i16, i16* %14872, align 2, !tbaa !393
  %14874 = insertelement <32 x i16> %14869, i16 %14873, i32 31
  %14875 = shufflevector <32 x i16> %14874, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14876 = sext i32 %read_input.s0.x.v2.base.s838 to i64
  %14877 = add nsw i64 %14876, %14673
  %14878 = getelementptr inbounds i16, i16* %read_input822, i64 %14877
  %14879 = getelementptr inbounds i16, i16* %14878, i64 -32
  %14880 = bitcast i16* %14879 to <16 x i16>*
  store <16 x i16> %14875, <16 x i16>* %14880, align 2, !tbaa !396
  %14881 = shufflevector <32 x i16> %14874, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14882 = getelementptr inbounds i16, i16* %14878, i64 -16
  %14883 = bitcast i16* %14882 to <16 x i16>*
  store <16 x i16> %14881, <16 x i16>* %14883, align 2, !tbaa !396
  %14884 = add nuw nsw i32 %read_input.s0.x.x837, 1
  %.not2689 = icmp eq i32 %14884, %215
  br i1 %.not2689, label %"end for read_input.s0.x.x836", label %"for read_input.s0.x.x835"

"end for read_input.s0.x.x836":                   ; preds = %"for read_input.s0.x.x835"
  %indvars.iv.next3356 = add nuw nsw i64 %indvars.iv3355, 1
  %.not2688 = icmp eq i64 %indvars.iv.next3356, %14662
  br i1 %.not2688, label %"end for read_input.s0.y.rebased831", label %"for read_input.s0.y.rebased830"

"for read_input.s0.y.rebased845":                 ; preds = %"for read_input.s0.y.rebased845.preheader", %"end for read_input.s0.x.x.rebased861"
  %indvars.iv3361 = phi i64 [ 0, %"for read_input.s0.y.rebased845.preheader" ], [ %indvars.iv.next3362, %"end for read_input.s0.x.x.rebased861" ]
  %14885 = add nsw i64 %indvars.iv3361, %14684
  %14886 = mul nsw i64 %14885, %528
  %14887 = sub nsw i64 %14886, %529
  br i1 %278, label %"for read_input.s0.x.x849.preheader", label %"end for read_input.s0.x.x850", !prof !386

"for read_input.s0.x.x849.preheader":             ; preds = %"for read_input.s0.y.rebased845"
  %14888 = trunc i64 %14887 to i32
  %14889 = insertelement <32 x i32> undef, i32 %14888, i32 0
  %14890 = shufflevector <32 x i32> %14889, <32 x i32> undef, <32 x i32> zeroinitializer
  %14891 = add nuw nsw i64 %14683, %indvars.iv3361
  %14892 = mul nsw i64 %14891, %282
  %14893 = sub i64 %14892, %283
  br label %"for read_input.s0.x.x849"

"end for read_input.s0.y.rebased846":             ; preds = %"end for read_input.s0.x.x.rebased861", %"end for read_input.s0.y.rebased831"
  %a524 = add nsw i32 %blur_y.s0.y.yi.base.s819, %286
  %14894 = icmp slt i32 %a524, 0
  %a523 = select i1 %14894, i32 %a524, i32 0
  %14895 = icmp sgt i32 %a523, -36
  br i1 %14895, label %"for read_input.s0.y.rebased869.preheader", label %"end for read_input.s0.y.rebased870", !prof !386

"for read_input.s0.y.rebased869.preheader":       ; preds = %"end for read_input.s0.y.rebased846"
  %14896 = select i1 %14657, i32 %a382, i32 %b380
  %14897 = sub nsw i32 %14896, %205
  %14898 = sext i32 %blur_y.s0.y.yi.base.s819 to i64
  %a548 = sub nsw i64 %288, %14898
  %14899 = icmp slt i64 %a548, 36
  %a547 = select i1 %14899, i64 %a548, i64 36
  %14900 = icmp sgt i64 %a547, 0
  %14901 = select i1 %14900, i64 %a547, i64 0
  %a523.op = add nsw i32 %a523, 35
  %14902 = zext i32 %a523.op to i64
  br label %"for read_input.s0.y.rebased869"

"for read_input.s0.x.x849":                       ; preds = %"for read_input.s0.x.x849.preheader", %"for read_input.s0.x.x849"
  %read_input.s0.x.x851 = phi i32 [ %15101, %"for read_input.s0.x.x849" ], [ 0, %"for read_input.s0.x.x849.preheader" ]
  %14903 = shl nsw i32 %read_input.s0.x.x851, 5
  %a459 = add nsw i32 %271, %14903
  %14904 = icmp sgt i32 %b419, %a459
  %read_input.s0.x.v2.base.s852 = select i1 %14904, i32 %a459, i32 %b419
  %14905 = add nsw i32 %read_input.s0.x.v2.base.s852, -32
  %14906 = insertelement <32 x i32> undef, i32 %14905, i32 0
  %14907 = shufflevector <32 x i32> %14906, <32 x i32> undef, <32 x i32> zeroinitializer
  %a462 = add nsw <32 x i32> %14907, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14908 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14909 = icmp sgt <8 x i32> %274, %14908
  %14910 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14911 = icmp sgt <8 x i32> %274, %14910
  %14912 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14913 = icmp sgt <8 x i32> %274, %14912
  %14914 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14915 = icmp sgt <8 x i32> %274, %14914
  %14916 = select <8 x i1> %14909, <8 x i32> %14908, <8 x i32> %274
  %14917 = select <8 x i1> %14911, <8 x i32> %14910, <8 x i32> %274
  %14918 = select <8 x i1> %14913, <8 x i32> %14912, <8 x i32> %274
  %14919 = select <8 x i1> %14915, <8 x i32> %14914, <8 x i32> %274
  %14920 = icmp sgt <8 x i32> %14916, %276
  %14921 = icmp sgt <8 x i32> %14917, %276
  %14922 = icmp sgt <8 x i32> %14918, %276
  %14923 = icmp sgt <8 x i32> %14919, %276
  %14924 = select <8 x i1> %14920, <8 x i32> %14916, <8 x i32> %276
  %14925 = select <8 x i1> %14921, <8 x i32> %14917, <8 x i32> %276
  %14926 = select <8 x i1> %14922, <8 x i32> %14918, <8 x i32> %276
  %14927 = select <8 x i1> %14923, <8 x i32> %14919, <8 x i32> %276
  %14928 = shufflevector <8 x i32> %14924, <8 x i32> %14925, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14929 = shufflevector <8 x i32> %14926, <8 x i32> %14927, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14930 = shufflevector <16 x i32> %14928, <16 x i32> %14929, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14931 = add nsw <32 x i32> %14930, %14890
  %14932 = extractelement <32 x i32> %14931, i32 0
  %14933 = sext i32 %14932 to i64
  %14934 = getelementptr inbounds i16, i16* %261, i64 %14933
  %14935 = load i16, i16* %14934, align 2, !tbaa !393
  %14936 = insertelement <32 x i16> undef, i16 %14935, i32 0
  %14937 = extractelement <32 x i32> %14931, i32 1
  %14938 = sext i32 %14937 to i64
  %14939 = getelementptr inbounds i16, i16* %261, i64 %14938
  %14940 = load i16, i16* %14939, align 2, !tbaa !393
  %14941 = insertelement <32 x i16> %14936, i16 %14940, i32 1
  %14942 = extractelement <32 x i32> %14931, i32 2
  %14943 = sext i32 %14942 to i64
  %14944 = getelementptr inbounds i16, i16* %261, i64 %14943
  %14945 = load i16, i16* %14944, align 2, !tbaa !393
  %14946 = insertelement <32 x i16> %14941, i16 %14945, i32 2
  %14947 = extractelement <32 x i32> %14931, i32 3
  %14948 = sext i32 %14947 to i64
  %14949 = getelementptr inbounds i16, i16* %261, i64 %14948
  %14950 = load i16, i16* %14949, align 2, !tbaa !393
  %14951 = insertelement <32 x i16> %14946, i16 %14950, i32 3
  %14952 = extractelement <32 x i32> %14931, i32 4
  %14953 = sext i32 %14952 to i64
  %14954 = getelementptr inbounds i16, i16* %261, i64 %14953
  %14955 = load i16, i16* %14954, align 2, !tbaa !393
  %14956 = insertelement <32 x i16> %14951, i16 %14955, i32 4
  %14957 = extractelement <32 x i32> %14931, i32 5
  %14958 = sext i32 %14957 to i64
  %14959 = getelementptr inbounds i16, i16* %261, i64 %14958
  %14960 = load i16, i16* %14959, align 2, !tbaa !393
  %14961 = insertelement <32 x i16> %14956, i16 %14960, i32 5
  %14962 = extractelement <32 x i32> %14931, i32 6
  %14963 = sext i32 %14962 to i64
  %14964 = getelementptr inbounds i16, i16* %261, i64 %14963
  %14965 = load i16, i16* %14964, align 2, !tbaa !393
  %14966 = insertelement <32 x i16> %14961, i16 %14965, i32 6
  %14967 = extractelement <32 x i32> %14931, i32 7
  %14968 = sext i32 %14967 to i64
  %14969 = getelementptr inbounds i16, i16* %261, i64 %14968
  %14970 = load i16, i16* %14969, align 2, !tbaa !393
  %14971 = insertelement <32 x i16> %14966, i16 %14970, i32 7
  %14972 = extractelement <32 x i32> %14931, i32 8
  %14973 = sext i32 %14972 to i64
  %14974 = getelementptr inbounds i16, i16* %261, i64 %14973
  %14975 = load i16, i16* %14974, align 2, !tbaa !393
  %14976 = insertelement <32 x i16> %14971, i16 %14975, i32 8
  %14977 = extractelement <32 x i32> %14931, i32 9
  %14978 = sext i32 %14977 to i64
  %14979 = getelementptr inbounds i16, i16* %261, i64 %14978
  %14980 = load i16, i16* %14979, align 2, !tbaa !393
  %14981 = insertelement <32 x i16> %14976, i16 %14980, i32 9
  %14982 = extractelement <32 x i32> %14931, i32 10
  %14983 = sext i32 %14982 to i64
  %14984 = getelementptr inbounds i16, i16* %261, i64 %14983
  %14985 = load i16, i16* %14984, align 2, !tbaa !393
  %14986 = insertelement <32 x i16> %14981, i16 %14985, i32 10
  %14987 = extractelement <32 x i32> %14931, i32 11
  %14988 = sext i32 %14987 to i64
  %14989 = getelementptr inbounds i16, i16* %261, i64 %14988
  %14990 = load i16, i16* %14989, align 2, !tbaa !393
  %14991 = insertelement <32 x i16> %14986, i16 %14990, i32 11
  %14992 = extractelement <32 x i32> %14931, i32 12
  %14993 = sext i32 %14992 to i64
  %14994 = getelementptr inbounds i16, i16* %261, i64 %14993
  %14995 = load i16, i16* %14994, align 2, !tbaa !393
  %14996 = insertelement <32 x i16> %14991, i16 %14995, i32 12
  %14997 = extractelement <32 x i32> %14931, i32 13
  %14998 = sext i32 %14997 to i64
  %14999 = getelementptr inbounds i16, i16* %261, i64 %14998
  %15000 = load i16, i16* %14999, align 2, !tbaa !393
  %15001 = insertelement <32 x i16> %14996, i16 %15000, i32 13
  %15002 = extractelement <32 x i32> %14931, i32 14
  %15003 = sext i32 %15002 to i64
  %15004 = getelementptr inbounds i16, i16* %261, i64 %15003
  %15005 = load i16, i16* %15004, align 2, !tbaa !393
  %15006 = insertelement <32 x i16> %15001, i16 %15005, i32 14
  %15007 = extractelement <32 x i32> %14931, i32 15
  %15008 = sext i32 %15007 to i64
  %15009 = getelementptr inbounds i16, i16* %261, i64 %15008
  %15010 = load i16, i16* %15009, align 2, !tbaa !393
  %15011 = insertelement <32 x i16> %15006, i16 %15010, i32 15
  %15012 = extractelement <32 x i32> %14931, i32 16
  %15013 = sext i32 %15012 to i64
  %15014 = getelementptr inbounds i16, i16* %261, i64 %15013
  %15015 = load i16, i16* %15014, align 2, !tbaa !393
  %15016 = insertelement <32 x i16> %15011, i16 %15015, i32 16
  %15017 = extractelement <32 x i32> %14931, i32 17
  %15018 = sext i32 %15017 to i64
  %15019 = getelementptr inbounds i16, i16* %261, i64 %15018
  %15020 = load i16, i16* %15019, align 2, !tbaa !393
  %15021 = insertelement <32 x i16> %15016, i16 %15020, i32 17
  %15022 = extractelement <32 x i32> %14931, i32 18
  %15023 = sext i32 %15022 to i64
  %15024 = getelementptr inbounds i16, i16* %261, i64 %15023
  %15025 = load i16, i16* %15024, align 2, !tbaa !393
  %15026 = insertelement <32 x i16> %15021, i16 %15025, i32 18
  %15027 = extractelement <32 x i32> %14931, i32 19
  %15028 = sext i32 %15027 to i64
  %15029 = getelementptr inbounds i16, i16* %261, i64 %15028
  %15030 = load i16, i16* %15029, align 2, !tbaa !393
  %15031 = insertelement <32 x i16> %15026, i16 %15030, i32 19
  %15032 = extractelement <32 x i32> %14931, i32 20
  %15033 = sext i32 %15032 to i64
  %15034 = getelementptr inbounds i16, i16* %261, i64 %15033
  %15035 = load i16, i16* %15034, align 2, !tbaa !393
  %15036 = insertelement <32 x i16> %15031, i16 %15035, i32 20
  %15037 = extractelement <32 x i32> %14931, i32 21
  %15038 = sext i32 %15037 to i64
  %15039 = getelementptr inbounds i16, i16* %261, i64 %15038
  %15040 = load i16, i16* %15039, align 2, !tbaa !393
  %15041 = insertelement <32 x i16> %15036, i16 %15040, i32 21
  %15042 = extractelement <32 x i32> %14931, i32 22
  %15043 = sext i32 %15042 to i64
  %15044 = getelementptr inbounds i16, i16* %261, i64 %15043
  %15045 = load i16, i16* %15044, align 2, !tbaa !393
  %15046 = insertelement <32 x i16> %15041, i16 %15045, i32 22
  %15047 = extractelement <32 x i32> %14931, i32 23
  %15048 = sext i32 %15047 to i64
  %15049 = getelementptr inbounds i16, i16* %261, i64 %15048
  %15050 = load i16, i16* %15049, align 2, !tbaa !393
  %15051 = insertelement <32 x i16> %15046, i16 %15050, i32 23
  %15052 = extractelement <32 x i32> %14931, i32 24
  %15053 = sext i32 %15052 to i64
  %15054 = getelementptr inbounds i16, i16* %261, i64 %15053
  %15055 = load i16, i16* %15054, align 2, !tbaa !393
  %15056 = insertelement <32 x i16> %15051, i16 %15055, i32 24
  %15057 = extractelement <32 x i32> %14931, i32 25
  %15058 = sext i32 %15057 to i64
  %15059 = getelementptr inbounds i16, i16* %261, i64 %15058
  %15060 = load i16, i16* %15059, align 2, !tbaa !393
  %15061 = insertelement <32 x i16> %15056, i16 %15060, i32 25
  %15062 = extractelement <32 x i32> %14931, i32 26
  %15063 = sext i32 %15062 to i64
  %15064 = getelementptr inbounds i16, i16* %261, i64 %15063
  %15065 = load i16, i16* %15064, align 2, !tbaa !393
  %15066 = insertelement <32 x i16> %15061, i16 %15065, i32 26
  %15067 = extractelement <32 x i32> %14931, i32 27
  %15068 = sext i32 %15067 to i64
  %15069 = getelementptr inbounds i16, i16* %261, i64 %15068
  %15070 = load i16, i16* %15069, align 2, !tbaa !393
  %15071 = insertelement <32 x i16> %15066, i16 %15070, i32 27
  %15072 = extractelement <32 x i32> %14931, i32 28
  %15073 = sext i32 %15072 to i64
  %15074 = getelementptr inbounds i16, i16* %261, i64 %15073
  %15075 = load i16, i16* %15074, align 2, !tbaa !393
  %15076 = insertelement <32 x i16> %15071, i16 %15075, i32 28
  %15077 = extractelement <32 x i32> %14931, i32 29
  %15078 = sext i32 %15077 to i64
  %15079 = getelementptr inbounds i16, i16* %261, i64 %15078
  %15080 = load i16, i16* %15079, align 2, !tbaa !393
  %15081 = insertelement <32 x i16> %15076, i16 %15080, i32 29
  %15082 = extractelement <32 x i32> %14931, i32 30
  %15083 = sext i32 %15082 to i64
  %15084 = getelementptr inbounds i16, i16* %261, i64 %15083
  %15085 = load i16, i16* %15084, align 2, !tbaa !393
  %15086 = insertelement <32 x i16> %15081, i16 %15085, i32 30
  %15087 = extractelement <32 x i32> %14931, i32 31
  %15088 = sext i32 %15087 to i64
  %15089 = getelementptr inbounds i16, i16* %261, i64 %15088
  %15090 = load i16, i16* %15089, align 2, !tbaa !393
  %15091 = insertelement <32 x i16> %15086, i16 %15090, i32 31
  %15092 = shufflevector <32 x i16> %15091, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15093 = sext i32 %read_input.s0.x.v2.base.s852 to i64
  %15094 = add nsw i64 %14893, %15093
  %15095 = getelementptr inbounds i16, i16* %read_input822, i64 %15094
  %15096 = getelementptr inbounds i16, i16* %15095, i64 -32
  %15097 = bitcast i16* %15096 to <16 x i16>*
  store <16 x i16> %15092, <16 x i16>* %15097, align 2, !tbaa !396
  %15098 = shufflevector <32 x i16> %15091, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15099 = getelementptr inbounds i16, i16* %15095, i64 -16
  %15100 = bitcast i16* %15099 to <16 x i16>*
  store <16 x i16> %15098, <16 x i16>* %15100, align 2, !tbaa !396
  %15101 = add nuw nsw i32 %read_input.s0.x.x851, 1
  %.not2686 = icmp eq i32 %15101, %t1642
  br i1 %.not2686, label %"end for read_input.s0.x.x850", label %"for read_input.s0.x.x849"

"end for read_input.s0.x.x850":                   ; preds = %"for read_input.s0.x.x849", %"for read_input.s0.y.rebased845"
  br i1 %284, label %"for read_input.s0.x.x.rebased855.preheader", label %"end for read_input.s0.x.x.rebased856", !prof !386

"for read_input.s0.x.x.rebased855.preheader":     ; preds = %"end for read_input.s0.x.x850"
  %15102 = add nuw nsw i64 %14683, %indvars.iv3361
  %15103 = mul nsw i64 %15102, %282
  %15104 = sub i64 %15103, %283
  br i1 %532, label %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased855"

"for read_input.s0.x.x.rebased855":               ; preds = %"for read_input.s0.x.x.rebased855.preheader", %"for read_input.s0.x.x.rebased855"
  %indvars.iv3358 = phi i64 [ %indvars.iv.next3359.3, %"for read_input.s0.x.x.rebased855" ], [ 0, %"for read_input.s0.x.x.rebased855.preheader" ]
  %niter3632 = phi i64 [ %niter3632.nsub.3, %"for read_input.s0.x.x.rebased855" ], [ %unroll_iter3631, %"for read_input.s0.x.x.rebased855.preheader" ]
  %15105 = add nuw nsw i64 %indvars.iv3358, %525
  %15106 = shl nsw i64 %15105, 5
  %15107 = add nsw i64 %15106, %526
  %15108 = add nsw i64 %15107, %14887
  %15109 = getelementptr inbounds i16, i16* %261, i64 %15108
  %15110 = getelementptr inbounds i16, i16* %15109, i64 -32
  %15111 = bitcast i16* %15110 to <16 x i16>*
  %15112 = load <16 x i16>, <16 x i16>* %15111, align 2, !tbaa !393
  %15113 = getelementptr inbounds i16, i16* %15109, i64 -16
  %15114 = bitcast i16* %15113 to <16 x i16>*
  %15115 = load <16 x i16>, <16 x i16>* %15114, align 2, !tbaa !393
  %15116 = add nsw i64 %15104, %15107
  %15117 = getelementptr inbounds i16, i16* %read_input822, i64 %15116
  %15118 = getelementptr inbounds i16, i16* %15117, i64 -32
  %15119 = bitcast i16* %15118 to <16 x i16>*
  store <16 x i16> %15112, <16 x i16>* %15119, align 2, !tbaa !396
  %15120 = getelementptr inbounds i16, i16* %15117, i64 -16
  %15121 = bitcast i16* %15120 to <16 x i16>*
  store <16 x i16> %15115, <16 x i16>* %15121, align 2, !tbaa !396
  %indvars.iv.next3359 = or i64 %indvars.iv3358, 1
  %15122 = add nuw nsw i64 %indvars.iv.next3359, %525
  %15123 = shl nsw i64 %15122, 5
  %15124 = add nsw i64 %15123, %526
  %15125 = add nsw i64 %15124, %14887
  %15126 = getelementptr inbounds i16, i16* %261, i64 %15125
  %15127 = getelementptr inbounds i16, i16* %15126, i64 -32
  %15128 = bitcast i16* %15127 to <16 x i16>*
  %15129 = load <16 x i16>, <16 x i16>* %15128, align 2, !tbaa !393
  %15130 = getelementptr inbounds i16, i16* %15126, i64 -16
  %15131 = bitcast i16* %15130 to <16 x i16>*
  %15132 = load <16 x i16>, <16 x i16>* %15131, align 2, !tbaa !393
  %15133 = add nsw i64 %15104, %15124
  %15134 = getelementptr inbounds i16, i16* %read_input822, i64 %15133
  %15135 = getelementptr inbounds i16, i16* %15134, i64 -32
  %15136 = bitcast i16* %15135 to <16 x i16>*
  store <16 x i16> %15129, <16 x i16>* %15136, align 2, !tbaa !396
  %15137 = getelementptr inbounds i16, i16* %15134, i64 -16
  %15138 = bitcast i16* %15137 to <16 x i16>*
  store <16 x i16> %15132, <16 x i16>* %15138, align 2, !tbaa !396
  %indvars.iv.next3359.1 = or i64 %indvars.iv3358, 2
  %15139 = add nuw nsw i64 %indvars.iv.next3359.1, %525
  %15140 = shl nsw i64 %15139, 5
  %15141 = add nsw i64 %15140, %526
  %15142 = add nsw i64 %15141, %14887
  %15143 = getelementptr inbounds i16, i16* %261, i64 %15142
  %15144 = getelementptr inbounds i16, i16* %15143, i64 -32
  %15145 = bitcast i16* %15144 to <16 x i16>*
  %15146 = load <16 x i16>, <16 x i16>* %15145, align 2, !tbaa !393
  %15147 = getelementptr inbounds i16, i16* %15143, i64 -16
  %15148 = bitcast i16* %15147 to <16 x i16>*
  %15149 = load <16 x i16>, <16 x i16>* %15148, align 2, !tbaa !393
  %15150 = add nsw i64 %15104, %15141
  %15151 = getelementptr inbounds i16, i16* %read_input822, i64 %15150
  %15152 = getelementptr inbounds i16, i16* %15151, i64 -32
  %15153 = bitcast i16* %15152 to <16 x i16>*
  store <16 x i16> %15146, <16 x i16>* %15153, align 2, !tbaa !396
  %15154 = getelementptr inbounds i16, i16* %15151, i64 -16
  %15155 = bitcast i16* %15154 to <16 x i16>*
  store <16 x i16> %15149, <16 x i16>* %15155, align 2, !tbaa !396
  %indvars.iv.next3359.2 = or i64 %indvars.iv3358, 3
  %15156 = add nuw nsw i64 %indvars.iv.next3359.2, %525
  %15157 = shl nsw i64 %15156, 5
  %15158 = add nsw i64 %15157, %526
  %15159 = add nsw i64 %15158, %14887
  %15160 = getelementptr inbounds i16, i16* %261, i64 %15159
  %15161 = getelementptr inbounds i16, i16* %15160, i64 -32
  %15162 = bitcast i16* %15161 to <16 x i16>*
  %15163 = load <16 x i16>, <16 x i16>* %15162, align 2, !tbaa !393
  %15164 = getelementptr inbounds i16, i16* %15160, i64 -16
  %15165 = bitcast i16* %15164 to <16 x i16>*
  %15166 = load <16 x i16>, <16 x i16>* %15165, align 2, !tbaa !393
  %15167 = add nsw i64 %15104, %15158
  %15168 = getelementptr inbounds i16, i16* %read_input822, i64 %15167
  %15169 = getelementptr inbounds i16, i16* %15168, i64 -32
  %15170 = bitcast i16* %15169 to <16 x i16>*
  store <16 x i16> %15163, <16 x i16>* %15170, align 2, !tbaa !396
  %15171 = getelementptr inbounds i16, i16* %15168, i64 -16
  %15172 = bitcast i16* %15171 to <16 x i16>*
  store <16 x i16> %15166, <16 x i16>* %15172, align 2, !tbaa !396
  %indvars.iv.next3359.3 = add nuw nsw i64 %indvars.iv3358, 4
  %niter3632.nsub.3 = add i64 %niter3632, -4
  %niter3632.ncmp.3 = icmp eq i64 %niter3632.nsub.3, 0
  br i1 %niter3632.ncmp.3, label %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased855"

"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased855", %"for read_input.s0.x.x.rebased855.preheader"
  %indvars.iv3358.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased855.preheader" ], [ %indvars.iv.next3359.3, %"for read_input.s0.x.x.rebased855" ]
  br i1 %lcmp.mod3630.not, label %"end for read_input.s0.x.x.rebased856", label %"for read_input.s0.x.x.rebased855.epil"

"for read_input.s0.x.x.rebased855.epil":          ; preds = %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased855.epil"
  %indvars.iv3358.epil = phi i64 [ %indvars.iv.next3359.epil, %"for read_input.s0.x.x.rebased855.epil" ], [ %indvars.iv3358.unr, %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa" ]
  %epil.iter3629 = phi i64 [ %epil.iter3629.sub, %"for read_input.s0.x.x.rebased855.epil" ], [ %xtraiter3628, %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa" ]
  %15173 = add nuw nsw i64 %indvars.iv3358.epil, %525
  %15174 = shl nsw i64 %15173, 5
  %15175 = add nsw i64 %15174, %526
  %15176 = add nsw i64 %15175, %14887
  %15177 = getelementptr inbounds i16, i16* %261, i64 %15176
  %15178 = getelementptr inbounds i16, i16* %15177, i64 -32
  %15179 = bitcast i16* %15178 to <16 x i16>*
  %15180 = load <16 x i16>, <16 x i16>* %15179, align 2, !tbaa !393
  %15181 = getelementptr inbounds i16, i16* %15177, i64 -16
  %15182 = bitcast i16* %15181 to <16 x i16>*
  %15183 = load <16 x i16>, <16 x i16>* %15182, align 2, !tbaa !393
  %15184 = add nsw i64 %15104, %15175
  %15185 = getelementptr inbounds i16, i16* %read_input822, i64 %15184
  %15186 = getelementptr inbounds i16, i16* %15185, i64 -32
  %15187 = bitcast i16* %15186 to <16 x i16>*
  store <16 x i16> %15180, <16 x i16>* %15187, align 2, !tbaa !396
  %15188 = getelementptr inbounds i16, i16* %15185, i64 -16
  %15189 = bitcast i16* %15188 to <16 x i16>*
  store <16 x i16> %15183, <16 x i16>* %15189, align 2, !tbaa !396
  %indvars.iv.next3359.epil = add nuw nsw i64 %indvars.iv3358.epil, 1
  %epil.iter3629.sub = add i64 %epil.iter3629, -1
  %epil.iter3629.cmp.not = icmp eq i64 %epil.iter3629.sub, 0
  br i1 %epil.iter3629.cmp.not, label %"end for read_input.s0.x.x.rebased856", label %"for read_input.s0.x.x.rebased855.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased856":           ; preds = %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased855.epil", %"end for read_input.s0.x.x850"
  br i1 %285, label %"for read_input.s0.x.x.rebased860.preheader", label %"end for read_input.s0.x.x.rebased861", !prof !386

"for read_input.s0.x.x.rebased860.preheader":     ; preds = %"end for read_input.s0.x.x.rebased856"
  %15190 = trunc i64 %14887 to i32
  %15191 = insertelement <32 x i32> undef, i32 %15190, i32 0
  %15192 = shufflevector <32 x i32> %15191, <32 x i32> undef, <32 x i32> zeroinitializer
  %15193 = add nuw nsw i64 %14683, %indvars.iv3361
  %15194 = mul nsw i64 %15193, %282
  %15195 = sub i64 %15194, %283
  br label %"for read_input.s0.x.x.rebased860"

"for read_input.s0.x.x.rebased860":               ; preds = %"for read_input.s0.x.x.rebased860.preheader", %"for read_input.s0.x.x.rebased860"
  %read_input.s0.x.x.rebased862 = phi i32 [ %15395, %"for read_input.s0.x.x.rebased860" ], [ 0, %"for read_input.s0.x.x.rebased860.preheader" ]
  %15196 = add nsw i32 %read_input.s0.x.x.rebased862, %277
  %15197 = shl nsw i32 %15196, 5
  %a501 = add nsw i32 %271, %15197
  %15198 = icmp sgt i32 %b419, %a501
  %read_input.s0.x.v2.base.s863 = select i1 %15198, i32 %a501, i32 %b419
  %15199 = add nsw i32 %read_input.s0.x.v2.base.s863, -32
  %15200 = insertelement <32 x i32> undef, i32 %15199, i32 0
  %15201 = shufflevector <32 x i32> %15200, <32 x i32> undef, <32 x i32> zeroinitializer
  %a517 = add nsw <32 x i32> %15201, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15202 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15203 = icmp sgt <8 x i32> %274, %15202
  %15204 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15205 = icmp sgt <8 x i32> %274, %15204
  %15206 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %15207 = icmp sgt <8 x i32> %274, %15206
  %15208 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15209 = icmp sgt <8 x i32> %274, %15208
  %15210 = select <8 x i1> %15203, <8 x i32> %15202, <8 x i32> %274
  %15211 = select <8 x i1> %15205, <8 x i32> %15204, <8 x i32> %274
  %15212 = select <8 x i1> %15207, <8 x i32> %15206, <8 x i32> %274
  %15213 = select <8 x i1> %15209, <8 x i32> %15208, <8 x i32> %274
  %15214 = icmp sgt <8 x i32> %15210, %276
  %15215 = icmp sgt <8 x i32> %15211, %276
  %15216 = icmp sgt <8 x i32> %15212, %276
  %15217 = icmp sgt <8 x i32> %15213, %276
  %15218 = select <8 x i1> %15214, <8 x i32> %15210, <8 x i32> %276
  %15219 = select <8 x i1> %15215, <8 x i32> %15211, <8 x i32> %276
  %15220 = select <8 x i1> %15216, <8 x i32> %15212, <8 x i32> %276
  %15221 = select <8 x i1> %15217, <8 x i32> %15213, <8 x i32> %276
  %15222 = shufflevector <8 x i32> %15218, <8 x i32> %15219, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15223 = shufflevector <8 x i32> %15220, <8 x i32> %15221, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15224 = shufflevector <16 x i32> %15222, <16 x i32> %15223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15225 = add nsw <32 x i32> %15224, %15192
  %15226 = extractelement <32 x i32> %15225, i32 0
  %15227 = sext i32 %15226 to i64
  %15228 = getelementptr inbounds i16, i16* %261, i64 %15227
  %15229 = load i16, i16* %15228, align 2, !tbaa !393
  %15230 = insertelement <32 x i16> undef, i16 %15229, i32 0
  %15231 = extractelement <32 x i32> %15225, i32 1
  %15232 = sext i32 %15231 to i64
  %15233 = getelementptr inbounds i16, i16* %261, i64 %15232
  %15234 = load i16, i16* %15233, align 2, !tbaa !393
  %15235 = insertelement <32 x i16> %15230, i16 %15234, i32 1
  %15236 = extractelement <32 x i32> %15225, i32 2
  %15237 = sext i32 %15236 to i64
  %15238 = getelementptr inbounds i16, i16* %261, i64 %15237
  %15239 = load i16, i16* %15238, align 2, !tbaa !393
  %15240 = insertelement <32 x i16> %15235, i16 %15239, i32 2
  %15241 = extractelement <32 x i32> %15225, i32 3
  %15242 = sext i32 %15241 to i64
  %15243 = getelementptr inbounds i16, i16* %261, i64 %15242
  %15244 = load i16, i16* %15243, align 2, !tbaa !393
  %15245 = insertelement <32 x i16> %15240, i16 %15244, i32 3
  %15246 = extractelement <32 x i32> %15225, i32 4
  %15247 = sext i32 %15246 to i64
  %15248 = getelementptr inbounds i16, i16* %261, i64 %15247
  %15249 = load i16, i16* %15248, align 2, !tbaa !393
  %15250 = insertelement <32 x i16> %15245, i16 %15249, i32 4
  %15251 = extractelement <32 x i32> %15225, i32 5
  %15252 = sext i32 %15251 to i64
  %15253 = getelementptr inbounds i16, i16* %261, i64 %15252
  %15254 = load i16, i16* %15253, align 2, !tbaa !393
  %15255 = insertelement <32 x i16> %15250, i16 %15254, i32 5
  %15256 = extractelement <32 x i32> %15225, i32 6
  %15257 = sext i32 %15256 to i64
  %15258 = getelementptr inbounds i16, i16* %261, i64 %15257
  %15259 = load i16, i16* %15258, align 2, !tbaa !393
  %15260 = insertelement <32 x i16> %15255, i16 %15259, i32 6
  %15261 = extractelement <32 x i32> %15225, i32 7
  %15262 = sext i32 %15261 to i64
  %15263 = getelementptr inbounds i16, i16* %261, i64 %15262
  %15264 = load i16, i16* %15263, align 2, !tbaa !393
  %15265 = insertelement <32 x i16> %15260, i16 %15264, i32 7
  %15266 = extractelement <32 x i32> %15225, i32 8
  %15267 = sext i32 %15266 to i64
  %15268 = getelementptr inbounds i16, i16* %261, i64 %15267
  %15269 = load i16, i16* %15268, align 2, !tbaa !393
  %15270 = insertelement <32 x i16> %15265, i16 %15269, i32 8
  %15271 = extractelement <32 x i32> %15225, i32 9
  %15272 = sext i32 %15271 to i64
  %15273 = getelementptr inbounds i16, i16* %261, i64 %15272
  %15274 = load i16, i16* %15273, align 2, !tbaa !393
  %15275 = insertelement <32 x i16> %15270, i16 %15274, i32 9
  %15276 = extractelement <32 x i32> %15225, i32 10
  %15277 = sext i32 %15276 to i64
  %15278 = getelementptr inbounds i16, i16* %261, i64 %15277
  %15279 = load i16, i16* %15278, align 2, !tbaa !393
  %15280 = insertelement <32 x i16> %15275, i16 %15279, i32 10
  %15281 = extractelement <32 x i32> %15225, i32 11
  %15282 = sext i32 %15281 to i64
  %15283 = getelementptr inbounds i16, i16* %261, i64 %15282
  %15284 = load i16, i16* %15283, align 2, !tbaa !393
  %15285 = insertelement <32 x i16> %15280, i16 %15284, i32 11
  %15286 = extractelement <32 x i32> %15225, i32 12
  %15287 = sext i32 %15286 to i64
  %15288 = getelementptr inbounds i16, i16* %261, i64 %15287
  %15289 = load i16, i16* %15288, align 2, !tbaa !393
  %15290 = insertelement <32 x i16> %15285, i16 %15289, i32 12
  %15291 = extractelement <32 x i32> %15225, i32 13
  %15292 = sext i32 %15291 to i64
  %15293 = getelementptr inbounds i16, i16* %261, i64 %15292
  %15294 = load i16, i16* %15293, align 2, !tbaa !393
  %15295 = insertelement <32 x i16> %15290, i16 %15294, i32 13
  %15296 = extractelement <32 x i32> %15225, i32 14
  %15297 = sext i32 %15296 to i64
  %15298 = getelementptr inbounds i16, i16* %261, i64 %15297
  %15299 = load i16, i16* %15298, align 2, !tbaa !393
  %15300 = insertelement <32 x i16> %15295, i16 %15299, i32 14
  %15301 = extractelement <32 x i32> %15225, i32 15
  %15302 = sext i32 %15301 to i64
  %15303 = getelementptr inbounds i16, i16* %261, i64 %15302
  %15304 = load i16, i16* %15303, align 2, !tbaa !393
  %15305 = insertelement <32 x i16> %15300, i16 %15304, i32 15
  %15306 = extractelement <32 x i32> %15225, i32 16
  %15307 = sext i32 %15306 to i64
  %15308 = getelementptr inbounds i16, i16* %261, i64 %15307
  %15309 = load i16, i16* %15308, align 2, !tbaa !393
  %15310 = insertelement <32 x i16> %15305, i16 %15309, i32 16
  %15311 = extractelement <32 x i32> %15225, i32 17
  %15312 = sext i32 %15311 to i64
  %15313 = getelementptr inbounds i16, i16* %261, i64 %15312
  %15314 = load i16, i16* %15313, align 2, !tbaa !393
  %15315 = insertelement <32 x i16> %15310, i16 %15314, i32 17
  %15316 = extractelement <32 x i32> %15225, i32 18
  %15317 = sext i32 %15316 to i64
  %15318 = getelementptr inbounds i16, i16* %261, i64 %15317
  %15319 = load i16, i16* %15318, align 2, !tbaa !393
  %15320 = insertelement <32 x i16> %15315, i16 %15319, i32 18
  %15321 = extractelement <32 x i32> %15225, i32 19
  %15322 = sext i32 %15321 to i64
  %15323 = getelementptr inbounds i16, i16* %261, i64 %15322
  %15324 = load i16, i16* %15323, align 2, !tbaa !393
  %15325 = insertelement <32 x i16> %15320, i16 %15324, i32 19
  %15326 = extractelement <32 x i32> %15225, i32 20
  %15327 = sext i32 %15326 to i64
  %15328 = getelementptr inbounds i16, i16* %261, i64 %15327
  %15329 = load i16, i16* %15328, align 2, !tbaa !393
  %15330 = insertelement <32 x i16> %15325, i16 %15329, i32 20
  %15331 = extractelement <32 x i32> %15225, i32 21
  %15332 = sext i32 %15331 to i64
  %15333 = getelementptr inbounds i16, i16* %261, i64 %15332
  %15334 = load i16, i16* %15333, align 2, !tbaa !393
  %15335 = insertelement <32 x i16> %15330, i16 %15334, i32 21
  %15336 = extractelement <32 x i32> %15225, i32 22
  %15337 = sext i32 %15336 to i64
  %15338 = getelementptr inbounds i16, i16* %261, i64 %15337
  %15339 = load i16, i16* %15338, align 2, !tbaa !393
  %15340 = insertelement <32 x i16> %15335, i16 %15339, i32 22
  %15341 = extractelement <32 x i32> %15225, i32 23
  %15342 = sext i32 %15341 to i64
  %15343 = getelementptr inbounds i16, i16* %261, i64 %15342
  %15344 = load i16, i16* %15343, align 2, !tbaa !393
  %15345 = insertelement <32 x i16> %15340, i16 %15344, i32 23
  %15346 = extractelement <32 x i32> %15225, i32 24
  %15347 = sext i32 %15346 to i64
  %15348 = getelementptr inbounds i16, i16* %261, i64 %15347
  %15349 = load i16, i16* %15348, align 2, !tbaa !393
  %15350 = insertelement <32 x i16> %15345, i16 %15349, i32 24
  %15351 = extractelement <32 x i32> %15225, i32 25
  %15352 = sext i32 %15351 to i64
  %15353 = getelementptr inbounds i16, i16* %261, i64 %15352
  %15354 = load i16, i16* %15353, align 2, !tbaa !393
  %15355 = insertelement <32 x i16> %15350, i16 %15354, i32 25
  %15356 = extractelement <32 x i32> %15225, i32 26
  %15357 = sext i32 %15356 to i64
  %15358 = getelementptr inbounds i16, i16* %261, i64 %15357
  %15359 = load i16, i16* %15358, align 2, !tbaa !393
  %15360 = insertelement <32 x i16> %15355, i16 %15359, i32 26
  %15361 = extractelement <32 x i32> %15225, i32 27
  %15362 = sext i32 %15361 to i64
  %15363 = getelementptr inbounds i16, i16* %261, i64 %15362
  %15364 = load i16, i16* %15363, align 2, !tbaa !393
  %15365 = insertelement <32 x i16> %15360, i16 %15364, i32 27
  %15366 = extractelement <32 x i32> %15225, i32 28
  %15367 = sext i32 %15366 to i64
  %15368 = getelementptr inbounds i16, i16* %261, i64 %15367
  %15369 = load i16, i16* %15368, align 2, !tbaa !393
  %15370 = insertelement <32 x i16> %15365, i16 %15369, i32 28
  %15371 = extractelement <32 x i32> %15225, i32 29
  %15372 = sext i32 %15371 to i64
  %15373 = getelementptr inbounds i16, i16* %261, i64 %15372
  %15374 = load i16, i16* %15373, align 2, !tbaa !393
  %15375 = insertelement <32 x i16> %15370, i16 %15374, i32 29
  %15376 = extractelement <32 x i32> %15225, i32 30
  %15377 = sext i32 %15376 to i64
  %15378 = getelementptr inbounds i16, i16* %261, i64 %15377
  %15379 = load i16, i16* %15378, align 2, !tbaa !393
  %15380 = insertelement <32 x i16> %15375, i16 %15379, i32 30
  %15381 = extractelement <32 x i32> %15225, i32 31
  %15382 = sext i32 %15381 to i64
  %15383 = getelementptr inbounds i16, i16* %261, i64 %15382
  %15384 = load i16, i16* %15383, align 2, !tbaa !393
  %15385 = insertelement <32 x i16> %15380, i16 %15384, i32 31
  %15386 = shufflevector <32 x i16> %15385, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15387 = sext i32 %read_input.s0.x.v2.base.s863 to i64
  %15388 = add nsw i64 %15195, %15387
  %15389 = getelementptr inbounds i16, i16* %read_input822, i64 %15388
  %15390 = getelementptr inbounds i16, i16* %15389, i64 -32
  %15391 = bitcast i16* %15390 to <16 x i16>*
  store <16 x i16> %15386, <16 x i16>* %15391, align 2, !tbaa !396
  %15392 = shufflevector <32 x i16> %15385, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15393 = getelementptr inbounds i16, i16* %15389, i64 -16
  %15394 = bitcast i16* %15393 to <16 x i16>*
  store <16 x i16> %15392, <16 x i16>* %15394, align 2, !tbaa !396
  %15395 = add nuw nsw i32 %read_input.s0.x.x.rebased862, 1
  %.not2684 = icmp eq i32 %15395, %t1661841
  br i1 %.not2684, label %"end for read_input.s0.x.x.rebased861", label %"for read_input.s0.x.x.rebased860"

"end for read_input.s0.x.x.rebased861":           ; preds = %"for read_input.s0.x.x.rebased860", %"end for read_input.s0.x.x.rebased856"
  %indvars.iv.next3362 = add nuw nsw i64 %indvars.iv3361, 1
  %.not2683 = icmp eq i64 %indvars.iv.next3362, %14685
  br i1 %.not2683, label %"end for read_input.s0.y.rebased846", label %"for read_input.s0.y.rebased845"

"for read_input.s0.y.rebased869":                 ; preds = %"for read_input.s0.y.rebased869.preheader", %"end for read_input.s0.x.x874"
  %indvars.iv3364 = phi i64 [ 0, %"for read_input.s0.y.rebased869.preheader" ], [ %indvars.iv.next3365, %"end for read_input.s0.x.x874" ]
  %15396 = trunc i64 %indvars.iv3364 to i32
  %a537 = add nsw i32 %14897, %15396
  %15397 = icmp sgt i32 %b398, %a537
  %a536 = select i1 %15397, i32 %a537, i32 %b398
  %15398 = icmp sgt i32 %a536, 0
  %15399 = select i1 %15398, i32 %a536, i32 0
  %15400 = mul nsw i32 %15399, %207
  %t1679872 = sub nsw i32 %15400, %203
  %15401 = insertelement <32 x i32> undef, i32 %t1679872, i32 0
  %15402 = shufflevector <32 x i32> %15401, <32 x i32> undef, <32 x i32> zeroinitializer
  %15403 = add nuw nsw i64 %14901, %indvars.iv3364
  %15404 = mul nsw i64 %15403, %282
  %15405 = sub i64 %15404, %283
  br label %"for read_input.s0.x.x873"

"end for read_input.s0.y.rebased870":             ; preds = %"end for read_input.s0.x.x874", %"end for read_input.s0.y.rebased846"
  %15406 = load i64, i64* %.fca.1.gep2376, align 8, !tbaa !387
  %cmp.i2866 = icmp ult i64 %15406, %292
  %15407 = load i8*, i8** %.fca.0.gep2375, align 8, !tbaa !389
  br i1 %cmp.i2866, label %if.then.i2869, label %pseudostack_alloc.exit2882, !prof !390

if.then.i2869:                                    ; preds = %"end for read_input.s0.y.rebased870"
  %tobool1.not.i2868 = icmp ne i8* %15407, null
  %15408 = load i64, i64* %.fca.2.gep2377, align 8
  %cmp2.i2871 = icmp ugt i64 %15408, 16384
  %or.cond2913 = and i1 %tobool1.not.i2868, %cmp2.i2871
  br i1 %or.cond2913, label %if.then3.i2873, label %if.end.i2877

if.then3.i2873:                                   ; preds = %if.then.i2869
  call void @halide_free(i8* null, i8* nonnull %15407) #16
  %.pre3440 = load i64, i64* %.fca.2.gep2377, align 8, !tbaa !391
  br label %if.end.i2877

if.end.i2877:                                     ; preds = %if.then3.i2873, %if.then.i2869
  %15409 = phi i64 [ %.pre3440, %if.then3.i2873 ], [ %15408, %if.then.i2869 ]
  %add.i2875 = add i64 %15409, %292
  store i64 %add.i2875, i64* %.fca.2.gep2377, align 8, !tbaa !391
  %cmp7.i2876 = icmp ugt i64 %add.i2875, 16384
  br i1 %cmp7.i2876, label %if.then8.i2879, label %if.end11.i2881

if.then8.i2879:                                   ; preds = %if.end.i2877
  %call.i2878 = call i8* @halide_malloc(i8* null, i64 %292) #16
  br label %if.end11.i2881

if.end11.i2881:                                   ; preds = %if.then8.i2879, %if.end.i2877
  %storemerge.i2880 = phi i8* [ %call.i2878, %if.then8.i2879 ], [ null, %if.end.i2877 ]
  store i8* %storemerge.i2880, i8** %.fca.0.gep2375, align 8, !tbaa !389
  store i64 %292, i64* %.fca.1.gep2376, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2882

pseudostack_alloc.exit2882:                       ; preds = %"end for read_input.s0.y.rebased870", %if.end11.i2881
  %15410 = phi i8* [ %storemerge.i2880, %if.end11.i2881 ], [ %15407, %"end for read_input.s0.y.rebased870" ]
  %15411 = bitcast i8* %15410 to i16*
  %.not2537 = icmp eq i8* %15410, null
  br i1 %.not2537, label %then_bb878, label %"consume read_input880", !prof !392

"for read_input.s0.x.x873":                       ; preds = %"for read_input.s0.y.rebased869", %"for read_input.s0.x.x873"
  %read_input.s0.x.x875 = phi i32 [ %15610, %"for read_input.s0.x.x873" ], [ 0, %"for read_input.s0.y.rebased869" ]
  %15412 = shl nsw i32 %read_input.s0.x.x875, 5
  %a543 = add nsw i32 %271, %15412
  %15413 = icmp sgt i32 %b419, %a543
  %read_input.s0.x.v2.base.s876 = select i1 %15413, i32 %a543, i32 %b419
  %15414 = add nsw i32 %read_input.s0.x.v2.base.s876, -32
  %15415 = insertelement <32 x i32> undef, i32 %15414, i32 0
  %15416 = shufflevector <32 x i32> %15415, <32 x i32> undef, <32 x i32> zeroinitializer
  %a546 = add nsw <32 x i32> %15416, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15417 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15418 = icmp sgt <8 x i32> %274, %15417
  %15419 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15420 = icmp sgt <8 x i32> %274, %15419
  %15421 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %15422 = icmp sgt <8 x i32> %274, %15421
  %15423 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15424 = icmp sgt <8 x i32> %274, %15423
  %15425 = select <8 x i1> %15418, <8 x i32> %15417, <8 x i32> %274
  %15426 = select <8 x i1> %15420, <8 x i32> %15419, <8 x i32> %274
  %15427 = select <8 x i1> %15422, <8 x i32> %15421, <8 x i32> %274
  %15428 = select <8 x i1> %15424, <8 x i32> %15423, <8 x i32> %274
  %15429 = icmp sgt <8 x i32> %15425, %276
  %15430 = icmp sgt <8 x i32> %15426, %276
  %15431 = icmp sgt <8 x i32> %15427, %276
  %15432 = icmp sgt <8 x i32> %15428, %276
  %15433 = select <8 x i1> %15429, <8 x i32> %15425, <8 x i32> %276
  %15434 = select <8 x i1> %15430, <8 x i32> %15426, <8 x i32> %276
  %15435 = select <8 x i1> %15431, <8 x i32> %15427, <8 x i32> %276
  %15436 = select <8 x i1> %15432, <8 x i32> %15428, <8 x i32> %276
  %15437 = shufflevector <8 x i32> %15433, <8 x i32> %15434, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15438 = shufflevector <8 x i32> %15435, <8 x i32> %15436, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15439 = shufflevector <16 x i32> %15437, <16 x i32> %15438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15440 = add nsw <32 x i32> %15439, %15402
  %15441 = extractelement <32 x i32> %15440, i32 0
  %15442 = sext i32 %15441 to i64
  %15443 = getelementptr inbounds i16, i16* %261, i64 %15442
  %15444 = load i16, i16* %15443, align 2, !tbaa !393
  %15445 = insertelement <32 x i16> undef, i16 %15444, i32 0
  %15446 = extractelement <32 x i32> %15440, i32 1
  %15447 = sext i32 %15446 to i64
  %15448 = getelementptr inbounds i16, i16* %261, i64 %15447
  %15449 = load i16, i16* %15448, align 2, !tbaa !393
  %15450 = insertelement <32 x i16> %15445, i16 %15449, i32 1
  %15451 = extractelement <32 x i32> %15440, i32 2
  %15452 = sext i32 %15451 to i64
  %15453 = getelementptr inbounds i16, i16* %261, i64 %15452
  %15454 = load i16, i16* %15453, align 2, !tbaa !393
  %15455 = insertelement <32 x i16> %15450, i16 %15454, i32 2
  %15456 = extractelement <32 x i32> %15440, i32 3
  %15457 = sext i32 %15456 to i64
  %15458 = getelementptr inbounds i16, i16* %261, i64 %15457
  %15459 = load i16, i16* %15458, align 2, !tbaa !393
  %15460 = insertelement <32 x i16> %15455, i16 %15459, i32 3
  %15461 = extractelement <32 x i32> %15440, i32 4
  %15462 = sext i32 %15461 to i64
  %15463 = getelementptr inbounds i16, i16* %261, i64 %15462
  %15464 = load i16, i16* %15463, align 2, !tbaa !393
  %15465 = insertelement <32 x i16> %15460, i16 %15464, i32 4
  %15466 = extractelement <32 x i32> %15440, i32 5
  %15467 = sext i32 %15466 to i64
  %15468 = getelementptr inbounds i16, i16* %261, i64 %15467
  %15469 = load i16, i16* %15468, align 2, !tbaa !393
  %15470 = insertelement <32 x i16> %15465, i16 %15469, i32 5
  %15471 = extractelement <32 x i32> %15440, i32 6
  %15472 = sext i32 %15471 to i64
  %15473 = getelementptr inbounds i16, i16* %261, i64 %15472
  %15474 = load i16, i16* %15473, align 2, !tbaa !393
  %15475 = insertelement <32 x i16> %15470, i16 %15474, i32 6
  %15476 = extractelement <32 x i32> %15440, i32 7
  %15477 = sext i32 %15476 to i64
  %15478 = getelementptr inbounds i16, i16* %261, i64 %15477
  %15479 = load i16, i16* %15478, align 2, !tbaa !393
  %15480 = insertelement <32 x i16> %15475, i16 %15479, i32 7
  %15481 = extractelement <32 x i32> %15440, i32 8
  %15482 = sext i32 %15481 to i64
  %15483 = getelementptr inbounds i16, i16* %261, i64 %15482
  %15484 = load i16, i16* %15483, align 2, !tbaa !393
  %15485 = insertelement <32 x i16> %15480, i16 %15484, i32 8
  %15486 = extractelement <32 x i32> %15440, i32 9
  %15487 = sext i32 %15486 to i64
  %15488 = getelementptr inbounds i16, i16* %261, i64 %15487
  %15489 = load i16, i16* %15488, align 2, !tbaa !393
  %15490 = insertelement <32 x i16> %15485, i16 %15489, i32 9
  %15491 = extractelement <32 x i32> %15440, i32 10
  %15492 = sext i32 %15491 to i64
  %15493 = getelementptr inbounds i16, i16* %261, i64 %15492
  %15494 = load i16, i16* %15493, align 2, !tbaa !393
  %15495 = insertelement <32 x i16> %15490, i16 %15494, i32 10
  %15496 = extractelement <32 x i32> %15440, i32 11
  %15497 = sext i32 %15496 to i64
  %15498 = getelementptr inbounds i16, i16* %261, i64 %15497
  %15499 = load i16, i16* %15498, align 2, !tbaa !393
  %15500 = insertelement <32 x i16> %15495, i16 %15499, i32 11
  %15501 = extractelement <32 x i32> %15440, i32 12
  %15502 = sext i32 %15501 to i64
  %15503 = getelementptr inbounds i16, i16* %261, i64 %15502
  %15504 = load i16, i16* %15503, align 2, !tbaa !393
  %15505 = insertelement <32 x i16> %15500, i16 %15504, i32 12
  %15506 = extractelement <32 x i32> %15440, i32 13
  %15507 = sext i32 %15506 to i64
  %15508 = getelementptr inbounds i16, i16* %261, i64 %15507
  %15509 = load i16, i16* %15508, align 2, !tbaa !393
  %15510 = insertelement <32 x i16> %15505, i16 %15509, i32 13
  %15511 = extractelement <32 x i32> %15440, i32 14
  %15512 = sext i32 %15511 to i64
  %15513 = getelementptr inbounds i16, i16* %261, i64 %15512
  %15514 = load i16, i16* %15513, align 2, !tbaa !393
  %15515 = insertelement <32 x i16> %15510, i16 %15514, i32 14
  %15516 = extractelement <32 x i32> %15440, i32 15
  %15517 = sext i32 %15516 to i64
  %15518 = getelementptr inbounds i16, i16* %261, i64 %15517
  %15519 = load i16, i16* %15518, align 2, !tbaa !393
  %15520 = insertelement <32 x i16> %15515, i16 %15519, i32 15
  %15521 = extractelement <32 x i32> %15440, i32 16
  %15522 = sext i32 %15521 to i64
  %15523 = getelementptr inbounds i16, i16* %261, i64 %15522
  %15524 = load i16, i16* %15523, align 2, !tbaa !393
  %15525 = insertelement <32 x i16> %15520, i16 %15524, i32 16
  %15526 = extractelement <32 x i32> %15440, i32 17
  %15527 = sext i32 %15526 to i64
  %15528 = getelementptr inbounds i16, i16* %261, i64 %15527
  %15529 = load i16, i16* %15528, align 2, !tbaa !393
  %15530 = insertelement <32 x i16> %15525, i16 %15529, i32 17
  %15531 = extractelement <32 x i32> %15440, i32 18
  %15532 = sext i32 %15531 to i64
  %15533 = getelementptr inbounds i16, i16* %261, i64 %15532
  %15534 = load i16, i16* %15533, align 2, !tbaa !393
  %15535 = insertelement <32 x i16> %15530, i16 %15534, i32 18
  %15536 = extractelement <32 x i32> %15440, i32 19
  %15537 = sext i32 %15536 to i64
  %15538 = getelementptr inbounds i16, i16* %261, i64 %15537
  %15539 = load i16, i16* %15538, align 2, !tbaa !393
  %15540 = insertelement <32 x i16> %15535, i16 %15539, i32 19
  %15541 = extractelement <32 x i32> %15440, i32 20
  %15542 = sext i32 %15541 to i64
  %15543 = getelementptr inbounds i16, i16* %261, i64 %15542
  %15544 = load i16, i16* %15543, align 2, !tbaa !393
  %15545 = insertelement <32 x i16> %15540, i16 %15544, i32 20
  %15546 = extractelement <32 x i32> %15440, i32 21
  %15547 = sext i32 %15546 to i64
  %15548 = getelementptr inbounds i16, i16* %261, i64 %15547
  %15549 = load i16, i16* %15548, align 2, !tbaa !393
  %15550 = insertelement <32 x i16> %15545, i16 %15549, i32 21
  %15551 = extractelement <32 x i32> %15440, i32 22
  %15552 = sext i32 %15551 to i64
  %15553 = getelementptr inbounds i16, i16* %261, i64 %15552
  %15554 = load i16, i16* %15553, align 2, !tbaa !393
  %15555 = insertelement <32 x i16> %15550, i16 %15554, i32 22
  %15556 = extractelement <32 x i32> %15440, i32 23
  %15557 = sext i32 %15556 to i64
  %15558 = getelementptr inbounds i16, i16* %261, i64 %15557
  %15559 = load i16, i16* %15558, align 2, !tbaa !393
  %15560 = insertelement <32 x i16> %15555, i16 %15559, i32 23
  %15561 = extractelement <32 x i32> %15440, i32 24
  %15562 = sext i32 %15561 to i64
  %15563 = getelementptr inbounds i16, i16* %261, i64 %15562
  %15564 = load i16, i16* %15563, align 2, !tbaa !393
  %15565 = insertelement <32 x i16> %15560, i16 %15564, i32 24
  %15566 = extractelement <32 x i32> %15440, i32 25
  %15567 = sext i32 %15566 to i64
  %15568 = getelementptr inbounds i16, i16* %261, i64 %15567
  %15569 = load i16, i16* %15568, align 2, !tbaa !393
  %15570 = insertelement <32 x i16> %15565, i16 %15569, i32 25
  %15571 = extractelement <32 x i32> %15440, i32 26
  %15572 = sext i32 %15571 to i64
  %15573 = getelementptr inbounds i16, i16* %261, i64 %15572
  %15574 = load i16, i16* %15573, align 2, !tbaa !393
  %15575 = insertelement <32 x i16> %15570, i16 %15574, i32 26
  %15576 = extractelement <32 x i32> %15440, i32 27
  %15577 = sext i32 %15576 to i64
  %15578 = getelementptr inbounds i16, i16* %261, i64 %15577
  %15579 = load i16, i16* %15578, align 2, !tbaa !393
  %15580 = insertelement <32 x i16> %15575, i16 %15579, i32 27
  %15581 = extractelement <32 x i32> %15440, i32 28
  %15582 = sext i32 %15581 to i64
  %15583 = getelementptr inbounds i16, i16* %261, i64 %15582
  %15584 = load i16, i16* %15583, align 2, !tbaa !393
  %15585 = insertelement <32 x i16> %15580, i16 %15584, i32 28
  %15586 = extractelement <32 x i32> %15440, i32 29
  %15587 = sext i32 %15586 to i64
  %15588 = getelementptr inbounds i16, i16* %261, i64 %15587
  %15589 = load i16, i16* %15588, align 2, !tbaa !393
  %15590 = insertelement <32 x i16> %15585, i16 %15589, i32 29
  %15591 = extractelement <32 x i32> %15440, i32 30
  %15592 = sext i32 %15591 to i64
  %15593 = getelementptr inbounds i16, i16* %261, i64 %15592
  %15594 = load i16, i16* %15593, align 2, !tbaa !393
  %15595 = insertelement <32 x i16> %15590, i16 %15594, i32 30
  %15596 = extractelement <32 x i32> %15440, i32 31
  %15597 = sext i32 %15596 to i64
  %15598 = getelementptr inbounds i16, i16* %261, i64 %15597
  %15599 = load i16, i16* %15598, align 2, !tbaa !393
  %15600 = insertelement <32 x i16> %15595, i16 %15599, i32 31
  %15601 = shufflevector <32 x i16> %15600, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15602 = sext i32 %read_input.s0.x.v2.base.s876 to i64
  %15603 = add nsw i64 %15405, %15602
  %15604 = getelementptr inbounds i16, i16* %read_input822, i64 %15603
  %15605 = getelementptr inbounds i16, i16* %15604, i64 -32
  %15606 = bitcast i16* %15605 to <16 x i16>*
  store <16 x i16> %15601, <16 x i16>* %15606, align 2, !tbaa !396
  %15607 = shufflevector <32 x i16> %15600, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15608 = getelementptr inbounds i16, i16* %15604, i64 -16
  %15609 = bitcast i16* %15608 to <16 x i16>*
  store <16 x i16> %15607, <16 x i16>* %15609, align 2, !tbaa !396
  %15610 = add nuw nsw i32 %read_input.s0.x.x875, 1
  %.not2682 = icmp eq i32 %15610, %215
  br i1 %.not2682, label %"end for read_input.s0.x.x874", label %"for read_input.s0.x.x873"

"end for read_input.s0.x.x874":                   ; preds = %"for read_input.s0.x.x873"
  %indvars.iv.next3365 = add nuw nsw i64 %indvars.iv3364, 1
  %.not2681 = icmp eq i64 %indvars.iv3364, %14902
  br i1 %.not2681, label %"end for read_input.s0.y.rebased870", label %"for read_input.s0.y.rebased869"

then_bb878:                                       ; preds = %pseudostack_alloc.exit2882
  %15611 = alloca i8*, i64 %292, align 32
  %15612 = bitcast i8** %15611 to i16*
  store i8** %15611, i8*** %293, align 8
  br label %"consume read_input880"

"consume read_input880":                          ; preds = %pseudostack_alloc.exit2882, %then_bb878
  %blur_x879 = phi i16* [ %15612, %then_bb878 ], [ %15411, %pseudostack_alloc.exit2882 ]
  br i1 %229, label %"produce blur_x884", label %"consume read_input880.after_bb881_crit_edge"

"consume read_input880.after_bb881_crit_edge":    ; preds = %"consume read_input880"
  %.pre3534 = and i32 %a379, 7
  br label %after_bb881

after_bb881:                                      ; preds = %"consume read_input880.after_bb881_crit_edge", %"produce blur_x884"
  %.pre-phi3535 = phi i32 [ %.pre3534, %"consume read_input880.after_bb881_crit_edge" ], [ %15657, %"produce blur_x884" ]
  %15613 = mul nsw i32 %.pre-phi3535, %a551
  %t1682886 = sub nsw i32 %15613, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased889.preheader", label %"end for blur_y.s0.x.x.rebased890", !prof !386

"for blur_y.s0.x.x.rebased889.preheader":         ; preds = %after_bb881
  %15614 = sext i32 %t1682886 to i64
  br label %"for blur_y.s0.x.x.rebased889"

"produce blur_x884":                              ; preds = %"consume read_input880"
  %15615 = getelementptr inbounds i16, i16* %read_input822, i64 %296
  %15616 = getelementptr inbounds i16, i16* %15615, i64 -31
  %15617 = bitcast i16* %15616 to <16 x i16>*
  %15618 = load <16 x i16>, <16 x i16>* %15617, align 2, !tbaa !396
  %15619 = getelementptr inbounds i16, i16* %15615, i64 -15
  %15620 = bitcast i16* %15619 to <16 x i16>*
  %15621 = load <16 x i16>, <16 x i16>* %15620, align 2, !tbaa !396
  %15622 = getelementptr inbounds i16, i16* %15615, i64 -32
  %15623 = bitcast i16* %15622 to <16 x i16>*
  %15624 = load <16 x i16>, <16 x i16>* %15623, align 2, !tbaa !396
  %15625 = getelementptr inbounds i16, i16* %15615, i64 -16
  %15626 = bitcast i16* %15625 to <16 x i16>*
  %15627 = load <16 x i16>, <16 x i16>* %15626, align 2, !tbaa !396
  %15628 = getelementptr inbounds i16, i16* %15615, i64 -30
  %15629 = bitcast i16* %15628 to <16 x i16>*
  %15630 = load <16 x i16>, <16 x i16>* %15629, align 2, !tbaa !396
  %15631 = getelementptr inbounds i16, i16* %15615, i64 -14
  %15632 = bitcast i16* %15631 to <16 x i16>*
  %15633 = load <16 x i16>, <16 x i16>* %15632, align 2, !tbaa !396
  %15634 = getelementptr inbounds i16, i16* %15615, i64 -28
  %15635 = bitcast i16* %15634 to <16 x i16>*
  %15636 = load <16 x i16>, <16 x i16>* %15635, align 2, !tbaa !396
  %15637 = getelementptr inbounds i16, i16* %15615, i64 -12
  %15638 = bitcast i16* %15637 to <16 x i16>*
  %15639 = load <16 x i16>, <16 x i16>* %15638, align 2, !tbaa !396
  %15640 = getelementptr inbounds i16, i16* %15615, i64 -29
  %15641 = bitcast i16* %15640 to <16 x i16>*
  %15642 = load <16 x i16>, <16 x i16>* %15641, align 2, !tbaa !396
  %15643 = getelementptr inbounds i16, i16* %15615, i64 -13
  %15644 = bitcast i16* %15643 to <16 x i16>*
  %15645 = load <16 x i16>, <16 x i16>* %15644, align 2, !tbaa !396
  %15646 = add <16 x i16> %15624, %15618
  %15647 = add <16 x i16> %15646, %15630
  %15648 = add <16 x i16> %15647, %15636
  %15649 = add <16 x i16> %15648, %15642
  %15650 = add <16 x i16> %15627, %15621
  %15651 = add <16 x i16> %15650, %15633
  %15652 = add <16 x i16> %15651, %15639
  %15653 = add <16 x i16> %15652, %15645
  %15654 = shufflevector <16 x i16> %15649, <16 x i16> %15653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15655 = udiv <32 x i16> %15654, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %15656 = shufflevector <32 x i16> %15655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15657 = and i32 %a379, 7
  %15658 = zext i32 %15657 to i64
  %15659 = mul nsw i64 %299, %15658
  %15660 = add nsw i64 %301, %15659
  %15661 = getelementptr inbounds i16, i16* %blur_x879, i64 %15660
  %15662 = getelementptr inbounds i16, i16* %15661, i64 -32
  %15663 = bitcast i16* %15662 to <16 x i16>*
  store <16 x i16> %15656, <16 x i16>* %15663, align 2, !tbaa !399
  %15664 = shufflevector <32 x i16> %15655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15665 = getelementptr inbounds i16, i16* %15661, i64 -16
  %15666 = bitcast i16* %15665 to <16 x i16>*
  store <16 x i16> %15664, <16 x i16>* %15666, align 2, !tbaa !399
  br label %after_bb881

"for blur_y.s0.x.x.rebased889":                   ; preds = %"for blur_y.s0.x.x.rebased889.preheader", %after_bb892
  %indvars.iv3366 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased889.preheader" ], [ %indvars.iv.next3367, %after_bb892 ]
  %15667 = add nsw i64 %indvars.iv3366, %303
  %15668 = icmp slt i64 %15667, 1
  %15669 = trunc i64 %15667 to i32
  %15670 = shl nsw i32 %15669, 5
  %15671 = icmp sgt i32 %198, %15670
  %15672 = or i1 %15668, %15671
  br i1 %15672, label %"produce blur_x895", label %after_bb892

"end for blur_y.s0.x.x.rebased890":               ; preds = %after_bb892, %after_bb881
  br i1 %304, label %"for blur_y.s0.x.x.rebased900.preheader", label %"end for blur_y.s0.x.x.rebased901", !prof !386

"for blur_y.s0.x.x.rebased900.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased890"
  %15673 = sext i32 %t1682886 to i64
  br label %"for blur_y.s0.x.x.rebased900"

after_bb892:                                      ; preds = %"for blur_y.s0.x.x.rebased889", %"produce blur_x895"
  %indvars.iv.next3367 = add nuw nsw i64 %indvars.iv3366, 1
  %.not2679 = icmp eq i64 %indvars.iv.next3367, %530
  br i1 %.not2679, label %"end for blur_y.s0.x.x.rebased890", label %"for blur_y.s0.x.x.rebased889"

"produce blur_x895":                              ; preds = %"for blur_y.s0.x.x.rebased889"
  %t684896 = sub i32 %15670, %t1645811
  %15674 = sext i32 %t684896 to i64
  %15675 = getelementptr inbounds i16, i16* %read_input822, i64 %15674
  %15676 = getelementptr inbounds i16, i16* %15675, i64 1
  %15677 = bitcast i16* %15676 to <16 x i16>*
  %15678 = load <16 x i16>, <16 x i16>* %15677, align 2, !tbaa !396
  %15679 = getelementptr inbounds i16, i16* %15675, i64 17
  %15680 = bitcast i16* %15679 to <16 x i16>*
  %15681 = load <16 x i16>, <16 x i16>* %15680, align 2, !tbaa !396
  %15682 = bitcast i16* %15675 to <16 x i16>*
  %15683 = load <16 x i16>, <16 x i16>* %15682, align 2, !tbaa !396
  %15684 = getelementptr inbounds i16, i16* %15675, i64 16
  %15685 = bitcast i16* %15684 to <16 x i16>*
  %15686 = load <16 x i16>, <16 x i16>* %15685, align 2, !tbaa !396
  %15687 = getelementptr inbounds i16, i16* %15675, i64 2
  %15688 = bitcast i16* %15687 to <16 x i16>*
  %15689 = load <16 x i16>, <16 x i16>* %15688, align 2, !tbaa !396
  %15690 = getelementptr inbounds i16, i16* %15675, i64 18
  %15691 = bitcast i16* %15690 to <16 x i16>*
  %15692 = load <16 x i16>, <16 x i16>* %15691, align 2, !tbaa !396
  %15693 = getelementptr inbounds i16, i16* %15675, i64 4
  %15694 = bitcast i16* %15693 to <16 x i16>*
  %15695 = load <16 x i16>, <16 x i16>* %15694, align 2, !tbaa !396
  %15696 = getelementptr inbounds i16, i16* %15675, i64 20
  %15697 = bitcast i16* %15696 to <16 x i16>*
  %15698 = load <16 x i16>, <16 x i16>* %15697, align 2, !tbaa !396
  %15699 = getelementptr inbounds i16, i16* %15675, i64 3
  %15700 = bitcast i16* %15699 to <16 x i16>*
  %15701 = load <16 x i16>, <16 x i16>* %15700, align 2, !tbaa !396
  %15702 = getelementptr inbounds i16, i16* %15675, i64 19
  %15703 = bitcast i16* %15702 to <16 x i16>*
  %15704 = load <16 x i16>, <16 x i16>* %15703, align 2, !tbaa !396
  %15705 = add <16 x i16> %15683, %15678
  %15706 = add <16 x i16> %15705, %15689
  %15707 = add <16 x i16> %15706, %15695
  %15708 = add <16 x i16> %15707, %15701
  %15709 = add <16 x i16> %15686, %15681
  %15710 = add <16 x i16> %15709, %15692
  %15711 = add <16 x i16> %15710, %15698
  %15712 = add <16 x i16> %15711, %15704
  %15713 = shufflevector <16 x i16> %15708, <16 x i16> %15712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15714 = udiv <32 x i16> %15713, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %15715 = shufflevector <32 x i16> %15714, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15716 = shl nsw i64 %15667, 5
  %15717 = add nsw i64 %15716, %15614
  %15718 = getelementptr inbounds i16, i16* %blur_x879, i64 %15717
  %15719 = bitcast i16* %15718 to <16 x i16>*
  store <16 x i16> %15715, <16 x i16>* %15719, align 2, !tbaa !399
  %15720 = shufflevector <32 x i16> %15714, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15721 = getelementptr inbounds i16, i16* %15718, i64 16
  %15722 = bitcast i16* %15721 to <16 x i16>*
  store <16 x i16> %15720, <16 x i16>* %15722, align 2, !tbaa !399
  br label %after_bb892

"for blur_y.s0.x.x.rebased900":                   ; preds = %"for blur_y.s0.x.x.rebased900.preheader", %after_bb903
  %blur_y.s0.x.x.rebased902 = phi i32 [ %15728, %after_bb903 ], [ 0, %"for blur_y.s0.x.x.rebased900.preheader" ]
  %15723 = add nsw i32 %blur_y.s0.x.x.rebased902, %t1626814
  %15724 = icmp slt i32 %15723, 1
  %15725 = shl nsw i32 %15723, 5
  %15726 = icmp sgt i32 %198, %15725
  %15727 = or i1 %15724, %15726
  br i1 %15727, label %then_bb904, label %after_bb903

"end for blur_y.s0.x.x.rebased901":               ; preds = %after_bb903, %"end for blur_y.s0.x.x.rebased890"
  br i1 %229, label %"produce blur_x912", label %"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge"

"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased901"
  %.pre3536 = add nsw i32 %a379, 1
  %.pre3538 = and i32 %.pre3536, 7
  br label %after_bb909

after_bb903:                                      ; preds = %"for blur_y.s0.x.x.rebased900", %then_bb904
  %15728 = add nuw nsw i32 %blur_y.s0.x.x.rebased902, 1
  %.not2678 = icmp eq i32 %15728, %t1683898
  br i1 %.not2678, label %"end for blur_y.s0.x.x.rebased901", label %"for blur_y.s0.x.x.rebased900"

then_bb904:                                       ; preds = %"for blur_y.s0.x.x.rebased900"
  %15729 = icmp sgt i32 %t1647, %15725
  %b598 = select i1 %15729, i32 %15725, i32 %t1647
  %15730 = icmp slt i32 %b598, %198
  %blur_x.s0.x.v1.base.s907 = select i1 %15730, i32 %b598, i32 %198
  %t686908 = sub i32 %blur_x.s0.x.v1.base.s907, %t1645811
  %15731 = sext i32 %t686908 to i64
  %15732 = getelementptr inbounds i16, i16* %read_input822, i64 %15731
  %15733 = getelementptr inbounds i16, i16* %15732, i64 1
  %15734 = bitcast i16* %15733 to <16 x i16>*
  %15735 = load <16 x i16>, <16 x i16>* %15734, align 2, !tbaa !396
  %15736 = getelementptr inbounds i16, i16* %15732, i64 17
  %15737 = bitcast i16* %15736 to <16 x i16>*
  %15738 = load <16 x i16>, <16 x i16>* %15737, align 2, !tbaa !396
  %15739 = bitcast i16* %15732 to <16 x i16>*
  %15740 = load <16 x i16>, <16 x i16>* %15739, align 2, !tbaa !396
  %15741 = getelementptr inbounds i16, i16* %15732, i64 16
  %15742 = bitcast i16* %15741 to <16 x i16>*
  %15743 = load <16 x i16>, <16 x i16>* %15742, align 2, !tbaa !396
  %15744 = getelementptr inbounds i16, i16* %15732, i64 2
  %15745 = bitcast i16* %15744 to <16 x i16>*
  %15746 = load <16 x i16>, <16 x i16>* %15745, align 2, !tbaa !396
  %15747 = getelementptr inbounds i16, i16* %15732, i64 18
  %15748 = bitcast i16* %15747 to <16 x i16>*
  %15749 = load <16 x i16>, <16 x i16>* %15748, align 2, !tbaa !396
  %15750 = getelementptr inbounds i16, i16* %15732, i64 4
  %15751 = bitcast i16* %15750 to <16 x i16>*
  %15752 = load <16 x i16>, <16 x i16>* %15751, align 2, !tbaa !396
  %15753 = getelementptr inbounds i16, i16* %15732, i64 20
  %15754 = bitcast i16* %15753 to <16 x i16>*
  %15755 = load <16 x i16>, <16 x i16>* %15754, align 2, !tbaa !396
  %15756 = getelementptr inbounds i16, i16* %15732, i64 3
  %15757 = bitcast i16* %15756 to <16 x i16>*
  %15758 = load <16 x i16>, <16 x i16>* %15757, align 2, !tbaa !396
  %15759 = getelementptr inbounds i16, i16* %15732, i64 19
  %15760 = bitcast i16* %15759 to <16 x i16>*
  %15761 = load <16 x i16>, <16 x i16>* %15760, align 2, !tbaa !396
  %15762 = add <16 x i16> %15740, %15735
  %15763 = add <16 x i16> %15762, %15746
  %15764 = add <16 x i16> %15763, %15752
  %15765 = add <16 x i16> %15764, %15758
  %15766 = add <16 x i16> %15743, %15738
  %15767 = add <16 x i16> %15766, %15749
  %15768 = add <16 x i16> %15767, %15755
  %15769 = add <16 x i16> %15768, %15761
  %15770 = shufflevector <16 x i16> %15765, <16 x i16> %15769, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15771 = udiv <32 x i16> %15770, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %15772 = shufflevector <32 x i16> %15771, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15773 = sext i32 %blur_x.s0.x.v1.base.s907 to i64
  %15774 = add nsw i64 %15773, %15673
  %15775 = getelementptr inbounds i16, i16* %blur_x879, i64 %15774
  %15776 = bitcast i16* %15775 to <16 x i16>*
  store <16 x i16> %15772, <16 x i16>* %15776, align 2, !tbaa !399
  %15777 = shufflevector <32 x i16> %15771, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15778 = getelementptr inbounds i16, i16* %15775, i64 16
  %15779 = bitcast i16* %15778 to <16 x i16>*
  store <16 x i16> %15777, <16 x i16>* %15779, align 2, !tbaa !399
  br label %after_bb903

after_bb909:                                      ; preds = %"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge", %"produce blur_x912"
  %.pre-phi3539 = phi i32 [ %.pre3538, %"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge" ], [ %15825, %"produce blur_x912" ]
  %15780 = mul nsw i32 %.pre-phi3539, %a551
  %t1688914 = sub nsw i32 %15780, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased917.preheader", label %"end for blur_y.s0.x.x.rebased918", !prof !386

"for blur_y.s0.x.x.rebased917.preheader":         ; preds = %after_bb909
  %15781 = sext i32 %t1688914 to i64
  br label %"for blur_y.s0.x.x.rebased917"

"produce blur_x912":                              ; preds = %"end for blur_y.s0.x.x.rebased901"
  %15782 = getelementptr inbounds i16, i16* %read_input822, i64 %314
  %15783 = getelementptr inbounds i16, i16* %15782, i64 -31
  %15784 = bitcast i16* %15783 to <16 x i16>*
  %15785 = load <16 x i16>, <16 x i16>* %15784, align 2, !tbaa !396
  %15786 = getelementptr inbounds i16, i16* %15782, i64 -15
  %15787 = bitcast i16* %15786 to <16 x i16>*
  %15788 = load <16 x i16>, <16 x i16>* %15787, align 2, !tbaa !396
  %15789 = getelementptr inbounds i16, i16* %15782, i64 -32
  %15790 = bitcast i16* %15789 to <16 x i16>*
  %15791 = load <16 x i16>, <16 x i16>* %15790, align 2, !tbaa !396
  %15792 = getelementptr inbounds i16, i16* %15782, i64 -16
  %15793 = bitcast i16* %15792 to <16 x i16>*
  %15794 = load <16 x i16>, <16 x i16>* %15793, align 2, !tbaa !396
  %15795 = getelementptr inbounds i16, i16* %15782, i64 -30
  %15796 = bitcast i16* %15795 to <16 x i16>*
  %15797 = load <16 x i16>, <16 x i16>* %15796, align 2, !tbaa !396
  %15798 = getelementptr inbounds i16, i16* %15782, i64 -14
  %15799 = bitcast i16* %15798 to <16 x i16>*
  %15800 = load <16 x i16>, <16 x i16>* %15799, align 2, !tbaa !396
  %15801 = getelementptr inbounds i16, i16* %15782, i64 -28
  %15802 = bitcast i16* %15801 to <16 x i16>*
  %15803 = load <16 x i16>, <16 x i16>* %15802, align 2, !tbaa !396
  %15804 = getelementptr inbounds i16, i16* %15782, i64 -12
  %15805 = bitcast i16* %15804 to <16 x i16>*
  %15806 = load <16 x i16>, <16 x i16>* %15805, align 2, !tbaa !396
  %15807 = getelementptr inbounds i16, i16* %15782, i64 -29
  %15808 = bitcast i16* %15807 to <16 x i16>*
  %15809 = load <16 x i16>, <16 x i16>* %15808, align 2, !tbaa !396
  %15810 = getelementptr inbounds i16, i16* %15782, i64 -13
  %15811 = bitcast i16* %15810 to <16 x i16>*
  %15812 = load <16 x i16>, <16 x i16>* %15811, align 2, !tbaa !396
  %15813 = add <16 x i16> %15791, %15785
  %15814 = add <16 x i16> %15813, %15797
  %15815 = add <16 x i16> %15814, %15803
  %15816 = add <16 x i16> %15815, %15809
  %15817 = add <16 x i16> %15794, %15788
  %15818 = add <16 x i16> %15817, %15800
  %15819 = add <16 x i16> %15818, %15806
  %15820 = add <16 x i16> %15819, %15812
  %15821 = shufflevector <16 x i16> %15816, <16 x i16> %15820, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15822 = udiv <32 x i16> %15821, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %15823 = shufflevector <32 x i16> %15822, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15824 = add nsw i32 %a379, 1
  %15825 = and i32 %15824, 7
  %15826 = zext i32 %15825 to i64
  %15827 = mul nsw i64 %299, %15826
  %15828 = add nsw i64 %301, %15827
  %15829 = getelementptr inbounds i16, i16* %blur_x879, i64 %15828
  %15830 = getelementptr inbounds i16, i16* %15829, i64 -32
  %15831 = bitcast i16* %15830 to <16 x i16>*
  store <16 x i16> %15823, <16 x i16>* %15831, align 2, !tbaa !399
  %15832 = shufflevector <32 x i16> %15822, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15833 = getelementptr inbounds i16, i16* %15829, i64 -16
  %15834 = bitcast i16* %15833 to <16 x i16>*
  store <16 x i16> %15832, <16 x i16>* %15834, align 2, !tbaa !399
  br label %after_bb909

"for blur_y.s0.x.x.rebased917":                   ; preds = %"for blur_y.s0.x.x.rebased917.preheader", %after_bb920
  %indvars.iv3368 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased917.preheader" ], [ %indvars.iv.next3369, %after_bb920 ]
  %15835 = add nsw i64 %indvars.iv3368, %303
  %15836 = icmp slt i64 %15835, 1
  %15837 = trunc i64 %15835 to i32
  %15838 = shl nsw i32 %15837, 5
  %15839 = icmp sgt i32 %198, %15838
  %15840 = or i1 %15836, %15839
  br i1 %15840, label %"produce blur_x923", label %after_bb920

"end for blur_y.s0.x.x.rebased918":               ; preds = %after_bb920, %after_bb909
  br i1 %304, label %"for blur_y.s0.x.x.rebased928.preheader", label %"end for blur_y.s0.x.x.rebased929", !prof !386

"for blur_y.s0.x.x.rebased928.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased918"
  %15841 = sext i32 %t1688914 to i64
  br label %"for blur_y.s0.x.x.rebased928"

after_bb920:                                      ; preds = %"for blur_y.s0.x.x.rebased917", %"produce blur_x923"
  %indvars.iv.next3369 = add nuw nsw i64 %indvars.iv3368, 1
  %.not2675 = icmp eq i64 %indvars.iv.next3369, %530
  br i1 %.not2675, label %"end for blur_y.s0.x.x.rebased918", label %"for blur_y.s0.x.x.rebased917"

"produce blur_x923":                              ; preds = %"for blur_y.s0.x.x.rebased917"
  %t690924 = add nsw i32 %315, %15838
  %15842 = sext i32 %t690924 to i64
  %15843 = getelementptr inbounds i16, i16* %read_input822, i64 %15842
  %15844 = getelementptr inbounds i16, i16* %15843, i64 1
  %15845 = bitcast i16* %15844 to <16 x i16>*
  %15846 = load <16 x i16>, <16 x i16>* %15845, align 2, !tbaa !396
  %15847 = getelementptr inbounds i16, i16* %15843, i64 17
  %15848 = bitcast i16* %15847 to <16 x i16>*
  %15849 = load <16 x i16>, <16 x i16>* %15848, align 2, !tbaa !396
  %15850 = bitcast i16* %15843 to <16 x i16>*
  %15851 = load <16 x i16>, <16 x i16>* %15850, align 2, !tbaa !396
  %15852 = getelementptr inbounds i16, i16* %15843, i64 16
  %15853 = bitcast i16* %15852 to <16 x i16>*
  %15854 = load <16 x i16>, <16 x i16>* %15853, align 2, !tbaa !396
  %15855 = getelementptr inbounds i16, i16* %15843, i64 2
  %15856 = bitcast i16* %15855 to <16 x i16>*
  %15857 = load <16 x i16>, <16 x i16>* %15856, align 2, !tbaa !396
  %15858 = getelementptr inbounds i16, i16* %15843, i64 18
  %15859 = bitcast i16* %15858 to <16 x i16>*
  %15860 = load <16 x i16>, <16 x i16>* %15859, align 2, !tbaa !396
  %15861 = getelementptr inbounds i16, i16* %15843, i64 4
  %15862 = bitcast i16* %15861 to <16 x i16>*
  %15863 = load <16 x i16>, <16 x i16>* %15862, align 2, !tbaa !396
  %15864 = getelementptr inbounds i16, i16* %15843, i64 20
  %15865 = bitcast i16* %15864 to <16 x i16>*
  %15866 = load <16 x i16>, <16 x i16>* %15865, align 2, !tbaa !396
  %15867 = getelementptr inbounds i16, i16* %15843, i64 3
  %15868 = bitcast i16* %15867 to <16 x i16>*
  %15869 = load <16 x i16>, <16 x i16>* %15868, align 2, !tbaa !396
  %15870 = getelementptr inbounds i16, i16* %15843, i64 19
  %15871 = bitcast i16* %15870 to <16 x i16>*
  %15872 = load <16 x i16>, <16 x i16>* %15871, align 2, !tbaa !396
  %15873 = add <16 x i16> %15851, %15846
  %15874 = add <16 x i16> %15873, %15857
  %15875 = add <16 x i16> %15874, %15863
  %15876 = add <16 x i16> %15875, %15869
  %15877 = add <16 x i16> %15854, %15849
  %15878 = add <16 x i16> %15877, %15860
  %15879 = add <16 x i16> %15878, %15866
  %15880 = add <16 x i16> %15879, %15872
  %15881 = shufflevector <16 x i16> %15876, <16 x i16> %15880, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15882 = udiv <32 x i16> %15881, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %15883 = shufflevector <32 x i16> %15882, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15884 = shl nsw i64 %15835, 5
  %15885 = add nsw i64 %15884, %15781
  %15886 = getelementptr inbounds i16, i16* %blur_x879, i64 %15885
  %15887 = bitcast i16* %15886 to <16 x i16>*
  store <16 x i16> %15883, <16 x i16>* %15887, align 2, !tbaa !399
  %15888 = shufflevector <32 x i16> %15882, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15889 = getelementptr inbounds i16, i16* %15886, i64 16
  %15890 = bitcast i16* %15889 to <16 x i16>*
  store <16 x i16> %15888, <16 x i16>* %15890, align 2, !tbaa !399
  br label %after_bb920

"for blur_y.s0.x.x.rebased928":                   ; preds = %"for blur_y.s0.x.x.rebased928.preheader", %after_bb931
  %blur_y.s0.x.x.rebased930 = phi i32 [ %15896, %after_bb931 ], [ 0, %"for blur_y.s0.x.x.rebased928.preheader" ]
  %15891 = add nsw i32 %blur_y.s0.x.x.rebased930, %t1626814
  %15892 = icmp slt i32 %15891, 1
  %15893 = shl nsw i32 %15891, 5
  %15894 = icmp sgt i32 %198, %15893
  %15895 = or i1 %15892, %15894
  br i1 %15895, label %then_bb932, label %after_bb931

"end for blur_y.s0.x.x.rebased929":               ; preds = %after_bb931, %"end for blur_y.s0.x.x.rebased918"
  br i1 %229, label %"produce blur_x942", label %"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge"

"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased929"
  %.pre3540 = add nsw i32 %a379, 2
  %.pre3542 = and i32 %.pre3540, 7
  br label %after_bb939

after_bb931:                                      ; preds = %"for blur_y.s0.x.x.rebased928", %then_bb932
  %15896 = add nuw nsw i32 %blur_y.s0.x.x.rebased930, 1
  %.not2674 = icmp eq i32 %15896, %t1683898
  br i1 %.not2674, label %"end for blur_y.s0.x.x.rebased929", label %"for blur_y.s0.x.x.rebased928"

then_bb932:                                       ; preds = %"for blur_y.s0.x.x.rebased928"
  %15897 = icmp sgt i32 %t1647, %15893
  %b722 = select i1 %15897, i32 %15893, i32 %t1647
  %15898 = icmp slt i32 %b722, %198
  %blur_x.s0.x.v1.base.s937 = select i1 %15898, i32 %b722, i32 %198
  %t692938 = add nsw i32 %315, %blur_x.s0.x.v1.base.s937
  %15899 = sext i32 %t692938 to i64
  %15900 = getelementptr inbounds i16, i16* %read_input822, i64 %15899
  %15901 = getelementptr inbounds i16, i16* %15900, i64 1
  %15902 = bitcast i16* %15901 to <16 x i16>*
  %15903 = load <16 x i16>, <16 x i16>* %15902, align 2, !tbaa !396
  %15904 = getelementptr inbounds i16, i16* %15900, i64 17
  %15905 = bitcast i16* %15904 to <16 x i16>*
  %15906 = load <16 x i16>, <16 x i16>* %15905, align 2, !tbaa !396
  %15907 = bitcast i16* %15900 to <16 x i16>*
  %15908 = load <16 x i16>, <16 x i16>* %15907, align 2, !tbaa !396
  %15909 = getelementptr inbounds i16, i16* %15900, i64 16
  %15910 = bitcast i16* %15909 to <16 x i16>*
  %15911 = load <16 x i16>, <16 x i16>* %15910, align 2, !tbaa !396
  %15912 = getelementptr inbounds i16, i16* %15900, i64 2
  %15913 = bitcast i16* %15912 to <16 x i16>*
  %15914 = load <16 x i16>, <16 x i16>* %15913, align 2, !tbaa !396
  %15915 = getelementptr inbounds i16, i16* %15900, i64 18
  %15916 = bitcast i16* %15915 to <16 x i16>*
  %15917 = load <16 x i16>, <16 x i16>* %15916, align 2, !tbaa !396
  %15918 = getelementptr inbounds i16, i16* %15900, i64 4
  %15919 = bitcast i16* %15918 to <16 x i16>*
  %15920 = load <16 x i16>, <16 x i16>* %15919, align 2, !tbaa !396
  %15921 = getelementptr inbounds i16, i16* %15900, i64 20
  %15922 = bitcast i16* %15921 to <16 x i16>*
  %15923 = load <16 x i16>, <16 x i16>* %15922, align 2, !tbaa !396
  %15924 = getelementptr inbounds i16, i16* %15900, i64 3
  %15925 = bitcast i16* %15924 to <16 x i16>*
  %15926 = load <16 x i16>, <16 x i16>* %15925, align 2, !tbaa !396
  %15927 = getelementptr inbounds i16, i16* %15900, i64 19
  %15928 = bitcast i16* %15927 to <16 x i16>*
  %15929 = load <16 x i16>, <16 x i16>* %15928, align 2, !tbaa !396
  %15930 = add <16 x i16> %15908, %15903
  %15931 = add <16 x i16> %15930, %15914
  %15932 = add <16 x i16> %15931, %15920
  %15933 = add <16 x i16> %15932, %15926
  %15934 = add <16 x i16> %15911, %15906
  %15935 = add <16 x i16> %15934, %15917
  %15936 = add <16 x i16> %15935, %15923
  %15937 = add <16 x i16> %15936, %15929
  %15938 = shufflevector <16 x i16> %15933, <16 x i16> %15937, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15939 = udiv <32 x i16> %15938, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %15940 = shufflevector <32 x i16> %15939, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15941 = sext i32 %blur_x.s0.x.v1.base.s937 to i64
  %15942 = add nsw i64 %15941, %15841
  %15943 = getelementptr inbounds i16, i16* %blur_x879, i64 %15942
  %15944 = bitcast i16* %15943 to <16 x i16>*
  store <16 x i16> %15940, <16 x i16>* %15944, align 2, !tbaa !399
  %15945 = shufflevector <32 x i16> %15939, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15946 = getelementptr inbounds i16, i16* %15943, i64 16
  %15947 = bitcast i16* %15946 to <16 x i16>*
  store <16 x i16> %15945, <16 x i16>* %15947, align 2, !tbaa !399
  br label %after_bb931

after_bb939:                                      ; preds = %"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge", %"produce blur_x942"
  %.pre-phi3543 = phi i32 [ %.pre3542, %"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge" ], [ %15993, %"produce blur_x942" ]
  %15948 = mul nsw i32 %.pre-phi3543, %a551
  %t1694944 = sub nsw i32 %15948, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased947.preheader", label %"end for blur_y.s0.x.x.rebased948", !prof !386

"for blur_y.s0.x.x.rebased947.preheader":         ; preds = %after_bb939
  %15949 = sext i32 %t1694944 to i64
  br label %"for blur_y.s0.x.x.rebased947"

"produce blur_x942":                              ; preds = %"end for blur_y.s0.x.x.rebased929"
  %15950 = getelementptr inbounds i16, i16* %read_input822, i64 %320
  %15951 = getelementptr inbounds i16, i16* %15950, i64 -31
  %15952 = bitcast i16* %15951 to <16 x i16>*
  %15953 = load <16 x i16>, <16 x i16>* %15952, align 2, !tbaa !396
  %15954 = getelementptr inbounds i16, i16* %15950, i64 -15
  %15955 = bitcast i16* %15954 to <16 x i16>*
  %15956 = load <16 x i16>, <16 x i16>* %15955, align 2, !tbaa !396
  %15957 = getelementptr inbounds i16, i16* %15950, i64 -32
  %15958 = bitcast i16* %15957 to <16 x i16>*
  %15959 = load <16 x i16>, <16 x i16>* %15958, align 2, !tbaa !396
  %15960 = getelementptr inbounds i16, i16* %15950, i64 -16
  %15961 = bitcast i16* %15960 to <16 x i16>*
  %15962 = load <16 x i16>, <16 x i16>* %15961, align 2, !tbaa !396
  %15963 = getelementptr inbounds i16, i16* %15950, i64 -30
  %15964 = bitcast i16* %15963 to <16 x i16>*
  %15965 = load <16 x i16>, <16 x i16>* %15964, align 2, !tbaa !396
  %15966 = getelementptr inbounds i16, i16* %15950, i64 -14
  %15967 = bitcast i16* %15966 to <16 x i16>*
  %15968 = load <16 x i16>, <16 x i16>* %15967, align 2, !tbaa !396
  %15969 = getelementptr inbounds i16, i16* %15950, i64 -28
  %15970 = bitcast i16* %15969 to <16 x i16>*
  %15971 = load <16 x i16>, <16 x i16>* %15970, align 2, !tbaa !396
  %15972 = getelementptr inbounds i16, i16* %15950, i64 -12
  %15973 = bitcast i16* %15972 to <16 x i16>*
  %15974 = load <16 x i16>, <16 x i16>* %15973, align 2, !tbaa !396
  %15975 = getelementptr inbounds i16, i16* %15950, i64 -29
  %15976 = bitcast i16* %15975 to <16 x i16>*
  %15977 = load <16 x i16>, <16 x i16>* %15976, align 2, !tbaa !396
  %15978 = getelementptr inbounds i16, i16* %15950, i64 -13
  %15979 = bitcast i16* %15978 to <16 x i16>*
  %15980 = load <16 x i16>, <16 x i16>* %15979, align 2, !tbaa !396
  %15981 = add <16 x i16> %15959, %15953
  %15982 = add <16 x i16> %15981, %15965
  %15983 = add <16 x i16> %15982, %15971
  %15984 = add <16 x i16> %15983, %15977
  %15985 = add <16 x i16> %15962, %15956
  %15986 = add <16 x i16> %15985, %15968
  %15987 = add <16 x i16> %15986, %15974
  %15988 = add <16 x i16> %15987, %15980
  %15989 = shufflevector <16 x i16> %15984, <16 x i16> %15988, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15990 = udiv <32 x i16> %15989, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %15991 = shufflevector <32 x i16> %15990, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15992 = add nsw i32 %a379, 2
  %15993 = and i32 %15992, 7
  %15994 = zext i32 %15993 to i64
  %15995 = mul nsw i64 %299, %15994
  %15996 = add nsw i64 %301, %15995
  %15997 = getelementptr inbounds i16, i16* %blur_x879, i64 %15996
  %15998 = getelementptr inbounds i16, i16* %15997, i64 -32
  %15999 = bitcast i16* %15998 to <16 x i16>*
  store <16 x i16> %15991, <16 x i16>* %15999, align 2, !tbaa !399
  %16000 = shufflevector <32 x i16> %15990, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16001 = getelementptr inbounds i16, i16* %15997, i64 -16
  %16002 = bitcast i16* %16001 to <16 x i16>*
  store <16 x i16> %16000, <16 x i16>* %16002, align 2, !tbaa !399
  br label %after_bb939

"for blur_y.s0.x.x.rebased947":                   ; preds = %"for blur_y.s0.x.x.rebased947.preheader", %after_bb950
  %indvars.iv3370 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased947.preheader" ], [ %indvars.iv.next3371, %after_bb950 ]
  %16003 = add nsw i64 %indvars.iv3370, %303
  %16004 = icmp slt i64 %16003, 1
  %16005 = trunc i64 %16003 to i32
  %16006 = shl nsw i32 %16005, 5
  %16007 = icmp sgt i32 %198, %16006
  %16008 = or i1 %16004, %16007
  br i1 %16008, label %"produce blur_x953", label %after_bb950

"end for blur_y.s0.x.x.rebased948":               ; preds = %after_bb950, %after_bb939
  br i1 %304, label %"for blur_y.s0.x.x.rebased958.preheader", label %"end for blur_y.s0.x.x.rebased959", !prof !386

"for blur_y.s0.x.x.rebased958.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased948"
  %16009 = sext i32 %t1694944 to i64
  br label %"for blur_y.s0.x.x.rebased958"

after_bb950:                                      ; preds = %"for blur_y.s0.x.x.rebased947", %"produce blur_x953"
  %indvars.iv.next3371 = add nuw nsw i64 %indvars.iv3370, 1
  %.not2671 = icmp eq i64 %indvars.iv.next3371, %530
  br i1 %.not2671, label %"end for blur_y.s0.x.x.rebased948", label %"for blur_y.s0.x.x.rebased947"

"produce blur_x953":                              ; preds = %"for blur_y.s0.x.x.rebased947"
  %t696954 = add nsw i32 %322, %16006
  %16010 = sext i32 %t696954 to i64
  %16011 = getelementptr inbounds i16, i16* %read_input822, i64 %16010
  %16012 = getelementptr inbounds i16, i16* %16011, i64 1
  %16013 = bitcast i16* %16012 to <16 x i16>*
  %16014 = load <16 x i16>, <16 x i16>* %16013, align 2, !tbaa !396
  %16015 = getelementptr inbounds i16, i16* %16011, i64 17
  %16016 = bitcast i16* %16015 to <16 x i16>*
  %16017 = load <16 x i16>, <16 x i16>* %16016, align 2, !tbaa !396
  %16018 = bitcast i16* %16011 to <16 x i16>*
  %16019 = load <16 x i16>, <16 x i16>* %16018, align 2, !tbaa !396
  %16020 = getelementptr inbounds i16, i16* %16011, i64 16
  %16021 = bitcast i16* %16020 to <16 x i16>*
  %16022 = load <16 x i16>, <16 x i16>* %16021, align 2, !tbaa !396
  %16023 = getelementptr inbounds i16, i16* %16011, i64 2
  %16024 = bitcast i16* %16023 to <16 x i16>*
  %16025 = load <16 x i16>, <16 x i16>* %16024, align 2, !tbaa !396
  %16026 = getelementptr inbounds i16, i16* %16011, i64 18
  %16027 = bitcast i16* %16026 to <16 x i16>*
  %16028 = load <16 x i16>, <16 x i16>* %16027, align 2, !tbaa !396
  %16029 = getelementptr inbounds i16, i16* %16011, i64 4
  %16030 = bitcast i16* %16029 to <16 x i16>*
  %16031 = load <16 x i16>, <16 x i16>* %16030, align 2, !tbaa !396
  %16032 = getelementptr inbounds i16, i16* %16011, i64 20
  %16033 = bitcast i16* %16032 to <16 x i16>*
  %16034 = load <16 x i16>, <16 x i16>* %16033, align 2, !tbaa !396
  %16035 = getelementptr inbounds i16, i16* %16011, i64 3
  %16036 = bitcast i16* %16035 to <16 x i16>*
  %16037 = load <16 x i16>, <16 x i16>* %16036, align 2, !tbaa !396
  %16038 = getelementptr inbounds i16, i16* %16011, i64 19
  %16039 = bitcast i16* %16038 to <16 x i16>*
  %16040 = load <16 x i16>, <16 x i16>* %16039, align 2, !tbaa !396
  %16041 = add <16 x i16> %16019, %16014
  %16042 = add <16 x i16> %16041, %16025
  %16043 = add <16 x i16> %16042, %16031
  %16044 = add <16 x i16> %16043, %16037
  %16045 = add <16 x i16> %16022, %16017
  %16046 = add <16 x i16> %16045, %16028
  %16047 = add <16 x i16> %16046, %16034
  %16048 = add <16 x i16> %16047, %16040
  %16049 = shufflevector <16 x i16> %16044, <16 x i16> %16048, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16050 = udiv <32 x i16> %16049, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16051 = shufflevector <32 x i16> %16050, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16052 = shl nsw i64 %16003, 5
  %16053 = add nsw i64 %16052, %15949
  %16054 = getelementptr inbounds i16, i16* %blur_x879, i64 %16053
  %16055 = bitcast i16* %16054 to <16 x i16>*
  store <16 x i16> %16051, <16 x i16>* %16055, align 2, !tbaa !399
  %16056 = shufflevector <32 x i16> %16050, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16057 = getelementptr inbounds i16, i16* %16054, i64 16
  %16058 = bitcast i16* %16057 to <16 x i16>*
  store <16 x i16> %16056, <16 x i16>* %16058, align 2, !tbaa !399
  br label %after_bb950

"for blur_y.s0.x.x.rebased958":                   ; preds = %"for blur_y.s0.x.x.rebased958.preheader", %after_bb961
  %blur_y.s0.x.x.rebased960 = phi i32 [ %16064, %after_bb961 ], [ 0, %"for blur_y.s0.x.x.rebased958.preheader" ]
  %16059 = add nsw i32 %blur_y.s0.x.x.rebased960, %t1626814
  %16060 = icmp slt i32 %16059, 1
  %16061 = shl nsw i32 %16059, 5
  %16062 = icmp sgt i32 %198, %16061
  %16063 = or i1 %16060, %16062
  br i1 %16063, label %then_bb962, label %after_bb961

"end for blur_y.s0.x.x.rebased959":               ; preds = %after_bb961, %"end for blur_y.s0.x.x.rebased948"
  br i1 %229, label %"produce blur_x972", label %"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge"

"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased959"
  %.pre3544 = add nsw i32 %a379, 3
  %.pre3546 = and i32 %.pre3544, 7
  br label %after_bb969

after_bb961:                                      ; preds = %"for blur_y.s0.x.x.rebased958", %then_bb962
  %16064 = add nuw nsw i32 %blur_y.s0.x.x.rebased960, 1
  %.not2670 = icmp eq i32 %16064, %t1683898
  br i1 %.not2670, label %"end for blur_y.s0.x.x.rebased959", label %"for blur_y.s0.x.x.rebased958"

then_bb962:                                       ; preds = %"for blur_y.s0.x.x.rebased958"
  %16065 = icmp sgt i32 %t1647, %16061
  %b862 = select i1 %16065, i32 %16061, i32 %t1647
  %16066 = icmp slt i32 %b862, %198
  %blur_x.s0.x.v1.base.s967 = select i1 %16066, i32 %b862, i32 %198
  %t698968 = add nsw i32 %322, %blur_x.s0.x.v1.base.s967
  %16067 = sext i32 %t698968 to i64
  %16068 = getelementptr inbounds i16, i16* %read_input822, i64 %16067
  %16069 = getelementptr inbounds i16, i16* %16068, i64 1
  %16070 = bitcast i16* %16069 to <16 x i16>*
  %16071 = load <16 x i16>, <16 x i16>* %16070, align 2, !tbaa !396
  %16072 = getelementptr inbounds i16, i16* %16068, i64 17
  %16073 = bitcast i16* %16072 to <16 x i16>*
  %16074 = load <16 x i16>, <16 x i16>* %16073, align 2, !tbaa !396
  %16075 = bitcast i16* %16068 to <16 x i16>*
  %16076 = load <16 x i16>, <16 x i16>* %16075, align 2, !tbaa !396
  %16077 = getelementptr inbounds i16, i16* %16068, i64 16
  %16078 = bitcast i16* %16077 to <16 x i16>*
  %16079 = load <16 x i16>, <16 x i16>* %16078, align 2, !tbaa !396
  %16080 = getelementptr inbounds i16, i16* %16068, i64 2
  %16081 = bitcast i16* %16080 to <16 x i16>*
  %16082 = load <16 x i16>, <16 x i16>* %16081, align 2, !tbaa !396
  %16083 = getelementptr inbounds i16, i16* %16068, i64 18
  %16084 = bitcast i16* %16083 to <16 x i16>*
  %16085 = load <16 x i16>, <16 x i16>* %16084, align 2, !tbaa !396
  %16086 = getelementptr inbounds i16, i16* %16068, i64 4
  %16087 = bitcast i16* %16086 to <16 x i16>*
  %16088 = load <16 x i16>, <16 x i16>* %16087, align 2, !tbaa !396
  %16089 = getelementptr inbounds i16, i16* %16068, i64 20
  %16090 = bitcast i16* %16089 to <16 x i16>*
  %16091 = load <16 x i16>, <16 x i16>* %16090, align 2, !tbaa !396
  %16092 = getelementptr inbounds i16, i16* %16068, i64 3
  %16093 = bitcast i16* %16092 to <16 x i16>*
  %16094 = load <16 x i16>, <16 x i16>* %16093, align 2, !tbaa !396
  %16095 = getelementptr inbounds i16, i16* %16068, i64 19
  %16096 = bitcast i16* %16095 to <16 x i16>*
  %16097 = load <16 x i16>, <16 x i16>* %16096, align 2, !tbaa !396
  %16098 = add <16 x i16> %16076, %16071
  %16099 = add <16 x i16> %16098, %16082
  %16100 = add <16 x i16> %16099, %16088
  %16101 = add <16 x i16> %16100, %16094
  %16102 = add <16 x i16> %16079, %16074
  %16103 = add <16 x i16> %16102, %16085
  %16104 = add <16 x i16> %16103, %16091
  %16105 = add <16 x i16> %16104, %16097
  %16106 = shufflevector <16 x i16> %16101, <16 x i16> %16105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16107 = udiv <32 x i16> %16106, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16108 = shufflevector <32 x i16> %16107, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16109 = sext i32 %blur_x.s0.x.v1.base.s967 to i64
  %16110 = add nsw i64 %16109, %16009
  %16111 = getelementptr inbounds i16, i16* %blur_x879, i64 %16110
  %16112 = bitcast i16* %16111 to <16 x i16>*
  store <16 x i16> %16108, <16 x i16>* %16112, align 2, !tbaa !399
  %16113 = shufflevector <32 x i16> %16107, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16114 = getelementptr inbounds i16, i16* %16111, i64 16
  %16115 = bitcast i16* %16114 to <16 x i16>*
  store <16 x i16> %16113, <16 x i16>* %16115, align 2, !tbaa !399
  br label %after_bb961

after_bb969:                                      ; preds = %"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge", %"produce blur_x972"
  %.pre-phi3547 = phi i32 [ %.pre3546, %"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge" ], [ %16161, %"produce blur_x972" ]
  %16116 = mul nsw i32 %.pre-phi3547, %a551
  %t1700974 = sub nsw i32 %16116, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased977.preheader", label %"end for blur_y.s0.x.x.rebased978", !prof !386

"for blur_y.s0.x.x.rebased977.preheader":         ; preds = %after_bb969
  %16117 = sext i32 %t1700974 to i64
  br label %"for blur_y.s0.x.x.rebased977"

"produce blur_x972":                              ; preds = %"end for blur_y.s0.x.x.rebased959"
  %16118 = getelementptr inbounds i16, i16* %read_input822, i64 %326
  %16119 = getelementptr inbounds i16, i16* %16118, i64 -31
  %16120 = bitcast i16* %16119 to <16 x i16>*
  %16121 = load <16 x i16>, <16 x i16>* %16120, align 2, !tbaa !396
  %16122 = getelementptr inbounds i16, i16* %16118, i64 -15
  %16123 = bitcast i16* %16122 to <16 x i16>*
  %16124 = load <16 x i16>, <16 x i16>* %16123, align 2, !tbaa !396
  %16125 = getelementptr inbounds i16, i16* %16118, i64 -32
  %16126 = bitcast i16* %16125 to <16 x i16>*
  %16127 = load <16 x i16>, <16 x i16>* %16126, align 2, !tbaa !396
  %16128 = getelementptr inbounds i16, i16* %16118, i64 -16
  %16129 = bitcast i16* %16128 to <16 x i16>*
  %16130 = load <16 x i16>, <16 x i16>* %16129, align 2, !tbaa !396
  %16131 = getelementptr inbounds i16, i16* %16118, i64 -30
  %16132 = bitcast i16* %16131 to <16 x i16>*
  %16133 = load <16 x i16>, <16 x i16>* %16132, align 2, !tbaa !396
  %16134 = getelementptr inbounds i16, i16* %16118, i64 -14
  %16135 = bitcast i16* %16134 to <16 x i16>*
  %16136 = load <16 x i16>, <16 x i16>* %16135, align 2, !tbaa !396
  %16137 = getelementptr inbounds i16, i16* %16118, i64 -28
  %16138 = bitcast i16* %16137 to <16 x i16>*
  %16139 = load <16 x i16>, <16 x i16>* %16138, align 2, !tbaa !396
  %16140 = getelementptr inbounds i16, i16* %16118, i64 -12
  %16141 = bitcast i16* %16140 to <16 x i16>*
  %16142 = load <16 x i16>, <16 x i16>* %16141, align 2, !tbaa !396
  %16143 = getelementptr inbounds i16, i16* %16118, i64 -29
  %16144 = bitcast i16* %16143 to <16 x i16>*
  %16145 = load <16 x i16>, <16 x i16>* %16144, align 2, !tbaa !396
  %16146 = getelementptr inbounds i16, i16* %16118, i64 -13
  %16147 = bitcast i16* %16146 to <16 x i16>*
  %16148 = load <16 x i16>, <16 x i16>* %16147, align 2, !tbaa !396
  %16149 = add <16 x i16> %16127, %16121
  %16150 = add <16 x i16> %16149, %16133
  %16151 = add <16 x i16> %16150, %16139
  %16152 = add <16 x i16> %16151, %16145
  %16153 = add <16 x i16> %16130, %16124
  %16154 = add <16 x i16> %16153, %16136
  %16155 = add <16 x i16> %16154, %16142
  %16156 = add <16 x i16> %16155, %16148
  %16157 = shufflevector <16 x i16> %16152, <16 x i16> %16156, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16158 = udiv <32 x i16> %16157, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16159 = shufflevector <32 x i16> %16158, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16160 = add nsw i32 %a379, 3
  %16161 = and i32 %16160, 7
  %16162 = zext i32 %16161 to i64
  %16163 = mul nsw i64 %299, %16162
  %16164 = add nsw i64 %301, %16163
  %16165 = getelementptr inbounds i16, i16* %blur_x879, i64 %16164
  %16166 = getelementptr inbounds i16, i16* %16165, i64 -32
  %16167 = bitcast i16* %16166 to <16 x i16>*
  store <16 x i16> %16159, <16 x i16>* %16167, align 2, !tbaa !399
  %16168 = shufflevector <32 x i16> %16158, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16169 = getelementptr inbounds i16, i16* %16165, i64 -16
  %16170 = bitcast i16* %16169 to <16 x i16>*
  store <16 x i16> %16168, <16 x i16>* %16170, align 2, !tbaa !399
  br label %after_bb969

"for blur_y.s0.x.x.rebased977":                   ; preds = %"for blur_y.s0.x.x.rebased977.preheader", %after_bb980
  %indvars.iv3372 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased977.preheader" ], [ %indvars.iv.next3373, %after_bb980 ]
  %16171 = add nsw i64 %indvars.iv3372, %303
  %16172 = icmp slt i64 %16171, 1
  %16173 = trunc i64 %16171 to i32
  %16174 = shl nsw i32 %16173, 5
  %16175 = icmp sgt i32 %198, %16174
  %16176 = or i1 %16172, %16175
  br i1 %16176, label %"produce blur_x983", label %after_bb980

"end for blur_y.s0.x.x.rebased978":               ; preds = %after_bb980, %after_bb969
  br i1 %304, label %"for blur_y.s0.x.x.rebased988.preheader", label %"end for blur_y.s0.x.x.rebased989", !prof !386

"for blur_y.s0.x.x.rebased988.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased978"
  %16177 = sext i32 %t1700974 to i64
  br label %"for blur_y.s0.x.x.rebased988"

after_bb980:                                      ; preds = %"for blur_y.s0.x.x.rebased977", %"produce blur_x983"
  %indvars.iv.next3373 = add nuw nsw i64 %indvars.iv3372, 1
  %.not2667 = icmp eq i64 %indvars.iv.next3373, %530
  br i1 %.not2667, label %"end for blur_y.s0.x.x.rebased978", label %"for blur_y.s0.x.x.rebased977"

"produce blur_x983":                              ; preds = %"for blur_y.s0.x.x.rebased977"
  %t702984 = add nsw i32 %329, %16174
  %16178 = sext i32 %t702984 to i64
  %16179 = getelementptr inbounds i16, i16* %read_input822, i64 %16178
  %16180 = getelementptr inbounds i16, i16* %16179, i64 1
  %16181 = bitcast i16* %16180 to <16 x i16>*
  %16182 = load <16 x i16>, <16 x i16>* %16181, align 2, !tbaa !396
  %16183 = getelementptr inbounds i16, i16* %16179, i64 17
  %16184 = bitcast i16* %16183 to <16 x i16>*
  %16185 = load <16 x i16>, <16 x i16>* %16184, align 2, !tbaa !396
  %16186 = bitcast i16* %16179 to <16 x i16>*
  %16187 = load <16 x i16>, <16 x i16>* %16186, align 2, !tbaa !396
  %16188 = getelementptr inbounds i16, i16* %16179, i64 16
  %16189 = bitcast i16* %16188 to <16 x i16>*
  %16190 = load <16 x i16>, <16 x i16>* %16189, align 2, !tbaa !396
  %16191 = getelementptr inbounds i16, i16* %16179, i64 2
  %16192 = bitcast i16* %16191 to <16 x i16>*
  %16193 = load <16 x i16>, <16 x i16>* %16192, align 2, !tbaa !396
  %16194 = getelementptr inbounds i16, i16* %16179, i64 18
  %16195 = bitcast i16* %16194 to <16 x i16>*
  %16196 = load <16 x i16>, <16 x i16>* %16195, align 2, !tbaa !396
  %16197 = getelementptr inbounds i16, i16* %16179, i64 4
  %16198 = bitcast i16* %16197 to <16 x i16>*
  %16199 = load <16 x i16>, <16 x i16>* %16198, align 2, !tbaa !396
  %16200 = getelementptr inbounds i16, i16* %16179, i64 20
  %16201 = bitcast i16* %16200 to <16 x i16>*
  %16202 = load <16 x i16>, <16 x i16>* %16201, align 2, !tbaa !396
  %16203 = getelementptr inbounds i16, i16* %16179, i64 3
  %16204 = bitcast i16* %16203 to <16 x i16>*
  %16205 = load <16 x i16>, <16 x i16>* %16204, align 2, !tbaa !396
  %16206 = getelementptr inbounds i16, i16* %16179, i64 19
  %16207 = bitcast i16* %16206 to <16 x i16>*
  %16208 = load <16 x i16>, <16 x i16>* %16207, align 2, !tbaa !396
  %16209 = add <16 x i16> %16187, %16182
  %16210 = add <16 x i16> %16209, %16193
  %16211 = add <16 x i16> %16210, %16199
  %16212 = add <16 x i16> %16211, %16205
  %16213 = add <16 x i16> %16190, %16185
  %16214 = add <16 x i16> %16213, %16196
  %16215 = add <16 x i16> %16214, %16202
  %16216 = add <16 x i16> %16215, %16208
  %16217 = shufflevector <16 x i16> %16212, <16 x i16> %16216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16218 = udiv <32 x i16> %16217, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16219 = shufflevector <32 x i16> %16218, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16220 = shl nsw i64 %16171, 5
  %16221 = add nsw i64 %16220, %16117
  %16222 = getelementptr inbounds i16, i16* %blur_x879, i64 %16221
  %16223 = bitcast i16* %16222 to <16 x i16>*
  store <16 x i16> %16219, <16 x i16>* %16223, align 2, !tbaa !399
  %16224 = shufflevector <32 x i16> %16218, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16225 = getelementptr inbounds i16, i16* %16222, i64 16
  %16226 = bitcast i16* %16225 to <16 x i16>*
  store <16 x i16> %16224, <16 x i16>* %16226, align 2, !tbaa !399
  br label %after_bb980

"for blur_y.s0.x.x.rebased988":                   ; preds = %"for blur_y.s0.x.x.rebased988.preheader", %after_bb991
  %blur_y.s0.x.x.rebased990 = phi i32 [ %16232, %after_bb991 ], [ 0, %"for blur_y.s0.x.x.rebased988.preheader" ]
  %16227 = add nsw i32 %blur_y.s0.x.x.rebased990, %t1626814
  %16228 = icmp slt i32 %16227, 1
  %16229 = shl nsw i32 %16227, 5
  %16230 = icmp sgt i32 %198, %16229
  %16231 = or i1 %16228, %16230
  br i1 %16231, label %then_bb992, label %after_bb991

"end for blur_y.s0.x.x.rebased989":               ; preds = %after_bb991, %"end for blur_y.s0.x.x.rebased978"
  br i1 %229, label %"produce blur_x1002", label %"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge"

"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased989"
  %.pre3548 = add nsw i32 %a379, 4
  %.pre3550 = and i32 %.pre3548, 7
  br label %after_bb999

after_bb991:                                      ; preds = %"for blur_y.s0.x.x.rebased988", %then_bb992
  %16232 = add nuw nsw i32 %blur_y.s0.x.x.rebased990, 1
  %.not2666 = icmp eq i32 %16232, %t1683898
  br i1 %.not2666, label %"end for blur_y.s0.x.x.rebased989", label %"for blur_y.s0.x.x.rebased988"

then_bb992:                                       ; preds = %"for blur_y.s0.x.x.rebased988"
  %16233 = icmp sgt i32 %t1647, %16229
  %b1066 = select i1 %16233, i32 %16229, i32 %t1647
  %16234 = icmp slt i32 %b1066, %198
  %blur_x.s0.x.v1.base.s997 = select i1 %16234, i32 %b1066, i32 %198
  %t704998 = add nsw i32 %329, %blur_x.s0.x.v1.base.s997
  %16235 = sext i32 %t704998 to i64
  %16236 = getelementptr inbounds i16, i16* %read_input822, i64 %16235
  %16237 = getelementptr inbounds i16, i16* %16236, i64 1
  %16238 = bitcast i16* %16237 to <16 x i16>*
  %16239 = load <16 x i16>, <16 x i16>* %16238, align 2, !tbaa !396
  %16240 = getelementptr inbounds i16, i16* %16236, i64 17
  %16241 = bitcast i16* %16240 to <16 x i16>*
  %16242 = load <16 x i16>, <16 x i16>* %16241, align 2, !tbaa !396
  %16243 = bitcast i16* %16236 to <16 x i16>*
  %16244 = load <16 x i16>, <16 x i16>* %16243, align 2, !tbaa !396
  %16245 = getelementptr inbounds i16, i16* %16236, i64 16
  %16246 = bitcast i16* %16245 to <16 x i16>*
  %16247 = load <16 x i16>, <16 x i16>* %16246, align 2, !tbaa !396
  %16248 = getelementptr inbounds i16, i16* %16236, i64 2
  %16249 = bitcast i16* %16248 to <16 x i16>*
  %16250 = load <16 x i16>, <16 x i16>* %16249, align 2, !tbaa !396
  %16251 = getelementptr inbounds i16, i16* %16236, i64 18
  %16252 = bitcast i16* %16251 to <16 x i16>*
  %16253 = load <16 x i16>, <16 x i16>* %16252, align 2, !tbaa !396
  %16254 = getelementptr inbounds i16, i16* %16236, i64 4
  %16255 = bitcast i16* %16254 to <16 x i16>*
  %16256 = load <16 x i16>, <16 x i16>* %16255, align 2, !tbaa !396
  %16257 = getelementptr inbounds i16, i16* %16236, i64 20
  %16258 = bitcast i16* %16257 to <16 x i16>*
  %16259 = load <16 x i16>, <16 x i16>* %16258, align 2, !tbaa !396
  %16260 = getelementptr inbounds i16, i16* %16236, i64 3
  %16261 = bitcast i16* %16260 to <16 x i16>*
  %16262 = load <16 x i16>, <16 x i16>* %16261, align 2, !tbaa !396
  %16263 = getelementptr inbounds i16, i16* %16236, i64 19
  %16264 = bitcast i16* %16263 to <16 x i16>*
  %16265 = load <16 x i16>, <16 x i16>* %16264, align 2, !tbaa !396
  %16266 = add <16 x i16> %16244, %16239
  %16267 = add <16 x i16> %16266, %16250
  %16268 = add <16 x i16> %16267, %16256
  %16269 = add <16 x i16> %16268, %16262
  %16270 = add <16 x i16> %16247, %16242
  %16271 = add <16 x i16> %16270, %16253
  %16272 = add <16 x i16> %16271, %16259
  %16273 = add <16 x i16> %16272, %16265
  %16274 = shufflevector <16 x i16> %16269, <16 x i16> %16273, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16275 = udiv <32 x i16> %16274, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16276 = shufflevector <32 x i16> %16275, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16277 = sext i32 %blur_x.s0.x.v1.base.s997 to i64
  %16278 = add nsw i64 %16277, %16177
  %16279 = getelementptr inbounds i16, i16* %blur_x879, i64 %16278
  %16280 = bitcast i16* %16279 to <16 x i16>*
  store <16 x i16> %16276, <16 x i16>* %16280, align 2, !tbaa !399
  %16281 = shufflevector <32 x i16> %16275, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16282 = getelementptr inbounds i16, i16* %16279, i64 16
  %16283 = bitcast i16* %16282 to <16 x i16>*
  store <16 x i16> %16281, <16 x i16>* %16283, align 2, !tbaa !399
  br label %after_bb991

after_bb999:                                      ; preds = %"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge", %"produce blur_x1002"
  %.pre-phi3551 = phi i32 [ %.pre3550, %"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge" ], [ %16347, %"produce blur_x1002" ]
  %16284 = mul nsw i32 %.pre-phi3551, %a551
  %t17061010 = sub nsw i32 %16284, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1014.preheader", label %"end for blur_y.s0.x.x.rebased1015", !prof !386

"for blur_y.s0.x.x.rebased1014.preheader":        ; preds = %after_bb999
  %16285 = sext i32 %t17061010 to i64
  %16286 = zext i32 %.pre-phi3539 to i64
  %16287 = mul nsw i64 %16286, %337
  %16288 = sub nsw i64 %16287, %298
  %16289 = zext i32 %.pre-phi3535 to i64
  %16290 = mul nsw i64 %16289, %337
  %16291 = sub nsw i64 %16290, %298
  %16292 = zext i32 %.pre-phi3543 to i64
  %16293 = mul nsw i64 %16292, %337
  %16294 = sub nsw i64 %16293, %298
  %16295 = zext i32 %.pre-phi3551 to i64
  %16296 = mul nsw i64 %16295, %337
  %16297 = sub nsw i64 %16296, %298
  %16298 = zext i32 %.pre-phi3547 to i64
  %16299 = mul nsw i64 %16298, %337
  %16300 = sub nsw i64 %16299, %298
  %16301 = sext i32 %a379 to i64
  %16302 = mul nsw i64 %16301, %334
  %16303 = add nsw i64 %16302, %338
  br label %"for blur_y.s0.x.x.rebased1014"

"produce blur_x1002":                             ; preds = %"end for blur_y.s0.x.x.rebased989"
  %16304 = getelementptr inbounds i16, i16* %read_input822, i64 %332
  %16305 = getelementptr inbounds i16, i16* %16304, i64 -31
  %16306 = bitcast i16* %16305 to <16 x i16>*
  %16307 = load <16 x i16>, <16 x i16>* %16306, align 2, !tbaa !396
  %16308 = getelementptr inbounds i16, i16* %16304, i64 -15
  %16309 = bitcast i16* %16308 to <16 x i16>*
  %16310 = load <16 x i16>, <16 x i16>* %16309, align 2, !tbaa !396
  %16311 = getelementptr inbounds i16, i16* %16304, i64 -32
  %16312 = bitcast i16* %16311 to <16 x i16>*
  %16313 = load <16 x i16>, <16 x i16>* %16312, align 2, !tbaa !396
  %16314 = getelementptr inbounds i16, i16* %16304, i64 -16
  %16315 = bitcast i16* %16314 to <16 x i16>*
  %16316 = load <16 x i16>, <16 x i16>* %16315, align 2, !tbaa !396
  %16317 = getelementptr inbounds i16, i16* %16304, i64 -30
  %16318 = bitcast i16* %16317 to <16 x i16>*
  %16319 = load <16 x i16>, <16 x i16>* %16318, align 2, !tbaa !396
  %16320 = getelementptr inbounds i16, i16* %16304, i64 -14
  %16321 = bitcast i16* %16320 to <16 x i16>*
  %16322 = load <16 x i16>, <16 x i16>* %16321, align 2, !tbaa !396
  %16323 = getelementptr inbounds i16, i16* %16304, i64 -28
  %16324 = bitcast i16* %16323 to <16 x i16>*
  %16325 = load <16 x i16>, <16 x i16>* %16324, align 2, !tbaa !396
  %16326 = getelementptr inbounds i16, i16* %16304, i64 -12
  %16327 = bitcast i16* %16326 to <16 x i16>*
  %16328 = load <16 x i16>, <16 x i16>* %16327, align 2, !tbaa !396
  %16329 = getelementptr inbounds i16, i16* %16304, i64 -29
  %16330 = bitcast i16* %16329 to <16 x i16>*
  %16331 = load <16 x i16>, <16 x i16>* %16330, align 2, !tbaa !396
  %16332 = getelementptr inbounds i16, i16* %16304, i64 -13
  %16333 = bitcast i16* %16332 to <16 x i16>*
  %16334 = load <16 x i16>, <16 x i16>* %16333, align 2, !tbaa !396
  %16335 = add <16 x i16> %16313, %16307
  %16336 = add <16 x i16> %16335, %16319
  %16337 = add <16 x i16> %16336, %16325
  %16338 = add <16 x i16> %16337, %16331
  %16339 = add <16 x i16> %16316, %16310
  %16340 = add <16 x i16> %16339, %16322
  %16341 = add <16 x i16> %16340, %16328
  %16342 = add <16 x i16> %16341, %16334
  %16343 = shufflevector <16 x i16> %16338, <16 x i16> %16342, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16344 = udiv <32 x i16> %16343, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16345 = shufflevector <32 x i16> %16344, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16346 = add nsw i32 %a379, 4
  %16347 = and i32 %16346, 7
  %16348 = zext i32 %16347 to i64
  %16349 = mul nsw i64 %299, %16348
  %16350 = add nsw i64 %301, %16349
  %16351 = getelementptr inbounds i16, i16* %blur_x879, i64 %16350
  %16352 = getelementptr inbounds i16, i16* %16351, i64 -32
  %16353 = bitcast i16* %16352 to <16 x i16>*
  store <16 x i16> %16345, <16 x i16>* %16353, align 2, !tbaa !399
  %16354 = shufflevector <32 x i16> %16344, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16355 = getelementptr inbounds i16, i16* %16351, i64 -16
  %16356 = bitcast i16* %16355 to <16 x i16>*
  store <16 x i16> %16354, <16 x i16>* %16356, align 2, !tbaa !399
  %16357 = zext i32 %.pre-phi3539 to i64
  %16358 = mul nsw i64 %16357, %333
  %16359 = add nsw i64 %16358, %296
  %16360 = getelementptr inbounds i16, i16* %blur_x879, i64 %16359
  %16361 = getelementptr inbounds i16, i16* %16360, i64 -32
  %16362 = bitcast i16* %16361 to <16 x i16>*
  %16363 = load <16 x i16>, <16 x i16>* %16362, align 2, !tbaa !399
  %16364 = getelementptr inbounds i16, i16* %16360, i64 -16
  %16365 = bitcast i16* %16364 to <16 x i16>*
  %16366 = load <16 x i16>, <16 x i16>* %16365, align 2, !tbaa !399
  %16367 = zext i32 %.pre-phi3535 to i64
  %16368 = mul nsw i64 %16367, %333
  %16369 = add nsw i64 %16368, %296
  %16370 = getelementptr inbounds i16, i16* %blur_x879, i64 %16369
  %16371 = getelementptr inbounds i16, i16* %16370, i64 -32
  %16372 = bitcast i16* %16371 to <16 x i16>*
  %16373 = load <16 x i16>, <16 x i16>* %16372, align 2, !tbaa !399
  %16374 = getelementptr inbounds i16, i16* %16370, i64 -16
  %16375 = bitcast i16* %16374 to <16 x i16>*
  %16376 = load <16 x i16>, <16 x i16>* %16375, align 2, !tbaa !399
  %16377 = zext i32 %.pre-phi3543 to i64
  %16378 = mul nsw i64 %16377, %333
  %16379 = add nsw i64 %16378, %296
  %16380 = getelementptr inbounds i16, i16* %blur_x879, i64 %16379
  %16381 = getelementptr inbounds i16, i16* %16380, i64 -32
  %16382 = bitcast i16* %16381 to <16 x i16>*
  %16383 = load <16 x i16>, <16 x i16>* %16382, align 2, !tbaa !399
  %16384 = getelementptr inbounds i16, i16* %16380, i64 -16
  %16385 = bitcast i16* %16384 to <16 x i16>*
  %16386 = load <16 x i16>, <16 x i16>* %16385, align 2, !tbaa !399
  %16387 = mul nsw i64 %16348, %333
  %16388 = add nsw i64 %16387, %296
  %16389 = getelementptr inbounds i16, i16* %blur_x879, i64 %16388
  %16390 = getelementptr inbounds i16, i16* %16389, i64 -32
  %16391 = bitcast i16* %16390 to <16 x i16>*
  %16392 = load <16 x i16>, <16 x i16>* %16391, align 2, !tbaa !399
  %16393 = getelementptr inbounds i16, i16* %16389, i64 -16
  %16394 = bitcast i16* %16393 to <16 x i16>*
  %16395 = load <16 x i16>, <16 x i16>* %16394, align 2, !tbaa !399
  %16396 = zext i32 %.pre-phi3547 to i64
  %16397 = mul nsw i64 %16396, %333
  %16398 = add nsw i64 %16397, %296
  %16399 = getelementptr inbounds i16, i16* %blur_x879, i64 %16398
  %16400 = getelementptr inbounds i16, i16* %16399, i64 -32
  %16401 = bitcast i16* %16400 to <16 x i16>*
  %16402 = load <16 x i16>, <16 x i16>* %16401, align 2, !tbaa !399
  %16403 = getelementptr inbounds i16, i16* %16399, i64 -16
  %16404 = bitcast i16* %16403 to <16 x i16>*
  %16405 = load <16 x i16>, <16 x i16>* %16404, align 2, !tbaa !399
  %16406 = add <16 x i16> %16373, %16363
  %16407 = add <16 x i16> %16406, %16383
  %16408 = add <16 x i16> %16407, %16392
  %16409 = add <16 x i16> %16408, %16402
  %16410 = add <16 x i16> %16376, %16366
  %16411 = add <16 x i16> %16410, %16386
  %16412 = add <16 x i16> %16411, %16395
  %16413 = add <16 x i16> %16412, %16405
  %16414 = shufflevector <16 x i16> %16409, <16 x i16> %16413, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16415 = udiv <32 x i16> %16414, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16416 = shufflevector <32 x i16> %16415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16417 = sext i32 %a379 to i64
  %16418 = mul nsw i64 %16417, %334
  %16419 = add nsw i64 %336, %16418
  %16420 = getelementptr inbounds i16, i16* %263, i64 %16419
  %16421 = getelementptr inbounds i16, i16* %16420, i64 -32
  %16422 = bitcast i16* %16421 to <16 x i16>*
  store <16 x i16> %16416, <16 x i16>* %16422, align 2, !tbaa !401
  %16423 = shufflevector <32 x i16> %16415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16424 = getelementptr inbounds i16, i16* %16420, i64 -16
  %16425 = bitcast i16* %16424 to <16 x i16>*
  store <16 x i16> %16423, <16 x i16>* %16425, align 2, !tbaa !401
  br label %after_bb999

"for blur_y.s0.x.x.rebased1014":                  ; preds = %"for blur_y.s0.x.x.rebased1014.preheader", %"consume blur_x1022"
  %indvars.iv3374 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1014.preheader" ], [ %indvars.iv.next3375, %"consume blur_x1022" ]
  %16426 = add nsw i64 %indvars.iv3374, %303
  %16427 = icmp slt i64 %16426, 1
  %16428 = trunc i64 %16426 to i32
  %16429 = shl nsw i32 %16428, 5
  %16430 = icmp sgt i32 %198, %16429
  %16431 = or i1 %16427, %16430
  br i1 %16431, label %"produce blur_x1020", label %"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge"

"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1014"
  %.pre3552 = shl nsw i64 %16426, 5
  br label %"consume blur_x1022"

"end for blur_y.s0.x.x.rebased1015":              ; preds = %"consume blur_x1022", %after_bb999
  br i1 %304, label %"for blur_y.s0.x.x.rebased1030.preheader", label %"end for blur_y.s0.x.x.rebased1031", !prof !386

"for blur_y.s0.x.x.rebased1030.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1015"
  %16432 = sext i32 %t17061010 to i64
  %16433 = zext i32 %.pre-phi3539 to i64
  %16434 = mul nsw i64 %16433, %337
  %16435 = sub nsw i64 %16434, %298
  %16436 = zext i32 %.pre-phi3535 to i64
  %16437 = mul nsw i64 %16436, %337
  %16438 = sub nsw i64 %16437, %298
  %16439 = zext i32 %.pre-phi3543 to i64
  %16440 = mul nsw i64 %16439, %337
  %16441 = sub nsw i64 %16440, %298
  %16442 = zext i32 %.pre-phi3551 to i64
  %16443 = mul nsw i64 %16442, %337
  %16444 = sub nsw i64 %16443, %298
  %16445 = zext i32 %.pre-phi3547 to i64
  %16446 = mul nsw i64 %16445, %337
  %16447 = sub nsw i64 %16446, %298
  %16448 = sext i32 %a379 to i64
  %16449 = mul nsw i64 %16448, %334
  %16450 = add nsw i64 %16449, %338
  br label %"for blur_y.s0.x.x.rebased1030"

"produce blur_x1020":                             ; preds = %"for blur_y.s0.x.x.rebased1014"
  %t7121021 = add nsw i32 %16429, %328
  %16451 = sext i32 %t7121021 to i64
  %16452 = getelementptr inbounds i16, i16* %read_input822, i64 %16451
  %16453 = getelementptr inbounds i16, i16* %16452, i64 1
  %16454 = bitcast i16* %16453 to <16 x i16>*
  %16455 = load <16 x i16>, <16 x i16>* %16454, align 2, !tbaa !396
  %16456 = getelementptr inbounds i16, i16* %16452, i64 17
  %16457 = bitcast i16* %16456 to <16 x i16>*
  %16458 = load <16 x i16>, <16 x i16>* %16457, align 2, !tbaa !396
  %16459 = bitcast i16* %16452 to <16 x i16>*
  %16460 = load <16 x i16>, <16 x i16>* %16459, align 2, !tbaa !396
  %16461 = getelementptr inbounds i16, i16* %16452, i64 16
  %16462 = bitcast i16* %16461 to <16 x i16>*
  %16463 = load <16 x i16>, <16 x i16>* %16462, align 2, !tbaa !396
  %16464 = getelementptr inbounds i16, i16* %16452, i64 2
  %16465 = bitcast i16* %16464 to <16 x i16>*
  %16466 = load <16 x i16>, <16 x i16>* %16465, align 2, !tbaa !396
  %16467 = getelementptr inbounds i16, i16* %16452, i64 18
  %16468 = bitcast i16* %16467 to <16 x i16>*
  %16469 = load <16 x i16>, <16 x i16>* %16468, align 2, !tbaa !396
  %16470 = getelementptr inbounds i16, i16* %16452, i64 4
  %16471 = bitcast i16* %16470 to <16 x i16>*
  %16472 = load <16 x i16>, <16 x i16>* %16471, align 2, !tbaa !396
  %16473 = getelementptr inbounds i16, i16* %16452, i64 20
  %16474 = bitcast i16* %16473 to <16 x i16>*
  %16475 = load <16 x i16>, <16 x i16>* %16474, align 2, !tbaa !396
  %16476 = getelementptr inbounds i16, i16* %16452, i64 3
  %16477 = bitcast i16* %16476 to <16 x i16>*
  %16478 = load <16 x i16>, <16 x i16>* %16477, align 2, !tbaa !396
  %16479 = getelementptr inbounds i16, i16* %16452, i64 19
  %16480 = bitcast i16* %16479 to <16 x i16>*
  %16481 = load <16 x i16>, <16 x i16>* %16480, align 2, !tbaa !396
  %16482 = add <16 x i16> %16460, %16455
  %16483 = add <16 x i16> %16482, %16466
  %16484 = add <16 x i16> %16483, %16472
  %16485 = add <16 x i16> %16484, %16478
  %16486 = add <16 x i16> %16463, %16458
  %16487 = add <16 x i16> %16486, %16469
  %16488 = add <16 x i16> %16487, %16475
  %16489 = add <16 x i16> %16488, %16481
  %16490 = shufflevector <16 x i16> %16485, <16 x i16> %16489, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16491 = udiv <32 x i16> %16490, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16492 = shufflevector <32 x i16> %16491, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16493 = shl nsw i64 %16426, 5
  %16494 = add nsw i64 %16493, %16285
  %16495 = getelementptr inbounds i16, i16* %blur_x879, i64 %16494
  %16496 = bitcast i16* %16495 to <16 x i16>*
  store <16 x i16> %16492, <16 x i16>* %16496, align 2, !tbaa !399
  %16497 = shufflevector <32 x i16> %16491, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16498 = getelementptr inbounds i16, i16* %16495, i64 16
  %16499 = bitcast i16* %16498 to <16 x i16>*
  store <16 x i16> %16497, <16 x i16>* %16499, align 2, !tbaa !399
  br label %"consume blur_x1022"

"consume blur_x1022":                             ; preds = %"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge", %"produce blur_x1020"
  %.pre-phi3553 = phi i64 [ %.pre3552, %"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge" ], [ %16493, %"produce blur_x1020" ]
  %16500 = add nsw i64 %16288, %.pre-phi3553
  %16501 = getelementptr inbounds i16, i16* %blur_x879, i64 %16500
  %16502 = bitcast i16* %16501 to <16 x i16>*
  %16503 = load <16 x i16>, <16 x i16>* %16502, align 2, !tbaa !399
  %16504 = getelementptr inbounds i16, i16* %16501, i64 16
  %16505 = bitcast i16* %16504 to <16 x i16>*
  %16506 = load <16 x i16>, <16 x i16>* %16505, align 2, !tbaa !399
  %16507 = add nsw i64 %16291, %.pre-phi3553
  %16508 = getelementptr inbounds i16, i16* %blur_x879, i64 %16507
  %16509 = bitcast i16* %16508 to <16 x i16>*
  %16510 = load <16 x i16>, <16 x i16>* %16509, align 2, !tbaa !399
  %16511 = getelementptr inbounds i16, i16* %16508, i64 16
  %16512 = bitcast i16* %16511 to <16 x i16>*
  %16513 = load <16 x i16>, <16 x i16>* %16512, align 2, !tbaa !399
  %16514 = add nsw i64 %16294, %.pre-phi3553
  %16515 = getelementptr inbounds i16, i16* %blur_x879, i64 %16514
  %16516 = bitcast i16* %16515 to <16 x i16>*
  %16517 = load <16 x i16>, <16 x i16>* %16516, align 2, !tbaa !399
  %16518 = getelementptr inbounds i16, i16* %16515, i64 16
  %16519 = bitcast i16* %16518 to <16 x i16>*
  %16520 = load <16 x i16>, <16 x i16>* %16519, align 2, !tbaa !399
  %16521 = add nsw i64 %16297, %.pre-phi3553
  %16522 = getelementptr inbounds i16, i16* %blur_x879, i64 %16521
  %16523 = bitcast i16* %16522 to <16 x i16>*
  %16524 = load <16 x i16>, <16 x i16>* %16523, align 2, !tbaa !399
  %16525 = getelementptr inbounds i16, i16* %16522, i64 16
  %16526 = bitcast i16* %16525 to <16 x i16>*
  %16527 = load <16 x i16>, <16 x i16>* %16526, align 2, !tbaa !399
  %16528 = add nsw i64 %16300, %.pre-phi3553
  %16529 = getelementptr inbounds i16, i16* %blur_x879, i64 %16528
  %16530 = bitcast i16* %16529 to <16 x i16>*
  %16531 = load <16 x i16>, <16 x i16>* %16530, align 2, !tbaa !399
  %16532 = getelementptr inbounds i16, i16* %16529, i64 16
  %16533 = bitcast i16* %16532 to <16 x i16>*
  %16534 = load <16 x i16>, <16 x i16>* %16533, align 2, !tbaa !399
  %16535 = add <16 x i16> %16510, %16503
  %16536 = add <16 x i16> %16535, %16517
  %16537 = add <16 x i16> %16536, %16524
  %16538 = add <16 x i16> %16537, %16531
  %16539 = add <16 x i16> %16513, %16506
  %16540 = add <16 x i16> %16539, %16520
  %16541 = add <16 x i16> %16540, %16527
  %16542 = add <16 x i16> %16541, %16534
  %16543 = shufflevector <16 x i16> %16538, <16 x i16> %16542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16544 = udiv <32 x i16> %16543, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16545 = shufflevector <32 x i16> %16544, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16546 = add nsw i64 %16303, %.pre-phi3553
  %16547 = getelementptr inbounds i16, i16* %263, i64 %16546
  %16548 = bitcast i16* %16547 to <16 x i16>*
  store <16 x i16> %16545, <16 x i16>* %16548, align 2, !tbaa !401
  %16549 = shufflevector <32 x i16> %16544, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16550 = getelementptr inbounds i16, i16* %16547, i64 16
  %16551 = bitcast i16* %16550 to <16 x i16>*
  store <16 x i16> %16549, <16 x i16>* %16551, align 2, !tbaa !401
  %indvars.iv.next3375 = add nuw nsw i64 %indvars.iv3374, 1
  %.not2663 = icmp eq i64 %indvars.iv.next3375, %530
  br i1 %.not2663, label %"end for blur_y.s0.x.x.rebased1015", label %"for blur_y.s0.x.x.rebased1014"

"for blur_y.s0.x.x.rebased1030":                  ; preds = %"for blur_y.s0.x.x.rebased1030.preheader", %"consume blur_x1041"
  %blur_y.s0.x.x.rebased1032 = phi i32 [ %16660, %"consume blur_x1041" ], [ 0, %"for blur_y.s0.x.x.rebased1030.preheader" ]
  %16552 = add nsw i32 %blur_y.s0.x.x.rebased1032, %t1626814
  %a1229 = shl nsw i32 %16552, 5
  %16553 = icmp sgt i32 %t1647, %a1229
  %blur_y.s0.x.v0.base.s1033 = select i1 %16553, i32 %a1229, i32 %t1647
  %16554 = icmp slt i32 %16552, 1
  %16555 = icmp sgt i32 %198, %a1229
  %16556 = or i1 %16554, %16555
  br i1 %16556, label %"produce blur_x1038", label %"consume blur_x1041"

"end for blur_y.s0.x.x.rebased1031":              ; preds = %"consume blur_x1041", %"end for blur_y.s0.x.x.rebased1015"
  br i1 %229, label %"produce blur_x1045", label %"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge"

"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1031"
  %.pre3554 = add nsw i32 %a379, 5
  %.pre3556 = and i32 %.pre3554, 7
  br label %after_bb1042

"produce blur_x1038":                             ; preds = %"for blur_y.s0.x.x.rebased1030"
  %16557 = icmp slt i32 %blur_y.s0.x.v0.base.s1033, %198
  %blur_x.s0.x.v1.base.s1039 = select i1 %16557, i32 %blur_y.s0.x.v0.base.s1033, i32 %198
  %t7171040 = add nsw i32 %blur_x.s0.x.v1.base.s1039, %328
  %16558 = sext i32 %t7171040 to i64
  %16559 = getelementptr inbounds i16, i16* %read_input822, i64 %16558
  %16560 = getelementptr inbounds i16, i16* %16559, i64 1
  %16561 = bitcast i16* %16560 to <16 x i16>*
  %16562 = load <16 x i16>, <16 x i16>* %16561, align 2, !tbaa !396
  %16563 = getelementptr inbounds i16, i16* %16559, i64 17
  %16564 = bitcast i16* %16563 to <16 x i16>*
  %16565 = load <16 x i16>, <16 x i16>* %16564, align 2, !tbaa !396
  %16566 = bitcast i16* %16559 to <16 x i16>*
  %16567 = load <16 x i16>, <16 x i16>* %16566, align 2, !tbaa !396
  %16568 = getelementptr inbounds i16, i16* %16559, i64 16
  %16569 = bitcast i16* %16568 to <16 x i16>*
  %16570 = load <16 x i16>, <16 x i16>* %16569, align 2, !tbaa !396
  %16571 = getelementptr inbounds i16, i16* %16559, i64 2
  %16572 = bitcast i16* %16571 to <16 x i16>*
  %16573 = load <16 x i16>, <16 x i16>* %16572, align 2, !tbaa !396
  %16574 = getelementptr inbounds i16, i16* %16559, i64 18
  %16575 = bitcast i16* %16574 to <16 x i16>*
  %16576 = load <16 x i16>, <16 x i16>* %16575, align 2, !tbaa !396
  %16577 = getelementptr inbounds i16, i16* %16559, i64 4
  %16578 = bitcast i16* %16577 to <16 x i16>*
  %16579 = load <16 x i16>, <16 x i16>* %16578, align 2, !tbaa !396
  %16580 = getelementptr inbounds i16, i16* %16559, i64 20
  %16581 = bitcast i16* %16580 to <16 x i16>*
  %16582 = load <16 x i16>, <16 x i16>* %16581, align 2, !tbaa !396
  %16583 = getelementptr inbounds i16, i16* %16559, i64 3
  %16584 = bitcast i16* %16583 to <16 x i16>*
  %16585 = load <16 x i16>, <16 x i16>* %16584, align 2, !tbaa !396
  %16586 = getelementptr inbounds i16, i16* %16559, i64 19
  %16587 = bitcast i16* %16586 to <16 x i16>*
  %16588 = load <16 x i16>, <16 x i16>* %16587, align 2, !tbaa !396
  %16589 = add <16 x i16> %16567, %16562
  %16590 = add <16 x i16> %16589, %16573
  %16591 = add <16 x i16> %16590, %16579
  %16592 = add <16 x i16> %16591, %16585
  %16593 = add <16 x i16> %16570, %16565
  %16594 = add <16 x i16> %16593, %16576
  %16595 = add <16 x i16> %16594, %16582
  %16596 = add <16 x i16> %16595, %16588
  %16597 = shufflevector <16 x i16> %16592, <16 x i16> %16596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16598 = udiv <32 x i16> %16597, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16599 = shufflevector <32 x i16> %16598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16600 = sext i32 %blur_x.s0.x.v1.base.s1039 to i64
  %16601 = add nsw i64 %16600, %16432
  %16602 = getelementptr inbounds i16, i16* %blur_x879, i64 %16601
  %16603 = bitcast i16* %16602 to <16 x i16>*
  store <16 x i16> %16599, <16 x i16>* %16603, align 2, !tbaa !399
  %16604 = shufflevector <32 x i16> %16598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16605 = getelementptr inbounds i16, i16* %16602, i64 16
  %16606 = bitcast i16* %16605 to <16 x i16>*
  store <16 x i16> %16604, <16 x i16>* %16606, align 2, !tbaa !399
  br label %"consume blur_x1041"

"consume blur_x1041":                             ; preds = %"for blur_y.s0.x.x.rebased1030", %"produce blur_x1038"
  %16607 = sext i32 %blur_y.s0.x.v0.base.s1033 to i64
  %16608 = add nsw i64 %16435, %16607
  %16609 = getelementptr inbounds i16, i16* %blur_x879, i64 %16608
  %16610 = bitcast i16* %16609 to <16 x i16>*
  %16611 = load <16 x i16>, <16 x i16>* %16610, align 2, !tbaa !399
  %16612 = getelementptr inbounds i16, i16* %16609, i64 16
  %16613 = bitcast i16* %16612 to <16 x i16>*
  %16614 = load <16 x i16>, <16 x i16>* %16613, align 2, !tbaa !399
  %16615 = add nsw i64 %16438, %16607
  %16616 = getelementptr inbounds i16, i16* %blur_x879, i64 %16615
  %16617 = bitcast i16* %16616 to <16 x i16>*
  %16618 = load <16 x i16>, <16 x i16>* %16617, align 2, !tbaa !399
  %16619 = getelementptr inbounds i16, i16* %16616, i64 16
  %16620 = bitcast i16* %16619 to <16 x i16>*
  %16621 = load <16 x i16>, <16 x i16>* %16620, align 2, !tbaa !399
  %16622 = add nsw i64 %16441, %16607
  %16623 = getelementptr inbounds i16, i16* %blur_x879, i64 %16622
  %16624 = bitcast i16* %16623 to <16 x i16>*
  %16625 = load <16 x i16>, <16 x i16>* %16624, align 2, !tbaa !399
  %16626 = getelementptr inbounds i16, i16* %16623, i64 16
  %16627 = bitcast i16* %16626 to <16 x i16>*
  %16628 = load <16 x i16>, <16 x i16>* %16627, align 2, !tbaa !399
  %16629 = add nsw i64 %16444, %16607
  %16630 = getelementptr inbounds i16, i16* %blur_x879, i64 %16629
  %16631 = bitcast i16* %16630 to <16 x i16>*
  %16632 = load <16 x i16>, <16 x i16>* %16631, align 2, !tbaa !399
  %16633 = getelementptr inbounds i16, i16* %16630, i64 16
  %16634 = bitcast i16* %16633 to <16 x i16>*
  %16635 = load <16 x i16>, <16 x i16>* %16634, align 2, !tbaa !399
  %16636 = add nsw i64 %16447, %16607
  %16637 = getelementptr inbounds i16, i16* %blur_x879, i64 %16636
  %16638 = bitcast i16* %16637 to <16 x i16>*
  %16639 = load <16 x i16>, <16 x i16>* %16638, align 2, !tbaa !399
  %16640 = getelementptr inbounds i16, i16* %16637, i64 16
  %16641 = bitcast i16* %16640 to <16 x i16>*
  %16642 = load <16 x i16>, <16 x i16>* %16641, align 2, !tbaa !399
  %16643 = add <16 x i16> %16618, %16611
  %16644 = add <16 x i16> %16643, %16625
  %16645 = add <16 x i16> %16644, %16632
  %16646 = add <16 x i16> %16645, %16639
  %16647 = add <16 x i16> %16621, %16614
  %16648 = add <16 x i16> %16647, %16628
  %16649 = add <16 x i16> %16648, %16635
  %16650 = add <16 x i16> %16649, %16642
  %16651 = shufflevector <16 x i16> %16646, <16 x i16> %16650, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16652 = udiv <32 x i16> %16651, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16653 = shufflevector <32 x i16> %16652, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16654 = add nsw i64 %16450, %16607
  %16655 = getelementptr inbounds i16, i16* %263, i64 %16654
  %16656 = bitcast i16* %16655 to <16 x i16>*
  store <16 x i16> %16653, <16 x i16>* %16656, align 2, !tbaa !401
  %16657 = shufflevector <32 x i16> %16652, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16658 = getelementptr inbounds i16, i16* %16655, i64 16
  %16659 = bitcast i16* %16658 to <16 x i16>*
  store <16 x i16> %16657, <16 x i16>* %16659, align 2, !tbaa !401
  %16660 = add nuw nsw i32 %blur_y.s0.x.x.rebased1032, 1
  %.not2662 = icmp eq i32 %16660, %t1683898
  br i1 %.not2662, label %"end for blur_y.s0.x.x.rebased1031", label %"for blur_y.s0.x.x.rebased1030"

after_bb1042:                                     ; preds = %"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge", %"produce blur_x1045"
  %.pre-phi3557 = phi i32 [ %.pre3556, %"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge" ], [ %16725, %"produce blur_x1045" ]
  %16661 = mul nsw i32 %.pre-phi3557, %a551
  %t17221053 = sub nsw i32 %16661, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1057.preheader", label %"end for blur_y.s0.x.x.rebased1058", !prof !386

"for blur_y.s0.x.x.rebased1057.preheader":        ; preds = %after_bb1042
  %16662 = sext i32 %t17221053 to i64
  %16663 = zext i32 %.pre-phi3543 to i64
  %16664 = mul nsw i64 %16663, %337
  %16665 = sub nsw i64 %16664, %298
  %16666 = zext i32 %.pre-phi3539 to i64
  %16667 = mul nsw i64 %16666, %337
  %16668 = sub nsw i64 %16667, %298
  %16669 = zext i32 %.pre-phi3547 to i64
  %16670 = mul nsw i64 %16669, %337
  %16671 = sub nsw i64 %16670, %298
  %16672 = zext i32 %.pre-phi3557 to i64
  %16673 = mul nsw i64 %16672, %337
  %16674 = sub nsw i64 %16673, %298
  %16675 = zext i32 %.pre-phi3551 to i64
  %16676 = mul nsw i64 %16675, %337
  %16677 = sub nsw i64 %16676, %298
  %16678 = sext i32 %a379 to i64
  %16679 = add nsw i64 %16678, 1
  %16680 = mul nsw i64 %16679, %334
  %16681 = add nsw i64 %16680, %338
  br label %"for blur_y.s0.x.x.rebased1057"

"produce blur_x1045":                             ; preds = %"end for blur_y.s0.x.x.rebased1031"
  %16682 = getelementptr inbounds i16, i16* %read_input822, i64 %342
  %16683 = getelementptr inbounds i16, i16* %16682, i64 -31
  %16684 = bitcast i16* %16683 to <16 x i16>*
  %16685 = load <16 x i16>, <16 x i16>* %16684, align 2, !tbaa !396
  %16686 = getelementptr inbounds i16, i16* %16682, i64 -15
  %16687 = bitcast i16* %16686 to <16 x i16>*
  %16688 = load <16 x i16>, <16 x i16>* %16687, align 2, !tbaa !396
  %16689 = getelementptr inbounds i16, i16* %16682, i64 -32
  %16690 = bitcast i16* %16689 to <16 x i16>*
  %16691 = load <16 x i16>, <16 x i16>* %16690, align 2, !tbaa !396
  %16692 = getelementptr inbounds i16, i16* %16682, i64 -16
  %16693 = bitcast i16* %16692 to <16 x i16>*
  %16694 = load <16 x i16>, <16 x i16>* %16693, align 2, !tbaa !396
  %16695 = getelementptr inbounds i16, i16* %16682, i64 -30
  %16696 = bitcast i16* %16695 to <16 x i16>*
  %16697 = load <16 x i16>, <16 x i16>* %16696, align 2, !tbaa !396
  %16698 = getelementptr inbounds i16, i16* %16682, i64 -14
  %16699 = bitcast i16* %16698 to <16 x i16>*
  %16700 = load <16 x i16>, <16 x i16>* %16699, align 2, !tbaa !396
  %16701 = getelementptr inbounds i16, i16* %16682, i64 -28
  %16702 = bitcast i16* %16701 to <16 x i16>*
  %16703 = load <16 x i16>, <16 x i16>* %16702, align 2, !tbaa !396
  %16704 = getelementptr inbounds i16, i16* %16682, i64 -12
  %16705 = bitcast i16* %16704 to <16 x i16>*
  %16706 = load <16 x i16>, <16 x i16>* %16705, align 2, !tbaa !396
  %16707 = getelementptr inbounds i16, i16* %16682, i64 -29
  %16708 = bitcast i16* %16707 to <16 x i16>*
  %16709 = load <16 x i16>, <16 x i16>* %16708, align 2, !tbaa !396
  %16710 = getelementptr inbounds i16, i16* %16682, i64 -13
  %16711 = bitcast i16* %16710 to <16 x i16>*
  %16712 = load <16 x i16>, <16 x i16>* %16711, align 2, !tbaa !396
  %16713 = add <16 x i16> %16691, %16685
  %16714 = add <16 x i16> %16713, %16697
  %16715 = add <16 x i16> %16714, %16703
  %16716 = add <16 x i16> %16715, %16709
  %16717 = add <16 x i16> %16694, %16688
  %16718 = add <16 x i16> %16717, %16700
  %16719 = add <16 x i16> %16718, %16706
  %16720 = add <16 x i16> %16719, %16712
  %16721 = shufflevector <16 x i16> %16716, <16 x i16> %16720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16722 = udiv <32 x i16> %16721, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16723 = shufflevector <32 x i16> %16722, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16724 = add nsw i32 %a379, 5
  %16725 = and i32 %16724, 7
  %16726 = zext i32 %16725 to i64
  %16727 = mul nsw i64 %299, %16726
  %16728 = add nsw i64 %301, %16727
  %16729 = getelementptr inbounds i16, i16* %blur_x879, i64 %16728
  %16730 = getelementptr inbounds i16, i16* %16729, i64 -32
  %16731 = bitcast i16* %16730 to <16 x i16>*
  store <16 x i16> %16723, <16 x i16>* %16731, align 2, !tbaa !399
  %16732 = shufflevector <32 x i16> %16722, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16733 = getelementptr inbounds i16, i16* %16729, i64 -16
  %16734 = bitcast i16* %16733 to <16 x i16>*
  store <16 x i16> %16732, <16 x i16>* %16734, align 2, !tbaa !399
  %16735 = zext i32 %.pre-phi3543 to i64
  %16736 = mul nsw i64 %16735, %333
  %16737 = add nsw i64 %16736, %296
  %16738 = getelementptr inbounds i16, i16* %blur_x879, i64 %16737
  %16739 = getelementptr inbounds i16, i16* %16738, i64 -32
  %16740 = bitcast i16* %16739 to <16 x i16>*
  %16741 = load <16 x i16>, <16 x i16>* %16740, align 2, !tbaa !399
  %16742 = getelementptr inbounds i16, i16* %16738, i64 -16
  %16743 = bitcast i16* %16742 to <16 x i16>*
  %16744 = load <16 x i16>, <16 x i16>* %16743, align 2, !tbaa !399
  %16745 = zext i32 %.pre-phi3539 to i64
  %16746 = mul nsw i64 %16745, %333
  %16747 = add nsw i64 %16746, %296
  %16748 = getelementptr inbounds i16, i16* %blur_x879, i64 %16747
  %16749 = getelementptr inbounds i16, i16* %16748, i64 -32
  %16750 = bitcast i16* %16749 to <16 x i16>*
  %16751 = load <16 x i16>, <16 x i16>* %16750, align 2, !tbaa !399
  %16752 = getelementptr inbounds i16, i16* %16748, i64 -16
  %16753 = bitcast i16* %16752 to <16 x i16>*
  %16754 = load <16 x i16>, <16 x i16>* %16753, align 2, !tbaa !399
  %16755 = zext i32 %.pre-phi3547 to i64
  %16756 = mul nsw i64 %16755, %333
  %16757 = add nsw i64 %16756, %296
  %16758 = getelementptr inbounds i16, i16* %blur_x879, i64 %16757
  %16759 = getelementptr inbounds i16, i16* %16758, i64 -32
  %16760 = bitcast i16* %16759 to <16 x i16>*
  %16761 = load <16 x i16>, <16 x i16>* %16760, align 2, !tbaa !399
  %16762 = getelementptr inbounds i16, i16* %16758, i64 -16
  %16763 = bitcast i16* %16762 to <16 x i16>*
  %16764 = load <16 x i16>, <16 x i16>* %16763, align 2, !tbaa !399
  %16765 = mul nsw i64 %16726, %333
  %16766 = add nsw i64 %16765, %296
  %16767 = getelementptr inbounds i16, i16* %blur_x879, i64 %16766
  %16768 = getelementptr inbounds i16, i16* %16767, i64 -32
  %16769 = bitcast i16* %16768 to <16 x i16>*
  %16770 = load <16 x i16>, <16 x i16>* %16769, align 2, !tbaa !399
  %16771 = getelementptr inbounds i16, i16* %16767, i64 -16
  %16772 = bitcast i16* %16771 to <16 x i16>*
  %16773 = load <16 x i16>, <16 x i16>* %16772, align 2, !tbaa !399
  %16774 = zext i32 %.pre-phi3551 to i64
  %16775 = mul nsw i64 %16774, %333
  %16776 = add nsw i64 %16775, %296
  %16777 = getelementptr inbounds i16, i16* %blur_x879, i64 %16776
  %16778 = getelementptr inbounds i16, i16* %16777, i64 -32
  %16779 = bitcast i16* %16778 to <16 x i16>*
  %16780 = load <16 x i16>, <16 x i16>* %16779, align 2, !tbaa !399
  %16781 = getelementptr inbounds i16, i16* %16777, i64 -16
  %16782 = bitcast i16* %16781 to <16 x i16>*
  %16783 = load <16 x i16>, <16 x i16>* %16782, align 2, !tbaa !399
  %16784 = add <16 x i16> %16751, %16741
  %16785 = add <16 x i16> %16784, %16761
  %16786 = add <16 x i16> %16785, %16770
  %16787 = add <16 x i16> %16786, %16780
  %16788 = add <16 x i16> %16754, %16744
  %16789 = add <16 x i16> %16788, %16764
  %16790 = add <16 x i16> %16789, %16773
  %16791 = add <16 x i16> %16790, %16783
  %16792 = shufflevector <16 x i16> %16787, <16 x i16> %16791, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16793 = udiv <32 x i16> %16792, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16794 = shufflevector <32 x i16> %16793, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16795 = sext i32 %a379 to i64
  %16796 = add nsw i64 %16795, 1
  %16797 = mul nsw i64 %16796, %334
  %16798 = add nsw i64 %336, %16797
  %16799 = getelementptr inbounds i16, i16* %263, i64 %16798
  %16800 = getelementptr inbounds i16, i16* %16799, i64 -32
  %16801 = bitcast i16* %16800 to <16 x i16>*
  store <16 x i16> %16794, <16 x i16>* %16801, align 2, !tbaa !401
  %16802 = shufflevector <32 x i16> %16793, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16803 = getelementptr inbounds i16, i16* %16799, i64 -16
  %16804 = bitcast i16* %16803 to <16 x i16>*
  store <16 x i16> %16802, <16 x i16>* %16804, align 2, !tbaa !401
  br label %after_bb1042

"for blur_y.s0.x.x.rebased1057":                  ; preds = %"for blur_y.s0.x.x.rebased1057.preheader", %"consume blur_x1065"
  %indvars.iv3376 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1057.preheader" ], [ %indvars.iv.next3377, %"consume blur_x1065" ]
  %16805 = add nsw i64 %indvars.iv3376, %303
  %16806 = icmp slt i64 %16805, 1
  %16807 = trunc i64 %16805 to i32
  %16808 = shl nsw i32 %16807, 5
  %16809 = icmp sgt i32 %198, %16808
  %16810 = or i1 %16806, %16809
  br i1 %16810, label %"produce blur_x1063", label %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge"

"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1057"
  %.pre3558 = shl nsw i64 %16805, 5
  br label %"consume blur_x1065"

"end for blur_y.s0.x.x.rebased1058":              ; preds = %"consume blur_x1065", %after_bb1042
  br i1 %304, label %"for blur_y.s0.x.x.rebased1073.preheader", label %"end for blur_y.s0.x.x.rebased1074", !prof !386

"for blur_y.s0.x.x.rebased1073.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1058"
  %16811 = sext i32 %t17221053 to i64
  %16812 = zext i32 %.pre-phi3543 to i64
  %16813 = mul nsw i64 %16812, %337
  %16814 = sub nsw i64 %16813, %298
  %16815 = zext i32 %.pre-phi3539 to i64
  %16816 = mul nsw i64 %16815, %337
  %16817 = sub nsw i64 %16816, %298
  %16818 = zext i32 %.pre-phi3547 to i64
  %16819 = mul nsw i64 %16818, %337
  %16820 = sub nsw i64 %16819, %298
  %16821 = zext i32 %.pre-phi3557 to i64
  %16822 = mul nsw i64 %16821, %337
  %16823 = sub nsw i64 %16822, %298
  %16824 = zext i32 %.pre-phi3551 to i64
  %16825 = mul nsw i64 %16824, %337
  %16826 = sub nsw i64 %16825, %298
  %16827 = sext i32 %a379 to i64
  %16828 = add nsw i64 %16827, 1
  %16829 = mul nsw i64 %16828, %334
  %16830 = add nsw i64 %16829, %338
  br label %"for blur_y.s0.x.x.rebased1073"

"produce blur_x1063":                             ; preds = %"for blur_y.s0.x.x.rebased1057"
  %t7281064 = add nsw i32 %343, %16808
  %16831 = sext i32 %t7281064 to i64
  %16832 = getelementptr inbounds i16, i16* %read_input822, i64 %16831
  %16833 = getelementptr inbounds i16, i16* %16832, i64 1
  %16834 = bitcast i16* %16833 to <16 x i16>*
  %16835 = load <16 x i16>, <16 x i16>* %16834, align 2, !tbaa !396
  %16836 = getelementptr inbounds i16, i16* %16832, i64 17
  %16837 = bitcast i16* %16836 to <16 x i16>*
  %16838 = load <16 x i16>, <16 x i16>* %16837, align 2, !tbaa !396
  %16839 = bitcast i16* %16832 to <16 x i16>*
  %16840 = load <16 x i16>, <16 x i16>* %16839, align 2, !tbaa !396
  %16841 = getelementptr inbounds i16, i16* %16832, i64 16
  %16842 = bitcast i16* %16841 to <16 x i16>*
  %16843 = load <16 x i16>, <16 x i16>* %16842, align 2, !tbaa !396
  %16844 = getelementptr inbounds i16, i16* %16832, i64 2
  %16845 = bitcast i16* %16844 to <16 x i16>*
  %16846 = load <16 x i16>, <16 x i16>* %16845, align 2, !tbaa !396
  %16847 = getelementptr inbounds i16, i16* %16832, i64 18
  %16848 = bitcast i16* %16847 to <16 x i16>*
  %16849 = load <16 x i16>, <16 x i16>* %16848, align 2, !tbaa !396
  %16850 = getelementptr inbounds i16, i16* %16832, i64 4
  %16851 = bitcast i16* %16850 to <16 x i16>*
  %16852 = load <16 x i16>, <16 x i16>* %16851, align 2, !tbaa !396
  %16853 = getelementptr inbounds i16, i16* %16832, i64 20
  %16854 = bitcast i16* %16853 to <16 x i16>*
  %16855 = load <16 x i16>, <16 x i16>* %16854, align 2, !tbaa !396
  %16856 = getelementptr inbounds i16, i16* %16832, i64 3
  %16857 = bitcast i16* %16856 to <16 x i16>*
  %16858 = load <16 x i16>, <16 x i16>* %16857, align 2, !tbaa !396
  %16859 = getelementptr inbounds i16, i16* %16832, i64 19
  %16860 = bitcast i16* %16859 to <16 x i16>*
  %16861 = load <16 x i16>, <16 x i16>* %16860, align 2, !tbaa !396
  %16862 = add <16 x i16> %16840, %16835
  %16863 = add <16 x i16> %16862, %16846
  %16864 = add <16 x i16> %16863, %16852
  %16865 = add <16 x i16> %16864, %16858
  %16866 = add <16 x i16> %16843, %16838
  %16867 = add <16 x i16> %16866, %16849
  %16868 = add <16 x i16> %16867, %16855
  %16869 = add <16 x i16> %16868, %16861
  %16870 = shufflevector <16 x i16> %16865, <16 x i16> %16869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16871 = udiv <32 x i16> %16870, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16872 = shufflevector <32 x i16> %16871, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16873 = shl nsw i64 %16805, 5
  %16874 = add nsw i64 %16873, %16662
  %16875 = getelementptr inbounds i16, i16* %blur_x879, i64 %16874
  %16876 = bitcast i16* %16875 to <16 x i16>*
  store <16 x i16> %16872, <16 x i16>* %16876, align 2, !tbaa !399
  %16877 = shufflevector <32 x i16> %16871, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16878 = getelementptr inbounds i16, i16* %16875, i64 16
  %16879 = bitcast i16* %16878 to <16 x i16>*
  store <16 x i16> %16877, <16 x i16>* %16879, align 2, !tbaa !399
  br label %"consume blur_x1065"

"consume blur_x1065":                             ; preds = %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge", %"produce blur_x1063"
  %.pre-phi3559 = phi i64 [ %.pre3558, %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge" ], [ %16873, %"produce blur_x1063" ]
  %16880 = add nsw i64 %16665, %.pre-phi3559
  %16881 = getelementptr inbounds i16, i16* %blur_x879, i64 %16880
  %16882 = bitcast i16* %16881 to <16 x i16>*
  %16883 = load <16 x i16>, <16 x i16>* %16882, align 2, !tbaa !399
  %16884 = getelementptr inbounds i16, i16* %16881, i64 16
  %16885 = bitcast i16* %16884 to <16 x i16>*
  %16886 = load <16 x i16>, <16 x i16>* %16885, align 2, !tbaa !399
  %16887 = add nsw i64 %16668, %.pre-phi3559
  %16888 = getelementptr inbounds i16, i16* %blur_x879, i64 %16887
  %16889 = bitcast i16* %16888 to <16 x i16>*
  %16890 = load <16 x i16>, <16 x i16>* %16889, align 2, !tbaa !399
  %16891 = getelementptr inbounds i16, i16* %16888, i64 16
  %16892 = bitcast i16* %16891 to <16 x i16>*
  %16893 = load <16 x i16>, <16 x i16>* %16892, align 2, !tbaa !399
  %16894 = add nsw i64 %16671, %.pre-phi3559
  %16895 = getelementptr inbounds i16, i16* %blur_x879, i64 %16894
  %16896 = bitcast i16* %16895 to <16 x i16>*
  %16897 = load <16 x i16>, <16 x i16>* %16896, align 2, !tbaa !399
  %16898 = getelementptr inbounds i16, i16* %16895, i64 16
  %16899 = bitcast i16* %16898 to <16 x i16>*
  %16900 = load <16 x i16>, <16 x i16>* %16899, align 2, !tbaa !399
  %16901 = add nsw i64 %16674, %.pre-phi3559
  %16902 = getelementptr inbounds i16, i16* %blur_x879, i64 %16901
  %16903 = bitcast i16* %16902 to <16 x i16>*
  %16904 = load <16 x i16>, <16 x i16>* %16903, align 2, !tbaa !399
  %16905 = getelementptr inbounds i16, i16* %16902, i64 16
  %16906 = bitcast i16* %16905 to <16 x i16>*
  %16907 = load <16 x i16>, <16 x i16>* %16906, align 2, !tbaa !399
  %16908 = add nsw i64 %16677, %.pre-phi3559
  %16909 = getelementptr inbounds i16, i16* %blur_x879, i64 %16908
  %16910 = bitcast i16* %16909 to <16 x i16>*
  %16911 = load <16 x i16>, <16 x i16>* %16910, align 2, !tbaa !399
  %16912 = getelementptr inbounds i16, i16* %16909, i64 16
  %16913 = bitcast i16* %16912 to <16 x i16>*
  %16914 = load <16 x i16>, <16 x i16>* %16913, align 2, !tbaa !399
  %16915 = add <16 x i16> %16890, %16883
  %16916 = add <16 x i16> %16915, %16897
  %16917 = add <16 x i16> %16916, %16904
  %16918 = add <16 x i16> %16917, %16911
  %16919 = add <16 x i16> %16893, %16886
  %16920 = add <16 x i16> %16919, %16900
  %16921 = add <16 x i16> %16920, %16907
  %16922 = add <16 x i16> %16921, %16914
  %16923 = shufflevector <16 x i16> %16918, <16 x i16> %16922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16924 = udiv <32 x i16> %16923, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16925 = shufflevector <32 x i16> %16924, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16926 = add nsw i64 %16681, %.pre-phi3559
  %16927 = getelementptr inbounds i16, i16* %263, i64 %16926
  %16928 = bitcast i16* %16927 to <16 x i16>*
  store <16 x i16> %16925, <16 x i16>* %16928, align 2, !tbaa !401
  %16929 = shufflevector <32 x i16> %16924, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16930 = getelementptr inbounds i16, i16* %16927, i64 16
  %16931 = bitcast i16* %16930 to <16 x i16>*
  store <16 x i16> %16929, <16 x i16>* %16931, align 2, !tbaa !401
  %indvars.iv.next3377 = add nuw nsw i64 %indvars.iv3376, 1
  %.not2659 = icmp eq i64 %indvars.iv.next3377, %530
  br i1 %.not2659, label %"end for blur_y.s0.x.x.rebased1058", label %"for blur_y.s0.x.x.rebased1057"

"for blur_y.s0.x.x.rebased1073":                  ; preds = %"for blur_y.s0.x.x.rebased1073.preheader", %"consume blur_x1084"
  %blur_y.s0.x.x.rebased1075 = phi i32 [ %17040, %"consume blur_x1084" ], [ 0, %"for blur_y.s0.x.x.rebased1073.preheader" ]
  %16932 = add nsw i32 %blur_y.s0.x.x.rebased1075, %t1626814
  %a1450 = shl nsw i32 %16932, 5
  %16933 = icmp sgt i32 %t1647, %a1450
  %blur_y.s0.x.v0.base.s1076 = select i1 %16933, i32 %a1450, i32 %t1647
  %16934 = icmp slt i32 %16932, 1
  %16935 = icmp sgt i32 %198, %a1450
  %16936 = or i1 %16934, %16935
  br i1 %16936, label %"produce blur_x1081", label %"consume blur_x1084"

"end for blur_y.s0.x.x.rebased1074":              ; preds = %"consume blur_x1084", %"end for blur_y.s0.x.x.rebased1058"
  br i1 %229, label %"produce blur_x1088", label %"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge"

"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1074"
  %.pre3560 = add nsw i32 %a379, 6
  %.pre3562 = and i32 %.pre3560, 7
  br label %after_bb1085

"produce blur_x1081":                             ; preds = %"for blur_y.s0.x.x.rebased1073"
  %16937 = icmp slt i32 %blur_y.s0.x.v0.base.s1076, %198
  %blur_x.s0.x.v1.base.s1082 = select i1 %16937, i32 %blur_y.s0.x.v0.base.s1076, i32 %198
  %t7331083 = add nsw i32 %343, %blur_x.s0.x.v1.base.s1082
  %16938 = sext i32 %t7331083 to i64
  %16939 = getelementptr inbounds i16, i16* %read_input822, i64 %16938
  %16940 = getelementptr inbounds i16, i16* %16939, i64 1
  %16941 = bitcast i16* %16940 to <16 x i16>*
  %16942 = load <16 x i16>, <16 x i16>* %16941, align 2, !tbaa !396
  %16943 = getelementptr inbounds i16, i16* %16939, i64 17
  %16944 = bitcast i16* %16943 to <16 x i16>*
  %16945 = load <16 x i16>, <16 x i16>* %16944, align 2, !tbaa !396
  %16946 = bitcast i16* %16939 to <16 x i16>*
  %16947 = load <16 x i16>, <16 x i16>* %16946, align 2, !tbaa !396
  %16948 = getelementptr inbounds i16, i16* %16939, i64 16
  %16949 = bitcast i16* %16948 to <16 x i16>*
  %16950 = load <16 x i16>, <16 x i16>* %16949, align 2, !tbaa !396
  %16951 = getelementptr inbounds i16, i16* %16939, i64 2
  %16952 = bitcast i16* %16951 to <16 x i16>*
  %16953 = load <16 x i16>, <16 x i16>* %16952, align 2, !tbaa !396
  %16954 = getelementptr inbounds i16, i16* %16939, i64 18
  %16955 = bitcast i16* %16954 to <16 x i16>*
  %16956 = load <16 x i16>, <16 x i16>* %16955, align 2, !tbaa !396
  %16957 = getelementptr inbounds i16, i16* %16939, i64 4
  %16958 = bitcast i16* %16957 to <16 x i16>*
  %16959 = load <16 x i16>, <16 x i16>* %16958, align 2, !tbaa !396
  %16960 = getelementptr inbounds i16, i16* %16939, i64 20
  %16961 = bitcast i16* %16960 to <16 x i16>*
  %16962 = load <16 x i16>, <16 x i16>* %16961, align 2, !tbaa !396
  %16963 = getelementptr inbounds i16, i16* %16939, i64 3
  %16964 = bitcast i16* %16963 to <16 x i16>*
  %16965 = load <16 x i16>, <16 x i16>* %16964, align 2, !tbaa !396
  %16966 = getelementptr inbounds i16, i16* %16939, i64 19
  %16967 = bitcast i16* %16966 to <16 x i16>*
  %16968 = load <16 x i16>, <16 x i16>* %16967, align 2, !tbaa !396
  %16969 = add <16 x i16> %16947, %16942
  %16970 = add <16 x i16> %16969, %16953
  %16971 = add <16 x i16> %16970, %16959
  %16972 = add <16 x i16> %16971, %16965
  %16973 = add <16 x i16> %16950, %16945
  %16974 = add <16 x i16> %16973, %16956
  %16975 = add <16 x i16> %16974, %16962
  %16976 = add <16 x i16> %16975, %16968
  %16977 = shufflevector <16 x i16> %16972, <16 x i16> %16976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16978 = udiv <32 x i16> %16977, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16979 = shufflevector <32 x i16> %16978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16980 = sext i32 %blur_x.s0.x.v1.base.s1082 to i64
  %16981 = add nsw i64 %16980, %16811
  %16982 = getelementptr inbounds i16, i16* %blur_x879, i64 %16981
  %16983 = bitcast i16* %16982 to <16 x i16>*
  store <16 x i16> %16979, <16 x i16>* %16983, align 2, !tbaa !399
  %16984 = shufflevector <32 x i16> %16978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16985 = getelementptr inbounds i16, i16* %16982, i64 16
  %16986 = bitcast i16* %16985 to <16 x i16>*
  store <16 x i16> %16984, <16 x i16>* %16986, align 2, !tbaa !399
  br label %"consume blur_x1084"

"consume blur_x1084":                             ; preds = %"for blur_y.s0.x.x.rebased1073", %"produce blur_x1081"
  %16987 = sext i32 %blur_y.s0.x.v0.base.s1076 to i64
  %16988 = add nsw i64 %16814, %16987
  %16989 = getelementptr inbounds i16, i16* %blur_x879, i64 %16988
  %16990 = bitcast i16* %16989 to <16 x i16>*
  %16991 = load <16 x i16>, <16 x i16>* %16990, align 2, !tbaa !399
  %16992 = getelementptr inbounds i16, i16* %16989, i64 16
  %16993 = bitcast i16* %16992 to <16 x i16>*
  %16994 = load <16 x i16>, <16 x i16>* %16993, align 2, !tbaa !399
  %16995 = add nsw i64 %16817, %16987
  %16996 = getelementptr inbounds i16, i16* %blur_x879, i64 %16995
  %16997 = bitcast i16* %16996 to <16 x i16>*
  %16998 = load <16 x i16>, <16 x i16>* %16997, align 2, !tbaa !399
  %16999 = getelementptr inbounds i16, i16* %16996, i64 16
  %17000 = bitcast i16* %16999 to <16 x i16>*
  %17001 = load <16 x i16>, <16 x i16>* %17000, align 2, !tbaa !399
  %17002 = add nsw i64 %16820, %16987
  %17003 = getelementptr inbounds i16, i16* %blur_x879, i64 %17002
  %17004 = bitcast i16* %17003 to <16 x i16>*
  %17005 = load <16 x i16>, <16 x i16>* %17004, align 2, !tbaa !399
  %17006 = getelementptr inbounds i16, i16* %17003, i64 16
  %17007 = bitcast i16* %17006 to <16 x i16>*
  %17008 = load <16 x i16>, <16 x i16>* %17007, align 2, !tbaa !399
  %17009 = add nsw i64 %16823, %16987
  %17010 = getelementptr inbounds i16, i16* %blur_x879, i64 %17009
  %17011 = bitcast i16* %17010 to <16 x i16>*
  %17012 = load <16 x i16>, <16 x i16>* %17011, align 2, !tbaa !399
  %17013 = getelementptr inbounds i16, i16* %17010, i64 16
  %17014 = bitcast i16* %17013 to <16 x i16>*
  %17015 = load <16 x i16>, <16 x i16>* %17014, align 2, !tbaa !399
  %17016 = add nsw i64 %16826, %16987
  %17017 = getelementptr inbounds i16, i16* %blur_x879, i64 %17016
  %17018 = bitcast i16* %17017 to <16 x i16>*
  %17019 = load <16 x i16>, <16 x i16>* %17018, align 2, !tbaa !399
  %17020 = getelementptr inbounds i16, i16* %17017, i64 16
  %17021 = bitcast i16* %17020 to <16 x i16>*
  %17022 = load <16 x i16>, <16 x i16>* %17021, align 2, !tbaa !399
  %17023 = add <16 x i16> %16998, %16991
  %17024 = add <16 x i16> %17023, %17005
  %17025 = add <16 x i16> %17024, %17012
  %17026 = add <16 x i16> %17025, %17019
  %17027 = add <16 x i16> %17001, %16994
  %17028 = add <16 x i16> %17027, %17008
  %17029 = add <16 x i16> %17028, %17015
  %17030 = add <16 x i16> %17029, %17022
  %17031 = shufflevector <16 x i16> %17026, <16 x i16> %17030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17032 = udiv <32 x i16> %17031, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17033 = shufflevector <32 x i16> %17032, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17034 = add nsw i64 %16830, %16987
  %17035 = getelementptr inbounds i16, i16* %263, i64 %17034
  %17036 = bitcast i16* %17035 to <16 x i16>*
  store <16 x i16> %17033, <16 x i16>* %17036, align 2, !tbaa !401
  %17037 = shufflevector <32 x i16> %17032, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17038 = getelementptr inbounds i16, i16* %17035, i64 16
  %17039 = bitcast i16* %17038 to <16 x i16>*
  store <16 x i16> %17037, <16 x i16>* %17039, align 2, !tbaa !401
  %17040 = add nuw nsw i32 %blur_y.s0.x.x.rebased1075, 1
  %.not2658 = icmp eq i32 %17040, %t1683898
  br i1 %.not2658, label %"end for blur_y.s0.x.x.rebased1074", label %"for blur_y.s0.x.x.rebased1073"

after_bb1085:                                     ; preds = %"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge", %"produce blur_x1088"
  %.pre-phi3563 = phi i32 [ %.pre3562, %"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge" ], [ %17105, %"produce blur_x1088" ]
  %17041 = mul nsw i32 %.pre-phi3563, %a551
  %t17381096 = sub nsw i32 %17041, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1100.preheader", label %"end for blur_y.s0.x.x.rebased1101", !prof !386

"for blur_y.s0.x.x.rebased1100.preheader":        ; preds = %after_bb1085
  %17042 = sext i32 %t17381096 to i64
  %17043 = zext i32 %.pre-phi3547 to i64
  %17044 = mul nsw i64 %17043, %337
  %17045 = sub nsw i64 %17044, %298
  %17046 = zext i32 %.pre-phi3543 to i64
  %17047 = mul nsw i64 %17046, %337
  %17048 = sub nsw i64 %17047, %298
  %17049 = zext i32 %.pre-phi3551 to i64
  %17050 = mul nsw i64 %17049, %337
  %17051 = sub nsw i64 %17050, %298
  %17052 = zext i32 %.pre-phi3563 to i64
  %17053 = mul nsw i64 %17052, %337
  %17054 = sub nsw i64 %17053, %298
  %17055 = zext i32 %.pre-phi3557 to i64
  %17056 = mul nsw i64 %17055, %337
  %17057 = sub nsw i64 %17056, %298
  %17058 = sext i32 %a379 to i64
  %17059 = add nsw i64 %17058, 2
  %17060 = mul nsw i64 %17059, %334
  %17061 = add nsw i64 %17060, %338
  br label %"for blur_y.s0.x.x.rebased1100"

"produce blur_x1088":                             ; preds = %"end for blur_y.s0.x.x.rebased1074"
  %17062 = getelementptr inbounds i16, i16* %read_input822, i64 %347
  %17063 = getelementptr inbounds i16, i16* %17062, i64 -31
  %17064 = bitcast i16* %17063 to <16 x i16>*
  %17065 = load <16 x i16>, <16 x i16>* %17064, align 2, !tbaa !396
  %17066 = getelementptr inbounds i16, i16* %17062, i64 -15
  %17067 = bitcast i16* %17066 to <16 x i16>*
  %17068 = load <16 x i16>, <16 x i16>* %17067, align 2, !tbaa !396
  %17069 = getelementptr inbounds i16, i16* %17062, i64 -32
  %17070 = bitcast i16* %17069 to <16 x i16>*
  %17071 = load <16 x i16>, <16 x i16>* %17070, align 2, !tbaa !396
  %17072 = getelementptr inbounds i16, i16* %17062, i64 -16
  %17073 = bitcast i16* %17072 to <16 x i16>*
  %17074 = load <16 x i16>, <16 x i16>* %17073, align 2, !tbaa !396
  %17075 = getelementptr inbounds i16, i16* %17062, i64 -30
  %17076 = bitcast i16* %17075 to <16 x i16>*
  %17077 = load <16 x i16>, <16 x i16>* %17076, align 2, !tbaa !396
  %17078 = getelementptr inbounds i16, i16* %17062, i64 -14
  %17079 = bitcast i16* %17078 to <16 x i16>*
  %17080 = load <16 x i16>, <16 x i16>* %17079, align 2, !tbaa !396
  %17081 = getelementptr inbounds i16, i16* %17062, i64 -28
  %17082 = bitcast i16* %17081 to <16 x i16>*
  %17083 = load <16 x i16>, <16 x i16>* %17082, align 2, !tbaa !396
  %17084 = getelementptr inbounds i16, i16* %17062, i64 -12
  %17085 = bitcast i16* %17084 to <16 x i16>*
  %17086 = load <16 x i16>, <16 x i16>* %17085, align 2, !tbaa !396
  %17087 = getelementptr inbounds i16, i16* %17062, i64 -29
  %17088 = bitcast i16* %17087 to <16 x i16>*
  %17089 = load <16 x i16>, <16 x i16>* %17088, align 2, !tbaa !396
  %17090 = getelementptr inbounds i16, i16* %17062, i64 -13
  %17091 = bitcast i16* %17090 to <16 x i16>*
  %17092 = load <16 x i16>, <16 x i16>* %17091, align 2, !tbaa !396
  %17093 = add <16 x i16> %17071, %17065
  %17094 = add <16 x i16> %17093, %17077
  %17095 = add <16 x i16> %17094, %17083
  %17096 = add <16 x i16> %17095, %17089
  %17097 = add <16 x i16> %17074, %17068
  %17098 = add <16 x i16> %17097, %17080
  %17099 = add <16 x i16> %17098, %17086
  %17100 = add <16 x i16> %17099, %17092
  %17101 = shufflevector <16 x i16> %17096, <16 x i16> %17100, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17102 = udiv <32 x i16> %17101, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17103 = shufflevector <32 x i16> %17102, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17104 = add nsw i32 %a379, 6
  %17105 = and i32 %17104, 7
  %17106 = zext i32 %17105 to i64
  %17107 = mul nsw i64 %299, %17106
  %17108 = add nsw i64 %301, %17107
  %17109 = getelementptr inbounds i16, i16* %blur_x879, i64 %17108
  %17110 = getelementptr inbounds i16, i16* %17109, i64 -32
  %17111 = bitcast i16* %17110 to <16 x i16>*
  store <16 x i16> %17103, <16 x i16>* %17111, align 2, !tbaa !399
  %17112 = shufflevector <32 x i16> %17102, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17113 = getelementptr inbounds i16, i16* %17109, i64 -16
  %17114 = bitcast i16* %17113 to <16 x i16>*
  store <16 x i16> %17112, <16 x i16>* %17114, align 2, !tbaa !399
  %17115 = zext i32 %.pre-phi3547 to i64
  %17116 = mul nsw i64 %17115, %333
  %17117 = add nsw i64 %17116, %296
  %17118 = getelementptr inbounds i16, i16* %blur_x879, i64 %17117
  %17119 = getelementptr inbounds i16, i16* %17118, i64 -32
  %17120 = bitcast i16* %17119 to <16 x i16>*
  %17121 = load <16 x i16>, <16 x i16>* %17120, align 2, !tbaa !399
  %17122 = getelementptr inbounds i16, i16* %17118, i64 -16
  %17123 = bitcast i16* %17122 to <16 x i16>*
  %17124 = load <16 x i16>, <16 x i16>* %17123, align 2, !tbaa !399
  %17125 = zext i32 %.pre-phi3543 to i64
  %17126 = mul nsw i64 %17125, %333
  %17127 = add nsw i64 %17126, %296
  %17128 = getelementptr inbounds i16, i16* %blur_x879, i64 %17127
  %17129 = getelementptr inbounds i16, i16* %17128, i64 -32
  %17130 = bitcast i16* %17129 to <16 x i16>*
  %17131 = load <16 x i16>, <16 x i16>* %17130, align 2, !tbaa !399
  %17132 = getelementptr inbounds i16, i16* %17128, i64 -16
  %17133 = bitcast i16* %17132 to <16 x i16>*
  %17134 = load <16 x i16>, <16 x i16>* %17133, align 2, !tbaa !399
  %17135 = zext i32 %.pre-phi3551 to i64
  %17136 = mul nsw i64 %17135, %333
  %17137 = add nsw i64 %17136, %296
  %17138 = getelementptr inbounds i16, i16* %blur_x879, i64 %17137
  %17139 = getelementptr inbounds i16, i16* %17138, i64 -32
  %17140 = bitcast i16* %17139 to <16 x i16>*
  %17141 = load <16 x i16>, <16 x i16>* %17140, align 2, !tbaa !399
  %17142 = getelementptr inbounds i16, i16* %17138, i64 -16
  %17143 = bitcast i16* %17142 to <16 x i16>*
  %17144 = load <16 x i16>, <16 x i16>* %17143, align 2, !tbaa !399
  %17145 = mul nsw i64 %17106, %333
  %17146 = add nsw i64 %17145, %296
  %17147 = getelementptr inbounds i16, i16* %blur_x879, i64 %17146
  %17148 = getelementptr inbounds i16, i16* %17147, i64 -32
  %17149 = bitcast i16* %17148 to <16 x i16>*
  %17150 = load <16 x i16>, <16 x i16>* %17149, align 2, !tbaa !399
  %17151 = getelementptr inbounds i16, i16* %17147, i64 -16
  %17152 = bitcast i16* %17151 to <16 x i16>*
  %17153 = load <16 x i16>, <16 x i16>* %17152, align 2, !tbaa !399
  %17154 = zext i32 %.pre-phi3557 to i64
  %17155 = mul nsw i64 %17154, %333
  %17156 = add nsw i64 %17155, %296
  %17157 = getelementptr inbounds i16, i16* %blur_x879, i64 %17156
  %17158 = getelementptr inbounds i16, i16* %17157, i64 -32
  %17159 = bitcast i16* %17158 to <16 x i16>*
  %17160 = load <16 x i16>, <16 x i16>* %17159, align 2, !tbaa !399
  %17161 = getelementptr inbounds i16, i16* %17157, i64 -16
  %17162 = bitcast i16* %17161 to <16 x i16>*
  %17163 = load <16 x i16>, <16 x i16>* %17162, align 2, !tbaa !399
  %17164 = add <16 x i16> %17131, %17121
  %17165 = add <16 x i16> %17164, %17141
  %17166 = add <16 x i16> %17165, %17150
  %17167 = add <16 x i16> %17166, %17160
  %17168 = add <16 x i16> %17134, %17124
  %17169 = add <16 x i16> %17168, %17144
  %17170 = add <16 x i16> %17169, %17153
  %17171 = add <16 x i16> %17170, %17163
  %17172 = shufflevector <16 x i16> %17167, <16 x i16> %17171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17173 = udiv <32 x i16> %17172, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17174 = shufflevector <32 x i16> %17173, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17175 = sext i32 %a379 to i64
  %17176 = add nsw i64 %17175, 2
  %17177 = mul nsw i64 %17176, %334
  %17178 = add nsw i64 %336, %17177
  %17179 = getelementptr inbounds i16, i16* %263, i64 %17178
  %17180 = getelementptr inbounds i16, i16* %17179, i64 -32
  %17181 = bitcast i16* %17180 to <16 x i16>*
  store <16 x i16> %17174, <16 x i16>* %17181, align 2, !tbaa !401
  %17182 = shufflevector <32 x i16> %17173, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17183 = getelementptr inbounds i16, i16* %17179, i64 -16
  %17184 = bitcast i16* %17183 to <16 x i16>*
  store <16 x i16> %17182, <16 x i16>* %17184, align 2, !tbaa !401
  br label %after_bb1085

"for blur_y.s0.x.x.rebased1100":                  ; preds = %"for blur_y.s0.x.x.rebased1100.preheader", %"consume blur_x1108"
  %indvars.iv3378 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1100.preheader" ], [ %indvars.iv.next3379, %"consume blur_x1108" ]
  %17185 = add nsw i64 %indvars.iv3378, %303
  %17186 = icmp slt i64 %17185, 1
  %17187 = trunc i64 %17185 to i32
  %17188 = shl nsw i32 %17187, 5
  %17189 = icmp sgt i32 %198, %17188
  %17190 = or i1 %17186, %17189
  br i1 %17190, label %"produce blur_x1106", label %"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge"

"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1100"
  %.pre3564 = shl nsw i64 %17185, 5
  br label %"consume blur_x1108"

"end for blur_y.s0.x.x.rebased1101":              ; preds = %"consume blur_x1108", %after_bb1085
  br i1 %304, label %"for blur_y.s0.x.x.rebased1116.preheader", label %"end for blur_y.s0.x.x.rebased1117", !prof !386

"for blur_y.s0.x.x.rebased1116.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1101"
  %17191 = sext i32 %t17381096 to i64
  %17192 = zext i32 %.pre-phi3547 to i64
  %17193 = mul nsw i64 %17192, %337
  %17194 = sub nsw i64 %17193, %298
  %17195 = zext i32 %.pre-phi3543 to i64
  %17196 = mul nsw i64 %17195, %337
  %17197 = sub nsw i64 %17196, %298
  %17198 = zext i32 %.pre-phi3551 to i64
  %17199 = mul nsw i64 %17198, %337
  %17200 = sub nsw i64 %17199, %298
  %17201 = zext i32 %.pre-phi3563 to i64
  %17202 = mul nsw i64 %17201, %337
  %17203 = sub nsw i64 %17202, %298
  %17204 = zext i32 %.pre-phi3557 to i64
  %17205 = mul nsw i64 %17204, %337
  %17206 = sub nsw i64 %17205, %298
  %17207 = sext i32 %a379 to i64
  %17208 = add nsw i64 %17207, 2
  %17209 = mul nsw i64 %17208, %334
  %17210 = add nsw i64 %17209, %338
  br label %"for blur_y.s0.x.x.rebased1116"

"produce blur_x1106":                             ; preds = %"for blur_y.s0.x.x.rebased1100"
  %t7441107 = add nsw i32 %349, %17188
  %17211 = sext i32 %t7441107 to i64
  %17212 = getelementptr inbounds i16, i16* %read_input822, i64 %17211
  %17213 = getelementptr inbounds i16, i16* %17212, i64 1
  %17214 = bitcast i16* %17213 to <16 x i16>*
  %17215 = load <16 x i16>, <16 x i16>* %17214, align 2, !tbaa !396
  %17216 = getelementptr inbounds i16, i16* %17212, i64 17
  %17217 = bitcast i16* %17216 to <16 x i16>*
  %17218 = load <16 x i16>, <16 x i16>* %17217, align 2, !tbaa !396
  %17219 = bitcast i16* %17212 to <16 x i16>*
  %17220 = load <16 x i16>, <16 x i16>* %17219, align 2, !tbaa !396
  %17221 = getelementptr inbounds i16, i16* %17212, i64 16
  %17222 = bitcast i16* %17221 to <16 x i16>*
  %17223 = load <16 x i16>, <16 x i16>* %17222, align 2, !tbaa !396
  %17224 = getelementptr inbounds i16, i16* %17212, i64 2
  %17225 = bitcast i16* %17224 to <16 x i16>*
  %17226 = load <16 x i16>, <16 x i16>* %17225, align 2, !tbaa !396
  %17227 = getelementptr inbounds i16, i16* %17212, i64 18
  %17228 = bitcast i16* %17227 to <16 x i16>*
  %17229 = load <16 x i16>, <16 x i16>* %17228, align 2, !tbaa !396
  %17230 = getelementptr inbounds i16, i16* %17212, i64 4
  %17231 = bitcast i16* %17230 to <16 x i16>*
  %17232 = load <16 x i16>, <16 x i16>* %17231, align 2, !tbaa !396
  %17233 = getelementptr inbounds i16, i16* %17212, i64 20
  %17234 = bitcast i16* %17233 to <16 x i16>*
  %17235 = load <16 x i16>, <16 x i16>* %17234, align 2, !tbaa !396
  %17236 = getelementptr inbounds i16, i16* %17212, i64 3
  %17237 = bitcast i16* %17236 to <16 x i16>*
  %17238 = load <16 x i16>, <16 x i16>* %17237, align 2, !tbaa !396
  %17239 = getelementptr inbounds i16, i16* %17212, i64 19
  %17240 = bitcast i16* %17239 to <16 x i16>*
  %17241 = load <16 x i16>, <16 x i16>* %17240, align 2, !tbaa !396
  %17242 = add <16 x i16> %17220, %17215
  %17243 = add <16 x i16> %17242, %17226
  %17244 = add <16 x i16> %17243, %17232
  %17245 = add <16 x i16> %17244, %17238
  %17246 = add <16 x i16> %17223, %17218
  %17247 = add <16 x i16> %17246, %17229
  %17248 = add <16 x i16> %17247, %17235
  %17249 = add <16 x i16> %17248, %17241
  %17250 = shufflevector <16 x i16> %17245, <16 x i16> %17249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17251 = udiv <32 x i16> %17250, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17252 = shufflevector <32 x i16> %17251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17253 = shl nsw i64 %17185, 5
  %17254 = add nsw i64 %17253, %17042
  %17255 = getelementptr inbounds i16, i16* %blur_x879, i64 %17254
  %17256 = bitcast i16* %17255 to <16 x i16>*
  store <16 x i16> %17252, <16 x i16>* %17256, align 2, !tbaa !399
  %17257 = shufflevector <32 x i16> %17251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17258 = getelementptr inbounds i16, i16* %17255, i64 16
  %17259 = bitcast i16* %17258 to <16 x i16>*
  store <16 x i16> %17257, <16 x i16>* %17259, align 2, !tbaa !399
  br label %"consume blur_x1108"

"consume blur_x1108":                             ; preds = %"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge", %"produce blur_x1106"
  %.pre-phi3565 = phi i64 [ %.pre3564, %"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge" ], [ %17253, %"produce blur_x1106" ]
  %17260 = add nsw i64 %17045, %.pre-phi3565
  %17261 = getelementptr inbounds i16, i16* %blur_x879, i64 %17260
  %17262 = bitcast i16* %17261 to <16 x i16>*
  %17263 = load <16 x i16>, <16 x i16>* %17262, align 2, !tbaa !399
  %17264 = getelementptr inbounds i16, i16* %17261, i64 16
  %17265 = bitcast i16* %17264 to <16 x i16>*
  %17266 = load <16 x i16>, <16 x i16>* %17265, align 2, !tbaa !399
  %17267 = add nsw i64 %17048, %.pre-phi3565
  %17268 = getelementptr inbounds i16, i16* %blur_x879, i64 %17267
  %17269 = bitcast i16* %17268 to <16 x i16>*
  %17270 = load <16 x i16>, <16 x i16>* %17269, align 2, !tbaa !399
  %17271 = getelementptr inbounds i16, i16* %17268, i64 16
  %17272 = bitcast i16* %17271 to <16 x i16>*
  %17273 = load <16 x i16>, <16 x i16>* %17272, align 2, !tbaa !399
  %17274 = add nsw i64 %17051, %.pre-phi3565
  %17275 = getelementptr inbounds i16, i16* %blur_x879, i64 %17274
  %17276 = bitcast i16* %17275 to <16 x i16>*
  %17277 = load <16 x i16>, <16 x i16>* %17276, align 2, !tbaa !399
  %17278 = getelementptr inbounds i16, i16* %17275, i64 16
  %17279 = bitcast i16* %17278 to <16 x i16>*
  %17280 = load <16 x i16>, <16 x i16>* %17279, align 2, !tbaa !399
  %17281 = add nsw i64 %17054, %.pre-phi3565
  %17282 = getelementptr inbounds i16, i16* %blur_x879, i64 %17281
  %17283 = bitcast i16* %17282 to <16 x i16>*
  %17284 = load <16 x i16>, <16 x i16>* %17283, align 2, !tbaa !399
  %17285 = getelementptr inbounds i16, i16* %17282, i64 16
  %17286 = bitcast i16* %17285 to <16 x i16>*
  %17287 = load <16 x i16>, <16 x i16>* %17286, align 2, !tbaa !399
  %17288 = add nsw i64 %17057, %.pre-phi3565
  %17289 = getelementptr inbounds i16, i16* %blur_x879, i64 %17288
  %17290 = bitcast i16* %17289 to <16 x i16>*
  %17291 = load <16 x i16>, <16 x i16>* %17290, align 2, !tbaa !399
  %17292 = getelementptr inbounds i16, i16* %17289, i64 16
  %17293 = bitcast i16* %17292 to <16 x i16>*
  %17294 = load <16 x i16>, <16 x i16>* %17293, align 2, !tbaa !399
  %17295 = add <16 x i16> %17270, %17263
  %17296 = add <16 x i16> %17295, %17277
  %17297 = add <16 x i16> %17296, %17284
  %17298 = add <16 x i16> %17297, %17291
  %17299 = add <16 x i16> %17273, %17266
  %17300 = add <16 x i16> %17299, %17280
  %17301 = add <16 x i16> %17300, %17287
  %17302 = add <16 x i16> %17301, %17294
  %17303 = shufflevector <16 x i16> %17298, <16 x i16> %17302, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17304 = udiv <32 x i16> %17303, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17305 = shufflevector <32 x i16> %17304, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17306 = add nsw i64 %17061, %.pre-phi3565
  %17307 = getelementptr inbounds i16, i16* %263, i64 %17306
  %17308 = bitcast i16* %17307 to <16 x i16>*
  store <16 x i16> %17305, <16 x i16>* %17308, align 2, !tbaa !401
  %17309 = shufflevector <32 x i16> %17304, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17310 = getelementptr inbounds i16, i16* %17307, i64 16
  %17311 = bitcast i16* %17310 to <16 x i16>*
  store <16 x i16> %17309, <16 x i16>* %17311, align 2, !tbaa !401
  %indvars.iv.next3379 = add nuw nsw i64 %indvars.iv3378, 1
  %.not2655 = icmp eq i64 %indvars.iv.next3379, %530
  br i1 %.not2655, label %"end for blur_y.s0.x.x.rebased1101", label %"for blur_y.s0.x.x.rebased1100"

"for blur_y.s0.x.x.rebased1116":                  ; preds = %"for blur_y.s0.x.x.rebased1116.preheader", %"consume blur_x1127"
  %blur_y.s0.x.x.rebased1118 = phi i32 [ %17420, %"consume blur_x1127" ], [ 0, %"for blur_y.s0.x.x.rebased1116.preheader" ]
  %17312 = add nsw i32 %blur_y.s0.x.x.rebased1118, %t1626814
  %a1623 = shl nsw i32 %17312, 5
  %17313 = icmp sgt i32 %t1647, %a1623
  %blur_y.s0.x.v0.base.s1119 = select i1 %17313, i32 %a1623, i32 %t1647
  %17314 = icmp slt i32 %17312, 1
  %17315 = icmp sgt i32 %198, %a1623
  %17316 = or i1 %17314, %17315
  br i1 %17316, label %"produce blur_x1124", label %"consume blur_x1127"

"end for blur_y.s0.x.x.rebased1117":              ; preds = %"consume blur_x1127", %"end for blur_y.s0.x.x.rebased1101"
  br i1 %229, label %"produce blur_x1131", label %"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge"

"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1117"
  %.pre3566 = add nsw i32 %a379, 7
  %.pre3568 = and i32 %.pre3566, 7
  br label %after_bb1128

"produce blur_x1124":                             ; preds = %"for blur_y.s0.x.x.rebased1116"
  %17317 = icmp slt i32 %blur_y.s0.x.v0.base.s1119, %198
  %blur_x.s0.x.v1.base.s1125 = select i1 %17317, i32 %blur_y.s0.x.v0.base.s1119, i32 %198
  %t7491126 = add nsw i32 %349, %blur_x.s0.x.v1.base.s1125
  %17318 = sext i32 %t7491126 to i64
  %17319 = getelementptr inbounds i16, i16* %read_input822, i64 %17318
  %17320 = getelementptr inbounds i16, i16* %17319, i64 1
  %17321 = bitcast i16* %17320 to <16 x i16>*
  %17322 = load <16 x i16>, <16 x i16>* %17321, align 2, !tbaa !396
  %17323 = getelementptr inbounds i16, i16* %17319, i64 17
  %17324 = bitcast i16* %17323 to <16 x i16>*
  %17325 = load <16 x i16>, <16 x i16>* %17324, align 2, !tbaa !396
  %17326 = bitcast i16* %17319 to <16 x i16>*
  %17327 = load <16 x i16>, <16 x i16>* %17326, align 2, !tbaa !396
  %17328 = getelementptr inbounds i16, i16* %17319, i64 16
  %17329 = bitcast i16* %17328 to <16 x i16>*
  %17330 = load <16 x i16>, <16 x i16>* %17329, align 2, !tbaa !396
  %17331 = getelementptr inbounds i16, i16* %17319, i64 2
  %17332 = bitcast i16* %17331 to <16 x i16>*
  %17333 = load <16 x i16>, <16 x i16>* %17332, align 2, !tbaa !396
  %17334 = getelementptr inbounds i16, i16* %17319, i64 18
  %17335 = bitcast i16* %17334 to <16 x i16>*
  %17336 = load <16 x i16>, <16 x i16>* %17335, align 2, !tbaa !396
  %17337 = getelementptr inbounds i16, i16* %17319, i64 4
  %17338 = bitcast i16* %17337 to <16 x i16>*
  %17339 = load <16 x i16>, <16 x i16>* %17338, align 2, !tbaa !396
  %17340 = getelementptr inbounds i16, i16* %17319, i64 20
  %17341 = bitcast i16* %17340 to <16 x i16>*
  %17342 = load <16 x i16>, <16 x i16>* %17341, align 2, !tbaa !396
  %17343 = getelementptr inbounds i16, i16* %17319, i64 3
  %17344 = bitcast i16* %17343 to <16 x i16>*
  %17345 = load <16 x i16>, <16 x i16>* %17344, align 2, !tbaa !396
  %17346 = getelementptr inbounds i16, i16* %17319, i64 19
  %17347 = bitcast i16* %17346 to <16 x i16>*
  %17348 = load <16 x i16>, <16 x i16>* %17347, align 2, !tbaa !396
  %17349 = add <16 x i16> %17327, %17322
  %17350 = add <16 x i16> %17349, %17333
  %17351 = add <16 x i16> %17350, %17339
  %17352 = add <16 x i16> %17351, %17345
  %17353 = add <16 x i16> %17330, %17325
  %17354 = add <16 x i16> %17353, %17336
  %17355 = add <16 x i16> %17354, %17342
  %17356 = add <16 x i16> %17355, %17348
  %17357 = shufflevector <16 x i16> %17352, <16 x i16> %17356, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17358 = udiv <32 x i16> %17357, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17359 = shufflevector <32 x i16> %17358, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17360 = sext i32 %blur_x.s0.x.v1.base.s1125 to i64
  %17361 = add nsw i64 %17360, %17191
  %17362 = getelementptr inbounds i16, i16* %blur_x879, i64 %17361
  %17363 = bitcast i16* %17362 to <16 x i16>*
  store <16 x i16> %17359, <16 x i16>* %17363, align 2, !tbaa !399
  %17364 = shufflevector <32 x i16> %17358, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17365 = getelementptr inbounds i16, i16* %17362, i64 16
  %17366 = bitcast i16* %17365 to <16 x i16>*
  store <16 x i16> %17364, <16 x i16>* %17366, align 2, !tbaa !399
  br label %"consume blur_x1127"

"consume blur_x1127":                             ; preds = %"for blur_y.s0.x.x.rebased1116", %"produce blur_x1124"
  %17367 = sext i32 %blur_y.s0.x.v0.base.s1119 to i64
  %17368 = add nsw i64 %17194, %17367
  %17369 = getelementptr inbounds i16, i16* %blur_x879, i64 %17368
  %17370 = bitcast i16* %17369 to <16 x i16>*
  %17371 = load <16 x i16>, <16 x i16>* %17370, align 2, !tbaa !399
  %17372 = getelementptr inbounds i16, i16* %17369, i64 16
  %17373 = bitcast i16* %17372 to <16 x i16>*
  %17374 = load <16 x i16>, <16 x i16>* %17373, align 2, !tbaa !399
  %17375 = add nsw i64 %17197, %17367
  %17376 = getelementptr inbounds i16, i16* %blur_x879, i64 %17375
  %17377 = bitcast i16* %17376 to <16 x i16>*
  %17378 = load <16 x i16>, <16 x i16>* %17377, align 2, !tbaa !399
  %17379 = getelementptr inbounds i16, i16* %17376, i64 16
  %17380 = bitcast i16* %17379 to <16 x i16>*
  %17381 = load <16 x i16>, <16 x i16>* %17380, align 2, !tbaa !399
  %17382 = add nsw i64 %17200, %17367
  %17383 = getelementptr inbounds i16, i16* %blur_x879, i64 %17382
  %17384 = bitcast i16* %17383 to <16 x i16>*
  %17385 = load <16 x i16>, <16 x i16>* %17384, align 2, !tbaa !399
  %17386 = getelementptr inbounds i16, i16* %17383, i64 16
  %17387 = bitcast i16* %17386 to <16 x i16>*
  %17388 = load <16 x i16>, <16 x i16>* %17387, align 2, !tbaa !399
  %17389 = add nsw i64 %17203, %17367
  %17390 = getelementptr inbounds i16, i16* %blur_x879, i64 %17389
  %17391 = bitcast i16* %17390 to <16 x i16>*
  %17392 = load <16 x i16>, <16 x i16>* %17391, align 2, !tbaa !399
  %17393 = getelementptr inbounds i16, i16* %17390, i64 16
  %17394 = bitcast i16* %17393 to <16 x i16>*
  %17395 = load <16 x i16>, <16 x i16>* %17394, align 2, !tbaa !399
  %17396 = add nsw i64 %17206, %17367
  %17397 = getelementptr inbounds i16, i16* %blur_x879, i64 %17396
  %17398 = bitcast i16* %17397 to <16 x i16>*
  %17399 = load <16 x i16>, <16 x i16>* %17398, align 2, !tbaa !399
  %17400 = getelementptr inbounds i16, i16* %17397, i64 16
  %17401 = bitcast i16* %17400 to <16 x i16>*
  %17402 = load <16 x i16>, <16 x i16>* %17401, align 2, !tbaa !399
  %17403 = add <16 x i16> %17378, %17371
  %17404 = add <16 x i16> %17403, %17385
  %17405 = add <16 x i16> %17404, %17392
  %17406 = add <16 x i16> %17405, %17399
  %17407 = add <16 x i16> %17381, %17374
  %17408 = add <16 x i16> %17407, %17388
  %17409 = add <16 x i16> %17408, %17395
  %17410 = add <16 x i16> %17409, %17402
  %17411 = shufflevector <16 x i16> %17406, <16 x i16> %17410, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17412 = udiv <32 x i16> %17411, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17413 = shufflevector <32 x i16> %17412, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17414 = add nsw i64 %17210, %17367
  %17415 = getelementptr inbounds i16, i16* %263, i64 %17414
  %17416 = bitcast i16* %17415 to <16 x i16>*
  store <16 x i16> %17413, <16 x i16>* %17416, align 2, !tbaa !401
  %17417 = shufflevector <32 x i16> %17412, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17418 = getelementptr inbounds i16, i16* %17415, i64 16
  %17419 = bitcast i16* %17418 to <16 x i16>*
  store <16 x i16> %17417, <16 x i16>* %17419, align 2, !tbaa !401
  %17420 = add nuw nsw i32 %blur_y.s0.x.x.rebased1118, 1
  %.not2654 = icmp eq i32 %17420, %t1683898
  br i1 %.not2654, label %"end for blur_y.s0.x.x.rebased1117", label %"for blur_y.s0.x.x.rebased1116"

after_bb1128:                                     ; preds = %"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge", %"produce blur_x1131"
  %.pre-phi3569 = phi i32 [ %.pre3568, %"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge" ], [ %17485, %"produce blur_x1131" ]
  %17421 = mul nsw i32 %.pre-phi3569, %a551
  %t17541139 = sub nsw i32 %17421, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1143.preheader", label %"end for blur_y.s0.x.x.rebased1144", !prof !386

"for blur_y.s0.x.x.rebased1143.preheader":        ; preds = %after_bb1128
  %17422 = sext i32 %t17541139 to i64
  %17423 = zext i32 %.pre-phi3551 to i64
  %17424 = mul nsw i64 %17423, %337
  %17425 = sub nsw i64 %17424, %298
  %17426 = zext i32 %.pre-phi3547 to i64
  %17427 = mul nsw i64 %17426, %337
  %17428 = sub nsw i64 %17427, %298
  %17429 = zext i32 %.pre-phi3557 to i64
  %17430 = mul nsw i64 %17429, %337
  %17431 = sub nsw i64 %17430, %298
  %17432 = zext i32 %.pre-phi3569 to i64
  %17433 = mul nsw i64 %17432, %337
  %17434 = sub nsw i64 %17433, %298
  %17435 = zext i32 %.pre-phi3563 to i64
  %17436 = mul nsw i64 %17435, %337
  %17437 = sub nsw i64 %17436, %298
  %17438 = sext i32 %a379 to i64
  %17439 = add nsw i64 %17438, 3
  %17440 = mul nsw i64 %17439, %334
  %17441 = add nsw i64 %17440, %338
  br label %"for blur_y.s0.x.x.rebased1143"

"produce blur_x1131":                             ; preds = %"end for blur_y.s0.x.x.rebased1117"
  %17442 = getelementptr inbounds i16, i16* %read_input822, i64 %353
  %17443 = getelementptr inbounds i16, i16* %17442, i64 -31
  %17444 = bitcast i16* %17443 to <16 x i16>*
  %17445 = load <16 x i16>, <16 x i16>* %17444, align 2, !tbaa !396
  %17446 = getelementptr inbounds i16, i16* %17442, i64 -15
  %17447 = bitcast i16* %17446 to <16 x i16>*
  %17448 = load <16 x i16>, <16 x i16>* %17447, align 2, !tbaa !396
  %17449 = getelementptr inbounds i16, i16* %17442, i64 -32
  %17450 = bitcast i16* %17449 to <16 x i16>*
  %17451 = load <16 x i16>, <16 x i16>* %17450, align 2, !tbaa !396
  %17452 = getelementptr inbounds i16, i16* %17442, i64 -16
  %17453 = bitcast i16* %17452 to <16 x i16>*
  %17454 = load <16 x i16>, <16 x i16>* %17453, align 2, !tbaa !396
  %17455 = getelementptr inbounds i16, i16* %17442, i64 -30
  %17456 = bitcast i16* %17455 to <16 x i16>*
  %17457 = load <16 x i16>, <16 x i16>* %17456, align 2, !tbaa !396
  %17458 = getelementptr inbounds i16, i16* %17442, i64 -14
  %17459 = bitcast i16* %17458 to <16 x i16>*
  %17460 = load <16 x i16>, <16 x i16>* %17459, align 2, !tbaa !396
  %17461 = getelementptr inbounds i16, i16* %17442, i64 -28
  %17462 = bitcast i16* %17461 to <16 x i16>*
  %17463 = load <16 x i16>, <16 x i16>* %17462, align 2, !tbaa !396
  %17464 = getelementptr inbounds i16, i16* %17442, i64 -12
  %17465 = bitcast i16* %17464 to <16 x i16>*
  %17466 = load <16 x i16>, <16 x i16>* %17465, align 2, !tbaa !396
  %17467 = getelementptr inbounds i16, i16* %17442, i64 -29
  %17468 = bitcast i16* %17467 to <16 x i16>*
  %17469 = load <16 x i16>, <16 x i16>* %17468, align 2, !tbaa !396
  %17470 = getelementptr inbounds i16, i16* %17442, i64 -13
  %17471 = bitcast i16* %17470 to <16 x i16>*
  %17472 = load <16 x i16>, <16 x i16>* %17471, align 2, !tbaa !396
  %17473 = add <16 x i16> %17451, %17445
  %17474 = add <16 x i16> %17473, %17457
  %17475 = add <16 x i16> %17474, %17463
  %17476 = add <16 x i16> %17475, %17469
  %17477 = add <16 x i16> %17454, %17448
  %17478 = add <16 x i16> %17477, %17460
  %17479 = add <16 x i16> %17478, %17466
  %17480 = add <16 x i16> %17479, %17472
  %17481 = shufflevector <16 x i16> %17476, <16 x i16> %17480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17482 = udiv <32 x i16> %17481, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17483 = shufflevector <32 x i16> %17482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17484 = add nsw i32 %a379, 7
  %17485 = and i32 %17484, 7
  %17486 = zext i32 %17485 to i64
  %17487 = mul nsw i64 %299, %17486
  %17488 = add nsw i64 %301, %17487
  %17489 = getelementptr inbounds i16, i16* %blur_x879, i64 %17488
  %17490 = getelementptr inbounds i16, i16* %17489, i64 -32
  %17491 = bitcast i16* %17490 to <16 x i16>*
  store <16 x i16> %17483, <16 x i16>* %17491, align 2, !tbaa !399
  %17492 = shufflevector <32 x i16> %17482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17493 = getelementptr inbounds i16, i16* %17489, i64 -16
  %17494 = bitcast i16* %17493 to <16 x i16>*
  store <16 x i16> %17492, <16 x i16>* %17494, align 2, !tbaa !399
  %17495 = zext i32 %.pre-phi3551 to i64
  %17496 = mul nsw i64 %17495, %333
  %17497 = add nsw i64 %17496, %296
  %17498 = getelementptr inbounds i16, i16* %blur_x879, i64 %17497
  %17499 = getelementptr inbounds i16, i16* %17498, i64 -32
  %17500 = bitcast i16* %17499 to <16 x i16>*
  %17501 = load <16 x i16>, <16 x i16>* %17500, align 2, !tbaa !399
  %17502 = getelementptr inbounds i16, i16* %17498, i64 -16
  %17503 = bitcast i16* %17502 to <16 x i16>*
  %17504 = load <16 x i16>, <16 x i16>* %17503, align 2, !tbaa !399
  %17505 = zext i32 %.pre-phi3547 to i64
  %17506 = mul nsw i64 %17505, %333
  %17507 = add nsw i64 %17506, %296
  %17508 = getelementptr inbounds i16, i16* %blur_x879, i64 %17507
  %17509 = getelementptr inbounds i16, i16* %17508, i64 -32
  %17510 = bitcast i16* %17509 to <16 x i16>*
  %17511 = load <16 x i16>, <16 x i16>* %17510, align 2, !tbaa !399
  %17512 = getelementptr inbounds i16, i16* %17508, i64 -16
  %17513 = bitcast i16* %17512 to <16 x i16>*
  %17514 = load <16 x i16>, <16 x i16>* %17513, align 2, !tbaa !399
  %17515 = zext i32 %.pre-phi3557 to i64
  %17516 = mul nsw i64 %17515, %333
  %17517 = add nsw i64 %17516, %296
  %17518 = getelementptr inbounds i16, i16* %blur_x879, i64 %17517
  %17519 = getelementptr inbounds i16, i16* %17518, i64 -32
  %17520 = bitcast i16* %17519 to <16 x i16>*
  %17521 = load <16 x i16>, <16 x i16>* %17520, align 2, !tbaa !399
  %17522 = getelementptr inbounds i16, i16* %17518, i64 -16
  %17523 = bitcast i16* %17522 to <16 x i16>*
  %17524 = load <16 x i16>, <16 x i16>* %17523, align 2, !tbaa !399
  %17525 = mul nsw i64 %17486, %333
  %17526 = add nsw i64 %17525, %296
  %17527 = getelementptr inbounds i16, i16* %blur_x879, i64 %17526
  %17528 = getelementptr inbounds i16, i16* %17527, i64 -32
  %17529 = bitcast i16* %17528 to <16 x i16>*
  %17530 = load <16 x i16>, <16 x i16>* %17529, align 2, !tbaa !399
  %17531 = getelementptr inbounds i16, i16* %17527, i64 -16
  %17532 = bitcast i16* %17531 to <16 x i16>*
  %17533 = load <16 x i16>, <16 x i16>* %17532, align 2, !tbaa !399
  %17534 = zext i32 %.pre-phi3563 to i64
  %17535 = mul nsw i64 %17534, %333
  %17536 = add nsw i64 %17535, %296
  %17537 = getelementptr inbounds i16, i16* %blur_x879, i64 %17536
  %17538 = getelementptr inbounds i16, i16* %17537, i64 -32
  %17539 = bitcast i16* %17538 to <16 x i16>*
  %17540 = load <16 x i16>, <16 x i16>* %17539, align 2, !tbaa !399
  %17541 = getelementptr inbounds i16, i16* %17537, i64 -16
  %17542 = bitcast i16* %17541 to <16 x i16>*
  %17543 = load <16 x i16>, <16 x i16>* %17542, align 2, !tbaa !399
  %17544 = add <16 x i16> %17511, %17501
  %17545 = add <16 x i16> %17544, %17521
  %17546 = add <16 x i16> %17545, %17530
  %17547 = add <16 x i16> %17546, %17540
  %17548 = add <16 x i16> %17514, %17504
  %17549 = add <16 x i16> %17548, %17524
  %17550 = add <16 x i16> %17549, %17533
  %17551 = add <16 x i16> %17550, %17543
  %17552 = shufflevector <16 x i16> %17547, <16 x i16> %17551, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17553 = udiv <32 x i16> %17552, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17554 = shufflevector <32 x i16> %17553, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17555 = sext i32 %a379 to i64
  %17556 = add nsw i64 %17555, 3
  %17557 = mul nsw i64 %17556, %334
  %17558 = add nsw i64 %336, %17557
  %17559 = getelementptr inbounds i16, i16* %263, i64 %17558
  %17560 = getelementptr inbounds i16, i16* %17559, i64 -32
  %17561 = bitcast i16* %17560 to <16 x i16>*
  store <16 x i16> %17554, <16 x i16>* %17561, align 2, !tbaa !401
  %17562 = shufflevector <32 x i16> %17553, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17563 = getelementptr inbounds i16, i16* %17559, i64 -16
  %17564 = bitcast i16* %17563 to <16 x i16>*
  store <16 x i16> %17562, <16 x i16>* %17564, align 2, !tbaa !401
  br label %after_bb1128

"for blur_y.s0.x.x.rebased1143":                  ; preds = %"for blur_y.s0.x.x.rebased1143.preheader", %"consume blur_x1151"
  %indvars.iv3380 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1143.preheader" ], [ %indvars.iv.next3381, %"consume blur_x1151" ]
  %17565 = add nsw i64 %indvars.iv3380, %303
  %17566 = icmp slt i64 %17565, 1
  %17567 = trunc i64 %17565 to i32
  %17568 = shl nsw i32 %17567, 5
  %17569 = icmp sgt i32 %198, %17568
  %17570 = or i1 %17566, %17569
  br i1 %17570, label %"produce blur_x1149", label %"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge"

"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1143"
  %.pre3570 = shl nsw i64 %17565, 5
  br label %"consume blur_x1151"

"end for blur_y.s0.x.x.rebased1144":              ; preds = %"consume blur_x1151", %after_bb1128
  br i1 %304, label %"for blur_y.s0.x.x.rebased1159.preheader", label %"end for blur_y.s0.x.x.rebased1160", !prof !386

"for blur_y.s0.x.x.rebased1159.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1144"
  %17571 = sext i32 %t17541139 to i64
  %17572 = zext i32 %.pre-phi3551 to i64
  %17573 = mul nsw i64 %17572, %337
  %17574 = sub nsw i64 %17573, %298
  %17575 = zext i32 %.pre-phi3547 to i64
  %17576 = mul nsw i64 %17575, %337
  %17577 = sub nsw i64 %17576, %298
  %17578 = zext i32 %.pre-phi3557 to i64
  %17579 = mul nsw i64 %17578, %337
  %17580 = sub nsw i64 %17579, %298
  %17581 = zext i32 %.pre-phi3569 to i64
  %17582 = mul nsw i64 %17581, %337
  %17583 = sub nsw i64 %17582, %298
  %17584 = zext i32 %.pre-phi3563 to i64
  %17585 = mul nsw i64 %17584, %337
  %17586 = sub nsw i64 %17585, %298
  %17587 = sext i32 %a379 to i64
  %17588 = add nsw i64 %17587, 3
  %17589 = mul nsw i64 %17588, %334
  %17590 = add nsw i64 %17589, %338
  br label %"for blur_y.s0.x.x.rebased1159"

"produce blur_x1149":                             ; preds = %"for blur_y.s0.x.x.rebased1143"
  %t7601150 = add nsw i32 %355, %17568
  %17591 = sext i32 %t7601150 to i64
  %17592 = getelementptr inbounds i16, i16* %read_input822, i64 %17591
  %17593 = getelementptr inbounds i16, i16* %17592, i64 1
  %17594 = bitcast i16* %17593 to <16 x i16>*
  %17595 = load <16 x i16>, <16 x i16>* %17594, align 2, !tbaa !396
  %17596 = getelementptr inbounds i16, i16* %17592, i64 17
  %17597 = bitcast i16* %17596 to <16 x i16>*
  %17598 = load <16 x i16>, <16 x i16>* %17597, align 2, !tbaa !396
  %17599 = bitcast i16* %17592 to <16 x i16>*
  %17600 = load <16 x i16>, <16 x i16>* %17599, align 2, !tbaa !396
  %17601 = getelementptr inbounds i16, i16* %17592, i64 16
  %17602 = bitcast i16* %17601 to <16 x i16>*
  %17603 = load <16 x i16>, <16 x i16>* %17602, align 2, !tbaa !396
  %17604 = getelementptr inbounds i16, i16* %17592, i64 2
  %17605 = bitcast i16* %17604 to <16 x i16>*
  %17606 = load <16 x i16>, <16 x i16>* %17605, align 2, !tbaa !396
  %17607 = getelementptr inbounds i16, i16* %17592, i64 18
  %17608 = bitcast i16* %17607 to <16 x i16>*
  %17609 = load <16 x i16>, <16 x i16>* %17608, align 2, !tbaa !396
  %17610 = getelementptr inbounds i16, i16* %17592, i64 4
  %17611 = bitcast i16* %17610 to <16 x i16>*
  %17612 = load <16 x i16>, <16 x i16>* %17611, align 2, !tbaa !396
  %17613 = getelementptr inbounds i16, i16* %17592, i64 20
  %17614 = bitcast i16* %17613 to <16 x i16>*
  %17615 = load <16 x i16>, <16 x i16>* %17614, align 2, !tbaa !396
  %17616 = getelementptr inbounds i16, i16* %17592, i64 3
  %17617 = bitcast i16* %17616 to <16 x i16>*
  %17618 = load <16 x i16>, <16 x i16>* %17617, align 2, !tbaa !396
  %17619 = getelementptr inbounds i16, i16* %17592, i64 19
  %17620 = bitcast i16* %17619 to <16 x i16>*
  %17621 = load <16 x i16>, <16 x i16>* %17620, align 2, !tbaa !396
  %17622 = add <16 x i16> %17600, %17595
  %17623 = add <16 x i16> %17622, %17606
  %17624 = add <16 x i16> %17623, %17612
  %17625 = add <16 x i16> %17624, %17618
  %17626 = add <16 x i16> %17603, %17598
  %17627 = add <16 x i16> %17626, %17609
  %17628 = add <16 x i16> %17627, %17615
  %17629 = add <16 x i16> %17628, %17621
  %17630 = shufflevector <16 x i16> %17625, <16 x i16> %17629, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17631 = udiv <32 x i16> %17630, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17632 = shufflevector <32 x i16> %17631, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17633 = shl nsw i64 %17565, 5
  %17634 = add nsw i64 %17633, %17422
  %17635 = getelementptr inbounds i16, i16* %blur_x879, i64 %17634
  %17636 = bitcast i16* %17635 to <16 x i16>*
  store <16 x i16> %17632, <16 x i16>* %17636, align 2, !tbaa !399
  %17637 = shufflevector <32 x i16> %17631, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17638 = getelementptr inbounds i16, i16* %17635, i64 16
  %17639 = bitcast i16* %17638 to <16 x i16>*
  store <16 x i16> %17637, <16 x i16>* %17639, align 2, !tbaa !399
  br label %"consume blur_x1151"

"consume blur_x1151":                             ; preds = %"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge", %"produce blur_x1149"
  %.pre-phi3571 = phi i64 [ %.pre3570, %"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge" ], [ %17633, %"produce blur_x1149" ]
  %17640 = add nsw i64 %17425, %.pre-phi3571
  %17641 = getelementptr inbounds i16, i16* %blur_x879, i64 %17640
  %17642 = bitcast i16* %17641 to <16 x i16>*
  %17643 = load <16 x i16>, <16 x i16>* %17642, align 2, !tbaa !399
  %17644 = getelementptr inbounds i16, i16* %17641, i64 16
  %17645 = bitcast i16* %17644 to <16 x i16>*
  %17646 = load <16 x i16>, <16 x i16>* %17645, align 2, !tbaa !399
  %17647 = add nsw i64 %17428, %.pre-phi3571
  %17648 = getelementptr inbounds i16, i16* %blur_x879, i64 %17647
  %17649 = bitcast i16* %17648 to <16 x i16>*
  %17650 = load <16 x i16>, <16 x i16>* %17649, align 2, !tbaa !399
  %17651 = getelementptr inbounds i16, i16* %17648, i64 16
  %17652 = bitcast i16* %17651 to <16 x i16>*
  %17653 = load <16 x i16>, <16 x i16>* %17652, align 2, !tbaa !399
  %17654 = add nsw i64 %17431, %.pre-phi3571
  %17655 = getelementptr inbounds i16, i16* %blur_x879, i64 %17654
  %17656 = bitcast i16* %17655 to <16 x i16>*
  %17657 = load <16 x i16>, <16 x i16>* %17656, align 2, !tbaa !399
  %17658 = getelementptr inbounds i16, i16* %17655, i64 16
  %17659 = bitcast i16* %17658 to <16 x i16>*
  %17660 = load <16 x i16>, <16 x i16>* %17659, align 2, !tbaa !399
  %17661 = add nsw i64 %17434, %.pre-phi3571
  %17662 = getelementptr inbounds i16, i16* %blur_x879, i64 %17661
  %17663 = bitcast i16* %17662 to <16 x i16>*
  %17664 = load <16 x i16>, <16 x i16>* %17663, align 2, !tbaa !399
  %17665 = getelementptr inbounds i16, i16* %17662, i64 16
  %17666 = bitcast i16* %17665 to <16 x i16>*
  %17667 = load <16 x i16>, <16 x i16>* %17666, align 2, !tbaa !399
  %17668 = add nsw i64 %17437, %.pre-phi3571
  %17669 = getelementptr inbounds i16, i16* %blur_x879, i64 %17668
  %17670 = bitcast i16* %17669 to <16 x i16>*
  %17671 = load <16 x i16>, <16 x i16>* %17670, align 2, !tbaa !399
  %17672 = getelementptr inbounds i16, i16* %17669, i64 16
  %17673 = bitcast i16* %17672 to <16 x i16>*
  %17674 = load <16 x i16>, <16 x i16>* %17673, align 2, !tbaa !399
  %17675 = add <16 x i16> %17650, %17643
  %17676 = add <16 x i16> %17675, %17657
  %17677 = add <16 x i16> %17676, %17664
  %17678 = add <16 x i16> %17677, %17671
  %17679 = add <16 x i16> %17653, %17646
  %17680 = add <16 x i16> %17679, %17660
  %17681 = add <16 x i16> %17680, %17667
  %17682 = add <16 x i16> %17681, %17674
  %17683 = shufflevector <16 x i16> %17678, <16 x i16> %17682, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17684 = udiv <32 x i16> %17683, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17685 = shufflevector <32 x i16> %17684, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17686 = add nsw i64 %17441, %.pre-phi3571
  %17687 = getelementptr inbounds i16, i16* %263, i64 %17686
  %17688 = bitcast i16* %17687 to <16 x i16>*
  store <16 x i16> %17685, <16 x i16>* %17688, align 2, !tbaa !401
  %17689 = shufflevector <32 x i16> %17684, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17690 = getelementptr inbounds i16, i16* %17687, i64 16
  %17691 = bitcast i16* %17690 to <16 x i16>*
  store <16 x i16> %17689, <16 x i16>* %17691, align 2, !tbaa !401
  %indvars.iv.next3381 = add nuw nsw i64 %indvars.iv3380, 1
  %.not2651 = icmp eq i64 %indvars.iv.next3381, %530
  br i1 %.not2651, label %"end for blur_y.s0.x.x.rebased1144", label %"for blur_y.s0.x.x.rebased1143"

"for blur_y.s0.x.x.rebased1159":                  ; preds = %"for blur_y.s0.x.x.rebased1159.preheader", %"consume blur_x1170"
  %blur_y.s0.x.x.rebased1161 = phi i32 [ %17800, %"consume blur_x1170" ], [ 0, %"for blur_y.s0.x.x.rebased1159.preheader" ]
  %17692 = add nsw i32 %blur_y.s0.x.x.rebased1161, %t1626814
  %a1780 = shl nsw i32 %17692, 5
  %17693 = icmp sgt i32 %t1647, %a1780
  %blur_y.s0.x.v0.base.s1162 = select i1 %17693, i32 %a1780, i32 %t1647
  %17694 = icmp slt i32 %17692, 1
  %17695 = icmp sgt i32 %198, %a1780
  %17696 = or i1 %17694, %17695
  br i1 %17696, label %"produce blur_x1167", label %"consume blur_x1170"

"end for blur_y.s0.x.x.rebased1160":              ; preds = %"consume blur_x1170", %"end for blur_y.s0.x.x.rebased1144"
  br i1 %229, label %"produce blur_x1174", label %after_bb1171

"produce blur_x1167":                             ; preds = %"for blur_y.s0.x.x.rebased1159"
  %17697 = icmp slt i32 %blur_y.s0.x.v0.base.s1162, %198
  %blur_x.s0.x.v1.base.s1168 = select i1 %17697, i32 %blur_y.s0.x.v0.base.s1162, i32 %198
  %t7651169 = add nsw i32 %355, %blur_x.s0.x.v1.base.s1168
  %17698 = sext i32 %t7651169 to i64
  %17699 = getelementptr inbounds i16, i16* %read_input822, i64 %17698
  %17700 = getelementptr inbounds i16, i16* %17699, i64 1
  %17701 = bitcast i16* %17700 to <16 x i16>*
  %17702 = load <16 x i16>, <16 x i16>* %17701, align 2, !tbaa !396
  %17703 = getelementptr inbounds i16, i16* %17699, i64 17
  %17704 = bitcast i16* %17703 to <16 x i16>*
  %17705 = load <16 x i16>, <16 x i16>* %17704, align 2, !tbaa !396
  %17706 = bitcast i16* %17699 to <16 x i16>*
  %17707 = load <16 x i16>, <16 x i16>* %17706, align 2, !tbaa !396
  %17708 = getelementptr inbounds i16, i16* %17699, i64 16
  %17709 = bitcast i16* %17708 to <16 x i16>*
  %17710 = load <16 x i16>, <16 x i16>* %17709, align 2, !tbaa !396
  %17711 = getelementptr inbounds i16, i16* %17699, i64 2
  %17712 = bitcast i16* %17711 to <16 x i16>*
  %17713 = load <16 x i16>, <16 x i16>* %17712, align 2, !tbaa !396
  %17714 = getelementptr inbounds i16, i16* %17699, i64 18
  %17715 = bitcast i16* %17714 to <16 x i16>*
  %17716 = load <16 x i16>, <16 x i16>* %17715, align 2, !tbaa !396
  %17717 = getelementptr inbounds i16, i16* %17699, i64 4
  %17718 = bitcast i16* %17717 to <16 x i16>*
  %17719 = load <16 x i16>, <16 x i16>* %17718, align 2, !tbaa !396
  %17720 = getelementptr inbounds i16, i16* %17699, i64 20
  %17721 = bitcast i16* %17720 to <16 x i16>*
  %17722 = load <16 x i16>, <16 x i16>* %17721, align 2, !tbaa !396
  %17723 = getelementptr inbounds i16, i16* %17699, i64 3
  %17724 = bitcast i16* %17723 to <16 x i16>*
  %17725 = load <16 x i16>, <16 x i16>* %17724, align 2, !tbaa !396
  %17726 = getelementptr inbounds i16, i16* %17699, i64 19
  %17727 = bitcast i16* %17726 to <16 x i16>*
  %17728 = load <16 x i16>, <16 x i16>* %17727, align 2, !tbaa !396
  %17729 = add <16 x i16> %17707, %17702
  %17730 = add <16 x i16> %17729, %17713
  %17731 = add <16 x i16> %17730, %17719
  %17732 = add <16 x i16> %17731, %17725
  %17733 = add <16 x i16> %17710, %17705
  %17734 = add <16 x i16> %17733, %17716
  %17735 = add <16 x i16> %17734, %17722
  %17736 = add <16 x i16> %17735, %17728
  %17737 = shufflevector <16 x i16> %17732, <16 x i16> %17736, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17738 = udiv <32 x i16> %17737, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17739 = shufflevector <32 x i16> %17738, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17740 = sext i32 %blur_x.s0.x.v1.base.s1168 to i64
  %17741 = add nsw i64 %17740, %17571
  %17742 = getelementptr inbounds i16, i16* %blur_x879, i64 %17741
  %17743 = bitcast i16* %17742 to <16 x i16>*
  store <16 x i16> %17739, <16 x i16>* %17743, align 2, !tbaa !399
  %17744 = shufflevector <32 x i16> %17738, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17745 = getelementptr inbounds i16, i16* %17742, i64 16
  %17746 = bitcast i16* %17745 to <16 x i16>*
  store <16 x i16> %17744, <16 x i16>* %17746, align 2, !tbaa !399
  br label %"consume blur_x1170"

"consume blur_x1170":                             ; preds = %"for blur_y.s0.x.x.rebased1159", %"produce blur_x1167"
  %17747 = sext i32 %blur_y.s0.x.v0.base.s1162 to i64
  %17748 = add nsw i64 %17574, %17747
  %17749 = getelementptr inbounds i16, i16* %blur_x879, i64 %17748
  %17750 = bitcast i16* %17749 to <16 x i16>*
  %17751 = load <16 x i16>, <16 x i16>* %17750, align 2, !tbaa !399
  %17752 = getelementptr inbounds i16, i16* %17749, i64 16
  %17753 = bitcast i16* %17752 to <16 x i16>*
  %17754 = load <16 x i16>, <16 x i16>* %17753, align 2, !tbaa !399
  %17755 = add nsw i64 %17577, %17747
  %17756 = getelementptr inbounds i16, i16* %blur_x879, i64 %17755
  %17757 = bitcast i16* %17756 to <16 x i16>*
  %17758 = load <16 x i16>, <16 x i16>* %17757, align 2, !tbaa !399
  %17759 = getelementptr inbounds i16, i16* %17756, i64 16
  %17760 = bitcast i16* %17759 to <16 x i16>*
  %17761 = load <16 x i16>, <16 x i16>* %17760, align 2, !tbaa !399
  %17762 = add nsw i64 %17580, %17747
  %17763 = getelementptr inbounds i16, i16* %blur_x879, i64 %17762
  %17764 = bitcast i16* %17763 to <16 x i16>*
  %17765 = load <16 x i16>, <16 x i16>* %17764, align 2, !tbaa !399
  %17766 = getelementptr inbounds i16, i16* %17763, i64 16
  %17767 = bitcast i16* %17766 to <16 x i16>*
  %17768 = load <16 x i16>, <16 x i16>* %17767, align 2, !tbaa !399
  %17769 = add nsw i64 %17583, %17747
  %17770 = getelementptr inbounds i16, i16* %blur_x879, i64 %17769
  %17771 = bitcast i16* %17770 to <16 x i16>*
  %17772 = load <16 x i16>, <16 x i16>* %17771, align 2, !tbaa !399
  %17773 = getelementptr inbounds i16, i16* %17770, i64 16
  %17774 = bitcast i16* %17773 to <16 x i16>*
  %17775 = load <16 x i16>, <16 x i16>* %17774, align 2, !tbaa !399
  %17776 = add nsw i64 %17586, %17747
  %17777 = getelementptr inbounds i16, i16* %blur_x879, i64 %17776
  %17778 = bitcast i16* %17777 to <16 x i16>*
  %17779 = load <16 x i16>, <16 x i16>* %17778, align 2, !tbaa !399
  %17780 = getelementptr inbounds i16, i16* %17777, i64 16
  %17781 = bitcast i16* %17780 to <16 x i16>*
  %17782 = load <16 x i16>, <16 x i16>* %17781, align 2, !tbaa !399
  %17783 = add <16 x i16> %17758, %17751
  %17784 = add <16 x i16> %17783, %17765
  %17785 = add <16 x i16> %17784, %17772
  %17786 = add <16 x i16> %17785, %17779
  %17787 = add <16 x i16> %17761, %17754
  %17788 = add <16 x i16> %17787, %17768
  %17789 = add <16 x i16> %17788, %17775
  %17790 = add <16 x i16> %17789, %17782
  %17791 = shufflevector <16 x i16> %17786, <16 x i16> %17790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17792 = udiv <32 x i16> %17791, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17793 = shufflevector <32 x i16> %17792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17794 = add nsw i64 %17590, %17747
  %17795 = getelementptr inbounds i16, i16* %263, i64 %17794
  %17796 = bitcast i16* %17795 to <16 x i16>*
  store <16 x i16> %17793, <16 x i16>* %17796, align 2, !tbaa !401
  %17797 = shufflevector <32 x i16> %17792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17798 = getelementptr inbounds i16, i16* %17795, i64 16
  %17799 = bitcast i16* %17798 to <16 x i16>*
  store <16 x i16> %17797, <16 x i16>* %17799, align 2, !tbaa !401
  %17800 = add nuw nsw i32 %blur_y.s0.x.x.rebased1161, 1
  %.not2650 = icmp eq i32 %17800, %t1683898
  br i1 %.not2650, label %"end for blur_y.s0.x.x.rebased1160", label %"for blur_y.s0.x.x.rebased1159"

after_bb1171:                                     ; preds = %"end for blur_y.s0.x.x.rebased1160", %"produce blur_x1174"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1186.preheader", label %"end for blur_y.s0.x.x.rebased1187", !prof !386

"for blur_y.s0.x.x.rebased1186.preheader":        ; preds = %after_bb1171
  %17801 = sext i32 %t1682886 to i64
  %17802 = zext i32 %.pre-phi3557 to i64
  %17803 = mul nsw i64 %17802, %337
  %17804 = sub nsw i64 %17803, %298
  %17805 = zext i32 %.pre-phi3551 to i64
  %17806 = mul nsw i64 %17805, %337
  %17807 = sub nsw i64 %17806, %298
  %17808 = zext i32 %.pre-phi3563 to i64
  %17809 = mul nsw i64 %17808, %337
  %17810 = sub nsw i64 %17809, %298
  %17811 = zext i32 %.pre-phi3535 to i64
  %17812 = mul nsw i64 %17811, %337
  %17813 = sub nsw i64 %17812, %298
  %17814 = zext i32 %.pre-phi3569 to i64
  %17815 = mul nsw i64 %17814, %337
  %17816 = sub nsw i64 %17815, %298
  %17817 = sext i32 %a379 to i64
  %17818 = add nsw i64 %17817, 4
  %17819 = mul nsw i64 %17818, %334
  %17820 = add nsw i64 %17819, %338
  br label %"for blur_y.s0.x.x.rebased1186"

"produce blur_x1174":                             ; preds = %"end for blur_y.s0.x.x.rebased1160"
  %17821 = getelementptr inbounds i16, i16* %read_input822, i64 %359
  %17822 = getelementptr inbounds i16, i16* %17821, i64 -31
  %17823 = bitcast i16* %17822 to <16 x i16>*
  %17824 = load <16 x i16>, <16 x i16>* %17823, align 2, !tbaa !396
  %17825 = getelementptr inbounds i16, i16* %17821, i64 -15
  %17826 = bitcast i16* %17825 to <16 x i16>*
  %17827 = load <16 x i16>, <16 x i16>* %17826, align 2, !tbaa !396
  %17828 = getelementptr inbounds i16, i16* %17821, i64 -32
  %17829 = bitcast i16* %17828 to <16 x i16>*
  %17830 = load <16 x i16>, <16 x i16>* %17829, align 2, !tbaa !396
  %17831 = getelementptr inbounds i16, i16* %17821, i64 -16
  %17832 = bitcast i16* %17831 to <16 x i16>*
  %17833 = load <16 x i16>, <16 x i16>* %17832, align 2, !tbaa !396
  %17834 = getelementptr inbounds i16, i16* %17821, i64 -30
  %17835 = bitcast i16* %17834 to <16 x i16>*
  %17836 = load <16 x i16>, <16 x i16>* %17835, align 2, !tbaa !396
  %17837 = getelementptr inbounds i16, i16* %17821, i64 -14
  %17838 = bitcast i16* %17837 to <16 x i16>*
  %17839 = load <16 x i16>, <16 x i16>* %17838, align 2, !tbaa !396
  %17840 = getelementptr inbounds i16, i16* %17821, i64 -28
  %17841 = bitcast i16* %17840 to <16 x i16>*
  %17842 = load <16 x i16>, <16 x i16>* %17841, align 2, !tbaa !396
  %17843 = getelementptr inbounds i16, i16* %17821, i64 -12
  %17844 = bitcast i16* %17843 to <16 x i16>*
  %17845 = load <16 x i16>, <16 x i16>* %17844, align 2, !tbaa !396
  %17846 = getelementptr inbounds i16, i16* %17821, i64 -29
  %17847 = bitcast i16* %17846 to <16 x i16>*
  %17848 = load <16 x i16>, <16 x i16>* %17847, align 2, !tbaa !396
  %17849 = getelementptr inbounds i16, i16* %17821, i64 -13
  %17850 = bitcast i16* %17849 to <16 x i16>*
  %17851 = load <16 x i16>, <16 x i16>* %17850, align 2, !tbaa !396
  %17852 = add <16 x i16> %17830, %17824
  %17853 = add <16 x i16> %17852, %17836
  %17854 = add <16 x i16> %17853, %17842
  %17855 = add <16 x i16> %17854, %17848
  %17856 = add <16 x i16> %17833, %17827
  %17857 = add <16 x i16> %17856, %17839
  %17858 = add <16 x i16> %17857, %17845
  %17859 = add <16 x i16> %17858, %17851
  %17860 = shufflevector <16 x i16> %17855, <16 x i16> %17859, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17861 = udiv <32 x i16> %17860, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17862 = shufflevector <32 x i16> %17861, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17863 = zext i32 %.pre-phi3535 to i64
  %17864 = mul nsw i64 %299, %17863
  %17865 = add nsw i64 %301, %17864
  %17866 = getelementptr inbounds i16, i16* %blur_x879, i64 %17865
  %17867 = getelementptr inbounds i16, i16* %17866, i64 -32
  %17868 = bitcast i16* %17867 to <16 x i16>*
  store <16 x i16> %17862, <16 x i16>* %17868, align 2, !tbaa !399
  %17869 = shufflevector <32 x i16> %17861, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17870 = getelementptr inbounds i16, i16* %17866, i64 -16
  %17871 = bitcast i16* %17870 to <16 x i16>*
  store <16 x i16> %17869, <16 x i16>* %17871, align 2, !tbaa !399
  %17872 = zext i32 %.pre-phi3557 to i64
  %17873 = mul nsw i64 %17872, %333
  %17874 = add nsw i64 %17873, %296
  %17875 = getelementptr inbounds i16, i16* %blur_x879, i64 %17874
  %17876 = getelementptr inbounds i16, i16* %17875, i64 -32
  %17877 = bitcast i16* %17876 to <16 x i16>*
  %17878 = load <16 x i16>, <16 x i16>* %17877, align 2, !tbaa !399
  %17879 = getelementptr inbounds i16, i16* %17875, i64 -16
  %17880 = bitcast i16* %17879 to <16 x i16>*
  %17881 = load <16 x i16>, <16 x i16>* %17880, align 2, !tbaa !399
  %17882 = zext i32 %.pre-phi3551 to i64
  %17883 = mul nsw i64 %17882, %333
  %17884 = add nsw i64 %17883, %296
  %17885 = getelementptr inbounds i16, i16* %blur_x879, i64 %17884
  %17886 = getelementptr inbounds i16, i16* %17885, i64 -32
  %17887 = bitcast i16* %17886 to <16 x i16>*
  %17888 = load <16 x i16>, <16 x i16>* %17887, align 2, !tbaa !399
  %17889 = getelementptr inbounds i16, i16* %17885, i64 -16
  %17890 = bitcast i16* %17889 to <16 x i16>*
  %17891 = load <16 x i16>, <16 x i16>* %17890, align 2, !tbaa !399
  %17892 = zext i32 %.pre-phi3563 to i64
  %17893 = mul nsw i64 %17892, %333
  %17894 = add nsw i64 %17893, %296
  %17895 = getelementptr inbounds i16, i16* %blur_x879, i64 %17894
  %17896 = getelementptr inbounds i16, i16* %17895, i64 -32
  %17897 = bitcast i16* %17896 to <16 x i16>*
  %17898 = load <16 x i16>, <16 x i16>* %17897, align 2, !tbaa !399
  %17899 = getelementptr inbounds i16, i16* %17895, i64 -16
  %17900 = bitcast i16* %17899 to <16 x i16>*
  %17901 = load <16 x i16>, <16 x i16>* %17900, align 2, !tbaa !399
  %17902 = mul nsw i64 %17863, %333
  %17903 = add nsw i64 %17902, %296
  %17904 = getelementptr inbounds i16, i16* %blur_x879, i64 %17903
  %17905 = getelementptr inbounds i16, i16* %17904, i64 -32
  %17906 = bitcast i16* %17905 to <16 x i16>*
  %17907 = load <16 x i16>, <16 x i16>* %17906, align 2, !tbaa !399
  %17908 = getelementptr inbounds i16, i16* %17904, i64 -16
  %17909 = bitcast i16* %17908 to <16 x i16>*
  %17910 = load <16 x i16>, <16 x i16>* %17909, align 2, !tbaa !399
  %17911 = zext i32 %.pre-phi3569 to i64
  %17912 = mul nsw i64 %17911, %333
  %17913 = add nsw i64 %17912, %296
  %17914 = getelementptr inbounds i16, i16* %blur_x879, i64 %17913
  %17915 = getelementptr inbounds i16, i16* %17914, i64 -32
  %17916 = bitcast i16* %17915 to <16 x i16>*
  %17917 = load <16 x i16>, <16 x i16>* %17916, align 2, !tbaa !399
  %17918 = getelementptr inbounds i16, i16* %17914, i64 -16
  %17919 = bitcast i16* %17918 to <16 x i16>*
  %17920 = load <16 x i16>, <16 x i16>* %17919, align 2, !tbaa !399
  %17921 = add <16 x i16> %17888, %17878
  %17922 = add <16 x i16> %17921, %17898
  %17923 = add <16 x i16> %17922, %17907
  %17924 = add <16 x i16> %17923, %17917
  %17925 = add <16 x i16> %17891, %17881
  %17926 = add <16 x i16> %17925, %17901
  %17927 = add <16 x i16> %17926, %17910
  %17928 = add <16 x i16> %17927, %17920
  %17929 = shufflevector <16 x i16> %17924, <16 x i16> %17928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17930 = udiv <32 x i16> %17929, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %17931 = shufflevector <32 x i16> %17930, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17932 = sext i32 %a379 to i64
  %17933 = add nsw i64 %17932, 4
  %17934 = mul nsw i64 %17933, %334
  %17935 = add nsw i64 %336, %17934
  %17936 = getelementptr inbounds i16, i16* %263, i64 %17935
  %17937 = getelementptr inbounds i16, i16* %17936, i64 -32
  %17938 = bitcast i16* %17937 to <16 x i16>*
  store <16 x i16> %17931, <16 x i16>* %17938, align 2, !tbaa !401
  %17939 = shufflevector <32 x i16> %17930, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17940 = getelementptr inbounds i16, i16* %17936, i64 -16
  %17941 = bitcast i16* %17940 to <16 x i16>*
  store <16 x i16> %17939, <16 x i16>* %17941, align 2, !tbaa !401
  br label %after_bb1171

"for blur_y.s0.x.x.rebased1186":                  ; preds = %"for blur_y.s0.x.x.rebased1186.preheader", %"consume blur_x1194"
  %indvars.iv3382 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1186.preheader" ], [ %indvars.iv.next3383, %"consume blur_x1194" ]
  %17942 = add nsw i64 %indvars.iv3382, %303
  %17943 = icmp slt i64 %17942, 1
  %17944 = trunc i64 %17942 to i32
  %17945 = shl nsw i32 %17944, 5
  %17946 = icmp sgt i32 %198, %17945
  %17947 = or i1 %17943, %17946
  br i1 %17947, label %"produce blur_x1192", label %"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge"

"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1186"
  %.pre3572 = shl nsw i64 %17942, 5
  br label %"consume blur_x1194"

"end for blur_y.s0.x.x.rebased1187":              ; preds = %"consume blur_x1194", %after_bb1171
  br i1 %304, label %"for blur_y.s0.x.x.rebased1202.preheader", label %"end for blur_y.s0.x.x.rebased1203", !prof !386

"for blur_y.s0.x.x.rebased1202.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1187"
  %17948 = sext i32 %t1682886 to i64
  %17949 = zext i32 %.pre-phi3557 to i64
  %17950 = mul nsw i64 %17949, %337
  %17951 = sub nsw i64 %17950, %298
  %17952 = zext i32 %.pre-phi3551 to i64
  %17953 = mul nsw i64 %17952, %337
  %17954 = sub nsw i64 %17953, %298
  %17955 = zext i32 %.pre-phi3563 to i64
  %17956 = mul nsw i64 %17955, %337
  %17957 = sub nsw i64 %17956, %298
  %17958 = zext i32 %.pre-phi3535 to i64
  %17959 = mul nsw i64 %17958, %337
  %17960 = sub nsw i64 %17959, %298
  %17961 = zext i32 %.pre-phi3569 to i64
  %17962 = mul nsw i64 %17961, %337
  %17963 = sub nsw i64 %17962, %298
  %17964 = sext i32 %a379 to i64
  %17965 = add nsw i64 %17964, 4
  %17966 = mul nsw i64 %17965, %334
  %17967 = add nsw i64 %17966, %338
  br label %"for blur_y.s0.x.x.rebased1202"

"produce blur_x1192":                             ; preds = %"for blur_y.s0.x.x.rebased1186"
  %t7761193 = add nsw i32 %361, %17945
  %17968 = sext i32 %t7761193 to i64
  %17969 = getelementptr inbounds i16, i16* %read_input822, i64 %17968
  %17970 = getelementptr inbounds i16, i16* %17969, i64 1
  %17971 = bitcast i16* %17970 to <16 x i16>*
  %17972 = load <16 x i16>, <16 x i16>* %17971, align 2, !tbaa !396
  %17973 = getelementptr inbounds i16, i16* %17969, i64 17
  %17974 = bitcast i16* %17973 to <16 x i16>*
  %17975 = load <16 x i16>, <16 x i16>* %17974, align 2, !tbaa !396
  %17976 = bitcast i16* %17969 to <16 x i16>*
  %17977 = load <16 x i16>, <16 x i16>* %17976, align 2, !tbaa !396
  %17978 = getelementptr inbounds i16, i16* %17969, i64 16
  %17979 = bitcast i16* %17978 to <16 x i16>*
  %17980 = load <16 x i16>, <16 x i16>* %17979, align 2, !tbaa !396
  %17981 = getelementptr inbounds i16, i16* %17969, i64 2
  %17982 = bitcast i16* %17981 to <16 x i16>*
  %17983 = load <16 x i16>, <16 x i16>* %17982, align 2, !tbaa !396
  %17984 = getelementptr inbounds i16, i16* %17969, i64 18
  %17985 = bitcast i16* %17984 to <16 x i16>*
  %17986 = load <16 x i16>, <16 x i16>* %17985, align 2, !tbaa !396
  %17987 = getelementptr inbounds i16, i16* %17969, i64 4
  %17988 = bitcast i16* %17987 to <16 x i16>*
  %17989 = load <16 x i16>, <16 x i16>* %17988, align 2, !tbaa !396
  %17990 = getelementptr inbounds i16, i16* %17969, i64 20
  %17991 = bitcast i16* %17990 to <16 x i16>*
  %17992 = load <16 x i16>, <16 x i16>* %17991, align 2, !tbaa !396
  %17993 = getelementptr inbounds i16, i16* %17969, i64 3
  %17994 = bitcast i16* %17993 to <16 x i16>*
  %17995 = load <16 x i16>, <16 x i16>* %17994, align 2, !tbaa !396
  %17996 = getelementptr inbounds i16, i16* %17969, i64 19
  %17997 = bitcast i16* %17996 to <16 x i16>*
  %17998 = load <16 x i16>, <16 x i16>* %17997, align 2, !tbaa !396
  %17999 = add <16 x i16> %17977, %17972
  %18000 = add <16 x i16> %17999, %17983
  %18001 = add <16 x i16> %18000, %17989
  %18002 = add <16 x i16> %18001, %17995
  %18003 = add <16 x i16> %17980, %17975
  %18004 = add <16 x i16> %18003, %17986
  %18005 = add <16 x i16> %18004, %17992
  %18006 = add <16 x i16> %18005, %17998
  %18007 = shufflevector <16 x i16> %18002, <16 x i16> %18006, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18008 = udiv <32 x i16> %18007, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18009 = shufflevector <32 x i16> %18008, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18010 = shl nsw i64 %17942, 5
  %18011 = add nsw i64 %18010, %17801
  %18012 = getelementptr inbounds i16, i16* %blur_x879, i64 %18011
  %18013 = bitcast i16* %18012 to <16 x i16>*
  store <16 x i16> %18009, <16 x i16>* %18013, align 2, !tbaa !399
  %18014 = shufflevector <32 x i16> %18008, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18015 = getelementptr inbounds i16, i16* %18012, i64 16
  %18016 = bitcast i16* %18015 to <16 x i16>*
  store <16 x i16> %18014, <16 x i16>* %18016, align 2, !tbaa !399
  br label %"consume blur_x1194"

"consume blur_x1194":                             ; preds = %"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge", %"produce blur_x1192"
  %.pre-phi3573 = phi i64 [ %.pre3572, %"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge" ], [ %18010, %"produce blur_x1192" ]
  %18017 = add nsw i64 %17804, %.pre-phi3573
  %18018 = getelementptr inbounds i16, i16* %blur_x879, i64 %18017
  %18019 = bitcast i16* %18018 to <16 x i16>*
  %18020 = load <16 x i16>, <16 x i16>* %18019, align 2, !tbaa !399
  %18021 = getelementptr inbounds i16, i16* %18018, i64 16
  %18022 = bitcast i16* %18021 to <16 x i16>*
  %18023 = load <16 x i16>, <16 x i16>* %18022, align 2, !tbaa !399
  %18024 = add nsw i64 %17807, %.pre-phi3573
  %18025 = getelementptr inbounds i16, i16* %blur_x879, i64 %18024
  %18026 = bitcast i16* %18025 to <16 x i16>*
  %18027 = load <16 x i16>, <16 x i16>* %18026, align 2, !tbaa !399
  %18028 = getelementptr inbounds i16, i16* %18025, i64 16
  %18029 = bitcast i16* %18028 to <16 x i16>*
  %18030 = load <16 x i16>, <16 x i16>* %18029, align 2, !tbaa !399
  %18031 = add nsw i64 %17810, %.pre-phi3573
  %18032 = getelementptr inbounds i16, i16* %blur_x879, i64 %18031
  %18033 = bitcast i16* %18032 to <16 x i16>*
  %18034 = load <16 x i16>, <16 x i16>* %18033, align 2, !tbaa !399
  %18035 = getelementptr inbounds i16, i16* %18032, i64 16
  %18036 = bitcast i16* %18035 to <16 x i16>*
  %18037 = load <16 x i16>, <16 x i16>* %18036, align 2, !tbaa !399
  %18038 = add nsw i64 %17813, %.pre-phi3573
  %18039 = getelementptr inbounds i16, i16* %blur_x879, i64 %18038
  %18040 = bitcast i16* %18039 to <16 x i16>*
  %18041 = load <16 x i16>, <16 x i16>* %18040, align 2, !tbaa !399
  %18042 = getelementptr inbounds i16, i16* %18039, i64 16
  %18043 = bitcast i16* %18042 to <16 x i16>*
  %18044 = load <16 x i16>, <16 x i16>* %18043, align 2, !tbaa !399
  %18045 = add nsw i64 %17816, %.pre-phi3573
  %18046 = getelementptr inbounds i16, i16* %blur_x879, i64 %18045
  %18047 = bitcast i16* %18046 to <16 x i16>*
  %18048 = load <16 x i16>, <16 x i16>* %18047, align 2, !tbaa !399
  %18049 = getelementptr inbounds i16, i16* %18046, i64 16
  %18050 = bitcast i16* %18049 to <16 x i16>*
  %18051 = load <16 x i16>, <16 x i16>* %18050, align 2, !tbaa !399
  %18052 = add <16 x i16> %18027, %18020
  %18053 = add <16 x i16> %18052, %18034
  %18054 = add <16 x i16> %18053, %18041
  %18055 = add <16 x i16> %18054, %18048
  %18056 = add <16 x i16> %18030, %18023
  %18057 = add <16 x i16> %18056, %18037
  %18058 = add <16 x i16> %18057, %18044
  %18059 = add <16 x i16> %18058, %18051
  %18060 = shufflevector <16 x i16> %18055, <16 x i16> %18059, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18061 = udiv <32 x i16> %18060, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18062 = shufflevector <32 x i16> %18061, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18063 = add nsw i64 %17820, %.pre-phi3573
  %18064 = getelementptr inbounds i16, i16* %263, i64 %18063
  %18065 = bitcast i16* %18064 to <16 x i16>*
  store <16 x i16> %18062, <16 x i16>* %18065, align 2, !tbaa !401
  %18066 = shufflevector <32 x i16> %18061, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18067 = getelementptr inbounds i16, i16* %18064, i64 16
  %18068 = bitcast i16* %18067 to <16 x i16>*
  store <16 x i16> %18066, <16 x i16>* %18068, align 2, !tbaa !401
  %indvars.iv.next3383 = add nuw nsw i64 %indvars.iv3382, 1
  %.not2647 = icmp eq i64 %indvars.iv.next3383, %530
  br i1 %.not2647, label %"end for blur_y.s0.x.x.rebased1187", label %"for blur_y.s0.x.x.rebased1186"

"for blur_y.s0.x.x.rebased1202":                  ; preds = %"for blur_y.s0.x.x.rebased1202.preheader", %"consume blur_x1213"
  %blur_y.s0.x.x.rebased1204 = phi i32 [ %18177, %"consume blur_x1213" ], [ 0, %"for blur_y.s0.x.x.rebased1202.preheader" ]
  %18069 = add nsw i32 %blur_y.s0.x.x.rebased1204, %t1626814
  %a1937 = shl nsw i32 %18069, 5
  %18070 = icmp sgt i32 %t1647, %a1937
  %blur_y.s0.x.v0.base.s1205 = select i1 %18070, i32 %a1937, i32 %t1647
  %18071 = icmp slt i32 %18069, 1
  %18072 = icmp sgt i32 %198, %a1937
  %18073 = or i1 %18071, %18072
  br i1 %18073, label %"produce blur_x1210", label %"consume blur_x1213"

"end for blur_y.s0.x.x.rebased1203":              ; preds = %"consume blur_x1213", %"end for blur_y.s0.x.x.rebased1187"
  br i1 %229, label %"produce blur_x1217", label %after_bb1214

"produce blur_x1210":                             ; preds = %"for blur_y.s0.x.x.rebased1202"
  %18074 = icmp slt i32 %blur_y.s0.x.v0.base.s1205, %198
  %blur_x.s0.x.v1.base.s1211 = select i1 %18074, i32 %blur_y.s0.x.v0.base.s1205, i32 %198
  %t7811212 = add nsw i32 %361, %blur_x.s0.x.v1.base.s1211
  %18075 = sext i32 %t7811212 to i64
  %18076 = getelementptr inbounds i16, i16* %read_input822, i64 %18075
  %18077 = getelementptr inbounds i16, i16* %18076, i64 1
  %18078 = bitcast i16* %18077 to <16 x i16>*
  %18079 = load <16 x i16>, <16 x i16>* %18078, align 2, !tbaa !396
  %18080 = getelementptr inbounds i16, i16* %18076, i64 17
  %18081 = bitcast i16* %18080 to <16 x i16>*
  %18082 = load <16 x i16>, <16 x i16>* %18081, align 2, !tbaa !396
  %18083 = bitcast i16* %18076 to <16 x i16>*
  %18084 = load <16 x i16>, <16 x i16>* %18083, align 2, !tbaa !396
  %18085 = getelementptr inbounds i16, i16* %18076, i64 16
  %18086 = bitcast i16* %18085 to <16 x i16>*
  %18087 = load <16 x i16>, <16 x i16>* %18086, align 2, !tbaa !396
  %18088 = getelementptr inbounds i16, i16* %18076, i64 2
  %18089 = bitcast i16* %18088 to <16 x i16>*
  %18090 = load <16 x i16>, <16 x i16>* %18089, align 2, !tbaa !396
  %18091 = getelementptr inbounds i16, i16* %18076, i64 18
  %18092 = bitcast i16* %18091 to <16 x i16>*
  %18093 = load <16 x i16>, <16 x i16>* %18092, align 2, !tbaa !396
  %18094 = getelementptr inbounds i16, i16* %18076, i64 4
  %18095 = bitcast i16* %18094 to <16 x i16>*
  %18096 = load <16 x i16>, <16 x i16>* %18095, align 2, !tbaa !396
  %18097 = getelementptr inbounds i16, i16* %18076, i64 20
  %18098 = bitcast i16* %18097 to <16 x i16>*
  %18099 = load <16 x i16>, <16 x i16>* %18098, align 2, !tbaa !396
  %18100 = getelementptr inbounds i16, i16* %18076, i64 3
  %18101 = bitcast i16* %18100 to <16 x i16>*
  %18102 = load <16 x i16>, <16 x i16>* %18101, align 2, !tbaa !396
  %18103 = getelementptr inbounds i16, i16* %18076, i64 19
  %18104 = bitcast i16* %18103 to <16 x i16>*
  %18105 = load <16 x i16>, <16 x i16>* %18104, align 2, !tbaa !396
  %18106 = add <16 x i16> %18084, %18079
  %18107 = add <16 x i16> %18106, %18090
  %18108 = add <16 x i16> %18107, %18096
  %18109 = add <16 x i16> %18108, %18102
  %18110 = add <16 x i16> %18087, %18082
  %18111 = add <16 x i16> %18110, %18093
  %18112 = add <16 x i16> %18111, %18099
  %18113 = add <16 x i16> %18112, %18105
  %18114 = shufflevector <16 x i16> %18109, <16 x i16> %18113, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18115 = udiv <32 x i16> %18114, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18116 = shufflevector <32 x i16> %18115, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18117 = sext i32 %blur_x.s0.x.v1.base.s1211 to i64
  %18118 = add nsw i64 %18117, %17948
  %18119 = getelementptr inbounds i16, i16* %blur_x879, i64 %18118
  %18120 = bitcast i16* %18119 to <16 x i16>*
  store <16 x i16> %18116, <16 x i16>* %18120, align 2, !tbaa !399
  %18121 = shufflevector <32 x i16> %18115, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18122 = getelementptr inbounds i16, i16* %18119, i64 16
  %18123 = bitcast i16* %18122 to <16 x i16>*
  store <16 x i16> %18121, <16 x i16>* %18123, align 2, !tbaa !399
  br label %"consume blur_x1213"

"consume blur_x1213":                             ; preds = %"for blur_y.s0.x.x.rebased1202", %"produce blur_x1210"
  %18124 = sext i32 %blur_y.s0.x.v0.base.s1205 to i64
  %18125 = add nsw i64 %17951, %18124
  %18126 = getelementptr inbounds i16, i16* %blur_x879, i64 %18125
  %18127 = bitcast i16* %18126 to <16 x i16>*
  %18128 = load <16 x i16>, <16 x i16>* %18127, align 2, !tbaa !399
  %18129 = getelementptr inbounds i16, i16* %18126, i64 16
  %18130 = bitcast i16* %18129 to <16 x i16>*
  %18131 = load <16 x i16>, <16 x i16>* %18130, align 2, !tbaa !399
  %18132 = add nsw i64 %17954, %18124
  %18133 = getelementptr inbounds i16, i16* %blur_x879, i64 %18132
  %18134 = bitcast i16* %18133 to <16 x i16>*
  %18135 = load <16 x i16>, <16 x i16>* %18134, align 2, !tbaa !399
  %18136 = getelementptr inbounds i16, i16* %18133, i64 16
  %18137 = bitcast i16* %18136 to <16 x i16>*
  %18138 = load <16 x i16>, <16 x i16>* %18137, align 2, !tbaa !399
  %18139 = add nsw i64 %17957, %18124
  %18140 = getelementptr inbounds i16, i16* %blur_x879, i64 %18139
  %18141 = bitcast i16* %18140 to <16 x i16>*
  %18142 = load <16 x i16>, <16 x i16>* %18141, align 2, !tbaa !399
  %18143 = getelementptr inbounds i16, i16* %18140, i64 16
  %18144 = bitcast i16* %18143 to <16 x i16>*
  %18145 = load <16 x i16>, <16 x i16>* %18144, align 2, !tbaa !399
  %18146 = add nsw i64 %17960, %18124
  %18147 = getelementptr inbounds i16, i16* %blur_x879, i64 %18146
  %18148 = bitcast i16* %18147 to <16 x i16>*
  %18149 = load <16 x i16>, <16 x i16>* %18148, align 2, !tbaa !399
  %18150 = getelementptr inbounds i16, i16* %18147, i64 16
  %18151 = bitcast i16* %18150 to <16 x i16>*
  %18152 = load <16 x i16>, <16 x i16>* %18151, align 2, !tbaa !399
  %18153 = add nsw i64 %17963, %18124
  %18154 = getelementptr inbounds i16, i16* %blur_x879, i64 %18153
  %18155 = bitcast i16* %18154 to <16 x i16>*
  %18156 = load <16 x i16>, <16 x i16>* %18155, align 2, !tbaa !399
  %18157 = getelementptr inbounds i16, i16* %18154, i64 16
  %18158 = bitcast i16* %18157 to <16 x i16>*
  %18159 = load <16 x i16>, <16 x i16>* %18158, align 2, !tbaa !399
  %18160 = add <16 x i16> %18135, %18128
  %18161 = add <16 x i16> %18160, %18142
  %18162 = add <16 x i16> %18161, %18149
  %18163 = add <16 x i16> %18162, %18156
  %18164 = add <16 x i16> %18138, %18131
  %18165 = add <16 x i16> %18164, %18145
  %18166 = add <16 x i16> %18165, %18152
  %18167 = add <16 x i16> %18166, %18159
  %18168 = shufflevector <16 x i16> %18163, <16 x i16> %18167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18169 = udiv <32 x i16> %18168, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18170 = shufflevector <32 x i16> %18169, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18171 = add nsw i64 %17967, %18124
  %18172 = getelementptr inbounds i16, i16* %263, i64 %18171
  %18173 = bitcast i16* %18172 to <16 x i16>*
  store <16 x i16> %18170, <16 x i16>* %18173, align 2, !tbaa !401
  %18174 = shufflevector <32 x i16> %18169, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18175 = getelementptr inbounds i16, i16* %18172, i64 16
  %18176 = bitcast i16* %18175 to <16 x i16>*
  store <16 x i16> %18174, <16 x i16>* %18176, align 2, !tbaa !401
  %18177 = add nuw nsw i32 %blur_y.s0.x.x.rebased1204, 1
  %.not2646 = icmp eq i32 %18177, %t1683898
  br i1 %.not2646, label %"end for blur_y.s0.x.x.rebased1203", label %"for blur_y.s0.x.x.rebased1202"

after_bb1214:                                     ; preds = %"end for blur_y.s0.x.x.rebased1203", %"produce blur_x1217"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1229.preheader", label %"end for blur_y.s0.x.x.rebased1230", !prof !386

"for blur_y.s0.x.x.rebased1229.preheader":        ; preds = %after_bb1214
  %18178 = sext i32 %t1688914 to i64
  %18179 = zext i32 %.pre-phi3563 to i64
  %18180 = mul nsw i64 %18179, %337
  %18181 = sub nsw i64 %18180, %298
  %18182 = zext i32 %.pre-phi3557 to i64
  %18183 = mul nsw i64 %18182, %337
  %18184 = sub nsw i64 %18183, %298
  %18185 = zext i32 %.pre-phi3569 to i64
  %18186 = mul nsw i64 %18185, %337
  %18187 = sub nsw i64 %18186, %298
  %18188 = zext i32 %.pre-phi3539 to i64
  %18189 = mul nsw i64 %18188, %337
  %18190 = sub nsw i64 %18189, %298
  %18191 = zext i32 %.pre-phi3535 to i64
  %18192 = mul nsw i64 %18191, %337
  %18193 = sub nsw i64 %18192, %298
  %18194 = sext i32 %a379 to i64
  %18195 = add nsw i64 %18194, 5
  %18196 = mul nsw i64 %18195, %334
  %18197 = add nsw i64 %18196, %338
  br label %"for blur_y.s0.x.x.rebased1229"

"produce blur_x1217":                             ; preds = %"end for blur_y.s0.x.x.rebased1203"
  %18198 = getelementptr inbounds i16, i16* %read_input822, i64 %365
  %18199 = getelementptr inbounds i16, i16* %18198, i64 -31
  %18200 = bitcast i16* %18199 to <16 x i16>*
  %18201 = load <16 x i16>, <16 x i16>* %18200, align 2, !tbaa !396
  %18202 = getelementptr inbounds i16, i16* %18198, i64 -15
  %18203 = bitcast i16* %18202 to <16 x i16>*
  %18204 = load <16 x i16>, <16 x i16>* %18203, align 2, !tbaa !396
  %18205 = getelementptr inbounds i16, i16* %18198, i64 -32
  %18206 = bitcast i16* %18205 to <16 x i16>*
  %18207 = load <16 x i16>, <16 x i16>* %18206, align 2, !tbaa !396
  %18208 = getelementptr inbounds i16, i16* %18198, i64 -16
  %18209 = bitcast i16* %18208 to <16 x i16>*
  %18210 = load <16 x i16>, <16 x i16>* %18209, align 2, !tbaa !396
  %18211 = getelementptr inbounds i16, i16* %18198, i64 -30
  %18212 = bitcast i16* %18211 to <16 x i16>*
  %18213 = load <16 x i16>, <16 x i16>* %18212, align 2, !tbaa !396
  %18214 = getelementptr inbounds i16, i16* %18198, i64 -14
  %18215 = bitcast i16* %18214 to <16 x i16>*
  %18216 = load <16 x i16>, <16 x i16>* %18215, align 2, !tbaa !396
  %18217 = getelementptr inbounds i16, i16* %18198, i64 -28
  %18218 = bitcast i16* %18217 to <16 x i16>*
  %18219 = load <16 x i16>, <16 x i16>* %18218, align 2, !tbaa !396
  %18220 = getelementptr inbounds i16, i16* %18198, i64 -12
  %18221 = bitcast i16* %18220 to <16 x i16>*
  %18222 = load <16 x i16>, <16 x i16>* %18221, align 2, !tbaa !396
  %18223 = getelementptr inbounds i16, i16* %18198, i64 -29
  %18224 = bitcast i16* %18223 to <16 x i16>*
  %18225 = load <16 x i16>, <16 x i16>* %18224, align 2, !tbaa !396
  %18226 = getelementptr inbounds i16, i16* %18198, i64 -13
  %18227 = bitcast i16* %18226 to <16 x i16>*
  %18228 = load <16 x i16>, <16 x i16>* %18227, align 2, !tbaa !396
  %18229 = add <16 x i16> %18207, %18201
  %18230 = add <16 x i16> %18229, %18213
  %18231 = add <16 x i16> %18230, %18219
  %18232 = add <16 x i16> %18231, %18225
  %18233 = add <16 x i16> %18210, %18204
  %18234 = add <16 x i16> %18233, %18216
  %18235 = add <16 x i16> %18234, %18222
  %18236 = add <16 x i16> %18235, %18228
  %18237 = shufflevector <16 x i16> %18232, <16 x i16> %18236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18238 = udiv <32 x i16> %18237, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18239 = shufflevector <32 x i16> %18238, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18240 = zext i32 %.pre-phi3539 to i64
  %18241 = mul nsw i64 %299, %18240
  %18242 = add nsw i64 %301, %18241
  %18243 = getelementptr inbounds i16, i16* %blur_x879, i64 %18242
  %18244 = getelementptr inbounds i16, i16* %18243, i64 -32
  %18245 = bitcast i16* %18244 to <16 x i16>*
  store <16 x i16> %18239, <16 x i16>* %18245, align 2, !tbaa !399
  %18246 = shufflevector <32 x i16> %18238, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18247 = getelementptr inbounds i16, i16* %18243, i64 -16
  %18248 = bitcast i16* %18247 to <16 x i16>*
  store <16 x i16> %18246, <16 x i16>* %18248, align 2, !tbaa !399
  %18249 = zext i32 %.pre-phi3563 to i64
  %18250 = mul nsw i64 %18249, %333
  %18251 = add nsw i64 %18250, %296
  %18252 = getelementptr inbounds i16, i16* %blur_x879, i64 %18251
  %18253 = getelementptr inbounds i16, i16* %18252, i64 -32
  %18254 = bitcast i16* %18253 to <16 x i16>*
  %18255 = load <16 x i16>, <16 x i16>* %18254, align 2, !tbaa !399
  %18256 = getelementptr inbounds i16, i16* %18252, i64 -16
  %18257 = bitcast i16* %18256 to <16 x i16>*
  %18258 = load <16 x i16>, <16 x i16>* %18257, align 2, !tbaa !399
  %18259 = zext i32 %.pre-phi3557 to i64
  %18260 = mul nsw i64 %18259, %333
  %18261 = add nsw i64 %18260, %296
  %18262 = getelementptr inbounds i16, i16* %blur_x879, i64 %18261
  %18263 = getelementptr inbounds i16, i16* %18262, i64 -32
  %18264 = bitcast i16* %18263 to <16 x i16>*
  %18265 = load <16 x i16>, <16 x i16>* %18264, align 2, !tbaa !399
  %18266 = getelementptr inbounds i16, i16* %18262, i64 -16
  %18267 = bitcast i16* %18266 to <16 x i16>*
  %18268 = load <16 x i16>, <16 x i16>* %18267, align 2, !tbaa !399
  %18269 = zext i32 %.pre-phi3569 to i64
  %18270 = mul nsw i64 %18269, %333
  %18271 = add nsw i64 %18270, %296
  %18272 = getelementptr inbounds i16, i16* %blur_x879, i64 %18271
  %18273 = getelementptr inbounds i16, i16* %18272, i64 -32
  %18274 = bitcast i16* %18273 to <16 x i16>*
  %18275 = load <16 x i16>, <16 x i16>* %18274, align 2, !tbaa !399
  %18276 = getelementptr inbounds i16, i16* %18272, i64 -16
  %18277 = bitcast i16* %18276 to <16 x i16>*
  %18278 = load <16 x i16>, <16 x i16>* %18277, align 2, !tbaa !399
  %18279 = mul nsw i64 %18240, %333
  %18280 = add nsw i64 %18279, %296
  %18281 = getelementptr inbounds i16, i16* %blur_x879, i64 %18280
  %18282 = getelementptr inbounds i16, i16* %18281, i64 -32
  %18283 = bitcast i16* %18282 to <16 x i16>*
  %18284 = load <16 x i16>, <16 x i16>* %18283, align 2, !tbaa !399
  %18285 = getelementptr inbounds i16, i16* %18281, i64 -16
  %18286 = bitcast i16* %18285 to <16 x i16>*
  %18287 = load <16 x i16>, <16 x i16>* %18286, align 2, !tbaa !399
  %18288 = zext i32 %.pre-phi3535 to i64
  %18289 = mul nsw i64 %18288, %333
  %18290 = add nsw i64 %18289, %296
  %18291 = getelementptr inbounds i16, i16* %blur_x879, i64 %18290
  %18292 = getelementptr inbounds i16, i16* %18291, i64 -32
  %18293 = bitcast i16* %18292 to <16 x i16>*
  %18294 = load <16 x i16>, <16 x i16>* %18293, align 2, !tbaa !399
  %18295 = getelementptr inbounds i16, i16* %18291, i64 -16
  %18296 = bitcast i16* %18295 to <16 x i16>*
  %18297 = load <16 x i16>, <16 x i16>* %18296, align 2, !tbaa !399
  %18298 = add <16 x i16> %18265, %18255
  %18299 = add <16 x i16> %18298, %18275
  %18300 = add <16 x i16> %18299, %18284
  %18301 = add <16 x i16> %18300, %18294
  %18302 = add <16 x i16> %18268, %18258
  %18303 = add <16 x i16> %18302, %18278
  %18304 = add <16 x i16> %18303, %18287
  %18305 = add <16 x i16> %18304, %18297
  %18306 = shufflevector <16 x i16> %18301, <16 x i16> %18305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18307 = udiv <32 x i16> %18306, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18308 = shufflevector <32 x i16> %18307, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18309 = sext i32 %a379 to i64
  %18310 = add nsw i64 %18309, 5
  %18311 = mul nsw i64 %18310, %334
  %18312 = add nsw i64 %336, %18311
  %18313 = getelementptr inbounds i16, i16* %263, i64 %18312
  %18314 = getelementptr inbounds i16, i16* %18313, i64 -32
  %18315 = bitcast i16* %18314 to <16 x i16>*
  store <16 x i16> %18308, <16 x i16>* %18315, align 2, !tbaa !401
  %18316 = shufflevector <32 x i16> %18307, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18317 = getelementptr inbounds i16, i16* %18313, i64 -16
  %18318 = bitcast i16* %18317 to <16 x i16>*
  store <16 x i16> %18316, <16 x i16>* %18318, align 2, !tbaa !401
  br label %after_bb1214

"for blur_y.s0.x.x.rebased1229":                  ; preds = %"for blur_y.s0.x.x.rebased1229.preheader", %"consume blur_x1237"
  %indvars.iv3384 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1229.preheader" ], [ %indvars.iv.next3385, %"consume blur_x1237" ]
  %18319 = add nsw i64 %indvars.iv3384, %303
  %18320 = icmp slt i64 %18319, 1
  %18321 = trunc i64 %18319 to i32
  %18322 = shl nsw i32 %18321, 5
  %18323 = icmp sgt i32 %198, %18322
  %18324 = or i1 %18320, %18323
  br i1 %18324, label %"produce blur_x1235", label %"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge"

"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1229"
  %.pre3574 = shl nsw i64 %18319, 5
  br label %"consume blur_x1237"

"end for blur_y.s0.x.x.rebased1230":              ; preds = %"consume blur_x1237", %after_bb1214
  br i1 %304, label %"for blur_y.s0.x.x.rebased1245.preheader", label %"end for blur_y.s0.x.x.rebased1246", !prof !386

"for blur_y.s0.x.x.rebased1245.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1230"
  %18325 = sext i32 %t1688914 to i64
  %18326 = zext i32 %.pre-phi3563 to i64
  %18327 = mul nsw i64 %18326, %337
  %18328 = sub nsw i64 %18327, %298
  %18329 = zext i32 %.pre-phi3557 to i64
  %18330 = mul nsw i64 %18329, %337
  %18331 = sub nsw i64 %18330, %298
  %18332 = zext i32 %.pre-phi3569 to i64
  %18333 = mul nsw i64 %18332, %337
  %18334 = sub nsw i64 %18333, %298
  %18335 = zext i32 %.pre-phi3539 to i64
  %18336 = mul nsw i64 %18335, %337
  %18337 = sub nsw i64 %18336, %298
  %18338 = zext i32 %.pre-phi3535 to i64
  %18339 = mul nsw i64 %18338, %337
  %18340 = sub nsw i64 %18339, %298
  %18341 = sext i32 %a379 to i64
  %18342 = add nsw i64 %18341, 5
  %18343 = mul nsw i64 %18342, %334
  %18344 = add nsw i64 %18343, %338
  br label %"for blur_y.s0.x.x.rebased1245"

"produce blur_x1235":                             ; preds = %"for blur_y.s0.x.x.rebased1229"
  %t7921236 = add nsw i32 %367, %18322
  %18345 = sext i32 %t7921236 to i64
  %18346 = getelementptr inbounds i16, i16* %read_input822, i64 %18345
  %18347 = getelementptr inbounds i16, i16* %18346, i64 1
  %18348 = bitcast i16* %18347 to <16 x i16>*
  %18349 = load <16 x i16>, <16 x i16>* %18348, align 2, !tbaa !396
  %18350 = getelementptr inbounds i16, i16* %18346, i64 17
  %18351 = bitcast i16* %18350 to <16 x i16>*
  %18352 = load <16 x i16>, <16 x i16>* %18351, align 2, !tbaa !396
  %18353 = bitcast i16* %18346 to <16 x i16>*
  %18354 = load <16 x i16>, <16 x i16>* %18353, align 2, !tbaa !396
  %18355 = getelementptr inbounds i16, i16* %18346, i64 16
  %18356 = bitcast i16* %18355 to <16 x i16>*
  %18357 = load <16 x i16>, <16 x i16>* %18356, align 2, !tbaa !396
  %18358 = getelementptr inbounds i16, i16* %18346, i64 2
  %18359 = bitcast i16* %18358 to <16 x i16>*
  %18360 = load <16 x i16>, <16 x i16>* %18359, align 2, !tbaa !396
  %18361 = getelementptr inbounds i16, i16* %18346, i64 18
  %18362 = bitcast i16* %18361 to <16 x i16>*
  %18363 = load <16 x i16>, <16 x i16>* %18362, align 2, !tbaa !396
  %18364 = getelementptr inbounds i16, i16* %18346, i64 4
  %18365 = bitcast i16* %18364 to <16 x i16>*
  %18366 = load <16 x i16>, <16 x i16>* %18365, align 2, !tbaa !396
  %18367 = getelementptr inbounds i16, i16* %18346, i64 20
  %18368 = bitcast i16* %18367 to <16 x i16>*
  %18369 = load <16 x i16>, <16 x i16>* %18368, align 2, !tbaa !396
  %18370 = getelementptr inbounds i16, i16* %18346, i64 3
  %18371 = bitcast i16* %18370 to <16 x i16>*
  %18372 = load <16 x i16>, <16 x i16>* %18371, align 2, !tbaa !396
  %18373 = getelementptr inbounds i16, i16* %18346, i64 19
  %18374 = bitcast i16* %18373 to <16 x i16>*
  %18375 = load <16 x i16>, <16 x i16>* %18374, align 2, !tbaa !396
  %18376 = add <16 x i16> %18354, %18349
  %18377 = add <16 x i16> %18376, %18360
  %18378 = add <16 x i16> %18377, %18366
  %18379 = add <16 x i16> %18378, %18372
  %18380 = add <16 x i16> %18357, %18352
  %18381 = add <16 x i16> %18380, %18363
  %18382 = add <16 x i16> %18381, %18369
  %18383 = add <16 x i16> %18382, %18375
  %18384 = shufflevector <16 x i16> %18379, <16 x i16> %18383, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18385 = udiv <32 x i16> %18384, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18386 = shufflevector <32 x i16> %18385, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18387 = shl nsw i64 %18319, 5
  %18388 = add nsw i64 %18387, %18178
  %18389 = getelementptr inbounds i16, i16* %blur_x879, i64 %18388
  %18390 = bitcast i16* %18389 to <16 x i16>*
  store <16 x i16> %18386, <16 x i16>* %18390, align 2, !tbaa !399
  %18391 = shufflevector <32 x i16> %18385, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18392 = getelementptr inbounds i16, i16* %18389, i64 16
  %18393 = bitcast i16* %18392 to <16 x i16>*
  store <16 x i16> %18391, <16 x i16>* %18393, align 2, !tbaa !399
  br label %"consume blur_x1237"

"consume blur_x1237":                             ; preds = %"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge", %"produce blur_x1235"
  %.pre-phi3575 = phi i64 [ %.pre3574, %"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge" ], [ %18387, %"produce blur_x1235" ]
  %18394 = add nsw i64 %18181, %.pre-phi3575
  %18395 = getelementptr inbounds i16, i16* %blur_x879, i64 %18394
  %18396 = bitcast i16* %18395 to <16 x i16>*
  %18397 = load <16 x i16>, <16 x i16>* %18396, align 2, !tbaa !399
  %18398 = getelementptr inbounds i16, i16* %18395, i64 16
  %18399 = bitcast i16* %18398 to <16 x i16>*
  %18400 = load <16 x i16>, <16 x i16>* %18399, align 2, !tbaa !399
  %18401 = add nsw i64 %18184, %.pre-phi3575
  %18402 = getelementptr inbounds i16, i16* %blur_x879, i64 %18401
  %18403 = bitcast i16* %18402 to <16 x i16>*
  %18404 = load <16 x i16>, <16 x i16>* %18403, align 2, !tbaa !399
  %18405 = getelementptr inbounds i16, i16* %18402, i64 16
  %18406 = bitcast i16* %18405 to <16 x i16>*
  %18407 = load <16 x i16>, <16 x i16>* %18406, align 2, !tbaa !399
  %18408 = add nsw i64 %18187, %.pre-phi3575
  %18409 = getelementptr inbounds i16, i16* %blur_x879, i64 %18408
  %18410 = bitcast i16* %18409 to <16 x i16>*
  %18411 = load <16 x i16>, <16 x i16>* %18410, align 2, !tbaa !399
  %18412 = getelementptr inbounds i16, i16* %18409, i64 16
  %18413 = bitcast i16* %18412 to <16 x i16>*
  %18414 = load <16 x i16>, <16 x i16>* %18413, align 2, !tbaa !399
  %18415 = add nsw i64 %18190, %.pre-phi3575
  %18416 = getelementptr inbounds i16, i16* %blur_x879, i64 %18415
  %18417 = bitcast i16* %18416 to <16 x i16>*
  %18418 = load <16 x i16>, <16 x i16>* %18417, align 2, !tbaa !399
  %18419 = getelementptr inbounds i16, i16* %18416, i64 16
  %18420 = bitcast i16* %18419 to <16 x i16>*
  %18421 = load <16 x i16>, <16 x i16>* %18420, align 2, !tbaa !399
  %18422 = add nsw i64 %18193, %.pre-phi3575
  %18423 = getelementptr inbounds i16, i16* %blur_x879, i64 %18422
  %18424 = bitcast i16* %18423 to <16 x i16>*
  %18425 = load <16 x i16>, <16 x i16>* %18424, align 2, !tbaa !399
  %18426 = getelementptr inbounds i16, i16* %18423, i64 16
  %18427 = bitcast i16* %18426 to <16 x i16>*
  %18428 = load <16 x i16>, <16 x i16>* %18427, align 2, !tbaa !399
  %18429 = add <16 x i16> %18404, %18397
  %18430 = add <16 x i16> %18429, %18411
  %18431 = add <16 x i16> %18430, %18418
  %18432 = add <16 x i16> %18431, %18425
  %18433 = add <16 x i16> %18407, %18400
  %18434 = add <16 x i16> %18433, %18414
  %18435 = add <16 x i16> %18434, %18421
  %18436 = add <16 x i16> %18435, %18428
  %18437 = shufflevector <16 x i16> %18432, <16 x i16> %18436, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18438 = udiv <32 x i16> %18437, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18439 = shufflevector <32 x i16> %18438, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18440 = add nsw i64 %18197, %.pre-phi3575
  %18441 = getelementptr inbounds i16, i16* %263, i64 %18440
  %18442 = bitcast i16* %18441 to <16 x i16>*
  store <16 x i16> %18439, <16 x i16>* %18442, align 2, !tbaa !401
  %18443 = shufflevector <32 x i16> %18438, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18444 = getelementptr inbounds i16, i16* %18441, i64 16
  %18445 = bitcast i16* %18444 to <16 x i16>*
  store <16 x i16> %18443, <16 x i16>* %18445, align 2, !tbaa !401
  %indvars.iv.next3385 = add nuw nsw i64 %indvars.iv3384, 1
  %.not2643 = icmp eq i64 %indvars.iv.next3385, %530
  br i1 %.not2643, label %"end for blur_y.s0.x.x.rebased1230", label %"for blur_y.s0.x.x.rebased1229"

"for blur_y.s0.x.x.rebased1245":                  ; preds = %"for blur_y.s0.x.x.rebased1245.preheader", %"consume blur_x1256"
  %blur_y.s0.x.x.rebased1247 = phi i32 [ %18554, %"consume blur_x1256" ], [ 0, %"for blur_y.s0.x.x.rebased1245.preheader" ]
  %18446 = add nsw i32 %blur_y.s0.x.x.rebased1247, %t1626814
  %a2094 = shl nsw i32 %18446, 5
  %18447 = icmp sgt i32 %t1647, %a2094
  %blur_y.s0.x.v0.base.s1248 = select i1 %18447, i32 %a2094, i32 %t1647
  %18448 = icmp slt i32 %18446, 1
  %18449 = icmp sgt i32 %198, %a2094
  %18450 = or i1 %18448, %18449
  br i1 %18450, label %"produce blur_x1253", label %"consume blur_x1256"

"end for blur_y.s0.x.x.rebased1246":              ; preds = %"consume blur_x1256", %"end for blur_y.s0.x.x.rebased1230"
  br i1 %229, label %"produce blur_x1260", label %after_bb1257

"produce blur_x1253":                             ; preds = %"for blur_y.s0.x.x.rebased1245"
  %18451 = icmp slt i32 %blur_y.s0.x.v0.base.s1248, %198
  %blur_x.s0.x.v1.base.s1254 = select i1 %18451, i32 %blur_y.s0.x.v0.base.s1248, i32 %198
  %t7971255 = add nsw i32 %367, %blur_x.s0.x.v1.base.s1254
  %18452 = sext i32 %t7971255 to i64
  %18453 = getelementptr inbounds i16, i16* %read_input822, i64 %18452
  %18454 = getelementptr inbounds i16, i16* %18453, i64 1
  %18455 = bitcast i16* %18454 to <16 x i16>*
  %18456 = load <16 x i16>, <16 x i16>* %18455, align 2, !tbaa !396
  %18457 = getelementptr inbounds i16, i16* %18453, i64 17
  %18458 = bitcast i16* %18457 to <16 x i16>*
  %18459 = load <16 x i16>, <16 x i16>* %18458, align 2, !tbaa !396
  %18460 = bitcast i16* %18453 to <16 x i16>*
  %18461 = load <16 x i16>, <16 x i16>* %18460, align 2, !tbaa !396
  %18462 = getelementptr inbounds i16, i16* %18453, i64 16
  %18463 = bitcast i16* %18462 to <16 x i16>*
  %18464 = load <16 x i16>, <16 x i16>* %18463, align 2, !tbaa !396
  %18465 = getelementptr inbounds i16, i16* %18453, i64 2
  %18466 = bitcast i16* %18465 to <16 x i16>*
  %18467 = load <16 x i16>, <16 x i16>* %18466, align 2, !tbaa !396
  %18468 = getelementptr inbounds i16, i16* %18453, i64 18
  %18469 = bitcast i16* %18468 to <16 x i16>*
  %18470 = load <16 x i16>, <16 x i16>* %18469, align 2, !tbaa !396
  %18471 = getelementptr inbounds i16, i16* %18453, i64 4
  %18472 = bitcast i16* %18471 to <16 x i16>*
  %18473 = load <16 x i16>, <16 x i16>* %18472, align 2, !tbaa !396
  %18474 = getelementptr inbounds i16, i16* %18453, i64 20
  %18475 = bitcast i16* %18474 to <16 x i16>*
  %18476 = load <16 x i16>, <16 x i16>* %18475, align 2, !tbaa !396
  %18477 = getelementptr inbounds i16, i16* %18453, i64 3
  %18478 = bitcast i16* %18477 to <16 x i16>*
  %18479 = load <16 x i16>, <16 x i16>* %18478, align 2, !tbaa !396
  %18480 = getelementptr inbounds i16, i16* %18453, i64 19
  %18481 = bitcast i16* %18480 to <16 x i16>*
  %18482 = load <16 x i16>, <16 x i16>* %18481, align 2, !tbaa !396
  %18483 = add <16 x i16> %18461, %18456
  %18484 = add <16 x i16> %18483, %18467
  %18485 = add <16 x i16> %18484, %18473
  %18486 = add <16 x i16> %18485, %18479
  %18487 = add <16 x i16> %18464, %18459
  %18488 = add <16 x i16> %18487, %18470
  %18489 = add <16 x i16> %18488, %18476
  %18490 = add <16 x i16> %18489, %18482
  %18491 = shufflevector <16 x i16> %18486, <16 x i16> %18490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18492 = udiv <32 x i16> %18491, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18493 = shufflevector <32 x i16> %18492, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18494 = sext i32 %blur_x.s0.x.v1.base.s1254 to i64
  %18495 = add nsw i64 %18494, %18325
  %18496 = getelementptr inbounds i16, i16* %blur_x879, i64 %18495
  %18497 = bitcast i16* %18496 to <16 x i16>*
  store <16 x i16> %18493, <16 x i16>* %18497, align 2, !tbaa !399
  %18498 = shufflevector <32 x i16> %18492, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18499 = getelementptr inbounds i16, i16* %18496, i64 16
  %18500 = bitcast i16* %18499 to <16 x i16>*
  store <16 x i16> %18498, <16 x i16>* %18500, align 2, !tbaa !399
  br label %"consume blur_x1256"

"consume blur_x1256":                             ; preds = %"for blur_y.s0.x.x.rebased1245", %"produce blur_x1253"
  %18501 = sext i32 %blur_y.s0.x.v0.base.s1248 to i64
  %18502 = add nsw i64 %18328, %18501
  %18503 = getelementptr inbounds i16, i16* %blur_x879, i64 %18502
  %18504 = bitcast i16* %18503 to <16 x i16>*
  %18505 = load <16 x i16>, <16 x i16>* %18504, align 2, !tbaa !399
  %18506 = getelementptr inbounds i16, i16* %18503, i64 16
  %18507 = bitcast i16* %18506 to <16 x i16>*
  %18508 = load <16 x i16>, <16 x i16>* %18507, align 2, !tbaa !399
  %18509 = add nsw i64 %18331, %18501
  %18510 = getelementptr inbounds i16, i16* %blur_x879, i64 %18509
  %18511 = bitcast i16* %18510 to <16 x i16>*
  %18512 = load <16 x i16>, <16 x i16>* %18511, align 2, !tbaa !399
  %18513 = getelementptr inbounds i16, i16* %18510, i64 16
  %18514 = bitcast i16* %18513 to <16 x i16>*
  %18515 = load <16 x i16>, <16 x i16>* %18514, align 2, !tbaa !399
  %18516 = add nsw i64 %18334, %18501
  %18517 = getelementptr inbounds i16, i16* %blur_x879, i64 %18516
  %18518 = bitcast i16* %18517 to <16 x i16>*
  %18519 = load <16 x i16>, <16 x i16>* %18518, align 2, !tbaa !399
  %18520 = getelementptr inbounds i16, i16* %18517, i64 16
  %18521 = bitcast i16* %18520 to <16 x i16>*
  %18522 = load <16 x i16>, <16 x i16>* %18521, align 2, !tbaa !399
  %18523 = add nsw i64 %18337, %18501
  %18524 = getelementptr inbounds i16, i16* %blur_x879, i64 %18523
  %18525 = bitcast i16* %18524 to <16 x i16>*
  %18526 = load <16 x i16>, <16 x i16>* %18525, align 2, !tbaa !399
  %18527 = getelementptr inbounds i16, i16* %18524, i64 16
  %18528 = bitcast i16* %18527 to <16 x i16>*
  %18529 = load <16 x i16>, <16 x i16>* %18528, align 2, !tbaa !399
  %18530 = add nsw i64 %18340, %18501
  %18531 = getelementptr inbounds i16, i16* %blur_x879, i64 %18530
  %18532 = bitcast i16* %18531 to <16 x i16>*
  %18533 = load <16 x i16>, <16 x i16>* %18532, align 2, !tbaa !399
  %18534 = getelementptr inbounds i16, i16* %18531, i64 16
  %18535 = bitcast i16* %18534 to <16 x i16>*
  %18536 = load <16 x i16>, <16 x i16>* %18535, align 2, !tbaa !399
  %18537 = add <16 x i16> %18512, %18505
  %18538 = add <16 x i16> %18537, %18519
  %18539 = add <16 x i16> %18538, %18526
  %18540 = add <16 x i16> %18539, %18533
  %18541 = add <16 x i16> %18515, %18508
  %18542 = add <16 x i16> %18541, %18522
  %18543 = add <16 x i16> %18542, %18529
  %18544 = add <16 x i16> %18543, %18536
  %18545 = shufflevector <16 x i16> %18540, <16 x i16> %18544, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18546 = udiv <32 x i16> %18545, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18547 = shufflevector <32 x i16> %18546, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18548 = add nsw i64 %18344, %18501
  %18549 = getelementptr inbounds i16, i16* %263, i64 %18548
  %18550 = bitcast i16* %18549 to <16 x i16>*
  store <16 x i16> %18547, <16 x i16>* %18550, align 2, !tbaa !401
  %18551 = shufflevector <32 x i16> %18546, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18552 = getelementptr inbounds i16, i16* %18549, i64 16
  %18553 = bitcast i16* %18552 to <16 x i16>*
  store <16 x i16> %18551, <16 x i16>* %18553, align 2, !tbaa !401
  %18554 = add nuw nsw i32 %blur_y.s0.x.x.rebased1247, 1
  %.not2642 = icmp eq i32 %18554, %t1683898
  br i1 %.not2642, label %"end for blur_y.s0.x.x.rebased1246", label %"for blur_y.s0.x.x.rebased1245"

after_bb1257:                                     ; preds = %"end for blur_y.s0.x.x.rebased1246", %"produce blur_x1260"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1272.preheader", label %"end for blur_y.s0.x.x.rebased1273", !prof !386

"for blur_y.s0.x.x.rebased1272.preheader":        ; preds = %after_bb1257
  %18555 = sext i32 %t1694944 to i64
  %18556 = zext i32 %.pre-phi3569 to i64
  %18557 = mul nsw i64 %18556, %337
  %18558 = sub nsw i64 %18557, %298
  %18559 = zext i32 %.pre-phi3563 to i64
  %18560 = mul nsw i64 %18559, %337
  %18561 = sub nsw i64 %18560, %298
  %18562 = zext i32 %.pre-phi3535 to i64
  %18563 = mul nsw i64 %18562, %337
  %18564 = sub nsw i64 %18563, %298
  %18565 = zext i32 %.pre-phi3543 to i64
  %18566 = mul nsw i64 %18565, %337
  %18567 = sub nsw i64 %18566, %298
  %18568 = zext i32 %.pre-phi3539 to i64
  %18569 = mul nsw i64 %18568, %337
  %18570 = sub nsw i64 %18569, %298
  %18571 = sext i32 %a379 to i64
  %18572 = add nsw i64 %18571, 6
  %18573 = mul nsw i64 %18572, %334
  %18574 = add nsw i64 %18573, %338
  br label %"for blur_y.s0.x.x.rebased1272"

"produce blur_x1260":                             ; preds = %"end for blur_y.s0.x.x.rebased1246"
  %18575 = getelementptr inbounds i16, i16* %read_input822, i64 %371
  %18576 = getelementptr inbounds i16, i16* %18575, i64 -31
  %18577 = bitcast i16* %18576 to <16 x i16>*
  %18578 = load <16 x i16>, <16 x i16>* %18577, align 2, !tbaa !396
  %18579 = getelementptr inbounds i16, i16* %18575, i64 -15
  %18580 = bitcast i16* %18579 to <16 x i16>*
  %18581 = load <16 x i16>, <16 x i16>* %18580, align 2, !tbaa !396
  %18582 = getelementptr inbounds i16, i16* %18575, i64 -32
  %18583 = bitcast i16* %18582 to <16 x i16>*
  %18584 = load <16 x i16>, <16 x i16>* %18583, align 2, !tbaa !396
  %18585 = getelementptr inbounds i16, i16* %18575, i64 -16
  %18586 = bitcast i16* %18585 to <16 x i16>*
  %18587 = load <16 x i16>, <16 x i16>* %18586, align 2, !tbaa !396
  %18588 = getelementptr inbounds i16, i16* %18575, i64 -30
  %18589 = bitcast i16* %18588 to <16 x i16>*
  %18590 = load <16 x i16>, <16 x i16>* %18589, align 2, !tbaa !396
  %18591 = getelementptr inbounds i16, i16* %18575, i64 -14
  %18592 = bitcast i16* %18591 to <16 x i16>*
  %18593 = load <16 x i16>, <16 x i16>* %18592, align 2, !tbaa !396
  %18594 = getelementptr inbounds i16, i16* %18575, i64 -28
  %18595 = bitcast i16* %18594 to <16 x i16>*
  %18596 = load <16 x i16>, <16 x i16>* %18595, align 2, !tbaa !396
  %18597 = getelementptr inbounds i16, i16* %18575, i64 -12
  %18598 = bitcast i16* %18597 to <16 x i16>*
  %18599 = load <16 x i16>, <16 x i16>* %18598, align 2, !tbaa !396
  %18600 = getelementptr inbounds i16, i16* %18575, i64 -29
  %18601 = bitcast i16* %18600 to <16 x i16>*
  %18602 = load <16 x i16>, <16 x i16>* %18601, align 2, !tbaa !396
  %18603 = getelementptr inbounds i16, i16* %18575, i64 -13
  %18604 = bitcast i16* %18603 to <16 x i16>*
  %18605 = load <16 x i16>, <16 x i16>* %18604, align 2, !tbaa !396
  %18606 = add <16 x i16> %18584, %18578
  %18607 = add <16 x i16> %18606, %18590
  %18608 = add <16 x i16> %18607, %18596
  %18609 = add <16 x i16> %18608, %18602
  %18610 = add <16 x i16> %18587, %18581
  %18611 = add <16 x i16> %18610, %18593
  %18612 = add <16 x i16> %18611, %18599
  %18613 = add <16 x i16> %18612, %18605
  %18614 = shufflevector <16 x i16> %18609, <16 x i16> %18613, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18615 = udiv <32 x i16> %18614, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18616 = shufflevector <32 x i16> %18615, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18617 = zext i32 %.pre-phi3543 to i64
  %18618 = mul nsw i64 %299, %18617
  %18619 = add nsw i64 %301, %18618
  %18620 = getelementptr inbounds i16, i16* %blur_x879, i64 %18619
  %18621 = getelementptr inbounds i16, i16* %18620, i64 -32
  %18622 = bitcast i16* %18621 to <16 x i16>*
  store <16 x i16> %18616, <16 x i16>* %18622, align 2, !tbaa !399
  %18623 = shufflevector <32 x i16> %18615, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18624 = getelementptr inbounds i16, i16* %18620, i64 -16
  %18625 = bitcast i16* %18624 to <16 x i16>*
  store <16 x i16> %18623, <16 x i16>* %18625, align 2, !tbaa !399
  %18626 = zext i32 %.pre-phi3569 to i64
  %18627 = mul nsw i64 %18626, %333
  %18628 = add nsw i64 %18627, %296
  %18629 = getelementptr inbounds i16, i16* %blur_x879, i64 %18628
  %18630 = getelementptr inbounds i16, i16* %18629, i64 -32
  %18631 = bitcast i16* %18630 to <16 x i16>*
  %18632 = load <16 x i16>, <16 x i16>* %18631, align 2, !tbaa !399
  %18633 = getelementptr inbounds i16, i16* %18629, i64 -16
  %18634 = bitcast i16* %18633 to <16 x i16>*
  %18635 = load <16 x i16>, <16 x i16>* %18634, align 2, !tbaa !399
  %18636 = zext i32 %.pre-phi3563 to i64
  %18637 = mul nsw i64 %18636, %333
  %18638 = add nsw i64 %18637, %296
  %18639 = getelementptr inbounds i16, i16* %blur_x879, i64 %18638
  %18640 = getelementptr inbounds i16, i16* %18639, i64 -32
  %18641 = bitcast i16* %18640 to <16 x i16>*
  %18642 = load <16 x i16>, <16 x i16>* %18641, align 2, !tbaa !399
  %18643 = getelementptr inbounds i16, i16* %18639, i64 -16
  %18644 = bitcast i16* %18643 to <16 x i16>*
  %18645 = load <16 x i16>, <16 x i16>* %18644, align 2, !tbaa !399
  %18646 = zext i32 %.pre-phi3535 to i64
  %18647 = mul nsw i64 %18646, %333
  %18648 = add nsw i64 %18647, %296
  %18649 = getelementptr inbounds i16, i16* %blur_x879, i64 %18648
  %18650 = getelementptr inbounds i16, i16* %18649, i64 -32
  %18651 = bitcast i16* %18650 to <16 x i16>*
  %18652 = load <16 x i16>, <16 x i16>* %18651, align 2, !tbaa !399
  %18653 = getelementptr inbounds i16, i16* %18649, i64 -16
  %18654 = bitcast i16* %18653 to <16 x i16>*
  %18655 = load <16 x i16>, <16 x i16>* %18654, align 2, !tbaa !399
  %18656 = mul nsw i64 %18617, %333
  %18657 = add nsw i64 %18656, %296
  %18658 = getelementptr inbounds i16, i16* %blur_x879, i64 %18657
  %18659 = getelementptr inbounds i16, i16* %18658, i64 -32
  %18660 = bitcast i16* %18659 to <16 x i16>*
  %18661 = load <16 x i16>, <16 x i16>* %18660, align 2, !tbaa !399
  %18662 = getelementptr inbounds i16, i16* %18658, i64 -16
  %18663 = bitcast i16* %18662 to <16 x i16>*
  %18664 = load <16 x i16>, <16 x i16>* %18663, align 2, !tbaa !399
  %18665 = zext i32 %.pre-phi3539 to i64
  %18666 = mul nsw i64 %18665, %333
  %18667 = add nsw i64 %18666, %296
  %18668 = getelementptr inbounds i16, i16* %blur_x879, i64 %18667
  %18669 = getelementptr inbounds i16, i16* %18668, i64 -32
  %18670 = bitcast i16* %18669 to <16 x i16>*
  %18671 = load <16 x i16>, <16 x i16>* %18670, align 2, !tbaa !399
  %18672 = getelementptr inbounds i16, i16* %18668, i64 -16
  %18673 = bitcast i16* %18672 to <16 x i16>*
  %18674 = load <16 x i16>, <16 x i16>* %18673, align 2, !tbaa !399
  %18675 = add <16 x i16> %18642, %18632
  %18676 = add <16 x i16> %18675, %18652
  %18677 = add <16 x i16> %18676, %18661
  %18678 = add <16 x i16> %18677, %18671
  %18679 = add <16 x i16> %18645, %18635
  %18680 = add <16 x i16> %18679, %18655
  %18681 = add <16 x i16> %18680, %18664
  %18682 = add <16 x i16> %18681, %18674
  %18683 = shufflevector <16 x i16> %18678, <16 x i16> %18682, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18684 = udiv <32 x i16> %18683, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18685 = shufflevector <32 x i16> %18684, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18686 = sext i32 %a379 to i64
  %18687 = add nsw i64 %18686, 6
  %18688 = mul nsw i64 %18687, %334
  %18689 = add nsw i64 %336, %18688
  %18690 = getelementptr inbounds i16, i16* %263, i64 %18689
  %18691 = getelementptr inbounds i16, i16* %18690, i64 -32
  %18692 = bitcast i16* %18691 to <16 x i16>*
  store <16 x i16> %18685, <16 x i16>* %18692, align 2, !tbaa !401
  %18693 = shufflevector <32 x i16> %18684, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18694 = getelementptr inbounds i16, i16* %18690, i64 -16
  %18695 = bitcast i16* %18694 to <16 x i16>*
  store <16 x i16> %18693, <16 x i16>* %18695, align 2, !tbaa !401
  br label %after_bb1257

"for blur_y.s0.x.x.rebased1272":                  ; preds = %"for blur_y.s0.x.x.rebased1272.preheader", %"consume blur_x1280"
  %indvars.iv3386 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1272.preheader" ], [ %indvars.iv.next3387, %"consume blur_x1280" ]
  %18696 = add nsw i64 %indvars.iv3386, %303
  %18697 = icmp slt i64 %18696, 1
  %18698 = trunc i64 %18696 to i32
  %18699 = shl nsw i32 %18698, 5
  %18700 = icmp sgt i32 %198, %18699
  %18701 = or i1 %18697, %18700
  br i1 %18701, label %"produce blur_x1278", label %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge"

"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1272"
  %.pre3576 = shl nsw i64 %18696, 5
  br label %"consume blur_x1280"

"end for blur_y.s0.x.x.rebased1273":              ; preds = %"consume blur_x1280", %after_bb1257
  br i1 %304, label %"for blur_y.s0.x.x.rebased1288.preheader", label %"end for blur_y.s0.x.x.rebased1289", !prof !386

"for blur_y.s0.x.x.rebased1288.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1273"
  %18702 = sext i32 %t1694944 to i64
  %18703 = zext i32 %.pre-phi3569 to i64
  %18704 = mul nsw i64 %18703, %337
  %18705 = sub nsw i64 %18704, %298
  %18706 = zext i32 %.pre-phi3563 to i64
  %18707 = mul nsw i64 %18706, %337
  %18708 = sub nsw i64 %18707, %298
  %18709 = zext i32 %.pre-phi3535 to i64
  %18710 = mul nsw i64 %18709, %337
  %18711 = sub nsw i64 %18710, %298
  %18712 = zext i32 %.pre-phi3543 to i64
  %18713 = mul nsw i64 %18712, %337
  %18714 = sub nsw i64 %18713, %298
  %18715 = zext i32 %.pre-phi3539 to i64
  %18716 = mul nsw i64 %18715, %337
  %18717 = sub nsw i64 %18716, %298
  %18718 = sext i32 %a379 to i64
  %18719 = add nsw i64 %18718, 6
  %18720 = mul nsw i64 %18719, %334
  %18721 = add nsw i64 %18720, %338
  br label %"for blur_y.s0.x.x.rebased1288"

"produce blur_x1278":                             ; preds = %"for blur_y.s0.x.x.rebased1272"
  %t8081279 = add nsw i32 %373, %18699
  %18722 = sext i32 %t8081279 to i64
  %18723 = getelementptr inbounds i16, i16* %read_input822, i64 %18722
  %18724 = getelementptr inbounds i16, i16* %18723, i64 1
  %18725 = bitcast i16* %18724 to <16 x i16>*
  %18726 = load <16 x i16>, <16 x i16>* %18725, align 2, !tbaa !396
  %18727 = getelementptr inbounds i16, i16* %18723, i64 17
  %18728 = bitcast i16* %18727 to <16 x i16>*
  %18729 = load <16 x i16>, <16 x i16>* %18728, align 2, !tbaa !396
  %18730 = bitcast i16* %18723 to <16 x i16>*
  %18731 = load <16 x i16>, <16 x i16>* %18730, align 2, !tbaa !396
  %18732 = getelementptr inbounds i16, i16* %18723, i64 16
  %18733 = bitcast i16* %18732 to <16 x i16>*
  %18734 = load <16 x i16>, <16 x i16>* %18733, align 2, !tbaa !396
  %18735 = getelementptr inbounds i16, i16* %18723, i64 2
  %18736 = bitcast i16* %18735 to <16 x i16>*
  %18737 = load <16 x i16>, <16 x i16>* %18736, align 2, !tbaa !396
  %18738 = getelementptr inbounds i16, i16* %18723, i64 18
  %18739 = bitcast i16* %18738 to <16 x i16>*
  %18740 = load <16 x i16>, <16 x i16>* %18739, align 2, !tbaa !396
  %18741 = getelementptr inbounds i16, i16* %18723, i64 4
  %18742 = bitcast i16* %18741 to <16 x i16>*
  %18743 = load <16 x i16>, <16 x i16>* %18742, align 2, !tbaa !396
  %18744 = getelementptr inbounds i16, i16* %18723, i64 20
  %18745 = bitcast i16* %18744 to <16 x i16>*
  %18746 = load <16 x i16>, <16 x i16>* %18745, align 2, !tbaa !396
  %18747 = getelementptr inbounds i16, i16* %18723, i64 3
  %18748 = bitcast i16* %18747 to <16 x i16>*
  %18749 = load <16 x i16>, <16 x i16>* %18748, align 2, !tbaa !396
  %18750 = getelementptr inbounds i16, i16* %18723, i64 19
  %18751 = bitcast i16* %18750 to <16 x i16>*
  %18752 = load <16 x i16>, <16 x i16>* %18751, align 2, !tbaa !396
  %18753 = add <16 x i16> %18731, %18726
  %18754 = add <16 x i16> %18753, %18737
  %18755 = add <16 x i16> %18754, %18743
  %18756 = add <16 x i16> %18755, %18749
  %18757 = add <16 x i16> %18734, %18729
  %18758 = add <16 x i16> %18757, %18740
  %18759 = add <16 x i16> %18758, %18746
  %18760 = add <16 x i16> %18759, %18752
  %18761 = shufflevector <16 x i16> %18756, <16 x i16> %18760, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18762 = udiv <32 x i16> %18761, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18763 = shufflevector <32 x i16> %18762, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18764 = shl nsw i64 %18696, 5
  %18765 = add nsw i64 %18764, %18555
  %18766 = getelementptr inbounds i16, i16* %blur_x879, i64 %18765
  %18767 = bitcast i16* %18766 to <16 x i16>*
  store <16 x i16> %18763, <16 x i16>* %18767, align 2, !tbaa !399
  %18768 = shufflevector <32 x i16> %18762, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18769 = getelementptr inbounds i16, i16* %18766, i64 16
  %18770 = bitcast i16* %18769 to <16 x i16>*
  store <16 x i16> %18768, <16 x i16>* %18770, align 2, !tbaa !399
  br label %"consume blur_x1280"

"consume blur_x1280":                             ; preds = %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge", %"produce blur_x1278"
  %.pre-phi3577 = phi i64 [ %.pre3576, %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge" ], [ %18764, %"produce blur_x1278" ]
  %18771 = add nsw i64 %18558, %.pre-phi3577
  %18772 = getelementptr inbounds i16, i16* %blur_x879, i64 %18771
  %18773 = bitcast i16* %18772 to <16 x i16>*
  %18774 = load <16 x i16>, <16 x i16>* %18773, align 2, !tbaa !399
  %18775 = getelementptr inbounds i16, i16* %18772, i64 16
  %18776 = bitcast i16* %18775 to <16 x i16>*
  %18777 = load <16 x i16>, <16 x i16>* %18776, align 2, !tbaa !399
  %18778 = add nsw i64 %18561, %.pre-phi3577
  %18779 = getelementptr inbounds i16, i16* %blur_x879, i64 %18778
  %18780 = bitcast i16* %18779 to <16 x i16>*
  %18781 = load <16 x i16>, <16 x i16>* %18780, align 2, !tbaa !399
  %18782 = getelementptr inbounds i16, i16* %18779, i64 16
  %18783 = bitcast i16* %18782 to <16 x i16>*
  %18784 = load <16 x i16>, <16 x i16>* %18783, align 2, !tbaa !399
  %18785 = add nsw i64 %18564, %.pre-phi3577
  %18786 = getelementptr inbounds i16, i16* %blur_x879, i64 %18785
  %18787 = bitcast i16* %18786 to <16 x i16>*
  %18788 = load <16 x i16>, <16 x i16>* %18787, align 2, !tbaa !399
  %18789 = getelementptr inbounds i16, i16* %18786, i64 16
  %18790 = bitcast i16* %18789 to <16 x i16>*
  %18791 = load <16 x i16>, <16 x i16>* %18790, align 2, !tbaa !399
  %18792 = add nsw i64 %18567, %.pre-phi3577
  %18793 = getelementptr inbounds i16, i16* %blur_x879, i64 %18792
  %18794 = bitcast i16* %18793 to <16 x i16>*
  %18795 = load <16 x i16>, <16 x i16>* %18794, align 2, !tbaa !399
  %18796 = getelementptr inbounds i16, i16* %18793, i64 16
  %18797 = bitcast i16* %18796 to <16 x i16>*
  %18798 = load <16 x i16>, <16 x i16>* %18797, align 2, !tbaa !399
  %18799 = add nsw i64 %18570, %.pre-phi3577
  %18800 = getelementptr inbounds i16, i16* %blur_x879, i64 %18799
  %18801 = bitcast i16* %18800 to <16 x i16>*
  %18802 = load <16 x i16>, <16 x i16>* %18801, align 2, !tbaa !399
  %18803 = getelementptr inbounds i16, i16* %18800, i64 16
  %18804 = bitcast i16* %18803 to <16 x i16>*
  %18805 = load <16 x i16>, <16 x i16>* %18804, align 2, !tbaa !399
  %18806 = add <16 x i16> %18781, %18774
  %18807 = add <16 x i16> %18806, %18788
  %18808 = add <16 x i16> %18807, %18795
  %18809 = add <16 x i16> %18808, %18802
  %18810 = add <16 x i16> %18784, %18777
  %18811 = add <16 x i16> %18810, %18791
  %18812 = add <16 x i16> %18811, %18798
  %18813 = add <16 x i16> %18812, %18805
  %18814 = shufflevector <16 x i16> %18809, <16 x i16> %18813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18815 = udiv <32 x i16> %18814, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18816 = shufflevector <32 x i16> %18815, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18817 = add nsw i64 %18574, %.pre-phi3577
  %18818 = getelementptr inbounds i16, i16* %263, i64 %18817
  %18819 = bitcast i16* %18818 to <16 x i16>*
  store <16 x i16> %18816, <16 x i16>* %18819, align 2, !tbaa !401
  %18820 = shufflevector <32 x i16> %18815, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18821 = getelementptr inbounds i16, i16* %18818, i64 16
  %18822 = bitcast i16* %18821 to <16 x i16>*
  store <16 x i16> %18820, <16 x i16>* %18822, align 2, !tbaa !401
  %indvars.iv.next3387 = add nuw nsw i64 %indvars.iv3386, 1
  %.not2639 = icmp eq i64 %indvars.iv.next3387, %530
  br i1 %.not2639, label %"end for blur_y.s0.x.x.rebased1273", label %"for blur_y.s0.x.x.rebased1272"

"for blur_y.s0.x.x.rebased1288":                  ; preds = %"for blur_y.s0.x.x.rebased1288.preheader", %"consume blur_x1299"
  %blur_y.s0.x.x.rebased1290 = phi i32 [ %18931, %"consume blur_x1299" ], [ 0, %"for blur_y.s0.x.x.rebased1288.preheader" ]
  %18823 = add nsw i32 %blur_y.s0.x.x.rebased1290, %t1626814
  %a2251 = shl nsw i32 %18823, 5
  %18824 = icmp sgt i32 %t1647, %a2251
  %blur_y.s0.x.v0.base.s1291 = select i1 %18824, i32 %a2251, i32 %t1647
  %18825 = icmp slt i32 %18823, 1
  %18826 = icmp sgt i32 %198, %a2251
  %18827 = or i1 %18825, %18826
  br i1 %18827, label %"produce blur_x1296", label %"consume blur_x1299"

"end for blur_y.s0.x.x.rebased1289":              ; preds = %"consume blur_x1299", %"end for blur_y.s0.x.x.rebased1273"
  br i1 %229, label %"produce blur_x1303", label %after_bb1300

"produce blur_x1296":                             ; preds = %"for blur_y.s0.x.x.rebased1288"
  %18828 = icmp slt i32 %blur_y.s0.x.v0.base.s1291, %198
  %blur_x.s0.x.v1.base.s1297 = select i1 %18828, i32 %blur_y.s0.x.v0.base.s1291, i32 %198
  %t8131298 = add nsw i32 %373, %blur_x.s0.x.v1.base.s1297
  %18829 = sext i32 %t8131298 to i64
  %18830 = getelementptr inbounds i16, i16* %read_input822, i64 %18829
  %18831 = getelementptr inbounds i16, i16* %18830, i64 1
  %18832 = bitcast i16* %18831 to <16 x i16>*
  %18833 = load <16 x i16>, <16 x i16>* %18832, align 2, !tbaa !396
  %18834 = getelementptr inbounds i16, i16* %18830, i64 17
  %18835 = bitcast i16* %18834 to <16 x i16>*
  %18836 = load <16 x i16>, <16 x i16>* %18835, align 2, !tbaa !396
  %18837 = bitcast i16* %18830 to <16 x i16>*
  %18838 = load <16 x i16>, <16 x i16>* %18837, align 2, !tbaa !396
  %18839 = getelementptr inbounds i16, i16* %18830, i64 16
  %18840 = bitcast i16* %18839 to <16 x i16>*
  %18841 = load <16 x i16>, <16 x i16>* %18840, align 2, !tbaa !396
  %18842 = getelementptr inbounds i16, i16* %18830, i64 2
  %18843 = bitcast i16* %18842 to <16 x i16>*
  %18844 = load <16 x i16>, <16 x i16>* %18843, align 2, !tbaa !396
  %18845 = getelementptr inbounds i16, i16* %18830, i64 18
  %18846 = bitcast i16* %18845 to <16 x i16>*
  %18847 = load <16 x i16>, <16 x i16>* %18846, align 2, !tbaa !396
  %18848 = getelementptr inbounds i16, i16* %18830, i64 4
  %18849 = bitcast i16* %18848 to <16 x i16>*
  %18850 = load <16 x i16>, <16 x i16>* %18849, align 2, !tbaa !396
  %18851 = getelementptr inbounds i16, i16* %18830, i64 20
  %18852 = bitcast i16* %18851 to <16 x i16>*
  %18853 = load <16 x i16>, <16 x i16>* %18852, align 2, !tbaa !396
  %18854 = getelementptr inbounds i16, i16* %18830, i64 3
  %18855 = bitcast i16* %18854 to <16 x i16>*
  %18856 = load <16 x i16>, <16 x i16>* %18855, align 2, !tbaa !396
  %18857 = getelementptr inbounds i16, i16* %18830, i64 19
  %18858 = bitcast i16* %18857 to <16 x i16>*
  %18859 = load <16 x i16>, <16 x i16>* %18858, align 2, !tbaa !396
  %18860 = add <16 x i16> %18838, %18833
  %18861 = add <16 x i16> %18860, %18844
  %18862 = add <16 x i16> %18861, %18850
  %18863 = add <16 x i16> %18862, %18856
  %18864 = add <16 x i16> %18841, %18836
  %18865 = add <16 x i16> %18864, %18847
  %18866 = add <16 x i16> %18865, %18853
  %18867 = add <16 x i16> %18866, %18859
  %18868 = shufflevector <16 x i16> %18863, <16 x i16> %18867, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18869 = udiv <32 x i16> %18868, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18870 = shufflevector <32 x i16> %18869, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18871 = sext i32 %blur_x.s0.x.v1.base.s1297 to i64
  %18872 = add nsw i64 %18871, %18702
  %18873 = getelementptr inbounds i16, i16* %blur_x879, i64 %18872
  %18874 = bitcast i16* %18873 to <16 x i16>*
  store <16 x i16> %18870, <16 x i16>* %18874, align 2, !tbaa !399
  %18875 = shufflevector <32 x i16> %18869, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18876 = getelementptr inbounds i16, i16* %18873, i64 16
  %18877 = bitcast i16* %18876 to <16 x i16>*
  store <16 x i16> %18875, <16 x i16>* %18877, align 2, !tbaa !399
  br label %"consume blur_x1299"

"consume blur_x1299":                             ; preds = %"for blur_y.s0.x.x.rebased1288", %"produce blur_x1296"
  %18878 = sext i32 %blur_y.s0.x.v0.base.s1291 to i64
  %18879 = add nsw i64 %18705, %18878
  %18880 = getelementptr inbounds i16, i16* %blur_x879, i64 %18879
  %18881 = bitcast i16* %18880 to <16 x i16>*
  %18882 = load <16 x i16>, <16 x i16>* %18881, align 2, !tbaa !399
  %18883 = getelementptr inbounds i16, i16* %18880, i64 16
  %18884 = bitcast i16* %18883 to <16 x i16>*
  %18885 = load <16 x i16>, <16 x i16>* %18884, align 2, !tbaa !399
  %18886 = add nsw i64 %18708, %18878
  %18887 = getelementptr inbounds i16, i16* %blur_x879, i64 %18886
  %18888 = bitcast i16* %18887 to <16 x i16>*
  %18889 = load <16 x i16>, <16 x i16>* %18888, align 2, !tbaa !399
  %18890 = getelementptr inbounds i16, i16* %18887, i64 16
  %18891 = bitcast i16* %18890 to <16 x i16>*
  %18892 = load <16 x i16>, <16 x i16>* %18891, align 2, !tbaa !399
  %18893 = add nsw i64 %18711, %18878
  %18894 = getelementptr inbounds i16, i16* %blur_x879, i64 %18893
  %18895 = bitcast i16* %18894 to <16 x i16>*
  %18896 = load <16 x i16>, <16 x i16>* %18895, align 2, !tbaa !399
  %18897 = getelementptr inbounds i16, i16* %18894, i64 16
  %18898 = bitcast i16* %18897 to <16 x i16>*
  %18899 = load <16 x i16>, <16 x i16>* %18898, align 2, !tbaa !399
  %18900 = add nsw i64 %18714, %18878
  %18901 = getelementptr inbounds i16, i16* %blur_x879, i64 %18900
  %18902 = bitcast i16* %18901 to <16 x i16>*
  %18903 = load <16 x i16>, <16 x i16>* %18902, align 2, !tbaa !399
  %18904 = getelementptr inbounds i16, i16* %18901, i64 16
  %18905 = bitcast i16* %18904 to <16 x i16>*
  %18906 = load <16 x i16>, <16 x i16>* %18905, align 2, !tbaa !399
  %18907 = add nsw i64 %18717, %18878
  %18908 = getelementptr inbounds i16, i16* %blur_x879, i64 %18907
  %18909 = bitcast i16* %18908 to <16 x i16>*
  %18910 = load <16 x i16>, <16 x i16>* %18909, align 2, !tbaa !399
  %18911 = getelementptr inbounds i16, i16* %18908, i64 16
  %18912 = bitcast i16* %18911 to <16 x i16>*
  %18913 = load <16 x i16>, <16 x i16>* %18912, align 2, !tbaa !399
  %18914 = add <16 x i16> %18889, %18882
  %18915 = add <16 x i16> %18914, %18896
  %18916 = add <16 x i16> %18915, %18903
  %18917 = add <16 x i16> %18916, %18910
  %18918 = add <16 x i16> %18892, %18885
  %18919 = add <16 x i16> %18918, %18899
  %18920 = add <16 x i16> %18919, %18906
  %18921 = add <16 x i16> %18920, %18913
  %18922 = shufflevector <16 x i16> %18917, <16 x i16> %18921, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18923 = udiv <32 x i16> %18922, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18924 = shufflevector <32 x i16> %18923, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18925 = add nsw i64 %18721, %18878
  %18926 = getelementptr inbounds i16, i16* %263, i64 %18925
  %18927 = bitcast i16* %18926 to <16 x i16>*
  store <16 x i16> %18924, <16 x i16>* %18927, align 2, !tbaa !401
  %18928 = shufflevector <32 x i16> %18923, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18929 = getelementptr inbounds i16, i16* %18926, i64 16
  %18930 = bitcast i16* %18929 to <16 x i16>*
  store <16 x i16> %18928, <16 x i16>* %18930, align 2, !tbaa !401
  %18931 = add nuw nsw i32 %blur_y.s0.x.x.rebased1290, 1
  %.not2638 = icmp eq i32 %18931, %t1683898
  br i1 %.not2638, label %"end for blur_y.s0.x.x.rebased1289", label %"for blur_y.s0.x.x.rebased1288"

after_bb1300:                                     ; preds = %"end for blur_y.s0.x.x.rebased1289", %"produce blur_x1303"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1315.preheader", label %"end for blur_y.s0.x.x.rebased1316", !prof !386

"for blur_y.s0.x.x.rebased1315.preheader":        ; preds = %after_bb1300
  %18932 = sext i32 %t1700974 to i64
  %18933 = zext i32 %.pre-phi3535 to i64
  %18934 = mul nsw i64 %18933, %337
  %18935 = sub nsw i64 %18934, %298
  %18936 = zext i32 %.pre-phi3569 to i64
  %18937 = mul nsw i64 %18936, %337
  %18938 = sub nsw i64 %18937, %298
  %18939 = zext i32 %.pre-phi3539 to i64
  %18940 = mul nsw i64 %18939, %337
  %18941 = sub nsw i64 %18940, %298
  %18942 = zext i32 %.pre-phi3547 to i64
  %18943 = mul nsw i64 %18942, %337
  %18944 = sub nsw i64 %18943, %298
  %18945 = zext i32 %.pre-phi3543 to i64
  %18946 = mul nsw i64 %18945, %337
  %18947 = sub nsw i64 %18946, %298
  %18948 = sext i32 %a379 to i64
  %18949 = add nsw i64 %18948, 7
  %18950 = mul nsw i64 %18949, %334
  %18951 = add nsw i64 %18950, %338
  br label %"for blur_y.s0.x.x.rebased1315"

"produce blur_x1303":                             ; preds = %"end for blur_y.s0.x.x.rebased1289"
  %18952 = getelementptr inbounds i16, i16* %read_input822, i64 %377
  %18953 = getelementptr inbounds i16, i16* %18952, i64 -31
  %18954 = bitcast i16* %18953 to <16 x i16>*
  %18955 = load <16 x i16>, <16 x i16>* %18954, align 2, !tbaa !396
  %18956 = getelementptr inbounds i16, i16* %18952, i64 -15
  %18957 = bitcast i16* %18956 to <16 x i16>*
  %18958 = load <16 x i16>, <16 x i16>* %18957, align 2, !tbaa !396
  %18959 = getelementptr inbounds i16, i16* %18952, i64 -32
  %18960 = bitcast i16* %18959 to <16 x i16>*
  %18961 = load <16 x i16>, <16 x i16>* %18960, align 2, !tbaa !396
  %18962 = getelementptr inbounds i16, i16* %18952, i64 -16
  %18963 = bitcast i16* %18962 to <16 x i16>*
  %18964 = load <16 x i16>, <16 x i16>* %18963, align 2, !tbaa !396
  %18965 = getelementptr inbounds i16, i16* %18952, i64 -30
  %18966 = bitcast i16* %18965 to <16 x i16>*
  %18967 = load <16 x i16>, <16 x i16>* %18966, align 2, !tbaa !396
  %18968 = getelementptr inbounds i16, i16* %18952, i64 -14
  %18969 = bitcast i16* %18968 to <16 x i16>*
  %18970 = load <16 x i16>, <16 x i16>* %18969, align 2, !tbaa !396
  %18971 = getelementptr inbounds i16, i16* %18952, i64 -28
  %18972 = bitcast i16* %18971 to <16 x i16>*
  %18973 = load <16 x i16>, <16 x i16>* %18972, align 2, !tbaa !396
  %18974 = getelementptr inbounds i16, i16* %18952, i64 -12
  %18975 = bitcast i16* %18974 to <16 x i16>*
  %18976 = load <16 x i16>, <16 x i16>* %18975, align 2, !tbaa !396
  %18977 = getelementptr inbounds i16, i16* %18952, i64 -29
  %18978 = bitcast i16* %18977 to <16 x i16>*
  %18979 = load <16 x i16>, <16 x i16>* %18978, align 2, !tbaa !396
  %18980 = getelementptr inbounds i16, i16* %18952, i64 -13
  %18981 = bitcast i16* %18980 to <16 x i16>*
  %18982 = load <16 x i16>, <16 x i16>* %18981, align 2, !tbaa !396
  %18983 = add <16 x i16> %18961, %18955
  %18984 = add <16 x i16> %18983, %18967
  %18985 = add <16 x i16> %18984, %18973
  %18986 = add <16 x i16> %18985, %18979
  %18987 = add <16 x i16> %18964, %18958
  %18988 = add <16 x i16> %18987, %18970
  %18989 = add <16 x i16> %18988, %18976
  %18990 = add <16 x i16> %18989, %18982
  %18991 = shufflevector <16 x i16> %18986, <16 x i16> %18990, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18992 = udiv <32 x i16> %18991, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %18993 = shufflevector <32 x i16> %18992, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18994 = zext i32 %.pre-phi3547 to i64
  %18995 = mul nsw i64 %299, %18994
  %18996 = add nsw i64 %301, %18995
  %18997 = getelementptr inbounds i16, i16* %blur_x879, i64 %18996
  %18998 = getelementptr inbounds i16, i16* %18997, i64 -32
  %18999 = bitcast i16* %18998 to <16 x i16>*
  store <16 x i16> %18993, <16 x i16>* %18999, align 2, !tbaa !399
  %19000 = shufflevector <32 x i16> %18992, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19001 = getelementptr inbounds i16, i16* %18997, i64 -16
  %19002 = bitcast i16* %19001 to <16 x i16>*
  store <16 x i16> %19000, <16 x i16>* %19002, align 2, !tbaa !399
  %19003 = zext i32 %.pre-phi3535 to i64
  %19004 = mul nsw i64 %19003, %333
  %19005 = add nsw i64 %19004, %296
  %19006 = getelementptr inbounds i16, i16* %blur_x879, i64 %19005
  %19007 = getelementptr inbounds i16, i16* %19006, i64 -32
  %19008 = bitcast i16* %19007 to <16 x i16>*
  %19009 = load <16 x i16>, <16 x i16>* %19008, align 2, !tbaa !399
  %19010 = getelementptr inbounds i16, i16* %19006, i64 -16
  %19011 = bitcast i16* %19010 to <16 x i16>*
  %19012 = load <16 x i16>, <16 x i16>* %19011, align 2, !tbaa !399
  %19013 = zext i32 %.pre-phi3569 to i64
  %19014 = mul nsw i64 %19013, %333
  %19015 = add nsw i64 %19014, %296
  %19016 = getelementptr inbounds i16, i16* %blur_x879, i64 %19015
  %19017 = getelementptr inbounds i16, i16* %19016, i64 -32
  %19018 = bitcast i16* %19017 to <16 x i16>*
  %19019 = load <16 x i16>, <16 x i16>* %19018, align 2, !tbaa !399
  %19020 = getelementptr inbounds i16, i16* %19016, i64 -16
  %19021 = bitcast i16* %19020 to <16 x i16>*
  %19022 = load <16 x i16>, <16 x i16>* %19021, align 2, !tbaa !399
  %19023 = zext i32 %.pre-phi3539 to i64
  %19024 = mul nsw i64 %19023, %333
  %19025 = add nsw i64 %19024, %296
  %19026 = getelementptr inbounds i16, i16* %blur_x879, i64 %19025
  %19027 = getelementptr inbounds i16, i16* %19026, i64 -32
  %19028 = bitcast i16* %19027 to <16 x i16>*
  %19029 = load <16 x i16>, <16 x i16>* %19028, align 2, !tbaa !399
  %19030 = getelementptr inbounds i16, i16* %19026, i64 -16
  %19031 = bitcast i16* %19030 to <16 x i16>*
  %19032 = load <16 x i16>, <16 x i16>* %19031, align 2, !tbaa !399
  %19033 = mul nsw i64 %18994, %333
  %19034 = add nsw i64 %19033, %296
  %19035 = getelementptr inbounds i16, i16* %blur_x879, i64 %19034
  %19036 = getelementptr inbounds i16, i16* %19035, i64 -32
  %19037 = bitcast i16* %19036 to <16 x i16>*
  %19038 = load <16 x i16>, <16 x i16>* %19037, align 2, !tbaa !399
  %19039 = getelementptr inbounds i16, i16* %19035, i64 -16
  %19040 = bitcast i16* %19039 to <16 x i16>*
  %19041 = load <16 x i16>, <16 x i16>* %19040, align 2, !tbaa !399
  %19042 = zext i32 %.pre-phi3543 to i64
  %19043 = mul nsw i64 %19042, %333
  %19044 = add nsw i64 %19043, %296
  %19045 = getelementptr inbounds i16, i16* %blur_x879, i64 %19044
  %19046 = getelementptr inbounds i16, i16* %19045, i64 -32
  %19047 = bitcast i16* %19046 to <16 x i16>*
  %19048 = load <16 x i16>, <16 x i16>* %19047, align 2, !tbaa !399
  %19049 = getelementptr inbounds i16, i16* %19045, i64 -16
  %19050 = bitcast i16* %19049 to <16 x i16>*
  %19051 = load <16 x i16>, <16 x i16>* %19050, align 2, !tbaa !399
  %19052 = add <16 x i16> %19019, %19009
  %19053 = add <16 x i16> %19052, %19029
  %19054 = add <16 x i16> %19053, %19038
  %19055 = add <16 x i16> %19054, %19048
  %19056 = add <16 x i16> %19022, %19012
  %19057 = add <16 x i16> %19056, %19032
  %19058 = add <16 x i16> %19057, %19041
  %19059 = add <16 x i16> %19058, %19051
  %19060 = shufflevector <16 x i16> %19055, <16 x i16> %19059, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19061 = udiv <32 x i16> %19060, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19062 = shufflevector <32 x i16> %19061, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19063 = sext i32 %a379 to i64
  %19064 = add nsw i64 %19063, 7
  %19065 = mul nsw i64 %19064, %334
  %19066 = add nsw i64 %336, %19065
  %19067 = getelementptr inbounds i16, i16* %263, i64 %19066
  %19068 = getelementptr inbounds i16, i16* %19067, i64 -32
  %19069 = bitcast i16* %19068 to <16 x i16>*
  store <16 x i16> %19062, <16 x i16>* %19069, align 2, !tbaa !401
  %19070 = shufflevector <32 x i16> %19061, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19071 = getelementptr inbounds i16, i16* %19067, i64 -16
  %19072 = bitcast i16* %19071 to <16 x i16>*
  store <16 x i16> %19070, <16 x i16>* %19072, align 2, !tbaa !401
  br label %after_bb1300

"for blur_y.s0.x.x.rebased1315":                  ; preds = %"for blur_y.s0.x.x.rebased1315.preheader", %"consume blur_x1323"
  %indvars.iv3388 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1315.preheader" ], [ %indvars.iv.next3389, %"consume blur_x1323" ]
  %19073 = add nsw i64 %indvars.iv3388, %303
  %19074 = icmp slt i64 %19073, 1
  %19075 = trunc i64 %19073 to i32
  %19076 = shl nsw i32 %19075, 5
  %19077 = icmp sgt i32 %198, %19076
  %19078 = or i1 %19074, %19077
  br i1 %19078, label %"produce blur_x1321", label %"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge"

"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1315"
  %.pre3578 = shl nsw i64 %19073, 5
  br label %"consume blur_x1323"

"end for blur_y.s0.x.x.rebased1316":              ; preds = %"consume blur_x1323", %after_bb1300
  br i1 %304, label %"for blur_y.s0.x.x.rebased1331.preheader", label %"end for blur_y.s0.x.x.rebased1332", !prof !386

"for blur_y.s0.x.x.rebased1331.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1316"
  %19079 = sext i32 %t1700974 to i64
  %19080 = zext i32 %.pre-phi3535 to i64
  %19081 = mul nsw i64 %19080, %337
  %19082 = sub nsw i64 %19081, %298
  %19083 = zext i32 %.pre-phi3569 to i64
  %19084 = mul nsw i64 %19083, %337
  %19085 = sub nsw i64 %19084, %298
  %19086 = zext i32 %.pre-phi3539 to i64
  %19087 = mul nsw i64 %19086, %337
  %19088 = sub nsw i64 %19087, %298
  %19089 = zext i32 %.pre-phi3547 to i64
  %19090 = mul nsw i64 %19089, %337
  %19091 = sub nsw i64 %19090, %298
  %19092 = zext i32 %.pre-phi3543 to i64
  %19093 = mul nsw i64 %19092, %337
  %19094 = sub nsw i64 %19093, %298
  %19095 = sext i32 %a379 to i64
  %19096 = add nsw i64 %19095, 7
  %19097 = mul nsw i64 %19096, %334
  %19098 = add nsw i64 %19097, %338
  br label %"for blur_y.s0.x.x.rebased1331"

"produce blur_x1321":                             ; preds = %"for blur_y.s0.x.x.rebased1315"
  %t8241322 = add nsw i32 %379, %19076
  %19099 = sext i32 %t8241322 to i64
  %19100 = getelementptr inbounds i16, i16* %read_input822, i64 %19099
  %19101 = getelementptr inbounds i16, i16* %19100, i64 1
  %19102 = bitcast i16* %19101 to <16 x i16>*
  %19103 = load <16 x i16>, <16 x i16>* %19102, align 2, !tbaa !396
  %19104 = getelementptr inbounds i16, i16* %19100, i64 17
  %19105 = bitcast i16* %19104 to <16 x i16>*
  %19106 = load <16 x i16>, <16 x i16>* %19105, align 2, !tbaa !396
  %19107 = bitcast i16* %19100 to <16 x i16>*
  %19108 = load <16 x i16>, <16 x i16>* %19107, align 2, !tbaa !396
  %19109 = getelementptr inbounds i16, i16* %19100, i64 16
  %19110 = bitcast i16* %19109 to <16 x i16>*
  %19111 = load <16 x i16>, <16 x i16>* %19110, align 2, !tbaa !396
  %19112 = getelementptr inbounds i16, i16* %19100, i64 2
  %19113 = bitcast i16* %19112 to <16 x i16>*
  %19114 = load <16 x i16>, <16 x i16>* %19113, align 2, !tbaa !396
  %19115 = getelementptr inbounds i16, i16* %19100, i64 18
  %19116 = bitcast i16* %19115 to <16 x i16>*
  %19117 = load <16 x i16>, <16 x i16>* %19116, align 2, !tbaa !396
  %19118 = getelementptr inbounds i16, i16* %19100, i64 4
  %19119 = bitcast i16* %19118 to <16 x i16>*
  %19120 = load <16 x i16>, <16 x i16>* %19119, align 2, !tbaa !396
  %19121 = getelementptr inbounds i16, i16* %19100, i64 20
  %19122 = bitcast i16* %19121 to <16 x i16>*
  %19123 = load <16 x i16>, <16 x i16>* %19122, align 2, !tbaa !396
  %19124 = getelementptr inbounds i16, i16* %19100, i64 3
  %19125 = bitcast i16* %19124 to <16 x i16>*
  %19126 = load <16 x i16>, <16 x i16>* %19125, align 2, !tbaa !396
  %19127 = getelementptr inbounds i16, i16* %19100, i64 19
  %19128 = bitcast i16* %19127 to <16 x i16>*
  %19129 = load <16 x i16>, <16 x i16>* %19128, align 2, !tbaa !396
  %19130 = add <16 x i16> %19108, %19103
  %19131 = add <16 x i16> %19130, %19114
  %19132 = add <16 x i16> %19131, %19120
  %19133 = add <16 x i16> %19132, %19126
  %19134 = add <16 x i16> %19111, %19106
  %19135 = add <16 x i16> %19134, %19117
  %19136 = add <16 x i16> %19135, %19123
  %19137 = add <16 x i16> %19136, %19129
  %19138 = shufflevector <16 x i16> %19133, <16 x i16> %19137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19139 = udiv <32 x i16> %19138, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19140 = shufflevector <32 x i16> %19139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19141 = shl nsw i64 %19073, 5
  %19142 = add nsw i64 %19141, %18932
  %19143 = getelementptr inbounds i16, i16* %blur_x879, i64 %19142
  %19144 = bitcast i16* %19143 to <16 x i16>*
  store <16 x i16> %19140, <16 x i16>* %19144, align 2, !tbaa !399
  %19145 = shufflevector <32 x i16> %19139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19146 = getelementptr inbounds i16, i16* %19143, i64 16
  %19147 = bitcast i16* %19146 to <16 x i16>*
  store <16 x i16> %19145, <16 x i16>* %19147, align 2, !tbaa !399
  br label %"consume blur_x1323"

"consume blur_x1323":                             ; preds = %"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge", %"produce blur_x1321"
  %.pre-phi3579 = phi i64 [ %.pre3578, %"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge" ], [ %19141, %"produce blur_x1321" ]
  %19148 = add nsw i64 %18935, %.pre-phi3579
  %19149 = getelementptr inbounds i16, i16* %blur_x879, i64 %19148
  %19150 = bitcast i16* %19149 to <16 x i16>*
  %19151 = load <16 x i16>, <16 x i16>* %19150, align 2, !tbaa !399
  %19152 = getelementptr inbounds i16, i16* %19149, i64 16
  %19153 = bitcast i16* %19152 to <16 x i16>*
  %19154 = load <16 x i16>, <16 x i16>* %19153, align 2, !tbaa !399
  %19155 = add nsw i64 %18938, %.pre-phi3579
  %19156 = getelementptr inbounds i16, i16* %blur_x879, i64 %19155
  %19157 = bitcast i16* %19156 to <16 x i16>*
  %19158 = load <16 x i16>, <16 x i16>* %19157, align 2, !tbaa !399
  %19159 = getelementptr inbounds i16, i16* %19156, i64 16
  %19160 = bitcast i16* %19159 to <16 x i16>*
  %19161 = load <16 x i16>, <16 x i16>* %19160, align 2, !tbaa !399
  %19162 = add nsw i64 %18941, %.pre-phi3579
  %19163 = getelementptr inbounds i16, i16* %blur_x879, i64 %19162
  %19164 = bitcast i16* %19163 to <16 x i16>*
  %19165 = load <16 x i16>, <16 x i16>* %19164, align 2, !tbaa !399
  %19166 = getelementptr inbounds i16, i16* %19163, i64 16
  %19167 = bitcast i16* %19166 to <16 x i16>*
  %19168 = load <16 x i16>, <16 x i16>* %19167, align 2, !tbaa !399
  %19169 = add nsw i64 %18944, %.pre-phi3579
  %19170 = getelementptr inbounds i16, i16* %blur_x879, i64 %19169
  %19171 = bitcast i16* %19170 to <16 x i16>*
  %19172 = load <16 x i16>, <16 x i16>* %19171, align 2, !tbaa !399
  %19173 = getelementptr inbounds i16, i16* %19170, i64 16
  %19174 = bitcast i16* %19173 to <16 x i16>*
  %19175 = load <16 x i16>, <16 x i16>* %19174, align 2, !tbaa !399
  %19176 = add nsw i64 %18947, %.pre-phi3579
  %19177 = getelementptr inbounds i16, i16* %blur_x879, i64 %19176
  %19178 = bitcast i16* %19177 to <16 x i16>*
  %19179 = load <16 x i16>, <16 x i16>* %19178, align 2, !tbaa !399
  %19180 = getelementptr inbounds i16, i16* %19177, i64 16
  %19181 = bitcast i16* %19180 to <16 x i16>*
  %19182 = load <16 x i16>, <16 x i16>* %19181, align 2, !tbaa !399
  %19183 = add <16 x i16> %19158, %19151
  %19184 = add <16 x i16> %19183, %19165
  %19185 = add <16 x i16> %19184, %19172
  %19186 = add <16 x i16> %19185, %19179
  %19187 = add <16 x i16> %19161, %19154
  %19188 = add <16 x i16> %19187, %19168
  %19189 = add <16 x i16> %19188, %19175
  %19190 = add <16 x i16> %19189, %19182
  %19191 = shufflevector <16 x i16> %19186, <16 x i16> %19190, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19192 = udiv <32 x i16> %19191, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19193 = shufflevector <32 x i16> %19192, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19194 = add nsw i64 %18951, %.pre-phi3579
  %19195 = getelementptr inbounds i16, i16* %263, i64 %19194
  %19196 = bitcast i16* %19195 to <16 x i16>*
  store <16 x i16> %19193, <16 x i16>* %19196, align 2, !tbaa !401
  %19197 = shufflevector <32 x i16> %19192, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19198 = getelementptr inbounds i16, i16* %19195, i64 16
  %19199 = bitcast i16* %19198 to <16 x i16>*
  store <16 x i16> %19197, <16 x i16>* %19199, align 2, !tbaa !401
  %indvars.iv.next3389 = add nuw nsw i64 %indvars.iv3388, 1
  %.not2635 = icmp eq i64 %indvars.iv.next3389, %530
  br i1 %.not2635, label %"end for blur_y.s0.x.x.rebased1316", label %"for blur_y.s0.x.x.rebased1315"

"for blur_y.s0.x.x.rebased1331":                  ; preds = %"for blur_y.s0.x.x.rebased1331.preheader", %"consume blur_x1342"
  %blur_y.s0.x.x.rebased1333 = phi i32 [ %19308, %"consume blur_x1342" ], [ 0, %"for blur_y.s0.x.x.rebased1331.preheader" ]
  %19200 = add nsw i32 %blur_y.s0.x.x.rebased1333, %t1626814
  %a2408 = shl nsw i32 %19200, 5
  %19201 = icmp sgt i32 %t1647, %a2408
  %blur_y.s0.x.v0.base.s1334 = select i1 %19201, i32 %a2408, i32 %t1647
  %19202 = icmp slt i32 %19200, 1
  %19203 = icmp sgt i32 %198, %a2408
  %19204 = or i1 %19202, %19203
  br i1 %19204, label %"produce blur_x1339", label %"consume blur_x1342"

"end for blur_y.s0.x.x.rebased1332":              ; preds = %"consume blur_x1342", %"end for blur_y.s0.x.x.rebased1316"
  br i1 %229, label %"produce blur_x1346", label %after_bb1343

"produce blur_x1339":                             ; preds = %"for blur_y.s0.x.x.rebased1331"
  %19205 = icmp slt i32 %blur_y.s0.x.v0.base.s1334, %198
  %blur_x.s0.x.v1.base.s1340 = select i1 %19205, i32 %blur_y.s0.x.v0.base.s1334, i32 %198
  %t8291341 = add nsw i32 %379, %blur_x.s0.x.v1.base.s1340
  %19206 = sext i32 %t8291341 to i64
  %19207 = getelementptr inbounds i16, i16* %read_input822, i64 %19206
  %19208 = getelementptr inbounds i16, i16* %19207, i64 1
  %19209 = bitcast i16* %19208 to <16 x i16>*
  %19210 = load <16 x i16>, <16 x i16>* %19209, align 2, !tbaa !396
  %19211 = getelementptr inbounds i16, i16* %19207, i64 17
  %19212 = bitcast i16* %19211 to <16 x i16>*
  %19213 = load <16 x i16>, <16 x i16>* %19212, align 2, !tbaa !396
  %19214 = bitcast i16* %19207 to <16 x i16>*
  %19215 = load <16 x i16>, <16 x i16>* %19214, align 2, !tbaa !396
  %19216 = getelementptr inbounds i16, i16* %19207, i64 16
  %19217 = bitcast i16* %19216 to <16 x i16>*
  %19218 = load <16 x i16>, <16 x i16>* %19217, align 2, !tbaa !396
  %19219 = getelementptr inbounds i16, i16* %19207, i64 2
  %19220 = bitcast i16* %19219 to <16 x i16>*
  %19221 = load <16 x i16>, <16 x i16>* %19220, align 2, !tbaa !396
  %19222 = getelementptr inbounds i16, i16* %19207, i64 18
  %19223 = bitcast i16* %19222 to <16 x i16>*
  %19224 = load <16 x i16>, <16 x i16>* %19223, align 2, !tbaa !396
  %19225 = getelementptr inbounds i16, i16* %19207, i64 4
  %19226 = bitcast i16* %19225 to <16 x i16>*
  %19227 = load <16 x i16>, <16 x i16>* %19226, align 2, !tbaa !396
  %19228 = getelementptr inbounds i16, i16* %19207, i64 20
  %19229 = bitcast i16* %19228 to <16 x i16>*
  %19230 = load <16 x i16>, <16 x i16>* %19229, align 2, !tbaa !396
  %19231 = getelementptr inbounds i16, i16* %19207, i64 3
  %19232 = bitcast i16* %19231 to <16 x i16>*
  %19233 = load <16 x i16>, <16 x i16>* %19232, align 2, !tbaa !396
  %19234 = getelementptr inbounds i16, i16* %19207, i64 19
  %19235 = bitcast i16* %19234 to <16 x i16>*
  %19236 = load <16 x i16>, <16 x i16>* %19235, align 2, !tbaa !396
  %19237 = add <16 x i16> %19215, %19210
  %19238 = add <16 x i16> %19237, %19221
  %19239 = add <16 x i16> %19238, %19227
  %19240 = add <16 x i16> %19239, %19233
  %19241 = add <16 x i16> %19218, %19213
  %19242 = add <16 x i16> %19241, %19224
  %19243 = add <16 x i16> %19242, %19230
  %19244 = add <16 x i16> %19243, %19236
  %19245 = shufflevector <16 x i16> %19240, <16 x i16> %19244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19246 = udiv <32 x i16> %19245, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19247 = shufflevector <32 x i16> %19246, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19248 = sext i32 %blur_x.s0.x.v1.base.s1340 to i64
  %19249 = add nsw i64 %19248, %19079
  %19250 = getelementptr inbounds i16, i16* %blur_x879, i64 %19249
  %19251 = bitcast i16* %19250 to <16 x i16>*
  store <16 x i16> %19247, <16 x i16>* %19251, align 2, !tbaa !399
  %19252 = shufflevector <32 x i16> %19246, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19253 = getelementptr inbounds i16, i16* %19250, i64 16
  %19254 = bitcast i16* %19253 to <16 x i16>*
  store <16 x i16> %19252, <16 x i16>* %19254, align 2, !tbaa !399
  br label %"consume blur_x1342"

"consume blur_x1342":                             ; preds = %"for blur_y.s0.x.x.rebased1331", %"produce blur_x1339"
  %19255 = sext i32 %blur_y.s0.x.v0.base.s1334 to i64
  %19256 = add nsw i64 %19082, %19255
  %19257 = getelementptr inbounds i16, i16* %blur_x879, i64 %19256
  %19258 = bitcast i16* %19257 to <16 x i16>*
  %19259 = load <16 x i16>, <16 x i16>* %19258, align 2, !tbaa !399
  %19260 = getelementptr inbounds i16, i16* %19257, i64 16
  %19261 = bitcast i16* %19260 to <16 x i16>*
  %19262 = load <16 x i16>, <16 x i16>* %19261, align 2, !tbaa !399
  %19263 = add nsw i64 %19085, %19255
  %19264 = getelementptr inbounds i16, i16* %blur_x879, i64 %19263
  %19265 = bitcast i16* %19264 to <16 x i16>*
  %19266 = load <16 x i16>, <16 x i16>* %19265, align 2, !tbaa !399
  %19267 = getelementptr inbounds i16, i16* %19264, i64 16
  %19268 = bitcast i16* %19267 to <16 x i16>*
  %19269 = load <16 x i16>, <16 x i16>* %19268, align 2, !tbaa !399
  %19270 = add nsw i64 %19088, %19255
  %19271 = getelementptr inbounds i16, i16* %blur_x879, i64 %19270
  %19272 = bitcast i16* %19271 to <16 x i16>*
  %19273 = load <16 x i16>, <16 x i16>* %19272, align 2, !tbaa !399
  %19274 = getelementptr inbounds i16, i16* %19271, i64 16
  %19275 = bitcast i16* %19274 to <16 x i16>*
  %19276 = load <16 x i16>, <16 x i16>* %19275, align 2, !tbaa !399
  %19277 = add nsw i64 %19091, %19255
  %19278 = getelementptr inbounds i16, i16* %blur_x879, i64 %19277
  %19279 = bitcast i16* %19278 to <16 x i16>*
  %19280 = load <16 x i16>, <16 x i16>* %19279, align 2, !tbaa !399
  %19281 = getelementptr inbounds i16, i16* %19278, i64 16
  %19282 = bitcast i16* %19281 to <16 x i16>*
  %19283 = load <16 x i16>, <16 x i16>* %19282, align 2, !tbaa !399
  %19284 = add nsw i64 %19094, %19255
  %19285 = getelementptr inbounds i16, i16* %blur_x879, i64 %19284
  %19286 = bitcast i16* %19285 to <16 x i16>*
  %19287 = load <16 x i16>, <16 x i16>* %19286, align 2, !tbaa !399
  %19288 = getelementptr inbounds i16, i16* %19285, i64 16
  %19289 = bitcast i16* %19288 to <16 x i16>*
  %19290 = load <16 x i16>, <16 x i16>* %19289, align 2, !tbaa !399
  %19291 = add <16 x i16> %19266, %19259
  %19292 = add <16 x i16> %19291, %19273
  %19293 = add <16 x i16> %19292, %19280
  %19294 = add <16 x i16> %19293, %19287
  %19295 = add <16 x i16> %19269, %19262
  %19296 = add <16 x i16> %19295, %19276
  %19297 = add <16 x i16> %19296, %19283
  %19298 = add <16 x i16> %19297, %19290
  %19299 = shufflevector <16 x i16> %19294, <16 x i16> %19298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19300 = udiv <32 x i16> %19299, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19301 = shufflevector <32 x i16> %19300, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19302 = add nsw i64 %19098, %19255
  %19303 = getelementptr inbounds i16, i16* %263, i64 %19302
  %19304 = bitcast i16* %19303 to <16 x i16>*
  store <16 x i16> %19301, <16 x i16>* %19304, align 2, !tbaa !401
  %19305 = shufflevector <32 x i16> %19300, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19306 = getelementptr inbounds i16, i16* %19303, i64 16
  %19307 = bitcast i16* %19306 to <16 x i16>*
  store <16 x i16> %19305, <16 x i16>* %19307, align 2, !tbaa !401
  %19308 = add nuw nsw i32 %blur_y.s0.x.x.rebased1333, 1
  %.not2634 = icmp eq i32 %19308, %t1683898
  br i1 %.not2634, label %"end for blur_y.s0.x.x.rebased1332", label %"for blur_y.s0.x.x.rebased1331"

after_bb1343:                                     ; preds = %"end for blur_y.s0.x.x.rebased1332", %"produce blur_x1346"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1358.preheader", label %"end for blur_y.s0.x.x.rebased1359", !prof !386

"for blur_y.s0.x.x.rebased1358.preheader":        ; preds = %after_bb1343
  %19309 = sext i32 %t17061010 to i64
  %19310 = zext i32 %.pre-phi3539 to i64
  %19311 = mul nsw i64 %19310, %337
  %19312 = sub nsw i64 %19311, %298
  %19313 = zext i32 %.pre-phi3535 to i64
  %19314 = mul nsw i64 %19313, %337
  %19315 = sub nsw i64 %19314, %298
  %19316 = zext i32 %.pre-phi3543 to i64
  %19317 = mul nsw i64 %19316, %337
  %19318 = sub nsw i64 %19317, %298
  %19319 = zext i32 %.pre-phi3551 to i64
  %19320 = mul nsw i64 %19319, %337
  %19321 = sub nsw i64 %19320, %298
  %19322 = zext i32 %.pre-phi3547 to i64
  %19323 = mul nsw i64 %19322, %337
  %19324 = sub nsw i64 %19323, %298
  %19325 = sext i32 %a379 to i64
  %19326 = add nsw i64 %19325, 8
  %19327 = mul nsw i64 %19326, %334
  %19328 = add nsw i64 %19327, %338
  br label %"for blur_y.s0.x.x.rebased1358"

"produce blur_x1346":                             ; preds = %"end for blur_y.s0.x.x.rebased1332"
  %19329 = getelementptr inbounds i16, i16* %read_input822, i64 %383
  %19330 = getelementptr inbounds i16, i16* %19329, i64 -31
  %19331 = bitcast i16* %19330 to <16 x i16>*
  %19332 = load <16 x i16>, <16 x i16>* %19331, align 2, !tbaa !396
  %19333 = getelementptr inbounds i16, i16* %19329, i64 -15
  %19334 = bitcast i16* %19333 to <16 x i16>*
  %19335 = load <16 x i16>, <16 x i16>* %19334, align 2, !tbaa !396
  %19336 = getelementptr inbounds i16, i16* %19329, i64 -32
  %19337 = bitcast i16* %19336 to <16 x i16>*
  %19338 = load <16 x i16>, <16 x i16>* %19337, align 2, !tbaa !396
  %19339 = getelementptr inbounds i16, i16* %19329, i64 -16
  %19340 = bitcast i16* %19339 to <16 x i16>*
  %19341 = load <16 x i16>, <16 x i16>* %19340, align 2, !tbaa !396
  %19342 = getelementptr inbounds i16, i16* %19329, i64 -30
  %19343 = bitcast i16* %19342 to <16 x i16>*
  %19344 = load <16 x i16>, <16 x i16>* %19343, align 2, !tbaa !396
  %19345 = getelementptr inbounds i16, i16* %19329, i64 -14
  %19346 = bitcast i16* %19345 to <16 x i16>*
  %19347 = load <16 x i16>, <16 x i16>* %19346, align 2, !tbaa !396
  %19348 = getelementptr inbounds i16, i16* %19329, i64 -28
  %19349 = bitcast i16* %19348 to <16 x i16>*
  %19350 = load <16 x i16>, <16 x i16>* %19349, align 2, !tbaa !396
  %19351 = getelementptr inbounds i16, i16* %19329, i64 -12
  %19352 = bitcast i16* %19351 to <16 x i16>*
  %19353 = load <16 x i16>, <16 x i16>* %19352, align 2, !tbaa !396
  %19354 = getelementptr inbounds i16, i16* %19329, i64 -29
  %19355 = bitcast i16* %19354 to <16 x i16>*
  %19356 = load <16 x i16>, <16 x i16>* %19355, align 2, !tbaa !396
  %19357 = getelementptr inbounds i16, i16* %19329, i64 -13
  %19358 = bitcast i16* %19357 to <16 x i16>*
  %19359 = load <16 x i16>, <16 x i16>* %19358, align 2, !tbaa !396
  %19360 = add <16 x i16> %19338, %19332
  %19361 = add <16 x i16> %19360, %19344
  %19362 = add <16 x i16> %19361, %19350
  %19363 = add <16 x i16> %19362, %19356
  %19364 = add <16 x i16> %19341, %19335
  %19365 = add <16 x i16> %19364, %19347
  %19366 = add <16 x i16> %19365, %19353
  %19367 = add <16 x i16> %19366, %19359
  %19368 = shufflevector <16 x i16> %19363, <16 x i16> %19367, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19369 = udiv <32 x i16> %19368, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19370 = shufflevector <32 x i16> %19369, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19371 = zext i32 %.pre-phi3551 to i64
  %19372 = mul nsw i64 %299, %19371
  %19373 = add nsw i64 %301, %19372
  %19374 = getelementptr inbounds i16, i16* %blur_x879, i64 %19373
  %19375 = getelementptr inbounds i16, i16* %19374, i64 -32
  %19376 = bitcast i16* %19375 to <16 x i16>*
  store <16 x i16> %19370, <16 x i16>* %19376, align 2, !tbaa !399
  %19377 = shufflevector <32 x i16> %19369, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19378 = getelementptr inbounds i16, i16* %19374, i64 -16
  %19379 = bitcast i16* %19378 to <16 x i16>*
  store <16 x i16> %19377, <16 x i16>* %19379, align 2, !tbaa !399
  %19380 = zext i32 %.pre-phi3539 to i64
  %19381 = mul nsw i64 %19380, %333
  %19382 = add nsw i64 %19381, %296
  %19383 = getelementptr inbounds i16, i16* %blur_x879, i64 %19382
  %19384 = getelementptr inbounds i16, i16* %19383, i64 -32
  %19385 = bitcast i16* %19384 to <16 x i16>*
  %19386 = load <16 x i16>, <16 x i16>* %19385, align 2, !tbaa !399
  %19387 = getelementptr inbounds i16, i16* %19383, i64 -16
  %19388 = bitcast i16* %19387 to <16 x i16>*
  %19389 = load <16 x i16>, <16 x i16>* %19388, align 2, !tbaa !399
  %19390 = zext i32 %.pre-phi3535 to i64
  %19391 = mul nsw i64 %19390, %333
  %19392 = add nsw i64 %19391, %296
  %19393 = getelementptr inbounds i16, i16* %blur_x879, i64 %19392
  %19394 = getelementptr inbounds i16, i16* %19393, i64 -32
  %19395 = bitcast i16* %19394 to <16 x i16>*
  %19396 = load <16 x i16>, <16 x i16>* %19395, align 2, !tbaa !399
  %19397 = getelementptr inbounds i16, i16* %19393, i64 -16
  %19398 = bitcast i16* %19397 to <16 x i16>*
  %19399 = load <16 x i16>, <16 x i16>* %19398, align 2, !tbaa !399
  %19400 = zext i32 %.pre-phi3543 to i64
  %19401 = mul nsw i64 %19400, %333
  %19402 = add nsw i64 %19401, %296
  %19403 = getelementptr inbounds i16, i16* %blur_x879, i64 %19402
  %19404 = getelementptr inbounds i16, i16* %19403, i64 -32
  %19405 = bitcast i16* %19404 to <16 x i16>*
  %19406 = load <16 x i16>, <16 x i16>* %19405, align 2, !tbaa !399
  %19407 = getelementptr inbounds i16, i16* %19403, i64 -16
  %19408 = bitcast i16* %19407 to <16 x i16>*
  %19409 = load <16 x i16>, <16 x i16>* %19408, align 2, !tbaa !399
  %19410 = mul nsw i64 %19371, %333
  %19411 = add nsw i64 %19410, %296
  %19412 = getelementptr inbounds i16, i16* %blur_x879, i64 %19411
  %19413 = getelementptr inbounds i16, i16* %19412, i64 -32
  %19414 = bitcast i16* %19413 to <16 x i16>*
  %19415 = load <16 x i16>, <16 x i16>* %19414, align 2, !tbaa !399
  %19416 = getelementptr inbounds i16, i16* %19412, i64 -16
  %19417 = bitcast i16* %19416 to <16 x i16>*
  %19418 = load <16 x i16>, <16 x i16>* %19417, align 2, !tbaa !399
  %19419 = zext i32 %.pre-phi3547 to i64
  %19420 = mul nsw i64 %19419, %333
  %19421 = add nsw i64 %19420, %296
  %19422 = getelementptr inbounds i16, i16* %blur_x879, i64 %19421
  %19423 = getelementptr inbounds i16, i16* %19422, i64 -32
  %19424 = bitcast i16* %19423 to <16 x i16>*
  %19425 = load <16 x i16>, <16 x i16>* %19424, align 2, !tbaa !399
  %19426 = getelementptr inbounds i16, i16* %19422, i64 -16
  %19427 = bitcast i16* %19426 to <16 x i16>*
  %19428 = load <16 x i16>, <16 x i16>* %19427, align 2, !tbaa !399
  %19429 = add <16 x i16> %19396, %19386
  %19430 = add <16 x i16> %19429, %19406
  %19431 = add <16 x i16> %19430, %19415
  %19432 = add <16 x i16> %19431, %19425
  %19433 = add <16 x i16> %19399, %19389
  %19434 = add <16 x i16> %19433, %19409
  %19435 = add <16 x i16> %19434, %19418
  %19436 = add <16 x i16> %19435, %19428
  %19437 = shufflevector <16 x i16> %19432, <16 x i16> %19436, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19438 = udiv <32 x i16> %19437, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19439 = shufflevector <32 x i16> %19438, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19440 = sext i32 %a379 to i64
  %19441 = add nsw i64 %19440, 8
  %19442 = mul nsw i64 %19441, %334
  %19443 = add nsw i64 %336, %19442
  %19444 = getelementptr inbounds i16, i16* %263, i64 %19443
  %19445 = getelementptr inbounds i16, i16* %19444, i64 -32
  %19446 = bitcast i16* %19445 to <16 x i16>*
  store <16 x i16> %19439, <16 x i16>* %19446, align 2, !tbaa !401
  %19447 = shufflevector <32 x i16> %19438, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19448 = getelementptr inbounds i16, i16* %19444, i64 -16
  %19449 = bitcast i16* %19448 to <16 x i16>*
  store <16 x i16> %19447, <16 x i16>* %19449, align 2, !tbaa !401
  br label %after_bb1343

"for blur_y.s0.x.x.rebased1358":                  ; preds = %"for blur_y.s0.x.x.rebased1358.preheader", %"consume blur_x1366"
  %indvars.iv3390 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1358.preheader" ], [ %indvars.iv.next3391, %"consume blur_x1366" ]
  %19450 = add nsw i64 %indvars.iv3390, %303
  %19451 = icmp slt i64 %19450, 1
  %19452 = trunc i64 %19450 to i32
  %19453 = shl nsw i32 %19452, 5
  %19454 = icmp sgt i32 %198, %19453
  %19455 = or i1 %19451, %19454
  br i1 %19455, label %"produce blur_x1364", label %"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge"

"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1358"
  %.pre3580 = shl nsw i64 %19450, 5
  br label %"consume blur_x1366"

"end for blur_y.s0.x.x.rebased1359":              ; preds = %"consume blur_x1366", %after_bb1343
  br i1 %304, label %"for blur_y.s0.x.x.rebased1374.preheader", label %"end for blur_y.s0.x.x.rebased1375", !prof !386

"for blur_y.s0.x.x.rebased1374.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1359"
  %19456 = sext i32 %t17061010 to i64
  %19457 = zext i32 %.pre-phi3539 to i64
  %19458 = mul nsw i64 %19457, %337
  %19459 = sub nsw i64 %19458, %298
  %19460 = zext i32 %.pre-phi3535 to i64
  %19461 = mul nsw i64 %19460, %337
  %19462 = sub nsw i64 %19461, %298
  %19463 = zext i32 %.pre-phi3543 to i64
  %19464 = mul nsw i64 %19463, %337
  %19465 = sub nsw i64 %19464, %298
  %19466 = zext i32 %.pre-phi3551 to i64
  %19467 = mul nsw i64 %19466, %337
  %19468 = sub nsw i64 %19467, %298
  %19469 = zext i32 %.pre-phi3547 to i64
  %19470 = mul nsw i64 %19469, %337
  %19471 = sub nsw i64 %19470, %298
  %19472 = sext i32 %a379 to i64
  %19473 = add nsw i64 %19472, 8
  %19474 = mul nsw i64 %19473, %334
  %19475 = add nsw i64 %19474, %338
  br label %"for blur_y.s0.x.x.rebased1374"

"produce blur_x1364":                             ; preds = %"for blur_y.s0.x.x.rebased1358"
  %t8401365 = add nsw i32 %385, %19453
  %19476 = sext i32 %t8401365 to i64
  %19477 = getelementptr inbounds i16, i16* %read_input822, i64 %19476
  %19478 = getelementptr inbounds i16, i16* %19477, i64 1
  %19479 = bitcast i16* %19478 to <16 x i16>*
  %19480 = load <16 x i16>, <16 x i16>* %19479, align 2, !tbaa !396
  %19481 = getelementptr inbounds i16, i16* %19477, i64 17
  %19482 = bitcast i16* %19481 to <16 x i16>*
  %19483 = load <16 x i16>, <16 x i16>* %19482, align 2, !tbaa !396
  %19484 = bitcast i16* %19477 to <16 x i16>*
  %19485 = load <16 x i16>, <16 x i16>* %19484, align 2, !tbaa !396
  %19486 = getelementptr inbounds i16, i16* %19477, i64 16
  %19487 = bitcast i16* %19486 to <16 x i16>*
  %19488 = load <16 x i16>, <16 x i16>* %19487, align 2, !tbaa !396
  %19489 = getelementptr inbounds i16, i16* %19477, i64 2
  %19490 = bitcast i16* %19489 to <16 x i16>*
  %19491 = load <16 x i16>, <16 x i16>* %19490, align 2, !tbaa !396
  %19492 = getelementptr inbounds i16, i16* %19477, i64 18
  %19493 = bitcast i16* %19492 to <16 x i16>*
  %19494 = load <16 x i16>, <16 x i16>* %19493, align 2, !tbaa !396
  %19495 = getelementptr inbounds i16, i16* %19477, i64 4
  %19496 = bitcast i16* %19495 to <16 x i16>*
  %19497 = load <16 x i16>, <16 x i16>* %19496, align 2, !tbaa !396
  %19498 = getelementptr inbounds i16, i16* %19477, i64 20
  %19499 = bitcast i16* %19498 to <16 x i16>*
  %19500 = load <16 x i16>, <16 x i16>* %19499, align 2, !tbaa !396
  %19501 = getelementptr inbounds i16, i16* %19477, i64 3
  %19502 = bitcast i16* %19501 to <16 x i16>*
  %19503 = load <16 x i16>, <16 x i16>* %19502, align 2, !tbaa !396
  %19504 = getelementptr inbounds i16, i16* %19477, i64 19
  %19505 = bitcast i16* %19504 to <16 x i16>*
  %19506 = load <16 x i16>, <16 x i16>* %19505, align 2, !tbaa !396
  %19507 = add <16 x i16> %19485, %19480
  %19508 = add <16 x i16> %19507, %19491
  %19509 = add <16 x i16> %19508, %19497
  %19510 = add <16 x i16> %19509, %19503
  %19511 = add <16 x i16> %19488, %19483
  %19512 = add <16 x i16> %19511, %19494
  %19513 = add <16 x i16> %19512, %19500
  %19514 = add <16 x i16> %19513, %19506
  %19515 = shufflevector <16 x i16> %19510, <16 x i16> %19514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19516 = udiv <32 x i16> %19515, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19517 = shufflevector <32 x i16> %19516, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19518 = shl nsw i64 %19450, 5
  %19519 = add nsw i64 %19518, %19309
  %19520 = getelementptr inbounds i16, i16* %blur_x879, i64 %19519
  %19521 = bitcast i16* %19520 to <16 x i16>*
  store <16 x i16> %19517, <16 x i16>* %19521, align 2, !tbaa !399
  %19522 = shufflevector <32 x i16> %19516, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19523 = getelementptr inbounds i16, i16* %19520, i64 16
  %19524 = bitcast i16* %19523 to <16 x i16>*
  store <16 x i16> %19522, <16 x i16>* %19524, align 2, !tbaa !399
  br label %"consume blur_x1366"

"consume blur_x1366":                             ; preds = %"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge", %"produce blur_x1364"
  %.pre-phi3581 = phi i64 [ %.pre3580, %"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge" ], [ %19518, %"produce blur_x1364" ]
  %19525 = add nsw i64 %19312, %.pre-phi3581
  %19526 = getelementptr inbounds i16, i16* %blur_x879, i64 %19525
  %19527 = bitcast i16* %19526 to <16 x i16>*
  %19528 = load <16 x i16>, <16 x i16>* %19527, align 2, !tbaa !399
  %19529 = getelementptr inbounds i16, i16* %19526, i64 16
  %19530 = bitcast i16* %19529 to <16 x i16>*
  %19531 = load <16 x i16>, <16 x i16>* %19530, align 2, !tbaa !399
  %19532 = add nsw i64 %19315, %.pre-phi3581
  %19533 = getelementptr inbounds i16, i16* %blur_x879, i64 %19532
  %19534 = bitcast i16* %19533 to <16 x i16>*
  %19535 = load <16 x i16>, <16 x i16>* %19534, align 2, !tbaa !399
  %19536 = getelementptr inbounds i16, i16* %19533, i64 16
  %19537 = bitcast i16* %19536 to <16 x i16>*
  %19538 = load <16 x i16>, <16 x i16>* %19537, align 2, !tbaa !399
  %19539 = add nsw i64 %19318, %.pre-phi3581
  %19540 = getelementptr inbounds i16, i16* %blur_x879, i64 %19539
  %19541 = bitcast i16* %19540 to <16 x i16>*
  %19542 = load <16 x i16>, <16 x i16>* %19541, align 2, !tbaa !399
  %19543 = getelementptr inbounds i16, i16* %19540, i64 16
  %19544 = bitcast i16* %19543 to <16 x i16>*
  %19545 = load <16 x i16>, <16 x i16>* %19544, align 2, !tbaa !399
  %19546 = add nsw i64 %19321, %.pre-phi3581
  %19547 = getelementptr inbounds i16, i16* %blur_x879, i64 %19546
  %19548 = bitcast i16* %19547 to <16 x i16>*
  %19549 = load <16 x i16>, <16 x i16>* %19548, align 2, !tbaa !399
  %19550 = getelementptr inbounds i16, i16* %19547, i64 16
  %19551 = bitcast i16* %19550 to <16 x i16>*
  %19552 = load <16 x i16>, <16 x i16>* %19551, align 2, !tbaa !399
  %19553 = add nsw i64 %19324, %.pre-phi3581
  %19554 = getelementptr inbounds i16, i16* %blur_x879, i64 %19553
  %19555 = bitcast i16* %19554 to <16 x i16>*
  %19556 = load <16 x i16>, <16 x i16>* %19555, align 2, !tbaa !399
  %19557 = getelementptr inbounds i16, i16* %19554, i64 16
  %19558 = bitcast i16* %19557 to <16 x i16>*
  %19559 = load <16 x i16>, <16 x i16>* %19558, align 2, !tbaa !399
  %19560 = add <16 x i16> %19535, %19528
  %19561 = add <16 x i16> %19560, %19542
  %19562 = add <16 x i16> %19561, %19549
  %19563 = add <16 x i16> %19562, %19556
  %19564 = add <16 x i16> %19538, %19531
  %19565 = add <16 x i16> %19564, %19545
  %19566 = add <16 x i16> %19565, %19552
  %19567 = add <16 x i16> %19566, %19559
  %19568 = shufflevector <16 x i16> %19563, <16 x i16> %19567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19569 = udiv <32 x i16> %19568, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19570 = shufflevector <32 x i16> %19569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19571 = add nsw i64 %19328, %.pre-phi3581
  %19572 = getelementptr inbounds i16, i16* %263, i64 %19571
  %19573 = bitcast i16* %19572 to <16 x i16>*
  store <16 x i16> %19570, <16 x i16>* %19573, align 2, !tbaa !401
  %19574 = shufflevector <32 x i16> %19569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19575 = getelementptr inbounds i16, i16* %19572, i64 16
  %19576 = bitcast i16* %19575 to <16 x i16>*
  store <16 x i16> %19574, <16 x i16>* %19576, align 2, !tbaa !401
  %indvars.iv.next3391 = add nuw nsw i64 %indvars.iv3390, 1
  %.not2631 = icmp eq i64 %indvars.iv.next3391, %530
  br i1 %.not2631, label %"end for blur_y.s0.x.x.rebased1359", label %"for blur_y.s0.x.x.rebased1358"

"for blur_y.s0.x.x.rebased1374":                  ; preds = %"for blur_y.s0.x.x.rebased1374.preheader", %"consume blur_x1385"
  %blur_y.s0.x.x.rebased1376 = phi i32 [ %19685, %"consume blur_x1385" ], [ 0, %"for blur_y.s0.x.x.rebased1374.preheader" ]
  %19577 = add nsw i32 %blur_y.s0.x.x.rebased1376, %t1626814
  %a2565 = shl nsw i32 %19577, 5
  %19578 = icmp sgt i32 %t1647, %a2565
  %blur_y.s0.x.v0.base.s1377 = select i1 %19578, i32 %a2565, i32 %t1647
  %19579 = icmp slt i32 %19577, 1
  %19580 = icmp sgt i32 %198, %a2565
  %19581 = or i1 %19579, %19580
  br i1 %19581, label %"produce blur_x1382", label %"consume blur_x1385"

"end for blur_y.s0.x.x.rebased1375":              ; preds = %"consume blur_x1385", %"end for blur_y.s0.x.x.rebased1359"
  br i1 %229, label %"produce blur_x1389", label %after_bb1386

"produce blur_x1382":                             ; preds = %"for blur_y.s0.x.x.rebased1374"
  %19582 = icmp slt i32 %blur_y.s0.x.v0.base.s1377, %198
  %blur_x.s0.x.v1.base.s1383 = select i1 %19582, i32 %blur_y.s0.x.v0.base.s1377, i32 %198
  %t8451384 = add nsw i32 %385, %blur_x.s0.x.v1.base.s1383
  %19583 = sext i32 %t8451384 to i64
  %19584 = getelementptr inbounds i16, i16* %read_input822, i64 %19583
  %19585 = getelementptr inbounds i16, i16* %19584, i64 1
  %19586 = bitcast i16* %19585 to <16 x i16>*
  %19587 = load <16 x i16>, <16 x i16>* %19586, align 2, !tbaa !396
  %19588 = getelementptr inbounds i16, i16* %19584, i64 17
  %19589 = bitcast i16* %19588 to <16 x i16>*
  %19590 = load <16 x i16>, <16 x i16>* %19589, align 2, !tbaa !396
  %19591 = bitcast i16* %19584 to <16 x i16>*
  %19592 = load <16 x i16>, <16 x i16>* %19591, align 2, !tbaa !396
  %19593 = getelementptr inbounds i16, i16* %19584, i64 16
  %19594 = bitcast i16* %19593 to <16 x i16>*
  %19595 = load <16 x i16>, <16 x i16>* %19594, align 2, !tbaa !396
  %19596 = getelementptr inbounds i16, i16* %19584, i64 2
  %19597 = bitcast i16* %19596 to <16 x i16>*
  %19598 = load <16 x i16>, <16 x i16>* %19597, align 2, !tbaa !396
  %19599 = getelementptr inbounds i16, i16* %19584, i64 18
  %19600 = bitcast i16* %19599 to <16 x i16>*
  %19601 = load <16 x i16>, <16 x i16>* %19600, align 2, !tbaa !396
  %19602 = getelementptr inbounds i16, i16* %19584, i64 4
  %19603 = bitcast i16* %19602 to <16 x i16>*
  %19604 = load <16 x i16>, <16 x i16>* %19603, align 2, !tbaa !396
  %19605 = getelementptr inbounds i16, i16* %19584, i64 20
  %19606 = bitcast i16* %19605 to <16 x i16>*
  %19607 = load <16 x i16>, <16 x i16>* %19606, align 2, !tbaa !396
  %19608 = getelementptr inbounds i16, i16* %19584, i64 3
  %19609 = bitcast i16* %19608 to <16 x i16>*
  %19610 = load <16 x i16>, <16 x i16>* %19609, align 2, !tbaa !396
  %19611 = getelementptr inbounds i16, i16* %19584, i64 19
  %19612 = bitcast i16* %19611 to <16 x i16>*
  %19613 = load <16 x i16>, <16 x i16>* %19612, align 2, !tbaa !396
  %19614 = add <16 x i16> %19592, %19587
  %19615 = add <16 x i16> %19614, %19598
  %19616 = add <16 x i16> %19615, %19604
  %19617 = add <16 x i16> %19616, %19610
  %19618 = add <16 x i16> %19595, %19590
  %19619 = add <16 x i16> %19618, %19601
  %19620 = add <16 x i16> %19619, %19607
  %19621 = add <16 x i16> %19620, %19613
  %19622 = shufflevector <16 x i16> %19617, <16 x i16> %19621, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19623 = udiv <32 x i16> %19622, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19624 = shufflevector <32 x i16> %19623, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19625 = sext i32 %blur_x.s0.x.v1.base.s1383 to i64
  %19626 = add nsw i64 %19625, %19456
  %19627 = getelementptr inbounds i16, i16* %blur_x879, i64 %19626
  %19628 = bitcast i16* %19627 to <16 x i16>*
  store <16 x i16> %19624, <16 x i16>* %19628, align 2, !tbaa !399
  %19629 = shufflevector <32 x i16> %19623, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19630 = getelementptr inbounds i16, i16* %19627, i64 16
  %19631 = bitcast i16* %19630 to <16 x i16>*
  store <16 x i16> %19629, <16 x i16>* %19631, align 2, !tbaa !399
  br label %"consume blur_x1385"

"consume blur_x1385":                             ; preds = %"for blur_y.s0.x.x.rebased1374", %"produce blur_x1382"
  %19632 = sext i32 %blur_y.s0.x.v0.base.s1377 to i64
  %19633 = add nsw i64 %19459, %19632
  %19634 = getelementptr inbounds i16, i16* %blur_x879, i64 %19633
  %19635 = bitcast i16* %19634 to <16 x i16>*
  %19636 = load <16 x i16>, <16 x i16>* %19635, align 2, !tbaa !399
  %19637 = getelementptr inbounds i16, i16* %19634, i64 16
  %19638 = bitcast i16* %19637 to <16 x i16>*
  %19639 = load <16 x i16>, <16 x i16>* %19638, align 2, !tbaa !399
  %19640 = add nsw i64 %19462, %19632
  %19641 = getelementptr inbounds i16, i16* %blur_x879, i64 %19640
  %19642 = bitcast i16* %19641 to <16 x i16>*
  %19643 = load <16 x i16>, <16 x i16>* %19642, align 2, !tbaa !399
  %19644 = getelementptr inbounds i16, i16* %19641, i64 16
  %19645 = bitcast i16* %19644 to <16 x i16>*
  %19646 = load <16 x i16>, <16 x i16>* %19645, align 2, !tbaa !399
  %19647 = add nsw i64 %19465, %19632
  %19648 = getelementptr inbounds i16, i16* %blur_x879, i64 %19647
  %19649 = bitcast i16* %19648 to <16 x i16>*
  %19650 = load <16 x i16>, <16 x i16>* %19649, align 2, !tbaa !399
  %19651 = getelementptr inbounds i16, i16* %19648, i64 16
  %19652 = bitcast i16* %19651 to <16 x i16>*
  %19653 = load <16 x i16>, <16 x i16>* %19652, align 2, !tbaa !399
  %19654 = add nsw i64 %19468, %19632
  %19655 = getelementptr inbounds i16, i16* %blur_x879, i64 %19654
  %19656 = bitcast i16* %19655 to <16 x i16>*
  %19657 = load <16 x i16>, <16 x i16>* %19656, align 2, !tbaa !399
  %19658 = getelementptr inbounds i16, i16* %19655, i64 16
  %19659 = bitcast i16* %19658 to <16 x i16>*
  %19660 = load <16 x i16>, <16 x i16>* %19659, align 2, !tbaa !399
  %19661 = add nsw i64 %19471, %19632
  %19662 = getelementptr inbounds i16, i16* %blur_x879, i64 %19661
  %19663 = bitcast i16* %19662 to <16 x i16>*
  %19664 = load <16 x i16>, <16 x i16>* %19663, align 2, !tbaa !399
  %19665 = getelementptr inbounds i16, i16* %19662, i64 16
  %19666 = bitcast i16* %19665 to <16 x i16>*
  %19667 = load <16 x i16>, <16 x i16>* %19666, align 2, !tbaa !399
  %19668 = add <16 x i16> %19643, %19636
  %19669 = add <16 x i16> %19668, %19650
  %19670 = add <16 x i16> %19669, %19657
  %19671 = add <16 x i16> %19670, %19664
  %19672 = add <16 x i16> %19646, %19639
  %19673 = add <16 x i16> %19672, %19653
  %19674 = add <16 x i16> %19673, %19660
  %19675 = add <16 x i16> %19674, %19667
  %19676 = shufflevector <16 x i16> %19671, <16 x i16> %19675, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19677 = udiv <32 x i16> %19676, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19678 = shufflevector <32 x i16> %19677, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19679 = add nsw i64 %19475, %19632
  %19680 = getelementptr inbounds i16, i16* %263, i64 %19679
  %19681 = bitcast i16* %19680 to <16 x i16>*
  store <16 x i16> %19678, <16 x i16>* %19681, align 2, !tbaa !401
  %19682 = shufflevector <32 x i16> %19677, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19683 = getelementptr inbounds i16, i16* %19680, i64 16
  %19684 = bitcast i16* %19683 to <16 x i16>*
  store <16 x i16> %19682, <16 x i16>* %19684, align 2, !tbaa !401
  %19685 = add nuw nsw i32 %blur_y.s0.x.x.rebased1376, 1
  %.not2630 = icmp eq i32 %19685, %t1683898
  br i1 %.not2630, label %"end for blur_y.s0.x.x.rebased1375", label %"for blur_y.s0.x.x.rebased1374"

after_bb1386:                                     ; preds = %"end for blur_y.s0.x.x.rebased1375", %"produce blur_x1389"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1401.preheader", label %"end for blur_y.s0.x.x.rebased1402", !prof !386

"for blur_y.s0.x.x.rebased1401.preheader":        ; preds = %after_bb1386
  %19686 = sext i32 %t17221053 to i64
  %19687 = zext i32 %.pre-phi3543 to i64
  %19688 = mul nsw i64 %19687, %337
  %19689 = sub nsw i64 %19688, %298
  %19690 = zext i32 %.pre-phi3539 to i64
  %19691 = mul nsw i64 %19690, %337
  %19692 = sub nsw i64 %19691, %298
  %19693 = zext i32 %.pre-phi3547 to i64
  %19694 = mul nsw i64 %19693, %337
  %19695 = sub nsw i64 %19694, %298
  %19696 = zext i32 %.pre-phi3557 to i64
  %19697 = mul nsw i64 %19696, %337
  %19698 = sub nsw i64 %19697, %298
  %19699 = zext i32 %.pre-phi3551 to i64
  %19700 = mul nsw i64 %19699, %337
  %19701 = sub nsw i64 %19700, %298
  %19702 = sext i32 %a379 to i64
  %19703 = add nsw i64 %19702, 9
  %19704 = mul nsw i64 %19703, %334
  %19705 = add nsw i64 %19704, %338
  br label %"for blur_y.s0.x.x.rebased1401"

"produce blur_x1389":                             ; preds = %"end for blur_y.s0.x.x.rebased1375"
  %19706 = getelementptr inbounds i16, i16* %read_input822, i64 %389
  %19707 = getelementptr inbounds i16, i16* %19706, i64 -31
  %19708 = bitcast i16* %19707 to <16 x i16>*
  %19709 = load <16 x i16>, <16 x i16>* %19708, align 2, !tbaa !396
  %19710 = getelementptr inbounds i16, i16* %19706, i64 -15
  %19711 = bitcast i16* %19710 to <16 x i16>*
  %19712 = load <16 x i16>, <16 x i16>* %19711, align 2, !tbaa !396
  %19713 = getelementptr inbounds i16, i16* %19706, i64 -32
  %19714 = bitcast i16* %19713 to <16 x i16>*
  %19715 = load <16 x i16>, <16 x i16>* %19714, align 2, !tbaa !396
  %19716 = getelementptr inbounds i16, i16* %19706, i64 -16
  %19717 = bitcast i16* %19716 to <16 x i16>*
  %19718 = load <16 x i16>, <16 x i16>* %19717, align 2, !tbaa !396
  %19719 = getelementptr inbounds i16, i16* %19706, i64 -30
  %19720 = bitcast i16* %19719 to <16 x i16>*
  %19721 = load <16 x i16>, <16 x i16>* %19720, align 2, !tbaa !396
  %19722 = getelementptr inbounds i16, i16* %19706, i64 -14
  %19723 = bitcast i16* %19722 to <16 x i16>*
  %19724 = load <16 x i16>, <16 x i16>* %19723, align 2, !tbaa !396
  %19725 = getelementptr inbounds i16, i16* %19706, i64 -28
  %19726 = bitcast i16* %19725 to <16 x i16>*
  %19727 = load <16 x i16>, <16 x i16>* %19726, align 2, !tbaa !396
  %19728 = getelementptr inbounds i16, i16* %19706, i64 -12
  %19729 = bitcast i16* %19728 to <16 x i16>*
  %19730 = load <16 x i16>, <16 x i16>* %19729, align 2, !tbaa !396
  %19731 = getelementptr inbounds i16, i16* %19706, i64 -29
  %19732 = bitcast i16* %19731 to <16 x i16>*
  %19733 = load <16 x i16>, <16 x i16>* %19732, align 2, !tbaa !396
  %19734 = getelementptr inbounds i16, i16* %19706, i64 -13
  %19735 = bitcast i16* %19734 to <16 x i16>*
  %19736 = load <16 x i16>, <16 x i16>* %19735, align 2, !tbaa !396
  %19737 = add <16 x i16> %19715, %19709
  %19738 = add <16 x i16> %19737, %19721
  %19739 = add <16 x i16> %19738, %19727
  %19740 = add <16 x i16> %19739, %19733
  %19741 = add <16 x i16> %19718, %19712
  %19742 = add <16 x i16> %19741, %19724
  %19743 = add <16 x i16> %19742, %19730
  %19744 = add <16 x i16> %19743, %19736
  %19745 = shufflevector <16 x i16> %19740, <16 x i16> %19744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19746 = udiv <32 x i16> %19745, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19747 = shufflevector <32 x i16> %19746, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19748 = zext i32 %.pre-phi3557 to i64
  %19749 = mul nsw i64 %299, %19748
  %19750 = add nsw i64 %301, %19749
  %19751 = getelementptr inbounds i16, i16* %blur_x879, i64 %19750
  %19752 = getelementptr inbounds i16, i16* %19751, i64 -32
  %19753 = bitcast i16* %19752 to <16 x i16>*
  store <16 x i16> %19747, <16 x i16>* %19753, align 2, !tbaa !399
  %19754 = shufflevector <32 x i16> %19746, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19755 = getelementptr inbounds i16, i16* %19751, i64 -16
  %19756 = bitcast i16* %19755 to <16 x i16>*
  store <16 x i16> %19754, <16 x i16>* %19756, align 2, !tbaa !399
  %19757 = zext i32 %.pre-phi3543 to i64
  %19758 = mul nsw i64 %19757, %333
  %19759 = add nsw i64 %19758, %296
  %19760 = getelementptr inbounds i16, i16* %blur_x879, i64 %19759
  %19761 = getelementptr inbounds i16, i16* %19760, i64 -32
  %19762 = bitcast i16* %19761 to <16 x i16>*
  %19763 = load <16 x i16>, <16 x i16>* %19762, align 2, !tbaa !399
  %19764 = getelementptr inbounds i16, i16* %19760, i64 -16
  %19765 = bitcast i16* %19764 to <16 x i16>*
  %19766 = load <16 x i16>, <16 x i16>* %19765, align 2, !tbaa !399
  %19767 = zext i32 %.pre-phi3539 to i64
  %19768 = mul nsw i64 %19767, %333
  %19769 = add nsw i64 %19768, %296
  %19770 = getelementptr inbounds i16, i16* %blur_x879, i64 %19769
  %19771 = getelementptr inbounds i16, i16* %19770, i64 -32
  %19772 = bitcast i16* %19771 to <16 x i16>*
  %19773 = load <16 x i16>, <16 x i16>* %19772, align 2, !tbaa !399
  %19774 = getelementptr inbounds i16, i16* %19770, i64 -16
  %19775 = bitcast i16* %19774 to <16 x i16>*
  %19776 = load <16 x i16>, <16 x i16>* %19775, align 2, !tbaa !399
  %19777 = zext i32 %.pre-phi3547 to i64
  %19778 = mul nsw i64 %19777, %333
  %19779 = add nsw i64 %19778, %296
  %19780 = getelementptr inbounds i16, i16* %blur_x879, i64 %19779
  %19781 = getelementptr inbounds i16, i16* %19780, i64 -32
  %19782 = bitcast i16* %19781 to <16 x i16>*
  %19783 = load <16 x i16>, <16 x i16>* %19782, align 2, !tbaa !399
  %19784 = getelementptr inbounds i16, i16* %19780, i64 -16
  %19785 = bitcast i16* %19784 to <16 x i16>*
  %19786 = load <16 x i16>, <16 x i16>* %19785, align 2, !tbaa !399
  %19787 = mul nsw i64 %19748, %333
  %19788 = add nsw i64 %19787, %296
  %19789 = getelementptr inbounds i16, i16* %blur_x879, i64 %19788
  %19790 = getelementptr inbounds i16, i16* %19789, i64 -32
  %19791 = bitcast i16* %19790 to <16 x i16>*
  %19792 = load <16 x i16>, <16 x i16>* %19791, align 2, !tbaa !399
  %19793 = getelementptr inbounds i16, i16* %19789, i64 -16
  %19794 = bitcast i16* %19793 to <16 x i16>*
  %19795 = load <16 x i16>, <16 x i16>* %19794, align 2, !tbaa !399
  %19796 = zext i32 %.pre-phi3551 to i64
  %19797 = mul nsw i64 %19796, %333
  %19798 = add nsw i64 %19797, %296
  %19799 = getelementptr inbounds i16, i16* %blur_x879, i64 %19798
  %19800 = getelementptr inbounds i16, i16* %19799, i64 -32
  %19801 = bitcast i16* %19800 to <16 x i16>*
  %19802 = load <16 x i16>, <16 x i16>* %19801, align 2, !tbaa !399
  %19803 = getelementptr inbounds i16, i16* %19799, i64 -16
  %19804 = bitcast i16* %19803 to <16 x i16>*
  %19805 = load <16 x i16>, <16 x i16>* %19804, align 2, !tbaa !399
  %19806 = add <16 x i16> %19773, %19763
  %19807 = add <16 x i16> %19806, %19783
  %19808 = add <16 x i16> %19807, %19792
  %19809 = add <16 x i16> %19808, %19802
  %19810 = add <16 x i16> %19776, %19766
  %19811 = add <16 x i16> %19810, %19786
  %19812 = add <16 x i16> %19811, %19795
  %19813 = add <16 x i16> %19812, %19805
  %19814 = shufflevector <16 x i16> %19809, <16 x i16> %19813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19815 = udiv <32 x i16> %19814, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19816 = shufflevector <32 x i16> %19815, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19817 = sext i32 %a379 to i64
  %19818 = add nsw i64 %19817, 9
  %19819 = mul nsw i64 %19818, %334
  %19820 = add nsw i64 %336, %19819
  %19821 = getelementptr inbounds i16, i16* %263, i64 %19820
  %19822 = getelementptr inbounds i16, i16* %19821, i64 -32
  %19823 = bitcast i16* %19822 to <16 x i16>*
  store <16 x i16> %19816, <16 x i16>* %19823, align 2, !tbaa !401
  %19824 = shufflevector <32 x i16> %19815, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19825 = getelementptr inbounds i16, i16* %19821, i64 -16
  %19826 = bitcast i16* %19825 to <16 x i16>*
  store <16 x i16> %19824, <16 x i16>* %19826, align 2, !tbaa !401
  br label %after_bb1386

"for blur_y.s0.x.x.rebased1401":                  ; preds = %"for blur_y.s0.x.x.rebased1401.preheader", %"consume blur_x1409"
  %indvars.iv3392 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1401.preheader" ], [ %indvars.iv.next3393, %"consume blur_x1409" ]
  %19827 = add nsw i64 %indvars.iv3392, %303
  %19828 = icmp slt i64 %19827, 1
  %19829 = trunc i64 %19827 to i32
  %19830 = shl nsw i32 %19829, 5
  %19831 = icmp sgt i32 %198, %19830
  %19832 = or i1 %19828, %19831
  br i1 %19832, label %"produce blur_x1407", label %"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge"

"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1401"
  %.pre3582 = shl nsw i64 %19827, 5
  br label %"consume blur_x1409"

"end for blur_y.s0.x.x.rebased1402":              ; preds = %"consume blur_x1409", %after_bb1386
  br i1 %304, label %"for blur_y.s0.x.x.rebased1417.preheader", label %"end for blur_y.s0.x.x.rebased1418", !prof !386

"for blur_y.s0.x.x.rebased1417.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1402"
  %19833 = sext i32 %t17221053 to i64
  %19834 = zext i32 %.pre-phi3543 to i64
  %19835 = mul nsw i64 %19834, %337
  %19836 = sub nsw i64 %19835, %298
  %19837 = zext i32 %.pre-phi3539 to i64
  %19838 = mul nsw i64 %19837, %337
  %19839 = sub nsw i64 %19838, %298
  %19840 = zext i32 %.pre-phi3547 to i64
  %19841 = mul nsw i64 %19840, %337
  %19842 = sub nsw i64 %19841, %298
  %19843 = zext i32 %.pre-phi3557 to i64
  %19844 = mul nsw i64 %19843, %337
  %19845 = sub nsw i64 %19844, %298
  %19846 = zext i32 %.pre-phi3551 to i64
  %19847 = mul nsw i64 %19846, %337
  %19848 = sub nsw i64 %19847, %298
  %19849 = sext i32 %a379 to i64
  %19850 = add nsw i64 %19849, 9
  %19851 = mul nsw i64 %19850, %334
  %19852 = add nsw i64 %19851, %338
  br label %"for blur_y.s0.x.x.rebased1417"

"produce blur_x1407":                             ; preds = %"for blur_y.s0.x.x.rebased1401"
  %t8561408 = add nsw i32 %391, %19830
  %19853 = sext i32 %t8561408 to i64
  %19854 = getelementptr inbounds i16, i16* %read_input822, i64 %19853
  %19855 = getelementptr inbounds i16, i16* %19854, i64 1
  %19856 = bitcast i16* %19855 to <16 x i16>*
  %19857 = load <16 x i16>, <16 x i16>* %19856, align 2, !tbaa !396
  %19858 = getelementptr inbounds i16, i16* %19854, i64 17
  %19859 = bitcast i16* %19858 to <16 x i16>*
  %19860 = load <16 x i16>, <16 x i16>* %19859, align 2, !tbaa !396
  %19861 = bitcast i16* %19854 to <16 x i16>*
  %19862 = load <16 x i16>, <16 x i16>* %19861, align 2, !tbaa !396
  %19863 = getelementptr inbounds i16, i16* %19854, i64 16
  %19864 = bitcast i16* %19863 to <16 x i16>*
  %19865 = load <16 x i16>, <16 x i16>* %19864, align 2, !tbaa !396
  %19866 = getelementptr inbounds i16, i16* %19854, i64 2
  %19867 = bitcast i16* %19866 to <16 x i16>*
  %19868 = load <16 x i16>, <16 x i16>* %19867, align 2, !tbaa !396
  %19869 = getelementptr inbounds i16, i16* %19854, i64 18
  %19870 = bitcast i16* %19869 to <16 x i16>*
  %19871 = load <16 x i16>, <16 x i16>* %19870, align 2, !tbaa !396
  %19872 = getelementptr inbounds i16, i16* %19854, i64 4
  %19873 = bitcast i16* %19872 to <16 x i16>*
  %19874 = load <16 x i16>, <16 x i16>* %19873, align 2, !tbaa !396
  %19875 = getelementptr inbounds i16, i16* %19854, i64 20
  %19876 = bitcast i16* %19875 to <16 x i16>*
  %19877 = load <16 x i16>, <16 x i16>* %19876, align 2, !tbaa !396
  %19878 = getelementptr inbounds i16, i16* %19854, i64 3
  %19879 = bitcast i16* %19878 to <16 x i16>*
  %19880 = load <16 x i16>, <16 x i16>* %19879, align 2, !tbaa !396
  %19881 = getelementptr inbounds i16, i16* %19854, i64 19
  %19882 = bitcast i16* %19881 to <16 x i16>*
  %19883 = load <16 x i16>, <16 x i16>* %19882, align 2, !tbaa !396
  %19884 = add <16 x i16> %19862, %19857
  %19885 = add <16 x i16> %19884, %19868
  %19886 = add <16 x i16> %19885, %19874
  %19887 = add <16 x i16> %19886, %19880
  %19888 = add <16 x i16> %19865, %19860
  %19889 = add <16 x i16> %19888, %19871
  %19890 = add <16 x i16> %19889, %19877
  %19891 = add <16 x i16> %19890, %19883
  %19892 = shufflevector <16 x i16> %19887, <16 x i16> %19891, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19893 = udiv <32 x i16> %19892, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19894 = shufflevector <32 x i16> %19893, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19895 = shl nsw i64 %19827, 5
  %19896 = add nsw i64 %19895, %19686
  %19897 = getelementptr inbounds i16, i16* %blur_x879, i64 %19896
  %19898 = bitcast i16* %19897 to <16 x i16>*
  store <16 x i16> %19894, <16 x i16>* %19898, align 2, !tbaa !399
  %19899 = shufflevector <32 x i16> %19893, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19900 = getelementptr inbounds i16, i16* %19897, i64 16
  %19901 = bitcast i16* %19900 to <16 x i16>*
  store <16 x i16> %19899, <16 x i16>* %19901, align 2, !tbaa !399
  br label %"consume blur_x1409"

"consume blur_x1409":                             ; preds = %"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge", %"produce blur_x1407"
  %.pre-phi3583 = phi i64 [ %.pre3582, %"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge" ], [ %19895, %"produce blur_x1407" ]
  %19902 = add nsw i64 %19689, %.pre-phi3583
  %19903 = getelementptr inbounds i16, i16* %blur_x879, i64 %19902
  %19904 = bitcast i16* %19903 to <16 x i16>*
  %19905 = load <16 x i16>, <16 x i16>* %19904, align 2, !tbaa !399
  %19906 = getelementptr inbounds i16, i16* %19903, i64 16
  %19907 = bitcast i16* %19906 to <16 x i16>*
  %19908 = load <16 x i16>, <16 x i16>* %19907, align 2, !tbaa !399
  %19909 = add nsw i64 %19692, %.pre-phi3583
  %19910 = getelementptr inbounds i16, i16* %blur_x879, i64 %19909
  %19911 = bitcast i16* %19910 to <16 x i16>*
  %19912 = load <16 x i16>, <16 x i16>* %19911, align 2, !tbaa !399
  %19913 = getelementptr inbounds i16, i16* %19910, i64 16
  %19914 = bitcast i16* %19913 to <16 x i16>*
  %19915 = load <16 x i16>, <16 x i16>* %19914, align 2, !tbaa !399
  %19916 = add nsw i64 %19695, %.pre-phi3583
  %19917 = getelementptr inbounds i16, i16* %blur_x879, i64 %19916
  %19918 = bitcast i16* %19917 to <16 x i16>*
  %19919 = load <16 x i16>, <16 x i16>* %19918, align 2, !tbaa !399
  %19920 = getelementptr inbounds i16, i16* %19917, i64 16
  %19921 = bitcast i16* %19920 to <16 x i16>*
  %19922 = load <16 x i16>, <16 x i16>* %19921, align 2, !tbaa !399
  %19923 = add nsw i64 %19698, %.pre-phi3583
  %19924 = getelementptr inbounds i16, i16* %blur_x879, i64 %19923
  %19925 = bitcast i16* %19924 to <16 x i16>*
  %19926 = load <16 x i16>, <16 x i16>* %19925, align 2, !tbaa !399
  %19927 = getelementptr inbounds i16, i16* %19924, i64 16
  %19928 = bitcast i16* %19927 to <16 x i16>*
  %19929 = load <16 x i16>, <16 x i16>* %19928, align 2, !tbaa !399
  %19930 = add nsw i64 %19701, %.pre-phi3583
  %19931 = getelementptr inbounds i16, i16* %blur_x879, i64 %19930
  %19932 = bitcast i16* %19931 to <16 x i16>*
  %19933 = load <16 x i16>, <16 x i16>* %19932, align 2, !tbaa !399
  %19934 = getelementptr inbounds i16, i16* %19931, i64 16
  %19935 = bitcast i16* %19934 to <16 x i16>*
  %19936 = load <16 x i16>, <16 x i16>* %19935, align 2, !tbaa !399
  %19937 = add <16 x i16> %19912, %19905
  %19938 = add <16 x i16> %19937, %19919
  %19939 = add <16 x i16> %19938, %19926
  %19940 = add <16 x i16> %19939, %19933
  %19941 = add <16 x i16> %19915, %19908
  %19942 = add <16 x i16> %19941, %19922
  %19943 = add <16 x i16> %19942, %19929
  %19944 = add <16 x i16> %19943, %19936
  %19945 = shufflevector <16 x i16> %19940, <16 x i16> %19944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19946 = udiv <32 x i16> %19945, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %19947 = shufflevector <32 x i16> %19946, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19948 = add nsw i64 %19705, %.pre-phi3583
  %19949 = getelementptr inbounds i16, i16* %263, i64 %19948
  %19950 = bitcast i16* %19949 to <16 x i16>*
  store <16 x i16> %19947, <16 x i16>* %19950, align 2, !tbaa !401
  %19951 = shufflevector <32 x i16> %19946, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19952 = getelementptr inbounds i16, i16* %19949, i64 16
  %19953 = bitcast i16* %19952 to <16 x i16>*
  store <16 x i16> %19951, <16 x i16>* %19953, align 2, !tbaa !401
  %indvars.iv.next3393 = add nuw nsw i64 %indvars.iv3392, 1
  %.not2627 = icmp eq i64 %indvars.iv.next3393, %530
  br i1 %.not2627, label %"end for blur_y.s0.x.x.rebased1402", label %"for blur_y.s0.x.x.rebased1401"

"for blur_y.s0.x.x.rebased1417":                  ; preds = %"for blur_y.s0.x.x.rebased1417.preheader", %"consume blur_x1428"
  %blur_y.s0.x.x.rebased1419 = phi i32 [ %20062, %"consume blur_x1428" ], [ 0, %"for blur_y.s0.x.x.rebased1417.preheader" ]
  %19954 = add nsw i32 %blur_y.s0.x.x.rebased1419, %t1626814
  %a2722 = shl nsw i32 %19954, 5
  %19955 = icmp sgt i32 %t1647, %a2722
  %blur_y.s0.x.v0.base.s1420 = select i1 %19955, i32 %a2722, i32 %t1647
  %19956 = icmp slt i32 %19954, 1
  %19957 = icmp sgt i32 %198, %a2722
  %19958 = or i1 %19956, %19957
  br i1 %19958, label %"produce blur_x1425", label %"consume blur_x1428"

"end for blur_y.s0.x.x.rebased1418":              ; preds = %"consume blur_x1428", %"end for blur_y.s0.x.x.rebased1402"
  br i1 %229, label %"produce blur_x1432", label %after_bb1429

"produce blur_x1425":                             ; preds = %"for blur_y.s0.x.x.rebased1417"
  %19959 = icmp slt i32 %blur_y.s0.x.v0.base.s1420, %198
  %blur_x.s0.x.v1.base.s1426 = select i1 %19959, i32 %blur_y.s0.x.v0.base.s1420, i32 %198
  %t8611427 = add nsw i32 %391, %blur_x.s0.x.v1.base.s1426
  %19960 = sext i32 %t8611427 to i64
  %19961 = getelementptr inbounds i16, i16* %read_input822, i64 %19960
  %19962 = getelementptr inbounds i16, i16* %19961, i64 1
  %19963 = bitcast i16* %19962 to <16 x i16>*
  %19964 = load <16 x i16>, <16 x i16>* %19963, align 2, !tbaa !396
  %19965 = getelementptr inbounds i16, i16* %19961, i64 17
  %19966 = bitcast i16* %19965 to <16 x i16>*
  %19967 = load <16 x i16>, <16 x i16>* %19966, align 2, !tbaa !396
  %19968 = bitcast i16* %19961 to <16 x i16>*
  %19969 = load <16 x i16>, <16 x i16>* %19968, align 2, !tbaa !396
  %19970 = getelementptr inbounds i16, i16* %19961, i64 16
  %19971 = bitcast i16* %19970 to <16 x i16>*
  %19972 = load <16 x i16>, <16 x i16>* %19971, align 2, !tbaa !396
  %19973 = getelementptr inbounds i16, i16* %19961, i64 2
  %19974 = bitcast i16* %19973 to <16 x i16>*
  %19975 = load <16 x i16>, <16 x i16>* %19974, align 2, !tbaa !396
  %19976 = getelementptr inbounds i16, i16* %19961, i64 18
  %19977 = bitcast i16* %19976 to <16 x i16>*
  %19978 = load <16 x i16>, <16 x i16>* %19977, align 2, !tbaa !396
  %19979 = getelementptr inbounds i16, i16* %19961, i64 4
  %19980 = bitcast i16* %19979 to <16 x i16>*
  %19981 = load <16 x i16>, <16 x i16>* %19980, align 2, !tbaa !396
  %19982 = getelementptr inbounds i16, i16* %19961, i64 20
  %19983 = bitcast i16* %19982 to <16 x i16>*
  %19984 = load <16 x i16>, <16 x i16>* %19983, align 2, !tbaa !396
  %19985 = getelementptr inbounds i16, i16* %19961, i64 3
  %19986 = bitcast i16* %19985 to <16 x i16>*
  %19987 = load <16 x i16>, <16 x i16>* %19986, align 2, !tbaa !396
  %19988 = getelementptr inbounds i16, i16* %19961, i64 19
  %19989 = bitcast i16* %19988 to <16 x i16>*
  %19990 = load <16 x i16>, <16 x i16>* %19989, align 2, !tbaa !396
  %19991 = add <16 x i16> %19969, %19964
  %19992 = add <16 x i16> %19991, %19975
  %19993 = add <16 x i16> %19992, %19981
  %19994 = add <16 x i16> %19993, %19987
  %19995 = add <16 x i16> %19972, %19967
  %19996 = add <16 x i16> %19995, %19978
  %19997 = add <16 x i16> %19996, %19984
  %19998 = add <16 x i16> %19997, %19990
  %19999 = shufflevector <16 x i16> %19994, <16 x i16> %19998, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20000 = udiv <32 x i16> %19999, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20001 = shufflevector <32 x i16> %20000, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20002 = sext i32 %blur_x.s0.x.v1.base.s1426 to i64
  %20003 = add nsw i64 %20002, %19833
  %20004 = getelementptr inbounds i16, i16* %blur_x879, i64 %20003
  %20005 = bitcast i16* %20004 to <16 x i16>*
  store <16 x i16> %20001, <16 x i16>* %20005, align 2, !tbaa !399
  %20006 = shufflevector <32 x i16> %20000, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20007 = getelementptr inbounds i16, i16* %20004, i64 16
  %20008 = bitcast i16* %20007 to <16 x i16>*
  store <16 x i16> %20006, <16 x i16>* %20008, align 2, !tbaa !399
  br label %"consume blur_x1428"

"consume blur_x1428":                             ; preds = %"for blur_y.s0.x.x.rebased1417", %"produce blur_x1425"
  %20009 = sext i32 %blur_y.s0.x.v0.base.s1420 to i64
  %20010 = add nsw i64 %19836, %20009
  %20011 = getelementptr inbounds i16, i16* %blur_x879, i64 %20010
  %20012 = bitcast i16* %20011 to <16 x i16>*
  %20013 = load <16 x i16>, <16 x i16>* %20012, align 2, !tbaa !399
  %20014 = getelementptr inbounds i16, i16* %20011, i64 16
  %20015 = bitcast i16* %20014 to <16 x i16>*
  %20016 = load <16 x i16>, <16 x i16>* %20015, align 2, !tbaa !399
  %20017 = add nsw i64 %19839, %20009
  %20018 = getelementptr inbounds i16, i16* %blur_x879, i64 %20017
  %20019 = bitcast i16* %20018 to <16 x i16>*
  %20020 = load <16 x i16>, <16 x i16>* %20019, align 2, !tbaa !399
  %20021 = getelementptr inbounds i16, i16* %20018, i64 16
  %20022 = bitcast i16* %20021 to <16 x i16>*
  %20023 = load <16 x i16>, <16 x i16>* %20022, align 2, !tbaa !399
  %20024 = add nsw i64 %19842, %20009
  %20025 = getelementptr inbounds i16, i16* %blur_x879, i64 %20024
  %20026 = bitcast i16* %20025 to <16 x i16>*
  %20027 = load <16 x i16>, <16 x i16>* %20026, align 2, !tbaa !399
  %20028 = getelementptr inbounds i16, i16* %20025, i64 16
  %20029 = bitcast i16* %20028 to <16 x i16>*
  %20030 = load <16 x i16>, <16 x i16>* %20029, align 2, !tbaa !399
  %20031 = add nsw i64 %19845, %20009
  %20032 = getelementptr inbounds i16, i16* %blur_x879, i64 %20031
  %20033 = bitcast i16* %20032 to <16 x i16>*
  %20034 = load <16 x i16>, <16 x i16>* %20033, align 2, !tbaa !399
  %20035 = getelementptr inbounds i16, i16* %20032, i64 16
  %20036 = bitcast i16* %20035 to <16 x i16>*
  %20037 = load <16 x i16>, <16 x i16>* %20036, align 2, !tbaa !399
  %20038 = add nsw i64 %19848, %20009
  %20039 = getelementptr inbounds i16, i16* %blur_x879, i64 %20038
  %20040 = bitcast i16* %20039 to <16 x i16>*
  %20041 = load <16 x i16>, <16 x i16>* %20040, align 2, !tbaa !399
  %20042 = getelementptr inbounds i16, i16* %20039, i64 16
  %20043 = bitcast i16* %20042 to <16 x i16>*
  %20044 = load <16 x i16>, <16 x i16>* %20043, align 2, !tbaa !399
  %20045 = add <16 x i16> %20020, %20013
  %20046 = add <16 x i16> %20045, %20027
  %20047 = add <16 x i16> %20046, %20034
  %20048 = add <16 x i16> %20047, %20041
  %20049 = add <16 x i16> %20023, %20016
  %20050 = add <16 x i16> %20049, %20030
  %20051 = add <16 x i16> %20050, %20037
  %20052 = add <16 x i16> %20051, %20044
  %20053 = shufflevector <16 x i16> %20048, <16 x i16> %20052, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20054 = udiv <32 x i16> %20053, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20055 = shufflevector <32 x i16> %20054, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20056 = add nsw i64 %19852, %20009
  %20057 = getelementptr inbounds i16, i16* %263, i64 %20056
  %20058 = bitcast i16* %20057 to <16 x i16>*
  store <16 x i16> %20055, <16 x i16>* %20058, align 2, !tbaa !401
  %20059 = shufflevector <32 x i16> %20054, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20060 = getelementptr inbounds i16, i16* %20057, i64 16
  %20061 = bitcast i16* %20060 to <16 x i16>*
  store <16 x i16> %20059, <16 x i16>* %20061, align 2, !tbaa !401
  %20062 = add nuw nsw i32 %blur_y.s0.x.x.rebased1419, 1
  %.not2626 = icmp eq i32 %20062, %t1683898
  br i1 %.not2626, label %"end for blur_y.s0.x.x.rebased1418", label %"for blur_y.s0.x.x.rebased1417"

after_bb1429:                                     ; preds = %"end for blur_y.s0.x.x.rebased1418", %"produce blur_x1432"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1444.preheader", label %"end for blur_y.s0.x.x.rebased1445", !prof !386

"for blur_y.s0.x.x.rebased1444.preheader":        ; preds = %after_bb1429
  %20063 = sext i32 %t17381096 to i64
  %20064 = zext i32 %.pre-phi3547 to i64
  %20065 = mul nsw i64 %20064, %337
  %20066 = sub nsw i64 %20065, %298
  %20067 = zext i32 %.pre-phi3543 to i64
  %20068 = mul nsw i64 %20067, %337
  %20069 = sub nsw i64 %20068, %298
  %20070 = zext i32 %.pre-phi3551 to i64
  %20071 = mul nsw i64 %20070, %337
  %20072 = sub nsw i64 %20071, %298
  %20073 = zext i32 %.pre-phi3563 to i64
  %20074 = mul nsw i64 %20073, %337
  %20075 = sub nsw i64 %20074, %298
  %20076 = zext i32 %.pre-phi3557 to i64
  %20077 = mul nsw i64 %20076, %337
  %20078 = sub nsw i64 %20077, %298
  %20079 = sext i32 %a379 to i64
  %20080 = add nsw i64 %20079, 10
  %20081 = mul nsw i64 %20080, %334
  %20082 = add nsw i64 %20081, %338
  br label %"for blur_y.s0.x.x.rebased1444"

"produce blur_x1432":                             ; preds = %"end for blur_y.s0.x.x.rebased1418"
  %20083 = getelementptr inbounds i16, i16* %read_input822, i64 %395
  %20084 = getelementptr inbounds i16, i16* %20083, i64 -31
  %20085 = bitcast i16* %20084 to <16 x i16>*
  %20086 = load <16 x i16>, <16 x i16>* %20085, align 2, !tbaa !396
  %20087 = getelementptr inbounds i16, i16* %20083, i64 -15
  %20088 = bitcast i16* %20087 to <16 x i16>*
  %20089 = load <16 x i16>, <16 x i16>* %20088, align 2, !tbaa !396
  %20090 = getelementptr inbounds i16, i16* %20083, i64 -32
  %20091 = bitcast i16* %20090 to <16 x i16>*
  %20092 = load <16 x i16>, <16 x i16>* %20091, align 2, !tbaa !396
  %20093 = getelementptr inbounds i16, i16* %20083, i64 -16
  %20094 = bitcast i16* %20093 to <16 x i16>*
  %20095 = load <16 x i16>, <16 x i16>* %20094, align 2, !tbaa !396
  %20096 = getelementptr inbounds i16, i16* %20083, i64 -30
  %20097 = bitcast i16* %20096 to <16 x i16>*
  %20098 = load <16 x i16>, <16 x i16>* %20097, align 2, !tbaa !396
  %20099 = getelementptr inbounds i16, i16* %20083, i64 -14
  %20100 = bitcast i16* %20099 to <16 x i16>*
  %20101 = load <16 x i16>, <16 x i16>* %20100, align 2, !tbaa !396
  %20102 = getelementptr inbounds i16, i16* %20083, i64 -28
  %20103 = bitcast i16* %20102 to <16 x i16>*
  %20104 = load <16 x i16>, <16 x i16>* %20103, align 2, !tbaa !396
  %20105 = getelementptr inbounds i16, i16* %20083, i64 -12
  %20106 = bitcast i16* %20105 to <16 x i16>*
  %20107 = load <16 x i16>, <16 x i16>* %20106, align 2, !tbaa !396
  %20108 = getelementptr inbounds i16, i16* %20083, i64 -29
  %20109 = bitcast i16* %20108 to <16 x i16>*
  %20110 = load <16 x i16>, <16 x i16>* %20109, align 2, !tbaa !396
  %20111 = getelementptr inbounds i16, i16* %20083, i64 -13
  %20112 = bitcast i16* %20111 to <16 x i16>*
  %20113 = load <16 x i16>, <16 x i16>* %20112, align 2, !tbaa !396
  %20114 = add <16 x i16> %20092, %20086
  %20115 = add <16 x i16> %20114, %20098
  %20116 = add <16 x i16> %20115, %20104
  %20117 = add <16 x i16> %20116, %20110
  %20118 = add <16 x i16> %20095, %20089
  %20119 = add <16 x i16> %20118, %20101
  %20120 = add <16 x i16> %20119, %20107
  %20121 = add <16 x i16> %20120, %20113
  %20122 = shufflevector <16 x i16> %20117, <16 x i16> %20121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20123 = udiv <32 x i16> %20122, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20124 = shufflevector <32 x i16> %20123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20125 = zext i32 %.pre-phi3563 to i64
  %20126 = mul nsw i64 %299, %20125
  %20127 = add nsw i64 %301, %20126
  %20128 = getelementptr inbounds i16, i16* %blur_x879, i64 %20127
  %20129 = getelementptr inbounds i16, i16* %20128, i64 -32
  %20130 = bitcast i16* %20129 to <16 x i16>*
  store <16 x i16> %20124, <16 x i16>* %20130, align 2, !tbaa !399
  %20131 = shufflevector <32 x i16> %20123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20132 = getelementptr inbounds i16, i16* %20128, i64 -16
  %20133 = bitcast i16* %20132 to <16 x i16>*
  store <16 x i16> %20131, <16 x i16>* %20133, align 2, !tbaa !399
  %20134 = zext i32 %.pre-phi3547 to i64
  %20135 = mul nsw i64 %20134, %333
  %20136 = add nsw i64 %20135, %296
  %20137 = getelementptr inbounds i16, i16* %blur_x879, i64 %20136
  %20138 = getelementptr inbounds i16, i16* %20137, i64 -32
  %20139 = bitcast i16* %20138 to <16 x i16>*
  %20140 = load <16 x i16>, <16 x i16>* %20139, align 2, !tbaa !399
  %20141 = getelementptr inbounds i16, i16* %20137, i64 -16
  %20142 = bitcast i16* %20141 to <16 x i16>*
  %20143 = load <16 x i16>, <16 x i16>* %20142, align 2, !tbaa !399
  %20144 = zext i32 %.pre-phi3543 to i64
  %20145 = mul nsw i64 %20144, %333
  %20146 = add nsw i64 %20145, %296
  %20147 = getelementptr inbounds i16, i16* %blur_x879, i64 %20146
  %20148 = getelementptr inbounds i16, i16* %20147, i64 -32
  %20149 = bitcast i16* %20148 to <16 x i16>*
  %20150 = load <16 x i16>, <16 x i16>* %20149, align 2, !tbaa !399
  %20151 = getelementptr inbounds i16, i16* %20147, i64 -16
  %20152 = bitcast i16* %20151 to <16 x i16>*
  %20153 = load <16 x i16>, <16 x i16>* %20152, align 2, !tbaa !399
  %20154 = zext i32 %.pre-phi3551 to i64
  %20155 = mul nsw i64 %20154, %333
  %20156 = add nsw i64 %20155, %296
  %20157 = getelementptr inbounds i16, i16* %blur_x879, i64 %20156
  %20158 = getelementptr inbounds i16, i16* %20157, i64 -32
  %20159 = bitcast i16* %20158 to <16 x i16>*
  %20160 = load <16 x i16>, <16 x i16>* %20159, align 2, !tbaa !399
  %20161 = getelementptr inbounds i16, i16* %20157, i64 -16
  %20162 = bitcast i16* %20161 to <16 x i16>*
  %20163 = load <16 x i16>, <16 x i16>* %20162, align 2, !tbaa !399
  %20164 = mul nsw i64 %20125, %333
  %20165 = add nsw i64 %20164, %296
  %20166 = getelementptr inbounds i16, i16* %blur_x879, i64 %20165
  %20167 = getelementptr inbounds i16, i16* %20166, i64 -32
  %20168 = bitcast i16* %20167 to <16 x i16>*
  %20169 = load <16 x i16>, <16 x i16>* %20168, align 2, !tbaa !399
  %20170 = getelementptr inbounds i16, i16* %20166, i64 -16
  %20171 = bitcast i16* %20170 to <16 x i16>*
  %20172 = load <16 x i16>, <16 x i16>* %20171, align 2, !tbaa !399
  %20173 = zext i32 %.pre-phi3557 to i64
  %20174 = mul nsw i64 %20173, %333
  %20175 = add nsw i64 %20174, %296
  %20176 = getelementptr inbounds i16, i16* %blur_x879, i64 %20175
  %20177 = getelementptr inbounds i16, i16* %20176, i64 -32
  %20178 = bitcast i16* %20177 to <16 x i16>*
  %20179 = load <16 x i16>, <16 x i16>* %20178, align 2, !tbaa !399
  %20180 = getelementptr inbounds i16, i16* %20176, i64 -16
  %20181 = bitcast i16* %20180 to <16 x i16>*
  %20182 = load <16 x i16>, <16 x i16>* %20181, align 2, !tbaa !399
  %20183 = add <16 x i16> %20150, %20140
  %20184 = add <16 x i16> %20183, %20160
  %20185 = add <16 x i16> %20184, %20169
  %20186 = add <16 x i16> %20185, %20179
  %20187 = add <16 x i16> %20153, %20143
  %20188 = add <16 x i16> %20187, %20163
  %20189 = add <16 x i16> %20188, %20172
  %20190 = add <16 x i16> %20189, %20182
  %20191 = shufflevector <16 x i16> %20186, <16 x i16> %20190, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20192 = udiv <32 x i16> %20191, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20193 = shufflevector <32 x i16> %20192, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20194 = sext i32 %a379 to i64
  %20195 = add nsw i64 %20194, 10
  %20196 = mul nsw i64 %20195, %334
  %20197 = add nsw i64 %336, %20196
  %20198 = getelementptr inbounds i16, i16* %263, i64 %20197
  %20199 = getelementptr inbounds i16, i16* %20198, i64 -32
  %20200 = bitcast i16* %20199 to <16 x i16>*
  store <16 x i16> %20193, <16 x i16>* %20200, align 2, !tbaa !401
  %20201 = shufflevector <32 x i16> %20192, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20202 = getelementptr inbounds i16, i16* %20198, i64 -16
  %20203 = bitcast i16* %20202 to <16 x i16>*
  store <16 x i16> %20201, <16 x i16>* %20203, align 2, !tbaa !401
  br label %after_bb1429

"for blur_y.s0.x.x.rebased1444":                  ; preds = %"for blur_y.s0.x.x.rebased1444.preheader", %"consume blur_x1452"
  %indvars.iv3394 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1444.preheader" ], [ %indvars.iv.next3395, %"consume blur_x1452" ]
  %20204 = add nsw i64 %indvars.iv3394, %303
  %20205 = icmp slt i64 %20204, 1
  %20206 = trunc i64 %20204 to i32
  %20207 = shl nsw i32 %20206, 5
  %20208 = icmp sgt i32 %198, %20207
  %20209 = or i1 %20205, %20208
  br i1 %20209, label %"produce blur_x1450", label %"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge"

"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1444"
  %.pre3584 = shl nsw i64 %20204, 5
  br label %"consume blur_x1452"

"end for blur_y.s0.x.x.rebased1445":              ; preds = %"consume blur_x1452", %after_bb1429
  br i1 %304, label %"for blur_y.s0.x.x.rebased1460.preheader", label %"end for blur_y.s0.x.x.rebased1461", !prof !386

"for blur_y.s0.x.x.rebased1460.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1445"
  %20210 = sext i32 %t17381096 to i64
  %20211 = zext i32 %.pre-phi3547 to i64
  %20212 = mul nsw i64 %20211, %337
  %20213 = sub nsw i64 %20212, %298
  %20214 = zext i32 %.pre-phi3543 to i64
  %20215 = mul nsw i64 %20214, %337
  %20216 = sub nsw i64 %20215, %298
  %20217 = zext i32 %.pre-phi3551 to i64
  %20218 = mul nsw i64 %20217, %337
  %20219 = sub nsw i64 %20218, %298
  %20220 = zext i32 %.pre-phi3563 to i64
  %20221 = mul nsw i64 %20220, %337
  %20222 = sub nsw i64 %20221, %298
  %20223 = zext i32 %.pre-phi3557 to i64
  %20224 = mul nsw i64 %20223, %337
  %20225 = sub nsw i64 %20224, %298
  %20226 = sext i32 %a379 to i64
  %20227 = add nsw i64 %20226, 10
  %20228 = mul nsw i64 %20227, %334
  %20229 = add nsw i64 %20228, %338
  br label %"for blur_y.s0.x.x.rebased1460"

"produce blur_x1450":                             ; preds = %"for blur_y.s0.x.x.rebased1444"
  %t8721451 = add nsw i32 %397, %20207
  %20230 = sext i32 %t8721451 to i64
  %20231 = getelementptr inbounds i16, i16* %read_input822, i64 %20230
  %20232 = getelementptr inbounds i16, i16* %20231, i64 1
  %20233 = bitcast i16* %20232 to <16 x i16>*
  %20234 = load <16 x i16>, <16 x i16>* %20233, align 2, !tbaa !396
  %20235 = getelementptr inbounds i16, i16* %20231, i64 17
  %20236 = bitcast i16* %20235 to <16 x i16>*
  %20237 = load <16 x i16>, <16 x i16>* %20236, align 2, !tbaa !396
  %20238 = bitcast i16* %20231 to <16 x i16>*
  %20239 = load <16 x i16>, <16 x i16>* %20238, align 2, !tbaa !396
  %20240 = getelementptr inbounds i16, i16* %20231, i64 16
  %20241 = bitcast i16* %20240 to <16 x i16>*
  %20242 = load <16 x i16>, <16 x i16>* %20241, align 2, !tbaa !396
  %20243 = getelementptr inbounds i16, i16* %20231, i64 2
  %20244 = bitcast i16* %20243 to <16 x i16>*
  %20245 = load <16 x i16>, <16 x i16>* %20244, align 2, !tbaa !396
  %20246 = getelementptr inbounds i16, i16* %20231, i64 18
  %20247 = bitcast i16* %20246 to <16 x i16>*
  %20248 = load <16 x i16>, <16 x i16>* %20247, align 2, !tbaa !396
  %20249 = getelementptr inbounds i16, i16* %20231, i64 4
  %20250 = bitcast i16* %20249 to <16 x i16>*
  %20251 = load <16 x i16>, <16 x i16>* %20250, align 2, !tbaa !396
  %20252 = getelementptr inbounds i16, i16* %20231, i64 20
  %20253 = bitcast i16* %20252 to <16 x i16>*
  %20254 = load <16 x i16>, <16 x i16>* %20253, align 2, !tbaa !396
  %20255 = getelementptr inbounds i16, i16* %20231, i64 3
  %20256 = bitcast i16* %20255 to <16 x i16>*
  %20257 = load <16 x i16>, <16 x i16>* %20256, align 2, !tbaa !396
  %20258 = getelementptr inbounds i16, i16* %20231, i64 19
  %20259 = bitcast i16* %20258 to <16 x i16>*
  %20260 = load <16 x i16>, <16 x i16>* %20259, align 2, !tbaa !396
  %20261 = add <16 x i16> %20239, %20234
  %20262 = add <16 x i16> %20261, %20245
  %20263 = add <16 x i16> %20262, %20251
  %20264 = add <16 x i16> %20263, %20257
  %20265 = add <16 x i16> %20242, %20237
  %20266 = add <16 x i16> %20265, %20248
  %20267 = add <16 x i16> %20266, %20254
  %20268 = add <16 x i16> %20267, %20260
  %20269 = shufflevector <16 x i16> %20264, <16 x i16> %20268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20270 = udiv <32 x i16> %20269, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20271 = shufflevector <32 x i16> %20270, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20272 = shl nsw i64 %20204, 5
  %20273 = add nsw i64 %20272, %20063
  %20274 = getelementptr inbounds i16, i16* %blur_x879, i64 %20273
  %20275 = bitcast i16* %20274 to <16 x i16>*
  store <16 x i16> %20271, <16 x i16>* %20275, align 2, !tbaa !399
  %20276 = shufflevector <32 x i16> %20270, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20277 = getelementptr inbounds i16, i16* %20274, i64 16
  %20278 = bitcast i16* %20277 to <16 x i16>*
  store <16 x i16> %20276, <16 x i16>* %20278, align 2, !tbaa !399
  br label %"consume blur_x1452"

"consume blur_x1452":                             ; preds = %"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge", %"produce blur_x1450"
  %.pre-phi3585 = phi i64 [ %.pre3584, %"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge" ], [ %20272, %"produce blur_x1450" ]
  %20279 = add nsw i64 %20066, %.pre-phi3585
  %20280 = getelementptr inbounds i16, i16* %blur_x879, i64 %20279
  %20281 = bitcast i16* %20280 to <16 x i16>*
  %20282 = load <16 x i16>, <16 x i16>* %20281, align 2, !tbaa !399
  %20283 = getelementptr inbounds i16, i16* %20280, i64 16
  %20284 = bitcast i16* %20283 to <16 x i16>*
  %20285 = load <16 x i16>, <16 x i16>* %20284, align 2, !tbaa !399
  %20286 = add nsw i64 %20069, %.pre-phi3585
  %20287 = getelementptr inbounds i16, i16* %blur_x879, i64 %20286
  %20288 = bitcast i16* %20287 to <16 x i16>*
  %20289 = load <16 x i16>, <16 x i16>* %20288, align 2, !tbaa !399
  %20290 = getelementptr inbounds i16, i16* %20287, i64 16
  %20291 = bitcast i16* %20290 to <16 x i16>*
  %20292 = load <16 x i16>, <16 x i16>* %20291, align 2, !tbaa !399
  %20293 = add nsw i64 %20072, %.pre-phi3585
  %20294 = getelementptr inbounds i16, i16* %blur_x879, i64 %20293
  %20295 = bitcast i16* %20294 to <16 x i16>*
  %20296 = load <16 x i16>, <16 x i16>* %20295, align 2, !tbaa !399
  %20297 = getelementptr inbounds i16, i16* %20294, i64 16
  %20298 = bitcast i16* %20297 to <16 x i16>*
  %20299 = load <16 x i16>, <16 x i16>* %20298, align 2, !tbaa !399
  %20300 = add nsw i64 %20075, %.pre-phi3585
  %20301 = getelementptr inbounds i16, i16* %blur_x879, i64 %20300
  %20302 = bitcast i16* %20301 to <16 x i16>*
  %20303 = load <16 x i16>, <16 x i16>* %20302, align 2, !tbaa !399
  %20304 = getelementptr inbounds i16, i16* %20301, i64 16
  %20305 = bitcast i16* %20304 to <16 x i16>*
  %20306 = load <16 x i16>, <16 x i16>* %20305, align 2, !tbaa !399
  %20307 = add nsw i64 %20078, %.pre-phi3585
  %20308 = getelementptr inbounds i16, i16* %blur_x879, i64 %20307
  %20309 = bitcast i16* %20308 to <16 x i16>*
  %20310 = load <16 x i16>, <16 x i16>* %20309, align 2, !tbaa !399
  %20311 = getelementptr inbounds i16, i16* %20308, i64 16
  %20312 = bitcast i16* %20311 to <16 x i16>*
  %20313 = load <16 x i16>, <16 x i16>* %20312, align 2, !tbaa !399
  %20314 = add <16 x i16> %20289, %20282
  %20315 = add <16 x i16> %20314, %20296
  %20316 = add <16 x i16> %20315, %20303
  %20317 = add <16 x i16> %20316, %20310
  %20318 = add <16 x i16> %20292, %20285
  %20319 = add <16 x i16> %20318, %20299
  %20320 = add <16 x i16> %20319, %20306
  %20321 = add <16 x i16> %20320, %20313
  %20322 = shufflevector <16 x i16> %20317, <16 x i16> %20321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20323 = udiv <32 x i16> %20322, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20324 = shufflevector <32 x i16> %20323, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20325 = add nsw i64 %20082, %.pre-phi3585
  %20326 = getelementptr inbounds i16, i16* %263, i64 %20325
  %20327 = bitcast i16* %20326 to <16 x i16>*
  store <16 x i16> %20324, <16 x i16>* %20327, align 2, !tbaa !401
  %20328 = shufflevector <32 x i16> %20323, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20329 = getelementptr inbounds i16, i16* %20326, i64 16
  %20330 = bitcast i16* %20329 to <16 x i16>*
  store <16 x i16> %20328, <16 x i16>* %20330, align 2, !tbaa !401
  %indvars.iv.next3395 = add nuw nsw i64 %indvars.iv3394, 1
  %.not2623 = icmp eq i64 %indvars.iv.next3395, %530
  br i1 %.not2623, label %"end for blur_y.s0.x.x.rebased1445", label %"for blur_y.s0.x.x.rebased1444"

"for blur_y.s0.x.x.rebased1460":                  ; preds = %"for blur_y.s0.x.x.rebased1460.preheader", %"consume blur_x1471"
  %blur_y.s0.x.x.rebased1462 = phi i32 [ %20439, %"consume blur_x1471" ], [ 0, %"for blur_y.s0.x.x.rebased1460.preheader" ]
  %20331 = add nsw i32 %blur_y.s0.x.x.rebased1462, %t1626814
  %a2879 = shl nsw i32 %20331, 5
  %20332 = icmp sgt i32 %t1647, %a2879
  %blur_y.s0.x.v0.base.s1463 = select i1 %20332, i32 %a2879, i32 %t1647
  %20333 = icmp slt i32 %20331, 1
  %20334 = icmp sgt i32 %198, %a2879
  %20335 = or i1 %20333, %20334
  br i1 %20335, label %"produce blur_x1468", label %"consume blur_x1471"

"end for blur_y.s0.x.x.rebased1461":              ; preds = %"consume blur_x1471", %"end for blur_y.s0.x.x.rebased1445"
  br i1 %229, label %"produce blur_x1475", label %after_bb1472

"produce blur_x1468":                             ; preds = %"for blur_y.s0.x.x.rebased1460"
  %20336 = icmp slt i32 %blur_y.s0.x.v0.base.s1463, %198
  %blur_x.s0.x.v1.base.s1469 = select i1 %20336, i32 %blur_y.s0.x.v0.base.s1463, i32 %198
  %t8771470 = add nsw i32 %397, %blur_x.s0.x.v1.base.s1469
  %20337 = sext i32 %t8771470 to i64
  %20338 = getelementptr inbounds i16, i16* %read_input822, i64 %20337
  %20339 = getelementptr inbounds i16, i16* %20338, i64 1
  %20340 = bitcast i16* %20339 to <16 x i16>*
  %20341 = load <16 x i16>, <16 x i16>* %20340, align 2, !tbaa !396
  %20342 = getelementptr inbounds i16, i16* %20338, i64 17
  %20343 = bitcast i16* %20342 to <16 x i16>*
  %20344 = load <16 x i16>, <16 x i16>* %20343, align 2, !tbaa !396
  %20345 = bitcast i16* %20338 to <16 x i16>*
  %20346 = load <16 x i16>, <16 x i16>* %20345, align 2, !tbaa !396
  %20347 = getelementptr inbounds i16, i16* %20338, i64 16
  %20348 = bitcast i16* %20347 to <16 x i16>*
  %20349 = load <16 x i16>, <16 x i16>* %20348, align 2, !tbaa !396
  %20350 = getelementptr inbounds i16, i16* %20338, i64 2
  %20351 = bitcast i16* %20350 to <16 x i16>*
  %20352 = load <16 x i16>, <16 x i16>* %20351, align 2, !tbaa !396
  %20353 = getelementptr inbounds i16, i16* %20338, i64 18
  %20354 = bitcast i16* %20353 to <16 x i16>*
  %20355 = load <16 x i16>, <16 x i16>* %20354, align 2, !tbaa !396
  %20356 = getelementptr inbounds i16, i16* %20338, i64 4
  %20357 = bitcast i16* %20356 to <16 x i16>*
  %20358 = load <16 x i16>, <16 x i16>* %20357, align 2, !tbaa !396
  %20359 = getelementptr inbounds i16, i16* %20338, i64 20
  %20360 = bitcast i16* %20359 to <16 x i16>*
  %20361 = load <16 x i16>, <16 x i16>* %20360, align 2, !tbaa !396
  %20362 = getelementptr inbounds i16, i16* %20338, i64 3
  %20363 = bitcast i16* %20362 to <16 x i16>*
  %20364 = load <16 x i16>, <16 x i16>* %20363, align 2, !tbaa !396
  %20365 = getelementptr inbounds i16, i16* %20338, i64 19
  %20366 = bitcast i16* %20365 to <16 x i16>*
  %20367 = load <16 x i16>, <16 x i16>* %20366, align 2, !tbaa !396
  %20368 = add <16 x i16> %20346, %20341
  %20369 = add <16 x i16> %20368, %20352
  %20370 = add <16 x i16> %20369, %20358
  %20371 = add <16 x i16> %20370, %20364
  %20372 = add <16 x i16> %20349, %20344
  %20373 = add <16 x i16> %20372, %20355
  %20374 = add <16 x i16> %20373, %20361
  %20375 = add <16 x i16> %20374, %20367
  %20376 = shufflevector <16 x i16> %20371, <16 x i16> %20375, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20377 = udiv <32 x i16> %20376, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20378 = shufflevector <32 x i16> %20377, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20379 = sext i32 %blur_x.s0.x.v1.base.s1469 to i64
  %20380 = add nsw i64 %20379, %20210
  %20381 = getelementptr inbounds i16, i16* %blur_x879, i64 %20380
  %20382 = bitcast i16* %20381 to <16 x i16>*
  store <16 x i16> %20378, <16 x i16>* %20382, align 2, !tbaa !399
  %20383 = shufflevector <32 x i16> %20377, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20384 = getelementptr inbounds i16, i16* %20381, i64 16
  %20385 = bitcast i16* %20384 to <16 x i16>*
  store <16 x i16> %20383, <16 x i16>* %20385, align 2, !tbaa !399
  br label %"consume blur_x1471"

"consume blur_x1471":                             ; preds = %"for blur_y.s0.x.x.rebased1460", %"produce blur_x1468"
  %20386 = sext i32 %blur_y.s0.x.v0.base.s1463 to i64
  %20387 = add nsw i64 %20213, %20386
  %20388 = getelementptr inbounds i16, i16* %blur_x879, i64 %20387
  %20389 = bitcast i16* %20388 to <16 x i16>*
  %20390 = load <16 x i16>, <16 x i16>* %20389, align 2, !tbaa !399
  %20391 = getelementptr inbounds i16, i16* %20388, i64 16
  %20392 = bitcast i16* %20391 to <16 x i16>*
  %20393 = load <16 x i16>, <16 x i16>* %20392, align 2, !tbaa !399
  %20394 = add nsw i64 %20216, %20386
  %20395 = getelementptr inbounds i16, i16* %blur_x879, i64 %20394
  %20396 = bitcast i16* %20395 to <16 x i16>*
  %20397 = load <16 x i16>, <16 x i16>* %20396, align 2, !tbaa !399
  %20398 = getelementptr inbounds i16, i16* %20395, i64 16
  %20399 = bitcast i16* %20398 to <16 x i16>*
  %20400 = load <16 x i16>, <16 x i16>* %20399, align 2, !tbaa !399
  %20401 = add nsw i64 %20219, %20386
  %20402 = getelementptr inbounds i16, i16* %blur_x879, i64 %20401
  %20403 = bitcast i16* %20402 to <16 x i16>*
  %20404 = load <16 x i16>, <16 x i16>* %20403, align 2, !tbaa !399
  %20405 = getelementptr inbounds i16, i16* %20402, i64 16
  %20406 = bitcast i16* %20405 to <16 x i16>*
  %20407 = load <16 x i16>, <16 x i16>* %20406, align 2, !tbaa !399
  %20408 = add nsw i64 %20222, %20386
  %20409 = getelementptr inbounds i16, i16* %blur_x879, i64 %20408
  %20410 = bitcast i16* %20409 to <16 x i16>*
  %20411 = load <16 x i16>, <16 x i16>* %20410, align 2, !tbaa !399
  %20412 = getelementptr inbounds i16, i16* %20409, i64 16
  %20413 = bitcast i16* %20412 to <16 x i16>*
  %20414 = load <16 x i16>, <16 x i16>* %20413, align 2, !tbaa !399
  %20415 = add nsw i64 %20225, %20386
  %20416 = getelementptr inbounds i16, i16* %blur_x879, i64 %20415
  %20417 = bitcast i16* %20416 to <16 x i16>*
  %20418 = load <16 x i16>, <16 x i16>* %20417, align 2, !tbaa !399
  %20419 = getelementptr inbounds i16, i16* %20416, i64 16
  %20420 = bitcast i16* %20419 to <16 x i16>*
  %20421 = load <16 x i16>, <16 x i16>* %20420, align 2, !tbaa !399
  %20422 = add <16 x i16> %20397, %20390
  %20423 = add <16 x i16> %20422, %20404
  %20424 = add <16 x i16> %20423, %20411
  %20425 = add <16 x i16> %20424, %20418
  %20426 = add <16 x i16> %20400, %20393
  %20427 = add <16 x i16> %20426, %20407
  %20428 = add <16 x i16> %20427, %20414
  %20429 = add <16 x i16> %20428, %20421
  %20430 = shufflevector <16 x i16> %20425, <16 x i16> %20429, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20431 = udiv <32 x i16> %20430, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20432 = shufflevector <32 x i16> %20431, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20433 = add nsw i64 %20229, %20386
  %20434 = getelementptr inbounds i16, i16* %263, i64 %20433
  %20435 = bitcast i16* %20434 to <16 x i16>*
  store <16 x i16> %20432, <16 x i16>* %20435, align 2, !tbaa !401
  %20436 = shufflevector <32 x i16> %20431, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20437 = getelementptr inbounds i16, i16* %20434, i64 16
  %20438 = bitcast i16* %20437 to <16 x i16>*
  store <16 x i16> %20436, <16 x i16>* %20438, align 2, !tbaa !401
  %20439 = add nuw nsw i32 %blur_y.s0.x.x.rebased1462, 1
  %.not2622 = icmp eq i32 %20439, %t1683898
  br i1 %.not2622, label %"end for blur_y.s0.x.x.rebased1461", label %"for blur_y.s0.x.x.rebased1460"

after_bb1472:                                     ; preds = %"end for blur_y.s0.x.x.rebased1461", %"produce blur_x1475"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1487.preheader", label %"end for blur_y.s0.x.x.rebased1488", !prof !386

"for blur_y.s0.x.x.rebased1487.preheader":        ; preds = %after_bb1472
  %20440 = sext i32 %t17541139 to i64
  %20441 = zext i32 %.pre-phi3551 to i64
  %20442 = mul nsw i64 %20441, %337
  %20443 = sub nsw i64 %20442, %298
  %20444 = zext i32 %.pre-phi3547 to i64
  %20445 = mul nsw i64 %20444, %337
  %20446 = sub nsw i64 %20445, %298
  %20447 = zext i32 %.pre-phi3557 to i64
  %20448 = mul nsw i64 %20447, %337
  %20449 = sub nsw i64 %20448, %298
  %20450 = zext i32 %.pre-phi3569 to i64
  %20451 = mul nsw i64 %20450, %337
  %20452 = sub nsw i64 %20451, %298
  %20453 = zext i32 %.pre-phi3563 to i64
  %20454 = mul nsw i64 %20453, %337
  %20455 = sub nsw i64 %20454, %298
  %20456 = sext i32 %a379 to i64
  %20457 = add nsw i64 %20456, 11
  %20458 = mul nsw i64 %20457, %334
  %20459 = add nsw i64 %20458, %338
  br label %"for blur_y.s0.x.x.rebased1487"

"produce blur_x1475":                             ; preds = %"end for blur_y.s0.x.x.rebased1461"
  %20460 = getelementptr inbounds i16, i16* %read_input822, i64 %401
  %20461 = getelementptr inbounds i16, i16* %20460, i64 -31
  %20462 = bitcast i16* %20461 to <16 x i16>*
  %20463 = load <16 x i16>, <16 x i16>* %20462, align 2, !tbaa !396
  %20464 = getelementptr inbounds i16, i16* %20460, i64 -15
  %20465 = bitcast i16* %20464 to <16 x i16>*
  %20466 = load <16 x i16>, <16 x i16>* %20465, align 2, !tbaa !396
  %20467 = getelementptr inbounds i16, i16* %20460, i64 -32
  %20468 = bitcast i16* %20467 to <16 x i16>*
  %20469 = load <16 x i16>, <16 x i16>* %20468, align 2, !tbaa !396
  %20470 = getelementptr inbounds i16, i16* %20460, i64 -16
  %20471 = bitcast i16* %20470 to <16 x i16>*
  %20472 = load <16 x i16>, <16 x i16>* %20471, align 2, !tbaa !396
  %20473 = getelementptr inbounds i16, i16* %20460, i64 -30
  %20474 = bitcast i16* %20473 to <16 x i16>*
  %20475 = load <16 x i16>, <16 x i16>* %20474, align 2, !tbaa !396
  %20476 = getelementptr inbounds i16, i16* %20460, i64 -14
  %20477 = bitcast i16* %20476 to <16 x i16>*
  %20478 = load <16 x i16>, <16 x i16>* %20477, align 2, !tbaa !396
  %20479 = getelementptr inbounds i16, i16* %20460, i64 -28
  %20480 = bitcast i16* %20479 to <16 x i16>*
  %20481 = load <16 x i16>, <16 x i16>* %20480, align 2, !tbaa !396
  %20482 = getelementptr inbounds i16, i16* %20460, i64 -12
  %20483 = bitcast i16* %20482 to <16 x i16>*
  %20484 = load <16 x i16>, <16 x i16>* %20483, align 2, !tbaa !396
  %20485 = getelementptr inbounds i16, i16* %20460, i64 -29
  %20486 = bitcast i16* %20485 to <16 x i16>*
  %20487 = load <16 x i16>, <16 x i16>* %20486, align 2, !tbaa !396
  %20488 = getelementptr inbounds i16, i16* %20460, i64 -13
  %20489 = bitcast i16* %20488 to <16 x i16>*
  %20490 = load <16 x i16>, <16 x i16>* %20489, align 2, !tbaa !396
  %20491 = add <16 x i16> %20469, %20463
  %20492 = add <16 x i16> %20491, %20475
  %20493 = add <16 x i16> %20492, %20481
  %20494 = add <16 x i16> %20493, %20487
  %20495 = add <16 x i16> %20472, %20466
  %20496 = add <16 x i16> %20495, %20478
  %20497 = add <16 x i16> %20496, %20484
  %20498 = add <16 x i16> %20497, %20490
  %20499 = shufflevector <16 x i16> %20494, <16 x i16> %20498, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20500 = udiv <32 x i16> %20499, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20501 = shufflevector <32 x i16> %20500, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20502 = zext i32 %.pre-phi3569 to i64
  %20503 = mul nsw i64 %299, %20502
  %20504 = add nsw i64 %301, %20503
  %20505 = getelementptr inbounds i16, i16* %blur_x879, i64 %20504
  %20506 = getelementptr inbounds i16, i16* %20505, i64 -32
  %20507 = bitcast i16* %20506 to <16 x i16>*
  store <16 x i16> %20501, <16 x i16>* %20507, align 2, !tbaa !399
  %20508 = shufflevector <32 x i16> %20500, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20509 = getelementptr inbounds i16, i16* %20505, i64 -16
  %20510 = bitcast i16* %20509 to <16 x i16>*
  store <16 x i16> %20508, <16 x i16>* %20510, align 2, !tbaa !399
  %20511 = zext i32 %.pre-phi3551 to i64
  %20512 = mul nsw i64 %20511, %333
  %20513 = add nsw i64 %20512, %296
  %20514 = getelementptr inbounds i16, i16* %blur_x879, i64 %20513
  %20515 = getelementptr inbounds i16, i16* %20514, i64 -32
  %20516 = bitcast i16* %20515 to <16 x i16>*
  %20517 = load <16 x i16>, <16 x i16>* %20516, align 2, !tbaa !399
  %20518 = getelementptr inbounds i16, i16* %20514, i64 -16
  %20519 = bitcast i16* %20518 to <16 x i16>*
  %20520 = load <16 x i16>, <16 x i16>* %20519, align 2, !tbaa !399
  %20521 = zext i32 %.pre-phi3547 to i64
  %20522 = mul nsw i64 %20521, %333
  %20523 = add nsw i64 %20522, %296
  %20524 = getelementptr inbounds i16, i16* %blur_x879, i64 %20523
  %20525 = getelementptr inbounds i16, i16* %20524, i64 -32
  %20526 = bitcast i16* %20525 to <16 x i16>*
  %20527 = load <16 x i16>, <16 x i16>* %20526, align 2, !tbaa !399
  %20528 = getelementptr inbounds i16, i16* %20524, i64 -16
  %20529 = bitcast i16* %20528 to <16 x i16>*
  %20530 = load <16 x i16>, <16 x i16>* %20529, align 2, !tbaa !399
  %20531 = zext i32 %.pre-phi3557 to i64
  %20532 = mul nsw i64 %20531, %333
  %20533 = add nsw i64 %20532, %296
  %20534 = getelementptr inbounds i16, i16* %blur_x879, i64 %20533
  %20535 = getelementptr inbounds i16, i16* %20534, i64 -32
  %20536 = bitcast i16* %20535 to <16 x i16>*
  %20537 = load <16 x i16>, <16 x i16>* %20536, align 2, !tbaa !399
  %20538 = getelementptr inbounds i16, i16* %20534, i64 -16
  %20539 = bitcast i16* %20538 to <16 x i16>*
  %20540 = load <16 x i16>, <16 x i16>* %20539, align 2, !tbaa !399
  %20541 = mul nsw i64 %20502, %333
  %20542 = add nsw i64 %20541, %296
  %20543 = getelementptr inbounds i16, i16* %blur_x879, i64 %20542
  %20544 = getelementptr inbounds i16, i16* %20543, i64 -32
  %20545 = bitcast i16* %20544 to <16 x i16>*
  %20546 = load <16 x i16>, <16 x i16>* %20545, align 2, !tbaa !399
  %20547 = getelementptr inbounds i16, i16* %20543, i64 -16
  %20548 = bitcast i16* %20547 to <16 x i16>*
  %20549 = load <16 x i16>, <16 x i16>* %20548, align 2, !tbaa !399
  %20550 = zext i32 %.pre-phi3563 to i64
  %20551 = mul nsw i64 %20550, %333
  %20552 = add nsw i64 %20551, %296
  %20553 = getelementptr inbounds i16, i16* %blur_x879, i64 %20552
  %20554 = getelementptr inbounds i16, i16* %20553, i64 -32
  %20555 = bitcast i16* %20554 to <16 x i16>*
  %20556 = load <16 x i16>, <16 x i16>* %20555, align 2, !tbaa !399
  %20557 = getelementptr inbounds i16, i16* %20553, i64 -16
  %20558 = bitcast i16* %20557 to <16 x i16>*
  %20559 = load <16 x i16>, <16 x i16>* %20558, align 2, !tbaa !399
  %20560 = add <16 x i16> %20527, %20517
  %20561 = add <16 x i16> %20560, %20537
  %20562 = add <16 x i16> %20561, %20546
  %20563 = add <16 x i16> %20562, %20556
  %20564 = add <16 x i16> %20530, %20520
  %20565 = add <16 x i16> %20564, %20540
  %20566 = add <16 x i16> %20565, %20549
  %20567 = add <16 x i16> %20566, %20559
  %20568 = shufflevector <16 x i16> %20563, <16 x i16> %20567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20569 = udiv <32 x i16> %20568, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20570 = shufflevector <32 x i16> %20569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20571 = sext i32 %a379 to i64
  %20572 = add nsw i64 %20571, 11
  %20573 = mul nsw i64 %20572, %334
  %20574 = add nsw i64 %336, %20573
  %20575 = getelementptr inbounds i16, i16* %263, i64 %20574
  %20576 = getelementptr inbounds i16, i16* %20575, i64 -32
  %20577 = bitcast i16* %20576 to <16 x i16>*
  store <16 x i16> %20570, <16 x i16>* %20577, align 2, !tbaa !401
  %20578 = shufflevector <32 x i16> %20569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20579 = getelementptr inbounds i16, i16* %20575, i64 -16
  %20580 = bitcast i16* %20579 to <16 x i16>*
  store <16 x i16> %20578, <16 x i16>* %20580, align 2, !tbaa !401
  br label %after_bb1472

"for blur_y.s0.x.x.rebased1487":                  ; preds = %"for blur_y.s0.x.x.rebased1487.preheader", %"consume blur_x1495"
  %indvars.iv3396 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1487.preheader" ], [ %indvars.iv.next3397, %"consume blur_x1495" ]
  %20581 = add nsw i64 %indvars.iv3396, %303
  %20582 = icmp slt i64 %20581, 1
  %20583 = trunc i64 %20581 to i32
  %20584 = shl nsw i32 %20583, 5
  %20585 = icmp sgt i32 %198, %20584
  %20586 = or i1 %20582, %20585
  br i1 %20586, label %"produce blur_x1493", label %"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge"

"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1487"
  %.pre3586 = shl nsw i64 %20581, 5
  br label %"consume blur_x1495"

"end for blur_y.s0.x.x.rebased1488":              ; preds = %"consume blur_x1495", %after_bb1472
  br i1 %304, label %"for blur_y.s0.x.x.rebased1503.preheader", label %"end for blur_y.s0.x.x.rebased1504", !prof !386

"for blur_y.s0.x.x.rebased1503.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1488"
  %20587 = sext i32 %t17541139 to i64
  %20588 = zext i32 %.pre-phi3551 to i64
  %20589 = mul nsw i64 %20588, %337
  %20590 = sub nsw i64 %20589, %298
  %20591 = zext i32 %.pre-phi3547 to i64
  %20592 = mul nsw i64 %20591, %337
  %20593 = sub nsw i64 %20592, %298
  %20594 = zext i32 %.pre-phi3557 to i64
  %20595 = mul nsw i64 %20594, %337
  %20596 = sub nsw i64 %20595, %298
  %20597 = zext i32 %.pre-phi3569 to i64
  %20598 = mul nsw i64 %20597, %337
  %20599 = sub nsw i64 %20598, %298
  %20600 = zext i32 %.pre-phi3563 to i64
  %20601 = mul nsw i64 %20600, %337
  %20602 = sub nsw i64 %20601, %298
  %20603 = sext i32 %a379 to i64
  %20604 = add nsw i64 %20603, 11
  %20605 = mul nsw i64 %20604, %334
  %20606 = add nsw i64 %20605, %338
  br label %"for blur_y.s0.x.x.rebased1503"

"produce blur_x1493":                             ; preds = %"for blur_y.s0.x.x.rebased1487"
  %t8881494 = add nsw i32 %403, %20584
  %20607 = sext i32 %t8881494 to i64
  %20608 = getelementptr inbounds i16, i16* %read_input822, i64 %20607
  %20609 = getelementptr inbounds i16, i16* %20608, i64 1
  %20610 = bitcast i16* %20609 to <16 x i16>*
  %20611 = load <16 x i16>, <16 x i16>* %20610, align 2, !tbaa !396
  %20612 = getelementptr inbounds i16, i16* %20608, i64 17
  %20613 = bitcast i16* %20612 to <16 x i16>*
  %20614 = load <16 x i16>, <16 x i16>* %20613, align 2, !tbaa !396
  %20615 = bitcast i16* %20608 to <16 x i16>*
  %20616 = load <16 x i16>, <16 x i16>* %20615, align 2, !tbaa !396
  %20617 = getelementptr inbounds i16, i16* %20608, i64 16
  %20618 = bitcast i16* %20617 to <16 x i16>*
  %20619 = load <16 x i16>, <16 x i16>* %20618, align 2, !tbaa !396
  %20620 = getelementptr inbounds i16, i16* %20608, i64 2
  %20621 = bitcast i16* %20620 to <16 x i16>*
  %20622 = load <16 x i16>, <16 x i16>* %20621, align 2, !tbaa !396
  %20623 = getelementptr inbounds i16, i16* %20608, i64 18
  %20624 = bitcast i16* %20623 to <16 x i16>*
  %20625 = load <16 x i16>, <16 x i16>* %20624, align 2, !tbaa !396
  %20626 = getelementptr inbounds i16, i16* %20608, i64 4
  %20627 = bitcast i16* %20626 to <16 x i16>*
  %20628 = load <16 x i16>, <16 x i16>* %20627, align 2, !tbaa !396
  %20629 = getelementptr inbounds i16, i16* %20608, i64 20
  %20630 = bitcast i16* %20629 to <16 x i16>*
  %20631 = load <16 x i16>, <16 x i16>* %20630, align 2, !tbaa !396
  %20632 = getelementptr inbounds i16, i16* %20608, i64 3
  %20633 = bitcast i16* %20632 to <16 x i16>*
  %20634 = load <16 x i16>, <16 x i16>* %20633, align 2, !tbaa !396
  %20635 = getelementptr inbounds i16, i16* %20608, i64 19
  %20636 = bitcast i16* %20635 to <16 x i16>*
  %20637 = load <16 x i16>, <16 x i16>* %20636, align 2, !tbaa !396
  %20638 = add <16 x i16> %20616, %20611
  %20639 = add <16 x i16> %20638, %20622
  %20640 = add <16 x i16> %20639, %20628
  %20641 = add <16 x i16> %20640, %20634
  %20642 = add <16 x i16> %20619, %20614
  %20643 = add <16 x i16> %20642, %20625
  %20644 = add <16 x i16> %20643, %20631
  %20645 = add <16 x i16> %20644, %20637
  %20646 = shufflevector <16 x i16> %20641, <16 x i16> %20645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20647 = udiv <32 x i16> %20646, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20648 = shufflevector <32 x i16> %20647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20649 = shl nsw i64 %20581, 5
  %20650 = add nsw i64 %20649, %20440
  %20651 = getelementptr inbounds i16, i16* %blur_x879, i64 %20650
  %20652 = bitcast i16* %20651 to <16 x i16>*
  store <16 x i16> %20648, <16 x i16>* %20652, align 2, !tbaa !399
  %20653 = shufflevector <32 x i16> %20647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20654 = getelementptr inbounds i16, i16* %20651, i64 16
  %20655 = bitcast i16* %20654 to <16 x i16>*
  store <16 x i16> %20653, <16 x i16>* %20655, align 2, !tbaa !399
  br label %"consume blur_x1495"

"consume blur_x1495":                             ; preds = %"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge", %"produce blur_x1493"
  %.pre-phi3587 = phi i64 [ %.pre3586, %"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge" ], [ %20649, %"produce blur_x1493" ]
  %20656 = add nsw i64 %20443, %.pre-phi3587
  %20657 = getelementptr inbounds i16, i16* %blur_x879, i64 %20656
  %20658 = bitcast i16* %20657 to <16 x i16>*
  %20659 = load <16 x i16>, <16 x i16>* %20658, align 2, !tbaa !399
  %20660 = getelementptr inbounds i16, i16* %20657, i64 16
  %20661 = bitcast i16* %20660 to <16 x i16>*
  %20662 = load <16 x i16>, <16 x i16>* %20661, align 2, !tbaa !399
  %20663 = add nsw i64 %20446, %.pre-phi3587
  %20664 = getelementptr inbounds i16, i16* %blur_x879, i64 %20663
  %20665 = bitcast i16* %20664 to <16 x i16>*
  %20666 = load <16 x i16>, <16 x i16>* %20665, align 2, !tbaa !399
  %20667 = getelementptr inbounds i16, i16* %20664, i64 16
  %20668 = bitcast i16* %20667 to <16 x i16>*
  %20669 = load <16 x i16>, <16 x i16>* %20668, align 2, !tbaa !399
  %20670 = add nsw i64 %20449, %.pre-phi3587
  %20671 = getelementptr inbounds i16, i16* %blur_x879, i64 %20670
  %20672 = bitcast i16* %20671 to <16 x i16>*
  %20673 = load <16 x i16>, <16 x i16>* %20672, align 2, !tbaa !399
  %20674 = getelementptr inbounds i16, i16* %20671, i64 16
  %20675 = bitcast i16* %20674 to <16 x i16>*
  %20676 = load <16 x i16>, <16 x i16>* %20675, align 2, !tbaa !399
  %20677 = add nsw i64 %20452, %.pre-phi3587
  %20678 = getelementptr inbounds i16, i16* %blur_x879, i64 %20677
  %20679 = bitcast i16* %20678 to <16 x i16>*
  %20680 = load <16 x i16>, <16 x i16>* %20679, align 2, !tbaa !399
  %20681 = getelementptr inbounds i16, i16* %20678, i64 16
  %20682 = bitcast i16* %20681 to <16 x i16>*
  %20683 = load <16 x i16>, <16 x i16>* %20682, align 2, !tbaa !399
  %20684 = add nsw i64 %20455, %.pre-phi3587
  %20685 = getelementptr inbounds i16, i16* %blur_x879, i64 %20684
  %20686 = bitcast i16* %20685 to <16 x i16>*
  %20687 = load <16 x i16>, <16 x i16>* %20686, align 2, !tbaa !399
  %20688 = getelementptr inbounds i16, i16* %20685, i64 16
  %20689 = bitcast i16* %20688 to <16 x i16>*
  %20690 = load <16 x i16>, <16 x i16>* %20689, align 2, !tbaa !399
  %20691 = add <16 x i16> %20666, %20659
  %20692 = add <16 x i16> %20691, %20673
  %20693 = add <16 x i16> %20692, %20680
  %20694 = add <16 x i16> %20693, %20687
  %20695 = add <16 x i16> %20669, %20662
  %20696 = add <16 x i16> %20695, %20676
  %20697 = add <16 x i16> %20696, %20683
  %20698 = add <16 x i16> %20697, %20690
  %20699 = shufflevector <16 x i16> %20694, <16 x i16> %20698, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20700 = udiv <32 x i16> %20699, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20701 = shufflevector <32 x i16> %20700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20702 = add nsw i64 %20459, %.pre-phi3587
  %20703 = getelementptr inbounds i16, i16* %263, i64 %20702
  %20704 = bitcast i16* %20703 to <16 x i16>*
  store <16 x i16> %20701, <16 x i16>* %20704, align 2, !tbaa !401
  %20705 = shufflevector <32 x i16> %20700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20706 = getelementptr inbounds i16, i16* %20703, i64 16
  %20707 = bitcast i16* %20706 to <16 x i16>*
  store <16 x i16> %20705, <16 x i16>* %20707, align 2, !tbaa !401
  %indvars.iv.next3397 = add nuw nsw i64 %indvars.iv3396, 1
  %.not2619 = icmp eq i64 %indvars.iv.next3397, %530
  br i1 %.not2619, label %"end for blur_y.s0.x.x.rebased1488", label %"for blur_y.s0.x.x.rebased1487"

"for blur_y.s0.x.x.rebased1503":                  ; preds = %"for blur_y.s0.x.x.rebased1503.preheader", %"consume blur_x1514"
  %blur_y.s0.x.x.rebased1505 = phi i32 [ %20816, %"consume blur_x1514" ], [ 0, %"for blur_y.s0.x.x.rebased1503.preheader" ]
  %20708 = add nsw i32 %blur_y.s0.x.x.rebased1505, %t1626814
  %a3036 = shl nsw i32 %20708, 5
  %20709 = icmp sgt i32 %t1647, %a3036
  %blur_y.s0.x.v0.base.s1506 = select i1 %20709, i32 %a3036, i32 %t1647
  %20710 = icmp slt i32 %20708, 1
  %20711 = icmp sgt i32 %198, %a3036
  %20712 = or i1 %20710, %20711
  br i1 %20712, label %"produce blur_x1511", label %"consume blur_x1514"

"end for blur_y.s0.x.x.rebased1504":              ; preds = %"consume blur_x1514", %"end for blur_y.s0.x.x.rebased1488"
  br i1 %229, label %"produce blur_x1518", label %after_bb1515

"produce blur_x1511":                             ; preds = %"for blur_y.s0.x.x.rebased1503"
  %20713 = icmp slt i32 %blur_y.s0.x.v0.base.s1506, %198
  %blur_x.s0.x.v1.base.s1512 = select i1 %20713, i32 %blur_y.s0.x.v0.base.s1506, i32 %198
  %t8931513 = add nsw i32 %403, %blur_x.s0.x.v1.base.s1512
  %20714 = sext i32 %t8931513 to i64
  %20715 = getelementptr inbounds i16, i16* %read_input822, i64 %20714
  %20716 = getelementptr inbounds i16, i16* %20715, i64 1
  %20717 = bitcast i16* %20716 to <16 x i16>*
  %20718 = load <16 x i16>, <16 x i16>* %20717, align 2, !tbaa !396
  %20719 = getelementptr inbounds i16, i16* %20715, i64 17
  %20720 = bitcast i16* %20719 to <16 x i16>*
  %20721 = load <16 x i16>, <16 x i16>* %20720, align 2, !tbaa !396
  %20722 = bitcast i16* %20715 to <16 x i16>*
  %20723 = load <16 x i16>, <16 x i16>* %20722, align 2, !tbaa !396
  %20724 = getelementptr inbounds i16, i16* %20715, i64 16
  %20725 = bitcast i16* %20724 to <16 x i16>*
  %20726 = load <16 x i16>, <16 x i16>* %20725, align 2, !tbaa !396
  %20727 = getelementptr inbounds i16, i16* %20715, i64 2
  %20728 = bitcast i16* %20727 to <16 x i16>*
  %20729 = load <16 x i16>, <16 x i16>* %20728, align 2, !tbaa !396
  %20730 = getelementptr inbounds i16, i16* %20715, i64 18
  %20731 = bitcast i16* %20730 to <16 x i16>*
  %20732 = load <16 x i16>, <16 x i16>* %20731, align 2, !tbaa !396
  %20733 = getelementptr inbounds i16, i16* %20715, i64 4
  %20734 = bitcast i16* %20733 to <16 x i16>*
  %20735 = load <16 x i16>, <16 x i16>* %20734, align 2, !tbaa !396
  %20736 = getelementptr inbounds i16, i16* %20715, i64 20
  %20737 = bitcast i16* %20736 to <16 x i16>*
  %20738 = load <16 x i16>, <16 x i16>* %20737, align 2, !tbaa !396
  %20739 = getelementptr inbounds i16, i16* %20715, i64 3
  %20740 = bitcast i16* %20739 to <16 x i16>*
  %20741 = load <16 x i16>, <16 x i16>* %20740, align 2, !tbaa !396
  %20742 = getelementptr inbounds i16, i16* %20715, i64 19
  %20743 = bitcast i16* %20742 to <16 x i16>*
  %20744 = load <16 x i16>, <16 x i16>* %20743, align 2, !tbaa !396
  %20745 = add <16 x i16> %20723, %20718
  %20746 = add <16 x i16> %20745, %20729
  %20747 = add <16 x i16> %20746, %20735
  %20748 = add <16 x i16> %20747, %20741
  %20749 = add <16 x i16> %20726, %20721
  %20750 = add <16 x i16> %20749, %20732
  %20751 = add <16 x i16> %20750, %20738
  %20752 = add <16 x i16> %20751, %20744
  %20753 = shufflevector <16 x i16> %20748, <16 x i16> %20752, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20754 = udiv <32 x i16> %20753, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20755 = shufflevector <32 x i16> %20754, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20756 = sext i32 %blur_x.s0.x.v1.base.s1512 to i64
  %20757 = add nsw i64 %20756, %20587
  %20758 = getelementptr inbounds i16, i16* %blur_x879, i64 %20757
  %20759 = bitcast i16* %20758 to <16 x i16>*
  store <16 x i16> %20755, <16 x i16>* %20759, align 2, !tbaa !399
  %20760 = shufflevector <32 x i16> %20754, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20761 = getelementptr inbounds i16, i16* %20758, i64 16
  %20762 = bitcast i16* %20761 to <16 x i16>*
  store <16 x i16> %20760, <16 x i16>* %20762, align 2, !tbaa !399
  br label %"consume blur_x1514"

"consume blur_x1514":                             ; preds = %"for blur_y.s0.x.x.rebased1503", %"produce blur_x1511"
  %20763 = sext i32 %blur_y.s0.x.v0.base.s1506 to i64
  %20764 = add nsw i64 %20590, %20763
  %20765 = getelementptr inbounds i16, i16* %blur_x879, i64 %20764
  %20766 = bitcast i16* %20765 to <16 x i16>*
  %20767 = load <16 x i16>, <16 x i16>* %20766, align 2, !tbaa !399
  %20768 = getelementptr inbounds i16, i16* %20765, i64 16
  %20769 = bitcast i16* %20768 to <16 x i16>*
  %20770 = load <16 x i16>, <16 x i16>* %20769, align 2, !tbaa !399
  %20771 = add nsw i64 %20593, %20763
  %20772 = getelementptr inbounds i16, i16* %blur_x879, i64 %20771
  %20773 = bitcast i16* %20772 to <16 x i16>*
  %20774 = load <16 x i16>, <16 x i16>* %20773, align 2, !tbaa !399
  %20775 = getelementptr inbounds i16, i16* %20772, i64 16
  %20776 = bitcast i16* %20775 to <16 x i16>*
  %20777 = load <16 x i16>, <16 x i16>* %20776, align 2, !tbaa !399
  %20778 = add nsw i64 %20596, %20763
  %20779 = getelementptr inbounds i16, i16* %blur_x879, i64 %20778
  %20780 = bitcast i16* %20779 to <16 x i16>*
  %20781 = load <16 x i16>, <16 x i16>* %20780, align 2, !tbaa !399
  %20782 = getelementptr inbounds i16, i16* %20779, i64 16
  %20783 = bitcast i16* %20782 to <16 x i16>*
  %20784 = load <16 x i16>, <16 x i16>* %20783, align 2, !tbaa !399
  %20785 = add nsw i64 %20599, %20763
  %20786 = getelementptr inbounds i16, i16* %blur_x879, i64 %20785
  %20787 = bitcast i16* %20786 to <16 x i16>*
  %20788 = load <16 x i16>, <16 x i16>* %20787, align 2, !tbaa !399
  %20789 = getelementptr inbounds i16, i16* %20786, i64 16
  %20790 = bitcast i16* %20789 to <16 x i16>*
  %20791 = load <16 x i16>, <16 x i16>* %20790, align 2, !tbaa !399
  %20792 = add nsw i64 %20602, %20763
  %20793 = getelementptr inbounds i16, i16* %blur_x879, i64 %20792
  %20794 = bitcast i16* %20793 to <16 x i16>*
  %20795 = load <16 x i16>, <16 x i16>* %20794, align 2, !tbaa !399
  %20796 = getelementptr inbounds i16, i16* %20793, i64 16
  %20797 = bitcast i16* %20796 to <16 x i16>*
  %20798 = load <16 x i16>, <16 x i16>* %20797, align 2, !tbaa !399
  %20799 = add <16 x i16> %20774, %20767
  %20800 = add <16 x i16> %20799, %20781
  %20801 = add <16 x i16> %20800, %20788
  %20802 = add <16 x i16> %20801, %20795
  %20803 = add <16 x i16> %20777, %20770
  %20804 = add <16 x i16> %20803, %20784
  %20805 = add <16 x i16> %20804, %20791
  %20806 = add <16 x i16> %20805, %20798
  %20807 = shufflevector <16 x i16> %20802, <16 x i16> %20806, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20808 = udiv <32 x i16> %20807, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20809 = shufflevector <32 x i16> %20808, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20810 = add nsw i64 %20606, %20763
  %20811 = getelementptr inbounds i16, i16* %263, i64 %20810
  %20812 = bitcast i16* %20811 to <16 x i16>*
  store <16 x i16> %20809, <16 x i16>* %20812, align 2, !tbaa !401
  %20813 = shufflevector <32 x i16> %20808, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20814 = getelementptr inbounds i16, i16* %20811, i64 16
  %20815 = bitcast i16* %20814 to <16 x i16>*
  store <16 x i16> %20813, <16 x i16>* %20815, align 2, !tbaa !401
  %20816 = add nuw nsw i32 %blur_y.s0.x.x.rebased1505, 1
  %.not2618 = icmp eq i32 %20816, %t1683898
  br i1 %.not2618, label %"end for blur_y.s0.x.x.rebased1504", label %"for blur_y.s0.x.x.rebased1503"

after_bb1515:                                     ; preds = %"end for blur_y.s0.x.x.rebased1504", %"produce blur_x1518"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1530.preheader", label %"end for blur_y.s0.x.x.rebased1531", !prof !386

"for blur_y.s0.x.x.rebased1530.preheader":        ; preds = %after_bb1515
  %20817 = sext i32 %t1682886 to i64
  %20818 = zext i32 %.pre-phi3557 to i64
  %20819 = mul nsw i64 %20818, %337
  %20820 = sub nsw i64 %20819, %298
  %20821 = zext i32 %.pre-phi3551 to i64
  %20822 = mul nsw i64 %20821, %337
  %20823 = sub nsw i64 %20822, %298
  %20824 = zext i32 %.pre-phi3563 to i64
  %20825 = mul nsw i64 %20824, %337
  %20826 = sub nsw i64 %20825, %298
  %20827 = zext i32 %.pre-phi3535 to i64
  %20828 = mul nsw i64 %20827, %337
  %20829 = sub nsw i64 %20828, %298
  %20830 = zext i32 %.pre-phi3569 to i64
  %20831 = mul nsw i64 %20830, %337
  %20832 = sub nsw i64 %20831, %298
  %20833 = sext i32 %a379 to i64
  %20834 = add nsw i64 %20833, 12
  %20835 = mul nsw i64 %20834, %334
  %20836 = add nsw i64 %20835, %338
  br label %"for blur_y.s0.x.x.rebased1530"

"produce blur_x1518":                             ; preds = %"end for blur_y.s0.x.x.rebased1504"
  %20837 = getelementptr inbounds i16, i16* %read_input822, i64 %407
  %20838 = getelementptr inbounds i16, i16* %20837, i64 -31
  %20839 = bitcast i16* %20838 to <16 x i16>*
  %20840 = load <16 x i16>, <16 x i16>* %20839, align 2, !tbaa !396
  %20841 = getelementptr inbounds i16, i16* %20837, i64 -15
  %20842 = bitcast i16* %20841 to <16 x i16>*
  %20843 = load <16 x i16>, <16 x i16>* %20842, align 2, !tbaa !396
  %20844 = getelementptr inbounds i16, i16* %20837, i64 -32
  %20845 = bitcast i16* %20844 to <16 x i16>*
  %20846 = load <16 x i16>, <16 x i16>* %20845, align 2, !tbaa !396
  %20847 = getelementptr inbounds i16, i16* %20837, i64 -16
  %20848 = bitcast i16* %20847 to <16 x i16>*
  %20849 = load <16 x i16>, <16 x i16>* %20848, align 2, !tbaa !396
  %20850 = getelementptr inbounds i16, i16* %20837, i64 -30
  %20851 = bitcast i16* %20850 to <16 x i16>*
  %20852 = load <16 x i16>, <16 x i16>* %20851, align 2, !tbaa !396
  %20853 = getelementptr inbounds i16, i16* %20837, i64 -14
  %20854 = bitcast i16* %20853 to <16 x i16>*
  %20855 = load <16 x i16>, <16 x i16>* %20854, align 2, !tbaa !396
  %20856 = getelementptr inbounds i16, i16* %20837, i64 -28
  %20857 = bitcast i16* %20856 to <16 x i16>*
  %20858 = load <16 x i16>, <16 x i16>* %20857, align 2, !tbaa !396
  %20859 = getelementptr inbounds i16, i16* %20837, i64 -12
  %20860 = bitcast i16* %20859 to <16 x i16>*
  %20861 = load <16 x i16>, <16 x i16>* %20860, align 2, !tbaa !396
  %20862 = getelementptr inbounds i16, i16* %20837, i64 -29
  %20863 = bitcast i16* %20862 to <16 x i16>*
  %20864 = load <16 x i16>, <16 x i16>* %20863, align 2, !tbaa !396
  %20865 = getelementptr inbounds i16, i16* %20837, i64 -13
  %20866 = bitcast i16* %20865 to <16 x i16>*
  %20867 = load <16 x i16>, <16 x i16>* %20866, align 2, !tbaa !396
  %20868 = add <16 x i16> %20846, %20840
  %20869 = add <16 x i16> %20868, %20852
  %20870 = add <16 x i16> %20869, %20858
  %20871 = add <16 x i16> %20870, %20864
  %20872 = add <16 x i16> %20849, %20843
  %20873 = add <16 x i16> %20872, %20855
  %20874 = add <16 x i16> %20873, %20861
  %20875 = add <16 x i16> %20874, %20867
  %20876 = shufflevector <16 x i16> %20871, <16 x i16> %20875, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20877 = udiv <32 x i16> %20876, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20878 = shufflevector <32 x i16> %20877, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20879 = zext i32 %.pre-phi3535 to i64
  %20880 = mul nsw i64 %299, %20879
  %20881 = add nsw i64 %301, %20880
  %20882 = getelementptr inbounds i16, i16* %blur_x879, i64 %20881
  %20883 = getelementptr inbounds i16, i16* %20882, i64 -32
  %20884 = bitcast i16* %20883 to <16 x i16>*
  store <16 x i16> %20878, <16 x i16>* %20884, align 2, !tbaa !399
  %20885 = shufflevector <32 x i16> %20877, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20886 = getelementptr inbounds i16, i16* %20882, i64 -16
  %20887 = bitcast i16* %20886 to <16 x i16>*
  store <16 x i16> %20885, <16 x i16>* %20887, align 2, !tbaa !399
  %20888 = zext i32 %.pre-phi3557 to i64
  %20889 = mul nsw i64 %20888, %333
  %20890 = add nsw i64 %20889, %296
  %20891 = getelementptr inbounds i16, i16* %blur_x879, i64 %20890
  %20892 = getelementptr inbounds i16, i16* %20891, i64 -32
  %20893 = bitcast i16* %20892 to <16 x i16>*
  %20894 = load <16 x i16>, <16 x i16>* %20893, align 2, !tbaa !399
  %20895 = getelementptr inbounds i16, i16* %20891, i64 -16
  %20896 = bitcast i16* %20895 to <16 x i16>*
  %20897 = load <16 x i16>, <16 x i16>* %20896, align 2, !tbaa !399
  %20898 = zext i32 %.pre-phi3551 to i64
  %20899 = mul nsw i64 %20898, %333
  %20900 = add nsw i64 %20899, %296
  %20901 = getelementptr inbounds i16, i16* %blur_x879, i64 %20900
  %20902 = getelementptr inbounds i16, i16* %20901, i64 -32
  %20903 = bitcast i16* %20902 to <16 x i16>*
  %20904 = load <16 x i16>, <16 x i16>* %20903, align 2, !tbaa !399
  %20905 = getelementptr inbounds i16, i16* %20901, i64 -16
  %20906 = bitcast i16* %20905 to <16 x i16>*
  %20907 = load <16 x i16>, <16 x i16>* %20906, align 2, !tbaa !399
  %20908 = zext i32 %.pre-phi3563 to i64
  %20909 = mul nsw i64 %20908, %333
  %20910 = add nsw i64 %20909, %296
  %20911 = getelementptr inbounds i16, i16* %blur_x879, i64 %20910
  %20912 = getelementptr inbounds i16, i16* %20911, i64 -32
  %20913 = bitcast i16* %20912 to <16 x i16>*
  %20914 = load <16 x i16>, <16 x i16>* %20913, align 2, !tbaa !399
  %20915 = getelementptr inbounds i16, i16* %20911, i64 -16
  %20916 = bitcast i16* %20915 to <16 x i16>*
  %20917 = load <16 x i16>, <16 x i16>* %20916, align 2, !tbaa !399
  %20918 = mul nsw i64 %20879, %333
  %20919 = add nsw i64 %20918, %296
  %20920 = getelementptr inbounds i16, i16* %blur_x879, i64 %20919
  %20921 = getelementptr inbounds i16, i16* %20920, i64 -32
  %20922 = bitcast i16* %20921 to <16 x i16>*
  %20923 = load <16 x i16>, <16 x i16>* %20922, align 2, !tbaa !399
  %20924 = getelementptr inbounds i16, i16* %20920, i64 -16
  %20925 = bitcast i16* %20924 to <16 x i16>*
  %20926 = load <16 x i16>, <16 x i16>* %20925, align 2, !tbaa !399
  %20927 = zext i32 %.pre-phi3569 to i64
  %20928 = mul nsw i64 %20927, %333
  %20929 = add nsw i64 %20928, %296
  %20930 = getelementptr inbounds i16, i16* %blur_x879, i64 %20929
  %20931 = getelementptr inbounds i16, i16* %20930, i64 -32
  %20932 = bitcast i16* %20931 to <16 x i16>*
  %20933 = load <16 x i16>, <16 x i16>* %20932, align 2, !tbaa !399
  %20934 = getelementptr inbounds i16, i16* %20930, i64 -16
  %20935 = bitcast i16* %20934 to <16 x i16>*
  %20936 = load <16 x i16>, <16 x i16>* %20935, align 2, !tbaa !399
  %20937 = add <16 x i16> %20904, %20894
  %20938 = add <16 x i16> %20937, %20914
  %20939 = add <16 x i16> %20938, %20923
  %20940 = add <16 x i16> %20939, %20933
  %20941 = add <16 x i16> %20907, %20897
  %20942 = add <16 x i16> %20941, %20917
  %20943 = add <16 x i16> %20942, %20926
  %20944 = add <16 x i16> %20943, %20936
  %20945 = shufflevector <16 x i16> %20940, <16 x i16> %20944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20946 = udiv <32 x i16> %20945, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %20947 = shufflevector <32 x i16> %20946, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20948 = sext i32 %a379 to i64
  %20949 = add nsw i64 %20948, 12
  %20950 = mul nsw i64 %20949, %334
  %20951 = add nsw i64 %336, %20950
  %20952 = getelementptr inbounds i16, i16* %263, i64 %20951
  %20953 = getelementptr inbounds i16, i16* %20952, i64 -32
  %20954 = bitcast i16* %20953 to <16 x i16>*
  store <16 x i16> %20947, <16 x i16>* %20954, align 2, !tbaa !401
  %20955 = shufflevector <32 x i16> %20946, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20956 = getelementptr inbounds i16, i16* %20952, i64 -16
  %20957 = bitcast i16* %20956 to <16 x i16>*
  store <16 x i16> %20955, <16 x i16>* %20957, align 2, !tbaa !401
  br label %after_bb1515

"for blur_y.s0.x.x.rebased1530":                  ; preds = %"for blur_y.s0.x.x.rebased1530.preheader", %"consume blur_x1538"
  %indvars.iv3398 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1530.preheader" ], [ %indvars.iv.next3399, %"consume blur_x1538" ]
  %20958 = add nsw i64 %indvars.iv3398, %303
  %20959 = icmp slt i64 %20958, 1
  %20960 = trunc i64 %20958 to i32
  %20961 = shl nsw i32 %20960, 5
  %20962 = icmp sgt i32 %198, %20961
  %20963 = or i1 %20959, %20962
  br i1 %20963, label %"produce blur_x1536", label %"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge"

"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1530"
  %.pre3588 = shl nsw i64 %20958, 5
  br label %"consume blur_x1538"

"end for blur_y.s0.x.x.rebased1531":              ; preds = %"consume blur_x1538", %after_bb1515
  br i1 %304, label %"for blur_y.s0.x.x.rebased1546.preheader", label %"end for blur_y.s0.x.x.rebased1547", !prof !386

"for blur_y.s0.x.x.rebased1546.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1531"
  %20964 = sext i32 %t1682886 to i64
  %20965 = zext i32 %.pre-phi3557 to i64
  %20966 = mul nsw i64 %20965, %337
  %20967 = sub nsw i64 %20966, %298
  %20968 = zext i32 %.pre-phi3551 to i64
  %20969 = mul nsw i64 %20968, %337
  %20970 = sub nsw i64 %20969, %298
  %20971 = zext i32 %.pre-phi3563 to i64
  %20972 = mul nsw i64 %20971, %337
  %20973 = sub nsw i64 %20972, %298
  %20974 = zext i32 %.pre-phi3535 to i64
  %20975 = mul nsw i64 %20974, %337
  %20976 = sub nsw i64 %20975, %298
  %20977 = zext i32 %.pre-phi3569 to i64
  %20978 = mul nsw i64 %20977, %337
  %20979 = sub nsw i64 %20978, %298
  %20980 = sext i32 %a379 to i64
  %20981 = add nsw i64 %20980, 12
  %20982 = mul nsw i64 %20981, %334
  %20983 = add nsw i64 %20982, %338
  br label %"for blur_y.s0.x.x.rebased1546"

"produce blur_x1536":                             ; preds = %"for blur_y.s0.x.x.rebased1530"
  %t9041537 = add nsw i32 %409, %20961
  %20984 = sext i32 %t9041537 to i64
  %20985 = getelementptr inbounds i16, i16* %read_input822, i64 %20984
  %20986 = getelementptr inbounds i16, i16* %20985, i64 1
  %20987 = bitcast i16* %20986 to <16 x i16>*
  %20988 = load <16 x i16>, <16 x i16>* %20987, align 2, !tbaa !396
  %20989 = getelementptr inbounds i16, i16* %20985, i64 17
  %20990 = bitcast i16* %20989 to <16 x i16>*
  %20991 = load <16 x i16>, <16 x i16>* %20990, align 2, !tbaa !396
  %20992 = bitcast i16* %20985 to <16 x i16>*
  %20993 = load <16 x i16>, <16 x i16>* %20992, align 2, !tbaa !396
  %20994 = getelementptr inbounds i16, i16* %20985, i64 16
  %20995 = bitcast i16* %20994 to <16 x i16>*
  %20996 = load <16 x i16>, <16 x i16>* %20995, align 2, !tbaa !396
  %20997 = getelementptr inbounds i16, i16* %20985, i64 2
  %20998 = bitcast i16* %20997 to <16 x i16>*
  %20999 = load <16 x i16>, <16 x i16>* %20998, align 2, !tbaa !396
  %21000 = getelementptr inbounds i16, i16* %20985, i64 18
  %21001 = bitcast i16* %21000 to <16 x i16>*
  %21002 = load <16 x i16>, <16 x i16>* %21001, align 2, !tbaa !396
  %21003 = getelementptr inbounds i16, i16* %20985, i64 4
  %21004 = bitcast i16* %21003 to <16 x i16>*
  %21005 = load <16 x i16>, <16 x i16>* %21004, align 2, !tbaa !396
  %21006 = getelementptr inbounds i16, i16* %20985, i64 20
  %21007 = bitcast i16* %21006 to <16 x i16>*
  %21008 = load <16 x i16>, <16 x i16>* %21007, align 2, !tbaa !396
  %21009 = getelementptr inbounds i16, i16* %20985, i64 3
  %21010 = bitcast i16* %21009 to <16 x i16>*
  %21011 = load <16 x i16>, <16 x i16>* %21010, align 2, !tbaa !396
  %21012 = getelementptr inbounds i16, i16* %20985, i64 19
  %21013 = bitcast i16* %21012 to <16 x i16>*
  %21014 = load <16 x i16>, <16 x i16>* %21013, align 2, !tbaa !396
  %21015 = add <16 x i16> %20993, %20988
  %21016 = add <16 x i16> %21015, %20999
  %21017 = add <16 x i16> %21016, %21005
  %21018 = add <16 x i16> %21017, %21011
  %21019 = add <16 x i16> %20996, %20991
  %21020 = add <16 x i16> %21019, %21002
  %21021 = add <16 x i16> %21020, %21008
  %21022 = add <16 x i16> %21021, %21014
  %21023 = shufflevector <16 x i16> %21018, <16 x i16> %21022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21024 = udiv <32 x i16> %21023, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21025 = shufflevector <32 x i16> %21024, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21026 = shl nsw i64 %20958, 5
  %21027 = add nsw i64 %21026, %20817
  %21028 = getelementptr inbounds i16, i16* %blur_x879, i64 %21027
  %21029 = bitcast i16* %21028 to <16 x i16>*
  store <16 x i16> %21025, <16 x i16>* %21029, align 2, !tbaa !399
  %21030 = shufflevector <32 x i16> %21024, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21031 = getelementptr inbounds i16, i16* %21028, i64 16
  %21032 = bitcast i16* %21031 to <16 x i16>*
  store <16 x i16> %21030, <16 x i16>* %21032, align 2, !tbaa !399
  br label %"consume blur_x1538"

"consume blur_x1538":                             ; preds = %"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge", %"produce blur_x1536"
  %.pre-phi3589 = phi i64 [ %.pre3588, %"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge" ], [ %21026, %"produce blur_x1536" ]
  %21033 = add nsw i64 %20820, %.pre-phi3589
  %21034 = getelementptr inbounds i16, i16* %blur_x879, i64 %21033
  %21035 = bitcast i16* %21034 to <16 x i16>*
  %21036 = load <16 x i16>, <16 x i16>* %21035, align 2, !tbaa !399
  %21037 = getelementptr inbounds i16, i16* %21034, i64 16
  %21038 = bitcast i16* %21037 to <16 x i16>*
  %21039 = load <16 x i16>, <16 x i16>* %21038, align 2, !tbaa !399
  %21040 = add nsw i64 %20823, %.pre-phi3589
  %21041 = getelementptr inbounds i16, i16* %blur_x879, i64 %21040
  %21042 = bitcast i16* %21041 to <16 x i16>*
  %21043 = load <16 x i16>, <16 x i16>* %21042, align 2, !tbaa !399
  %21044 = getelementptr inbounds i16, i16* %21041, i64 16
  %21045 = bitcast i16* %21044 to <16 x i16>*
  %21046 = load <16 x i16>, <16 x i16>* %21045, align 2, !tbaa !399
  %21047 = add nsw i64 %20826, %.pre-phi3589
  %21048 = getelementptr inbounds i16, i16* %blur_x879, i64 %21047
  %21049 = bitcast i16* %21048 to <16 x i16>*
  %21050 = load <16 x i16>, <16 x i16>* %21049, align 2, !tbaa !399
  %21051 = getelementptr inbounds i16, i16* %21048, i64 16
  %21052 = bitcast i16* %21051 to <16 x i16>*
  %21053 = load <16 x i16>, <16 x i16>* %21052, align 2, !tbaa !399
  %21054 = add nsw i64 %20829, %.pre-phi3589
  %21055 = getelementptr inbounds i16, i16* %blur_x879, i64 %21054
  %21056 = bitcast i16* %21055 to <16 x i16>*
  %21057 = load <16 x i16>, <16 x i16>* %21056, align 2, !tbaa !399
  %21058 = getelementptr inbounds i16, i16* %21055, i64 16
  %21059 = bitcast i16* %21058 to <16 x i16>*
  %21060 = load <16 x i16>, <16 x i16>* %21059, align 2, !tbaa !399
  %21061 = add nsw i64 %20832, %.pre-phi3589
  %21062 = getelementptr inbounds i16, i16* %blur_x879, i64 %21061
  %21063 = bitcast i16* %21062 to <16 x i16>*
  %21064 = load <16 x i16>, <16 x i16>* %21063, align 2, !tbaa !399
  %21065 = getelementptr inbounds i16, i16* %21062, i64 16
  %21066 = bitcast i16* %21065 to <16 x i16>*
  %21067 = load <16 x i16>, <16 x i16>* %21066, align 2, !tbaa !399
  %21068 = add <16 x i16> %21043, %21036
  %21069 = add <16 x i16> %21068, %21050
  %21070 = add <16 x i16> %21069, %21057
  %21071 = add <16 x i16> %21070, %21064
  %21072 = add <16 x i16> %21046, %21039
  %21073 = add <16 x i16> %21072, %21053
  %21074 = add <16 x i16> %21073, %21060
  %21075 = add <16 x i16> %21074, %21067
  %21076 = shufflevector <16 x i16> %21071, <16 x i16> %21075, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21077 = udiv <32 x i16> %21076, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21078 = shufflevector <32 x i16> %21077, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21079 = add nsw i64 %20836, %.pre-phi3589
  %21080 = getelementptr inbounds i16, i16* %263, i64 %21079
  %21081 = bitcast i16* %21080 to <16 x i16>*
  store <16 x i16> %21078, <16 x i16>* %21081, align 2, !tbaa !401
  %21082 = shufflevector <32 x i16> %21077, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21083 = getelementptr inbounds i16, i16* %21080, i64 16
  %21084 = bitcast i16* %21083 to <16 x i16>*
  store <16 x i16> %21082, <16 x i16>* %21084, align 2, !tbaa !401
  %indvars.iv.next3399 = add nuw nsw i64 %indvars.iv3398, 1
  %.not2615 = icmp eq i64 %indvars.iv.next3399, %530
  br i1 %.not2615, label %"end for blur_y.s0.x.x.rebased1531", label %"for blur_y.s0.x.x.rebased1530"

"for blur_y.s0.x.x.rebased1546":                  ; preds = %"for blur_y.s0.x.x.rebased1546.preheader", %"consume blur_x1557"
  %blur_y.s0.x.x.rebased1548 = phi i32 [ %21193, %"consume blur_x1557" ], [ 0, %"for blur_y.s0.x.x.rebased1546.preheader" ]
  %21085 = add nsw i32 %blur_y.s0.x.x.rebased1548, %t1626814
  %a3193 = shl nsw i32 %21085, 5
  %21086 = icmp sgt i32 %t1647, %a3193
  %blur_y.s0.x.v0.base.s1549 = select i1 %21086, i32 %a3193, i32 %t1647
  %21087 = icmp slt i32 %21085, 1
  %21088 = icmp sgt i32 %198, %a3193
  %21089 = or i1 %21087, %21088
  br i1 %21089, label %"produce blur_x1554", label %"consume blur_x1557"

"end for blur_y.s0.x.x.rebased1547":              ; preds = %"consume blur_x1557", %"end for blur_y.s0.x.x.rebased1531"
  br i1 %229, label %"produce blur_x1561", label %after_bb1558

"produce blur_x1554":                             ; preds = %"for blur_y.s0.x.x.rebased1546"
  %21090 = icmp slt i32 %blur_y.s0.x.v0.base.s1549, %198
  %blur_x.s0.x.v1.base.s1555 = select i1 %21090, i32 %blur_y.s0.x.v0.base.s1549, i32 %198
  %t9091556 = add nsw i32 %409, %blur_x.s0.x.v1.base.s1555
  %21091 = sext i32 %t9091556 to i64
  %21092 = getelementptr inbounds i16, i16* %read_input822, i64 %21091
  %21093 = getelementptr inbounds i16, i16* %21092, i64 1
  %21094 = bitcast i16* %21093 to <16 x i16>*
  %21095 = load <16 x i16>, <16 x i16>* %21094, align 2, !tbaa !396
  %21096 = getelementptr inbounds i16, i16* %21092, i64 17
  %21097 = bitcast i16* %21096 to <16 x i16>*
  %21098 = load <16 x i16>, <16 x i16>* %21097, align 2, !tbaa !396
  %21099 = bitcast i16* %21092 to <16 x i16>*
  %21100 = load <16 x i16>, <16 x i16>* %21099, align 2, !tbaa !396
  %21101 = getelementptr inbounds i16, i16* %21092, i64 16
  %21102 = bitcast i16* %21101 to <16 x i16>*
  %21103 = load <16 x i16>, <16 x i16>* %21102, align 2, !tbaa !396
  %21104 = getelementptr inbounds i16, i16* %21092, i64 2
  %21105 = bitcast i16* %21104 to <16 x i16>*
  %21106 = load <16 x i16>, <16 x i16>* %21105, align 2, !tbaa !396
  %21107 = getelementptr inbounds i16, i16* %21092, i64 18
  %21108 = bitcast i16* %21107 to <16 x i16>*
  %21109 = load <16 x i16>, <16 x i16>* %21108, align 2, !tbaa !396
  %21110 = getelementptr inbounds i16, i16* %21092, i64 4
  %21111 = bitcast i16* %21110 to <16 x i16>*
  %21112 = load <16 x i16>, <16 x i16>* %21111, align 2, !tbaa !396
  %21113 = getelementptr inbounds i16, i16* %21092, i64 20
  %21114 = bitcast i16* %21113 to <16 x i16>*
  %21115 = load <16 x i16>, <16 x i16>* %21114, align 2, !tbaa !396
  %21116 = getelementptr inbounds i16, i16* %21092, i64 3
  %21117 = bitcast i16* %21116 to <16 x i16>*
  %21118 = load <16 x i16>, <16 x i16>* %21117, align 2, !tbaa !396
  %21119 = getelementptr inbounds i16, i16* %21092, i64 19
  %21120 = bitcast i16* %21119 to <16 x i16>*
  %21121 = load <16 x i16>, <16 x i16>* %21120, align 2, !tbaa !396
  %21122 = add <16 x i16> %21100, %21095
  %21123 = add <16 x i16> %21122, %21106
  %21124 = add <16 x i16> %21123, %21112
  %21125 = add <16 x i16> %21124, %21118
  %21126 = add <16 x i16> %21103, %21098
  %21127 = add <16 x i16> %21126, %21109
  %21128 = add <16 x i16> %21127, %21115
  %21129 = add <16 x i16> %21128, %21121
  %21130 = shufflevector <16 x i16> %21125, <16 x i16> %21129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21131 = udiv <32 x i16> %21130, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21132 = shufflevector <32 x i16> %21131, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21133 = sext i32 %blur_x.s0.x.v1.base.s1555 to i64
  %21134 = add nsw i64 %21133, %20964
  %21135 = getelementptr inbounds i16, i16* %blur_x879, i64 %21134
  %21136 = bitcast i16* %21135 to <16 x i16>*
  store <16 x i16> %21132, <16 x i16>* %21136, align 2, !tbaa !399
  %21137 = shufflevector <32 x i16> %21131, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21138 = getelementptr inbounds i16, i16* %21135, i64 16
  %21139 = bitcast i16* %21138 to <16 x i16>*
  store <16 x i16> %21137, <16 x i16>* %21139, align 2, !tbaa !399
  br label %"consume blur_x1557"

"consume blur_x1557":                             ; preds = %"for blur_y.s0.x.x.rebased1546", %"produce blur_x1554"
  %21140 = sext i32 %blur_y.s0.x.v0.base.s1549 to i64
  %21141 = add nsw i64 %20967, %21140
  %21142 = getelementptr inbounds i16, i16* %blur_x879, i64 %21141
  %21143 = bitcast i16* %21142 to <16 x i16>*
  %21144 = load <16 x i16>, <16 x i16>* %21143, align 2, !tbaa !399
  %21145 = getelementptr inbounds i16, i16* %21142, i64 16
  %21146 = bitcast i16* %21145 to <16 x i16>*
  %21147 = load <16 x i16>, <16 x i16>* %21146, align 2, !tbaa !399
  %21148 = add nsw i64 %20970, %21140
  %21149 = getelementptr inbounds i16, i16* %blur_x879, i64 %21148
  %21150 = bitcast i16* %21149 to <16 x i16>*
  %21151 = load <16 x i16>, <16 x i16>* %21150, align 2, !tbaa !399
  %21152 = getelementptr inbounds i16, i16* %21149, i64 16
  %21153 = bitcast i16* %21152 to <16 x i16>*
  %21154 = load <16 x i16>, <16 x i16>* %21153, align 2, !tbaa !399
  %21155 = add nsw i64 %20973, %21140
  %21156 = getelementptr inbounds i16, i16* %blur_x879, i64 %21155
  %21157 = bitcast i16* %21156 to <16 x i16>*
  %21158 = load <16 x i16>, <16 x i16>* %21157, align 2, !tbaa !399
  %21159 = getelementptr inbounds i16, i16* %21156, i64 16
  %21160 = bitcast i16* %21159 to <16 x i16>*
  %21161 = load <16 x i16>, <16 x i16>* %21160, align 2, !tbaa !399
  %21162 = add nsw i64 %20976, %21140
  %21163 = getelementptr inbounds i16, i16* %blur_x879, i64 %21162
  %21164 = bitcast i16* %21163 to <16 x i16>*
  %21165 = load <16 x i16>, <16 x i16>* %21164, align 2, !tbaa !399
  %21166 = getelementptr inbounds i16, i16* %21163, i64 16
  %21167 = bitcast i16* %21166 to <16 x i16>*
  %21168 = load <16 x i16>, <16 x i16>* %21167, align 2, !tbaa !399
  %21169 = add nsw i64 %20979, %21140
  %21170 = getelementptr inbounds i16, i16* %blur_x879, i64 %21169
  %21171 = bitcast i16* %21170 to <16 x i16>*
  %21172 = load <16 x i16>, <16 x i16>* %21171, align 2, !tbaa !399
  %21173 = getelementptr inbounds i16, i16* %21170, i64 16
  %21174 = bitcast i16* %21173 to <16 x i16>*
  %21175 = load <16 x i16>, <16 x i16>* %21174, align 2, !tbaa !399
  %21176 = add <16 x i16> %21151, %21144
  %21177 = add <16 x i16> %21176, %21158
  %21178 = add <16 x i16> %21177, %21165
  %21179 = add <16 x i16> %21178, %21172
  %21180 = add <16 x i16> %21154, %21147
  %21181 = add <16 x i16> %21180, %21161
  %21182 = add <16 x i16> %21181, %21168
  %21183 = add <16 x i16> %21182, %21175
  %21184 = shufflevector <16 x i16> %21179, <16 x i16> %21183, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21185 = udiv <32 x i16> %21184, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21186 = shufflevector <32 x i16> %21185, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21187 = add nsw i64 %20983, %21140
  %21188 = getelementptr inbounds i16, i16* %263, i64 %21187
  %21189 = bitcast i16* %21188 to <16 x i16>*
  store <16 x i16> %21186, <16 x i16>* %21189, align 2, !tbaa !401
  %21190 = shufflevector <32 x i16> %21185, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21191 = getelementptr inbounds i16, i16* %21188, i64 16
  %21192 = bitcast i16* %21191 to <16 x i16>*
  store <16 x i16> %21190, <16 x i16>* %21192, align 2, !tbaa !401
  %21193 = add nuw nsw i32 %blur_y.s0.x.x.rebased1548, 1
  %.not2614 = icmp eq i32 %21193, %t1683898
  br i1 %.not2614, label %"end for blur_y.s0.x.x.rebased1547", label %"for blur_y.s0.x.x.rebased1546"

after_bb1558:                                     ; preds = %"end for blur_y.s0.x.x.rebased1547", %"produce blur_x1561"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1573.preheader", label %"end for blur_y.s0.x.x.rebased1574", !prof !386

"for blur_y.s0.x.x.rebased1573.preheader":        ; preds = %after_bb1558
  %21194 = sext i32 %t1688914 to i64
  %21195 = zext i32 %.pre-phi3563 to i64
  %21196 = mul nsw i64 %21195, %337
  %21197 = sub nsw i64 %21196, %298
  %21198 = zext i32 %.pre-phi3557 to i64
  %21199 = mul nsw i64 %21198, %337
  %21200 = sub nsw i64 %21199, %298
  %21201 = zext i32 %.pre-phi3569 to i64
  %21202 = mul nsw i64 %21201, %337
  %21203 = sub nsw i64 %21202, %298
  %21204 = zext i32 %.pre-phi3539 to i64
  %21205 = mul nsw i64 %21204, %337
  %21206 = sub nsw i64 %21205, %298
  %21207 = zext i32 %.pre-phi3535 to i64
  %21208 = mul nsw i64 %21207, %337
  %21209 = sub nsw i64 %21208, %298
  %21210 = sext i32 %a379 to i64
  %21211 = add nsw i64 %21210, 13
  %21212 = mul nsw i64 %21211, %334
  %21213 = add nsw i64 %21212, %338
  br label %"for blur_y.s0.x.x.rebased1573"

"produce blur_x1561":                             ; preds = %"end for blur_y.s0.x.x.rebased1547"
  %21214 = getelementptr inbounds i16, i16* %read_input822, i64 %413
  %21215 = getelementptr inbounds i16, i16* %21214, i64 -31
  %21216 = bitcast i16* %21215 to <16 x i16>*
  %21217 = load <16 x i16>, <16 x i16>* %21216, align 2, !tbaa !396
  %21218 = getelementptr inbounds i16, i16* %21214, i64 -15
  %21219 = bitcast i16* %21218 to <16 x i16>*
  %21220 = load <16 x i16>, <16 x i16>* %21219, align 2, !tbaa !396
  %21221 = getelementptr inbounds i16, i16* %21214, i64 -32
  %21222 = bitcast i16* %21221 to <16 x i16>*
  %21223 = load <16 x i16>, <16 x i16>* %21222, align 2, !tbaa !396
  %21224 = getelementptr inbounds i16, i16* %21214, i64 -16
  %21225 = bitcast i16* %21224 to <16 x i16>*
  %21226 = load <16 x i16>, <16 x i16>* %21225, align 2, !tbaa !396
  %21227 = getelementptr inbounds i16, i16* %21214, i64 -30
  %21228 = bitcast i16* %21227 to <16 x i16>*
  %21229 = load <16 x i16>, <16 x i16>* %21228, align 2, !tbaa !396
  %21230 = getelementptr inbounds i16, i16* %21214, i64 -14
  %21231 = bitcast i16* %21230 to <16 x i16>*
  %21232 = load <16 x i16>, <16 x i16>* %21231, align 2, !tbaa !396
  %21233 = getelementptr inbounds i16, i16* %21214, i64 -28
  %21234 = bitcast i16* %21233 to <16 x i16>*
  %21235 = load <16 x i16>, <16 x i16>* %21234, align 2, !tbaa !396
  %21236 = getelementptr inbounds i16, i16* %21214, i64 -12
  %21237 = bitcast i16* %21236 to <16 x i16>*
  %21238 = load <16 x i16>, <16 x i16>* %21237, align 2, !tbaa !396
  %21239 = getelementptr inbounds i16, i16* %21214, i64 -29
  %21240 = bitcast i16* %21239 to <16 x i16>*
  %21241 = load <16 x i16>, <16 x i16>* %21240, align 2, !tbaa !396
  %21242 = getelementptr inbounds i16, i16* %21214, i64 -13
  %21243 = bitcast i16* %21242 to <16 x i16>*
  %21244 = load <16 x i16>, <16 x i16>* %21243, align 2, !tbaa !396
  %21245 = add <16 x i16> %21223, %21217
  %21246 = add <16 x i16> %21245, %21229
  %21247 = add <16 x i16> %21246, %21235
  %21248 = add <16 x i16> %21247, %21241
  %21249 = add <16 x i16> %21226, %21220
  %21250 = add <16 x i16> %21249, %21232
  %21251 = add <16 x i16> %21250, %21238
  %21252 = add <16 x i16> %21251, %21244
  %21253 = shufflevector <16 x i16> %21248, <16 x i16> %21252, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21254 = udiv <32 x i16> %21253, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21255 = shufflevector <32 x i16> %21254, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21256 = zext i32 %.pre-phi3539 to i64
  %21257 = mul nsw i64 %299, %21256
  %21258 = add nsw i64 %301, %21257
  %21259 = getelementptr inbounds i16, i16* %blur_x879, i64 %21258
  %21260 = getelementptr inbounds i16, i16* %21259, i64 -32
  %21261 = bitcast i16* %21260 to <16 x i16>*
  store <16 x i16> %21255, <16 x i16>* %21261, align 2, !tbaa !399
  %21262 = shufflevector <32 x i16> %21254, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21263 = getelementptr inbounds i16, i16* %21259, i64 -16
  %21264 = bitcast i16* %21263 to <16 x i16>*
  store <16 x i16> %21262, <16 x i16>* %21264, align 2, !tbaa !399
  %21265 = zext i32 %.pre-phi3563 to i64
  %21266 = mul nsw i64 %21265, %333
  %21267 = add nsw i64 %21266, %296
  %21268 = getelementptr inbounds i16, i16* %blur_x879, i64 %21267
  %21269 = getelementptr inbounds i16, i16* %21268, i64 -32
  %21270 = bitcast i16* %21269 to <16 x i16>*
  %21271 = load <16 x i16>, <16 x i16>* %21270, align 2, !tbaa !399
  %21272 = getelementptr inbounds i16, i16* %21268, i64 -16
  %21273 = bitcast i16* %21272 to <16 x i16>*
  %21274 = load <16 x i16>, <16 x i16>* %21273, align 2, !tbaa !399
  %21275 = zext i32 %.pre-phi3557 to i64
  %21276 = mul nsw i64 %21275, %333
  %21277 = add nsw i64 %21276, %296
  %21278 = getelementptr inbounds i16, i16* %blur_x879, i64 %21277
  %21279 = getelementptr inbounds i16, i16* %21278, i64 -32
  %21280 = bitcast i16* %21279 to <16 x i16>*
  %21281 = load <16 x i16>, <16 x i16>* %21280, align 2, !tbaa !399
  %21282 = getelementptr inbounds i16, i16* %21278, i64 -16
  %21283 = bitcast i16* %21282 to <16 x i16>*
  %21284 = load <16 x i16>, <16 x i16>* %21283, align 2, !tbaa !399
  %21285 = zext i32 %.pre-phi3569 to i64
  %21286 = mul nsw i64 %21285, %333
  %21287 = add nsw i64 %21286, %296
  %21288 = getelementptr inbounds i16, i16* %blur_x879, i64 %21287
  %21289 = getelementptr inbounds i16, i16* %21288, i64 -32
  %21290 = bitcast i16* %21289 to <16 x i16>*
  %21291 = load <16 x i16>, <16 x i16>* %21290, align 2, !tbaa !399
  %21292 = getelementptr inbounds i16, i16* %21288, i64 -16
  %21293 = bitcast i16* %21292 to <16 x i16>*
  %21294 = load <16 x i16>, <16 x i16>* %21293, align 2, !tbaa !399
  %21295 = mul nsw i64 %21256, %333
  %21296 = add nsw i64 %21295, %296
  %21297 = getelementptr inbounds i16, i16* %blur_x879, i64 %21296
  %21298 = getelementptr inbounds i16, i16* %21297, i64 -32
  %21299 = bitcast i16* %21298 to <16 x i16>*
  %21300 = load <16 x i16>, <16 x i16>* %21299, align 2, !tbaa !399
  %21301 = getelementptr inbounds i16, i16* %21297, i64 -16
  %21302 = bitcast i16* %21301 to <16 x i16>*
  %21303 = load <16 x i16>, <16 x i16>* %21302, align 2, !tbaa !399
  %21304 = zext i32 %.pre-phi3535 to i64
  %21305 = mul nsw i64 %21304, %333
  %21306 = add nsw i64 %21305, %296
  %21307 = getelementptr inbounds i16, i16* %blur_x879, i64 %21306
  %21308 = getelementptr inbounds i16, i16* %21307, i64 -32
  %21309 = bitcast i16* %21308 to <16 x i16>*
  %21310 = load <16 x i16>, <16 x i16>* %21309, align 2, !tbaa !399
  %21311 = getelementptr inbounds i16, i16* %21307, i64 -16
  %21312 = bitcast i16* %21311 to <16 x i16>*
  %21313 = load <16 x i16>, <16 x i16>* %21312, align 2, !tbaa !399
  %21314 = add <16 x i16> %21281, %21271
  %21315 = add <16 x i16> %21314, %21291
  %21316 = add <16 x i16> %21315, %21300
  %21317 = add <16 x i16> %21316, %21310
  %21318 = add <16 x i16> %21284, %21274
  %21319 = add <16 x i16> %21318, %21294
  %21320 = add <16 x i16> %21319, %21303
  %21321 = add <16 x i16> %21320, %21313
  %21322 = shufflevector <16 x i16> %21317, <16 x i16> %21321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21323 = udiv <32 x i16> %21322, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21324 = shufflevector <32 x i16> %21323, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21325 = sext i32 %a379 to i64
  %21326 = add nsw i64 %21325, 13
  %21327 = mul nsw i64 %21326, %334
  %21328 = add nsw i64 %336, %21327
  %21329 = getelementptr inbounds i16, i16* %263, i64 %21328
  %21330 = getelementptr inbounds i16, i16* %21329, i64 -32
  %21331 = bitcast i16* %21330 to <16 x i16>*
  store <16 x i16> %21324, <16 x i16>* %21331, align 2, !tbaa !401
  %21332 = shufflevector <32 x i16> %21323, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21333 = getelementptr inbounds i16, i16* %21329, i64 -16
  %21334 = bitcast i16* %21333 to <16 x i16>*
  store <16 x i16> %21332, <16 x i16>* %21334, align 2, !tbaa !401
  br label %after_bb1558

"for blur_y.s0.x.x.rebased1573":                  ; preds = %"for blur_y.s0.x.x.rebased1573.preheader", %"consume blur_x1581"
  %indvars.iv3400 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1573.preheader" ], [ %indvars.iv.next3401, %"consume blur_x1581" ]
  %21335 = add nsw i64 %indvars.iv3400, %303
  %21336 = icmp slt i64 %21335, 1
  %21337 = trunc i64 %21335 to i32
  %21338 = shl nsw i32 %21337, 5
  %21339 = icmp sgt i32 %198, %21338
  %21340 = or i1 %21336, %21339
  br i1 %21340, label %"produce blur_x1579", label %"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge"

"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1573"
  %.pre3590 = shl nsw i64 %21335, 5
  br label %"consume blur_x1581"

"end for blur_y.s0.x.x.rebased1574":              ; preds = %"consume blur_x1581", %after_bb1558
  br i1 %304, label %"for blur_y.s0.x.x.rebased1589.preheader", label %"end for blur_y.s0.x.x.rebased1590", !prof !386

"for blur_y.s0.x.x.rebased1589.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1574"
  %21341 = sext i32 %t1688914 to i64
  %21342 = zext i32 %.pre-phi3563 to i64
  %21343 = mul nsw i64 %21342, %337
  %21344 = sub nsw i64 %21343, %298
  %21345 = zext i32 %.pre-phi3557 to i64
  %21346 = mul nsw i64 %21345, %337
  %21347 = sub nsw i64 %21346, %298
  %21348 = zext i32 %.pre-phi3569 to i64
  %21349 = mul nsw i64 %21348, %337
  %21350 = sub nsw i64 %21349, %298
  %21351 = zext i32 %.pre-phi3539 to i64
  %21352 = mul nsw i64 %21351, %337
  %21353 = sub nsw i64 %21352, %298
  %21354 = zext i32 %.pre-phi3535 to i64
  %21355 = mul nsw i64 %21354, %337
  %21356 = sub nsw i64 %21355, %298
  %21357 = sext i32 %a379 to i64
  %21358 = add nsw i64 %21357, 13
  %21359 = mul nsw i64 %21358, %334
  %21360 = add nsw i64 %21359, %338
  br label %"for blur_y.s0.x.x.rebased1589"

"produce blur_x1579":                             ; preds = %"for blur_y.s0.x.x.rebased1573"
  %t9201580 = add nsw i32 %415, %21338
  %21361 = sext i32 %t9201580 to i64
  %21362 = getelementptr inbounds i16, i16* %read_input822, i64 %21361
  %21363 = getelementptr inbounds i16, i16* %21362, i64 1
  %21364 = bitcast i16* %21363 to <16 x i16>*
  %21365 = load <16 x i16>, <16 x i16>* %21364, align 2, !tbaa !396
  %21366 = getelementptr inbounds i16, i16* %21362, i64 17
  %21367 = bitcast i16* %21366 to <16 x i16>*
  %21368 = load <16 x i16>, <16 x i16>* %21367, align 2, !tbaa !396
  %21369 = bitcast i16* %21362 to <16 x i16>*
  %21370 = load <16 x i16>, <16 x i16>* %21369, align 2, !tbaa !396
  %21371 = getelementptr inbounds i16, i16* %21362, i64 16
  %21372 = bitcast i16* %21371 to <16 x i16>*
  %21373 = load <16 x i16>, <16 x i16>* %21372, align 2, !tbaa !396
  %21374 = getelementptr inbounds i16, i16* %21362, i64 2
  %21375 = bitcast i16* %21374 to <16 x i16>*
  %21376 = load <16 x i16>, <16 x i16>* %21375, align 2, !tbaa !396
  %21377 = getelementptr inbounds i16, i16* %21362, i64 18
  %21378 = bitcast i16* %21377 to <16 x i16>*
  %21379 = load <16 x i16>, <16 x i16>* %21378, align 2, !tbaa !396
  %21380 = getelementptr inbounds i16, i16* %21362, i64 4
  %21381 = bitcast i16* %21380 to <16 x i16>*
  %21382 = load <16 x i16>, <16 x i16>* %21381, align 2, !tbaa !396
  %21383 = getelementptr inbounds i16, i16* %21362, i64 20
  %21384 = bitcast i16* %21383 to <16 x i16>*
  %21385 = load <16 x i16>, <16 x i16>* %21384, align 2, !tbaa !396
  %21386 = getelementptr inbounds i16, i16* %21362, i64 3
  %21387 = bitcast i16* %21386 to <16 x i16>*
  %21388 = load <16 x i16>, <16 x i16>* %21387, align 2, !tbaa !396
  %21389 = getelementptr inbounds i16, i16* %21362, i64 19
  %21390 = bitcast i16* %21389 to <16 x i16>*
  %21391 = load <16 x i16>, <16 x i16>* %21390, align 2, !tbaa !396
  %21392 = add <16 x i16> %21370, %21365
  %21393 = add <16 x i16> %21392, %21376
  %21394 = add <16 x i16> %21393, %21382
  %21395 = add <16 x i16> %21394, %21388
  %21396 = add <16 x i16> %21373, %21368
  %21397 = add <16 x i16> %21396, %21379
  %21398 = add <16 x i16> %21397, %21385
  %21399 = add <16 x i16> %21398, %21391
  %21400 = shufflevector <16 x i16> %21395, <16 x i16> %21399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21401 = udiv <32 x i16> %21400, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21402 = shufflevector <32 x i16> %21401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21403 = shl nsw i64 %21335, 5
  %21404 = add nsw i64 %21403, %21194
  %21405 = getelementptr inbounds i16, i16* %blur_x879, i64 %21404
  %21406 = bitcast i16* %21405 to <16 x i16>*
  store <16 x i16> %21402, <16 x i16>* %21406, align 2, !tbaa !399
  %21407 = shufflevector <32 x i16> %21401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21408 = getelementptr inbounds i16, i16* %21405, i64 16
  %21409 = bitcast i16* %21408 to <16 x i16>*
  store <16 x i16> %21407, <16 x i16>* %21409, align 2, !tbaa !399
  br label %"consume blur_x1581"

"consume blur_x1581":                             ; preds = %"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge", %"produce blur_x1579"
  %.pre-phi3591 = phi i64 [ %.pre3590, %"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge" ], [ %21403, %"produce blur_x1579" ]
  %21410 = add nsw i64 %21197, %.pre-phi3591
  %21411 = getelementptr inbounds i16, i16* %blur_x879, i64 %21410
  %21412 = bitcast i16* %21411 to <16 x i16>*
  %21413 = load <16 x i16>, <16 x i16>* %21412, align 2, !tbaa !399
  %21414 = getelementptr inbounds i16, i16* %21411, i64 16
  %21415 = bitcast i16* %21414 to <16 x i16>*
  %21416 = load <16 x i16>, <16 x i16>* %21415, align 2, !tbaa !399
  %21417 = add nsw i64 %21200, %.pre-phi3591
  %21418 = getelementptr inbounds i16, i16* %blur_x879, i64 %21417
  %21419 = bitcast i16* %21418 to <16 x i16>*
  %21420 = load <16 x i16>, <16 x i16>* %21419, align 2, !tbaa !399
  %21421 = getelementptr inbounds i16, i16* %21418, i64 16
  %21422 = bitcast i16* %21421 to <16 x i16>*
  %21423 = load <16 x i16>, <16 x i16>* %21422, align 2, !tbaa !399
  %21424 = add nsw i64 %21203, %.pre-phi3591
  %21425 = getelementptr inbounds i16, i16* %blur_x879, i64 %21424
  %21426 = bitcast i16* %21425 to <16 x i16>*
  %21427 = load <16 x i16>, <16 x i16>* %21426, align 2, !tbaa !399
  %21428 = getelementptr inbounds i16, i16* %21425, i64 16
  %21429 = bitcast i16* %21428 to <16 x i16>*
  %21430 = load <16 x i16>, <16 x i16>* %21429, align 2, !tbaa !399
  %21431 = add nsw i64 %21206, %.pre-phi3591
  %21432 = getelementptr inbounds i16, i16* %blur_x879, i64 %21431
  %21433 = bitcast i16* %21432 to <16 x i16>*
  %21434 = load <16 x i16>, <16 x i16>* %21433, align 2, !tbaa !399
  %21435 = getelementptr inbounds i16, i16* %21432, i64 16
  %21436 = bitcast i16* %21435 to <16 x i16>*
  %21437 = load <16 x i16>, <16 x i16>* %21436, align 2, !tbaa !399
  %21438 = add nsw i64 %21209, %.pre-phi3591
  %21439 = getelementptr inbounds i16, i16* %blur_x879, i64 %21438
  %21440 = bitcast i16* %21439 to <16 x i16>*
  %21441 = load <16 x i16>, <16 x i16>* %21440, align 2, !tbaa !399
  %21442 = getelementptr inbounds i16, i16* %21439, i64 16
  %21443 = bitcast i16* %21442 to <16 x i16>*
  %21444 = load <16 x i16>, <16 x i16>* %21443, align 2, !tbaa !399
  %21445 = add <16 x i16> %21420, %21413
  %21446 = add <16 x i16> %21445, %21427
  %21447 = add <16 x i16> %21446, %21434
  %21448 = add <16 x i16> %21447, %21441
  %21449 = add <16 x i16> %21423, %21416
  %21450 = add <16 x i16> %21449, %21430
  %21451 = add <16 x i16> %21450, %21437
  %21452 = add <16 x i16> %21451, %21444
  %21453 = shufflevector <16 x i16> %21448, <16 x i16> %21452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21454 = udiv <32 x i16> %21453, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21455 = shufflevector <32 x i16> %21454, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21456 = add nsw i64 %21213, %.pre-phi3591
  %21457 = getelementptr inbounds i16, i16* %263, i64 %21456
  %21458 = bitcast i16* %21457 to <16 x i16>*
  store <16 x i16> %21455, <16 x i16>* %21458, align 2, !tbaa !401
  %21459 = shufflevector <32 x i16> %21454, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21460 = getelementptr inbounds i16, i16* %21457, i64 16
  %21461 = bitcast i16* %21460 to <16 x i16>*
  store <16 x i16> %21459, <16 x i16>* %21461, align 2, !tbaa !401
  %indvars.iv.next3401 = add nuw nsw i64 %indvars.iv3400, 1
  %.not2611 = icmp eq i64 %indvars.iv.next3401, %530
  br i1 %.not2611, label %"end for blur_y.s0.x.x.rebased1574", label %"for blur_y.s0.x.x.rebased1573"

"for blur_y.s0.x.x.rebased1589":                  ; preds = %"for blur_y.s0.x.x.rebased1589.preheader", %"consume blur_x1600"
  %blur_y.s0.x.x.rebased1591 = phi i32 [ %21570, %"consume blur_x1600" ], [ 0, %"for blur_y.s0.x.x.rebased1589.preheader" ]
  %21462 = add nsw i32 %blur_y.s0.x.x.rebased1591, %t1626814
  %a3350 = shl nsw i32 %21462, 5
  %21463 = icmp sgt i32 %t1647, %a3350
  %blur_y.s0.x.v0.base.s1592 = select i1 %21463, i32 %a3350, i32 %t1647
  %21464 = icmp slt i32 %21462, 1
  %21465 = icmp sgt i32 %198, %a3350
  %21466 = or i1 %21464, %21465
  br i1 %21466, label %"produce blur_x1597", label %"consume blur_x1600"

"end for blur_y.s0.x.x.rebased1590":              ; preds = %"consume blur_x1600", %"end for blur_y.s0.x.x.rebased1574"
  br i1 %229, label %"produce blur_x1604", label %after_bb1601

"produce blur_x1597":                             ; preds = %"for blur_y.s0.x.x.rebased1589"
  %21467 = icmp slt i32 %blur_y.s0.x.v0.base.s1592, %198
  %blur_x.s0.x.v1.base.s1598 = select i1 %21467, i32 %blur_y.s0.x.v0.base.s1592, i32 %198
  %t9251599 = add nsw i32 %415, %blur_x.s0.x.v1.base.s1598
  %21468 = sext i32 %t9251599 to i64
  %21469 = getelementptr inbounds i16, i16* %read_input822, i64 %21468
  %21470 = getelementptr inbounds i16, i16* %21469, i64 1
  %21471 = bitcast i16* %21470 to <16 x i16>*
  %21472 = load <16 x i16>, <16 x i16>* %21471, align 2, !tbaa !396
  %21473 = getelementptr inbounds i16, i16* %21469, i64 17
  %21474 = bitcast i16* %21473 to <16 x i16>*
  %21475 = load <16 x i16>, <16 x i16>* %21474, align 2, !tbaa !396
  %21476 = bitcast i16* %21469 to <16 x i16>*
  %21477 = load <16 x i16>, <16 x i16>* %21476, align 2, !tbaa !396
  %21478 = getelementptr inbounds i16, i16* %21469, i64 16
  %21479 = bitcast i16* %21478 to <16 x i16>*
  %21480 = load <16 x i16>, <16 x i16>* %21479, align 2, !tbaa !396
  %21481 = getelementptr inbounds i16, i16* %21469, i64 2
  %21482 = bitcast i16* %21481 to <16 x i16>*
  %21483 = load <16 x i16>, <16 x i16>* %21482, align 2, !tbaa !396
  %21484 = getelementptr inbounds i16, i16* %21469, i64 18
  %21485 = bitcast i16* %21484 to <16 x i16>*
  %21486 = load <16 x i16>, <16 x i16>* %21485, align 2, !tbaa !396
  %21487 = getelementptr inbounds i16, i16* %21469, i64 4
  %21488 = bitcast i16* %21487 to <16 x i16>*
  %21489 = load <16 x i16>, <16 x i16>* %21488, align 2, !tbaa !396
  %21490 = getelementptr inbounds i16, i16* %21469, i64 20
  %21491 = bitcast i16* %21490 to <16 x i16>*
  %21492 = load <16 x i16>, <16 x i16>* %21491, align 2, !tbaa !396
  %21493 = getelementptr inbounds i16, i16* %21469, i64 3
  %21494 = bitcast i16* %21493 to <16 x i16>*
  %21495 = load <16 x i16>, <16 x i16>* %21494, align 2, !tbaa !396
  %21496 = getelementptr inbounds i16, i16* %21469, i64 19
  %21497 = bitcast i16* %21496 to <16 x i16>*
  %21498 = load <16 x i16>, <16 x i16>* %21497, align 2, !tbaa !396
  %21499 = add <16 x i16> %21477, %21472
  %21500 = add <16 x i16> %21499, %21483
  %21501 = add <16 x i16> %21500, %21489
  %21502 = add <16 x i16> %21501, %21495
  %21503 = add <16 x i16> %21480, %21475
  %21504 = add <16 x i16> %21503, %21486
  %21505 = add <16 x i16> %21504, %21492
  %21506 = add <16 x i16> %21505, %21498
  %21507 = shufflevector <16 x i16> %21502, <16 x i16> %21506, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21508 = udiv <32 x i16> %21507, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21509 = shufflevector <32 x i16> %21508, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21510 = sext i32 %blur_x.s0.x.v1.base.s1598 to i64
  %21511 = add nsw i64 %21510, %21341
  %21512 = getelementptr inbounds i16, i16* %blur_x879, i64 %21511
  %21513 = bitcast i16* %21512 to <16 x i16>*
  store <16 x i16> %21509, <16 x i16>* %21513, align 2, !tbaa !399
  %21514 = shufflevector <32 x i16> %21508, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21515 = getelementptr inbounds i16, i16* %21512, i64 16
  %21516 = bitcast i16* %21515 to <16 x i16>*
  store <16 x i16> %21514, <16 x i16>* %21516, align 2, !tbaa !399
  br label %"consume blur_x1600"

"consume blur_x1600":                             ; preds = %"for blur_y.s0.x.x.rebased1589", %"produce blur_x1597"
  %21517 = sext i32 %blur_y.s0.x.v0.base.s1592 to i64
  %21518 = add nsw i64 %21344, %21517
  %21519 = getelementptr inbounds i16, i16* %blur_x879, i64 %21518
  %21520 = bitcast i16* %21519 to <16 x i16>*
  %21521 = load <16 x i16>, <16 x i16>* %21520, align 2, !tbaa !399
  %21522 = getelementptr inbounds i16, i16* %21519, i64 16
  %21523 = bitcast i16* %21522 to <16 x i16>*
  %21524 = load <16 x i16>, <16 x i16>* %21523, align 2, !tbaa !399
  %21525 = add nsw i64 %21347, %21517
  %21526 = getelementptr inbounds i16, i16* %blur_x879, i64 %21525
  %21527 = bitcast i16* %21526 to <16 x i16>*
  %21528 = load <16 x i16>, <16 x i16>* %21527, align 2, !tbaa !399
  %21529 = getelementptr inbounds i16, i16* %21526, i64 16
  %21530 = bitcast i16* %21529 to <16 x i16>*
  %21531 = load <16 x i16>, <16 x i16>* %21530, align 2, !tbaa !399
  %21532 = add nsw i64 %21350, %21517
  %21533 = getelementptr inbounds i16, i16* %blur_x879, i64 %21532
  %21534 = bitcast i16* %21533 to <16 x i16>*
  %21535 = load <16 x i16>, <16 x i16>* %21534, align 2, !tbaa !399
  %21536 = getelementptr inbounds i16, i16* %21533, i64 16
  %21537 = bitcast i16* %21536 to <16 x i16>*
  %21538 = load <16 x i16>, <16 x i16>* %21537, align 2, !tbaa !399
  %21539 = add nsw i64 %21353, %21517
  %21540 = getelementptr inbounds i16, i16* %blur_x879, i64 %21539
  %21541 = bitcast i16* %21540 to <16 x i16>*
  %21542 = load <16 x i16>, <16 x i16>* %21541, align 2, !tbaa !399
  %21543 = getelementptr inbounds i16, i16* %21540, i64 16
  %21544 = bitcast i16* %21543 to <16 x i16>*
  %21545 = load <16 x i16>, <16 x i16>* %21544, align 2, !tbaa !399
  %21546 = add nsw i64 %21356, %21517
  %21547 = getelementptr inbounds i16, i16* %blur_x879, i64 %21546
  %21548 = bitcast i16* %21547 to <16 x i16>*
  %21549 = load <16 x i16>, <16 x i16>* %21548, align 2, !tbaa !399
  %21550 = getelementptr inbounds i16, i16* %21547, i64 16
  %21551 = bitcast i16* %21550 to <16 x i16>*
  %21552 = load <16 x i16>, <16 x i16>* %21551, align 2, !tbaa !399
  %21553 = add <16 x i16> %21528, %21521
  %21554 = add <16 x i16> %21553, %21535
  %21555 = add <16 x i16> %21554, %21542
  %21556 = add <16 x i16> %21555, %21549
  %21557 = add <16 x i16> %21531, %21524
  %21558 = add <16 x i16> %21557, %21538
  %21559 = add <16 x i16> %21558, %21545
  %21560 = add <16 x i16> %21559, %21552
  %21561 = shufflevector <16 x i16> %21556, <16 x i16> %21560, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21562 = udiv <32 x i16> %21561, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21563 = shufflevector <32 x i16> %21562, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21564 = add nsw i64 %21360, %21517
  %21565 = getelementptr inbounds i16, i16* %263, i64 %21564
  %21566 = bitcast i16* %21565 to <16 x i16>*
  store <16 x i16> %21563, <16 x i16>* %21566, align 2, !tbaa !401
  %21567 = shufflevector <32 x i16> %21562, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21568 = getelementptr inbounds i16, i16* %21565, i64 16
  %21569 = bitcast i16* %21568 to <16 x i16>*
  store <16 x i16> %21567, <16 x i16>* %21569, align 2, !tbaa !401
  %21570 = add nuw nsw i32 %blur_y.s0.x.x.rebased1591, 1
  %.not2610 = icmp eq i32 %21570, %t1683898
  br i1 %.not2610, label %"end for blur_y.s0.x.x.rebased1590", label %"for blur_y.s0.x.x.rebased1589"

after_bb1601:                                     ; preds = %"end for blur_y.s0.x.x.rebased1590", %"produce blur_x1604"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1616.preheader", label %"end for blur_y.s0.x.x.rebased1617", !prof !386

"for blur_y.s0.x.x.rebased1616.preheader":        ; preds = %after_bb1601
  %21571 = sext i32 %t1694944 to i64
  %21572 = zext i32 %.pre-phi3569 to i64
  %21573 = mul nsw i64 %21572, %337
  %21574 = sub nsw i64 %21573, %298
  %21575 = zext i32 %.pre-phi3563 to i64
  %21576 = mul nsw i64 %21575, %337
  %21577 = sub nsw i64 %21576, %298
  %21578 = zext i32 %.pre-phi3535 to i64
  %21579 = mul nsw i64 %21578, %337
  %21580 = sub nsw i64 %21579, %298
  %21581 = zext i32 %.pre-phi3543 to i64
  %21582 = mul nsw i64 %21581, %337
  %21583 = sub nsw i64 %21582, %298
  %21584 = zext i32 %.pre-phi3539 to i64
  %21585 = mul nsw i64 %21584, %337
  %21586 = sub nsw i64 %21585, %298
  %21587 = sext i32 %a379 to i64
  %21588 = add nsw i64 %21587, 14
  %21589 = mul nsw i64 %21588, %334
  %21590 = add nsw i64 %21589, %338
  br label %"for blur_y.s0.x.x.rebased1616"

"produce blur_x1604":                             ; preds = %"end for blur_y.s0.x.x.rebased1590"
  %21591 = getelementptr inbounds i16, i16* %read_input822, i64 %419
  %21592 = getelementptr inbounds i16, i16* %21591, i64 -31
  %21593 = bitcast i16* %21592 to <16 x i16>*
  %21594 = load <16 x i16>, <16 x i16>* %21593, align 2, !tbaa !396
  %21595 = getelementptr inbounds i16, i16* %21591, i64 -15
  %21596 = bitcast i16* %21595 to <16 x i16>*
  %21597 = load <16 x i16>, <16 x i16>* %21596, align 2, !tbaa !396
  %21598 = getelementptr inbounds i16, i16* %21591, i64 -32
  %21599 = bitcast i16* %21598 to <16 x i16>*
  %21600 = load <16 x i16>, <16 x i16>* %21599, align 2, !tbaa !396
  %21601 = getelementptr inbounds i16, i16* %21591, i64 -16
  %21602 = bitcast i16* %21601 to <16 x i16>*
  %21603 = load <16 x i16>, <16 x i16>* %21602, align 2, !tbaa !396
  %21604 = getelementptr inbounds i16, i16* %21591, i64 -30
  %21605 = bitcast i16* %21604 to <16 x i16>*
  %21606 = load <16 x i16>, <16 x i16>* %21605, align 2, !tbaa !396
  %21607 = getelementptr inbounds i16, i16* %21591, i64 -14
  %21608 = bitcast i16* %21607 to <16 x i16>*
  %21609 = load <16 x i16>, <16 x i16>* %21608, align 2, !tbaa !396
  %21610 = getelementptr inbounds i16, i16* %21591, i64 -28
  %21611 = bitcast i16* %21610 to <16 x i16>*
  %21612 = load <16 x i16>, <16 x i16>* %21611, align 2, !tbaa !396
  %21613 = getelementptr inbounds i16, i16* %21591, i64 -12
  %21614 = bitcast i16* %21613 to <16 x i16>*
  %21615 = load <16 x i16>, <16 x i16>* %21614, align 2, !tbaa !396
  %21616 = getelementptr inbounds i16, i16* %21591, i64 -29
  %21617 = bitcast i16* %21616 to <16 x i16>*
  %21618 = load <16 x i16>, <16 x i16>* %21617, align 2, !tbaa !396
  %21619 = getelementptr inbounds i16, i16* %21591, i64 -13
  %21620 = bitcast i16* %21619 to <16 x i16>*
  %21621 = load <16 x i16>, <16 x i16>* %21620, align 2, !tbaa !396
  %21622 = add <16 x i16> %21600, %21594
  %21623 = add <16 x i16> %21622, %21606
  %21624 = add <16 x i16> %21623, %21612
  %21625 = add <16 x i16> %21624, %21618
  %21626 = add <16 x i16> %21603, %21597
  %21627 = add <16 x i16> %21626, %21609
  %21628 = add <16 x i16> %21627, %21615
  %21629 = add <16 x i16> %21628, %21621
  %21630 = shufflevector <16 x i16> %21625, <16 x i16> %21629, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21631 = udiv <32 x i16> %21630, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21632 = shufflevector <32 x i16> %21631, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21633 = zext i32 %.pre-phi3543 to i64
  %21634 = mul nsw i64 %299, %21633
  %21635 = add nsw i64 %301, %21634
  %21636 = getelementptr inbounds i16, i16* %blur_x879, i64 %21635
  %21637 = getelementptr inbounds i16, i16* %21636, i64 -32
  %21638 = bitcast i16* %21637 to <16 x i16>*
  store <16 x i16> %21632, <16 x i16>* %21638, align 2, !tbaa !399
  %21639 = shufflevector <32 x i16> %21631, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21640 = getelementptr inbounds i16, i16* %21636, i64 -16
  %21641 = bitcast i16* %21640 to <16 x i16>*
  store <16 x i16> %21639, <16 x i16>* %21641, align 2, !tbaa !399
  %21642 = zext i32 %.pre-phi3569 to i64
  %21643 = mul nsw i64 %21642, %333
  %21644 = add nsw i64 %21643, %296
  %21645 = getelementptr inbounds i16, i16* %blur_x879, i64 %21644
  %21646 = getelementptr inbounds i16, i16* %21645, i64 -32
  %21647 = bitcast i16* %21646 to <16 x i16>*
  %21648 = load <16 x i16>, <16 x i16>* %21647, align 2, !tbaa !399
  %21649 = getelementptr inbounds i16, i16* %21645, i64 -16
  %21650 = bitcast i16* %21649 to <16 x i16>*
  %21651 = load <16 x i16>, <16 x i16>* %21650, align 2, !tbaa !399
  %21652 = zext i32 %.pre-phi3563 to i64
  %21653 = mul nsw i64 %21652, %333
  %21654 = add nsw i64 %21653, %296
  %21655 = getelementptr inbounds i16, i16* %blur_x879, i64 %21654
  %21656 = getelementptr inbounds i16, i16* %21655, i64 -32
  %21657 = bitcast i16* %21656 to <16 x i16>*
  %21658 = load <16 x i16>, <16 x i16>* %21657, align 2, !tbaa !399
  %21659 = getelementptr inbounds i16, i16* %21655, i64 -16
  %21660 = bitcast i16* %21659 to <16 x i16>*
  %21661 = load <16 x i16>, <16 x i16>* %21660, align 2, !tbaa !399
  %21662 = zext i32 %.pre-phi3535 to i64
  %21663 = mul nsw i64 %21662, %333
  %21664 = add nsw i64 %21663, %296
  %21665 = getelementptr inbounds i16, i16* %blur_x879, i64 %21664
  %21666 = getelementptr inbounds i16, i16* %21665, i64 -32
  %21667 = bitcast i16* %21666 to <16 x i16>*
  %21668 = load <16 x i16>, <16 x i16>* %21667, align 2, !tbaa !399
  %21669 = getelementptr inbounds i16, i16* %21665, i64 -16
  %21670 = bitcast i16* %21669 to <16 x i16>*
  %21671 = load <16 x i16>, <16 x i16>* %21670, align 2, !tbaa !399
  %21672 = mul nsw i64 %21633, %333
  %21673 = add nsw i64 %21672, %296
  %21674 = getelementptr inbounds i16, i16* %blur_x879, i64 %21673
  %21675 = getelementptr inbounds i16, i16* %21674, i64 -32
  %21676 = bitcast i16* %21675 to <16 x i16>*
  %21677 = load <16 x i16>, <16 x i16>* %21676, align 2, !tbaa !399
  %21678 = getelementptr inbounds i16, i16* %21674, i64 -16
  %21679 = bitcast i16* %21678 to <16 x i16>*
  %21680 = load <16 x i16>, <16 x i16>* %21679, align 2, !tbaa !399
  %21681 = zext i32 %.pre-phi3539 to i64
  %21682 = mul nsw i64 %21681, %333
  %21683 = add nsw i64 %21682, %296
  %21684 = getelementptr inbounds i16, i16* %blur_x879, i64 %21683
  %21685 = getelementptr inbounds i16, i16* %21684, i64 -32
  %21686 = bitcast i16* %21685 to <16 x i16>*
  %21687 = load <16 x i16>, <16 x i16>* %21686, align 2, !tbaa !399
  %21688 = getelementptr inbounds i16, i16* %21684, i64 -16
  %21689 = bitcast i16* %21688 to <16 x i16>*
  %21690 = load <16 x i16>, <16 x i16>* %21689, align 2, !tbaa !399
  %21691 = add <16 x i16> %21658, %21648
  %21692 = add <16 x i16> %21691, %21668
  %21693 = add <16 x i16> %21692, %21677
  %21694 = add <16 x i16> %21693, %21687
  %21695 = add <16 x i16> %21661, %21651
  %21696 = add <16 x i16> %21695, %21671
  %21697 = add <16 x i16> %21696, %21680
  %21698 = add <16 x i16> %21697, %21690
  %21699 = shufflevector <16 x i16> %21694, <16 x i16> %21698, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21700 = udiv <32 x i16> %21699, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21701 = shufflevector <32 x i16> %21700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21702 = sext i32 %a379 to i64
  %21703 = add nsw i64 %21702, 14
  %21704 = mul nsw i64 %21703, %334
  %21705 = add nsw i64 %336, %21704
  %21706 = getelementptr inbounds i16, i16* %263, i64 %21705
  %21707 = getelementptr inbounds i16, i16* %21706, i64 -32
  %21708 = bitcast i16* %21707 to <16 x i16>*
  store <16 x i16> %21701, <16 x i16>* %21708, align 2, !tbaa !401
  %21709 = shufflevector <32 x i16> %21700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21710 = getelementptr inbounds i16, i16* %21706, i64 -16
  %21711 = bitcast i16* %21710 to <16 x i16>*
  store <16 x i16> %21709, <16 x i16>* %21711, align 2, !tbaa !401
  br label %after_bb1601

"for blur_y.s0.x.x.rebased1616":                  ; preds = %"for blur_y.s0.x.x.rebased1616.preheader", %"consume blur_x1624"
  %indvars.iv3402 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1616.preheader" ], [ %indvars.iv.next3403, %"consume blur_x1624" ]
  %21712 = add nsw i64 %indvars.iv3402, %303
  %21713 = icmp slt i64 %21712, 1
  %21714 = trunc i64 %21712 to i32
  %21715 = shl nsw i32 %21714, 5
  %21716 = icmp sgt i32 %198, %21715
  %21717 = or i1 %21713, %21716
  br i1 %21717, label %"produce blur_x1622", label %"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge"

"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1616"
  %.pre3592 = shl nsw i64 %21712, 5
  br label %"consume blur_x1624"

"end for blur_y.s0.x.x.rebased1617":              ; preds = %"consume blur_x1624", %after_bb1601
  br i1 %304, label %"for blur_y.s0.x.x.rebased1632.preheader", label %"end for blur_y.s0.x.x.rebased1633", !prof !386

"for blur_y.s0.x.x.rebased1632.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1617"
  %21718 = sext i32 %t1694944 to i64
  %21719 = zext i32 %.pre-phi3569 to i64
  %21720 = mul nsw i64 %21719, %337
  %21721 = sub nsw i64 %21720, %298
  %21722 = zext i32 %.pre-phi3563 to i64
  %21723 = mul nsw i64 %21722, %337
  %21724 = sub nsw i64 %21723, %298
  %21725 = zext i32 %.pre-phi3535 to i64
  %21726 = mul nsw i64 %21725, %337
  %21727 = sub nsw i64 %21726, %298
  %21728 = zext i32 %.pre-phi3543 to i64
  %21729 = mul nsw i64 %21728, %337
  %21730 = sub nsw i64 %21729, %298
  %21731 = zext i32 %.pre-phi3539 to i64
  %21732 = mul nsw i64 %21731, %337
  %21733 = sub nsw i64 %21732, %298
  %21734 = sext i32 %a379 to i64
  %21735 = add nsw i64 %21734, 14
  %21736 = mul nsw i64 %21735, %334
  %21737 = add nsw i64 %21736, %338
  br label %"for blur_y.s0.x.x.rebased1632"

"produce blur_x1622":                             ; preds = %"for blur_y.s0.x.x.rebased1616"
  %t9361623 = add nsw i32 %421, %21715
  %21738 = sext i32 %t9361623 to i64
  %21739 = getelementptr inbounds i16, i16* %read_input822, i64 %21738
  %21740 = getelementptr inbounds i16, i16* %21739, i64 1
  %21741 = bitcast i16* %21740 to <16 x i16>*
  %21742 = load <16 x i16>, <16 x i16>* %21741, align 2, !tbaa !396
  %21743 = getelementptr inbounds i16, i16* %21739, i64 17
  %21744 = bitcast i16* %21743 to <16 x i16>*
  %21745 = load <16 x i16>, <16 x i16>* %21744, align 2, !tbaa !396
  %21746 = bitcast i16* %21739 to <16 x i16>*
  %21747 = load <16 x i16>, <16 x i16>* %21746, align 2, !tbaa !396
  %21748 = getelementptr inbounds i16, i16* %21739, i64 16
  %21749 = bitcast i16* %21748 to <16 x i16>*
  %21750 = load <16 x i16>, <16 x i16>* %21749, align 2, !tbaa !396
  %21751 = getelementptr inbounds i16, i16* %21739, i64 2
  %21752 = bitcast i16* %21751 to <16 x i16>*
  %21753 = load <16 x i16>, <16 x i16>* %21752, align 2, !tbaa !396
  %21754 = getelementptr inbounds i16, i16* %21739, i64 18
  %21755 = bitcast i16* %21754 to <16 x i16>*
  %21756 = load <16 x i16>, <16 x i16>* %21755, align 2, !tbaa !396
  %21757 = getelementptr inbounds i16, i16* %21739, i64 4
  %21758 = bitcast i16* %21757 to <16 x i16>*
  %21759 = load <16 x i16>, <16 x i16>* %21758, align 2, !tbaa !396
  %21760 = getelementptr inbounds i16, i16* %21739, i64 20
  %21761 = bitcast i16* %21760 to <16 x i16>*
  %21762 = load <16 x i16>, <16 x i16>* %21761, align 2, !tbaa !396
  %21763 = getelementptr inbounds i16, i16* %21739, i64 3
  %21764 = bitcast i16* %21763 to <16 x i16>*
  %21765 = load <16 x i16>, <16 x i16>* %21764, align 2, !tbaa !396
  %21766 = getelementptr inbounds i16, i16* %21739, i64 19
  %21767 = bitcast i16* %21766 to <16 x i16>*
  %21768 = load <16 x i16>, <16 x i16>* %21767, align 2, !tbaa !396
  %21769 = add <16 x i16> %21747, %21742
  %21770 = add <16 x i16> %21769, %21753
  %21771 = add <16 x i16> %21770, %21759
  %21772 = add <16 x i16> %21771, %21765
  %21773 = add <16 x i16> %21750, %21745
  %21774 = add <16 x i16> %21773, %21756
  %21775 = add <16 x i16> %21774, %21762
  %21776 = add <16 x i16> %21775, %21768
  %21777 = shufflevector <16 x i16> %21772, <16 x i16> %21776, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21778 = udiv <32 x i16> %21777, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21779 = shufflevector <32 x i16> %21778, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21780 = shl nsw i64 %21712, 5
  %21781 = add nsw i64 %21780, %21571
  %21782 = getelementptr inbounds i16, i16* %blur_x879, i64 %21781
  %21783 = bitcast i16* %21782 to <16 x i16>*
  store <16 x i16> %21779, <16 x i16>* %21783, align 2, !tbaa !399
  %21784 = shufflevector <32 x i16> %21778, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21785 = getelementptr inbounds i16, i16* %21782, i64 16
  %21786 = bitcast i16* %21785 to <16 x i16>*
  store <16 x i16> %21784, <16 x i16>* %21786, align 2, !tbaa !399
  br label %"consume blur_x1624"

"consume blur_x1624":                             ; preds = %"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge", %"produce blur_x1622"
  %.pre-phi3593 = phi i64 [ %.pre3592, %"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge" ], [ %21780, %"produce blur_x1622" ]
  %21787 = add nsw i64 %21574, %.pre-phi3593
  %21788 = getelementptr inbounds i16, i16* %blur_x879, i64 %21787
  %21789 = bitcast i16* %21788 to <16 x i16>*
  %21790 = load <16 x i16>, <16 x i16>* %21789, align 2, !tbaa !399
  %21791 = getelementptr inbounds i16, i16* %21788, i64 16
  %21792 = bitcast i16* %21791 to <16 x i16>*
  %21793 = load <16 x i16>, <16 x i16>* %21792, align 2, !tbaa !399
  %21794 = add nsw i64 %21577, %.pre-phi3593
  %21795 = getelementptr inbounds i16, i16* %blur_x879, i64 %21794
  %21796 = bitcast i16* %21795 to <16 x i16>*
  %21797 = load <16 x i16>, <16 x i16>* %21796, align 2, !tbaa !399
  %21798 = getelementptr inbounds i16, i16* %21795, i64 16
  %21799 = bitcast i16* %21798 to <16 x i16>*
  %21800 = load <16 x i16>, <16 x i16>* %21799, align 2, !tbaa !399
  %21801 = add nsw i64 %21580, %.pre-phi3593
  %21802 = getelementptr inbounds i16, i16* %blur_x879, i64 %21801
  %21803 = bitcast i16* %21802 to <16 x i16>*
  %21804 = load <16 x i16>, <16 x i16>* %21803, align 2, !tbaa !399
  %21805 = getelementptr inbounds i16, i16* %21802, i64 16
  %21806 = bitcast i16* %21805 to <16 x i16>*
  %21807 = load <16 x i16>, <16 x i16>* %21806, align 2, !tbaa !399
  %21808 = add nsw i64 %21583, %.pre-phi3593
  %21809 = getelementptr inbounds i16, i16* %blur_x879, i64 %21808
  %21810 = bitcast i16* %21809 to <16 x i16>*
  %21811 = load <16 x i16>, <16 x i16>* %21810, align 2, !tbaa !399
  %21812 = getelementptr inbounds i16, i16* %21809, i64 16
  %21813 = bitcast i16* %21812 to <16 x i16>*
  %21814 = load <16 x i16>, <16 x i16>* %21813, align 2, !tbaa !399
  %21815 = add nsw i64 %21586, %.pre-phi3593
  %21816 = getelementptr inbounds i16, i16* %blur_x879, i64 %21815
  %21817 = bitcast i16* %21816 to <16 x i16>*
  %21818 = load <16 x i16>, <16 x i16>* %21817, align 2, !tbaa !399
  %21819 = getelementptr inbounds i16, i16* %21816, i64 16
  %21820 = bitcast i16* %21819 to <16 x i16>*
  %21821 = load <16 x i16>, <16 x i16>* %21820, align 2, !tbaa !399
  %21822 = add <16 x i16> %21797, %21790
  %21823 = add <16 x i16> %21822, %21804
  %21824 = add <16 x i16> %21823, %21811
  %21825 = add <16 x i16> %21824, %21818
  %21826 = add <16 x i16> %21800, %21793
  %21827 = add <16 x i16> %21826, %21807
  %21828 = add <16 x i16> %21827, %21814
  %21829 = add <16 x i16> %21828, %21821
  %21830 = shufflevector <16 x i16> %21825, <16 x i16> %21829, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21831 = udiv <32 x i16> %21830, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21832 = shufflevector <32 x i16> %21831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21833 = add nsw i64 %21590, %.pre-phi3593
  %21834 = getelementptr inbounds i16, i16* %263, i64 %21833
  %21835 = bitcast i16* %21834 to <16 x i16>*
  store <16 x i16> %21832, <16 x i16>* %21835, align 2, !tbaa !401
  %21836 = shufflevector <32 x i16> %21831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21837 = getelementptr inbounds i16, i16* %21834, i64 16
  %21838 = bitcast i16* %21837 to <16 x i16>*
  store <16 x i16> %21836, <16 x i16>* %21838, align 2, !tbaa !401
  %indvars.iv.next3403 = add nuw nsw i64 %indvars.iv3402, 1
  %.not2607 = icmp eq i64 %indvars.iv.next3403, %530
  br i1 %.not2607, label %"end for blur_y.s0.x.x.rebased1617", label %"for blur_y.s0.x.x.rebased1616"

"for blur_y.s0.x.x.rebased1632":                  ; preds = %"for blur_y.s0.x.x.rebased1632.preheader", %"consume blur_x1643"
  %blur_y.s0.x.x.rebased1634 = phi i32 [ %21947, %"consume blur_x1643" ], [ 0, %"for blur_y.s0.x.x.rebased1632.preheader" ]
  %21839 = add nsw i32 %blur_y.s0.x.x.rebased1634, %t1626814
  %a3507 = shl nsw i32 %21839, 5
  %21840 = icmp sgt i32 %t1647, %a3507
  %blur_y.s0.x.v0.base.s1635 = select i1 %21840, i32 %a3507, i32 %t1647
  %21841 = icmp slt i32 %21839, 1
  %21842 = icmp sgt i32 %198, %a3507
  %21843 = or i1 %21841, %21842
  br i1 %21843, label %"produce blur_x1640", label %"consume blur_x1643"

"end for blur_y.s0.x.x.rebased1633":              ; preds = %"consume blur_x1643", %"end for blur_y.s0.x.x.rebased1617"
  br i1 %229, label %"produce blur_x1647", label %after_bb1644

"produce blur_x1640":                             ; preds = %"for blur_y.s0.x.x.rebased1632"
  %21844 = icmp slt i32 %blur_y.s0.x.v0.base.s1635, %198
  %blur_x.s0.x.v1.base.s1641 = select i1 %21844, i32 %blur_y.s0.x.v0.base.s1635, i32 %198
  %t9411642 = add nsw i32 %421, %blur_x.s0.x.v1.base.s1641
  %21845 = sext i32 %t9411642 to i64
  %21846 = getelementptr inbounds i16, i16* %read_input822, i64 %21845
  %21847 = getelementptr inbounds i16, i16* %21846, i64 1
  %21848 = bitcast i16* %21847 to <16 x i16>*
  %21849 = load <16 x i16>, <16 x i16>* %21848, align 2, !tbaa !396
  %21850 = getelementptr inbounds i16, i16* %21846, i64 17
  %21851 = bitcast i16* %21850 to <16 x i16>*
  %21852 = load <16 x i16>, <16 x i16>* %21851, align 2, !tbaa !396
  %21853 = bitcast i16* %21846 to <16 x i16>*
  %21854 = load <16 x i16>, <16 x i16>* %21853, align 2, !tbaa !396
  %21855 = getelementptr inbounds i16, i16* %21846, i64 16
  %21856 = bitcast i16* %21855 to <16 x i16>*
  %21857 = load <16 x i16>, <16 x i16>* %21856, align 2, !tbaa !396
  %21858 = getelementptr inbounds i16, i16* %21846, i64 2
  %21859 = bitcast i16* %21858 to <16 x i16>*
  %21860 = load <16 x i16>, <16 x i16>* %21859, align 2, !tbaa !396
  %21861 = getelementptr inbounds i16, i16* %21846, i64 18
  %21862 = bitcast i16* %21861 to <16 x i16>*
  %21863 = load <16 x i16>, <16 x i16>* %21862, align 2, !tbaa !396
  %21864 = getelementptr inbounds i16, i16* %21846, i64 4
  %21865 = bitcast i16* %21864 to <16 x i16>*
  %21866 = load <16 x i16>, <16 x i16>* %21865, align 2, !tbaa !396
  %21867 = getelementptr inbounds i16, i16* %21846, i64 20
  %21868 = bitcast i16* %21867 to <16 x i16>*
  %21869 = load <16 x i16>, <16 x i16>* %21868, align 2, !tbaa !396
  %21870 = getelementptr inbounds i16, i16* %21846, i64 3
  %21871 = bitcast i16* %21870 to <16 x i16>*
  %21872 = load <16 x i16>, <16 x i16>* %21871, align 2, !tbaa !396
  %21873 = getelementptr inbounds i16, i16* %21846, i64 19
  %21874 = bitcast i16* %21873 to <16 x i16>*
  %21875 = load <16 x i16>, <16 x i16>* %21874, align 2, !tbaa !396
  %21876 = add <16 x i16> %21854, %21849
  %21877 = add <16 x i16> %21876, %21860
  %21878 = add <16 x i16> %21877, %21866
  %21879 = add <16 x i16> %21878, %21872
  %21880 = add <16 x i16> %21857, %21852
  %21881 = add <16 x i16> %21880, %21863
  %21882 = add <16 x i16> %21881, %21869
  %21883 = add <16 x i16> %21882, %21875
  %21884 = shufflevector <16 x i16> %21879, <16 x i16> %21883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21885 = udiv <32 x i16> %21884, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21886 = shufflevector <32 x i16> %21885, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21887 = sext i32 %blur_x.s0.x.v1.base.s1641 to i64
  %21888 = add nsw i64 %21887, %21718
  %21889 = getelementptr inbounds i16, i16* %blur_x879, i64 %21888
  %21890 = bitcast i16* %21889 to <16 x i16>*
  store <16 x i16> %21886, <16 x i16>* %21890, align 2, !tbaa !399
  %21891 = shufflevector <32 x i16> %21885, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21892 = getelementptr inbounds i16, i16* %21889, i64 16
  %21893 = bitcast i16* %21892 to <16 x i16>*
  store <16 x i16> %21891, <16 x i16>* %21893, align 2, !tbaa !399
  br label %"consume blur_x1643"

"consume blur_x1643":                             ; preds = %"for blur_y.s0.x.x.rebased1632", %"produce blur_x1640"
  %21894 = sext i32 %blur_y.s0.x.v0.base.s1635 to i64
  %21895 = add nsw i64 %21721, %21894
  %21896 = getelementptr inbounds i16, i16* %blur_x879, i64 %21895
  %21897 = bitcast i16* %21896 to <16 x i16>*
  %21898 = load <16 x i16>, <16 x i16>* %21897, align 2, !tbaa !399
  %21899 = getelementptr inbounds i16, i16* %21896, i64 16
  %21900 = bitcast i16* %21899 to <16 x i16>*
  %21901 = load <16 x i16>, <16 x i16>* %21900, align 2, !tbaa !399
  %21902 = add nsw i64 %21724, %21894
  %21903 = getelementptr inbounds i16, i16* %blur_x879, i64 %21902
  %21904 = bitcast i16* %21903 to <16 x i16>*
  %21905 = load <16 x i16>, <16 x i16>* %21904, align 2, !tbaa !399
  %21906 = getelementptr inbounds i16, i16* %21903, i64 16
  %21907 = bitcast i16* %21906 to <16 x i16>*
  %21908 = load <16 x i16>, <16 x i16>* %21907, align 2, !tbaa !399
  %21909 = add nsw i64 %21727, %21894
  %21910 = getelementptr inbounds i16, i16* %blur_x879, i64 %21909
  %21911 = bitcast i16* %21910 to <16 x i16>*
  %21912 = load <16 x i16>, <16 x i16>* %21911, align 2, !tbaa !399
  %21913 = getelementptr inbounds i16, i16* %21910, i64 16
  %21914 = bitcast i16* %21913 to <16 x i16>*
  %21915 = load <16 x i16>, <16 x i16>* %21914, align 2, !tbaa !399
  %21916 = add nsw i64 %21730, %21894
  %21917 = getelementptr inbounds i16, i16* %blur_x879, i64 %21916
  %21918 = bitcast i16* %21917 to <16 x i16>*
  %21919 = load <16 x i16>, <16 x i16>* %21918, align 2, !tbaa !399
  %21920 = getelementptr inbounds i16, i16* %21917, i64 16
  %21921 = bitcast i16* %21920 to <16 x i16>*
  %21922 = load <16 x i16>, <16 x i16>* %21921, align 2, !tbaa !399
  %21923 = add nsw i64 %21733, %21894
  %21924 = getelementptr inbounds i16, i16* %blur_x879, i64 %21923
  %21925 = bitcast i16* %21924 to <16 x i16>*
  %21926 = load <16 x i16>, <16 x i16>* %21925, align 2, !tbaa !399
  %21927 = getelementptr inbounds i16, i16* %21924, i64 16
  %21928 = bitcast i16* %21927 to <16 x i16>*
  %21929 = load <16 x i16>, <16 x i16>* %21928, align 2, !tbaa !399
  %21930 = add <16 x i16> %21905, %21898
  %21931 = add <16 x i16> %21930, %21912
  %21932 = add <16 x i16> %21931, %21919
  %21933 = add <16 x i16> %21932, %21926
  %21934 = add <16 x i16> %21908, %21901
  %21935 = add <16 x i16> %21934, %21915
  %21936 = add <16 x i16> %21935, %21922
  %21937 = add <16 x i16> %21936, %21929
  %21938 = shufflevector <16 x i16> %21933, <16 x i16> %21937, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21939 = udiv <32 x i16> %21938, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %21940 = shufflevector <32 x i16> %21939, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21941 = add nsw i64 %21737, %21894
  %21942 = getelementptr inbounds i16, i16* %263, i64 %21941
  %21943 = bitcast i16* %21942 to <16 x i16>*
  store <16 x i16> %21940, <16 x i16>* %21943, align 2, !tbaa !401
  %21944 = shufflevector <32 x i16> %21939, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21945 = getelementptr inbounds i16, i16* %21942, i64 16
  %21946 = bitcast i16* %21945 to <16 x i16>*
  store <16 x i16> %21944, <16 x i16>* %21946, align 2, !tbaa !401
  %21947 = add nuw nsw i32 %blur_y.s0.x.x.rebased1634, 1
  %.not2606 = icmp eq i32 %21947, %t1683898
  br i1 %.not2606, label %"end for blur_y.s0.x.x.rebased1633", label %"for blur_y.s0.x.x.rebased1632"

after_bb1644:                                     ; preds = %"end for blur_y.s0.x.x.rebased1633", %"produce blur_x1647"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1659.preheader", label %"end for blur_y.s0.x.x.rebased1660", !prof !386

"for blur_y.s0.x.x.rebased1659.preheader":        ; preds = %after_bb1644
  %21948 = sext i32 %t1700974 to i64
  %21949 = zext i32 %.pre-phi3535 to i64
  %21950 = mul nsw i64 %21949, %337
  %21951 = sub nsw i64 %21950, %298
  %21952 = zext i32 %.pre-phi3569 to i64
  %21953 = mul nsw i64 %21952, %337
  %21954 = sub nsw i64 %21953, %298
  %21955 = zext i32 %.pre-phi3539 to i64
  %21956 = mul nsw i64 %21955, %337
  %21957 = sub nsw i64 %21956, %298
  %21958 = zext i32 %.pre-phi3547 to i64
  %21959 = mul nsw i64 %21958, %337
  %21960 = sub nsw i64 %21959, %298
  %21961 = zext i32 %.pre-phi3543 to i64
  %21962 = mul nsw i64 %21961, %337
  %21963 = sub nsw i64 %21962, %298
  %21964 = sext i32 %a379 to i64
  %21965 = add nsw i64 %21964, 15
  %21966 = mul nsw i64 %21965, %334
  %21967 = add nsw i64 %21966, %338
  br label %"for blur_y.s0.x.x.rebased1659"

"produce blur_x1647":                             ; preds = %"end for blur_y.s0.x.x.rebased1633"
  %21968 = getelementptr inbounds i16, i16* %read_input822, i64 %425
  %21969 = getelementptr inbounds i16, i16* %21968, i64 -31
  %21970 = bitcast i16* %21969 to <16 x i16>*
  %21971 = load <16 x i16>, <16 x i16>* %21970, align 2, !tbaa !396
  %21972 = getelementptr inbounds i16, i16* %21968, i64 -15
  %21973 = bitcast i16* %21972 to <16 x i16>*
  %21974 = load <16 x i16>, <16 x i16>* %21973, align 2, !tbaa !396
  %21975 = getelementptr inbounds i16, i16* %21968, i64 -32
  %21976 = bitcast i16* %21975 to <16 x i16>*
  %21977 = load <16 x i16>, <16 x i16>* %21976, align 2, !tbaa !396
  %21978 = getelementptr inbounds i16, i16* %21968, i64 -16
  %21979 = bitcast i16* %21978 to <16 x i16>*
  %21980 = load <16 x i16>, <16 x i16>* %21979, align 2, !tbaa !396
  %21981 = getelementptr inbounds i16, i16* %21968, i64 -30
  %21982 = bitcast i16* %21981 to <16 x i16>*
  %21983 = load <16 x i16>, <16 x i16>* %21982, align 2, !tbaa !396
  %21984 = getelementptr inbounds i16, i16* %21968, i64 -14
  %21985 = bitcast i16* %21984 to <16 x i16>*
  %21986 = load <16 x i16>, <16 x i16>* %21985, align 2, !tbaa !396
  %21987 = getelementptr inbounds i16, i16* %21968, i64 -28
  %21988 = bitcast i16* %21987 to <16 x i16>*
  %21989 = load <16 x i16>, <16 x i16>* %21988, align 2, !tbaa !396
  %21990 = getelementptr inbounds i16, i16* %21968, i64 -12
  %21991 = bitcast i16* %21990 to <16 x i16>*
  %21992 = load <16 x i16>, <16 x i16>* %21991, align 2, !tbaa !396
  %21993 = getelementptr inbounds i16, i16* %21968, i64 -29
  %21994 = bitcast i16* %21993 to <16 x i16>*
  %21995 = load <16 x i16>, <16 x i16>* %21994, align 2, !tbaa !396
  %21996 = getelementptr inbounds i16, i16* %21968, i64 -13
  %21997 = bitcast i16* %21996 to <16 x i16>*
  %21998 = load <16 x i16>, <16 x i16>* %21997, align 2, !tbaa !396
  %21999 = add <16 x i16> %21977, %21971
  %22000 = add <16 x i16> %21999, %21983
  %22001 = add <16 x i16> %22000, %21989
  %22002 = add <16 x i16> %22001, %21995
  %22003 = add <16 x i16> %21980, %21974
  %22004 = add <16 x i16> %22003, %21986
  %22005 = add <16 x i16> %22004, %21992
  %22006 = add <16 x i16> %22005, %21998
  %22007 = shufflevector <16 x i16> %22002, <16 x i16> %22006, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22008 = udiv <32 x i16> %22007, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22009 = shufflevector <32 x i16> %22008, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22010 = zext i32 %.pre-phi3547 to i64
  %22011 = mul nsw i64 %299, %22010
  %22012 = add nsw i64 %301, %22011
  %22013 = getelementptr inbounds i16, i16* %blur_x879, i64 %22012
  %22014 = getelementptr inbounds i16, i16* %22013, i64 -32
  %22015 = bitcast i16* %22014 to <16 x i16>*
  store <16 x i16> %22009, <16 x i16>* %22015, align 2, !tbaa !399
  %22016 = shufflevector <32 x i16> %22008, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22017 = getelementptr inbounds i16, i16* %22013, i64 -16
  %22018 = bitcast i16* %22017 to <16 x i16>*
  store <16 x i16> %22016, <16 x i16>* %22018, align 2, !tbaa !399
  %22019 = zext i32 %.pre-phi3535 to i64
  %22020 = mul nsw i64 %22019, %333
  %22021 = add nsw i64 %22020, %296
  %22022 = getelementptr inbounds i16, i16* %blur_x879, i64 %22021
  %22023 = getelementptr inbounds i16, i16* %22022, i64 -32
  %22024 = bitcast i16* %22023 to <16 x i16>*
  %22025 = load <16 x i16>, <16 x i16>* %22024, align 2, !tbaa !399
  %22026 = getelementptr inbounds i16, i16* %22022, i64 -16
  %22027 = bitcast i16* %22026 to <16 x i16>*
  %22028 = load <16 x i16>, <16 x i16>* %22027, align 2, !tbaa !399
  %22029 = zext i32 %.pre-phi3569 to i64
  %22030 = mul nsw i64 %22029, %333
  %22031 = add nsw i64 %22030, %296
  %22032 = getelementptr inbounds i16, i16* %blur_x879, i64 %22031
  %22033 = getelementptr inbounds i16, i16* %22032, i64 -32
  %22034 = bitcast i16* %22033 to <16 x i16>*
  %22035 = load <16 x i16>, <16 x i16>* %22034, align 2, !tbaa !399
  %22036 = getelementptr inbounds i16, i16* %22032, i64 -16
  %22037 = bitcast i16* %22036 to <16 x i16>*
  %22038 = load <16 x i16>, <16 x i16>* %22037, align 2, !tbaa !399
  %22039 = zext i32 %.pre-phi3539 to i64
  %22040 = mul nsw i64 %22039, %333
  %22041 = add nsw i64 %22040, %296
  %22042 = getelementptr inbounds i16, i16* %blur_x879, i64 %22041
  %22043 = getelementptr inbounds i16, i16* %22042, i64 -32
  %22044 = bitcast i16* %22043 to <16 x i16>*
  %22045 = load <16 x i16>, <16 x i16>* %22044, align 2, !tbaa !399
  %22046 = getelementptr inbounds i16, i16* %22042, i64 -16
  %22047 = bitcast i16* %22046 to <16 x i16>*
  %22048 = load <16 x i16>, <16 x i16>* %22047, align 2, !tbaa !399
  %22049 = mul nsw i64 %22010, %333
  %22050 = add nsw i64 %22049, %296
  %22051 = getelementptr inbounds i16, i16* %blur_x879, i64 %22050
  %22052 = getelementptr inbounds i16, i16* %22051, i64 -32
  %22053 = bitcast i16* %22052 to <16 x i16>*
  %22054 = load <16 x i16>, <16 x i16>* %22053, align 2, !tbaa !399
  %22055 = getelementptr inbounds i16, i16* %22051, i64 -16
  %22056 = bitcast i16* %22055 to <16 x i16>*
  %22057 = load <16 x i16>, <16 x i16>* %22056, align 2, !tbaa !399
  %22058 = zext i32 %.pre-phi3543 to i64
  %22059 = mul nsw i64 %22058, %333
  %22060 = add nsw i64 %22059, %296
  %22061 = getelementptr inbounds i16, i16* %blur_x879, i64 %22060
  %22062 = getelementptr inbounds i16, i16* %22061, i64 -32
  %22063 = bitcast i16* %22062 to <16 x i16>*
  %22064 = load <16 x i16>, <16 x i16>* %22063, align 2, !tbaa !399
  %22065 = getelementptr inbounds i16, i16* %22061, i64 -16
  %22066 = bitcast i16* %22065 to <16 x i16>*
  %22067 = load <16 x i16>, <16 x i16>* %22066, align 2, !tbaa !399
  %22068 = add <16 x i16> %22035, %22025
  %22069 = add <16 x i16> %22068, %22045
  %22070 = add <16 x i16> %22069, %22054
  %22071 = add <16 x i16> %22070, %22064
  %22072 = add <16 x i16> %22038, %22028
  %22073 = add <16 x i16> %22072, %22048
  %22074 = add <16 x i16> %22073, %22057
  %22075 = add <16 x i16> %22074, %22067
  %22076 = shufflevector <16 x i16> %22071, <16 x i16> %22075, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22077 = udiv <32 x i16> %22076, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22078 = shufflevector <32 x i16> %22077, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22079 = sext i32 %a379 to i64
  %22080 = add nsw i64 %22079, 15
  %22081 = mul nsw i64 %22080, %334
  %22082 = add nsw i64 %336, %22081
  %22083 = getelementptr inbounds i16, i16* %263, i64 %22082
  %22084 = getelementptr inbounds i16, i16* %22083, i64 -32
  %22085 = bitcast i16* %22084 to <16 x i16>*
  store <16 x i16> %22078, <16 x i16>* %22085, align 2, !tbaa !401
  %22086 = shufflevector <32 x i16> %22077, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22087 = getelementptr inbounds i16, i16* %22083, i64 -16
  %22088 = bitcast i16* %22087 to <16 x i16>*
  store <16 x i16> %22086, <16 x i16>* %22088, align 2, !tbaa !401
  br label %after_bb1644

"for blur_y.s0.x.x.rebased1659":                  ; preds = %"for blur_y.s0.x.x.rebased1659.preheader", %"consume blur_x1667"
  %indvars.iv3404 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1659.preheader" ], [ %indvars.iv.next3405, %"consume blur_x1667" ]
  %22089 = add nsw i64 %indvars.iv3404, %303
  %22090 = icmp slt i64 %22089, 1
  %22091 = trunc i64 %22089 to i32
  %22092 = shl nsw i32 %22091, 5
  %22093 = icmp sgt i32 %198, %22092
  %22094 = or i1 %22090, %22093
  br i1 %22094, label %"produce blur_x1665", label %"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge"

"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1659"
  %.pre3594 = shl nsw i64 %22089, 5
  br label %"consume blur_x1667"

"end for blur_y.s0.x.x.rebased1660":              ; preds = %"consume blur_x1667", %after_bb1644
  br i1 %304, label %"for blur_y.s0.x.x.rebased1675.preheader", label %"end for blur_y.s0.x.x.rebased1676", !prof !386

"for blur_y.s0.x.x.rebased1675.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1660"
  %22095 = sext i32 %t1700974 to i64
  %22096 = zext i32 %.pre-phi3535 to i64
  %22097 = mul nsw i64 %22096, %337
  %22098 = sub nsw i64 %22097, %298
  %22099 = zext i32 %.pre-phi3569 to i64
  %22100 = mul nsw i64 %22099, %337
  %22101 = sub nsw i64 %22100, %298
  %22102 = zext i32 %.pre-phi3539 to i64
  %22103 = mul nsw i64 %22102, %337
  %22104 = sub nsw i64 %22103, %298
  %22105 = zext i32 %.pre-phi3547 to i64
  %22106 = mul nsw i64 %22105, %337
  %22107 = sub nsw i64 %22106, %298
  %22108 = zext i32 %.pre-phi3543 to i64
  %22109 = mul nsw i64 %22108, %337
  %22110 = sub nsw i64 %22109, %298
  %22111 = sext i32 %a379 to i64
  %22112 = add nsw i64 %22111, 15
  %22113 = mul nsw i64 %22112, %334
  %22114 = add nsw i64 %22113, %338
  br label %"for blur_y.s0.x.x.rebased1675"

"produce blur_x1665":                             ; preds = %"for blur_y.s0.x.x.rebased1659"
  %t9521666 = add nsw i32 %427, %22092
  %22115 = sext i32 %t9521666 to i64
  %22116 = getelementptr inbounds i16, i16* %read_input822, i64 %22115
  %22117 = getelementptr inbounds i16, i16* %22116, i64 1
  %22118 = bitcast i16* %22117 to <16 x i16>*
  %22119 = load <16 x i16>, <16 x i16>* %22118, align 2, !tbaa !396
  %22120 = getelementptr inbounds i16, i16* %22116, i64 17
  %22121 = bitcast i16* %22120 to <16 x i16>*
  %22122 = load <16 x i16>, <16 x i16>* %22121, align 2, !tbaa !396
  %22123 = bitcast i16* %22116 to <16 x i16>*
  %22124 = load <16 x i16>, <16 x i16>* %22123, align 2, !tbaa !396
  %22125 = getelementptr inbounds i16, i16* %22116, i64 16
  %22126 = bitcast i16* %22125 to <16 x i16>*
  %22127 = load <16 x i16>, <16 x i16>* %22126, align 2, !tbaa !396
  %22128 = getelementptr inbounds i16, i16* %22116, i64 2
  %22129 = bitcast i16* %22128 to <16 x i16>*
  %22130 = load <16 x i16>, <16 x i16>* %22129, align 2, !tbaa !396
  %22131 = getelementptr inbounds i16, i16* %22116, i64 18
  %22132 = bitcast i16* %22131 to <16 x i16>*
  %22133 = load <16 x i16>, <16 x i16>* %22132, align 2, !tbaa !396
  %22134 = getelementptr inbounds i16, i16* %22116, i64 4
  %22135 = bitcast i16* %22134 to <16 x i16>*
  %22136 = load <16 x i16>, <16 x i16>* %22135, align 2, !tbaa !396
  %22137 = getelementptr inbounds i16, i16* %22116, i64 20
  %22138 = bitcast i16* %22137 to <16 x i16>*
  %22139 = load <16 x i16>, <16 x i16>* %22138, align 2, !tbaa !396
  %22140 = getelementptr inbounds i16, i16* %22116, i64 3
  %22141 = bitcast i16* %22140 to <16 x i16>*
  %22142 = load <16 x i16>, <16 x i16>* %22141, align 2, !tbaa !396
  %22143 = getelementptr inbounds i16, i16* %22116, i64 19
  %22144 = bitcast i16* %22143 to <16 x i16>*
  %22145 = load <16 x i16>, <16 x i16>* %22144, align 2, !tbaa !396
  %22146 = add <16 x i16> %22124, %22119
  %22147 = add <16 x i16> %22146, %22130
  %22148 = add <16 x i16> %22147, %22136
  %22149 = add <16 x i16> %22148, %22142
  %22150 = add <16 x i16> %22127, %22122
  %22151 = add <16 x i16> %22150, %22133
  %22152 = add <16 x i16> %22151, %22139
  %22153 = add <16 x i16> %22152, %22145
  %22154 = shufflevector <16 x i16> %22149, <16 x i16> %22153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22155 = udiv <32 x i16> %22154, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22156 = shufflevector <32 x i16> %22155, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22157 = shl nsw i64 %22089, 5
  %22158 = add nsw i64 %22157, %21948
  %22159 = getelementptr inbounds i16, i16* %blur_x879, i64 %22158
  %22160 = bitcast i16* %22159 to <16 x i16>*
  store <16 x i16> %22156, <16 x i16>* %22160, align 2, !tbaa !399
  %22161 = shufflevector <32 x i16> %22155, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22162 = getelementptr inbounds i16, i16* %22159, i64 16
  %22163 = bitcast i16* %22162 to <16 x i16>*
  store <16 x i16> %22161, <16 x i16>* %22163, align 2, !tbaa !399
  br label %"consume blur_x1667"

"consume blur_x1667":                             ; preds = %"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge", %"produce blur_x1665"
  %.pre-phi3595 = phi i64 [ %.pre3594, %"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge" ], [ %22157, %"produce blur_x1665" ]
  %22164 = add nsw i64 %21951, %.pre-phi3595
  %22165 = getelementptr inbounds i16, i16* %blur_x879, i64 %22164
  %22166 = bitcast i16* %22165 to <16 x i16>*
  %22167 = load <16 x i16>, <16 x i16>* %22166, align 2, !tbaa !399
  %22168 = getelementptr inbounds i16, i16* %22165, i64 16
  %22169 = bitcast i16* %22168 to <16 x i16>*
  %22170 = load <16 x i16>, <16 x i16>* %22169, align 2, !tbaa !399
  %22171 = add nsw i64 %21954, %.pre-phi3595
  %22172 = getelementptr inbounds i16, i16* %blur_x879, i64 %22171
  %22173 = bitcast i16* %22172 to <16 x i16>*
  %22174 = load <16 x i16>, <16 x i16>* %22173, align 2, !tbaa !399
  %22175 = getelementptr inbounds i16, i16* %22172, i64 16
  %22176 = bitcast i16* %22175 to <16 x i16>*
  %22177 = load <16 x i16>, <16 x i16>* %22176, align 2, !tbaa !399
  %22178 = add nsw i64 %21957, %.pre-phi3595
  %22179 = getelementptr inbounds i16, i16* %blur_x879, i64 %22178
  %22180 = bitcast i16* %22179 to <16 x i16>*
  %22181 = load <16 x i16>, <16 x i16>* %22180, align 2, !tbaa !399
  %22182 = getelementptr inbounds i16, i16* %22179, i64 16
  %22183 = bitcast i16* %22182 to <16 x i16>*
  %22184 = load <16 x i16>, <16 x i16>* %22183, align 2, !tbaa !399
  %22185 = add nsw i64 %21960, %.pre-phi3595
  %22186 = getelementptr inbounds i16, i16* %blur_x879, i64 %22185
  %22187 = bitcast i16* %22186 to <16 x i16>*
  %22188 = load <16 x i16>, <16 x i16>* %22187, align 2, !tbaa !399
  %22189 = getelementptr inbounds i16, i16* %22186, i64 16
  %22190 = bitcast i16* %22189 to <16 x i16>*
  %22191 = load <16 x i16>, <16 x i16>* %22190, align 2, !tbaa !399
  %22192 = add nsw i64 %21963, %.pre-phi3595
  %22193 = getelementptr inbounds i16, i16* %blur_x879, i64 %22192
  %22194 = bitcast i16* %22193 to <16 x i16>*
  %22195 = load <16 x i16>, <16 x i16>* %22194, align 2, !tbaa !399
  %22196 = getelementptr inbounds i16, i16* %22193, i64 16
  %22197 = bitcast i16* %22196 to <16 x i16>*
  %22198 = load <16 x i16>, <16 x i16>* %22197, align 2, !tbaa !399
  %22199 = add <16 x i16> %22174, %22167
  %22200 = add <16 x i16> %22199, %22181
  %22201 = add <16 x i16> %22200, %22188
  %22202 = add <16 x i16> %22201, %22195
  %22203 = add <16 x i16> %22177, %22170
  %22204 = add <16 x i16> %22203, %22184
  %22205 = add <16 x i16> %22204, %22191
  %22206 = add <16 x i16> %22205, %22198
  %22207 = shufflevector <16 x i16> %22202, <16 x i16> %22206, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22208 = udiv <32 x i16> %22207, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22209 = shufflevector <32 x i16> %22208, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22210 = add nsw i64 %21967, %.pre-phi3595
  %22211 = getelementptr inbounds i16, i16* %263, i64 %22210
  %22212 = bitcast i16* %22211 to <16 x i16>*
  store <16 x i16> %22209, <16 x i16>* %22212, align 2, !tbaa !401
  %22213 = shufflevector <32 x i16> %22208, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22214 = getelementptr inbounds i16, i16* %22211, i64 16
  %22215 = bitcast i16* %22214 to <16 x i16>*
  store <16 x i16> %22213, <16 x i16>* %22215, align 2, !tbaa !401
  %indvars.iv.next3405 = add nuw nsw i64 %indvars.iv3404, 1
  %.not2603 = icmp eq i64 %indvars.iv.next3405, %530
  br i1 %.not2603, label %"end for blur_y.s0.x.x.rebased1660", label %"for blur_y.s0.x.x.rebased1659"

"for blur_y.s0.x.x.rebased1675":                  ; preds = %"for blur_y.s0.x.x.rebased1675.preheader", %"consume blur_x1686"
  %blur_y.s0.x.x.rebased1677 = phi i32 [ %22324, %"consume blur_x1686" ], [ 0, %"for blur_y.s0.x.x.rebased1675.preheader" ]
  %22216 = add nsw i32 %blur_y.s0.x.x.rebased1677, %t1626814
  %a3664 = shl nsw i32 %22216, 5
  %22217 = icmp sgt i32 %t1647, %a3664
  %blur_y.s0.x.v0.base.s1678 = select i1 %22217, i32 %a3664, i32 %t1647
  %22218 = icmp slt i32 %22216, 1
  %22219 = icmp sgt i32 %198, %a3664
  %22220 = or i1 %22218, %22219
  br i1 %22220, label %"produce blur_x1683", label %"consume blur_x1686"

"end for blur_y.s0.x.x.rebased1676":              ; preds = %"consume blur_x1686", %"end for blur_y.s0.x.x.rebased1660"
  br i1 %229, label %"produce blur_x1690", label %after_bb1687

"produce blur_x1683":                             ; preds = %"for blur_y.s0.x.x.rebased1675"
  %22221 = icmp slt i32 %blur_y.s0.x.v0.base.s1678, %198
  %blur_x.s0.x.v1.base.s1684 = select i1 %22221, i32 %blur_y.s0.x.v0.base.s1678, i32 %198
  %t9571685 = add nsw i32 %427, %blur_x.s0.x.v1.base.s1684
  %22222 = sext i32 %t9571685 to i64
  %22223 = getelementptr inbounds i16, i16* %read_input822, i64 %22222
  %22224 = getelementptr inbounds i16, i16* %22223, i64 1
  %22225 = bitcast i16* %22224 to <16 x i16>*
  %22226 = load <16 x i16>, <16 x i16>* %22225, align 2, !tbaa !396
  %22227 = getelementptr inbounds i16, i16* %22223, i64 17
  %22228 = bitcast i16* %22227 to <16 x i16>*
  %22229 = load <16 x i16>, <16 x i16>* %22228, align 2, !tbaa !396
  %22230 = bitcast i16* %22223 to <16 x i16>*
  %22231 = load <16 x i16>, <16 x i16>* %22230, align 2, !tbaa !396
  %22232 = getelementptr inbounds i16, i16* %22223, i64 16
  %22233 = bitcast i16* %22232 to <16 x i16>*
  %22234 = load <16 x i16>, <16 x i16>* %22233, align 2, !tbaa !396
  %22235 = getelementptr inbounds i16, i16* %22223, i64 2
  %22236 = bitcast i16* %22235 to <16 x i16>*
  %22237 = load <16 x i16>, <16 x i16>* %22236, align 2, !tbaa !396
  %22238 = getelementptr inbounds i16, i16* %22223, i64 18
  %22239 = bitcast i16* %22238 to <16 x i16>*
  %22240 = load <16 x i16>, <16 x i16>* %22239, align 2, !tbaa !396
  %22241 = getelementptr inbounds i16, i16* %22223, i64 4
  %22242 = bitcast i16* %22241 to <16 x i16>*
  %22243 = load <16 x i16>, <16 x i16>* %22242, align 2, !tbaa !396
  %22244 = getelementptr inbounds i16, i16* %22223, i64 20
  %22245 = bitcast i16* %22244 to <16 x i16>*
  %22246 = load <16 x i16>, <16 x i16>* %22245, align 2, !tbaa !396
  %22247 = getelementptr inbounds i16, i16* %22223, i64 3
  %22248 = bitcast i16* %22247 to <16 x i16>*
  %22249 = load <16 x i16>, <16 x i16>* %22248, align 2, !tbaa !396
  %22250 = getelementptr inbounds i16, i16* %22223, i64 19
  %22251 = bitcast i16* %22250 to <16 x i16>*
  %22252 = load <16 x i16>, <16 x i16>* %22251, align 2, !tbaa !396
  %22253 = add <16 x i16> %22231, %22226
  %22254 = add <16 x i16> %22253, %22237
  %22255 = add <16 x i16> %22254, %22243
  %22256 = add <16 x i16> %22255, %22249
  %22257 = add <16 x i16> %22234, %22229
  %22258 = add <16 x i16> %22257, %22240
  %22259 = add <16 x i16> %22258, %22246
  %22260 = add <16 x i16> %22259, %22252
  %22261 = shufflevector <16 x i16> %22256, <16 x i16> %22260, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22262 = udiv <32 x i16> %22261, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22263 = shufflevector <32 x i16> %22262, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22264 = sext i32 %blur_x.s0.x.v1.base.s1684 to i64
  %22265 = add nsw i64 %22264, %22095
  %22266 = getelementptr inbounds i16, i16* %blur_x879, i64 %22265
  %22267 = bitcast i16* %22266 to <16 x i16>*
  store <16 x i16> %22263, <16 x i16>* %22267, align 2, !tbaa !399
  %22268 = shufflevector <32 x i16> %22262, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22269 = getelementptr inbounds i16, i16* %22266, i64 16
  %22270 = bitcast i16* %22269 to <16 x i16>*
  store <16 x i16> %22268, <16 x i16>* %22270, align 2, !tbaa !399
  br label %"consume blur_x1686"

"consume blur_x1686":                             ; preds = %"for blur_y.s0.x.x.rebased1675", %"produce blur_x1683"
  %22271 = sext i32 %blur_y.s0.x.v0.base.s1678 to i64
  %22272 = add nsw i64 %22098, %22271
  %22273 = getelementptr inbounds i16, i16* %blur_x879, i64 %22272
  %22274 = bitcast i16* %22273 to <16 x i16>*
  %22275 = load <16 x i16>, <16 x i16>* %22274, align 2, !tbaa !399
  %22276 = getelementptr inbounds i16, i16* %22273, i64 16
  %22277 = bitcast i16* %22276 to <16 x i16>*
  %22278 = load <16 x i16>, <16 x i16>* %22277, align 2, !tbaa !399
  %22279 = add nsw i64 %22101, %22271
  %22280 = getelementptr inbounds i16, i16* %blur_x879, i64 %22279
  %22281 = bitcast i16* %22280 to <16 x i16>*
  %22282 = load <16 x i16>, <16 x i16>* %22281, align 2, !tbaa !399
  %22283 = getelementptr inbounds i16, i16* %22280, i64 16
  %22284 = bitcast i16* %22283 to <16 x i16>*
  %22285 = load <16 x i16>, <16 x i16>* %22284, align 2, !tbaa !399
  %22286 = add nsw i64 %22104, %22271
  %22287 = getelementptr inbounds i16, i16* %blur_x879, i64 %22286
  %22288 = bitcast i16* %22287 to <16 x i16>*
  %22289 = load <16 x i16>, <16 x i16>* %22288, align 2, !tbaa !399
  %22290 = getelementptr inbounds i16, i16* %22287, i64 16
  %22291 = bitcast i16* %22290 to <16 x i16>*
  %22292 = load <16 x i16>, <16 x i16>* %22291, align 2, !tbaa !399
  %22293 = add nsw i64 %22107, %22271
  %22294 = getelementptr inbounds i16, i16* %blur_x879, i64 %22293
  %22295 = bitcast i16* %22294 to <16 x i16>*
  %22296 = load <16 x i16>, <16 x i16>* %22295, align 2, !tbaa !399
  %22297 = getelementptr inbounds i16, i16* %22294, i64 16
  %22298 = bitcast i16* %22297 to <16 x i16>*
  %22299 = load <16 x i16>, <16 x i16>* %22298, align 2, !tbaa !399
  %22300 = add nsw i64 %22110, %22271
  %22301 = getelementptr inbounds i16, i16* %blur_x879, i64 %22300
  %22302 = bitcast i16* %22301 to <16 x i16>*
  %22303 = load <16 x i16>, <16 x i16>* %22302, align 2, !tbaa !399
  %22304 = getelementptr inbounds i16, i16* %22301, i64 16
  %22305 = bitcast i16* %22304 to <16 x i16>*
  %22306 = load <16 x i16>, <16 x i16>* %22305, align 2, !tbaa !399
  %22307 = add <16 x i16> %22282, %22275
  %22308 = add <16 x i16> %22307, %22289
  %22309 = add <16 x i16> %22308, %22296
  %22310 = add <16 x i16> %22309, %22303
  %22311 = add <16 x i16> %22285, %22278
  %22312 = add <16 x i16> %22311, %22292
  %22313 = add <16 x i16> %22312, %22299
  %22314 = add <16 x i16> %22313, %22306
  %22315 = shufflevector <16 x i16> %22310, <16 x i16> %22314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22316 = udiv <32 x i16> %22315, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22317 = shufflevector <32 x i16> %22316, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22318 = add nsw i64 %22114, %22271
  %22319 = getelementptr inbounds i16, i16* %263, i64 %22318
  %22320 = bitcast i16* %22319 to <16 x i16>*
  store <16 x i16> %22317, <16 x i16>* %22320, align 2, !tbaa !401
  %22321 = shufflevector <32 x i16> %22316, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22322 = getelementptr inbounds i16, i16* %22319, i64 16
  %22323 = bitcast i16* %22322 to <16 x i16>*
  store <16 x i16> %22321, <16 x i16>* %22323, align 2, !tbaa !401
  %22324 = add nuw nsw i32 %blur_y.s0.x.x.rebased1677, 1
  %.not2602 = icmp eq i32 %22324, %t1683898
  br i1 %.not2602, label %"end for blur_y.s0.x.x.rebased1676", label %"for blur_y.s0.x.x.rebased1675"

after_bb1687:                                     ; preds = %"end for blur_y.s0.x.x.rebased1676", %"produce blur_x1690"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1702.preheader", label %"end for blur_y.s0.x.x.rebased1703", !prof !386

"for blur_y.s0.x.x.rebased1702.preheader":        ; preds = %after_bb1687
  %22325 = sext i32 %t17061010 to i64
  %22326 = zext i32 %.pre-phi3539 to i64
  %22327 = mul nsw i64 %22326, %337
  %22328 = sub nsw i64 %22327, %298
  %22329 = zext i32 %.pre-phi3535 to i64
  %22330 = mul nsw i64 %22329, %337
  %22331 = sub nsw i64 %22330, %298
  %22332 = zext i32 %.pre-phi3543 to i64
  %22333 = mul nsw i64 %22332, %337
  %22334 = sub nsw i64 %22333, %298
  %22335 = zext i32 %.pre-phi3551 to i64
  %22336 = mul nsw i64 %22335, %337
  %22337 = sub nsw i64 %22336, %298
  %22338 = zext i32 %.pre-phi3547 to i64
  %22339 = mul nsw i64 %22338, %337
  %22340 = sub nsw i64 %22339, %298
  %22341 = sext i32 %a379 to i64
  %22342 = add nsw i64 %22341, 16
  %22343 = mul nsw i64 %22342, %334
  %22344 = add nsw i64 %22343, %338
  br label %"for blur_y.s0.x.x.rebased1702"

"produce blur_x1690":                             ; preds = %"end for blur_y.s0.x.x.rebased1676"
  %22345 = getelementptr inbounds i16, i16* %read_input822, i64 %431
  %22346 = getelementptr inbounds i16, i16* %22345, i64 -31
  %22347 = bitcast i16* %22346 to <16 x i16>*
  %22348 = load <16 x i16>, <16 x i16>* %22347, align 2, !tbaa !396
  %22349 = getelementptr inbounds i16, i16* %22345, i64 -15
  %22350 = bitcast i16* %22349 to <16 x i16>*
  %22351 = load <16 x i16>, <16 x i16>* %22350, align 2, !tbaa !396
  %22352 = getelementptr inbounds i16, i16* %22345, i64 -32
  %22353 = bitcast i16* %22352 to <16 x i16>*
  %22354 = load <16 x i16>, <16 x i16>* %22353, align 2, !tbaa !396
  %22355 = getelementptr inbounds i16, i16* %22345, i64 -16
  %22356 = bitcast i16* %22355 to <16 x i16>*
  %22357 = load <16 x i16>, <16 x i16>* %22356, align 2, !tbaa !396
  %22358 = getelementptr inbounds i16, i16* %22345, i64 -30
  %22359 = bitcast i16* %22358 to <16 x i16>*
  %22360 = load <16 x i16>, <16 x i16>* %22359, align 2, !tbaa !396
  %22361 = getelementptr inbounds i16, i16* %22345, i64 -14
  %22362 = bitcast i16* %22361 to <16 x i16>*
  %22363 = load <16 x i16>, <16 x i16>* %22362, align 2, !tbaa !396
  %22364 = getelementptr inbounds i16, i16* %22345, i64 -28
  %22365 = bitcast i16* %22364 to <16 x i16>*
  %22366 = load <16 x i16>, <16 x i16>* %22365, align 2, !tbaa !396
  %22367 = getelementptr inbounds i16, i16* %22345, i64 -12
  %22368 = bitcast i16* %22367 to <16 x i16>*
  %22369 = load <16 x i16>, <16 x i16>* %22368, align 2, !tbaa !396
  %22370 = getelementptr inbounds i16, i16* %22345, i64 -29
  %22371 = bitcast i16* %22370 to <16 x i16>*
  %22372 = load <16 x i16>, <16 x i16>* %22371, align 2, !tbaa !396
  %22373 = getelementptr inbounds i16, i16* %22345, i64 -13
  %22374 = bitcast i16* %22373 to <16 x i16>*
  %22375 = load <16 x i16>, <16 x i16>* %22374, align 2, !tbaa !396
  %22376 = add <16 x i16> %22354, %22348
  %22377 = add <16 x i16> %22376, %22360
  %22378 = add <16 x i16> %22377, %22366
  %22379 = add <16 x i16> %22378, %22372
  %22380 = add <16 x i16> %22357, %22351
  %22381 = add <16 x i16> %22380, %22363
  %22382 = add <16 x i16> %22381, %22369
  %22383 = add <16 x i16> %22382, %22375
  %22384 = shufflevector <16 x i16> %22379, <16 x i16> %22383, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22385 = udiv <32 x i16> %22384, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22386 = shufflevector <32 x i16> %22385, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22387 = zext i32 %.pre-phi3551 to i64
  %22388 = mul nsw i64 %299, %22387
  %22389 = add nsw i64 %301, %22388
  %22390 = getelementptr inbounds i16, i16* %blur_x879, i64 %22389
  %22391 = getelementptr inbounds i16, i16* %22390, i64 -32
  %22392 = bitcast i16* %22391 to <16 x i16>*
  store <16 x i16> %22386, <16 x i16>* %22392, align 2, !tbaa !399
  %22393 = shufflevector <32 x i16> %22385, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22394 = getelementptr inbounds i16, i16* %22390, i64 -16
  %22395 = bitcast i16* %22394 to <16 x i16>*
  store <16 x i16> %22393, <16 x i16>* %22395, align 2, !tbaa !399
  %22396 = zext i32 %.pre-phi3539 to i64
  %22397 = mul nsw i64 %22396, %333
  %22398 = add nsw i64 %22397, %296
  %22399 = getelementptr inbounds i16, i16* %blur_x879, i64 %22398
  %22400 = getelementptr inbounds i16, i16* %22399, i64 -32
  %22401 = bitcast i16* %22400 to <16 x i16>*
  %22402 = load <16 x i16>, <16 x i16>* %22401, align 2, !tbaa !399
  %22403 = getelementptr inbounds i16, i16* %22399, i64 -16
  %22404 = bitcast i16* %22403 to <16 x i16>*
  %22405 = load <16 x i16>, <16 x i16>* %22404, align 2, !tbaa !399
  %22406 = zext i32 %.pre-phi3535 to i64
  %22407 = mul nsw i64 %22406, %333
  %22408 = add nsw i64 %22407, %296
  %22409 = getelementptr inbounds i16, i16* %blur_x879, i64 %22408
  %22410 = getelementptr inbounds i16, i16* %22409, i64 -32
  %22411 = bitcast i16* %22410 to <16 x i16>*
  %22412 = load <16 x i16>, <16 x i16>* %22411, align 2, !tbaa !399
  %22413 = getelementptr inbounds i16, i16* %22409, i64 -16
  %22414 = bitcast i16* %22413 to <16 x i16>*
  %22415 = load <16 x i16>, <16 x i16>* %22414, align 2, !tbaa !399
  %22416 = zext i32 %.pre-phi3543 to i64
  %22417 = mul nsw i64 %22416, %333
  %22418 = add nsw i64 %22417, %296
  %22419 = getelementptr inbounds i16, i16* %blur_x879, i64 %22418
  %22420 = getelementptr inbounds i16, i16* %22419, i64 -32
  %22421 = bitcast i16* %22420 to <16 x i16>*
  %22422 = load <16 x i16>, <16 x i16>* %22421, align 2, !tbaa !399
  %22423 = getelementptr inbounds i16, i16* %22419, i64 -16
  %22424 = bitcast i16* %22423 to <16 x i16>*
  %22425 = load <16 x i16>, <16 x i16>* %22424, align 2, !tbaa !399
  %22426 = mul nsw i64 %22387, %333
  %22427 = add nsw i64 %22426, %296
  %22428 = getelementptr inbounds i16, i16* %blur_x879, i64 %22427
  %22429 = getelementptr inbounds i16, i16* %22428, i64 -32
  %22430 = bitcast i16* %22429 to <16 x i16>*
  %22431 = load <16 x i16>, <16 x i16>* %22430, align 2, !tbaa !399
  %22432 = getelementptr inbounds i16, i16* %22428, i64 -16
  %22433 = bitcast i16* %22432 to <16 x i16>*
  %22434 = load <16 x i16>, <16 x i16>* %22433, align 2, !tbaa !399
  %22435 = zext i32 %.pre-phi3547 to i64
  %22436 = mul nsw i64 %22435, %333
  %22437 = add nsw i64 %22436, %296
  %22438 = getelementptr inbounds i16, i16* %blur_x879, i64 %22437
  %22439 = getelementptr inbounds i16, i16* %22438, i64 -32
  %22440 = bitcast i16* %22439 to <16 x i16>*
  %22441 = load <16 x i16>, <16 x i16>* %22440, align 2, !tbaa !399
  %22442 = getelementptr inbounds i16, i16* %22438, i64 -16
  %22443 = bitcast i16* %22442 to <16 x i16>*
  %22444 = load <16 x i16>, <16 x i16>* %22443, align 2, !tbaa !399
  %22445 = add <16 x i16> %22412, %22402
  %22446 = add <16 x i16> %22445, %22422
  %22447 = add <16 x i16> %22446, %22431
  %22448 = add <16 x i16> %22447, %22441
  %22449 = add <16 x i16> %22415, %22405
  %22450 = add <16 x i16> %22449, %22425
  %22451 = add <16 x i16> %22450, %22434
  %22452 = add <16 x i16> %22451, %22444
  %22453 = shufflevector <16 x i16> %22448, <16 x i16> %22452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22454 = udiv <32 x i16> %22453, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22455 = shufflevector <32 x i16> %22454, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22456 = sext i32 %a379 to i64
  %22457 = add nsw i64 %22456, 16
  %22458 = mul nsw i64 %22457, %334
  %22459 = add nsw i64 %336, %22458
  %22460 = getelementptr inbounds i16, i16* %263, i64 %22459
  %22461 = getelementptr inbounds i16, i16* %22460, i64 -32
  %22462 = bitcast i16* %22461 to <16 x i16>*
  store <16 x i16> %22455, <16 x i16>* %22462, align 2, !tbaa !401
  %22463 = shufflevector <32 x i16> %22454, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22464 = getelementptr inbounds i16, i16* %22460, i64 -16
  %22465 = bitcast i16* %22464 to <16 x i16>*
  store <16 x i16> %22463, <16 x i16>* %22465, align 2, !tbaa !401
  br label %after_bb1687

"for blur_y.s0.x.x.rebased1702":                  ; preds = %"for blur_y.s0.x.x.rebased1702.preheader", %"consume blur_x1710"
  %indvars.iv3406 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1702.preheader" ], [ %indvars.iv.next3407, %"consume blur_x1710" ]
  %22466 = add nsw i64 %indvars.iv3406, %303
  %22467 = icmp slt i64 %22466, 1
  %22468 = trunc i64 %22466 to i32
  %22469 = shl nsw i32 %22468, 5
  %22470 = icmp sgt i32 %198, %22469
  %22471 = or i1 %22467, %22470
  br i1 %22471, label %"produce blur_x1708", label %"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge"

"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1702"
  %.pre3596 = shl nsw i64 %22466, 5
  br label %"consume blur_x1710"

"end for blur_y.s0.x.x.rebased1703":              ; preds = %"consume blur_x1710", %after_bb1687
  br i1 %304, label %"for blur_y.s0.x.x.rebased1718.preheader", label %"end for blur_y.s0.x.x.rebased1719", !prof !386

"for blur_y.s0.x.x.rebased1718.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1703"
  %22472 = sext i32 %t17061010 to i64
  %22473 = zext i32 %.pre-phi3539 to i64
  %22474 = mul nsw i64 %22473, %337
  %22475 = sub nsw i64 %22474, %298
  %22476 = zext i32 %.pre-phi3535 to i64
  %22477 = mul nsw i64 %22476, %337
  %22478 = sub nsw i64 %22477, %298
  %22479 = zext i32 %.pre-phi3543 to i64
  %22480 = mul nsw i64 %22479, %337
  %22481 = sub nsw i64 %22480, %298
  %22482 = zext i32 %.pre-phi3551 to i64
  %22483 = mul nsw i64 %22482, %337
  %22484 = sub nsw i64 %22483, %298
  %22485 = zext i32 %.pre-phi3547 to i64
  %22486 = mul nsw i64 %22485, %337
  %22487 = sub nsw i64 %22486, %298
  %22488 = sext i32 %a379 to i64
  %22489 = add nsw i64 %22488, 16
  %22490 = mul nsw i64 %22489, %334
  %22491 = add nsw i64 %22490, %338
  br label %"for blur_y.s0.x.x.rebased1718"

"produce blur_x1708":                             ; preds = %"for blur_y.s0.x.x.rebased1702"
  %t9681709 = add nsw i32 %433, %22469
  %22492 = sext i32 %t9681709 to i64
  %22493 = getelementptr inbounds i16, i16* %read_input822, i64 %22492
  %22494 = getelementptr inbounds i16, i16* %22493, i64 1
  %22495 = bitcast i16* %22494 to <16 x i16>*
  %22496 = load <16 x i16>, <16 x i16>* %22495, align 2, !tbaa !396
  %22497 = getelementptr inbounds i16, i16* %22493, i64 17
  %22498 = bitcast i16* %22497 to <16 x i16>*
  %22499 = load <16 x i16>, <16 x i16>* %22498, align 2, !tbaa !396
  %22500 = bitcast i16* %22493 to <16 x i16>*
  %22501 = load <16 x i16>, <16 x i16>* %22500, align 2, !tbaa !396
  %22502 = getelementptr inbounds i16, i16* %22493, i64 16
  %22503 = bitcast i16* %22502 to <16 x i16>*
  %22504 = load <16 x i16>, <16 x i16>* %22503, align 2, !tbaa !396
  %22505 = getelementptr inbounds i16, i16* %22493, i64 2
  %22506 = bitcast i16* %22505 to <16 x i16>*
  %22507 = load <16 x i16>, <16 x i16>* %22506, align 2, !tbaa !396
  %22508 = getelementptr inbounds i16, i16* %22493, i64 18
  %22509 = bitcast i16* %22508 to <16 x i16>*
  %22510 = load <16 x i16>, <16 x i16>* %22509, align 2, !tbaa !396
  %22511 = getelementptr inbounds i16, i16* %22493, i64 4
  %22512 = bitcast i16* %22511 to <16 x i16>*
  %22513 = load <16 x i16>, <16 x i16>* %22512, align 2, !tbaa !396
  %22514 = getelementptr inbounds i16, i16* %22493, i64 20
  %22515 = bitcast i16* %22514 to <16 x i16>*
  %22516 = load <16 x i16>, <16 x i16>* %22515, align 2, !tbaa !396
  %22517 = getelementptr inbounds i16, i16* %22493, i64 3
  %22518 = bitcast i16* %22517 to <16 x i16>*
  %22519 = load <16 x i16>, <16 x i16>* %22518, align 2, !tbaa !396
  %22520 = getelementptr inbounds i16, i16* %22493, i64 19
  %22521 = bitcast i16* %22520 to <16 x i16>*
  %22522 = load <16 x i16>, <16 x i16>* %22521, align 2, !tbaa !396
  %22523 = add <16 x i16> %22501, %22496
  %22524 = add <16 x i16> %22523, %22507
  %22525 = add <16 x i16> %22524, %22513
  %22526 = add <16 x i16> %22525, %22519
  %22527 = add <16 x i16> %22504, %22499
  %22528 = add <16 x i16> %22527, %22510
  %22529 = add <16 x i16> %22528, %22516
  %22530 = add <16 x i16> %22529, %22522
  %22531 = shufflevector <16 x i16> %22526, <16 x i16> %22530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22532 = udiv <32 x i16> %22531, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22533 = shufflevector <32 x i16> %22532, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22534 = shl nsw i64 %22466, 5
  %22535 = add nsw i64 %22534, %22325
  %22536 = getelementptr inbounds i16, i16* %blur_x879, i64 %22535
  %22537 = bitcast i16* %22536 to <16 x i16>*
  store <16 x i16> %22533, <16 x i16>* %22537, align 2, !tbaa !399
  %22538 = shufflevector <32 x i16> %22532, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22539 = getelementptr inbounds i16, i16* %22536, i64 16
  %22540 = bitcast i16* %22539 to <16 x i16>*
  store <16 x i16> %22538, <16 x i16>* %22540, align 2, !tbaa !399
  br label %"consume blur_x1710"

"consume blur_x1710":                             ; preds = %"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge", %"produce blur_x1708"
  %.pre-phi3597 = phi i64 [ %.pre3596, %"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge" ], [ %22534, %"produce blur_x1708" ]
  %22541 = add nsw i64 %22328, %.pre-phi3597
  %22542 = getelementptr inbounds i16, i16* %blur_x879, i64 %22541
  %22543 = bitcast i16* %22542 to <16 x i16>*
  %22544 = load <16 x i16>, <16 x i16>* %22543, align 2, !tbaa !399
  %22545 = getelementptr inbounds i16, i16* %22542, i64 16
  %22546 = bitcast i16* %22545 to <16 x i16>*
  %22547 = load <16 x i16>, <16 x i16>* %22546, align 2, !tbaa !399
  %22548 = add nsw i64 %22331, %.pre-phi3597
  %22549 = getelementptr inbounds i16, i16* %blur_x879, i64 %22548
  %22550 = bitcast i16* %22549 to <16 x i16>*
  %22551 = load <16 x i16>, <16 x i16>* %22550, align 2, !tbaa !399
  %22552 = getelementptr inbounds i16, i16* %22549, i64 16
  %22553 = bitcast i16* %22552 to <16 x i16>*
  %22554 = load <16 x i16>, <16 x i16>* %22553, align 2, !tbaa !399
  %22555 = add nsw i64 %22334, %.pre-phi3597
  %22556 = getelementptr inbounds i16, i16* %blur_x879, i64 %22555
  %22557 = bitcast i16* %22556 to <16 x i16>*
  %22558 = load <16 x i16>, <16 x i16>* %22557, align 2, !tbaa !399
  %22559 = getelementptr inbounds i16, i16* %22556, i64 16
  %22560 = bitcast i16* %22559 to <16 x i16>*
  %22561 = load <16 x i16>, <16 x i16>* %22560, align 2, !tbaa !399
  %22562 = add nsw i64 %22337, %.pre-phi3597
  %22563 = getelementptr inbounds i16, i16* %blur_x879, i64 %22562
  %22564 = bitcast i16* %22563 to <16 x i16>*
  %22565 = load <16 x i16>, <16 x i16>* %22564, align 2, !tbaa !399
  %22566 = getelementptr inbounds i16, i16* %22563, i64 16
  %22567 = bitcast i16* %22566 to <16 x i16>*
  %22568 = load <16 x i16>, <16 x i16>* %22567, align 2, !tbaa !399
  %22569 = add nsw i64 %22340, %.pre-phi3597
  %22570 = getelementptr inbounds i16, i16* %blur_x879, i64 %22569
  %22571 = bitcast i16* %22570 to <16 x i16>*
  %22572 = load <16 x i16>, <16 x i16>* %22571, align 2, !tbaa !399
  %22573 = getelementptr inbounds i16, i16* %22570, i64 16
  %22574 = bitcast i16* %22573 to <16 x i16>*
  %22575 = load <16 x i16>, <16 x i16>* %22574, align 2, !tbaa !399
  %22576 = add <16 x i16> %22551, %22544
  %22577 = add <16 x i16> %22576, %22558
  %22578 = add <16 x i16> %22577, %22565
  %22579 = add <16 x i16> %22578, %22572
  %22580 = add <16 x i16> %22554, %22547
  %22581 = add <16 x i16> %22580, %22561
  %22582 = add <16 x i16> %22581, %22568
  %22583 = add <16 x i16> %22582, %22575
  %22584 = shufflevector <16 x i16> %22579, <16 x i16> %22583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22585 = udiv <32 x i16> %22584, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22586 = shufflevector <32 x i16> %22585, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22587 = add nsw i64 %22344, %.pre-phi3597
  %22588 = getelementptr inbounds i16, i16* %263, i64 %22587
  %22589 = bitcast i16* %22588 to <16 x i16>*
  store <16 x i16> %22586, <16 x i16>* %22589, align 2, !tbaa !401
  %22590 = shufflevector <32 x i16> %22585, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22591 = getelementptr inbounds i16, i16* %22588, i64 16
  %22592 = bitcast i16* %22591 to <16 x i16>*
  store <16 x i16> %22590, <16 x i16>* %22592, align 2, !tbaa !401
  %indvars.iv.next3407 = add nuw nsw i64 %indvars.iv3406, 1
  %.not2599 = icmp eq i64 %indvars.iv.next3407, %530
  br i1 %.not2599, label %"end for blur_y.s0.x.x.rebased1703", label %"for blur_y.s0.x.x.rebased1702"

"for blur_y.s0.x.x.rebased1718":                  ; preds = %"for blur_y.s0.x.x.rebased1718.preheader", %"consume blur_x1729"
  %blur_y.s0.x.x.rebased1720 = phi i32 [ %22701, %"consume blur_x1729" ], [ 0, %"for blur_y.s0.x.x.rebased1718.preheader" ]
  %22593 = add nsw i32 %blur_y.s0.x.x.rebased1720, %t1626814
  %a3821 = shl nsw i32 %22593, 5
  %22594 = icmp sgt i32 %t1647, %a3821
  %blur_y.s0.x.v0.base.s1721 = select i1 %22594, i32 %a3821, i32 %t1647
  %22595 = icmp slt i32 %22593, 1
  %22596 = icmp sgt i32 %198, %a3821
  %22597 = or i1 %22595, %22596
  br i1 %22597, label %"produce blur_x1726", label %"consume blur_x1729"

"end for blur_y.s0.x.x.rebased1719":              ; preds = %"consume blur_x1729", %"end for blur_y.s0.x.x.rebased1703"
  br i1 %229, label %"produce blur_x1733", label %after_bb1730

"produce blur_x1726":                             ; preds = %"for blur_y.s0.x.x.rebased1718"
  %22598 = icmp slt i32 %blur_y.s0.x.v0.base.s1721, %198
  %blur_x.s0.x.v1.base.s1727 = select i1 %22598, i32 %blur_y.s0.x.v0.base.s1721, i32 %198
  %t9731728 = add nsw i32 %433, %blur_x.s0.x.v1.base.s1727
  %22599 = sext i32 %t9731728 to i64
  %22600 = getelementptr inbounds i16, i16* %read_input822, i64 %22599
  %22601 = getelementptr inbounds i16, i16* %22600, i64 1
  %22602 = bitcast i16* %22601 to <16 x i16>*
  %22603 = load <16 x i16>, <16 x i16>* %22602, align 2, !tbaa !396
  %22604 = getelementptr inbounds i16, i16* %22600, i64 17
  %22605 = bitcast i16* %22604 to <16 x i16>*
  %22606 = load <16 x i16>, <16 x i16>* %22605, align 2, !tbaa !396
  %22607 = bitcast i16* %22600 to <16 x i16>*
  %22608 = load <16 x i16>, <16 x i16>* %22607, align 2, !tbaa !396
  %22609 = getelementptr inbounds i16, i16* %22600, i64 16
  %22610 = bitcast i16* %22609 to <16 x i16>*
  %22611 = load <16 x i16>, <16 x i16>* %22610, align 2, !tbaa !396
  %22612 = getelementptr inbounds i16, i16* %22600, i64 2
  %22613 = bitcast i16* %22612 to <16 x i16>*
  %22614 = load <16 x i16>, <16 x i16>* %22613, align 2, !tbaa !396
  %22615 = getelementptr inbounds i16, i16* %22600, i64 18
  %22616 = bitcast i16* %22615 to <16 x i16>*
  %22617 = load <16 x i16>, <16 x i16>* %22616, align 2, !tbaa !396
  %22618 = getelementptr inbounds i16, i16* %22600, i64 4
  %22619 = bitcast i16* %22618 to <16 x i16>*
  %22620 = load <16 x i16>, <16 x i16>* %22619, align 2, !tbaa !396
  %22621 = getelementptr inbounds i16, i16* %22600, i64 20
  %22622 = bitcast i16* %22621 to <16 x i16>*
  %22623 = load <16 x i16>, <16 x i16>* %22622, align 2, !tbaa !396
  %22624 = getelementptr inbounds i16, i16* %22600, i64 3
  %22625 = bitcast i16* %22624 to <16 x i16>*
  %22626 = load <16 x i16>, <16 x i16>* %22625, align 2, !tbaa !396
  %22627 = getelementptr inbounds i16, i16* %22600, i64 19
  %22628 = bitcast i16* %22627 to <16 x i16>*
  %22629 = load <16 x i16>, <16 x i16>* %22628, align 2, !tbaa !396
  %22630 = add <16 x i16> %22608, %22603
  %22631 = add <16 x i16> %22630, %22614
  %22632 = add <16 x i16> %22631, %22620
  %22633 = add <16 x i16> %22632, %22626
  %22634 = add <16 x i16> %22611, %22606
  %22635 = add <16 x i16> %22634, %22617
  %22636 = add <16 x i16> %22635, %22623
  %22637 = add <16 x i16> %22636, %22629
  %22638 = shufflevector <16 x i16> %22633, <16 x i16> %22637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22639 = udiv <32 x i16> %22638, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22640 = shufflevector <32 x i16> %22639, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22641 = sext i32 %blur_x.s0.x.v1.base.s1727 to i64
  %22642 = add nsw i64 %22641, %22472
  %22643 = getelementptr inbounds i16, i16* %blur_x879, i64 %22642
  %22644 = bitcast i16* %22643 to <16 x i16>*
  store <16 x i16> %22640, <16 x i16>* %22644, align 2, !tbaa !399
  %22645 = shufflevector <32 x i16> %22639, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22646 = getelementptr inbounds i16, i16* %22643, i64 16
  %22647 = bitcast i16* %22646 to <16 x i16>*
  store <16 x i16> %22645, <16 x i16>* %22647, align 2, !tbaa !399
  br label %"consume blur_x1729"

"consume blur_x1729":                             ; preds = %"for blur_y.s0.x.x.rebased1718", %"produce blur_x1726"
  %22648 = sext i32 %blur_y.s0.x.v0.base.s1721 to i64
  %22649 = add nsw i64 %22475, %22648
  %22650 = getelementptr inbounds i16, i16* %blur_x879, i64 %22649
  %22651 = bitcast i16* %22650 to <16 x i16>*
  %22652 = load <16 x i16>, <16 x i16>* %22651, align 2, !tbaa !399
  %22653 = getelementptr inbounds i16, i16* %22650, i64 16
  %22654 = bitcast i16* %22653 to <16 x i16>*
  %22655 = load <16 x i16>, <16 x i16>* %22654, align 2, !tbaa !399
  %22656 = add nsw i64 %22478, %22648
  %22657 = getelementptr inbounds i16, i16* %blur_x879, i64 %22656
  %22658 = bitcast i16* %22657 to <16 x i16>*
  %22659 = load <16 x i16>, <16 x i16>* %22658, align 2, !tbaa !399
  %22660 = getelementptr inbounds i16, i16* %22657, i64 16
  %22661 = bitcast i16* %22660 to <16 x i16>*
  %22662 = load <16 x i16>, <16 x i16>* %22661, align 2, !tbaa !399
  %22663 = add nsw i64 %22481, %22648
  %22664 = getelementptr inbounds i16, i16* %blur_x879, i64 %22663
  %22665 = bitcast i16* %22664 to <16 x i16>*
  %22666 = load <16 x i16>, <16 x i16>* %22665, align 2, !tbaa !399
  %22667 = getelementptr inbounds i16, i16* %22664, i64 16
  %22668 = bitcast i16* %22667 to <16 x i16>*
  %22669 = load <16 x i16>, <16 x i16>* %22668, align 2, !tbaa !399
  %22670 = add nsw i64 %22484, %22648
  %22671 = getelementptr inbounds i16, i16* %blur_x879, i64 %22670
  %22672 = bitcast i16* %22671 to <16 x i16>*
  %22673 = load <16 x i16>, <16 x i16>* %22672, align 2, !tbaa !399
  %22674 = getelementptr inbounds i16, i16* %22671, i64 16
  %22675 = bitcast i16* %22674 to <16 x i16>*
  %22676 = load <16 x i16>, <16 x i16>* %22675, align 2, !tbaa !399
  %22677 = add nsw i64 %22487, %22648
  %22678 = getelementptr inbounds i16, i16* %blur_x879, i64 %22677
  %22679 = bitcast i16* %22678 to <16 x i16>*
  %22680 = load <16 x i16>, <16 x i16>* %22679, align 2, !tbaa !399
  %22681 = getelementptr inbounds i16, i16* %22678, i64 16
  %22682 = bitcast i16* %22681 to <16 x i16>*
  %22683 = load <16 x i16>, <16 x i16>* %22682, align 2, !tbaa !399
  %22684 = add <16 x i16> %22659, %22652
  %22685 = add <16 x i16> %22684, %22666
  %22686 = add <16 x i16> %22685, %22673
  %22687 = add <16 x i16> %22686, %22680
  %22688 = add <16 x i16> %22662, %22655
  %22689 = add <16 x i16> %22688, %22669
  %22690 = add <16 x i16> %22689, %22676
  %22691 = add <16 x i16> %22690, %22683
  %22692 = shufflevector <16 x i16> %22687, <16 x i16> %22691, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22693 = udiv <32 x i16> %22692, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22694 = shufflevector <32 x i16> %22693, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22695 = add nsw i64 %22491, %22648
  %22696 = getelementptr inbounds i16, i16* %263, i64 %22695
  %22697 = bitcast i16* %22696 to <16 x i16>*
  store <16 x i16> %22694, <16 x i16>* %22697, align 2, !tbaa !401
  %22698 = shufflevector <32 x i16> %22693, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22699 = getelementptr inbounds i16, i16* %22696, i64 16
  %22700 = bitcast i16* %22699 to <16 x i16>*
  store <16 x i16> %22698, <16 x i16>* %22700, align 2, !tbaa !401
  %22701 = add nuw nsw i32 %blur_y.s0.x.x.rebased1720, 1
  %.not2598 = icmp eq i32 %22701, %t1683898
  br i1 %.not2598, label %"end for blur_y.s0.x.x.rebased1719", label %"for blur_y.s0.x.x.rebased1718"

after_bb1730:                                     ; preds = %"end for blur_y.s0.x.x.rebased1719", %"produce blur_x1733"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1745.preheader", label %"end for blur_y.s0.x.x.rebased1746", !prof !386

"for blur_y.s0.x.x.rebased1745.preheader":        ; preds = %after_bb1730
  %22702 = sext i32 %t17221053 to i64
  %22703 = zext i32 %.pre-phi3543 to i64
  %22704 = mul nsw i64 %22703, %337
  %22705 = sub nsw i64 %22704, %298
  %22706 = zext i32 %.pre-phi3539 to i64
  %22707 = mul nsw i64 %22706, %337
  %22708 = sub nsw i64 %22707, %298
  %22709 = zext i32 %.pre-phi3547 to i64
  %22710 = mul nsw i64 %22709, %337
  %22711 = sub nsw i64 %22710, %298
  %22712 = zext i32 %.pre-phi3557 to i64
  %22713 = mul nsw i64 %22712, %337
  %22714 = sub nsw i64 %22713, %298
  %22715 = zext i32 %.pre-phi3551 to i64
  %22716 = mul nsw i64 %22715, %337
  %22717 = sub nsw i64 %22716, %298
  %22718 = sext i32 %a379 to i64
  %22719 = add nsw i64 %22718, 17
  %22720 = mul nsw i64 %22719, %334
  %22721 = add nsw i64 %22720, %338
  br label %"for blur_y.s0.x.x.rebased1745"

"produce blur_x1733":                             ; preds = %"end for blur_y.s0.x.x.rebased1719"
  %22722 = getelementptr inbounds i16, i16* %read_input822, i64 %437
  %22723 = getelementptr inbounds i16, i16* %22722, i64 -31
  %22724 = bitcast i16* %22723 to <16 x i16>*
  %22725 = load <16 x i16>, <16 x i16>* %22724, align 2, !tbaa !396
  %22726 = getelementptr inbounds i16, i16* %22722, i64 -15
  %22727 = bitcast i16* %22726 to <16 x i16>*
  %22728 = load <16 x i16>, <16 x i16>* %22727, align 2, !tbaa !396
  %22729 = getelementptr inbounds i16, i16* %22722, i64 -32
  %22730 = bitcast i16* %22729 to <16 x i16>*
  %22731 = load <16 x i16>, <16 x i16>* %22730, align 2, !tbaa !396
  %22732 = getelementptr inbounds i16, i16* %22722, i64 -16
  %22733 = bitcast i16* %22732 to <16 x i16>*
  %22734 = load <16 x i16>, <16 x i16>* %22733, align 2, !tbaa !396
  %22735 = getelementptr inbounds i16, i16* %22722, i64 -30
  %22736 = bitcast i16* %22735 to <16 x i16>*
  %22737 = load <16 x i16>, <16 x i16>* %22736, align 2, !tbaa !396
  %22738 = getelementptr inbounds i16, i16* %22722, i64 -14
  %22739 = bitcast i16* %22738 to <16 x i16>*
  %22740 = load <16 x i16>, <16 x i16>* %22739, align 2, !tbaa !396
  %22741 = getelementptr inbounds i16, i16* %22722, i64 -28
  %22742 = bitcast i16* %22741 to <16 x i16>*
  %22743 = load <16 x i16>, <16 x i16>* %22742, align 2, !tbaa !396
  %22744 = getelementptr inbounds i16, i16* %22722, i64 -12
  %22745 = bitcast i16* %22744 to <16 x i16>*
  %22746 = load <16 x i16>, <16 x i16>* %22745, align 2, !tbaa !396
  %22747 = getelementptr inbounds i16, i16* %22722, i64 -29
  %22748 = bitcast i16* %22747 to <16 x i16>*
  %22749 = load <16 x i16>, <16 x i16>* %22748, align 2, !tbaa !396
  %22750 = getelementptr inbounds i16, i16* %22722, i64 -13
  %22751 = bitcast i16* %22750 to <16 x i16>*
  %22752 = load <16 x i16>, <16 x i16>* %22751, align 2, !tbaa !396
  %22753 = add <16 x i16> %22731, %22725
  %22754 = add <16 x i16> %22753, %22737
  %22755 = add <16 x i16> %22754, %22743
  %22756 = add <16 x i16> %22755, %22749
  %22757 = add <16 x i16> %22734, %22728
  %22758 = add <16 x i16> %22757, %22740
  %22759 = add <16 x i16> %22758, %22746
  %22760 = add <16 x i16> %22759, %22752
  %22761 = shufflevector <16 x i16> %22756, <16 x i16> %22760, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22762 = udiv <32 x i16> %22761, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22763 = shufflevector <32 x i16> %22762, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22764 = zext i32 %.pre-phi3557 to i64
  %22765 = mul nsw i64 %299, %22764
  %22766 = add nsw i64 %301, %22765
  %22767 = getelementptr inbounds i16, i16* %blur_x879, i64 %22766
  %22768 = getelementptr inbounds i16, i16* %22767, i64 -32
  %22769 = bitcast i16* %22768 to <16 x i16>*
  store <16 x i16> %22763, <16 x i16>* %22769, align 2, !tbaa !399
  %22770 = shufflevector <32 x i16> %22762, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22771 = getelementptr inbounds i16, i16* %22767, i64 -16
  %22772 = bitcast i16* %22771 to <16 x i16>*
  store <16 x i16> %22770, <16 x i16>* %22772, align 2, !tbaa !399
  %22773 = zext i32 %.pre-phi3543 to i64
  %22774 = mul nsw i64 %22773, %333
  %22775 = add nsw i64 %22774, %296
  %22776 = getelementptr inbounds i16, i16* %blur_x879, i64 %22775
  %22777 = getelementptr inbounds i16, i16* %22776, i64 -32
  %22778 = bitcast i16* %22777 to <16 x i16>*
  %22779 = load <16 x i16>, <16 x i16>* %22778, align 2, !tbaa !399
  %22780 = getelementptr inbounds i16, i16* %22776, i64 -16
  %22781 = bitcast i16* %22780 to <16 x i16>*
  %22782 = load <16 x i16>, <16 x i16>* %22781, align 2, !tbaa !399
  %22783 = zext i32 %.pre-phi3539 to i64
  %22784 = mul nsw i64 %22783, %333
  %22785 = add nsw i64 %22784, %296
  %22786 = getelementptr inbounds i16, i16* %blur_x879, i64 %22785
  %22787 = getelementptr inbounds i16, i16* %22786, i64 -32
  %22788 = bitcast i16* %22787 to <16 x i16>*
  %22789 = load <16 x i16>, <16 x i16>* %22788, align 2, !tbaa !399
  %22790 = getelementptr inbounds i16, i16* %22786, i64 -16
  %22791 = bitcast i16* %22790 to <16 x i16>*
  %22792 = load <16 x i16>, <16 x i16>* %22791, align 2, !tbaa !399
  %22793 = zext i32 %.pre-phi3547 to i64
  %22794 = mul nsw i64 %22793, %333
  %22795 = add nsw i64 %22794, %296
  %22796 = getelementptr inbounds i16, i16* %blur_x879, i64 %22795
  %22797 = getelementptr inbounds i16, i16* %22796, i64 -32
  %22798 = bitcast i16* %22797 to <16 x i16>*
  %22799 = load <16 x i16>, <16 x i16>* %22798, align 2, !tbaa !399
  %22800 = getelementptr inbounds i16, i16* %22796, i64 -16
  %22801 = bitcast i16* %22800 to <16 x i16>*
  %22802 = load <16 x i16>, <16 x i16>* %22801, align 2, !tbaa !399
  %22803 = mul nsw i64 %22764, %333
  %22804 = add nsw i64 %22803, %296
  %22805 = getelementptr inbounds i16, i16* %blur_x879, i64 %22804
  %22806 = getelementptr inbounds i16, i16* %22805, i64 -32
  %22807 = bitcast i16* %22806 to <16 x i16>*
  %22808 = load <16 x i16>, <16 x i16>* %22807, align 2, !tbaa !399
  %22809 = getelementptr inbounds i16, i16* %22805, i64 -16
  %22810 = bitcast i16* %22809 to <16 x i16>*
  %22811 = load <16 x i16>, <16 x i16>* %22810, align 2, !tbaa !399
  %22812 = zext i32 %.pre-phi3551 to i64
  %22813 = mul nsw i64 %22812, %333
  %22814 = add nsw i64 %22813, %296
  %22815 = getelementptr inbounds i16, i16* %blur_x879, i64 %22814
  %22816 = getelementptr inbounds i16, i16* %22815, i64 -32
  %22817 = bitcast i16* %22816 to <16 x i16>*
  %22818 = load <16 x i16>, <16 x i16>* %22817, align 2, !tbaa !399
  %22819 = getelementptr inbounds i16, i16* %22815, i64 -16
  %22820 = bitcast i16* %22819 to <16 x i16>*
  %22821 = load <16 x i16>, <16 x i16>* %22820, align 2, !tbaa !399
  %22822 = add <16 x i16> %22789, %22779
  %22823 = add <16 x i16> %22822, %22799
  %22824 = add <16 x i16> %22823, %22808
  %22825 = add <16 x i16> %22824, %22818
  %22826 = add <16 x i16> %22792, %22782
  %22827 = add <16 x i16> %22826, %22802
  %22828 = add <16 x i16> %22827, %22811
  %22829 = add <16 x i16> %22828, %22821
  %22830 = shufflevector <16 x i16> %22825, <16 x i16> %22829, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22831 = udiv <32 x i16> %22830, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22832 = shufflevector <32 x i16> %22831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22833 = sext i32 %a379 to i64
  %22834 = add nsw i64 %22833, 17
  %22835 = mul nsw i64 %22834, %334
  %22836 = add nsw i64 %336, %22835
  %22837 = getelementptr inbounds i16, i16* %263, i64 %22836
  %22838 = getelementptr inbounds i16, i16* %22837, i64 -32
  %22839 = bitcast i16* %22838 to <16 x i16>*
  store <16 x i16> %22832, <16 x i16>* %22839, align 2, !tbaa !401
  %22840 = shufflevector <32 x i16> %22831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22841 = getelementptr inbounds i16, i16* %22837, i64 -16
  %22842 = bitcast i16* %22841 to <16 x i16>*
  store <16 x i16> %22840, <16 x i16>* %22842, align 2, !tbaa !401
  br label %after_bb1730

"for blur_y.s0.x.x.rebased1745":                  ; preds = %"for blur_y.s0.x.x.rebased1745.preheader", %"consume blur_x1753"
  %indvars.iv3408 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1745.preheader" ], [ %indvars.iv.next3409, %"consume blur_x1753" ]
  %22843 = add nsw i64 %indvars.iv3408, %303
  %22844 = icmp slt i64 %22843, 1
  %22845 = trunc i64 %22843 to i32
  %22846 = shl nsw i32 %22845, 5
  %22847 = icmp sgt i32 %198, %22846
  %22848 = or i1 %22844, %22847
  br i1 %22848, label %"produce blur_x1751", label %"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge"

"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1745"
  %.pre3598 = shl nsw i64 %22843, 5
  br label %"consume blur_x1753"

"end for blur_y.s0.x.x.rebased1746":              ; preds = %"consume blur_x1753", %after_bb1730
  br i1 %304, label %"for blur_y.s0.x.x.rebased1761.preheader", label %"end for blur_y.s0.x.x.rebased1762", !prof !386

"for blur_y.s0.x.x.rebased1761.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1746"
  %22849 = sext i32 %t17221053 to i64
  %22850 = zext i32 %.pre-phi3543 to i64
  %22851 = mul nsw i64 %22850, %337
  %22852 = sub nsw i64 %22851, %298
  %22853 = zext i32 %.pre-phi3539 to i64
  %22854 = mul nsw i64 %22853, %337
  %22855 = sub nsw i64 %22854, %298
  %22856 = zext i32 %.pre-phi3547 to i64
  %22857 = mul nsw i64 %22856, %337
  %22858 = sub nsw i64 %22857, %298
  %22859 = zext i32 %.pre-phi3557 to i64
  %22860 = mul nsw i64 %22859, %337
  %22861 = sub nsw i64 %22860, %298
  %22862 = zext i32 %.pre-phi3551 to i64
  %22863 = mul nsw i64 %22862, %337
  %22864 = sub nsw i64 %22863, %298
  %22865 = sext i32 %a379 to i64
  %22866 = add nsw i64 %22865, 17
  %22867 = mul nsw i64 %22866, %334
  %22868 = add nsw i64 %22867, %338
  br label %"for blur_y.s0.x.x.rebased1761"

"produce blur_x1751":                             ; preds = %"for blur_y.s0.x.x.rebased1745"
  %t9841752 = add nsw i32 %439, %22846
  %22869 = sext i32 %t9841752 to i64
  %22870 = getelementptr inbounds i16, i16* %read_input822, i64 %22869
  %22871 = getelementptr inbounds i16, i16* %22870, i64 1
  %22872 = bitcast i16* %22871 to <16 x i16>*
  %22873 = load <16 x i16>, <16 x i16>* %22872, align 2, !tbaa !396
  %22874 = getelementptr inbounds i16, i16* %22870, i64 17
  %22875 = bitcast i16* %22874 to <16 x i16>*
  %22876 = load <16 x i16>, <16 x i16>* %22875, align 2, !tbaa !396
  %22877 = bitcast i16* %22870 to <16 x i16>*
  %22878 = load <16 x i16>, <16 x i16>* %22877, align 2, !tbaa !396
  %22879 = getelementptr inbounds i16, i16* %22870, i64 16
  %22880 = bitcast i16* %22879 to <16 x i16>*
  %22881 = load <16 x i16>, <16 x i16>* %22880, align 2, !tbaa !396
  %22882 = getelementptr inbounds i16, i16* %22870, i64 2
  %22883 = bitcast i16* %22882 to <16 x i16>*
  %22884 = load <16 x i16>, <16 x i16>* %22883, align 2, !tbaa !396
  %22885 = getelementptr inbounds i16, i16* %22870, i64 18
  %22886 = bitcast i16* %22885 to <16 x i16>*
  %22887 = load <16 x i16>, <16 x i16>* %22886, align 2, !tbaa !396
  %22888 = getelementptr inbounds i16, i16* %22870, i64 4
  %22889 = bitcast i16* %22888 to <16 x i16>*
  %22890 = load <16 x i16>, <16 x i16>* %22889, align 2, !tbaa !396
  %22891 = getelementptr inbounds i16, i16* %22870, i64 20
  %22892 = bitcast i16* %22891 to <16 x i16>*
  %22893 = load <16 x i16>, <16 x i16>* %22892, align 2, !tbaa !396
  %22894 = getelementptr inbounds i16, i16* %22870, i64 3
  %22895 = bitcast i16* %22894 to <16 x i16>*
  %22896 = load <16 x i16>, <16 x i16>* %22895, align 2, !tbaa !396
  %22897 = getelementptr inbounds i16, i16* %22870, i64 19
  %22898 = bitcast i16* %22897 to <16 x i16>*
  %22899 = load <16 x i16>, <16 x i16>* %22898, align 2, !tbaa !396
  %22900 = add <16 x i16> %22878, %22873
  %22901 = add <16 x i16> %22900, %22884
  %22902 = add <16 x i16> %22901, %22890
  %22903 = add <16 x i16> %22902, %22896
  %22904 = add <16 x i16> %22881, %22876
  %22905 = add <16 x i16> %22904, %22887
  %22906 = add <16 x i16> %22905, %22893
  %22907 = add <16 x i16> %22906, %22899
  %22908 = shufflevector <16 x i16> %22903, <16 x i16> %22907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22909 = udiv <32 x i16> %22908, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22910 = shufflevector <32 x i16> %22909, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22911 = shl nsw i64 %22843, 5
  %22912 = add nsw i64 %22911, %22702
  %22913 = getelementptr inbounds i16, i16* %blur_x879, i64 %22912
  %22914 = bitcast i16* %22913 to <16 x i16>*
  store <16 x i16> %22910, <16 x i16>* %22914, align 2, !tbaa !399
  %22915 = shufflevector <32 x i16> %22909, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22916 = getelementptr inbounds i16, i16* %22913, i64 16
  %22917 = bitcast i16* %22916 to <16 x i16>*
  store <16 x i16> %22915, <16 x i16>* %22917, align 2, !tbaa !399
  br label %"consume blur_x1753"

"consume blur_x1753":                             ; preds = %"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge", %"produce blur_x1751"
  %.pre-phi3599 = phi i64 [ %.pre3598, %"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge" ], [ %22911, %"produce blur_x1751" ]
  %22918 = add nsw i64 %22705, %.pre-phi3599
  %22919 = getelementptr inbounds i16, i16* %blur_x879, i64 %22918
  %22920 = bitcast i16* %22919 to <16 x i16>*
  %22921 = load <16 x i16>, <16 x i16>* %22920, align 2, !tbaa !399
  %22922 = getelementptr inbounds i16, i16* %22919, i64 16
  %22923 = bitcast i16* %22922 to <16 x i16>*
  %22924 = load <16 x i16>, <16 x i16>* %22923, align 2, !tbaa !399
  %22925 = add nsw i64 %22708, %.pre-phi3599
  %22926 = getelementptr inbounds i16, i16* %blur_x879, i64 %22925
  %22927 = bitcast i16* %22926 to <16 x i16>*
  %22928 = load <16 x i16>, <16 x i16>* %22927, align 2, !tbaa !399
  %22929 = getelementptr inbounds i16, i16* %22926, i64 16
  %22930 = bitcast i16* %22929 to <16 x i16>*
  %22931 = load <16 x i16>, <16 x i16>* %22930, align 2, !tbaa !399
  %22932 = add nsw i64 %22711, %.pre-phi3599
  %22933 = getelementptr inbounds i16, i16* %blur_x879, i64 %22932
  %22934 = bitcast i16* %22933 to <16 x i16>*
  %22935 = load <16 x i16>, <16 x i16>* %22934, align 2, !tbaa !399
  %22936 = getelementptr inbounds i16, i16* %22933, i64 16
  %22937 = bitcast i16* %22936 to <16 x i16>*
  %22938 = load <16 x i16>, <16 x i16>* %22937, align 2, !tbaa !399
  %22939 = add nsw i64 %22714, %.pre-phi3599
  %22940 = getelementptr inbounds i16, i16* %blur_x879, i64 %22939
  %22941 = bitcast i16* %22940 to <16 x i16>*
  %22942 = load <16 x i16>, <16 x i16>* %22941, align 2, !tbaa !399
  %22943 = getelementptr inbounds i16, i16* %22940, i64 16
  %22944 = bitcast i16* %22943 to <16 x i16>*
  %22945 = load <16 x i16>, <16 x i16>* %22944, align 2, !tbaa !399
  %22946 = add nsw i64 %22717, %.pre-phi3599
  %22947 = getelementptr inbounds i16, i16* %blur_x879, i64 %22946
  %22948 = bitcast i16* %22947 to <16 x i16>*
  %22949 = load <16 x i16>, <16 x i16>* %22948, align 2, !tbaa !399
  %22950 = getelementptr inbounds i16, i16* %22947, i64 16
  %22951 = bitcast i16* %22950 to <16 x i16>*
  %22952 = load <16 x i16>, <16 x i16>* %22951, align 2, !tbaa !399
  %22953 = add <16 x i16> %22928, %22921
  %22954 = add <16 x i16> %22953, %22935
  %22955 = add <16 x i16> %22954, %22942
  %22956 = add <16 x i16> %22955, %22949
  %22957 = add <16 x i16> %22931, %22924
  %22958 = add <16 x i16> %22957, %22938
  %22959 = add <16 x i16> %22958, %22945
  %22960 = add <16 x i16> %22959, %22952
  %22961 = shufflevector <16 x i16> %22956, <16 x i16> %22960, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22962 = udiv <32 x i16> %22961, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %22963 = shufflevector <32 x i16> %22962, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22964 = add nsw i64 %22721, %.pre-phi3599
  %22965 = getelementptr inbounds i16, i16* %263, i64 %22964
  %22966 = bitcast i16* %22965 to <16 x i16>*
  store <16 x i16> %22963, <16 x i16>* %22966, align 2, !tbaa !401
  %22967 = shufflevector <32 x i16> %22962, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22968 = getelementptr inbounds i16, i16* %22965, i64 16
  %22969 = bitcast i16* %22968 to <16 x i16>*
  store <16 x i16> %22967, <16 x i16>* %22969, align 2, !tbaa !401
  %indvars.iv.next3409 = add nuw nsw i64 %indvars.iv3408, 1
  %.not2595 = icmp eq i64 %indvars.iv.next3409, %530
  br i1 %.not2595, label %"end for blur_y.s0.x.x.rebased1746", label %"for blur_y.s0.x.x.rebased1745"

"for blur_y.s0.x.x.rebased1761":                  ; preds = %"for blur_y.s0.x.x.rebased1761.preheader", %"consume blur_x1772"
  %blur_y.s0.x.x.rebased1763 = phi i32 [ %23078, %"consume blur_x1772" ], [ 0, %"for blur_y.s0.x.x.rebased1761.preheader" ]
  %22970 = add nsw i32 %blur_y.s0.x.x.rebased1763, %t1626814
  %a3978 = shl nsw i32 %22970, 5
  %22971 = icmp sgt i32 %t1647, %a3978
  %blur_y.s0.x.v0.base.s1764 = select i1 %22971, i32 %a3978, i32 %t1647
  %22972 = icmp slt i32 %22970, 1
  %22973 = icmp sgt i32 %198, %a3978
  %22974 = or i1 %22972, %22973
  br i1 %22974, label %"produce blur_x1769", label %"consume blur_x1772"

"end for blur_y.s0.x.x.rebased1762":              ; preds = %"consume blur_x1772", %"end for blur_y.s0.x.x.rebased1746"
  br i1 %229, label %"produce blur_x1776", label %after_bb1773

"produce blur_x1769":                             ; preds = %"for blur_y.s0.x.x.rebased1761"
  %22975 = icmp slt i32 %blur_y.s0.x.v0.base.s1764, %198
  %blur_x.s0.x.v1.base.s1770 = select i1 %22975, i32 %blur_y.s0.x.v0.base.s1764, i32 %198
  %t9891771 = add nsw i32 %439, %blur_x.s0.x.v1.base.s1770
  %22976 = sext i32 %t9891771 to i64
  %22977 = getelementptr inbounds i16, i16* %read_input822, i64 %22976
  %22978 = getelementptr inbounds i16, i16* %22977, i64 1
  %22979 = bitcast i16* %22978 to <16 x i16>*
  %22980 = load <16 x i16>, <16 x i16>* %22979, align 2, !tbaa !396
  %22981 = getelementptr inbounds i16, i16* %22977, i64 17
  %22982 = bitcast i16* %22981 to <16 x i16>*
  %22983 = load <16 x i16>, <16 x i16>* %22982, align 2, !tbaa !396
  %22984 = bitcast i16* %22977 to <16 x i16>*
  %22985 = load <16 x i16>, <16 x i16>* %22984, align 2, !tbaa !396
  %22986 = getelementptr inbounds i16, i16* %22977, i64 16
  %22987 = bitcast i16* %22986 to <16 x i16>*
  %22988 = load <16 x i16>, <16 x i16>* %22987, align 2, !tbaa !396
  %22989 = getelementptr inbounds i16, i16* %22977, i64 2
  %22990 = bitcast i16* %22989 to <16 x i16>*
  %22991 = load <16 x i16>, <16 x i16>* %22990, align 2, !tbaa !396
  %22992 = getelementptr inbounds i16, i16* %22977, i64 18
  %22993 = bitcast i16* %22992 to <16 x i16>*
  %22994 = load <16 x i16>, <16 x i16>* %22993, align 2, !tbaa !396
  %22995 = getelementptr inbounds i16, i16* %22977, i64 4
  %22996 = bitcast i16* %22995 to <16 x i16>*
  %22997 = load <16 x i16>, <16 x i16>* %22996, align 2, !tbaa !396
  %22998 = getelementptr inbounds i16, i16* %22977, i64 20
  %22999 = bitcast i16* %22998 to <16 x i16>*
  %23000 = load <16 x i16>, <16 x i16>* %22999, align 2, !tbaa !396
  %23001 = getelementptr inbounds i16, i16* %22977, i64 3
  %23002 = bitcast i16* %23001 to <16 x i16>*
  %23003 = load <16 x i16>, <16 x i16>* %23002, align 2, !tbaa !396
  %23004 = getelementptr inbounds i16, i16* %22977, i64 19
  %23005 = bitcast i16* %23004 to <16 x i16>*
  %23006 = load <16 x i16>, <16 x i16>* %23005, align 2, !tbaa !396
  %23007 = add <16 x i16> %22985, %22980
  %23008 = add <16 x i16> %23007, %22991
  %23009 = add <16 x i16> %23008, %22997
  %23010 = add <16 x i16> %23009, %23003
  %23011 = add <16 x i16> %22988, %22983
  %23012 = add <16 x i16> %23011, %22994
  %23013 = add <16 x i16> %23012, %23000
  %23014 = add <16 x i16> %23013, %23006
  %23015 = shufflevector <16 x i16> %23010, <16 x i16> %23014, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23016 = udiv <32 x i16> %23015, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23017 = shufflevector <32 x i16> %23016, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23018 = sext i32 %blur_x.s0.x.v1.base.s1770 to i64
  %23019 = add nsw i64 %23018, %22849
  %23020 = getelementptr inbounds i16, i16* %blur_x879, i64 %23019
  %23021 = bitcast i16* %23020 to <16 x i16>*
  store <16 x i16> %23017, <16 x i16>* %23021, align 2, !tbaa !399
  %23022 = shufflevector <32 x i16> %23016, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23023 = getelementptr inbounds i16, i16* %23020, i64 16
  %23024 = bitcast i16* %23023 to <16 x i16>*
  store <16 x i16> %23022, <16 x i16>* %23024, align 2, !tbaa !399
  br label %"consume blur_x1772"

"consume blur_x1772":                             ; preds = %"for blur_y.s0.x.x.rebased1761", %"produce blur_x1769"
  %23025 = sext i32 %blur_y.s0.x.v0.base.s1764 to i64
  %23026 = add nsw i64 %22852, %23025
  %23027 = getelementptr inbounds i16, i16* %blur_x879, i64 %23026
  %23028 = bitcast i16* %23027 to <16 x i16>*
  %23029 = load <16 x i16>, <16 x i16>* %23028, align 2, !tbaa !399
  %23030 = getelementptr inbounds i16, i16* %23027, i64 16
  %23031 = bitcast i16* %23030 to <16 x i16>*
  %23032 = load <16 x i16>, <16 x i16>* %23031, align 2, !tbaa !399
  %23033 = add nsw i64 %22855, %23025
  %23034 = getelementptr inbounds i16, i16* %blur_x879, i64 %23033
  %23035 = bitcast i16* %23034 to <16 x i16>*
  %23036 = load <16 x i16>, <16 x i16>* %23035, align 2, !tbaa !399
  %23037 = getelementptr inbounds i16, i16* %23034, i64 16
  %23038 = bitcast i16* %23037 to <16 x i16>*
  %23039 = load <16 x i16>, <16 x i16>* %23038, align 2, !tbaa !399
  %23040 = add nsw i64 %22858, %23025
  %23041 = getelementptr inbounds i16, i16* %blur_x879, i64 %23040
  %23042 = bitcast i16* %23041 to <16 x i16>*
  %23043 = load <16 x i16>, <16 x i16>* %23042, align 2, !tbaa !399
  %23044 = getelementptr inbounds i16, i16* %23041, i64 16
  %23045 = bitcast i16* %23044 to <16 x i16>*
  %23046 = load <16 x i16>, <16 x i16>* %23045, align 2, !tbaa !399
  %23047 = add nsw i64 %22861, %23025
  %23048 = getelementptr inbounds i16, i16* %blur_x879, i64 %23047
  %23049 = bitcast i16* %23048 to <16 x i16>*
  %23050 = load <16 x i16>, <16 x i16>* %23049, align 2, !tbaa !399
  %23051 = getelementptr inbounds i16, i16* %23048, i64 16
  %23052 = bitcast i16* %23051 to <16 x i16>*
  %23053 = load <16 x i16>, <16 x i16>* %23052, align 2, !tbaa !399
  %23054 = add nsw i64 %22864, %23025
  %23055 = getelementptr inbounds i16, i16* %blur_x879, i64 %23054
  %23056 = bitcast i16* %23055 to <16 x i16>*
  %23057 = load <16 x i16>, <16 x i16>* %23056, align 2, !tbaa !399
  %23058 = getelementptr inbounds i16, i16* %23055, i64 16
  %23059 = bitcast i16* %23058 to <16 x i16>*
  %23060 = load <16 x i16>, <16 x i16>* %23059, align 2, !tbaa !399
  %23061 = add <16 x i16> %23036, %23029
  %23062 = add <16 x i16> %23061, %23043
  %23063 = add <16 x i16> %23062, %23050
  %23064 = add <16 x i16> %23063, %23057
  %23065 = add <16 x i16> %23039, %23032
  %23066 = add <16 x i16> %23065, %23046
  %23067 = add <16 x i16> %23066, %23053
  %23068 = add <16 x i16> %23067, %23060
  %23069 = shufflevector <16 x i16> %23064, <16 x i16> %23068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23070 = udiv <32 x i16> %23069, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23071 = shufflevector <32 x i16> %23070, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23072 = add nsw i64 %22868, %23025
  %23073 = getelementptr inbounds i16, i16* %263, i64 %23072
  %23074 = bitcast i16* %23073 to <16 x i16>*
  store <16 x i16> %23071, <16 x i16>* %23074, align 2, !tbaa !401
  %23075 = shufflevector <32 x i16> %23070, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23076 = getelementptr inbounds i16, i16* %23073, i64 16
  %23077 = bitcast i16* %23076 to <16 x i16>*
  store <16 x i16> %23075, <16 x i16>* %23077, align 2, !tbaa !401
  %23078 = add nuw nsw i32 %blur_y.s0.x.x.rebased1763, 1
  %.not2594 = icmp eq i32 %23078, %t1683898
  br i1 %.not2594, label %"end for blur_y.s0.x.x.rebased1762", label %"for blur_y.s0.x.x.rebased1761"

after_bb1773:                                     ; preds = %"end for blur_y.s0.x.x.rebased1762", %"produce blur_x1776"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1788.preheader", label %"end for blur_y.s0.x.x.rebased1789", !prof !386

"for blur_y.s0.x.x.rebased1788.preheader":        ; preds = %after_bb1773
  %23079 = sext i32 %t17381096 to i64
  %23080 = zext i32 %.pre-phi3547 to i64
  %23081 = mul nsw i64 %23080, %337
  %23082 = sub nsw i64 %23081, %298
  %23083 = zext i32 %.pre-phi3543 to i64
  %23084 = mul nsw i64 %23083, %337
  %23085 = sub nsw i64 %23084, %298
  %23086 = zext i32 %.pre-phi3551 to i64
  %23087 = mul nsw i64 %23086, %337
  %23088 = sub nsw i64 %23087, %298
  %23089 = zext i32 %.pre-phi3563 to i64
  %23090 = mul nsw i64 %23089, %337
  %23091 = sub nsw i64 %23090, %298
  %23092 = zext i32 %.pre-phi3557 to i64
  %23093 = mul nsw i64 %23092, %337
  %23094 = sub nsw i64 %23093, %298
  %23095 = sext i32 %a379 to i64
  %23096 = add nsw i64 %23095, 18
  %23097 = mul nsw i64 %23096, %334
  %23098 = add nsw i64 %23097, %338
  br label %"for blur_y.s0.x.x.rebased1788"

"produce blur_x1776":                             ; preds = %"end for blur_y.s0.x.x.rebased1762"
  %23099 = getelementptr inbounds i16, i16* %read_input822, i64 %443
  %23100 = getelementptr inbounds i16, i16* %23099, i64 -31
  %23101 = bitcast i16* %23100 to <16 x i16>*
  %23102 = load <16 x i16>, <16 x i16>* %23101, align 2, !tbaa !396
  %23103 = getelementptr inbounds i16, i16* %23099, i64 -15
  %23104 = bitcast i16* %23103 to <16 x i16>*
  %23105 = load <16 x i16>, <16 x i16>* %23104, align 2, !tbaa !396
  %23106 = getelementptr inbounds i16, i16* %23099, i64 -32
  %23107 = bitcast i16* %23106 to <16 x i16>*
  %23108 = load <16 x i16>, <16 x i16>* %23107, align 2, !tbaa !396
  %23109 = getelementptr inbounds i16, i16* %23099, i64 -16
  %23110 = bitcast i16* %23109 to <16 x i16>*
  %23111 = load <16 x i16>, <16 x i16>* %23110, align 2, !tbaa !396
  %23112 = getelementptr inbounds i16, i16* %23099, i64 -30
  %23113 = bitcast i16* %23112 to <16 x i16>*
  %23114 = load <16 x i16>, <16 x i16>* %23113, align 2, !tbaa !396
  %23115 = getelementptr inbounds i16, i16* %23099, i64 -14
  %23116 = bitcast i16* %23115 to <16 x i16>*
  %23117 = load <16 x i16>, <16 x i16>* %23116, align 2, !tbaa !396
  %23118 = getelementptr inbounds i16, i16* %23099, i64 -28
  %23119 = bitcast i16* %23118 to <16 x i16>*
  %23120 = load <16 x i16>, <16 x i16>* %23119, align 2, !tbaa !396
  %23121 = getelementptr inbounds i16, i16* %23099, i64 -12
  %23122 = bitcast i16* %23121 to <16 x i16>*
  %23123 = load <16 x i16>, <16 x i16>* %23122, align 2, !tbaa !396
  %23124 = getelementptr inbounds i16, i16* %23099, i64 -29
  %23125 = bitcast i16* %23124 to <16 x i16>*
  %23126 = load <16 x i16>, <16 x i16>* %23125, align 2, !tbaa !396
  %23127 = getelementptr inbounds i16, i16* %23099, i64 -13
  %23128 = bitcast i16* %23127 to <16 x i16>*
  %23129 = load <16 x i16>, <16 x i16>* %23128, align 2, !tbaa !396
  %23130 = add <16 x i16> %23108, %23102
  %23131 = add <16 x i16> %23130, %23114
  %23132 = add <16 x i16> %23131, %23120
  %23133 = add <16 x i16> %23132, %23126
  %23134 = add <16 x i16> %23111, %23105
  %23135 = add <16 x i16> %23134, %23117
  %23136 = add <16 x i16> %23135, %23123
  %23137 = add <16 x i16> %23136, %23129
  %23138 = shufflevector <16 x i16> %23133, <16 x i16> %23137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23139 = udiv <32 x i16> %23138, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23140 = shufflevector <32 x i16> %23139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23141 = zext i32 %.pre-phi3563 to i64
  %23142 = mul nsw i64 %299, %23141
  %23143 = add nsw i64 %301, %23142
  %23144 = getelementptr inbounds i16, i16* %blur_x879, i64 %23143
  %23145 = getelementptr inbounds i16, i16* %23144, i64 -32
  %23146 = bitcast i16* %23145 to <16 x i16>*
  store <16 x i16> %23140, <16 x i16>* %23146, align 2, !tbaa !399
  %23147 = shufflevector <32 x i16> %23139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23148 = getelementptr inbounds i16, i16* %23144, i64 -16
  %23149 = bitcast i16* %23148 to <16 x i16>*
  store <16 x i16> %23147, <16 x i16>* %23149, align 2, !tbaa !399
  %23150 = zext i32 %.pre-phi3547 to i64
  %23151 = mul nsw i64 %23150, %333
  %23152 = add nsw i64 %23151, %296
  %23153 = getelementptr inbounds i16, i16* %blur_x879, i64 %23152
  %23154 = getelementptr inbounds i16, i16* %23153, i64 -32
  %23155 = bitcast i16* %23154 to <16 x i16>*
  %23156 = load <16 x i16>, <16 x i16>* %23155, align 2, !tbaa !399
  %23157 = getelementptr inbounds i16, i16* %23153, i64 -16
  %23158 = bitcast i16* %23157 to <16 x i16>*
  %23159 = load <16 x i16>, <16 x i16>* %23158, align 2, !tbaa !399
  %23160 = zext i32 %.pre-phi3543 to i64
  %23161 = mul nsw i64 %23160, %333
  %23162 = add nsw i64 %23161, %296
  %23163 = getelementptr inbounds i16, i16* %blur_x879, i64 %23162
  %23164 = getelementptr inbounds i16, i16* %23163, i64 -32
  %23165 = bitcast i16* %23164 to <16 x i16>*
  %23166 = load <16 x i16>, <16 x i16>* %23165, align 2, !tbaa !399
  %23167 = getelementptr inbounds i16, i16* %23163, i64 -16
  %23168 = bitcast i16* %23167 to <16 x i16>*
  %23169 = load <16 x i16>, <16 x i16>* %23168, align 2, !tbaa !399
  %23170 = zext i32 %.pre-phi3551 to i64
  %23171 = mul nsw i64 %23170, %333
  %23172 = add nsw i64 %23171, %296
  %23173 = getelementptr inbounds i16, i16* %blur_x879, i64 %23172
  %23174 = getelementptr inbounds i16, i16* %23173, i64 -32
  %23175 = bitcast i16* %23174 to <16 x i16>*
  %23176 = load <16 x i16>, <16 x i16>* %23175, align 2, !tbaa !399
  %23177 = getelementptr inbounds i16, i16* %23173, i64 -16
  %23178 = bitcast i16* %23177 to <16 x i16>*
  %23179 = load <16 x i16>, <16 x i16>* %23178, align 2, !tbaa !399
  %23180 = mul nsw i64 %23141, %333
  %23181 = add nsw i64 %23180, %296
  %23182 = getelementptr inbounds i16, i16* %blur_x879, i64 %23181
  %23183 = getelementptr inbounds i16, i16* %23182, i64 -32
  %23184 = bitcast i16* %23183 to <16 x i16>*
  %23185 = load <16 x i16>, <16 x i16>* %23184, align 2, !tbaa !399
  %23186 = getelementptr inbounds i16, i16* %23182, i64 -16
  %23187 = bitcast i16* %23186 to <16 x i16>*
  %23188 = load <16 x i16>, <16 x i16>* %23187, align 2, !tbaa !399
  %23189 = zext i32 %.pre-phi3557 to i64
  %23190 = mul nsw i64 %23189, %333
  %23191 = add nsw i64 %23190, %296
  %23192 = getelementptr inbounds i16, i16* %blur_x879, i64 %23191
  %23193 = getelementptr inbounds i16, i16* %23192, i64 -32
  %23194 = bitcast i16* %23193 to <16 x i16>*
  %23195 = load <16 x i16>, <16 x i16>* %23194, align 2, !tbaa !399
  %23196 = getelementptr inbounds i16, i16* %23192, i64 -16
  %23197 = bitcast i16* %23196 to <16 x i16>*
  %23198 = load <16 x i16>, <16 x i16>* %23197, align 2, !tbaa !399
  %23199 = add <16 x i16> %23166, %23156
  %23200 = add <16 x i16> %23199, %23176
  %23201 = add <16 x i16> %23200, %23185
  %23202 = add <16 x i16> %23201, %23195
  %23203 = add <16 x i16> %23169, %23159
  %23204 = add <16 x i16> %23203, %23179
  %23205 = add <16 x i16> %23204, %23188
  %23206 = add <16 x i16> %23205, %23198
  %23207 = shufflevector <16 x i16> %23202, <16 x i16> %23206, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23208 = udiv <32 x i16> %23207, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23209 = shufflevector <32 x i16> %23208, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23210 = sext i32 %a379 to i64
  %23211 = add nsw i64 %23210, 18
  %23212 = mul nsw i64 %23211, %334
  %23213 = add nsw i64 %336, %23212
  %23214 = getelementptr inbounds i16, i16* %263, i64 %23213
  %23215 = getelementptr inbounds i16, i16* %23214, i64 -32
  %23216 = bitcast i16* %23215 to <16 x i16>*
  store <16 x i16> %23209, <16 x i16>* %23216, align 2, !tbaa !401
  %23217 = shufflevector <32 x i16> %23208, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23218 = getelementptr inbounds i16, i16* %23214, i64 -16
  %23219 = bitcast i16* %23218 to <16 x i16>*
  store <16 x i16> %23217, <16 x i16>* %23219, align 2, !tbaa !401
  br label %after_bb1773

"for blur_y.s0.x.x.rebased1788":                  ; preds = %"for blur_y.s0.x.x.rebased1788.preheader", %"consume blur_x1796"
  %indvars.iv3410 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1788.preheader" ], [ %indvars.iv.next3411, %"consume blur_x1796" ]
  %23220 = add nsw i64 %indvars.iv3410, %303
  %23221 = icmp slt i64 %23220, 1
  %23222 = trunc i64 %23220 to i32
  %23223 = shl nsw i32 %23222, 5
  %23224 = icmp sgt i32 %198, %23223
  %23225 = or i1 %23221, %23224
  br i1 %23225, label %"produce blur_x1794", label %"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge"

"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1788"
  %.pre3600 = shl nsw i64 %23220, 5
  br label %"consume blur_x1796"

"end for blur_y.s0.x.x.rebased1789":              ; preds = %"consume blur_x1796", %after_bb1773
  br i1 %304, label %"for blur_y.s0.x.x.rebased1804.preheader", label %"end for blur_y.s0.x.x.rebased1805", !prof !386

"for blur_y.s0.x.x.rebased1804.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1789"
  %23226 = sext i32 %t17381096 to i64
  %23227 = zext i32 %.pre-phi3547 to i64
  %23228 = mul nsw i64 %23227, %337
  %23229 = sub nsw i64 %23228, %298
  %23230 = zext i32 %.pre-phi3543 to i64
  %23231 = mul nsw i64 %23230, %337
  %23232 = sub nsw i64 %23231, %298
  %23233 = zext i32 %.pre-phi3551 to i64
  %23234 = mul nsw i64 %23233, %337
  %23235 = sub nsw i64 %23234, %298
  %23236 = zext i32 %.pre-phi3563 to i64
  %23237 = mul nsw i64 %23236, %337
  %23238 = sub nsw i64 %23237, %298
  %23239 = zext i32 %.pre-phi3557 to i64
  %23240 = mul nsw i64 %23239, %337
  %23241 = sub nsw i64 %23240, %298
  %23242 = sext i32 %a379 to i64
  %23243 = add nsw i64 %23242, 18
  %23244 = mul nsw i64 %23243, %334
  %23245 = add nsw i64 %23244, %338
  br label %"for blur_y.s0.x.x.rebased1804"

"produce blur_x1794":                             ; preds = %"for blur_y.s0.x.x.rebased1788"
  %t10001795 = add nsw i32 %445, %23223
  %23246 = sext i32 %t10001795 to i64
  %23247 = getelementptr inbounds i16, i16* %read_input822, i64 %23246
  %23248 = getelementptr inbounds i16, i16* %23247, i64 1
  %23249 = bitcast i16* %23248 to <16 x i16>*
  %23250 = load <16 x i16>, <16 x i16>* %23249, align 2, !tbaa !396
  %23251 = getelementptr inbounds i16, i16* %23247, i64 17
  %23252 = bitcast i16* %23251 to <16 x i16>*
  %23253 = load <16 x i16>, <16 x i16>* %23252, align 2, !tbaa !396
  %23254 = bitcast i16* %23247 to <16 x i16>*
  %23255 = load <16 x i16>, <16 x i16>* %23254, align 2, !tbaa !396
  %23256 = getelementptr inbounds i16, i16* %23247, i64 16
  %23257 = bitcast i16* %23256 to <16 x i16>*
  %23258 = load <16 x i16>, <16 x i16>* %23257, align 2, !tbaa !396
  %23259 = getelementptr inbounds i16, i16* %23247, i64 2
  %23260 = bitcast i16* %23259 to <16 x i16>*
  %23261 = load <16 x i16>, <16 x i16>* %23260, align 2, !tbaa !396
  %23262 = getelementptr inbounds i16, i16* %23247, i64 18
  %23263 = bitcast i16* %23262 to <16 x i16>*
  %23264 = load <16 x i16>, <16 x i16>* %23263, align 2, !tbaa !396
  %23265 = getelementptr inbounds i16, i16* %23247, i64 4
  %23266 = bitcast i16* %23265 to <16 x i16>*
  %23267 = load <16 x i16>, <16 x i16>* %23266, align 2, !tbaa !396
  %23268 = getelementptr inbounds i16, i16* %23247, i64 20
  %23269 = bitcast i16* %23268 to <16 x i16>*
  %23270 = load <16 x i16>, <16 x i16>* %23269, align 2, !tbaa !396
  %23271 = getelementptr inbounds i16, i16* %23247, i64 3
  %23272 = bitcast i16* %23271 to <16 x i16>*
  %23273 = load <16 x i16>, <16 x i16>* %23272, align 2, !tbaa !396
  %23274 = getelementptr inbounds i16, i16* %23247, i64 19
  %23275 = bitcast i16* %23274 to <16 x i16>*
  %23276 = load <16 x i16>, <16 x i16>* %23275, align 2, !tbaa !396
  %23277 = add <16 x i16> %23255, %23250
  %23278 = add <16 x i16> %23277, %23261
  %23279 = add <16 x i16> %23278, %23267
  %23280 = add <16 x i16> %23279, %23273
  %23281 = add <16 x i16> %23258, %23253
  %23282 = add <16 x i16> %23281, %23264
  %23283 = add <16 x i16> %23282, %23270
  %23284 = add <16 x i16> %23283, %23276
  %23285 = shufflevector <16 x i16> %23280, <16 x i16> %23284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23286 = udiv <32 x i16> %23285, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23287 = shufflevector <32 x i16> %23286, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23288 = shl nsw i64 %23220, 5
  %23289 = add nsw i64 %23288, %23079
  %23290 = getelementptr inbounds i16, i16* %blur_x879, i64 %23289
  %23291 = bitcast i16* %23290 to <16 x i16>*
  store <16 x i16> %23287, <16 x i16>* %23291, align 2, !tbaa !399
  %23292 = shufflevector <32 x i16> %23286, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23293 = getelementptr inbounds i16, i16* %23290, i64 16
  %23294 = bitcast i16* %23293 to <16 x i16>*
  store <16 x i16> %23292, <16 x i16>* %23294, align 2, !tbaa !399
  br label %"consume blur_x1796"

"consume blur_x1796":                             ; preds = %"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge", %"produce blur_x1794"
  %.pre-phi3601 = phi i64 [ %.pre3600, %"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge" ], [ %23288, %"produce blur_x1794" ]
  %23295 = add nsw i64 %23082, %.pre-phi3601
  %23296 = getelementptr inbounds i16, i16* %blur_x879, i64 %23295
  %23297 = bitcast i16* %23296 to <16 x i16>*
  %23298 = load <16 x i16>, <16 x i16>* %23297, align 2, !tbaa !399
  %23299 = getelementptr inbounds i16, i16* %23296, i64 16
  %23300 = bitcast i16* %23299 to <16 x i16>*
  %23301 = load <16 x i16>, <16 x i16>* %23300, align 2, !tbaa !399
  %23302 = add nsw i64 %23085, %.pre-phi3601
  %23303 = getelementptr inbounds i16, i16* %blur_x879, i64 %23302
  %23304 = bitcast i16* %23303 to <16 x i16>*
  %23305 = load <16 x i16>, <16 x i16>* %23304, align 2, !tbaa !399
  %23306 = getelementptr inbounds i16, i16* %23303, i64 16
  %23307 = bitcast i16* %23306 to <16 x i16>*
  %23308 = load <16 x i16>, <16 x i16>* %23307, align 2, !tbaa !399
  %23309 = add nsw i64 %23088, %.pre-phi3601
  %23310 = getelementptr inbounds i16, i16* %blur_x879, i64 %23309
  %23311 = bitcast i16* %23310 to <16 x i16>*
  %23312 = load <16 x i16>, <16 x i16>* %23311, align 2, !tbaa !399
  %23313 = getelementptr inbounds i16, i16* %23310, i64 16
  %23314 = bitcast i16* %23313 to <16 x i16>*
  %23315 = load <16 x i16>, <16 x i16>* %23314, align 2, !tbaa !399
  %23316 = add nsw i64 %23091, %.pre-phi3601
  %23317 = getelementptr inbounds i16, i16* %blur_x879, i64 %23316
  %23318 = bitcast i16* %23317 to <16 x i16>*
  %23319 = load <16 x i16>, <16 x i16>* %23318, align 2, !tbaa !399
  %23320 = getelementptr inbounds i16, i16* %23317, i64 16
  %23321 = bitcast i16* %23320 to <16 x i16>*
  %23322 = load <16 x i16>, <16 x i16>* %23321, align 2, !tbaa !399
  %23323 = add nsw i64 %23094, %.pre-phi3601
  %23324 = getelementptr inbounds i16, i16* %blur_x879, i64 %23323
  %23325 = bitcast i16* %23324 to <16 x i16>*
  %23326 = load <16 x i16>, <16 x i16>* %23325, align 2, !tbaa !399
  %23327 = getelementptr inbounds i16, i16* %23324, i64 16
  %23328 = bitcast i16* %23327 to <16 x i16>*
  %23329 = load <16 x i16>, <16 x i16>* %23328, align 2, !tbaa !399
  %23330 = add <16 x i16> %23305, %23298
  %23331 = add <16 x i16> %23330, %23312
  %23332 = add <16 x i16> %23331, %23319
  %23333 = add <16 x i16> %23332, %23326
  %23334 = add <16 x i16> %23308, %23301
  %23335 = add <16 x i16> %23334, %23315
  %23336 = add <16 x i16> %23335, %23322
  %23337 = add <16 x i16> %23336, %23329
  %23338 = shufflevector <16 x i16> %23333, <16 x i16> %23337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23339 = udiv <32 x i16> %23338, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23340 = shufflevector <32 x i16> %23339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23341 = add nsw i64 %23098, %.pre-phi3601
  %23342 = getelementptr inbounds i16, i16* %263, i64 %23341
  %23343 = bitcast i16* %23342 to <16 x i16>*
  store <16 x i16> %23340, <16 x i16>* %23343, align 2, !tbaa !401
  %23344 = shufflevector <32 x i16> %23339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23345 = getelementptr inbounds i16, i16* %23342, i64 16
  %23346 = bitcast i16* %23345 to <16 x i16>*
  store <16 x i16> %23344, <16 x i16>* %23346, align 2, !tbaa !401
  %indvars.iv.next3411 = add nuw nsw i64 %indvars.iv3410, 1
  %.not2591 = icmp eq i64 %indvars.iv.next3411, %530
  br i1 %.not2591, label %"end for blur_y.s0.x.x.rebased1789", label %"for blur_y.s0.x.x.rebased1788"

"for blur_y.s0.x.x.rebased1804":                  ; preds = %"for blur_y.s0.x.x.rebased1804.preheader", %"consume blur_x1815"
  %blur_y.s0.x.x.rebased1806 = phi i32 [ %23455, %"consume blur_x1815" ], [ 0, %"for blur_y.s0.x.x.rebased1804.preheader" ]
  %23347 = add nsw i32 %blur_y.s0.x.x.rebased1806, %t1626814
  %a4135 = shl nsw i32 %23347, 5
  %23348 = icmp sgt i32 %t1647, %a4135
  %blur_y.s0.x.v0.base.s1807 = select i1 %23348, i32 %a4135, i32 %t1647
  %23349 = icmp slt i32 %23347, 1
  %23350 = icmp sgt i32 %198, %a4135
  %23351 = or i1 %23349, %23350
  br i1 %23351, label %"produce blur_x1812", label %"consume blur_x1815"

"end for blur_y.s0.x.x.rebased1805":              ; preds = %"consume blur_x1815", %"end for blur_y.s0.x.x.rebased1789"
  br i1 %229, label %"produce blur_x1819", label %after_bb1816

"produce blur_x1812":                             ; preds = %"for blur_y.s0.x.x.rebased1804"
  %23352 = icmp slt i32 %blur_y.s0.x.v0.base.s1807, %198
  %blur_x.s0.x.v1.base.s1813 = select i1 %23352, i32 %blur_y.s0.x.v0.base.s1807, i32 %198
  %t10051814 = add nsw i32 %445, %blur_x.s0.x.v1.base.s1813
  %23353 = sext i32 %t10051814 to i64
  %23354 = getelementptr inbounds i16, i16* %read_input822, i64 %23353
  %23355 = getelementptr inbounds i16, i16* %23354, i64 1
  %23356 = bitcast i16* %23355 to <16 x i16>*
  %23357 = load <16 x i16>, <16 x i16>* %23356, align 2, !tbaa !396
  %23358 = getelementptr inbounds i16, i16* %23354, i64 17
  %23359 = bitcast i16* %23358 to <16 x i16>*
  %23360 = load <16 x i16>, <16 x i16>* %23359, align 2, !tbaa !396
  %23361 = bitcast i16* %23354 to <16 x i16>*
  %23362 = load <16 x i16>, <16 x i16>* %23361, align 2, !tbaa !396
  %23363 = getelementptr inbounds i16, i16* %23354, i64 16
  %23364 = bitcast i16* %23363 to <16 x i16>*
  %23365 = load <16 x i16>, <16 x i16>* %23364, align 2, !tbaa !396
  %23366 = getelementptr inbounds i16, i16* %23354, i64 2
  %23367 = bitcast i16* %23366 to <16 x i16>*
  %23368 = load <16 x i16>, <16 x i16>* %23367, align 2, !tbaa !396
  %23369 = getelementptr inbounds i16, i16* %23354, i64 18
  %23370 = bitcast i16* %23369 to <16 x i16>*
  %23371 = load <16 x i16>, <16 x i16>* %23370, align 2, !tbaa !396
  %23372 = getelementptr inbounds i16, i16* %23354, i64 4
  %23373 = bitcast i16* %23372 to <16 x i16>*
  %23374 = load <16 x i16>, <16 x i16>* %23373, align 2, !tbaa !396
  %23375 = getelementptr inbounds i16, i16* %23354, i64 20
  %23376 = bitcast i16* %23375 to <16 x i16>*
  %23377 = load <16 x i16>, <16 x i16>* %23376, align 2, !tbaa !396
  %23378 = getelementptr inbounds i16, i16* %23354, i64 3
  %23379 = bitcast i16* %23378 to <16 x i16>*
  %23380 = load <16 x i16>, <16 x i16>* %23379, align 2, !tbaa !396
  %23381 = getelementptr inbounds i16, i16* %23354, i64 19
  %23382 = bitcast i16* %23381 to <16 x i16>*
  %23383 = load <16 x i16>, <16 x i16>* %23382, align 2, !tbaa !396
  %23384 = add <16 x i16> %23362, %23357
  %23385 = add <16 x i16> %23384, %23368
  %23386 = add <16 x i16> %23385, %23374
  %23387 = add <16 x i16> %23386, %23380
  %23388 = add <16 x i16> %23365, %23360
  %23389 = add <16 x i16> %23388, %23371
  %23390 = add <16 x i16> %23389, %23377
  %23391 = add <16 x i16> %23390, %23383
  %23392 = shufflevector <16 x i16> %23387, <16 x i16> %23391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23393 = udiv <32 x i16> %23392, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23394 = shufflevector <32 x i16> %23393, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23395 = sext i32 %blur_x.s0.x.v1.base.s1813 to i64
  %23396 = add nsw i64 %23395, %23226
  %23397 = getelementptr inbounds i16, i16* %blur_x879, i64 %23396
  %23398 = bitcast i16* %23397 to <16 x i16>*
  store <16 x i16> %23394, <16 x i16>* %23398, align 2, !tbaa !399
  %23399 = shufflevector <32 x i16> %23393, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23400 = getelementptr inbounds i16, i16* %23397, i64 16
  %23401 = bitcast i16* %23400 to <16 x i16>*
  store <16 x i16> %23399, <16 x i16>* %23401, align 2, !tbaa !399
  br label %"consume blur_x1815"

"consume blur_x1815":                             ; preds = %"for blur_y.s0.x.x.rebased1804", %"produce blur_x1812"
  %23402 = sext i32 %blur_y.s0.x.v0.base.s1807 to i64
  %23403 = add nsw i64 %23229, %23402
  %23404 = getelementptr inbounds i16, i16* %blur_x879, i64 %23403
  %23405 = bitcast i16* %23404 to <16 x i16>*
  %23406 = load <16 x i16>, <16 x i16>* %23405, align 2, !tbaa !399
  %23407 = getelementptr inbounds i16, i16* %23404, i64 16
  %23408 = bitcast i16* %23407 to <16 x i16>*
  %23409 = load <16 x i16>, <16 x i16>* %23408, align 2, !tbaa !399
  %23410 = add nsw i64 %23232, %23402
  %23411 = getelementptr inbounds i16, i16* %blur_x879, i64 %23410
  %23412 = bitcast i16* %23411 to <16 x i16>*
  %23413 = load <16 x i16>, <16 x i16>* %23412, align 2, !tbaa !399
  %23414 = getelementptr inbounds i16, i16* %23411, i64 16
  %23415 = bitcast i16* %23414 to <16 x i16>*
  %23416 = load <16 x i16>, <16 x i16>* %23415, align 2, !tbaa !399
  %23417 = add nsw i64 %23235, %23402
  %23418 = getelementptr inbounds i16, i16* %blur_x879, i64 %23417
  %23419 = bitcast i16* %23418 to <16 x i16>*
  %23420 = load <16 x i16>, <16 x i16>* %23419, align 2, !tbaa !399
  %23421 = getelementptr inbounds i16, i16* %23418, i64 16
  %23422 = bitcast i16* %23421 to <16 x i16>*
  %23423 = load <16 x i16>, <16 x i16>* %23422, align 2, !tbaa !399
  %23424 = add nsw i64 %23238, %23402
  %23425 = getelementptr inbounds i16, i16* %blur_x879, i64 %23424
  %23426 = bitcast i16* %23425 to <16 x i16>*
  %23427 = load <16 x i16>, <16 x i16>* %23426, align 2, !tbaa !399
  %23428 = getelementptr inbounds i16, i16* %23425, i64 16
  %23429 = bitcast i16* %23428 to <16 x i16>*
  %23430 = load <16 x i16>, <16 x i16>* %23429, align 2, !tbaa !399
  %23431 = add nsw i64 %23241, %23402
  %23432 = getelementptr inbounds i16, i16* %blur_x879, i64 %23431
  %23433 = bitcast i16* %23432 to <16 x i16>*
  %23434 = load <16 x i16>, <16 x i16>* %23433, align 2, !tbaa !399
  %23435 = getelementptr inbounds i16, i16* %23432, i64 16
  %23436 = bitcast i16* %23435 to <16 x i16>*
  %23437 = load <16 x i16>, <16 x i16>* %23436, align 2, !tbaa !399
  %23438 = add <16 x i16> %23413, %23406
  %23439 = add <16 x i16> %23438, %23420
  %23440 = add <16 x i16> %23439, %23427
  %23441 = add <16 x i16> %23440, %23434
  %23442 = add <16 x i16> %23416, %23409
  %23443 = add <16 x i16> %23442, %23423
  %23444 = add <16 x i16> %23443, %23430
  %23445 = add <16 x i16> %23444, %23437
  %23446 = shufflevector <16 x i16> %23441, <16 x i16> %23445, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23447 = udiv <32 x i16> %23446, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23448 = shufflevector <32 x i16> %23447, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23449 = add nsw i64 %23245, %23402
  %23450 = getelementptr inbounds i16, i16* %263, i64 %23449
  %23451 = bitcast i16* %23450 to <16 x i16>*
  store <16 x i16> %23448, <16 x i16>* %23451, align 2, !tbaa !401
  %23452 = shufflevector <32 x i16> %23447, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23453 = getelementptr inbounds i16, i16* %23450, i64 16
  %23454 = bitcast i16* %23453 to <16 x i16>*
  store <16 x i16> %23452, <16 x i16>* %23454, align 2, !tbaa !401
  %23455 = add nuw nsw i32 %blur_y.s0.x.x.rebased1806, 1
  %.not2590 = icmp eq i32 %23455, %t1683898
  br i1 %.not2590, label %"end for blur_y.s0.x.x.rebased1805", label %"for blur_y.s0.x.x.rebased1804"

after_bb1816:                                     ; preds = %"end for blur_y.s0.x.x.rebased1805", %"produce blur_x1819"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1831.preheader", label %"end for blur_y.s0.x.x.rebased1832", !prof !386

"for blur_y.s0.x.x.rebased1831.preheader":        ; preds = %after_bb1816
  %23456 = sext i32 %t17541139 to i64
  %23457 = zext i32 %.pre-phi3551 to i64
  %23458 = mul nsw i64 %23457, %337
  %23459 = sub nsw i64 %23458, %298
  %23460 = zext i32 %.pre-phi3547 to i64
  %23461 = mul nsw i64 %23460, %337
  %23462 = sub nsw i64 %23461, %298
  %23463 = zext i32 %.pre-phi3557 to i64
  %23464 = mul nsw i64 %23463, %337
  %23465 = sub nsw i64 %23464, %298
  %23466 = zext i32 %.pre-phi3569 to i64
  %23467 = mul nsw i64 %23466, %337
  %23468 = sub nsw i64 %23467, %298
  %23469 = zext i32 %.pre-phi3563 to i64
  %23470 = mul nsw i64 %23469, %337
  %23471 = sub nsw i64 %23470, %298
  %23472 = sext i32 %a379 to i64
  %23473 = add nsw i64 %23472, 19
  %23474 = mul nsw i64 %23473, %334
  %23475 = add nsw i64 %23474, %338
  br label %"for blur_y.s0.x.x.rebased1831"

"produce blur_x1819":                             ; preds = %"end for blur_y.s0.x.x.rebased1805"
  %23476 = getelementptr inbounds i16, i16* %read_input822, i64 %449
  %23477 = getelementptr inbounds i16, i16* %23476, i64 -31
  %23478 = bitcast i16* %23477 to <16 x i16>*
  %23479 = load <16 x i16>, <16 x i16>* %23478, align 2, !tbaa !396
  %23480 = getelementptr inbounds i16, i16* %23476, i64 -15
  %23481 = bitcast i16* %23480 to <16 x i16>*
  %23482 = load <16 x i16>, <16 x i16>* %23481, align 2, !tbaa !396
  %23483 = getelementptr inbounds i16, i16* %23476, i64 -32
  %23484 = bitcast i16* %23483 to <16 x i16>*
  %23485 = load <16 x i16>, <16 x i16>* %23484, align 2, !tbaa !396
  %23486 = getelementptr inbounds i16, i16* %23476, i64 -16
  %23487 = bitcast i16* %23486 to <16 x i16>*
  %23488 = load <16 x i16>, <16 x i16>* %23487, align 2, !tbaa !396
  %23489 = getelementptr inbounds i16, i16* %23476, i64 -30
  %23490 = bitcast i16* %23489 to <16 x i16>*
  %23491 = load <16 x i16>, <16 x i16>* %23490, align 2, !tbaa !396
  %23492 = getelementptr inbounds i16, i16* %23476, i64 -14
  %23493 = bitcast i16* %23492 to <16 x i16>*
  %23494 = load <16 x i16>, <16 x i16>* %23493, align 2, !tbaa !396
  %23495 = getelementptr inbounds i16, i16* %23476, i64 -28
  %23496 = bitcast i16* %23495 to <16 x i16>*
  %23497 = load <16 x i16>, <16 x i16>* %23496, align 2, !tbaa !396
  %23498 = getelementptr inbounds i16, i16* %23476, i64 -12
  %23499 = bitcast i16* %23498 to <16 x i16>*
  %23500 = load <16 x i16>, <16 x i16>* %23499, align 2, !tbaa !396
  %23501 = getelementptr inbounds i16, i16* %23476, i64 -29
  %23502 = bitcast i16* %23501 to <16 x i16>*
  %23503 = load <16 x i16>, <16 x i16>* %23502, align 2, !tbaa !396
  %23504 = getelementptr inbounds i16, i16* %23476, i64 -13
  %23505 = bitcast i16* %23504 to <16 x i16>*
  %23506 = load <16 x i16>, <16 x i16>* %23505, align 2, !tbaa !396
  %23507 = add <16 x i16> %23485, %23479
  %23508 = add <16 x i16> %23507, %23491
  %23509 = add <16 x i16> %23508, %23497
  %23510 = add <16 x i16> %23509, %23503
  %23511 = add <16 x i16> %23488, %23482
  %23512 = add <16 x i16> %23511, %23494
  %23513 = add <16 x i16> %23512, %23500
  %23514 = add <16 x i16> %23513, %23506
  %23515 = shufflevector <16 x i16> %23510, <16 x i16> %23514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23516 = udiv <32 x i16> %23515, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23517 = shufflevector <32 x i16> %23516, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23518 = zext i32 %.pre-phi3569 to i64
  %23519 = mul nsw i64 %299, %23518
  %23520 = add nsw i64 %301, %23519
  %23521 = getelementptr inbounds i16, i16* %blur_x879, i64 %23520
  %23522 = getelementptr inbounds i16, i16* %23521, i64 -32
  %23523 = bitcast i16* %23522 to <16 x i16>*
  store <16 x i16> %23517, <16 x i16>* %23523, align 2, !tbaa !399
  %23524 = shufflevector <32 x i16> %23516, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23525 = getelementptr inbounds i16, i16* %23521, i64 -16
  %23526 = bitcast i16* %23525 to <16 x i16>*
  store <16 x i16> %23524, <16 x i16>* %23526, align 2, !tbaa !399
  %23527 = zext i32 %.pre-phi3551 to i64
  %23528 = mul nsw i64 %23527, %333
  %23529 = add nsw i64 %23528, %296
  %23530 = getelementptr inbounds i16, i16* %blur_x879, i64 %23529
  %23531 = getelementptr inbounds i16, i16* %23530, i64 -32
  %23532 = bitcast i16* %23531 to <16 x i16>*
  %23533 = load <16 x i16>, <16 x i16>* %23532, align 2, !tbaa !399
  %23534 = getelementptr inbounds i16, i16* %23530, i64 -16
  %23535 = bitcast i16* %23534 to <16 x i16>*
  %23536 = load <16 x i16>, <16 x i16>* %23535, align 2, !tbaa !399
  %23537 = zext i32 %.pre-phi3547 to i64
  %23538 = mul nsw i64 %23537, %333
  %23539 = add nsw i64 %23538, %296
  %23540 = getelementptr inbounds i16, i16* %blur_x879, i64 %23539
  %23541 = getelementptr inbounds i16, i16* %23540, i64 -32
  %23542 = bitcast i16* %23541 to <16 x i16>*
  %23543 = load <16 x i16>, <16 x i16>* %23542, align 2, !tbaa !399
  %23544 = getelementptr inbounds i16, i16* %23540, i64 -16
  %23545 = bitcast i16* %23544 to <16 x i16>*
  %23546 = load <16 x i16>, <16 x i16>* %23545, align 2, !tbaa !399
  %23547 = zext i32 %.pre-phi3557 to i64
  %23548 = mul nsw i64 %23547, %333
  %23549 = add nsw i64 %23548, %296
  %23550 = getelementptr inbounds i16, i16* %blur_x879, i64 %23549
  %23551 = getelementptr inbounds i16, i16* %23550, i64 -32
  %23552 = bitcast i16* %23551 to <16 x i16>*
  %23553 = load <16 x i16>, <16 x i16>* %23552, align 2, !tbaa !399
  %23554 = getelementptr inbounds i16, i16* %23550, i64 -16
  %23555 = bitcast i16* %23554 to <16 x i16>*
  %23556 = load <16 x i16>, <16 x i16>* %23555, align 2, !tbaa !399
  %23557 = mul nsw i64 %23518, %333
  %23558 = add nsw i64 %23557, %296
  %23559 = getelementptr inbounds i16, i16* %blur_x879, i64 %23558
  %23560 = getelementptr inbounds i16, i16* %23559, i64 -32
  %23561 = bitcast i16* %23560 to <16 x i16>*
  %23562 = load <16 x i16>, <16 x i16>* %23561, align 2, !tbaa !399
  %23563 = getelementptr inbounds i16, i16* %23559, i64 -16
  %23564 = bitcast i16* %23563 to <16 x i16>*
  %23565 = load <16 x i16>, <16 x i16>* %23564, align 2, !tbaa !399
  %23566 = zext i32 %.pre-phi3563 to i64
  %23567 = mul nsw i64 %23566, %333
  %23568 = add nsw i64 %23567, %296
  %23569 = getelementptr inbounds i16, i16* %blur_x879, i64 %23568
  %23570 = getelementptr inbounds i16, i16* %23569, i64 -32
  %23571 = bitcast i16* %23570 to <16 x i16>*
  %23572 = load <16 x i16>, <16 x i16>* %23571, align 2, !tbaa !399
  %23573 = getelementptr inbounds i16, i16* %23569, i64 -16
  %23574 = bitcast i16* %23573 to <16 x i16>*
  %23575 = load <16 x i16>, <16 x i16>* %23574, align 2, !tbaa !399
  %23576 = add <16 x i16> %23543, %23533
  %23577 = add <16 x i16> %23576, %23553
  %23578 = add <16 x i16> %23577, %23562
  %23579 = add <16 x i16> %23578, %23572
  %23580 = add <16 x i16> %23546, %23536
  %23581 = add <16 x i16> %23580, %23556
  %23582 = add <16 x i16> %23581, %23565
  %23583 = add <16 x i16> %23582, %23575
  %23584 = shufflevector <16 x i16> %23579, <16 x i16> %23583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23585 = udiv <32 x i16> %23584, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23586 = shufflevector <32 x i16> %23585, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23587 = sext i32 %a379 to i64
  %23588 = add nsw i64 %23587, 19
  %23589 = mul nsw i64 %23588, %334
  %23590 = add nsw i64 %336, %23589
  %23591 = getelementptr inbounds i16, i16* %263, i64 %23590
  %23592 = getelementptr inbounds i16, i16* %23591, i64 -32
  %23593 = bitcast i16* %23592 to <16 x i16>*
  store <16 x i16> %23586, <16 x i16>* %23593, align 2, !tbaa !401
  %23594 = shufflevector <32 x i16> %23585, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23595 = getelementptr inbounds i16, i16* %23591, i64 -16
  %23596 = bitcast i16* %23595 to <16 x i16>*
  store <16 x i16> %23594, <16 x i16>* %23596, align 2, !tbaa !401
  br label %after_bb1816

"for blur_y.s0.x.x.rebased1831":                  ; preds = %"for blur_y.s0.x.x.rebased1831.preheader", %"consume blur_x1839"
  %indvars.iv3412 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1831.preheader" ], [ %indvars.iv.next3413, %"consume blur_x1839" ]
  %23597 = add nsw i64 %indvars.iv3412, %303
  %23598 = icmp slt i64 %23597, 1
  %23599 = trunc i64 %23597 to i32
  %23600 = shl nsw i32 %23599, 5
  %23601 = icmp sgt i32 %198, %23600
  %23602 = or i1 %23598, %23601
  br i1 %23602, label %"produce blur_x1837", label %"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge"

"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1831"
  %.pre3602 = shl nsw i64 %23597, 5
  br label %"consume blur_x1839"

"end for blur_y.s0.x.x.rebased1832":              ; preds = %"consume blur_x1839", %after_bb1816
  br i1 %304, label %"for blur_y.s0.x.x.rebased1847.preheader", label %"end for blur_y.s0.x.x.rebased1848", !prof !386

"for blur_y.s0.x.x.rebased1847.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1832"
  %23603 = sext i32 %t17541139 to i64
  %23604 = zext i32 %.pre-phi3551 to i64
  %23605 = mul nsw i64 %23604, %337
  %23606 = sub nsw i64 %23605, %298
  %23607 = zext i32 %.pre-phi3547 to i64
  %23608 = mul nsw i64 %23607, %337
  %23609 = sub nsw i64 %23608, %298
  %23610 = zext i32 %.pre-phi3557 to i64
  %23611 = mul nsw i64 %23610, %337
  %23612 = sub nsw i64 %23611, %298
  %23613 = zext i32 %.pre-phi3569 to i64
  %23614 = mul nsw i64 %23613, %337
  %23615 = sub nsw i64 %23614, %298
  %23616 = zext i32 %.pre-phi3563 to i64
  %23617 = mul nsw i64 %23616, %337
  %23618 = sub nsw i64 %23617, %298
  %23619 = sext i32 %a379 to i64
  %23620 = add nsw i64 %23619, 19
  %23621 = mul nsw i64 %23620, %334
  %23622 = add nsw i64 %23621, %338
  br label %"for blur_y.s0.x.x.rebased1847"

"produce blur_x1837":                             ; preds = %"for blur_y.s0.x.x.rebased1831"
  %t10161838 = add nsw i32 %451, %23600
  %23623 = sext i32 %t10161838 to i64
  %23624 = getelementptr inbounds i16, i16* %read_input822, i64 %23623
  %23625 = getelementptr inbounds i16, i16* %23624, i64 1
  %23626 = bitcast i16* %23625 to <16 x i16>*
  %23627 = load <16 x i16>, <16 x i16>* %23626, align 2, !tbaa !396
  %23628 = getelementptr inbounds i16, i16* %23624, i64 17
  %23629 = bitcast i16* %23628 to <16 x i16>*
  %23630 = load <16 x i16>, <16 x i16>* %23629, align 2, !tbaa !396
  %23631 = bitcast i16* %23624 to <16 x i16>*
  %23632 = load <16 x i16>, <16 x i16>* %23631, align 2, !tbaa !396
  %23633 = getelementptr inbounds i16, i16* %23624, i64 16
  %23634 = bitcast i16* %23633 to <16 x i16>*
  %23635 = load <16 x i16>, <16 x i16>* %23634, align 2, !tbaa !396
  %23636 = getelementptr inbounds i16, i16* %23624, i64 2
  %23637 = bitcast i16* %23636 to <16 x i16>*
  %23638 = load <16 x i16>, <16 x i16>* %23637, align 2, !tbaa !396
  %23639 = getelementptr inbounds i16, i16* %23624, i64 18
  %23640 = bitcast i16* %23639 to <16 x i16>*
  %23641 = load <16 x i16>, <16 x i16>* %23640, align 2, !tbaa !396
  %23642 = getelementptr inbounds i16, i16* %23624, i64 4
  %23643 = bitcast i16* %23642 to <16 x i16>*
  %23644 = load <16 x i16>, <16 x i16>* %23643, align 2, !tbaa !396
  %23645 = getelementptr inbounds i16, i16* %23624, i64 20
  %23646 = bitcast i16* %23645 to <16 x i16>*
  %23647 = load <16 x i16>, <16 x i16>* %23646, align 2, !tbaa !396
  %23648 = getelementptr inbounds i16, i16* %23624, i64 3
  %23649 = bitcast i16* %23648 to <16 x i16>*
  %23650 = load <16 x i16>, <16 x i16>* %23649, align 2, !tbaa !396
  %23651 = getelementptr inbounds i16, i16* %23624, i64 19
  %23652 = bitcast i16* %23651 to <16 x i16>*
  %23653 = load <16 x i16>, <16 x i16>* %23652, align 2, !tbaa !396
  %23654 = add <16 x i16> %23632, %23627
  %23655 = add <16 x i16> %23654, %23638
  %23656 = add <16 x i16> %23655, %23644
  %23657 = add <16 x i16> %23656, %23650
  %23658 = add <16 x i16> %23635, %23630
  %23659 = add <16 x i16> %23658, %23641
  %23660 = add <16 x i16> %23659, %23647
  %23661 = add <16 x i16> %23660, %23653
  %23662 = shufflevector <16 x i16> %23657, <16 x i16> %23661, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23663 = udiv <32 x i16> %23662, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23664 = shufflevector <32 x i16> %23663, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23665 = shl nsw i64 %23597, 5
  %23666 = add nsw i64 %23665, %23456
  %23667 = getelementptr inbounds i16, i16* %blur_x879, i64 %23666
  %23668 = bitcast i16* %23667 to <16 x i16>*
  store <16 x i16> %23664, <16 x i16>* %23668, align 2, !tbaa !399
  %23669 = shufflevector <32 x i16> %23663, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23670 = getelementptr inbounds i16, i16* %23667, i64 16
  %23671 = bitcast i16* %23670 to <16 x i16>*
  store <16 x i16> %23669, <16 x i16>* %23671, align 2, !tbaa !399
  br label %"consume blur_x1839"

"consume blur_x1839":                             ; preds = %"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge", %"produce blur_x1837"
  %.pre-phi3603 = phi i64 [ %.pre3602, %"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge" ], [ %23665, %"produce blur_x1837" ]
  %23672 = add nsw i64 %23459, %.pre-phi3603
  %23673 = getelementptr inbounds i16, i16* %blur_x879, i64 %23672
  %23674 = bitcast i16* %23673 to <16 x i16>*
  %23675 = load <16 x i16>, <16 x i16>* %23674, align 2, !tbaa !399
  %23676 = getelementptr inbounds i16, i16* %23673, i64 16
  %23677 = bitcast i16* %23676 to <16 x i16>*
  %23678 = load <16 x i16>, <16 x i16>* %23677, align 2, !tbaa !399
  %23679 = add nsw i64 %23462, %.pre-phi3603
  %23680 = getelementptr inbounds i16, i16* %blur_x879, i64 %23679
  %23681 = bitcast i16* %23680 to <16 x i16>*
  %23682 = load <16 x i16>, <16 x i16>* %23681, align 2, !tbaa !399
  %23683 = getelementptr inbounds i16, i16* %23680, i64 16
  %23684 = bitcast i16* %23683 to <16 x i16>*
  %23685 = load <16 x i16>, <16 x i16>* %23684, align 2, !tbaa !399
  %23686 = add nsw i64 %23465, %.pre-phi3603
  %23687 = getelementptr inbounds i16, i16* %blur_x879, i64 %23686
  %23688 = bitcast i16* %23687 to <16 x i16>*
  %23689 = load <16 x i16>, <16 x i16>* %23688, align 2, !tbaa !399
  %23690 = getelementptr inbounds i16, i16* %23687, i64 16
  %23691 = bitcast i16* %23690 to <16 x i16>*
  %23692 = load <16 x i16>, <16 x i16>* %23691, align 2, !tbaa !399
  %23693 = add nsw i64 %23468, %.pre-phi3603
  %23694 = getelementptr inbounds i16, i16* %blur_x879, i64 %23693
  %23695 = bitcast i16* %23694 to <16 x i16>*
  %23696 = load <16 x i16>, <16 x i16>* %23695, align 2, !tbaa !399
  %23697 = getelementptr inbounds i16, i16* %23694, i64 16
  %23698 = bitcast i16* %23697 to <16 x i16>*
  %23699 = load <16 x i16>, <16 x i16>* %23698, align 2, !tbaa !399
  %23700 = add nsw i64 %23471, %.pre-phi3603
  %23701 = getelementptr inbounds i16, i16* %blur_x879, i64 %23700
  %23702 = bitcast i16* %23701 to <16 x i16>*
  %23703 = load <16 x i16>, <16 x i16>* %23702, align 2, !tbaa !399
  %23704 = getelementptr inbounds i16, i16* %23701, i64 16
  %23705 = bitcast i16* %23704 to <16 x i16>*
  %23706 = load <16 x i16>, <16 x i16>* %23705, align 2, !tbaa !399
  %23707 = add <16 x i16> %23682, %23675
  %23708 = add <16 x i16> %23707, %23689
  %23709 = add <16 x i16> %23708, %23696
  %23710 = add <16 x i16> %23709, %23703
  %23711 = add <16 x i16> %23685, %23678
  %23712 = add <16 x i16> %23711, %23692
  %23713 = add <16 x i16> %23712, %23699
  %23714 = add <16 x i16> %23713, %23706
  %23715 = shufflevector <16 x i16> %23710, <16 x i16> %23714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23716 = udiv <32 x i16> %23715, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23717 = shufflevector <32 x i16> %23716, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23718 = add nsw i64 %23475, %.pre-phi3603
  %23719 = getelementptr inbounds i16, i16* %263, i64 %23718
  %23720 = bitcast i16* %23719 to <16 x i16>*
  store <16 x i16> %23717, <16 x i16>* %23720, align 2, !tbaa !401
  %23721 = shufflevector <32 x i16> %23716, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23722 = getelementptr inbounds i16, i16* %23719, i64 16
  %23723 = bitcast i16* %23722 to <16 x i16>*
  store <16 x i16> %23721, <16 x i16>* %23723, align 2, !tbaa !401
  %indvars.iv.next3413 = add nuw nsw i64 %indvars.iv3412, 1
  %.not2587 = icmp eq i64 %indvars.iv.next3413, %530
  br i1 %.not2587, label %"end for blur_y.s0.x.x.rebased1832", label %"for blur_y.s0.x.x.rebased1831"

"for blur_y.s0.x.x.rebased1847":                  ; preds = %"for blur_y.s0.x.x.rebased1847.preheader", %"consume blur_x1858"
  %blur_y.s0.x.x.rebased1849 = phi i32 [ %23832, %"consume blur_x1858" ], [ 0, %"for blur_y.s0.x.x.rebased1847.preheader" ]
  %23724 = add nsw i32 %blur_y.s0.x.x.rebased1849, %t1626814
  %a4292 = shl nsw i32 %23724, 5
  %23725 = icmp sgt i32 %t1647, %a4292
  %blur_y.s0.x.v0.base.s1850 = select i1 %23725, i32 %a4292, i32 %t1647
  %23726 = icmp slt i32 %23724, 1
  %23727 = icmp sgt i32 %198, %a4292
  %23728 = or i1 %23726, %23727
  br i1 %23728, label %"produce blur_x1855", label %"consume blur_x1858"

"end for blur_y.s0.x.x.rebased1848":              ; preds = %"consume blur_x1858", %"end for blur_y.s0.x.x.rebased1832"
  br i1 %229, label %"produce blur_x1862", label %after_bb1859

"produce blur_x1855":                             ; preds = %"for blur_y.s0.x.x.rebased1847"
  %23729 = icmp slt i32 %blur_y.s0.x.v0.base.s1850, %198
  %blur_x.s0.x.v1.base.s1856 = select i1 %23729, i32 %blur_y.s0.x.v0.base.s1850, i32 %198
  %t10211857 = add nsw i32 %451, %blur_x.s0.x.v1.base.s1856
  %23730 = sext i32 %t10211857 to i64
  %23731 = getelementptr inbounds i16, i16* %read_input822, i64 %23730
  %23732 = getelementptr inbounds i16, i16* %23731, i64 1
  %23733 = bitcast i16* %23732 to <16 x i16>*
  %23734 = load <16 x i16>, <16 x i16>* %23733, align 2, !tbaa !396
  %23735 = getelementptr inbounds i16, i16* %23731, i64 17
  %23736 = bitcast i16* %23735 to <16 x i16>*
  %23737 = load <16 x i16>, <16 x i16>* %23736, align 2, !tbaa !396
  %23738 = bitcast i16* %23731 to <16 x i16>*
  %23739 = load <16 x i16>, <16 x i16>* %23738, align 2, !tbaa !396
  %23740 = getelementptr inbounds i16, i16* %23731, i64 16
  %23741 = bitcast i16* %23740 to <16 x i16>*
  %23742 = load <16 x i16>, <16 x i16>* %23741, align 2, !tbaa !396
  %23743 = getelementptr inbounds i16, i16* %23731, i64 2
  %23744 = bitcast i16* %23743 to <16 x i16>*
  %23745 = load <16 x i16>, <16 x i16>* %23744, align 2, !tbaa !396
  %23746 = getelementptr inbounds i16, i16* %23731, i64 18
  %23747 = bitcast i16* %23746 to <16 x i16>*
  %23748 = load <16 x i16>, <16 x i16>* %23747, align 2, !tbaa !396
  %23749 = getelementptr inbounds i16, i16* %23731, i64 4
  %23750 = bitcast i16* %23749 to <16 x i16>*
  %23751 = load <16 x i16>, <16 x i16>* %23750, align 2, !tbaa !396
  %23752 = getelementptr inbounds i16, i16* %23731, i64 20
  %23753 = bitcast i16* %23752 to <16 x i16>*
  %23754 = load <16 x i16>, <16 x i16>* %23753, align 2, !tbaa !396
  %23755 = getelementptr inbounds i16, i16* %23731, i64 3
  %23756 = bitcast i16* %23755 to <16 x i16>*
  %23757 = load <16 x i16>, <16 x i16>* %23756, align 2, !tbaa !396
  %23758 = getelementptr inbounds i16, i16* %23731, i64 19
  %23759 = bitcast i16* %23758 to <16 x i16>*
  %23760 = load <16 x i16>, <16 x i16>* %23759, align 2, !tbaa !396
  %23761 = add <16 x i16> %23739, %23734
  %23762 = add <16 x i16> %23761, %23745
  %23763 = add <16 x i16> %23762, %23751
  %23764 = add <16 x i16> %23763, %23757
  %23765 = add <16 x i16> %23742, %23737
  %23766 = add <16 x i16> %23765, %23748
  %23767 = add <16 x i16> %23766, %23754
  %23768 = add <16 x i16> %23767, %23760
  %23769 = shufflevector <16 x i16> %23764, <16 x i16> %23768, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23770 = udiv <32 x i16> %23769, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23771 = shufflevector <32 x i16> %23770, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23772 = sext i32 %blur_x.s0.x.v1.base.s1856 to i64
  %23773 = add nsw i64 %23772, %23603
  %23774 = getelementptr inbounds i16, i16* %blur_x879, i64 %23773
  %23775 = bitcast i16* %23774 to <16 x i16>*
  store <16 x i16> %23771, <16 x i16>* %23775, align 2, !tbaa !399
  %23776 = shufflevector <32 x i16> %23770, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23777 = getelementptr inbounds i16, i16* %23774, i64 16
  %23778 = bitcast i16* %23777 to <16 x i16>*
  store <16 x i16> %23776, <16 x i16>* %23778, align 2, !tbaa !399
  br label %"consume blur_x1858"

"consume blur_x1858":                             ; preds = %"for blur_y.s0.x.x.rebased1847", %"produce blur_x1855"
  %23779 = sext i32 %blur_y.s0.x.v0.base.s1850 to i64
  %23780 = add nsw i64 %23606, %23779
  %23781 = getelementptr inbounds i16, i16* %blur_x879, i64 %23780
  %23782 = bitcast i16* %23781 to <16 x i16>*
  %23783 = load <16 x i16>, <16 x i16>* %23782, align 2, !tbaa !399
  %23784 = getelementptr inbounds i16, i16* %23781, i64 16
  %23785 = bitcast i16* %23784 to <16 x i16>*
  %23786 = load <16 x i16>, <16 x i16>* %23785, align 2, !tbaa !399
  %23787 = add nsw i64 %23609, %23779
  %23788 = getelementptr inbounds i16, i16* %blur_x879, i64 %23787
  %23789 = bitcast i16* %23788 to <16 x i16>*
  %23790 = load <16 x i16>, <16 x i16>* %23789, align 2, !tbaa !399
  %23791 = getelementptr inbounds i16, i16* %23788, i64 16
  %23792 = bitcast i16* %23791 to <16 x i16>*
  %23793 = load <16 x i16>, <16 x i16>* %23792, align 2, !tbaa !399
  %23794 = add nsw i64 %23612, %23779
  %23795 = getelementptr inbounds i16, i16* %blur_x879, i64 %23794
  %23796 = bitcast i16* %23795 to <16 x i16>*
  %23797 = load <16 x i16>, <16 x i16>* %23796, align 2, !tbaa !399
  %23798 = getelementptr inbounds i16, i16* %23795, i64 16
  %23799 = bitcast i16* %23798 to <16 x i16>*
  %23800 = load <16 x i16>, <16 x i16>* %23799, align 2, !tbaa !399
  %23801 = add nsw i64 %23615, %23779
  %23802 = getelementptr inbounds i16, i16* %blur_x879, i64 %23801
  %23803 = bitcast i16* %23802 to <16 x i16>*
  %23804 = load <16 x i16>, <16 x i16>* %23803, align 2, !tbaa !399
  %23805 = getelementptr inbounds i16, i16* %23802, i64 16
  %23806 = bitcast i16* %23805 to <16 x i16>*
  %23807 = load <16 x i16>, <16 x i16>* %23806, align 2, !tbaa !399
  %23808 = add nsw i64 %23618, %23779
  %23809 = getelementptr inbounds i16, i16* %blur_x879, i64 %23808
  %23810 = bitcast i16* %23809 to <16 x i16>*
  %23811 = load <16 x i16>, <16 x i16>* %23810, align 2, !tbaa !399
  %23812 = getelementptr inbounds i16, i16* %23809, i64 16
  %23813 = bitcast i16* %23812 to <16 x i16>*
  %23814 = load <16 x i16>, <16 x i16>* %23813, align 2, !tbaa !399
  %23815 = add <16 x i16> %23790, %23783
  %23816 = add <16 x i16> %23815, %23797
  %23817 = add <16 x i16> %23816, %23804
  %23818 = add <16 x i16> %23817, %23811
  %23819 = add <16 x i16> %23793, %23786
  %23820 = add <16 x i16> %23819, %23800
  %23821 = add <16 x i16> %23820, %23807
  %23822 = add <16 x i16> %23821, %23814
  %23823 = shufflevector <16 x i16> %23818, <16 x i16> %23822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23824 = udiv <32 x i16> %23823, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23825 = shufflevector <32 x i16> %23824, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23826 = add nsw i64 %23622, %23779
  %23827 = getelementptr inbounds i16, i16* %263, i64 %23826
  %23828 = bitcast i16* %23827 to <16 x i16>*
  store <16 x i16> %23825, <16 x i16>* %23828, align 2, !tbaa !401
  %23829 = shufflevector <32 x i16> %23824, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23830 = getelementptr inbounds i16, i16* %23827, i64 16
  %23831 = bitcast i16* %23830 to <16 x i16>*
  store <16 x i16> %23829, <16 x i16>* %23831, align 2, !tbaa !401
  %23832 = add nuw nsw i32 %blur_y.s0.x.x.rebased1849, 1
  %.not2586 = icmp eq i32 %23832, %t1683898
  br i1 %.not2586, label %"end for blur_y.s0.x.x.rebased1848", label %"for blur_y.s0.x.x.rebased1847"

after_bb1859:                                     ; preds = %"end for blur_y.s0.x.x.rebased1848", %"produce blur_x1862"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1874.preheader", label %"end for blur_y.s0.x.x.rebased1875", !prof !386

"for blur_y.s0.x.x.rebased1874.preheader":        ; preds = %after_bb1859
  %23833 = sext i32 %t1682886 to i64
  %23834 = zext i32 %.pre-phi3557 to i64
  %23835 = mul nsw i64 %23834, %337
  %23836 = sub nsw i64 %23835, %298
  %23837 = zext i32 %.pre-phi3551 to i64
  %23838 = mul nsw i64 %23837, %337
  %23839 = sub nsw i64 %23838, %298
  %23840 = zext i32 %.pre-phi3563 to i64
  %23841 = mul nsw i64 %23840, %337
  %23842 = sub nsw i64 %23841, %298
  %23843 = zext i32 %.pre-phi3535 to i64
  %23844 = mul nsw i64 %23843, %337
  %23845 = sub nsw i64 %23844, %298
  %23846 = zext i32 %.pre-phi3569 to i64
  %23847 = mul nsw i64 %23846, %337
  %23848 = sub nsw i64 %23847, %298
  %23849 = sext i32 %a379 to i64
  %23850 = add nsw i64 %23849, 20
  %23851 = mul nsw i64 %23850, %334
  %23852 = add nsw i64 %23851, %338
  br label %"for blur_y.s0.x.x.rebased1874"

"produce blur_x1862":                             ; preds = %"end for blur_y.s0.x.x.rebased1848"
  %23853 = getelementptr inbounds i16, i16* %read_input822, i64 %455
  %23854 = getelementptr inbounds i16, i16* %23853, i64 -31
  %23855 = bitcast i16* %23854 to <16 x i16>*
  %23856 = load <16 x i16>, <16 x i16>* %23855, align 2, !tbaa !396
  %23857 = getelementptr inbounds i16, i16* %23853, i64 -15
  %23858 = bitcast i16* %23857 to <16 x i16>*
  %23859 = load <16 x i16>, <16 x i16>* %23858, align 2, !tbaa !396
  %23860 = getelementptr inbounds i16, i16* %23853, i64 -32
  %23861 = bitcast i16* %23860 to <16 x i16>*
  %23862 = load <16 x i16>, <16 x i16>* %23861, align 2, !tbaa !396
  %23863 = getelementptr inbounds i16, i16* %23853, i64 -16
  %23864 = bitcast i16* %23863 to <16 x i16>*
  %23865 = load <16 x i16>, <16 x i16>* %23864, align 2, !tbaa !396
  %23866 = getelementptr inbounds i16, i16* %23853, i64 -30
  %23867 = bitcast i16* %23866 to <16 x i16>*
  %23868 = load <16 x i16>, <16 x i16>* %23867, align 2, !tbaa !396
  %23869 = getelementptr inbounds i16, i16* %23853, i64 -14
  %23870 = bitcast i16* %23869 to <16 x i16>*
  %23871 = load <16 x i16>, <16 x i16>* %23870, align 2, !tbaa !396
  %23872 = getelementptr inbounds i16, i16* %23853, i64 -28
  %23873 = bitcast i16* %23872 to <16 x i16>*
  %23874 = load <16 x i16>, <16 x i16>* %23873, align 2, !tbaa !396
  %23875 = getelementptr inbounds i16, i16* %23853, i64 -12
  %23876 = bitcast i16* %23875 to <16 x i16>*
  %23877 = load <16 x i16>, <16 x i16>* %23876, align 2, !tbaa !396
  %23878 = getelementptr inbounds i16, i16* %23853, i64 -29
  %23879 = bitcast i16* %23878 to <16 x i16>*
  %23880 = load <16 x i16>, <16 x i16>* %23879, align 2, !tbaa !396
  %23881 = getelementptr inbounds i16, i16* %23853, i64 -13
  %23882 = bitcast i16* %23881 to <16 x i16>*
  %23883 = load <16 x i16>, <16 x i16>* %23882, align 2, !tbaa !396
  %23884 = add <16 x i16> %23862, %23856
  %23885 = add <16 x i16> %23884, %23868
  %23886 = add <16 x i16> %23885, %23874
  %23887 = add <16 x i16> %23886, %23880
  %23888 = add <16 x i16> %23865, %23859
  %23889 = add <16 x i16> %23888, %23871
  %23890 = add <16 x i16> %23889, %23877
  %23891 = add <16 x i16> %23890, %23883
  %23892 = shufflevector <16 x i16> %23887, <16 x i16> %23891, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23893 = udiv <32 x i16> %23892, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23894 = shufflevector <32 x i16> %23893, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23895 = zext i32 %.pre-phi3535 to i64
  %23896 = mul nsw i64 %299, %23895
  %23897 = add nsw i64 %301, %23896
  %23898 = getelementptr inbounds i16, i16* %blur_x879, i64 %23897
  %23899 = getelementptr inbounds i16, i16* %23898, i64 -32
  %23900 = bitcast i16* %23899 to <16 x i16>*
  store <16 x i16> %23894, <16 x i16>* %23900, align 2, !tbaa !399
  %23901 = shufflevector <32 x i16> %23893, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23902 = getelementptr inbounds i16, i16* %23898, i64 -16
  %23903 = bitcast i16* %23902 to <16 x i16>*
  store <16 x i16> %23901, <16 x i16>* %23903, align 2, !tbaa !399
  %23904 = zext i32 %.pre-phi3557 to i64
  %23905 = mul nsw i64 %23904, %333
  %23906 = add nsw i64 %23905, %296
  %23907 = getelementptr inbounds i16, i16* %blur_x879, i64 %23906
  %23908 = getelementptr inbounds i16, i16* %23907, i64 -32
  %23909 = bitcast i16* %23908 to <16 x i16>*
  %23910 = load <16 x i16>, <16 x i16>* %23909, align 2, !tbaa !399
  %23911 = getelementptr inbounds i16, i16* %23907, i64 -16
  %23912 = bitcast i16* %23911 to <16 x i16>*
  %23913 = load <16 x i16>, <16 x i16>* %23912, align 2, !tbaa !399
  %23914 = zext i32 %.pre-phi3551 to i64
  %23915 = mul nsw i64 %23914, %333
  %23916 = add nsw i64 %23915, %296
  %23917 = getelementptr inbounds i16, i16* %blur_x879, i64 %23916
  %23918 = getelementptr inbounds i16, i16* %23917, i64 -32
  %23919 = bitcast i16* %23918 to <16 x i16>*
  %23920 = load <16 x i16>, <16 x i16>* %23919, align 2, !tbaa !399
  %23921 = getelementptr inbounds i16, i16* %23917, i64 -16
  %23922 = bitcast i16* %23921 to <16 x i16>*
  %23923 = load <16 x i16>, <16 x i16>* %23922, align 2, !tbaa !399
  %23924 = zext i32 %.pre-phi3563 to i64
  %23925 = mul nsw i64 %23924, %333
  %23926 = add nsw i64 %23925, %296
  %23927 = getelementptr inbounds i16, i16* %blur_x879, i64 %23926
  %23928 = getelementptr inbounds i16, i16* %23927, i64 -32
  %23929 = bitcast i16* %23928 to <16 x i16>*
  %23930 = load <16 x i16>, <16 x i16>* %23929, align 2, !tbaa !399
  %23931 = getelementptr inbounds i16, i16* %23927, i64 -16
  %23932 = bitcast i16* %23931 to <16 x i16>*
  %23933 = load <16 x i16>, <16 x i16>* %23932, align 2, !tbaa !399
  %23934 = mul nsw i64 %23895, %333
  %23935 = add nsw i64 %23934, %296
  %23936 = getelementptr inbounds i16, i16* %blur_x879, i64 %23935
  %23937 = getelementptr inbounds i16, i16* %23936, i64 -32
  %23938 = bitcast i16* %23937 to <16 x i16>*
  %23939 = load <16 x i16>, <16 x i16>* %23938, align 2, !tbaa !399
  %23940 = getelementptr inbounds i16, i16* %23936, i64 -16
  %23941 = bitcast i16* %23940 to <16 x i16>*
  %23942 = load <16 x i16>, <16 x i16>* %23941, align 2, !tbaa !399
  %23943 = zext i32 %.pre-phi3569 to i64
  %23944 = mul nsw i64 %23943, %333
  %23945 = add nsw i64 %23944, %296
  %23946 = getelementptr inbounds i16, i16* %blur_x879, i64 %23945
  %23947 = getelementptr inbounds i16, i16* %23946, i64 -32
  %23948 = bitcast i16* %23947 to <16 x i16>*
  %23949 = load <16 x i16>, <16 x i16>* %23948, align 2, !tbaa !399
  %23950 = getelementptr inbounds i16, i16* %23946, i64 -16
  %23951 = bitcast i16* %23950 to <16 x i16>*
  %23952 = load <16 x i16>, <16 x i16>* %23951, align 2, !tbaa !399
  %23953 = add <16 x i16> %23920, %23910
  %23954 = add <16 x i16> %23953, %23930
  %23955 = add <16 x i16> %23954, %23939
  %23956 = add <16 x i16> %23955, %23949
  %23957 = add <16 x i16> %23923, %23913
  %23958 = add <16 x i16> %23957, %23933
  %23959 = add <16 x i16> %23958, %23942
  %23960 = add <16 x i16> %23959, %23952
  %23961 = shufflevector <16 x i16> %23956, <16 x i16> %23960, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23962 = udiv <32 x i16> %23961, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %23963 = shufflevector <32 x i16> %23962, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23964 = sext i32 %a379 to i64
  %23965 = add nsw i64 %23964, 20
  %23966 = mul nsw i64 %23965, %334
  %23967 = add nsw i64 %336, %23966
  %23968 = getelementptr inbounds i16, i16* %263, i64 %23967
  %23969 = getelementptr inbounds i16, i16* %23968, i64 -32
  %23970 = bitcast i16* %23969 to <16 x i16>*
  store <16 x i16> %23963, <16 x i16>* %23970, align 2, !tbaa !401
  %23971 = shufflevector <32 x i16> %23962, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23972 = getelementptr inbounds i16, i16* %23968, i64 -16
  %23973 = bitcast i16* %23972 to <16 x i16>*
  store <16 x i16> %23971, <16 x i16>* %23973, align 2, !tbaa !401
  br label %after_bb1859

"for blur_y.s0.x.x.rebased1874":                  ; preds = %"for blur_y.s0.x.x.rebased1874.preheader", %"consume blur_x1882"
  %indvars.iv3414 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1874.preheader" ], [ %indvars.iv.next3415, %"consume blur_x1882" ]
  %23974 = add nsw i64 %indvars.iv3414, %303
  %23975 = icmp slt i64 %23974, 1
  %23976 = trunc i64 %23974 to i32
  %23977 = shl nsw i32 %23976, 5
  %23978 = icmp sgt i32 %198, %23977
  %23979 = or i1 %23975, %23978
  br i1 %23979, label %"produce blur_x1880", label %"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge"

"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1874"
  %.pre3604 = shl nsw i64 %23974, 5
  br label %"consume blur_x1882"

"end for blur_y.s0.x.x.rebased1875":              ; preds = %"consume blur_x1882", %after_bb1859
  br i1 %304, label %"for blur_y.s0.x.x.rebased1890.preheader", label %"end for blur_y.s0.x.x.rebased1891", !prof !386

"for blur_y.s0.x.x.rebased1890.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1875"
  %23980 = sext i32 %t1682886 to i64
  %23981 = zext i32 %.pre-phi3557 to i64
  %23982 = mul nsw i64 %23981, %337
  %23983 = sub nsw i64 %23982, %298
  %23984 = zext i32 %.pre-phi3551 to i64
  %23985 = mul nsw i64 %23984, %337
  %23986 = sub nsw i64 %23985, %298
  %23987 = zext i32 %.pre-phi3563 to i64
  %23988 = mul nsw i64 %23987, %337
  %23989 = sub nsw i64 %23988, %298
  %23990 = zext i32 %.pre-phi3535 to i64
  %23991 = mul nsw i64 %23990, %337
  %23992 = sub nsw i64 %23991, %298
  %23993 = zext i32 %.pre-phi3569 to i64
  %23994 = mul nsw i64 %23993, %337
  %23995 = sub nsw i64 %23994, %298
  %23996 = sext i32 %a379 to i64
  %23997 = add nsw i64 %23996, 20
  %23998 = mul nsw i64 %23997, %334
  %23999 = add nsw i64 %23998, %338
  br label %"for blur_y.s0.x.x.rebased1890"

"produce blur_x1880":                             ; preds = %"for blur_y.s0.x.x.rebased1874"
  %t10321881 = add nsw i32 %457, %23977
  %24000 = sext i32 %t10321881 to i64
  %24001 = getelementptr inbounds i16, i16* %read_input822, i64 %24000
  %24002 = getelementptr inbounds i16, i16* %24001, i64 1
  %24003 = bitcast i16* %24002 to <16 x i16>*
  %24004 = load <16 x i16>, <16 x i16>* %24003, align 2, !tbaa !396
  %24005 = getelementptr inbounds i16, i16* %24001, i64 17
  %24006 = bitcast i16* %24005 to <16 x i16>*
  %24007 = load <16 x i16>, <16 x i16>* %24006, align 2, !tbaa !396
  %24008 = bitcast i16* %24001 to <16 x i16>*
  %24009 = load <16 x i16>, <16 x i16>* %24008, align 2, !tbaa !396
  %24010 = getelementptr inbounds i16, i16* %24001, i64 16
  %24011 = bitcast i16* %24010 to <16 x i16>*
  %24012 = load <16 x i16>, <16 x i16>* %24011, align 2, !tbaa !396
  %24013 = getelementptr inbounds i16, i16* %24001, i64 2
  %24014 = bitcast i16* %24013 to <16 x i16>*
  %24015 = load <16 x i16>, <16 x i16>* %24014, align 2, !tbaa !396
  %24016 = getelementptr inbounds i16, i16* %24001, i64 18
  %24017 = bitcast i16* %24016 to <16 x i16>*
  %24018 = load <16 x i16>, <16 x i16>* %24017, align 2, !tbaa !396
  %24019 = getelementptr inbounds i16, i16* %24001, i64 4
  %24020 = bitcast i16* %24019 to <16 x i16>*
  %24021 = load <16 x i16>, <16 x i16>* %24020, align 2, !tbaa !396
  %24022 = getelementptr inbounds i16, i16* %24001, i64 20
  %24023 = bitcast i16* %24022 to <16 x i16>*
  %24024 = load <16 x i16>, <16 x i16>* %24023, align 2, !tbaa !396
  %24025 = getelementptr inbounds i16, i16* %24001, i64 3
  %24026 = bitcast i16* %24025 to <16 x i16>*
  %24027 = load <16 x i16>, <16 x i16>* %24026, align 2, !tbaa !396
  %24028 = getelementptr inbounds i16, i16* %24001, i64 19
  %24029 = bitcast i16* %24028 to <16 x i16>*
  %24030 = load <16 x i16>, <16 x i16>* %24029, align 2, !tbaa !396
  %24031 = add <16 x i16> %24009, %24004
  %24032 = add <16 x i16> %24031, %24015
  %24033 = add <16 x i16> %24032, %24021
  %24034 = add <16 x i16> %24033, %24027
  %24035 = add <16 x i16> %24012, %24007
  %24036 = add <16 x i16> %24035, %24018
  %24037 = add <16 x i16> %24036, %24024
  %24038 = add <16 x i16> %24037, %24030
  %24039 = shufflevector <16 x i16> %24034, <16 x i16> %24038, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24040 = udiv <32 x i16> %24039, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24041 = shufflevector <32 x i16> %24040, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24042 = shl nsw i64 %23974, 5
  %24043 = add nsw i64 %24042, %23833
  %24044 = getelementptr inbounds i16, i16* %blur_x879, i64 %24043
  %24045 = bitcast i16* %24044 to <16 x i16>*
  store <16 x i16> %24041, <16 x i16>* %24045, align 2, !tbaa !399
  %24046 = shufflevector <32 x i16> %24040, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24047 = getelementptr inbounds i16, i16* %24044, i64 16
  %24048 = bitcast i16* %24047 to <16 x i16>*
  store <16 x i16> %24046, <16 x i16>* %24048, align 2, !tbaa !399
  br label %"consume blur_x1882"

"consume blur_x1882":                             ; preds = %"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge", %"produce blur_x1880"
  %.pre-phi3605 = phi i64 [ %.pre3604, %"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge" ], [ %24042, %"produce blur_x1880" ]
  %24049 = add nsw i64 %23836, %.pre-phi3605
  %24050 = getelementptr inbounds i16, i16* %blur_x879, i64 %24049
  %24051 = bitcast i16* %24050 to <16 x i16>*
  %24052 = load <16 x i16>, <16 x i16>* %24051, align 2, !tbaa !399
  %24053 = getelementptr inbounds i16, i16* %24050, i64 16
  %24054 = bitcast i16* %24053 to <16 x i16>*
  %24055 = load <16 x i16>, <16 x i16>* %24054, align 2, !tbaa !399
  %24056 = add nsw i64 %23839, %.pre-phi3605
  %24057 = getelementptr inbounds i16, i16* %blur_x879, i64 %24056
  %24058 = bitcast i16* %24057 to <16 x i16>*
  %24059 = load <16 x i16>, <16 x i16>* %24058, align 2, !tbaa !399
  %24060 = getelementptr inbounds i16, i16* %24057, i64 16
  %24061 = bitcast i16* %24060 to <16 x i16>*
  %24062 = load <16 x i16>, <16 x i16>* %24061, align 2, !tbaa !399
  %24063 = add nsw i64 %23842, %.pre-phi3605
  %24064 = getelementptr inbounds i16, i16* %blur_x879, i64 %24063
  %24065 = bitcast i16* %24064 to <16 x i16>*
  %24066 = load <16 x i16>, <16 x i16>* %24065, align 2, !tbaa !399
  %24067 = getelementptr inbounds i16, i16* %24064, i64 16
  %24068 = bitcast i16* %24067 to <16 x i16>*
  %24069 = load <16 x i16>, <16 x i16>* %24068, align 2, !tbaa !399
  %24070 = add nsw i64 %23845, %.pre-phi3605
  %24071 = getelementptr inbounds i16, i16* %blur_x879, i64 %24070
  %24072 = bitcast i16* %24071 to <16 x i16>*
  %24073 = load <16 x i16>, <16 x i16>* %24072, align 2, !tbaa !399
  %24074 = getelementptr inbounds i16, i16* %24071, i64 16
  %24075 = bitcast i16* %24074 to <16 x i16>*
  %24076 = load <16 x i16>, <16 x i16>* %24075, align 2, !tbaa !399
  %24077 = add nsw i64 %23848, %.pre-phi3605
  %24078 = getelementptr inbounds i16, i16* %blur_x879, i64 %24077
  %24079 = bitcast i16* %24078 to <16 x i16>*
  %24080 = load <16 x i16>, <16 x i16>* %24079, align 2, !tbaa !399
  %24081 = getelementptr inbounds i16, i16* %24078, i64 16
  %24082 = bitcast i16* %24081 to <16 x i16>*
  %24083 = load <16 x i16>, <16 x i16>* %24082, align 2, !tbaa !399
  %24084 = add <16 x i16> %24059, %24052
  %24085 = add <16 x i16> %24084, %24066
  %24086 = add <16 x i16> %24085, %24073
  %24087 = add <16 x i16> %24086, %24080
  %24088 = add <16 x i16> %24062, %24055
  %24089 = add <16 x i16> %24088, %24069
  %24090 = add <16 x i16> %24089, %24076
  %24091 = add <16 x i16> %24090, %24083
  %24092 = shufflevector <16 x i16> %24087, <16 x i16> %24091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24093 = udiv <32 x i16> %24092, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24094 = shufflevector <32 x i16> %24093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24095 = add nsw i64 %23852, %.pre-phi3605
  %24096 = getelementptr inbounds i16, i16* %263, i64 %24095
  %24097 = bitcast i16* %24096 to <16 x i16>*
  store <16 x i16> %24094, <16 x i16>* %24097, align 2, !tbaa !401
  %24098 = shufflevector <32 x i16> %24093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24099 = getelementptr inbounds i16, i16* %24096, i64 16
  %24100 = bitcast i16* %24099 to <16 x i16>*
  store <16 x i16> %24098, <16 x i16>* %24100, align 2, !tbaa !401
  %indvars.iv.next3415 = add nuw nsw i64 %indvars.iv3414, 1
  %.not2583 = icmp eq i64 %indvars.iv.next3415, %530
  br i1 %.not2583, label %"end for blur_y.s0.x.x.rebased1875", label %"for blur_y.s0.x.x.rebased1874"

"for blur_y.s0.x.x.rebased1890":                  ; preds = %"for blur_y.s0.x.x.rebased1890.preheader", %"consume blur_x1901"
  %blur_y.s0.x.x.rebased1892 = phi i32 [ %24209, %"consume blur_x1901" ], [ 0, %"for blur_y.s0.x.x.rebased1890.preheader" ]
  %24101 = add nsw i32 %blur_y.s0.x.x.rebased1892, %t1626814
  %a4449 = shl nsw i32 %24101, 5
  %24102 = icmp sgt i32 %t1647, %a4449
  %blur_y.s0.x.v0.base.s1893 = select i1 %24102, i32 %a4449, i32 %t1647
  %24103 = icmp slt i32 %24101, 1
  %24104 = icmp sgt i32 %198, %a4449
  %24105 = or i1 %24103, %24104
  br i1 %24105, label %"produce blur_x1898", label %"consume blur_x1901"

"end for blur_y.s0.x.x.rebased1891":              ; preds = %"consume blur_x1901", %"end for blur_y.s0.x.x.rebased1875"
  br i1 %229, label %"produce blur_x1905", label %after_bb1902

"produce blur_x1898":                             ; preds = %"for blur_y.s0.x.x.rebased1890"
  %24106 = icmp slt i32 %blur_y.s0.x.v0.base.s1893, %198
  %blur_x.s0.x.v1.base.s1899 = select i1 %24106, i32 %blur_y.s0.x.v0.base.s1893, i32 %198
  %t10371900 = add nsw i32 %457, %blur_x.s0.x.v1.base.s1899
  %24107 = sext i32 %t10371900 to i64
  %24108 = getelementptr inbounds i16, i16* %read_input822, i64 %24107
  %24109 = getelementptr inbounds i16, i16* %24108, i64 1
  %24110 = bitcast i16* %24109 to <16 x i16>*
  %24111 = load <16 x i16>, <16 x i16>* %24110, align 2, !tbaa !396
  %24112 = getelementptr inbounds i16, i16* %24108, i64 17
  %24113 = bitcast i16* %24112 to <16 x i16>*
  %24114 = load <16 x i16>, <16 x i16>* %24113, align 2, !tbaa !396
  %24115 = bitcast i16* %24108 to <16 x i16>*
  %24116 = load <16 x i16>, <16 x i16>* %24115, align 2, !tbaa !396
  %24117 = getelementptr inbounds i16, i16* %24108, i64 16
  %24118 = bitcast i16* %24117 to <16 x i16>*
  %24119 = load <16 x i16>, <16 x i16>* %24118, align 2, !tbaa !396
  %24120 = getelementptr inbounds i16, i16* %24108, i64 2
  %24121 = bitcast i16* %24120 to <16 x i16>*
  %24122 = load <16 x i16>, <16 x i16>* %24121, align 2, !tbaa !396
  %24123 = getelementptr inbounds i16, i16* %24108, i64 18
  %24124 = bitcast i16* %24123 to <16 x i16>*
  %24125 = load <16 x i16>, <16 x i16>* %24124, align 2, !tbaa !396
  %24126 = getelementptr inbounds i16, i16* %24108, i64 4
  %24127 = bitcast i16* %24126 to <16 x i16>*
  %24128 = load <16 x i16>, <16 x i16>* %24127, align 2, !tbaa !396
  %24129 = getelementptr inbounds i16, i16* %24108, i64 20
  %24130 = bitcast i16* %24129 to <16 x i16>*
  %24131 = load <16 x i16>, <16 x i16>* %24130, align 2, !tbaa !396
  %24132 = getelementptr inbounds i16, i16* %24108, i64 3
  %24133 = bitcast i16* %24132 to <16 x i16>*
  %24134 = load <16 x i16>, <16 x i16>* %24133, align 2, !tbaa !396
  %24135 = getelementptr inbounds i16, i16* %24108, i64 19
  %24136 = bitcast i16* %24135 to <16 x i16>*
  %24137 = load <16 x i16>, <16 x i16>* %24136, align 2, !tbaa !396
  %24138 = add <16 x i16> %24116, %24111
  %24139 = add <16 x i16> %24138, %24122
  %24140 = add <16 x i16> %24139, %24128
  %24141 = add <16 x i16> %24140, %24134
  %24142 = add <16 x i16> %24119, %24114
  %24143 = add <16 x i16> %24142, %24125
  %24144 = add <16 x i16> %24143, %24131
  %24145 = add <16 x i16> %24144, %24137
  %24146 = shufflevector <16 x i16> %24141, <16 x i16> %24145, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24147 = udiv <32 x i16> %24146, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24148 = shufflevector <32 x i16> %24147, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24149 = sext i32 %blur_x.s0.x.v1.base.s1899 to i64
  %24150 = add nsw i64 %24149, %23980
  %24151 = getelementptr inbounds i16, i16* %blur_x879, i64 %24150
  %24152 = bitcast i16* %24151 to <16 x i16>*
  store <16 x i16> %24148, <16 x i16>* %24152, align 2, !tbaa !399
  %24153 = shufflevector <32 x i16> %24147, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24154 = getelementptr inbounds i16, i16* %24151, i64 16
  %24155 = bitcast i16* %24154 to <16 x i16>*
  store <16 x i16> %24153, <16 x i16>* %24155, align 2, !tbaa !399
  br label %"consume blur_x1901"

"consume blur_x1901":                             ; preds = %"for blur_y.s0.x.x.rebased1890", %"produce blur_x1898"
  %24156 = sext i32 %blur_y.s0.x.v0.base.s1893 to i64
  %24157 = add nsw i64 %23983, %24156
  %24158 = getelementptr inbounds i16, i16* %blur_x879, i64 %24157
  %24159 = bitcast i16* %24158 to <16 x i16>*
  %24160 = load <16 x i16>, <16 x i16>* %24159, align 2, !tbaa !399
  %24161 = getelementptr inbounds i16, i16* %24158, i64 16
  %24162 = bitcast i16* %24161 to <16 x i16>*
  %24163 = load <16 x i16>, <16 x i16>* %24162, align 2, !tbaa !399
  %24164 = add nsw i64 %23986, %24156
  %24165 = getelementptr inbounds i16, i16* %blur_x879, i64 %24164
  %24166 = bitcast i16* %24165 to <16 x i16>*
  %24167 = load <16 x i16>, <16 x i16>* %24166, align 2, !tbaa !399
  %24168 = getelementptr inbounds i16, i16* %24165, i64 16
  %24169 = bitcast i16* %24168 to <16 x i16>*
  %24170 = load <16 x i16>, <16 x i16>* %24169, align 2, !tbaa !399
  %24171 = add nsw i64 %23989, %24156
  %24172 = getelementptr inbounds i16, i16* %blur_x879, i64 %24171
  %24173 = bitcast i16* %24172 to <16 x i16>*
  %24174 = load <16 x i16>, <16 x i16>* %24173, align 2, !tbaa !399
  %24175 = getelementptr inbounds i16, i16* %24172, i64 16
  %24176 = bitcast i16* %24175 to <16 x i16>*
  %24177 = load <16 x i16>, <16 x i16>* %24176, align 2, !tbaa !399
  %24178 = add nsw i64 %23992, %24156
  %24179 = getelementptr inbounds i16, i16* %blur_x879, i64 %24178
  %24180 = bitcast i16* %24179 to <16 x i16>*
  %24181 = load <16 x i16>, <16 x i16>* %24180, align 2, !tbaa !399
  %24182 = getelementptr inbounds i16, i16* %24179, i64 16
  %24183 = bitcast i16* %24182 to <16 x i16>*
  %24184 = load <16 x i16>, <16 x i16>* %24183, align 2, !tbaa !399
  %24185 = add nsw i64 %23995, %24156
  %24186 = getelementptr inbounds i16, i16* %blur_x879, i64 %24185
  %24187 = bitcast i16* %24186 to <16 x i16>*
  %24188 = load <16 x i16>, <16 x i16>* %24187, align 2, !tbaa !399
  %24189 = getelementptr inbounds i16, i16* %24186, i64 16
  %24190 = bitcast i16* %24189 to <16 x i16>*
  %24191 = load <16 x i16>, <16 x i16>* %24190, align 2, !tbaa !399
  %24192 = add <16 x i16> %24167, %24160
  %24193 = add <16 x i16> %24192, %24174
  %24194 = add <16 x i16> %24193, %24181
  %24195 = add <16 x i16> %24194, %24188
  %24196 = add <16 x i16> %24170, %24163
  %24197 = add <16 x i16> %24196, %24177
  %24198 = add <16 x i16> %24197, %24184
  %24199 = add <16 x i16> %24198, %24191
  %24200 = shufflevector <16 x i16> %24195, <16 x i16> %24199, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24201 = udiv <32 x i16> %24200, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24202 = shufflevector <32 x i16> %24201, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24203 = add nsw i64 %23999, %24156
  %24204 = getelementptr inbounds i16, i16* %263, i64 %24203
  %24205 = bitcast i16* %24204 to <16 x i16>*
  store <16 x i16> %24202, <16 x i16>* %24205, align 2, !tbaa !401
  %24206 = shufflevector <32 x i16> %24201, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24207 = getelementptr inbounds i16, i16* %24204, i64 16
  %24208 = bitcast i16* %24207 to <16 x i16>*
  store <16 x i16> %24206, <16 x i16>* %24208, align 2, !tbaa !401
  %24209 = add nuw nsw i32 %blur_y.s0.x.x.rebased1892, 1
  %.not2582 = icmp eq i32 %24209, %t1683898
  br i1 %.not2582, label %"end for blur_y.s0.x.x.rebased1891", label %"for blur_y.s0.x.x.rebased1890"

after_bb1902:                                     ; preds = %"end for blur_y.s0.x.x.rebased1891", %"produce blur_x1905"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1917.preheader", label %"end for blur_y.s0.x.x.rebased1918", !prof !386

"for blur_y.s0.x.x.rebased1917.preheader":        ; preds = %after_bb1902
  %24210 = sext i32 %t1688914 to i64
  %24211 = zext i32 %.pre-phi3563 to i64
  %24212 = mul nsw i64 %24211, %337
  %24213 = sub nsw i64 %24212, %298
  %24214 = zext i32 %.pre-phi3557 to i64
  %24215 = mul nsw i64 %24214, %337
  %24216 = sub nsw i64 %24215, %298
  %24217 = zext i32 %.pre-phi3569 to i64
  %24218 = mul nsw i64 %24217, %337
  %24219 = sub nsw i64 %24218, %298
  %24220 = zext i32 %.pre-phi3539 to i64
  %24221 = mul nsw i64 %24220, %337
  %24222 = sub nsw i64 %24221, %298
  %24223 = zext i32 %.pre-phi3535 to i64
  %24224 = mul nsw i64 %24223, %337
  %24225 = sub nsw i64 %24224, %298
  %24226 = sext i32 %a379 to i64
  %24227 = add nsw i64 %24226, 21
  %24228 = mul nsw i64 %24227, %334
  %24229 = add nsw i64 %24228, %338
  br label %"for blur_y.s0.x.x.rebased1917"

"produce blur_x1905":                             ; preds = %"end for blur_y.s0.x.x.rebased1891"
  %24230 = getelementptr inbounds i16, i16* %read_input822, i64 %461
  %24231 = getelementptr inbounds i16, i16* %24230, i64 -31
  %24232 = bitcast i16* %24231 to <16 x i16>*
  %24233 = load <16 x i16>, <16 x i16>* %24232, align 2, !tbaa !396
  %24234 = getelementptr inbounds i16, i16* %24230, i64 -15
  %24235 = bitcast i16* %24234 to <16 x i16>*
  %24236 = load <16 x i16>, <16 x i16>* %24235, align 2, !tbaa !396
  %24237 = getelementptr inbounds i16, i16* %24230, i64 -32
  %24238 = bitcast i16* %24237 to <16 x i16>*
  %24239 = load <16 x i16>, <16 x i16>* %24238, align 2, !tbaa !396
  %24240 = getelementptr inbounds i16, i16* %24230, i64 -16
  %24241 = bitcast i16* %24240 to <16 x i16>*
  %24242 = load <16 x i16>, <16 x i16>* %24241, align 2, !tbaa !396
  %24243 = getelementptr inbounds i16, i16* %24230, i64 -30
  %24244 = bitcast i16* %24243 to <16 x i16>*
  %24245 = load <16 x i16>, <16 x i16>* %24244, align 2, !tbaa !396
  %24246 = getelementptr inbounds i16, i16* %24230, i64 -14
  %24247 = bitcast i16* %24246 to <16 x i16>*
  %24248 = load <16 x i16>, <16 x i16>* %24247, align 2, !tbaa !396
  %24249 = getelementptr inbounds i16, i16* %24230, i64 -28
  %24250 = bitcast i16* %24249 to <16 x i16>*
  %24251 = load <16 x i16>, <16 x i16>* %24250, align 2, !tbaa !396
  %24252 = getelementptr inbounds i16, i16* %24230, i64 -12
  %24253 = bitcast i16* %24252 to <16 x i16>*
  %24254 = load <16 x i16>, <16 x i16>* %24253, align 2, !tbaa !396
  %24255 = getelementptr inbounds i16, i16* %24230, i64 -29
  %24256 = bitcast i16* %24255 to <16 x i16>*
  %24257 = load <16 x i16>, <16 x i16>* %24256, align 2, !tbaa !396
  %24258 = getelementptr inbounds i16, i16* %24230, i64 -13
  %24259 = bitcast i16* %24258 to <16 x i16>*
  %24260 = load <16 x i16>, <16 x i16>* %24259, align 2, !tbaa !396
  %24261 = add <16 x i16> %24239, %24233
  %24262 = add <16 x i16> %24261, %24245
  %24263 = add <16 x i16> %24262, %24251
  %24264 = add <16 x i16> %24263, %24257
  %24265 = add <16 x i16> %24242, %24236
  %24266 = add <16 x i16> %24265, %24248
  %24267 = add <16 x i16> %24266, %24254
  %24268 = add <16 x i16> %24267, %24260
  %24269 = shufflevector <16 x i16> %24264, <16 x i16> %24268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24270 = udiv <32 x i16> %24269, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24271 = shufflevector <32 x i16> %24270, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24272 = zext i32 %.pre-phi3539 to i64
  %24273 = mul nsw i64 %299, %24272
  %24274 = add nsw i64 %301, %24273
  %24275 = getelementptr inbounds i16, i16* %blur_x879, i64 %24274
  %24276 = getelementptr inbounds i16, i16* %24275, i64 -32
  %24277 = bitcast i16* %24276 to <16 x i16>*
  store <16 x i16> %24271, <16 x i16>* %24277, align 2, !tbaa !399
  %24278 = shufflevector <32 x i16> %24270, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24279 = getelementptr inbounds i16, i16* %24275, i64 -16
  %24280 = bitcast i16* %24279 to <16 x i16>*
  store <16 x i16> %24278, <16 x i16>* %24280, align 2, !tbaa !399
  %24281 = zext i32 %.pre-phi3563 to i64
  %24282 = mul nsw i64 %24281, %333
  %24283 = add nsw i64 %24282, %296
  %24284 = getelementptr inbounds i16, i16* %blur_x879, i64 %24283
  %24285 = getelementptr inbounds i16, i16* %24284, i64 -32
  %24286 = bitcast i16* %24285 to <16 x i16>*
  %24287 = load <16 x i16>, <16 x i16>* %24286, align 2, !tbaa !399
  %24288 = getelementptr inbounds i16, i16* %24284, i64 -16
  %24289 = bitcast i16* %24288 to <16 x i16>*
  %24290 = load <16 x i16>, <16 x i16>* %24289, align 2, !tbaa !399
  %24291 = zext i32 %.pre-phi3557 to i64
  %24292 = mul nsw i64 %24291, %333
  %24293 = add nsw i64 %24292, %296
  %24294 = getelementptr inbounds i16, i16* %blur_x879, i64 %24293
  %24295 = getelementptr inbounds i16, i16* %24294, i64 -32
  %24296 = bitcast i16* %24295 to <16 x i16>*
  %24297 = load <16 x i16>, <16 x i16>* %24296, align 2, !tbaa !399
  %24298 = getelementptr inbounds i16, i16* %24294, i64 -16
  %24299 = bitcast i16* %24298 to <16 x i16>*
  %24300 = load <16 x i16>, <16 x i16>* %24299, align 2, !tbaa !399
  %24301 = zext i32 %.pre-phi3569 to i64
  %24302 = mul nsw i64 %24301, %333
  %24303 = add nsw i64 %24302, %296
  %24304 = getelementptr inbounds i16, i16* %blur_x879, i64 %24303
  %24305 = getelementptr inbounds i16, i16* %24304, i64 -32
  %24306 = bitcast i16* %24305 to <16 x i16>*
  %24307 = load <16 x i16>, <16 x i16>* %24306, align 2, !tbaa !399
  %24308 = getelementptr inbounds i16, i16* %24304, i64 -16
  %24309 = bitcast i16* %24308 to <16 x i16>*
  %24310 = load <16 x i16>, <16 x i16>* %24309, align 2, !tbaa !399
  %24311 = mul nsw i64 %24272, %333
  %24312 = add nsw i64 %24311, %296
  %24313 = getelementptr inbounds i16, i16* %blur_x879, i64 %24312
  %24314 = getelementptr inbounds i16, i16* %24313, i64 -32
  %24315 = bitcast i16* %24314 to <16 x i16>*
  %24316 = load <16 x i16>, <16 x i16>* %24315, align 2, !tbaa !399
  %24317 = getelementptr inbounds i16, i16* %24313, i64 -16
  %24318 = bitcast i16* %24317 to <16 x i16>*
  %24319 = load <16 x i16>, <16 x i16>* %24318, align 2, !tbaa !399
  %24320 = zext i32 %.pre-phi3535 to i64
  %24321 = mul nsw i64 %24320, %333
  %24322 = add nsw i64 %24321, %296
  %24323 = getelementptr inbounds i16, i16* %blur_x879, i64 %24322
  %24324 = getelementptr inbounds i16, i16* %24323, i64 -32
  %24325 = bitcast i16* %24324 to <16 x i16>*
  %24326 = load <16 x i16>, <16 x i16>* %24325, align 2, !tbaa !399
  %24327 = getelementptr inbounds i16, i16* %24323, i64 -16
  %24328 = bitcast i16* %24327 to <16 x i16>*
  %24329 = load <16 x i16>, <16 x i16>* %24328, align 2, !tbaa !399
  %24330 = add <16 x i16> %24297, %24287
  %24331 = add <16 x i16> %24330, %24307
  %24332 = add <16 x i16> %24331, %24316
  %24333 = add <16 x i16> %24332, %24326
  %24334 = add <16 x i16> %24300, %24290
  %24335 = add <16 x i16> %24334, %24310
  %24336 = add <16 x i16> %24335, %24319
  %24337 = add <16 x i16> %24336, %24329
  %24338 = shufflevector <16 x i16> %24333, <16 x i16> %24337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24339 = udiv <32 x i16> %24338, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24340 = shufflevector <32 x i16> %24339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24341 = sext i32 %a379 to i64
  %24342 = add nsw i64 %24341, 21
  %24343 = mul nsw i64 %24342, %334
  %24344 = add nsw i64 %336, %24343
  %24345 = getelementptr inbounds i16, i16* %263, i64 %24344
  %24346 = getelementptr inbounds i16, i16* %24345, i64 -32
  %24347 = bitcast i16* %24346 to <16 x i16>*
  store <16 x i16> %24340, <16 x i16>* %24347, align 2, !tbaa !401
  %24348 = shufflevector <32 x i16> %24339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24349 = getelementptr inbounds i16, i16* %24345, i64 -16
  %24350 = bitcast i16* %24349 to <16 x i16>*
  store <16 x i16> %24348, <16 x i16>* %24350, align 2, !tbaa !401
  br label %after_bb1902

"for blur_y.s0.x.x.rebased1917":                  ; preds = %"for blur_y.s0.x.x.rebased1917.preheader", %"consume blur_x1925"
  %indvars.iv3416 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1917.preheader" ], [ %indvars.iv.next3417, %"consume blur_x1925" ]
  %24351 = add nsw i64 %indvars.iv3416, %303
  %24352 = icmp slt i64 %24351, 1
  %24353 = trunc i64 %24351 to i32
  %24354 = shl nsw i32 %24353, 5
  %24355 = icmp sgt i32 %198, %24354
  %24356 = or i1 %24352, %24355
  br i1 %24356, label %"produce blur_x1923", label %"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge"

"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1917"
  %.pre3606 = shl nsw i64 %24351, 5
  br label %"consume blur_x1925"

"end for blur_y.s0.x.x.rebased1918":              ; preds = %"consume blur_x1925", %after_bb1902
  br i1 %304, label %"for blur_y.s0.x.x.rebased1933.preheader", label %"end for blur_y.s0.x.x.rebased1934", !prof !386

"for blur_y.s0.x.x.rebased1933.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1918"
  %24357 = sext i32 %t1688914 to i64
  %24358 = zext i32 %.pre-phi3563 to i64
  %24359 = mul nsw i64 %24358, %337
  %24360 = sub nsw i64 %24359, %298
  %24361 = zext i32 %.pre-phi3557 to i64
  %24362 = mul nsw i64 %24361, %337
  %24363 = sub nsw i64 %24362, %298
  %24364 = zext i32 %.pre-phi3569 to i64
  %24365 = mul nsw i64 %24364, %337
  %24366 = sub nsw i64 %24365, %298
  %24367 = zext i32 %.pre-phi3539 to i64
  %24368 = mul nsw i64 %24367, %337
  %24369 = sub nsw i64 %24368, %298
  %24370 = zext i32 %.pre-phi3535 to i64
  %24371 = mul nsw i64 %24370, %337
  %24372 = sub nsw i64 %24371, %298
  %24373 = sext i32 %a379 to i64
  %24374 = add nsw i64 %24373, 21
  %24375 = mul nsw i64 %24374, %334
  %24376 = add nsw i64 %24375, %338
  br label %"for blur_y.s0.x.x.rebased1933"

"produce blur_x1923":                             ; preds = %"for blur_y.s0.x.x.rebased1917"
  %t10481924 = add nsw i32 %463, %24354
  %24377 = sext i32 %t10481924 to i64
  %24378 = getelementptr inbounds i16, i16* %read_input822, i64 %24377
  %24379 = getelementptr inbounds i16, i16* %24378, i64 1
  %24380 = bitcast i16* %24379 to <16 x i16>*
  %24381 = load <16 x i16>, <16 x i16>* %24380, align 2, !tbaa !396
  %24382 = getelementptr inbounds i16, i16* %24378, i64 17
  %24383 = bitcast i16* %24382 to <16 x i16>*
  %24384 = load <16 x i16>, <16 x i16>* %24383, align 2, !tbaa !396
  %24385 = bitcast i16* %24378 to <16 x i16>*
  %24386 = load <16 x i16>, <16 x i16>* %24385, align 2, !tbaa !396
  %24387 = getelementptr inbounds i16, i16* %24378, i64 16
  %24388 = bitcast i16* %24387 to <16 x i16>*
  %24389 = load <16 x i16>, <16 x i16>* %24388, align 2, !tbaa !396
  %24390 = getelementptr inbounds i16, i16* %24378, i64 2
  %24391 = bitcast i16* %24390 to <16 x i16>*
  %24392 = load <16 x i16>, <16 x i16>* %24391, align 2, !tbaa !396
  %24393 = getelementptr inbounds i16, i16* %24378, i64 18
  %24394 = bitcast i16* %24393 to <16 x i16>*
  %24395 = load <16 x i16>, <16 x i16>* %24394, align 2, !tbaa !396
  %24396 = getelementptr inbounds i16, i16* %24378, i64 4
  %24397 = bitcast i16* %24396 to <16 x i16>*
  %24398 = load <16 x i16>, <16 x i16>* %24397, align 2, !tbaa !396
  %24399 = getelementptr inbounds i16, i16* %24378, i64 20
  %24400 = bitcast i16* %24399 to <16 x i16>*
  %24401 = load <16 x i16>, <16 x i16>* %24400, align 2, !tbaa !396
  %24402 = getelementptr inbounds i16, i16* %24378, i64 3
  %24403 = bitcast i16* %24402 to <16 x i16>*
  %24404 = load <16 x i16>, <16 x i16>* %24403, align 2, !tbaa !396
  %24405 = getelementptr inbounds i16, i16* %24378, i64 19
  %24406 = bitcast i16* %24405 to <16 x i16>*
  %24407 = load <16 x i16>, <16 x i16>* %24406, align 2, !tbaa !396
  %24408 = add <16 x i16> %24386, %24381
  %24409 = add <16 x i16> %24408, %24392
  %24410 = add <16 x i16> %24409, %24398
  %24411 = add <16 x i16> %24410, %24404
  %24412 = add <16 x i16> %24389, %24384
  %24413 = add <16 x i16> %24412, %24395
  %24414 = add <16 x i16> %24413, %24401
  %24415 = add <16 x i16> %24414, %24407
  %24416 = shufflevector <16 x i16> %24411, <16 x i16> %24415, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24417 = udiv <32 x i16> %24416, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24418 = shufflevector <32 x i16> %24417, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24419 = shl nsw i64 %24351, 5
  %24420 = add nsw i64 %24419, %24210
  %24421 = getelementptr inbounds i16, i16* %blur_x879, i64 %24420
  %24422 = bitcast i16* %24421 to <16 x i16>*
  store <16 x i16> %24418, <16 x i16>* %24422, align 2, !tbaa !399
  %24423 = shufflevector <32 x i16> %24417, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24424 = getelementptr inbounds i16, i16* %24421, i64 16
  %24425 = bitcast i16* %24424 to <16 x i16>*
  store <16 x i16> %24423, <16 x i16>* %24425, align 2, !tbaa !399
  br label %"consume blur_x1925"

"consume blur_x1925":                             ; preds = %"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge", %"produce blur_x1923"
  %.pre-phi3607 = phi i64 [ %.pre3606, %"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge" ], [ %24419, %"produce blur_x1923" ]
  %24426 = add nsw i64 %24213, %.pre-phi3607
  %24427 = getelementptr inbounds i16, i16* %blur_x879, i64 %24426
  %24428 = bitcast i16* %24427 to <16 x i16>*
  %24429 = load <16 x i16>, <16 x i16>* %24428, align 2, !tbaa !399
  %24430 = getelementptr inbounds i16, i16* %24427, i64 16
  %24431 = bitcast i16* %24430 to <16 x i16>*
  %24432 = load <16 x i16>, <16 x i16>* %24431, align 2, !tbaa !399
  %24433 = add nsw i64 %24216, %.pre-phi3607
  %24434 = getelementptr inbounds i16, i16* %blur_x879, i64 %24433
  %24435 = bitcast i16* %24434 to <16 x i16>*
  %24436 = load <16 x i16>, <16 x i16>* %24435, align 2, !tbaa !399
  %24437 = getelementptr inbounds i16, i16* %24434, i64 16
  %24438 = bitcast i16* %24437 to <16 x i16>*
  %24439 = load <16 x i16>, <16 x i16>* %24438, align 2, !tbaa !399
  %24440 = add nsw i64 %24219, %.pre-phi3607
  %24441 = getelementptr inbounds i16, i16* %blur_x879, i64 %24440
  %24442 = bitcast i16* %24441 to <16 x i16>*
  %24443 = load <16 x i16>, <16 x i16>* %24442, align 2, !tbaa !399
  %24444 = getelementptr inbounds i16, i16* %24441, i64 16
  %24445 = bitcast i16* %24444 to <16 x i16>*
  %24446 = load <16 x i16>, <16 x i16>* %24445, align 2, !tbaa !399
  %24447 = add nsw i64 %24222, %.pre-phi3607
  %24448 = getelementptr inbounds i16, i16* %blur_x879, i64 %24447
  %24449 = bitcast i16* %24448 to <16 x i16>*
  %24450 = load <16 x i16>, <16 x i16>* %24449, align 2, !tbaa !399
  %24451 = getelementptr inbounds i16, i16* %24448, i64 16
  %24452 = bitcast i16* %24451 to <16 x i16>*
  %24453 = load <16 x i16>, <16 x i16>* %24452, align 2, !tbaa !399
  %24454 = add nsw i64 %24225, %.pre-phi3607
  %24455 = getelementptr inbounds i16, i16* %blur_x879, i64 %24454
  %24456 = bitcast i16* %24455 to <16 x i16>*
  %24457 = load <16 x i16>, <16 x i16>* %24456, align 2, !tbaa !399
  %24458 = getelementptr inbounds i16, i16* %24455, i64 16
  %24459 = bitcast i16* %24458 to <16 x i16>*
  %24460 = load <16 x i16>, <16 x i16>* %24459, align 2, !tbaa !399
  %24461 = add <16 x i16> %24436, %24429
  %24462 = add <16 x i16> %24461, %24443
  %24463 = add <16 x i16> %24462, %24450
  %24464 = add <16 x i16> %24463, %24457
  %24465 = add <16 x i16> %24439, %24432
  %24466 = add <16 x i16> %24465, %24446
  %24467 = add <16 x i16> %24466, %24453
  %24468 = add <16 x i16> %24467, %24460
  %24469 = shufflevector <16 x i16> %24464, <16 x i16> %24468, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24470 = udiv <32 x i16> %24469, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24471 = shufflevector <32 x i16> %24470, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24472 = add nsw i64 %24229, %.pre-phi3607
  %24473 = getelementptr inbounds i16, i16* %263, i64 %24472
  %24474 = bitcast i16* %24473 to <16 x i16>*
  store <16 x i16> %24471, <16 x i16>* %24474, align 2, !tbaa !401
  %24475 = shufflevector <32 x i16> %24470, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24476 = getelementptr inbounds i16, i16* %24473, i64 16
  %24477 = bitcast i16* %24476 to <16 x i16>*
  store <16 x i16> %24475, <16 x i16>* %24477, align 2, !tbaa !401
  %indvars.iv.next3417 = add nuw nsw i64 %indvars.iv3416, 1
  %.not2579 = icmp eq i64 %indvars.iv.next3417, %530
  br i1 %.not2579, label %"end for blur_y.s0.x.x.rebased1918", label %"for blur_y.s0.x.x.rebased1917"

"for blur_y.s0.x.x.rebased1933":                  ; preds = %"for blur_y.s0.x.x.rebased1933.preheader", %"consume blur_x1944"
  %blur_y.s0.x.x.rebased1935 = phi i32 [ %24586, %"consume blur_x1944" ], [ 0, %"for blur_y.s0.x.x.rebased1933.preheader" ]
  %24478 = add nsw i32 %blur_y.s0.x.x.rebased1935, %t1626814
  %a4606 = shl nsw i32 %24478, 5
  %24479 = icmp sgt i32 %t1647, %a4606
  %blur_y.s0.x.v0.base.s1936 = select i1 %24479, i32 %a4606, i32 %t1647
  %24480 = icmp slt i32 %24478, 1
  %24481 = icmp sgt i32 %198, %a4606
  %24482 = or i1 %24480, %24481
  br i1 %24482, label %"produce blur_x1941", label %"consume blur_x1944"

"end for blur_y.s0.x.x.rebased1934":              ; preds = %"consume blur_x1944", %"end for blur_y.s0.x.x.rebased1918"
  br i1 %229, label %"produce blur_x1948", label %after_bb1945

"produce blur_x1941":                             ; preds = %"for blur_y.s0.x.x.rebased1933"
  %24483 = icmp slt i32 %blur_y.s0.x.v0.base.s1936, %198
  %blur_x.s0.x.v1.base.s1942 = select i1 %24483, i32 %blur_y.s0.x.v0.base.s1936, i32 %198
  %t10531943 = add nsw i32 %463, %blur_x.s0.x.v1.base.s1942
  %24484 = sext i32 %t10531943 to i64
  %24485 = getelementptr inbounds i16, i16* %read_input822, i64 %24484
  %24486 = getelementptr inbounds i16, i16* %24485, i64 1
  %24487 = bitcast i16* %24486 to <16 x i16>*
  %24488 = load <16 x i16>, <16 x i16>* %24487, align 2, !tbaa !396
  %24489 = getelementptr inbounds i16, i16* %24485, i64 17
  %24490 = bitcast i16* %24489 to <16 x i16>*
  %24491 = load <16 x i16>, <16 x i16>* %24490, align 2, !tbaa !396
  %24492 = bitcast i16* %24485 to <16 x i16>*
  %24493 = load <16 x i16>, <16 x i16>* %24492, align 2, !tbaa !396
  %24494 = getelementptr inbounds i16, i16* %24485, i64 16
  %24495 = bitcast i16* %24494 to <16 x i16>*
  %24496 = load <16 x i16>, <16 x i16>* %24495, align 2, !tbaa !396
  %24497 = getelementptr inbounds i16, i16* %24485, i64 2
  %24498 = bitcast i16* %24497 to <16 x i16>*
  %24499 = load <16 x i16>, <16 x i16>* %24498, align 2, !tbaa !396
  %24500 = getelementptr inbounds i16, i16* %24485, i64 18
  %24501 = bitcast i16* %24500 to <16 x i16>*
  %24502 = load <16 x i16>, <16 x i16>* %24501, align 2, !tbaa !396
  %24503 = getelementptr inbounds i16, i16* %24485, i64 4
  %24504 = bitcast i16* %24503 to <16 x i16>*
  %24505 = load <16 x i16>, <16 x i16>* %24504, align 2, !tbaa !396
  %24506 = getelementptr inbounds i16, i16* %24485, i64 20
  %24507 = bitcast i16* %24506 to <16 x i16>*
  %24508 = load <16 x i16>, <16 x i16>* %24507, align 2, !tbaa !396
  %24509 = getelementptr inbounds i16, i16* %24485, i64 3
  %24510 = bitcast i16* %24509 to <16 x i16>*
  %24511 = load <16 x i16>, <16 x i16>* %24510, align 2, !tbaa !396
  %24512 = getelementptr inbounds i16, i16* %24485, i64 19
  %24513 = bitcast i16* %24512 to <16 x i16>*
  %24514 = load <16 x i16>, <16 x i16>* %24513, align 2, !tbaa !396
  %24515 = add <16 x i16> %24493, %24488
  %24516 = add <16 x i16> %24515, %24499
  %24517 = add <16 x i16> %24516, %24505
  %24518 = add <16 x i16> %24517, %24511
  %24519 = add <16 x i16> %24496, %24491
  %24520 = add <16 x i16> %24519, %24502
  %24521 = add <16 x i16> %24520, %24508
  %24522 = add <16 x i16> %24521, %24514
  %24523 = shufflevector <16 x i16> %24518, <16 x i16> %24522, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24524 = udiv <32 x i16> %24523, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24525 = shufflevector <32 x i16> %24524, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24526 = sext i32 %blur_x.s0.x.v1.base.s1942 to i64
  %24527 = add nsw i64 %24526, %24357
  %24528 = getelementptr inbounds i16, i16* %blur_x879, i64 %24527
  %24529 = bitcast i16* %24528 to <16 x i16>*
  store <16 x i16> %24525, <16 x i16>* %24529, align 2, !tbaa !399
  %24530 = shufflevector <32 x i16> %24524, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24531 = getelementptr inbounds i16, i16* %24528, i64 16
  %24532 = bitcast i16* %24531 to <16 x i16>*
  store <16 x i16> %24530, <16 x i16>* %24532, align 2, !tbaa !399
  br label %"consume blur_x1944"

"consume blur_x1944":                             ; preds = %"for blur_y.s0.x.x.rebased1933", %"produce blur_x1941"
  %24533 = sext i32 %blur_y.s0.x.v0.base.s1936 to i64
  %24534 = add nsw i64 %24360, %24533
  %24535 = getelementptr inbounds i16, i16* %blur_x879, i64 %24534
  %24536 = bitcast i16* %24535 to <16 x i16>*
  %24537 = load <16 x i16>, <16 x i16>* %24536, align 2, !tbaa !399
  %24538 = getelementptr inbounds i16, i16* %24535, i64 16
  %24539 = bitcast i16* %24538 to <16 x i16>*
  %24540 = load <16 x i16>, <16 x i16>* %24539, align 2, !tbaa !399
  %24541 = add nsw i64 %24363, %24533
  %24542 = getelementptr inbounds i16, i16* %blur_x879, i64 %24541
  %24543 = bitcast i16* %24542 to <16 x i16>*
  %24544 = load <16 x i16>, <16 x i16>* %24543, align 2, !tbaa !399
  %24545 = getelementptr inbounds i16, i16* %24542, i64 16
  %24546 = bitcast i16* %24545 to <16 x i16>*
  %24547 = load <16 x i16>, <16 x i16>* %24546, align 2, !tbaa !399
  %24548 = add nsw i64 %24366, %24533
  %24549 = getelementptr inbounds i16, i16* %blur_x879, i64 %24548
  %24550 = bitcast i16* %24549 to <16 x i16>*
  %24551 = load <16 x i16>, <16 x i16>* %24550, align 2, !tbaa !399
  %24552 = getelementptr inbounds i16, i16* %24549, i64 16
  %24553 = bitcast i16* %24552 to <16 x i16>*
  %24554 = load <16 x i16>, <16 x i16>* %24553, align 2, !tbaa !399
  %24555 = add nsw i64 %24369, %24533
  %24556 = getelementptr inbounds i16, i16* %blur_x879, i64 %24555
  %24557 = bitcast i16* %24556 to <16 x i16>*
  %24558 = load <16 x i16>, <16 x i16>* %24557, align 2, !tbaa !399
  %24559 = getelementptr inbounds i16, i16* %24556, i64 16
  %24560 = bitcast i16* %24559 to <16 x i16>*
  %24561 = load <16 x i16>, <16 x i16>* %24560, align 2, !tbaa !399
  %24562 = add nsw i64 %24372, %24533
  %24563 = getelementptr inbounds i16, i16* %blur_x879, i64 %24562
  %24564 = bitcast i16* %24563 to <16 x i16>*
  %24565 = load <16 x i16>, <16 x i16>* %24564, align 2, !tbaa !399
  %24566 = getelementptr inbounds i16, i16* %24563, i64 16
  %24567 = bitcast i16* %24566 to <16 x i16>*
  %24568 = load <16 x i16>, <16 x i16>* %24567, align 2, !tbaa !399
  %24569 = add <16 x i16> %24544, %24537
  %24570 = add <16 x i16> %24569, %24551
  %24571 = add <16 x i16> %24570, %24558
  %24572 = add <16 x i16> %24571, %24565
  %24573 = add <16 x i16> %24547, %24540
  %24574 = add <16 x i16> %24573, %24554
  %24575 = add <16 x i16> %24574, %24561
  %24576 = add <16 x i16> %24575, %24568
  %24577 = shufflevector <16 x i16> %24572, <16 x i16> %24576, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24578 = udiv <32 x i16> %24577, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24579 = shufflevector <32 x i16> %24578, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24580 = add nsw i64 %24376, %24533
  %24581 = getelementptr inbounds i16, i16* %263, i64 %24580
  %24582 = bitcast i16* %24581 to <16 x i16>*
  store <16 x i16> %24579, <16 x i16>* %24582, align 2, !tbaa !401
  %24583 = shufflevector <32 x i16> %24578, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24584 = getelementptr inbounds i16, i16* %24581, i64 16
  %24585 = bitcast i16* %24584 to <16 x i16>*
  store <16 x i16> %24583, <16 x i16>* %24585, align 2, !tbaa !401
  %24586 = add nuw nsw i32 %blur_y.s0.x.x.rebased1935, 1
  %.not2578 = icmp eq i32 %24586, %t1683898
  br i1 %.not2578, label %"end for blur_y.s0.x.x.rebased1934", label %"for blur_y.s0.x.x.rebased1933"

after_bb1945:                                     ; preds = %"end for blur_y.s0.x.x.rebased1934", %"produce blur_x1948"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1960.preheader", label %"end for blur_y.s0.x.x.rebased1961", !prof !386

"for blur_y.s0.x.x.rebased1960.preheader":        ; preds = %after_bb1945
  %24587 = sext i32 %t1694944 to i64
  %24588 = zext i32 %.pre-phi3569 to i64
  %24589 = mul nsw i64 %24588, %337
  %24590 = sub nsw i64 %24589, %298
  %24591 = zext i32 %.pre-phi3563 to i64
  %24592 = mul nsw i64 %24591, %337
  %24593 = sub nsw i64 %24592, %298
  %24594 = zext i32 %.pre-phi3535 to i64
  %24595 = mul nsw i64 %24594, %337
  %24596 = sub nsw i64 %24595, %298
  %24597 = zext i32 %.pre-phi3543 to i64
  %24598 = mul nsw i64 %24597, %337
  %24599 = sub nsw i64 %24598, %298
  %24600 = zext i32 %.pre-phi3539 to i64
  %24601 = mul nsw i64 %24600, %337
  %24602 = sub nsw i64 %24601, %298
  %24603 = sext i32 %a379 to i64
  %24604 = add nsw i64 %24603, 22
  %24605 = mul nsw i64 %24604, %334
  %24606 = add nsw i64 %24605, %338
  br label %"for blur_y.s0.x.x.rebased1960"

"produce blur_x1948":                             ; preds = %"end for blur_y.s0.x.x.rebased1934"
  %24607 = getelementptr inbounds i16, i16* %read_input822, i64 %467
  %24608 = getelementptr inbounds i16, i16* %24607, i64 -31
  %24609 = bitcast i16* %24608 to <16 x i16>*
  %24610 = load <16 x i16>, <16 x i16>* %24609, align 2, !tbaa !396
  %24611 = getelementptr inbounds i16, i16* %24607, i64 -15
  %24612 = bitcast i16* %24611 to <16 x i16>*
  %24613 = load <16 x i16>, <16 x i16>* %24612, align 2, !tbaa !396
  %24614 = getelementptr inbounds i16, i16* %24607, i64 -32
  %24615 = bitcast i16* %24614 to <16 x i16>*
  %24616 = load <16 x i16>, <16 x i16>* %24615, align 2, !tbaa !396
  %24617 = getelementptr inbounds i16, i16* %24607, i64 -16
  %24618 = bitcast i16* %24617 to <16 x i16>*
  %24619 = load <16 x i16>, <16 x i16>* %24618, align 2, !tbaa !396
  %24620 = getelementptr inbounds i16, i16* %24607, i64 -30
  %24621 = bitcast i16* %24620 to <16 x i16>*
  %24622 = load <16 x i16>, <16 x i16>* %24621, align 2, !tbaa !396
  %24623 = getelementptr inbounds i16, i16* %24607, i64 -14
  %24624 = bitcast i16* %24623 to <16 x i16>*
  %24625 = load <16 x i16>, <16 x i16>* %24624, align 2, !tbaa !396
  %24626 = getelementptr inbounds i16, i16* %24607, i64 -28
  %24627 = bitcast i16* %24626 to <16 x i16>*
  %24628 = load <16 x i16>, <16 x i16>* %24627, align 2, !tbaa !396
  %24629 = getelementptr inbounds i16, i16* %24607, i64 -12
  %24630 = bitcast i16* %24629 to <16 x i16>*
  %24631 = load <16 x i16>, <16 x i16>* %24630, align 2, !tbaa !396
  %24632 = getelementptr inbounds i16, i16* %24607, i64 -29
  %24633 = bitcast i16* %24632 to <16 x i16>*
  %24634 = load <16 x i16>, <16 x i16>* %24633, align 2, !tbaa !396
  %24635 = getelementptr inbounds i16, i16* %24607, i64 -13
  %24636 = bitcast i16* %24635 to <16 x i16>*
  %24637 = load <16 x i16>, <16 x i16>* %24636, align 2, !tbaa !396
  %24638 = add <16 x i16> %24616, %24610
  %24639 = add <16 x i16> %24638, %24622
  %24640 = add <16 x i16> %24639, %24628
  %24641 = add <16 x i16> %24640, %24634
  %24642 = add <16 x i16> %24619, %24613
  %24643 = add <16 x i16> %24642, %24625
  %24644 = add <16 x i16> %24643, %24631
  %24645 = add <16 x i16> %24644, %24637
  %24646 = shufflevector <16 x i16> %24641, <16 x i16> %24645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24647 = udiv <32 x i16> %24646, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24648 = shufflevector <32 x i16> %24647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24649 = zext i32 %.pre-phi3543 to i64
  %24650 = mul nsw i64 %299, %24649
  %24651 = add nsw i64 %301, %24650
  %24652 = getelementptr inbounds i16, i16* %blur_x879, i64 %24651
  %24653 = getelementptr inbounds i16, i16* %24652, i64 -32
  %24654 = bitcast i16* %24653 to <16 x i16>*
  store <16 x i16> %24648, <16 x i16>* %24654, align 2, !tbaa !399
  %24655 = shufflevector <32 x i16> %24647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24656 = getelementptr inbounds i16, i16* %24652, i64 -16
  %24657 = bitcast i16* %24656 to <16 x i16>*
  store <16 x i16> %24655, <16 x i16>* %24657, align 2, !tbaa !399
  %24658 = zext i32 %.pre-phi3569 to i64
  %24659 = mul nsw i64 %24658, %333
  %24660 = add nsw i64 %24659, %296
  %24661 = getelementptr inbounds i16, i16* %blur_x879, i64 %24660
  %24662 = getelementptr inbounds i16, i16* %24661, i64 -32
  %24663 = bitcast i16* %24662 to <16 x i16>*
  %24664 = load <16 x i16>, <16 x i16>* %24663, align 2, !tbaa !399
  %24665 = getelementptr inbounds i16, i16* %24661, i64 -16
  %24666 = bitcast i16* %24665 to <16 x i16>*
  %24667 = load <16 x i16>, <16 x i16>* %24666, align 2, !tbaa !399
  %24668 = zext i32 %.pre-phi3563 to i64
  %24669 = mul nsw i64 %24668, %333
  %24670 = add nsw i64 %24669, %296
  %24671 = getelementptr inbounds i16, i16* %blur_x879, i64 %24670
  %24672 = getelementptr inbounds i16, i16* %24671, i64 -32
  %24673 = bitcast i16* %24672 to <16 x i16>*
  %24674 = load <16 x i16>, <16 x i16>* %24673, align 2, !tbaa !399
  %24675 = getelementptr inbounds i16, i16* %24671, i64 -16
  %24676 = bitcast i16* %24675 to <16 x i16>*
  %24677 = load <16 x i16>, <16 x i16>* %24676, align 2, !tbaa !399
  %24678 = zext i32 %.pre-phi3535 to i64
  %24679 = mul nsw i64 %24678, %333
  %24680 = add nsw i64 %24679, %296
  %24681 = getelementptr inbounds i16, i16* %blur_x879, i64 %24680
  %24682 = getelementptr inbounds i16, i16* %24681, i64 -32
  %24683 = bitcast i16* %24682 to <16 x i16>*
  %24684 = load <16 x i16>, <16 x i16>* %24683, align 2, !tbaa !399
  %24685 = getelementptr inbounds i16, i16* %24681, i64 -16
  %24686 = bitcast i16* %24685 to <16 x i16>*
  %24687 = load <16 x i16>, <16 x i16>* %24686, align 2, !tbaa !399
  %24688 = mul nsw i64 %24649, %333
  %24689 = add nsw i64 %24688, %296
  %24690 = getelementptr inbounds i16, i16* %blur_x879, i64 %24689
  %24691 = getelementptr inbounds i16, i16* %24690, i64 -32
  %24692 = bitcast i16* %24691 to <16 x i16>*
  %24693 = load <16 x i16>, <16 x i16>* %24692, align 2, !tbaa !399
  %24694 = getelementptr inbounds i16, i16* %24690, i64 -16
  %24695 = bitcast i16* %24694 to <16 x i16>*
  %24696 = load <16 x i16>, <16 x i16>* %24695, align 2, !tbaa !399
  %24697 = zext i32 %.pre-phi3539 to i64
  %24698 = mul nsw i64 %24697, %333
  %24699 = add nsw i64 %24698, %296
  %24700 = getelementptr inbounds i16, i16* %blur_x879, i64 %24699
  %24701 = getelementptr inbounds i16, i16* %24700, i64 -32
  %24702 = bitcast i16* %24701 to <16 x i16>*
  %24703 = load <16 x i16>, <16 x i16>* %24702, align 2, !tbaa !399
  %24704 = getelementptr inbounds i16, i16* %24700, i64 -16
  %24705 = bitcast i16* %24704 to <16 x i16>*
  %24706 = load <16 x i16>, <16 x i16>* %24705, align 2, !tbaa !399
  %24707 = add <16 x i16> %24674, %24664
  %24708 = add <16 x i16> %24707, %24684
  %24709 = add <16 x i16> %24708, %24693
  %24710 = add <16 x i16> %24709, %24703
  %24711 = add <16 x i16> %24677, %24667
  %24712 = add <16 x i16> %24711, %24687
  %24713 = add <16 x i16> %24712, %24696
  %24714 = add <16 x i16> %24713, %24706
  %24715 = shufflevector <16 x i16> %24710, <16 x i16> %24714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24716 = udiv <32 x i16> %24715, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24717 = shufflevector <32 x i16> %24716, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24718 = sext i32 %a379 to i64
  %24719 = add nsw i64 %24718, 22
  %24720 = mul nsw i64 %24719, %334
  %24721 = add nsw i64 %336, %24720
  %24722 = getelementptr inbounds i16, i16* %263, i64 %24721
  %24723 = getelementptr inbounds i16, i16* %24722, i64 -32
  %24724 = bitcast i16* %24723 to <16 x i16>*
  store <16 x i16> %24717, <16 x i16>* %24724, align 2, !tbaa !401
  %24725 = shufflevector <32 x i16> %24716, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24726 = getelementptr inbounds i16, i16* %24722, i64 -16
  %24727 = bitcast i16* %24726 to <16 x i16>*
  store <16 x i16> %24725, <16 x i16>* %24727, align 2, !tbaa !401
  br label %after_bb1945

"for blur_y.s0.x.x.rebased1960":                  ; preds = %"for blur_y.s0.x.x.rebased1960.preheader", %"consume blur_x1968"
  %indvars.iv3418 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1960.preheader" ], [ %indvars.iv.next3419, %"consume blur_x1968" ]
  %24728 = add nsw i64 %indvars.iv3418, %303
  %24729 = icmp slt i64 %24728, 1
  %24730 = trunc i64 %24728 to i32
  %24731 = shl nsw i32 %24730, 5
  %24732 = icmp sgt i32 %198, %24731
  %24733 = or i1 %24729, %24732
  br i1 %24733, label %"produce blur_x1966", label %"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge"

"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1960"
  %.pre3608 = shl nsw i64 %24728, 5
  br label %"consume blur_x1968"

"end for blur_y.s0.x.x.rebased1961":              ; preds = %"consume blur_x1968", %after_bb1945
  br i1 %304, label %"for blur_y.s0.x.x.rebased1976.preheader", label %"end for blur_y.s0.x.x.rebased1977", !prof !386

"for blur_y.s0.x.x.rebased1976.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1961"
  %24734 = sext i32 %t1694944 to i64
  %24735 = zext i32 %.pre-phi3569 to i64
  %24736 = mul nsw i64 %24735, %337
  %24737 = sub nsw i64 %24736, %298
  %24738 = zext i32 %.pre-phi3563 to i64
  %24739 = mul nsw i64 %24738, %337
  %24740 = sub nsw i64 %24739, %298
  %24741 = zext i32 %.pre-phi3535 to i64
  %24742 = mul nsw i64 %24741, %337
  %24743 = sub nsw i64 %24742, %298
  %24744 = zext i32 %.pre-phi3543 to i64
  %24745 = mul nsw i64 %24744, %337
  %24746 = sub nsw i64 %24745, %298
  %24747 = zext i32 %.pre-phi3539 to i64
  %24748 = mul nsw i64 %24747, %337
  %24749 = sub nsw i64 %24748, %298
  %24750 = sext i32 %a379 to i64
  %24751 = add nsw i64 %24750, 22
  %24752 = mul nsw i64 %24751, %334
  %24753 = add nsw i64 %24752, %338
  br label %"for blur_y.s0.x.x.rebased1976"

"produce blur_x1966":                             ; preds = %"for blur_y.s0.x.x.rebased1960"
  %t10641967 = add nsw i32 %469, %24731
  %24754 = sext i32 %t10641967 to i64
  %24755 = getelementptr inbounds i16, i16* %read_input822, i64 %24754
  %24756 = getelementptr inbounds i16, i16* %24755, i64 1
  %24757 = bitcast i16* %24756 to <16 x i16>*
  %24758 = load <16 x i16>, <16 x i16>* %24757, align 2, !tbaa !396
  %24759 = getelementptr inbounds i16, i16* %24755, i64 17
  %24760 = bitcast i16* %24759 to <16 x i16>*
  %24761 = load <16 x i16>, <16 x i16>* %24760, align 2, !tbaa !396
  %24762 = bitcast i16* %24755 to <16 x i16>*
  %24763 = load <16 x i16>, <16 x i16>* %24762, align 2, !tbaa !396
  %24764 = getelementptr inbounds i16, i16* %24755, i64 16
  %24765 = bitcast i16* %24764 to <16 x i16>*
  %24766 = load <16 x i16>, <16 x i16>* %24765, align 2, !tbaa !396
  %24767 = getelementptr inbounds i16, i16* %24755, i64 2
  %24768 = bitcast i16* %24767 to <16 x i16>*
  %24769 = load <16 x i16>, <16 x i16>* %24768, align 2, !tbaa !396
  %24770 = getelementptr inbounds i16, i16* %24755, i64 18
  %24771 = bitcast i16* %24770 to <16 x i16>*
  %24772 = load <16 x i16>, <16 x i16>* %24771, align 2, !tbaa !396
  %24773 = getelementptr inbounds i16, i16* %24755, i64 4
  %24774 = bitcast i16* %24773 to <16 x i16>*
  %24775 = load <16 x i16>, <16 x i16>* %24774, align 2, !tbaa !396
  %24776 = getelementptr inbounds i16, i16* %24755, i64 20
  %24777 = bitcast i16* %24776 to <16 x i16>*
  %24778 = load <16 x i16>, <16 x i16>* %24777, align 2, !tbaa !396
  %24779 = getelementptr inbounds i16, i16* %24755, i64 3
  %24780 = bitcast i16* %24779 to <16 x i16>*
  %24781 = load <16 x i16>, <16 x i16>* %24780, align 2, !tbaa !396
  %24782 = getelementptr inbounds i16, i16* %24755, i64 19
  %24783 = bitcast i16* %24782 to <16 x i16>*
  %24784 = load <16 x i16>, <16 x i16>* %24783, align 2, !tbaa !396
  %24785 = add <16 x i16> %24763, %24758
  %24786 = add <16 x i16> %24785, %24769
  %24787 = add <16 x i16> %24786, %24775
  %24788 = add <16 x i16> %24787, %24781
  %24789 = add <16 x i16> %24766, %24761
  %24790 = add <16 x i16> %24789, %24772
  %24791 = add <16 x i16> %24790, %24778
  %24792 = add <16 x i16> %24791, %24784
  %24793 = shufflevector <16 x i16> %24788, <16 x i16> %24792, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24794 = udiv <32 x i16> %24793, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24795 = shufflevector <32 x i16> %24794, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24796 = shl nsw i64 %24728, 5
  %24797 = add nsw i64 %24796, %24587
  %24798 = getelementptr inbounds i16, i16* %blur_x879, i64 %24797
  %24799 = bitcast i16* %24798 to <16 x i16>*
  store <16 x i16> %24795, <16 x i16>* %24799, align 2, !tbaa !399
  %24800 = shufflevector <32 x i16> %24794, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24801 = getelementptr inbounds i16, i16* %24798, i64 16
  %24802 = bitcast i16* %24801 to <16 x i16>*
  store <16 x i16> %24800, <16 x i16>* %24802, align 2, !tbaa !399
  br label %"consume blur_x1968"

"consume blur_x1968":                             ; preds = %"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge", %"produce blur_x1966"
  %.pre-phi3609 = phi i64 [ %.pre3608, %"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge" ], [ %24796, %"produce blur_x1966" ]
  %24803 = add nsw i64 %24590, %.pre-phi3609
  %24804 = getelementptr inbounds i16, i16* %blur_x879, i64 %24803
  %24805 = bitcast i16* %24804 to <16 x i16>*
  %24806 = load <16 x i16>, <16 x i16>* %24805, align 2, !tbaa !399
  %24807 = getelementptr inbounds i16, i16* %24804, i64 16
  %24808 = bitcast i16* %24807 to <16 x i16>*
  %24809 = load <16 x i16>, <16 x i16>* %24808, align 2, !tbaa !399
  %24810 = add nsw i64 %24593, %.pre-phi3609
  %24811 = getelementptr inbounds i16, i16* %blur_x879, i64 %24810
  %24812 = bitcast i16* %24811 to <16 x i16>*
  %24813 = load <16 x i16>, <16 x i16>* %24812, align 2, !tbaa !399
  %24814 = getelementptr inbounds i16, i16* %24811, i64 16
  %24815 = bitcast i16* %24814 to <16 x i16>*
  %24816 = load <16 x i16>, <16 x i16>* %24815, align 2, !tbaa !399
  %24817 = add nsw i64 %24596, %.pre-phi3609
  %24818 = getelementptr inbounds i16, i16* %blur_x879, i64 %24817
  %24819 = bitcast i16* %24818 to <16 x i16>*
  %24820 = load <16 x i16>, <16 x i16>* %24819, align 2, !tbaa !399
  %24821 = getelementptr inbounds i16, i16* %24818, i64 16
  %24822 = bitcast i16* %24821 to <16 x i16>*
  %24823 = load <16 x i16>, <16 x i16>* %24822, align 2, !tbaa !399
  %24824 = add nsw i64 %24599, %.pre-phi3609
  %24825 = getelementptr inbounds i16, i16* %blur_x879, i64 %24824
  %24826 = bitcast i16* %24825 to <16 x i16>*
  %24827 = load <16 x i16>, <16 x i16>* %24826, align 2, !tbaa !399
  %24828 = getelementptr inbounds i16, i16* %24825, i64 16
  %24829 = bitcast i16* %24828 to <16 x i16>*
  %24830 = load <16 x i16>, <16 x i16>* %24829, align 2, !tbaa !399
  %24831 = add nsw i64 %24602, %.pre-phi3609
  %24832 = getelementptr inbounds i16, i16* %blur_x879, i64 %24831
  %24833 = bitcast i16* %24832 to <16 x i16>*
  %24834 = load <16 x i16>, <16 x i16>* %24833, align 2, !tbaa !399
  %24835 = getelementptr inbounds i16, i16* %24832, i64 16
  %24836 = bitcast i16* %24835 to <16 x i16>*
  %24837 = load <16 x i16>, <16 x i16>* %24836, align 2, !tbaa !399
  %24838 = add <16 x i16> %24813, %24806
  %24839 = add <16 x i16> %24838, %24820
  %24840 = add <16 x i16> %24839, %24827
  %24841 = add <16 x i16> %24840, %24834
  %24842 = add <16 x i16> %24816, %24809
  %24843 = add <16 x i16> %24842, %24823
  %24844 = add <16 x i16> %24843, %24830
  %24845 = add <16 x i16> %24844, %24837
  %24846 = shufflevector <16 x i16> %24841, <16 x i16> %24845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24847 = udiv <32 x i16> %24846, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24848 = shufflevector <32 x i16> %24847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24849 = add nsw i64 %24606, %.pre-phi3609
  %24850 = getelementptr inbounds i16, i16* %263, i64 %24849
  %24851 = bitcast i16* %24850 to <16 x i16>*
  store <16 x i16> %24848, <16 x i16>* %24851, align 2, !tbaa !401
  %24852 = shufflevector <32 x i16> %24847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24853 = getelementptr inbounds i16, i16* %24850, i64 16
  %24854 = bitcast i16* %24853 to <16 x i16>*
  store <16 x i16> %24852, <16 x i16>* %24854, align 2, !tbaa !401
  %indvars.iv.next3419 = add nuw nsw i64 %indvars.iv3418, 1
  %.not2575 = icmp eq i64 %indvars.iv.next3419, %530
  br i1 %.not2575, label %"end for blur_y.s0.x.x.rebased1961", label %"for blur_y.s0.x.x.rebased1960"

"for blur_y.s0.x.x.rebased1976":                  ; preds = %"for blur_y.s0.x.x.rebased1976.preheader", %"consume blur_x1987"
  %blur_y.s0.x.x.rebased1978 = phi i32 [ %24963, %"consume blur_x1987" ], [ 0, %"for blur_y.s0.x.x.rebased1976.preheader" ]
  %24855 = add nsw i32 %blur_y.s0.x.x.rebased1978, %t1626814
  %a4763 = shl nsw i32 %24855, 5
  %24856 = icmp sgt i32 %t1647, %a4763
  %blur_y.s0.x.v0.base.s1979 = select i1 %24856, i32 %a4763, i32 %t1647
  %24857 = icmp slt i32 %24855, 1
  %24858 = icmp sgt i32 %198, %a4763
  %24859 = or i1 %24857, %24858
  br i1 %24859, label %"produce blur_x1984", label %"consume blur_x1987"

"end for blur_y.s0.x.x.rebased1977":              ; preds = %"consume blur_x1987", %"end for blur_y.s0.x.x.rebased1961"
  br i1 %229, label %"produce blur_x1991", label %after_bb1988

"produce blur_x1984":                             ; preds = %"for blur_y.s0.x.x.rebased1976"
  %24860 = icmp slt i32 %blur_y.s0.x.v0.base.s1979, %198
  %blur_x.s0.x.v1.base.s1985 = select i1 %24860, i32 %blur_y.s0.x.v0.base.s1979, i32 %198
  %t10691986 = add nsw i32 %469, %blur_x.s0.x.v1.base.s1985
  %24861 = sext i32 %t10691986 to i64
  %24862 = getelementptr inbounds i16, i16* %read_input822, i64 %24861
  %24863 = getelementptr inbounds i16, i16* %24862, i64 1
  %24864 = bitcast i16* %24863 to <16 x i16>*
  %24865 = load <16 x i16>, <16 x i16>* %24864, align 2, !tbaa !396
  %24866 = getelementptr inbounds i16, i16* %24862, i64 17
  %24867 = bitcast i16* %24866 to <16 x i16>*
  %24868 = load <16 x i16>, <16 x i16>* %24867, align 2, !tbaa !396
  %24869 = bitcast i16* %24862 to <16 x i16>*
  %24870 = load <16 x i16>, <16 x i16>* %24869, align 2, !tbaa !396
  %24871 = getelementptr inbounds i16, i16* %24862, i64 16
  %24872 = bitcast i16* %24871 to <16 x i16>*
  %24873 = load <16 x i16>, <16 x i16>* %24872, align 2, !tbaa !396
  %24874 = getelementptr inbounds i16, i16* %24862, i64 2
  %24875 = bitcast i16* %24874 to <16 x i16>*
  %24876 = load <16 x i16>, <16 x i16>* %24875, align 2, !tbaa !396
  %24877 = getelementptr inbounds i16, i16* %24862, i64 18
  %24878 = bitcast i16* %24877 to <16 x i16>*
  %24879 = load <16 x i16>, <16 x i16>* %24878, align 2, !tbaa !396
  %24880 = getelementptr inbounds i16, i16* %24862, i64 4
  %24881 = bitcast i16* %24880 to <16 x i16>*
  %24882 = load <16 x i16>, <16 x i16>* %24881, align 2, !tbaa !396
  %24883 = getelementptr inbounds i16, i16* %24862, i64 20
  %24884 = bitcast i16* %24883 to <16 x i16>*
  %24885 = load <16 x i16>, <16 x i16>* %24884, align 2, !tbaa !396
  %24886 = getelementptr inbounds i16, i16* %24862, i64 3
  %24887 = bitcast i16* %24886 to <16 x i16>*
  %24888 = load <16 x i16>, <16 x i16>* %24887, align 2, !tbaa !396
  %24889 = getelementptr inbounds i16, i16* %24862, i64 19
  %24890 = bitcast i16* %24889 to <16 x i16>*
  %24891 = load <16 x i16>, <16 x i16>* %24890, align 2, !tbaa !396
  %24892 = add <16 x i16> %24870, %24865
  %24893 = add <16 x i16> %24892, %24876
  %24894 = add <16 x i16> %24893, %24882
  %24895 = add <16 x i16> %24894, %24888
  %24896 = add <16 x i16> %24873, %24868
  %24897 = add <16 x i16> %24896, %24879
  %24898 = add <16 x i16> %24897, %24885
  %24899 = add <16 x i16> %24898, %24891
  %24900 = shufflevector <16 x i16> %24895, <16 x i16> %24899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24901 = udiv <32 x i16> %24900, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24902 = shufflevector <32 x i16> %24901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24903 = sext i32 %blur_x.s0.x.v1.base.s1985 to i64
  %24904 = add nsw i64 %24903, %24734
  %24905 = getelementptr inbounds i16, i16* %blur_x879, i64 %24904
  %24906 = bitcast i16* %24905 to <16 x i16>*
  store <16 x i16> %24902, <16 x i16>* %24906, align 2, !tbaa !399
  %24907 = shufflevector <32 x i16> %24901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24908 = getelementptr inbounds i16, i16* %24905, i64 16
  %24909 = bitcast i16* %24908 to <16 x i16>*
  store <16 x i16> %24907, <16 x i16>* %24909, align 2, !tbaa !399
  br label %"consume blur_x1987"

"consume blur_x1987":                             ; preds = %"for blur_y.s0.x.x.rebased1976", %"produce blur_x1984"
  %24910 = sext i32 %blur_y.s0.x.v0.base.s1979 to i64
  %24911 = add nsw i64 %24737, %24910
  %24912 = getelementptr inbounds i16, i16* %blur_x879, i64 %24911
  %24913 = bitcast i16* %24912 to <16 x i16>*
  %24914 = load <16 x i16>, <16 x i16>* %24913, align 2, !tbaa !399
  %24915 = getelementptr inbounds i16, i16* %24912, i64 16
  %24916 = bitcast i16* %24915 to <16 x i16>*
  %24917 = load <16 x i16>, <16 x i16>* %24916, align 2, !tbaa !399
  %24918 = add nsw i64 %24740, %24910
  %24919 = getelementptr inbounds i16, i16* %blur_x879, i64 %24918
  %24920 = bitcast i16* %24919 to <16 x i16>*
  %24921 = load <16 x i16>, <16 x i16>* %24920, align 2, !tbaa !399
  %24922 = getelementptr inbounds i16, i16* %24919, i64 16
  %24923 = bitcast i16* %24922 to <16 x i16>*
  %24924 = load <16 x i16>, <16 x i16>* %24923, align 2, !tbaa !399
  %24925 = add nsw i64 %24743, %24910
  %24926 = getelementptr inbounds i16, i16* %blur_x879, i64 %24925
  %24927 = bitcast i16* %24926 to <16 x i16>*
  %24928 = load <16 x i16>, <16 x i16>* %24927, align 2, !tbaa !399
  %24929 = getelementptr inbounds i16, i16* %24926, i64 16
  %24930 = bitcast i16* %24929 to <16 x i16>*
  %24931 = load <16 x i16>, <16 x i16>* %24930, align 2, !tbaa !399
  %24932 = add nsw i64 %24746, %24910
  %24933 = getelementptr inbounds i16, i16* %blur_x879, i64 %24932
  %24934 = bitcast i16* %24933 to <16 x i16>*
  %24935 = load <16 x i16>, <16 x i16>* %24934, align 2, !tbaa !399
  %24936 = getelementptr inbounds i16, i16* %24933, i64 16
  %24937 = bitcast i16* %24936 to <16 x i16>*
  %24938 = load <16 x i16>, <16 x i16>* %24937, align 2, !tbaa !399
  %24939 = add nsw i64 %24749, %24910
  %24940 = getelementptr inbounds i16, i16* %blur_x879, i64 %24939
  %24941 = bitcast i16* %24940 to <16 x i16>*
  %24942 = load <16 x i16>, <16 x i16>* %24941, align 2, !tbaa !399
  %24943 = getelementptr inbounds i16, i16* %24940, i64 16
  %24944 = bitcast i16* %24943 to <16 x i16>*
  %24945 = load <16 x i16>, <16 x i16>* %24944, align 2, !tbaa !399
  %24946 = add <16 x i16> %24921, %24914
  %24947 = add <16 x i16> %24946, %24928
  %24948 = add <16 x i16> %24947, %24935
  %24949 = add <16 x i16> %24948, %24942
  %24950 = add <16 x i16> %24924, %24917
  %24951 = add <16 x i16> %24950, %24931
  %24952 = add <16 x i16> %24951, %24938
  %24953 = add <16 x i16> %24952, %24945
  %24954 = shufflevector <16 x i16> %24949, <16 x i16> %24953, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24955 = udiv <32 x i16> %24954, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %24956 = shufflevector <32 x i16> %24955, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24957 = add nsw i64 %24753, %24910
  %24958 = getelementptr inbounds i16, i16* %263, i64 %24957
  %24959 = bitcast i16* %24958 to <16 x i16>*
  store <16 x i16> %24956, <16 x i16>* %24959, align 2, !tbaa !401
  %24960 = shufflevector <32 x i16> %24955, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24961 = getelementptr inbounds i16, i16* %24958, i64 16
  %24962 = bitcast i16* %24961 to <16 x i16>*
  store <16 x i16> %24960, <16 x i16>* %24962, align 2, !tbaa !401
  %24963 = add nuw nsw i32 %blur_y.s0.x.x.rebased1978, 1
  %.not2574 = icmp eq i32 %24963, %t1683898
  br i1 %.not2574, label %"end for blur_y.s0.x.x.rebased1977", label %"for blur_y.s0.x.x.rebased1976"

after_bb1988:                                     ; preds = %"end for blur_y.s0.x.x.rebased1977", %"produce blur_x1991"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2003.preheader", label %"end for blur_y.s0.x.x.rebased2004", !prof !386

"for blur_y.s0.x.x.rebased2003.preheader":        ; preds = %after_bb1988
  %24964 = sext i32 %t1700974 to i64
  %24965 = zext i32 %.pre-phi3535 to i64
  %24966 = mul nsw i64 %24965, %337
  %24967 = sub nsw i64 %24966, %298
  %24968 = zext i32 %.pre-phi3569 to i64
  %24969 = mul nsw i64 %24968, %337
  %24970 = sub nsw i64 %24969, %298
  %24971 = zext i32 %.pre-phi3539 to i64
  %24972 = mul nsw i64 %24971, %337
  %24973 = sub nsw i64 %24972, %298
  %24974 = zext i32 %.pre-phi3547 to i64
  %24975 = mul nsw i64 %24974, %337
  %24976 = sub nsw i64 %24975, %298
  %24977 = zext i32 %.pre-phi3543 to i64
  %24978 = mul nsw i64 %24977, %337
  %24979 = sub nsw i64 %24978, %298
  %24980 = sext i32 %a379 to i64
  %24981 = add nsw i64 %24980, 23
  %24982 = mul nsw i64 %24981, %334
  %24983 = add nsw i64 %24982, %338
  br label %"for blur_y.s0.x.x.rebased2003"

"produce blur_x1991":                             ; preds = %"end for blur_y.s0.x.x.rebased1977"
  %24984 = getelementptr inbounds i16, i16* %read_input822, i64 %473
  %24985 = getelementptr inbounds i16, i16* %24984, i64 -31
  %24986 = bitcast i16* %24985 to <16 x i16>*
  %24987 = load <16 x i16>, <16 x i16>* %24986, align 2, !tbaa !396
  %24988 = getelementptr inbounds i16, i16* %24984, i64 -15
  %24989 = bitcast i16* %24988 to <16 x i16>*
  %24990 = load <16 x i16>, <16 x i16>* %24989, align 2, !tbaa !396
  %24991 = getelementptr inbounds i16, i16* %24984, i64 -32
  %24992 = bitcast i16* %24991 to <16 x i16>*
  %24993 = load <16 x i16>, <16 x i16>* %24992, align 2, !tbaa !396
  %24994 = getelementptr inbounds i16, i16* %24984, i64 -16
  %24995 = bitcast i16* %24994 to <16 x i16>*
  %24996 = load <16 x i16>, <16 x i16>* %24995, align 2, !tbaa !396
  %24997 = getelementptr inbounds i16, i16* %24984, i64 -30
  %24998 = bitcast i16* %24997 to <16 x i16>*
  %24999 = load <16 x i16>, <16 x i16>* %24998, align 2, !tbaa !396
  %25000 = getelementptr inbounds i16, i16* %24984, i64 -14
  %25001 = bitcast i16* %25000 to <16 x i16>*
  %25002 = load <16 x i16>, <16 x i16>* %25001, align 2, !tbaa !396
  %25003 = getelementptr inbounds i16, i16* %24984, i64 -28
  %25004 = bitcast i16* %25003 to <16 x i16>*
  %25005 = load <16 x i16>, <16 x i16>* %25004, align 2, !tbaa !396
  %25006 = getelementptr inbounds i16, i16* %24984, i64 -12
  %25007 = bitcast i16* %25006 to <16 x i16>*
  %25008 = load <16 x i16>, <16 x i16>* %25007, align 2, !tbaa !396
  %25009 = getelementptr inbounds i16, i16* %24984, i64 -29
  %25010 = bitcast i16* %25009 to <16 x i16>*
  %25011 = load <16 x i16>, <16 x i16>* %25010, align 2, !tbaa !396
  %25012 = getelementptr inbounds i16, i16* %24984, i64 -13
  %25013 = bitcast i16* %25012 to <16 x i16>*
  %25014 = load <16 x i16>, <16 x i16>* %25013, align 2, !tbaa !396
  %25015 = add <16 x i16> %24993, %24987
  %25016 = add <16 x i16> %25015, %24999
  %25017 = add <16 x i16> %25016, %25005
  %25018 = add <16 x i16> %25017, %25011
  %25019 = add <16 x i16> %24996, %24990
  %25020 = add <16 x i16> %25019, %25002
  %25021 = add <16 x i16> %25020, %25008
  %25022 = add <16 x i16> %25021, %25014
  %25023 = shufflevector <16 x i16> %25018, <16 x i16> %25022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25024 = udiv <32 x i16> %25023, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25025 = shufflevector <32 x i16> %25024, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25026 = zext i32 %.pre-phi3547 to i64
  %25027 = mul nsw i64 %299, %25026
  %25028 = add nsw i64 %301, %25027
  %25029 = getelementptr inbounds i16, i16* %blur_x879, i64 %25028
  %25030 = getelementptr inbounds i16, i16* %25029, i64 -32
  %25031 = bitcast i16* %25030 to <16 x i16>*
  store <16 x i16> %25025, <16 x i16>* %25031, align 2, !tbaa !399
  %25032 = shufflevector <32 x i16> %25024, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25033 = getelementptr inbounds i16, i16* %25029, i64 -16
  %25034 = bitcast i16* %25033 to <16 x i16>*
  store <16 x i16> %25032, <16 x i16>* %25034, align 2, !tbaa !399
  %25035 = zext i32 %.pre-phi3535 to i64
  %25036 = mul nsw i64 %25035, %333
  %25037 = add nsw i64 %25036, %296
  %25038 = getelementptr inbounds i16, i16* %blur_x879, i64 %25037
  %25039 = getelementptr inbounds i16, i16* %25038, i64 -32
  %25040 = bitcast i16* %25039 to <16 x i16>*
  %25041 = load <16 x i16>, <16 x i16>* %25040, align 2, !tbaa !399
  %25042 = getelementptr inbounds i16, i16* %25038, i64 -16
  %25043 = bitcast i16* %25042 to <16 x i16>*
  %25044 = load <16 x i16>, <16 x i16>* %25043, align 2, !tbaa !399
  %25045 = zext i32 %.pre-phi3569 to i64
  %25046 = mul nsw i64 %25045, %333
  %25047 = add nsw i64 %25046, %296
  %25048 = getelementptr inbounds i16, i16* %blur_x879, i64 %25047
  %25049 = getelementptr inbounds i16, i16* %25048, i64 -32
  %25050 = bitcast i16* %25049 to <16 x i16>*
  %25051 = load <16 x i16>, <16 x i16>* %25050, align 2, !tbaa !399
  %25052 = getelementptr inbounds i16, i16* %25048, i64 -16
  %25053 = bitcast i16* %25052 to <16 x i16>*
  %25054 = load <16 x i16>, <16 x i16>* %25053, align 2, !tbaa !399
  %25055 = zext i32 %.pre-phi3539 to i64
  %25056 = mul nsw i64 %25055, %333
  %25057 = add nsw i64 %25056, %296
  %25058 = getelementptr inbounds i16, i16* %blur_x879, i64 %25057
  %25059 = getelementptr inbounds i16, i16* %25058, i64 -32
  %25060 = bitcast i16* %25059 to <16 x i16>*
  %25061 = load <16 x i16>, <16 x i16>* %25060, align 2, !tbaa !399
  %25062 = getelementptr inbounds i16, i16* %25058, i64 -16
  %25063 = bitcast i16* %25062 to <16 x i16>*
  %25064 = load <16 x i16>, <16 x i16>* %25063, align 2, !tbaa !399
  %25065 = mul nsw i64 %25026, %333
  %25066 = add nsw i64 %25065, %296
  %25067 = getelementptr inbounds i16, i16* %blur_x879, i64 %25066
  %25068 = getelementptr inbounds i16, i16* %25067, i64 -32
  %25069 = bitcast i16* %25068 to <16 x i16>*
  %25070 = load <16 x i16>, <16 x i16>* %25069, align 2, !tbaa !399
  %25071 = getelementptr inbounds i16, i16* %25067, i64 -16
  %25072 = bitcast i16* %25071 to <16 x i16>*
  %25073 = load <16 x i16>, <16 x i16>* %25072, align 2, !tbaa !399
  %25074 = zext i32 %.pre-phi3543 to i64
  %25075 = mul nsw i64 %25074, %333
  %25076 = add nsw i64 %25075, %296
  %25077 = getelementptr inbounds i16, i16* %blur_x879, i64 %25076
  %25078 = getelementptr inbounds i16, i16* %25077, i64 -32
  %25079 = bitcast i16* %25078 to <16 x i16>*
  %25080 = load <16 x i16>, <16 x i16>* %25079, align 2, !tbaa !399
  %25081 = getelementptr inbounds i16, i16* %25077, i64 -16
  %25082 = bitcast i16* %25081 to <16 x i16>*
  %25083 = load <16 x i16>, <16 x i16>* %25082, align 2, !tbaa !399
  %25084 = add <16 x i16> %25051, %25041
  %25085 = add <16 x i16> %25084, %25061
  %25086 = add <16 x i16> %25085, %25070
  %25087 = add <16 x i16> %25086, %25080
  %25088 = add <16 x i16> %25054, %25044
  %25089 = add <16 x i16> %25088, %25064
  %25090 = add <16 x i16> %25089, %25073
  %25091 = add <16 x i16> %25090, %25083
  %25092 = shufflevector <16 x i16> %25087, <16 x i16> %25091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25093 = udiv <32 x i16> %25092, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25094 = shufflevector <32 x i16> %25093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25095 = sext i32 %a379 to i64
  %25096 = add nsw i64 %25095, 23
  %25097 = mul nsw i64 %25096, %334
  %25098 = add nsw i64 %336, %25097
  %25099 = getelementptr inbounds i16, i16* %263, i64 %25098
  %25100 = getelementptr inbounds i16, i16* %25099, i64 -32
  %25101 = bitcast i16* %25100 to <16 x i16>*
  store <16 x i16> %25094, <16 x i16>* %25101, align 2, !tbaa !401
  %25102 = shufflevector <32 x i16> %25093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25103 = getelementptr inbounds i16, i16* %25099, i64 -16
  %25104 = bitcast i16* %25103 to <16 x i16>*
  store <16 x i16> %25102, <16 x i16>* %25104, align 2, !tbaa !401
  br label %after_bb1988

"for blur_y.s0.x.x.rebased2003":                  ; preds = %"for blur_y.s0.x.x.rebased2003.preheader", %"consume blur_x2011"
  %indvars.iv3420 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2003.preheader" ], [ %indvars.iv.next3421, %"consume blur_x2011" ]
  %25105 = add nsw i64 %indvars.iv3420, %303
  %25106 = icmp slt i64 %25105, 1
  %25107 = trunc i64 %25105 to i32
  %25108 = shl nsw i32 %25107, 5
  %25109 = icmp sgt i32 %198, %25108
  %25110 = or i1 %25106, %25109
  br i1 %25110, label %"produce blur_x2009", label %"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge"

"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2003"
  %.pre3610 = shl nsw i64 %25105, 5
  br label %"consume blur_x2011"

"end for blur_y.s0.x.x.rebased2004":              ; preds = %"consume blur_x2011", %after_bb1988
  br i1 %304, label %"for blur_y.s0.x.x.rebased2019.preheader", label %"end for blur_y.s0.x.x.rebased2020", !prof !386

"for blur_y.s0.x.x.rebased2019.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2004"
  %25111 = sext i32 %t1700974 to i64
  %25112 = zext i32 %.pre-phi3535 to i64
  %25113 = mul nsw i64 %25112, %337
  %25114 = sub nsw i64 %25113, %298
  %25115 = zext i32 %.pre-phi3569 to i64
  %25116 = mul nsw i64 %25115, %337
  %25117 = sub nsw i64 %25116, %298
  %25118 = zext i32 %.pre-phi3539 to i64
  %25119 = mul nsw i64 %25118, %337
  %25120 = sub nsw i64 %25119, %298
  %25121 = zext i32 %.pre-phi3547 to i64
  %25122 = mul nsw i64 %25121, %337
  %25123 = sub nsw i64 %25122, %298
  %25124 = zext i32 %.pre-phi3543 to i64
  %25125 = mul nsw i64 %25124, %337
  %25126 = sub nsw i64 %25125, %298
  %25127 = sext i32 %a379 to i64
  %25128 = add nsw i64 %25127, 23
  %25129 = mul nsw i64 %25128, %334
  %25130 = add nsw i64 %25129, %338
  br label %"for blur_y.s0.x.x.rebased2019"

"produce blur_x2009":                             ; preds = %"for blur_y.s0.x.x.rebased2003"
  %t10802010 = add nsw i32 %475, %25108
  %25131 = sext i32 %t10802010 to i64
  %25132 = getelementptr inbounds i16, i16* %read_input822, i64 %25131
  %25133 = getelementptr inbounds i16, i16* %25132, i64 1
  %25134 = bitcast i16* %25133 to <16 x i16>*
  %25135 = load <16 x i16>, <16 x i16>* %25134, align 2, !tbaa !396
  %25136 = getelementptr inbounds i16, i16* %25132, i64 17
  %25137 = bitcast i16* %25136 to <16 x i16>*
  %25138 = load <16 x i16>, <16 x i16>* %25137, align 2, !tbaa !396
  %25139 = bitcast i16* %25132 to <16 x i16>*
  %25140 = load <16 x i16>, <16 x i16>* %25139, align 2, !tbaa !396
  %25141 = getelementptr inbounds i16, i16* %25132, i64 16
  %25142 = bitcast i16* %25141 to <16 x i16>*
  %25143 = load <16 x i16>, <16 x i16>* %25142, align 2, !tbaa !396
  %25144 = getelementptr inbounds i16, i16* %25132, i64 2
  %25145 = bitcast i16* %25144 to <16 x i16>*
  %25146 = load <16 x i16>, <16 x i16>* %25145, align 2, !tbaa !396
  %25147 = getelementptr inbounds i16, i16* %25132, i64 18
  %25148 = bitcast i16* %25147 to <16 x i16>*
  %25149 = load <16 x i16>, <16 x i16>* %25148, align 2, !tbaa !396
  %25150 = getelementptr inbounds i16, i16* %25132, i64 4
  %25151 = bitcast i16* %25150 to <16 x i16>*
  %25152 = load <16 x i16>, <16 x i16>* %25151, align 2, !tbaa !396
  %25153 = getelementptr inbounds i16, i16* %25132, i64 20
  %25154 = bitcast i16* %25153 to <16 x i16>*
  %25155 = load <16 x i16>, <16 x i16>* %25154, align 2, !tbaa !396
  %25156 = getelementptr inbounds i16, i16* %25132, i64 3
  %25157 = bitcast i16* %25156 to <16 x i16>*
  %25158 = load <16 x i16>, <16 x i16>* %25157, align 2, !tbaa !396
  %25159 = getelementptr inbounds i16, i16* %25132, i64 19
  %25160 = bitcast i16* %25159 to <16 x i16>*
  %25161 = load <16 x i16>, <16 x i16>* %25160, align 2, !tbaa !396
  %25162 = add <16 x i16> %25140, %25135
  %25163 = add <16 x i16> %25162, %25146
  %25164 = add <16 x i16> %25163, %25152
  %25165 = add <16 x i16> %25164, %25158
  %25166 = add <16 x i16> %25143, %25138
  %25167 = add <16 x i16> %25166, %25149
  %25168 = add <16 x i16> %25167, %25155
  %25169 = add <16 x i16> %25168, %25161
  %25170 = shufflevector <16 x i16> %25165, <16 x i16> %25169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25171 = udiv <32 x i16> %25170, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25172 = shufflevector <32 x i16> %25171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25173 = shl nsw i64 %25105, 5
  %25174 = add nsw i64 %25173, %24964
  %25175 = getelementptr inbounds i16, i16* %blur_x879, i64 %25174
  %25176 = bitcast i16* %25175 to <16 x i16>*
  store <16 x i16> %25172, <16 x i16>* %25176, align 2, !tbaa !399
  %25177 = shufflevector <32 x i16> %25171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25178 = getelementptr inbounds i16, i16* %25175, i64 16
  %25179 = bitcast i16* %25178 to <16 x i16>*
  store <16 x i16> %25177, <16 x i16>* %25179, align 2, !tbaa !399
  br label %"consume blur_x2011"

"consume blur_x2011":                             ; preds = %"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge", %"produce blur_x2009"
  %.pre-phi3611 = phi i64 [ %.pre3610, %"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge" ], [ %25173, %"produce blur_x2009" ]
  %25180 = add nsw i64 %24967, %.pre-phi3611
  %25181 = getelementptr inbounds i16, i16* %blur_x879, i64 %25180
  %25182 = bitcast i16* %25181 to <16 x i16>*
  %25183 = load <16 x i16>, <16 x i16>* %25182, align 2, !tbaa !399
  %25184 = getelementptr inbounds i16, i16* %25181, i64 16
  %25185 = bitcast i16* %25184 to <16 x i16>*
  %25186 = load <16 x i16>, <16 x i16>* %25185, align 2, !tbaa !399
  %25187 = add nsw i64 %24970, %.pre-phi3611
  %25188 = getelementptr inbounds i16, i16* %blur_x879, i64 %25187
  %25189 = bitcast i16* %25188 to <16 x i16>*
  %25190 = load <16 x i16>, <16 x i16>* %25189, align 2, !tbaa !399
  %25191 = getelementptr inbounds i16, i16* %25188, i64 16
  %25192 = bitcast i16* %25191 to <16 x i16>*
  %25193 = load <16 x i16>, <16 x i16>* %25192, align 2, !tbaa !399
  %25194 = add nsw i64 %24973, %.pre-phi3611
  %25195 = getelementptr inbounds i16, i16* %blur_x879, i64 %25194
  %25196 = bitcast i16* %25195 to <16 x i16>*
  %25197 = load <16 x i16>, <16 x i16>* %25196, align 2, !tbaa !399
  %25198 = getelementptr inbounds i16, i16* %25195, i64 16
  %25199 = bitcast i16* %25198 to <16 x i16>*
  %25200 = load <16 x i16>, <16 x i16>* %25199, align 2, !tbaa !399
  %25201 = add nsw i64 %24976, %.pre-phi3611
  %25202 = getelementptr inbounds i16, i16* %blur_x879, i64 %25201
  %25203 = bitcast i16* %25202 to <16 x i16>*
  %25204 = load <16 x i16>, <16 x i16>* %25203, align 2, !tbaa !399
  %25205 = getelementptr inbounds i16, i16* %25202, i64 16
  %25206 = bitcast i16* %25205 to <16 x i16>*
  %25207 = load <16 x i16>, <16 x i16>* %25206, align 2, !tbaa !399
  %25208 = add nsw i64 %24979, %.pre-phi3611
  %25209 = getelementptr inbounds i16, i16* %blur_x879, i64 %25208
  %25210 = bitcast i16* %25209 to <16 x i16>*
  %25211 = load <16 x i16>, <16 x i16>* %25210, align 2, !tbaa !399
  %25212 = getelementptr inbounds i16, i16* %25209, i64 16
  %25213 = bitcast i16* %25212 to <16 x i16>*
  %25214 = load <16 x i16>, <16 x i16>* %25213, align 2, !tbaa !399
  %25215 = add <16 x i16> %25190, %25183
  %25216 = add <16 x i16> %25215, %25197
  %25217 = add <16 x i16> %25216, %25204
  %25218 = add <16 x i16> %25217, %25211
  %25219 = add <16 x i16> %25193, %25186
  %25220 = add <16 x i16> %25219, %25200
  %25221 = add <16 x i16> %25220, %25207
  %25222 = add <16 x i16> %25221, %25214
  %25223 = shufflevector <16 x i16> %25218, <16 x i16> %25222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25224 = udiv <32 x i16> %25223, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25225 = shufflevector <32 x i16> %25224, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25226 = add nsw i64 %24983, %.pre-phi3611
  %25227 = getelementptr inbounds i16, i16* %263, i64 %25226
  %25228 = bitcast i16* %25227 to <16 x i16>*
  store <16 x i16> %25225, <16 x i16>* %25228, align 2, !tbaa !401
  %25229 = shufflevector <32 x i16> %25224, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25230 = getelementptr inbounds i16, i16* %25227, i64 16
  %25231 = bitcast i16* %25230 to <16 x i16>*
  store <16 x i16> %25229, <16 x i16>* %25231, align 2, !tbaa !401
  %indvars.iv.next3421 = add nuw nsw i64 %indvars.iv3420, 1
  %.not2571 = icmp eq i64 %indvars.iv.next3421, %530
  br i1 %.not2571, label %"end for blur_y.s0.x.x.rebased2004", label %"for blur_y.s0.x.x.rebased2003"

"for blur_y.s0.x.x.rebased2019":                  ; preds = %"for blur_y.s0.x.x.rebased2019.preheader", %"consume blur_x2030"
  %blur_y.s0.x.x.rebased2021 = phi i32 [ %25340, %"consume blur_x2030" ], [ 0, %"for blur_y.s0.x.x.rebased2019.preheader" ]
  %25232 = add nsw i32 %blur_y.s0.x.x.rebased2021, %t1626814
  %a4920 = shl nsw i32 %25232, 5
  %25233 = icmp sgt i32 %t1647, %a4920
  %blur_y.s0.x.v0.base.s2022 = select i1 %25233, i32 %a4920, i32 %t1647
  %25234 = icmp slt i32 %25232, 1
  %25235 = icmp sgt i32 %198, %a4920
  %25236 = or i1 %25234, %25235
  br i1 %25236, label %"produce blur_x2027", label %"consume blur_x2030"

"end for blur_y.s0.x.x.rebased2020":              ; preds = %"consume blur_x2030", %"end for blur_y.s0.x.x.rebased2004"
  br i1 %229, label %"produce blur_x2034", label %after_bb2031

"produce blur_x2027":                             ; preds = %"for blur_y.s0.x.x.rebased2019"
  %25237 = icmp slt i32 %blur_y.s0.x.v0.base.s2022, %198
  %blur_x.s0.x.v1.base.s2028 = select i1 %25237, i32 %blur_y.s0.x.v0.base.s2022, i32 %198
  %t10852029 = add nsw i32 %475, %blur_x.s0.x.v1.base.s2028
  %25238 = sext i32 %t10852029 to i64
  %25239 = getelementptr inbounds i16, i16* %read_input822, i64 %25238
  %25240 = getelementptr inbounds i16, i16* %25239, i64 1
  %25241 = bitcast i16* %25240 to <16 x i16>*
  %25242 = load <16 x i16>, <16 x i16>* %25241, align 2, !tbaa !396
  %25243 = getelementptr inbounds i16, i16* %25239, i64 17
  %25244 = bitcast i16* %25243 to <16 x i16>*
  %25245 = load <16 x i16>, <16 x i16>* %25244, align 2, !tbaa !396
  %25246 = bitcast i16* %25239 to <16 x i16>*
  %25247 = load <16 x i16>, <16 x i16>* %25246, align 2, !tbaa !396
  %25248 = getelementptr inbounds i16, i16* %25239, i64 16
  %25249 = bitcast i16* %25248 to <16 x i16>*
  %25250 = load <16 x i16>, <16 x i16>* %25249, align 2, !tbaa !396
  %25251 = getelementptr inbounds i16, i16* %25239, i64 2
  %25252 = bitcast i16* %25251 to <16 x i16>*
  %25253 = load <16 x i16>, <16 x i16>* %25252, align 2, !tbaa !396
  %25254 = getelementptr inbounds i16, i16* %25239, i64 18
  %25255 = bitcast i16* %25254 to <16 x i16>*
  %25256 = load <16 x i16>, <16 x i16>* %25255, align 2, !tbaa !396
  %25257 = getelementptr inbounds i16, i16* %25239, i64 4
  %25258 = bitcast i16* %25257 to <16 x i16>*
  %25259 = load <16 x i16>, <16 x i16>* %25258, align 2, !tbaa !396
  %25260 = getelementptr inbounds i16, i16* %25239, i64 20
  %25261 = bitcast i16* %25260 to <16 x i16>*
  %25262 = load <16 x i16>, <16 x i16>* %25261, align 2, !tbaa !396
  %25263 = getelementptr inbounds i16, i16* %25239, i64 3
  %25264 = bitcast i16* %25263 to <16 x i16>*
  %25265 = load <16 x i16>, <16 x i16>* %25264, align 2, !tbaa !396
  %25266 = getelementptr inbounds i16, i16* %25239, i64 19
  %25267 = bitcast i16* %25266 to <16 x i16>*
  %25268 = load <16 x i16>, <16 x i16>* %25267, align 2, !tbaa !396
  %25269 = add <16 x i16> %25247, %25242
  %25270 = add <16 x i16> %25269, %25253
  %25271 = add <16 x i16> %25270, %25259
  %25272 = add <16 x i16> %25271, %25265
  %25273 = add <16 x i16> %25250, %25245
  %25274 = add <16 x i16> %25273, %25256
  %25275 = add <16 x i16> %25274, %25262
  %25276 = add <16 x i16> %25275, %25268
  %25277 = shufflevector <16 x i16> %25272, <16 x i16> %25276, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25278 = udiv <32 x i16> %25277, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25279 = shufflevector <32 x i16> %25278, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25280 = sext i32 %blur_x.s0.x.v1.base.s2028 to i64
  %25281 = add nsw i64 %25280, %25111
  %25282 = getelementptr inbounds i16, i16* %blur_x879, i64 %25281
  %25283 = bitcast i16* %25282 to <16 x i16>*
  store <16 x i16> %25279, <16 x i16>* %25283, align 2, !tbaa !399
  %25284 = shufflevector <32 x i16> %25278, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25285 = getelementptr inbounds i16, i16* %25282, i64 16
  %25286 = bitcast i16* %25285 to <16 x i16>*
  store <16 x i16> %25284, <16 x i16>* %25286, align 2, !tbaa !399
  br label %"consume blur_x2030"

"consume blur_x2030":                             ; preds = %"for blur_y.s0.x.x.rebased2019", %"produce blur_x2027"
  %25287 = sext i32 %blur_y.s0.x.v0.base.s2022 to i64
  %25288 = add nsw i64 %25114, %25287
  %25289 = getelementptr inbounds i16, i16* %blur_x879, i64 %25288
  %25290 = bitcast i16* %25289 to <16 x i16>*
  %25291 = load <16 x i16>, <16 x i16>* %25290, align 2, !tbaa !399
  %25292 = getelementptr inbounds i16, i16* %25289, i64 16
  %25293 = bitcast i16* %25292 to <16 x i16>*
  %25294 = load <16 x i16>, <16 x i16>* %25293, align 2, !tbaa !399
  %25295 = add nsw i64 %25117, %25287
  %25296 = getelementptr inbounds i16, i16* %blur_x879, i64 %25295
  %25297 = bitcast i16* %25296 to <16 x i16>*
  %25298 = load <16 x i16>, <16 x i16>* %25297, align 2, !tbaa !399
  %25299 = getelementptr inbounds i16, i16* %25296, i64 16
  %25300 = bitcast i16* %25299 to <16 x i16>*
  %25301 = load <16 x i16>, <16 x i16>* %25300, align 2, !tbaa !399
  %25302 = add nsw i64 %25120, %25287
  %25303 = getelementptr inbounds i16, i16* %blur_x879, i64 %25302
  %25304 = bitcast i16* %25303 to <16 x i16>*
  %25305 = load <16 x i16>, <16 x i16>* %25304, align 2, !tbaa !399
  %25306 = getelementptr inbounds i16, i16* %25303, i64 16
  %25307 = bitcast i16* %25306 to <16 x i16>*
  %25308 = load <16 x i16>, <16 x i16>* %25307, align 2, !tbaa !399
  %25309 = add nsw i64 %25123, %25287
  %25310 = getelementptr inbounds i16, i16* %blur_x879, i64 %25309
  %25311 = bitcast i16* %25310 to <16 x i16>*
  %25312 = load <16 x i16>, <16 x i16>* %25311, align 2, !tbaa !399
  %25313 = getelementptr inbounds i16, i16* %25310, i64 16
  %25314 = bitcast i16* %25313 to <16 x i16>*
  %25315 = load <16 x i16>, <16 x i16>* %25314, align 2, !tbaa !399
  %25316 = add nsw i64 %25126, %25287
  %25317 = getelementptr inbounds i16, i16* %blur_x879, i64 %25316
  %25318 = bitcast i16* %25317 to <16 x i16>*
  %25319 = load <16 x i16>, <16 x i16>* %25318, align 2, !tbaa !399
  %25320 = getelementptr inbounds i16, i16* %25317, i64 16
  %25321 = bitcast i16* %25320 to <16 x i16>*
  %25322 = load <16 x i16>, <16 x i16>* %25321, align 2, !tbaa !399
  %25323 = add <16 x i16> %25298, %25291
  %25324 = add <16 x i16> %25323, %25305
  %25325 = add <16 x i16> %25324, %25312
  %25326 = add <16 x i16> %25325, %25319
  %25327 = add <16 x i16> %25301, %25294
  %25328 = add <16 x i16> %25327, %25308
  %25329 = add <16 x i16> %25328, %25315
  %25330 = add <16 x i16> %25329, %25322
  %25331 = shufflevector <16 x i16> %25326, <16 x i16> %25330, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25332 = udiv <32 x i16> %25331, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25333 = shufflevector <32 x i16> %25332, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25334 = add nsw i64 %25130, %25287
  %25335 = getelementptr inbounds i16, i16* %263, i64 %25334
  %25336 = bitcast i16* %25335 to <16 x i16>*
  store <16 x i16> %25333, <16 x i16>* %25336, align 2, !tbaa !401
  %25337 = shufflevector <32 x i16> %25332, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25338 = getelementptr inbounds i16, i16* %25335, i64 16
  %25339 = bitcast i16* %25338 to <16 x i16>*
  store <16 x i16> %25337, <16 x i16>* %25339, align 2, !tbaa !401
  %25340 = add nuw nsw i32 %blur_y.s0.x.x.rebased2021, 1
  %.not2570 = icmp eq i32 %25340, %t1683898
  br i1 %.not2570, label %"end for blur_y.s0.x.x.rebased2020", label %"for blur_y.s0.x.x.rebased2019"

after_bb2031:                                     ; preds = %"end for blur_y.s0.x.x.rebased2020", %"produce blur_x2034"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2046.preheader", label %"end for blur_y.s0.x.x.rebased2047", !prof !386

"for blur_y.s0.x.x.rebased2046.preheader":        ; preds = %after_bb2031
  %25341 = sext i32 %t17061010 to i64
  %25342 = zext i32 %.pre-phi3539 to i64
  %25343 = mul nsw i64 %25342, %337
  %25344 = sub nsw i64 %25343, %298
  %25345 = zext i32 %.pre-phi3535 to i64
  %25346 = mul nsw i64 %25345, %337
  %25347 = sub nsw i64 %25346, %298
  %25348 = zext i32 %.pre-phi3543 to i64
  %25349 = mul nsw i64 %25348, %337
  %25350 = sub nsw i64 %25349, %298
  %25351 = zext i32 %.pre-phi3551 to i64
  %25352 = mul nsw i64 %25351, %337
  %25353 = sub nsw i64 %25352, %298
  %25354 = zext i32 %.pre-phi3547 to i64
  %25355 = mul nsw i64 %25354, %337
  %25356 = sub nsw i64 %25355, %298
  %25357 = sext i32 %a379 to i64
  %25358 = add nsw i64 %25357, 24
  %25359 = mul nsw i64 %25358, %334
  %25360 = add nsw i64 %25359, %338
  br label %"for blur_y.s0.x.x.rebased2046"

"produce blur_x2034":                             ; preds = %"end for blur_y.s0.x.x.rebased2020"
  %25361 = getelementptr inbounds i16, i16* %read_input822, i64 %479
  %25362 = getelementptr inbounds i16, i16* %25361, i64 -31
  %25363 = bitcast i16* %25362 to <16 x i16>*
  %25364 = load <16 x i16>, <16 x i16>* %25363, align 2, !tbaa !396
  %25365 = getelementptr inbounds i16, i16* %25361, i64 -15
  %25366 = bitcast i16* %25365 to <16 x i16>*
  %25367 = load <16 x i16>, <16 x i16>* %25366, align 2, !tbaa !396
  %25368 = getelementptr inbounds i16, i16* %25361, i64 -32
  %25369 = bitcast i16* %25368 to <16 x i16>*
  %25370 = load <16 x i16>, <16 x i16>* %25369, align 2, !tbaa !396
  %25371 = getelementptr inbounds i16, i16* %25361, i64 -16
  %25372 = bitcast i16* %25371 to <16 x i16>*
  %25373 = load <16 x i16>, <16 x i16>* %25372, align 2, !tbaa !396
  %25374 = getelementptr inbounds i16, i16* %25361, i64 -30
  %25375 = bitcast i16* %25374 to <16 x i16>*
  %25376 = load <16 x i16>, <16 x i16>* %25375, align 2, !tbaa !396
  %25377 = getelementptr inbounds i16, i16* %25361, i64 -14
  %25378 = bitcast i16* %25377 to <16 x i16>*
  %25379 = load <16 x i16>, <16 x i16>* %25378, align 2, !tbaa !396
  %25380 = getelementptr inbounds i16, i16* %25361, i64 -28
  %25381 = bitcast i16* %25380 to <16 x i16>*
  %25382 = load <16 x i16>, <16 x i16>* %25381, align 2, !tbaa !396
  %25383 = getelementptr inbounds i16, i16* %25361, i64 -12
  %25384 = bitcast i16* %25383 to <16 x i16>*
  %25385 = load <16 x i16>, <16 x i16>* %25384, align 2, !tbaa !396
  %25386 = getelementptr inbounds i16, i16* %25361, i64 -29
  %25387 = bitcast i16* %25386 to <16 x i16>*
  %25388 = load <16 x i16>, <16 x i16>* %25387, align 2, !tbaa !396
  %25389 = getelementptr inbounds i16, i16* %25361, i64 -13
  %25390 = bitcast i16* %25389 to <16 x i16>*
  %25391 = load <16 x i16>, <16 x i16>* %25390, align 2, !tbaa !396
  %25392 = add <16 x i16> %25370, %25364
  %25393 = add <16 x i16> %25392, %25376
  %25394 = add <16 x i16> %25393, %25382
  %25395 = add <16 x i16> %25394, %25388
  %25396 = add <16 x i16> %25373, %25367
  %25397 = add <16 x i16> %25396, %25379
  %25398 = add <16 x i16> %25397, %25385
  %25399 = add <16 x i16> %25398, %25391
  %25400 = shufflevector <16 x i16> %25395, <16 x i16> %25399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25401 = udiv <32 x i16> %25400, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25402 = shufflevector <32 x i16> %25401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25403 = zext i32 %.pre-phi3551 to i64
  %25404 = mul nsw i64 %299, %25403
  %25405 = add nsw i64 %301, %25404
  %25406 = getelementptr inbounds i16, i16* %blur_x879, i64 %25405
  %25407 = getelementptr inbounds i16, i16* %25406, i64 -32
  %25408 = bitcast i16* %25407 to <16 x i16>*
  store <16 x i16> %25402, <16 x i16>* %25408, align 2, !tbaa !399
  %25409 = shufflevector <32 x i16> %25401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25410 = getelementptr inbounds i16, i16* %25406, i64 -16
  %25411 = bitcast i16* %25410 to <16 x i16>*
  store <16 x i16> %25409, <16 x i16>* %25411, align 2, !tbaa !399
  %25412 = zext i32 %.pre-phi3539 to i64
  %25413 = mul nsw i64 %25412, %333
  %25414 = add nsw i64 %25413, %296
  %25415 = getelementptr inbounds i16, i16* %blur_x879, i64 %25414
  %25416 = getelementptr inbounds i16, i16* %25415, i64 -32
  %25417 = bitcast i16* %25416 to <16 x i16>*
  %25418 = load <16 x i16>, <16 x i16>* %25417, align 2, !tbaa !399
  %25419 = getelementptr inbounds i16, i16* %25415, i64 -16
  %25420 = bitcast i16* %25419 to <16 x i16>*
  %25421 = load <16 x i16>, <16 x i16>* %25420, align 2, !tbaa !399
  %25422 = zext i32 %.pre-phi3535 to i64
  %25423 = mul nsw i64 %25422, %333
  %25424 = add nsw i64 %25423, %296
  %25425 = getelementptr inbounds i16, i16* %blur_x879, i64 %25424
  %25426 = getelementptr inbounds i16, i16* %25425, i64 -32
  %25427 = bitcast i16* %25426 to <16 x i16>*
  %25428 = load <16 x i16>, <16 x i16>* %25427, align 2, !tbaa !399
  %25429 = getelementptr inbounds i16, i16* %25425, i64 -16
  %25430 = bitcast i16* %25429 to <16 x i16>*
  %25431 = load <16 x i16>, <16 x i16>* %25430, align 2, !tbaa !399
  %25432 = zext i32 %.pre-phi3543 to i64
  %25433 = mul nsw i64 %25432, %333
  %25434 = add nsw i64 %25433, %296
  %25435 = getelementptr inbounds i16, i16* %blur_x879, i64 %25434
  %25436 = getelementptr inbounds i16, i16* %25435, i64 -32
  %25437 = bitcast i16* %25436 to <16 x i16>*
  %25438 = load <16 x i16>, <16 x i16>* %25437, align 2, !tbaa !399
  %25439 = getelementptr inbounds i16, i16* %25435, i64 -16
  %25440 = bitcast i16* %25439 to <16 x i16>*
  %25441 = load <16 x i16>, <16 x i16>* %25440, align 2, !tbaa !399
  %25442 = mul nsw i64 %25403, %333
  %25443 = add nsw i64 %25442, %296
  %25444 = getelementptr inbounds i16, i16* %blur_x879, i64 %25443
  %25445 = getelementptr inbounds i16, i16* %25444, i64 -32
  %25446 = bitcast i16* %25445 to <16 x i16>*
  %25447 = load <16 x i16>, <16 x i16>* %25446, align 2, !tbaa !399
  %25448 = getelementptr inbounds i16, i16* %25444, i64 -16
  %25449 = bitcast i16* %25448 to <16 x i16>*
  %25450 = load <16 x i16>, <16 x i16>* %25449, align 2, !tbaa !399
  %25451 = zext i32 %.pre-phi3547 to i64
  %25452 = mul nsw i64 %25451, %333
  %25453 = add nsw i64 %25452, %296
  %25454 = getelementptr inbounds i16, i16* %blur_x879, i64 %25453
  %25455 = getelementptr inbounds i16, i16* %25454, i64 -32
  %25456 = bitcast i16* %25455 to <16 x i16>*
  %25457 = load <16 x i16>, <16 x i16>* %25456, align 2, !tbaa !399
  %25458 = getelementptr inbounds i16, i16* %25454, i64 -16
  %25459 = bitcast i16* %25458 to <16 x i16>*
  %25460 = load <16 x i16>, <16 x i16>* %25459, align 2, !tbaa !399
  %25461 = add <16 x i16> %25428, %25418
  %25462 = add <16 x i16> %25461, %25438
  %25463 = add <16 x i16> %25462, %25447
  %25464 = add <16 x i16> %25463, %25457
  %25465 = add <16 x i16> %25431, %25421
  %25466 = add <16 x i16> %25465, %25441
  %25467 = add <16 x i16> %25466, %25450
  %25468 = add <16 x i16> %25467, %25460
  %25469 = shufflevector <16 x i16> %25464, <16 x i16> %25468, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25470 = udiv <32 x i16> %25469, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25471 = shufflevector <32 x i16> %25470, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25472 = sext i32 %a379 to i64
  %25473 = add nsw i64 %25472, 24
  %25474 = mul nsw i64 %25473, %334
  %25475 = add nsw i64 %336, %25474
  %25476 = getelementptr inbounds i16, i16* %263, i64 %25475
  %25477 = getelementptr inbounds i16, i16* %25476, i64 -32
  %25478 = bitcast i16* %25477 to <16 x i16>*
  store <16 x i16> %25471, <16 x i16>* %25478, align 2, !tbaa !401
  %25479 = shufflevector <32 x i16> %25470, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25480 = getelementptr inbounds i16, i16* %25476, i64 -16
  %25481 = bitcast i16* %25480 to <16 x i16>*
  store <16 x i16> %25479, <16 x i16>* %25481, align 2, !tbaa !401
  br label %after_bb2031

"for blur_y.s0.x.x.rebased2046":                  ; preds = %"for blur_y.s0.x.x.rebased2046.preheader", %"consume blur_x2054"
  %indvars.iv3422 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2046.preheader" ], [ %indvars.iv.next3423, %"consume blur_x2054" ]
  %25482 = add nsw i64 %indvars.iv3422, %303
  %25483 = icmp slt i64 %25482, 1
  %25484 = trunc i64 %25482 to i32
  %25485 = shl nsw i32 %25484, 5
  %25486 = icmp sgt i32 %198, %25485
  %25487 = or i1 %25483, %25486
  br i1 %25487, label %"produce blur_x2052", label %"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge"

"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2046"
  %.pre3612 = shl nsw i64 %25482, 5
  br label %"consume blur_x2054"

"end for blur_y.s0.x.x.rebased2047":              ; preds = %"consume blur_x2054", %after_bb2031
  br i1 %304, label %"for blur_y.s0.x.x.rebased2062.preheader", label %"end for blur_y.s0.x.x.rebased2063", !prof !386

"for blur_y.s0.x.x.rebased2062.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2047"
  %25488 = sext i32 %t17061010 to i64
  %25489 = zext i32 %.pre-phi3539 to i64
  %25490 = mul nsw i64 %25489, %337
  %25491 = sub nsw i64 %25490, %298
  %25492 = zext i32 %.pre-phi3535 to i64
  %25493 = mul nsw i64 %25492, %337
  %25494 = sub nsw i64 %25493, %298
  %25495 = zext i32 %.pre-phi3543 to i64
  %25496 = mul nsw i64 %25495, %337
  %25497 = sub nsw i64 %25496, %298
  %25498 = zext i32 %.pre-phi3551 to i64
  %25499 = mul nsw i64 %25498, %337
  %25500 = sub nsw i64 %25499, %298
  %25501 = zext i32 %.pre-phi3547 to i64
  %25502 = mul nsw i64 %25501, %337
  %25503 = sub nsw i64 %25502, %298
  %25504 = sext i32 %a379 to i64
  %25505 = add nsw i64 %25504, 24
  %25506 = mul nsw i64 %25505, %334
  %25507 = add nsw i64 %25506, %338
  br label %"for blur_y.s0.x.x.rebased2062"

"produce blur_x2052":                             ; preds = %"for blur_y.s0.x.x.rebased2046"
  %t10962053 = add nsw i32 %481, %25485
  %25508 = sext i32 %t10962053 to i64
  %25509 = getelementptr inbounds i16, i16* %read_input822, i64 %25508
  %25510 = getelementptr inbounds i16, i16* %25509, i64 1
  %25511 = bitcast i16* %25510 to <16 x i16>*
  %25512 = load <16 x i16>, <16 x i16>* %25511, align 2, !tbaa !396
  %25513 = getelementptr inbounds i16, i16* %25509, i64 17
  %25514 = bitcast i16* %25513 to <16 x i16>*
  %25515 = load <16 x i16>, <16 x i16>* %25514, align 2, !tbaa !396
  %25516 = bitcast i16* %25509 to <16 x i16>*
  %25517 = load <16 x i16>, <16 x i16>* %25516, align 2, !tbaa !396
  %25518 = getelementptr inbounds i16, i16* %25509, i64 16
  %25519 = bitcast i16* %25518 to <16 x i16>*
  %25520 = load <16 x i16>, <16 x i16>* %25519, align 2, !tbaa !396
  %25521 = getelementptr inbounds i16, i16* %25509, i64 2
  %25522 = bitcast i16* %25521 to <16 x i16>*
  %25523 = load <16 x i16>, <16 x i16>* %25522, align 2, !tbaa !396
  %25524 = getelementptr inbounds i16, i16* %25509, i64 18
  %25525 = bitcast i16* %25524 to <16 x i16>*
  %25526 = load <16 x i16>, <16 x i16>* %25525, align 2, !tbaa !396
  %25527 = getelementptr inbounds i16, i16* %25509, i64 4
  %25528 = bitcast i16* %25527 to <16 x i16>*
  %25529 = load <16 x i16>, <16 x i16>* %25528, align 2, !tbaa !396
  %25530 = getelementptr inbounds i16, i16* %25509, i64 20
  %25531 = bitcast i16* %25530 to <16 x i16>*
  %25532 = load <16 x i16>, <16 x i16>* %25531, align 2, !tbaa !396
  %25533 = getelementptr inbounds i16, i16* %25509, i64 3
  %25534 = bitcast i16* %25533 to <16 x i16>*
  %25535 = load <16 x i16>, <16 x i16>* %25534, align 2, !tbaa !396
  %25536 = getelementptr inbounds i16, i16* %25509, i64 19
  %25537 = bitcast i16* %25536 to <16 x i16>*
  %25538 = load <16 x i16>, <16 x i16>* %25537, align 2, !tbaa !396
  %25539 = add <16 x i16> %25517, %25512
  %25540 = add <16 x i16> %25539, %25523
  %25541 = add <16 x i16> %25540, %25529
  %25542 = add <16 x i16> %25541, %25535
  %25543 = add <16 x i16> %25520, %25515
  %25544 = add <16 x i16> %25543, %25526
  %25545 = add <16 x i16> %25544, %25532
  %25546 = add <16 x i16> %25545, %25538
  %25547 = shufflevector <16 x i16> %25542, <16 x i16> %25546, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25548 = udiv <32 x i16> %25547, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25549 = shufflevector <32 x i16> %25548, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25550 = shl nsw i64 %25482, 5
  %25551 = add nsw i64 %25550, %25341
  %25552 = getelementptr inbounds i16, i16* %blur_x879, i64 %25551
  %25553 = bitcast i16* %25552 to <16 x i16>*
  store <16 x i16> %25549, <16 x i16>* %25553, align 2, !tbaa !399
  %25554 = shufflevector <32 x i16> %25548, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25555 = getelementptr inbounds i16, i16* %25552, i64 16
  %25556 = bitcast i16* %25555 to <16 x i16>*
  store <16 x i16> %25554, <16 x i16>* %25556, align 2, !tbaa !399
  br label %"consume blur_x2054"

"consume blur_x2054":                             ; preds = %"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge", %"produce blur_x2052"
  %.pre-phi3613 = phi i64 [ %.pre3612, %"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge" ], [ %25550, %"produce blur_x2052" ]
  %25557 = add nsw i64 %25344, %.pre-phi3613
  %25558 = getelementptr inbounds i16, i16* %blur_x879, i64 %25557
  %25559 = bitcast i16* %25558 to <16 x i16>*
  %25560 = load <16 x i16>, <16 x i16>* %25559, align 2, !tbaa !399
  %25561 = getelementptr inbounds i16, i16* %25558, i64 16
  %25562 = bitcast i16* %25561 to <16 x i16>*
  %25563 = load <16 x i16>, <16 x i16>* %25562, align 2, !tbaa !399
  %25564 = add nsw i64 %25347, %.pre-phi3613
  %25565 = getelementptr inbounds i16, i16* %blur_x879, i64 %25564
  %25566 = bitcast i16* %25565 to <16 x i16>*
  %25567 = load <16 x i16>, <16 x i16>* %25566, align 2, !tbaa !399
  %25568 = getelementptr inbounds i16, i16* %25565, i64 16
  %25569 = bitcast i16* %25568 to <16 x i16>*
  %25570 = load <16 x i16>, <16 x i16>* %25569, align 2, !tbaa !399
  %25571 = add nsw i64 %25350, %.pre-phi3613
  %25572 = getelementptr inbounds i16, i16* %blur_x879, i64 %25571
  %25573 = bitcast i16* %25572 to <16 x i16>*
  %25574 = load <16 x i16>, <16 x i16>* %25573, align 2, !tbaa !399
  %25575 = getelementptr inbounds i16, i16* %25572, i64 16
  %25576 = bitcast i16* %25575 to <16 x i16>*
  %25577 = load <16 x i16>, <16 x i16>* %25576, align 2, !tbaa !399
  %25578 = add nsw i64 %25353, %.pre-phi3613
  %25579 = getelementptr inbounds i16, i16* %blur_x879, i64 %25578
  %25580 = bitcast i16* %25579 to <16 x i16>*
  %25581 = load <16 x i16>, <16 x i16>* %25580, align 2, !tbaa !399
  %25582 = getelementptr inbounds i16, i16* %25579, i64 16
  %25583 = bitcast i16* %25582 to <16 x i16>*
  %25584 = load <16 x i16>, <16 x i16>* %25583, align 2, !tbaa !399
  %25585 = add nsw i64 %25356, %.pre-phi3613
  %25586 = getelementptr inbounds i16, i16* %blur_x879, i64 %25585
  %25587 = bitcast i16* %25586 to <16 x i16>*
  %25588 = load <16 x i16>, <16 x i16>* %25587, align 2, !tbaa !399
  %25589 = getelementptr inbounds i16, i16* %25586, i64 16
  %25590 = bitcast i16* %25589 to <16 x i16>*
  %25591 = load <16 x i16>, <16 x i16>* %25590, align 2, !tbaa !399
  %25592 = add <16 x i16> %25567, %25560
  %25593 = add <16 x i16> %25592, %25574
  %25594 = add <16 x i16> %25593, %25581
  %25595 = add <16 x i16> %25594, %25588
  %25596 = add <16 x i16> %25570, %25563
  %25597 = add <16 x i16> %25596, %25577
  %25598 = add <16 x i16> %25597, %25584
  %25599 = add <16 x i16> %25598, %25591
  %25600 = shufflevector <16 x i16> %25595, <16 x i16> %25599, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25601 = udiv <32 x i16> %25600, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25602 = shufflevector <32 x i16> %25601, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25603 = add nsw i64 %25360, %.pre-phi3613
  %25604 = getelementptr inbounds i16, i16* %263, i64 %25603
  %25605 = bitcast i16* %25604 to <16 x i16>*
  store <16 x i16> %25602, <16 x i16>* %25605, align 2, !tbaa !401
  %25606 = shufflevector <32 x i16> %25601, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25607 = getelementptr inbounds i16, i16* %25604, i64 16
  %25608 = bitcast i16* %25607 to <16 x i16>*
  store <16 x i16> %25606, <16 x i16>* %25608, align 2, !tbaa !401
  %indvars.iv.next3423 = add nuw nsw i64 %indvars.iv3422, 1
  %.not2567 = icmp eq i64 %indvars.iv.next3423, %530
  br i1 %.not2567, label %"end for blur_y.s0.x.x.rebased2047", label %"for blur_y.s0.x.x.rebased2046"

"for blur_y.s0.x.x.rebased2062":                  ; preds = %"for blur_y.s0.x.x.rebased2062.preheader", %"consume blur_x2073"
  %blur_y.s0.x.x.rebased2064 = phi i32 [ %25717, %"consume blur_x2073" ], [ 0, %"for blur_y.s0.x.x.rebased2062.preheader" ]
  %25609 = add nsw i32 %blur_y.s0.x.x.rebased2064, %t1626814
  %a5077 = shl nsw i32 %25609, 5
  %25610 = icmp sgt i32 %t1647, %a5077
  %blur_y.s0.x.v0.base.s2065 = select i1 %25610, i32 %a5077, i32 %t1647
  %25611 = icmp slt i32 %25609, 1
  %25612 = icmp sgt i32 %198, %a5077
  %25613 = or i1 %25611, %25612
  br i1 %25613, label %"produce blur_x2070", label %"consume blur_x2073"

"end for blur_y.s0.x.x.rebased2063":              ; preds = %"consume blur_x2073", %"end for blur_y.s0.x.x.rebased2047"
  br i1 %229, label %"produce blur_x2077", label %after_bb2074

"produce blur_x2070":                             ; preds = %"for blur_y.s0.x.x.rebased2062"
  %25614 = icmp slt i32 %blur_y.s0.x.v0.base.s2065, %198
  %blur_x.s0.x.v1.base.s2071 = select i1 %25614, i32 %blur_y.s0.x.v0.base.s2065, i32 %198
  %t11012072 = add nsw i32 %481, %blur_x.s0.x.v1.base.s2071
  %25615 = sext i32 %t11012072 to i64
  %25616 = getelementptr inbounds i16, i16* %read_input822, i64 %25615
  %25617 = getelementptr inbounds i16, i16* %25616, i64 1
  %25618 = bitcast i16* %25617 to <16 x i16>*
  %25619 = load <16 x i16>, <16 x i16>* %25618, align 2, !tbaa !396
  %25620 = getelementptr inbounds i16, i16* %25616, i64 17
  %25621 = bitcast i16* %25620 to <16 x i16>*
  %25622 = load <16 x i16>, <16 x i16>* %25621, align 2, !tbaa !396
  %25623 = bitcast i16* %25616 to <16 x i16>*
  %25624 = load <16 x i16>, <16 x i16>* %25623, align 2, !tbaa !396
  %25625 = getelementptr inbounds i16, i16* %25616, i64 16
  %25626 = bitcast i16* %25625 to <16 x i16>*
  %25627 = load <16 x i16>, <16 x i16>* %25626, align 2, !tbaa !396
  %25628 = getelementptr inbounds i16, i16* %25616, i64 2
  %25629 = bitcast i16* %25628 to <16 x i16>*
  %25630 = load <16 x i16>, <16 x i16>* %25629, align 2, !tbaa !396
  %25631 = getelementptr inbounds i16, i16* %25616, i64 18
  %25632 = bitcast i16* %25631 to <16 x i16>*
  %25633 = load <16 x i16>, <16 x i16>* %25632, align 2, !tbaa !396
  %25634 = getelementptr inbounds i16, i16* %25616, i64 4
  %25635 = bitcast i16* %25634 to <16 x i16>*
  %25636 = load <16 x i16>, <16 x i16>* %25635, align 2, !tbaa !396
  %25637 = getelementptr inbounds i16, i16* %25616, i64 20
  %25638 = bitcast i16* %25637 to <16 x i16>*
  %25639 = load <16 x i16>, <16 x i16>* %25638, align 2, !tbaa !396
  %25640 = getelementptr inbounds i16, i16* %25616, i64 3
  %25641 = bitcast i16* %25640 to <16 x i16>*
  %25642 = load <16 x i16>, <16 x i16>* %25641, align 2, !tbaa !396
  %25643 = getelementptr inbounds i16, i16* %25616, i64 19
  %25644 = bitcast i16* %25643 to <16 x i16>*
  %25645 = load <16 x i16>, <16 x i16>* %25644, align 2, !tbaa !396
  %25646 = add <16 x i16> %25624, %25619
  %25647 = add <16 x i16> %25646, %25630
  %25648 = add <16 x i16> %25647, %25636
  %25649 = add <16 x i16> %25648, %25642
  %25650 = add <16 x i16> %25627, %25622
  %25651 = add <16 x i16> %25650, %25633
  %25652 = add <16 x i16> %25651, %25639
  %25653 = add <16 x i16> %25652, %25645
  %25654 = shufflevector <16 x i16> %25649, <16 x i16> %25653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25655 = udiv <32 x i16> %25654, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25656 = shufflevector <32 x i16> %25655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25657 = sext i32 %blur_x.s0.x.v1.base.s2071 to i64
  %25658 = add nsw i64 %25657, %25488
  %25659 = getelementptr inbounds i16, i16* %blur_x879, i64 %25658
  %25660 = bitcast i16* %25659 to <16 x i16>*
  store <16 x i16> %25656, <16 x i16>* %25660, align 2, !tbaa !399
  %25661 = shufflevector <32 x i16> %25655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25662 = getelementptr inbounds i16, i16* %25659, i64 16
  %25663 = bitcast i16* %25662 to <16 x i16>*
  store <16 x i16> %25661, <16 x i16>* %25663, align 2, !tbaa !399
  br label %"consume blur_x2073"

"consume blur_x2073":                             ; preds = %"for blur_y.s0.x.x.rebased2062", %"produce blur_x2070"
  %25664 = sext i32 %blur_y.s0.x.v0.base.s2065 to i64
  %25665 = add nsw i64 %25491, %25664
  %25666 = getelementptr inbounds i16, i16* %blur_x879, i64 %25665
  %25667 = bitcast i16* %25666 to <16 x i16>*
  %25668 = load <16 x i16>, <16 x i16>* %25667, align 2, !tbaa !399
  %25669 = getelementptr inbounds i16, i16* %25666, i64 16
  %25670 = bitcast i16* %25669 to <16 x i16>*
  %25671 = load <16 x i16>, <16 x i16>* %25670, align 2, !tbaa !399
  %25672 = add nsw i64 %25494, %25664
  %25673 = getelementptr inbounds i16, i16* %blur_x879, i64 %25672
  %25674 = bitcast i16* %25673 to <16 x i16>*
  %25675 = load <16 x i16>, <16 x i16>* %25674, align 2, !tbaa !399
  %25676 = getelementptr inbounds i16, i16* %25673, i64 16
  %25677 = bitcast i16* %25676 to <16 x i16>*
  %25678 = load <16 x i16>, <16 x i16>* %25677, align 2, !tbaa !399
  %25679 = add nsw i64 %25497, %25664
  %25680 = getelementptr inbounds i16, i16* %blur_x879, i64 %25679
  %25681 = bitcast i16* %25680 to <16 x i16>*
  %25682 = load <16 x i16>, <16 x i16>* %25681, align 2, !tbaa !399
  %25683 = getelementptr inbounds i16, i16* %25680, i64 16
  %25684 = bitcast i16* %25683 to <16 x i16>*
  %25685 = load <16 x i16>, <16 x i16>* %25684, align 2, !tbaa !399
  %25686 = add nsw i64 %25500, %25664
  %25687 = getelementptr inbounds i16, i16* %blur_x879, i64 %25686
  %25688 = bitcast i16* %25687 to <16 x i16>*
  %25689 = load <16 x i16>, <16 x i16>* %25688, align 2, !tbaa !399
  %25690 = getelementptr inbounds i16, i16* %25687, i64 16
  %25691 = bitcast i16* %25690 to <16 x i16>*
  %25692 = load <16 x i16>, <16 x i16>* %25691, align 2, !tbaa !399
  %25693 = add nsw i64 %25503, %25664
  %25694 = getelementptr inbounds i16, i16* %blur_x879, i64 %25693
  %25695 = bitcast i16* %25694 to <16 x i16>*
  %25696 = load <16 x i16>, <16 x i16>* %25695, align 2, !tbaa !399
  %25697 = getelementptr inbounds i16, i16* %25694, i64 16
  %25698 = bitcast i16* %25697 to <16 x i16>*
  %25699 = load <16 x i16>, <16 x i16>* %25698, align 2, !tbaa !399
  %25700 = add <16 x i16> %25675, %25668
  %25701 = add <16 x i16> %25700, %25682
  %25702 = add <16 x i16> %25701, %25689
  %25703 = add <16 x i16> %25702, %25696
  %25704 = add <16 x i16> %25678, %25671
  %25705 = add <16 x i16> %25704, %25685
  %25706 = add <16 x i16> %25705, %25692
  %25707 = add <16 x i16> %25706, %25699
  %25708 = shufflevector <16 x i16> %25703, <16 x i16> %25707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25709 = udiv <32 x i16> %25708, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25710 = shufflevector <32 x i16> %25709, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25711 = add nsw i64 %25507, %25664
  %25712 = getelementptr inbounds i16, i16* %263, i64 %25711
  %25713 = bitcast i16* %25712 to <16 x i16>*
  store <16 x i16> %25710, <16 x i16>* %25713, align 2, !tbaa !401
  %25714 = shufflevector <32 x i16> %25709, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25715 = getelementptr inbounds i16, i16* %25712, i64 16
  %25716 = bitcast i16* %25715 to <16 x i16>*
  store <16 x i16> %25714, <16 x i16>* %25716, align 2, !tbaa !401
  %25717 = add nuw nsw i32 %blur_y.s0.x.x.rebased2064, 1
  %.not2566 = icmp eq i32 %25717, %t1683898
  br i1 %.not2566, label %"end for blur_y.s0.x.x.rebased2063", label %"for blur_y.s0.x.x.rebased2062"

after_bb2074:                                     ; preds = %"end for blur_y.s0.x.x.rebased2063", %"produce blur_x2077"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2089.preheader", label %"end for blur_y.s0.x.x.rebased2090", !prof !386

"for blur_y.s0.x.x.rebased2089.preheader":        ; preds = %after_bb2074
  %25718 = sext i32 %t17221053 to i64
  %25719 = zext i32 %.pre-phi3543 to i64
  %25720 = mul nsw i64 %25719, %337
  %25721 = sub nsw i64 %25720, %298
  %25722 = zext i32 %.pre-phi3539 to i64
  %25723 = mul nsw i64 %25722, %337
  %25724 = sub nsw i64 %25723, %298
  %25725 = zext i32 %.pre-phi3547 to i64
  %25726 = mul nsw i64 %25725, %337
  %25727 = sub nsw i64 %25726, %298
  %25728 = zext i32 %.pre-phi3557 to i64
  %25729 = mul nsw i64 %25728, %337
  %25730 = sub nsw i64 %25729, %298
  %25731 = zext i32 %.pre-phi3551 to i64
  %25732 = mul nsw i64 %25731, %337
  %25733 = sub nsw i64 %25732, %298
  %25734 = sext i32 %a379 to i64
  %25735 = add nsw i64 %25734, 25
  %25736 = mul nsw i64 %25735, %334
  %25737 = add nsw i64 %25736, %338
  br label %"for blur_y.s0.x.x.rebased2089"

"produce blur_x2077":                             ; preds = %"end for blur_y.s0.x.x.rebased2063"
  %25738 = getelementptr inbounds i16, i16* %read_input822, i64 %485
  %25739 = getelementptr inbounds i16, i16* %25738, i64 -31
  %25740 = bitcast i16* %25739 to <16 x i16>*
  %25741 = load <16 x i16>, <16 x i16>* %25740, align 2, !tbaa !396
  %25742 = getelementptr inbounds i16, i16* %25738, i64 -15
  %25743 = bitcast i16* %25742 to <16 x i16>*
  %25744 = load <16 x i16>, <16 x i16>* %25743, align 2, !tbaa !396
  %25745 = getelementptr inbounds i16, i16* %25738, i64 -32
  %25746 = bitcast i16* %25745 to <16 x i16>*
  %25747 = load <16 x i16>, <16 x i16>* %25746, align 2, !tbaa !396
  %25748 = getelementptr inbounds i16, i16* %25738, i64 -16
  %25749 = bitcast i16* %25748 to <16 x i16>*
  %25750 = load <16 x i16>, <16 x i16>* %25749, align 2, !tbaa !396
  %25751 = getelementptr inbounds i16, i16* %25738, i64 -30
  %25752 = bitcast i16* %25751 to <16 x i16>*
  %25753 = load <16 x i16>, <16 x i16>* %25752, align 2, !tbaa !396
  %25754 = getelementptr inbounds i16, i16* %25738, i64 -14
  %25755 = bitcast i16* %25754 to <16 x i16>*
  %25756 = load <16 x i16>, <16 x i16>* %25755, align 2, !tbaa !396
  %25757 = getelementptr inbounds i16, i16* %25738, i64 -28
  %25758 = bitcast i16* %25757 to <16 x i16>*
  %25759 = load <16 x i16>, <16 x i16>* %25758, align 2, !tbaa !396
  %25760 = getelementptr inbounds i16, i16* %25738, i64 -12
  %25761 = bitcast i16* %25760 to <16 x i16>*
  %25762 = load <16 x i16>, <16 x i16>* %25761, align 2, !tbaa !396
  %25763 = getelementptr inbounds i16, i16* %25738, i64 -29
  %25764 = bitcast i16* %25763 to <16 x i16>*
  %25765 = load <16 x i16>, <16 x i16>* %25764, align 2, !tbaa !396
  %25766 = getelementptr inbounds i16, i16* %25738, i64 -13
  %25767 = bitcast i16* %25766 to <16 x i16>*
  %25768 = load <16 x i16>, <16 x i16>* %25767, align 2, !tbaa !396
  %25769 = add <16 x i16> %25747, %25741
  %25770 = add <16 x i16> %25769, %25753
  %25771 = add <16 x i16> %25770, %25759
  %25772 = add <16 x i16> %25771, %25765
  %25773 = add <16 x i16> %25750, %25744
  %25774 = add <16 x i16> %25773, %25756
  %25775 = add <16 x i16> %25774, %25762
  %25776 = add <16 x i16> %25775, %25768
  %25777 = shufflevector <16 x i16> %25772, <16 x i16> %25776, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25778 = udiv <32 x i16> %25777, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25779 = shufflevector <32 x i16> %25778, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25780 = zext i32 %.pre-phi3557 to i64
  %25781 = mul nsw i64 %299, %25780
  %25782 = add nsw i64 %301, %25781
  %25783 = getelementptr inbounds i16, i16* %blur_x879, i64 %25782
  %25784 = getelementptr inbounds i16, i16* %25783, i64 -32
  %25785 = bitcast i16* %25784 to <16 x i16>*
  store <16 x i16> %25779, <16 x i16>* %25785, align 2, !tbaa !399
  %25786 = shufflevector <32 x i16> %25778, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25787 = getelementptr inbounds i16, i16* %25783, i64 -16
  %25788 = bitcast i16* %25787 to <16 x i16>*
  store <16 x i16> %25786, <16 x i16>* %25788, align 2, !tbaa !399
  %25789 = zext i32 %.pre-phi3543 to i64
  %25790 = mul nsw i64 %25789, %333
  %25791 = add nsw i64 %25790, %296
  %25792 = getelementptr inbounds i16, i16* %blur_x879, i64 %25791
  %25793 = getelementptr inbounds i16, i16* %25792, i64 -32
  %25794 = bitcast i16* %25793 to <16 x i16>*
  %25795 = load <16 x i16>, <16 x i16>* %25794, align 2, !tbaa !399
  %25796 = getelementptr inbounds i16, i16* %25792, i64 -16
  %25797 = bitcast i16* %25796 to <16 x i16>*
  %25798 = load <16 x i16>, <16 x i16>* %25797, align 2, !tbaa !399
  %25799 = zext i32 %.pre-phi3539 to i64
  %25800 = mul nsw i64 %25799, %333
  %25801 = add nsw i64 %25800, %296
  %25802 = getelementptr inbounds i16, i16* %blur_x879, i64 %25801
  %25803 = getelementptr inbounds i16, i16* %25802, i64 -32
  %25804 = bitcast i16* %25803 to <16 x i16>*
  %25805 = load <16 x i16>, <16 x i16>* %25804, align 2, !tbaa !399
  %25806 = getelementptr inbounds i16, i16* %25802, i64 -16
  %25807 = bitcast i16* %25806 to <16 x i16>*
  %25808 = load <16 x i16>, <16 x i16>* %25807, align 2, !tbaa !399
  %25809 = zext i32 %.pre-phi3547 to i64
  %25810 = mul nsw i64 %25809, %333
  %25811 = add nsw i64 %25810, %296
  %25812 = getelementptr inbounds i16, i16* %blur_x879, i64 %25811
  %25813 = getelementptr inbounds i16, i16* %25812, i64 -32
  %25814 = bitcast i16* %25813 to <16 x i16>*
  %25815 = load <16 x i16>, <16 x i16>* %25814, align 2, !tbaa !399
  %25816 = getelementptr inbounds i16, i16* %25812, i64 -16
  %25817 = bitcast i16* %25816 to <16 x i16>*
  %25818 = load <16 x i16>, <16 x i16>* %25817, align 2, !tbaa !399
  %25819 = mul nsw i64 %25780, %333
  %25820 = add nsw i64 %25819, %296
  %25821 = getelementptr inbounds i16, i16* %blur_x879, i64 %25820
  %25822 = getelementptr inbounds i16, i16* %25821, i64 -32
  %25823 = bitcast i16* %25822 to <16 x i16>*
  %25824 = load <16 x i16>, <16 x i16>* %25823, align 2, !tbaa !399
  %25825 = getelementptr inbounds i16, i16* %25821, i64 -16
  %25826 = bitcast i16* %25825 to <16 x i16>*
  %25827 = load <16 x i16>, <16 x i16>* %25826, align 2, !tbaa !399
  %25828 = zext i32 %.pre-phi3551 to i64
  %25829 = mul nsw i64 %25828, %333
  %25830 = add nsw i64 %25829, %296
  %25831 = getelementptr inbounds i16, i16* %blur_x879, i64 %25830
  %25832 = getelementptr inbounds i16, i16* %25831, i64 -32
  %25833 = bitcast i16* %25832 to <16 x i16>*
  %25834 = load <16 x i16>, <16 x i16>* %25833, align 2, !tbaa !399
  %25835 = getelementptr inbounds i16, i16* %25831, i64 -16
  %25836 = bitcast i16* %25835 to <16 x i16>*
  %25837 = load <16 x i16>, <16 x i16>* %25836, align 2, !tbaa !399
  %25838 = add <16 x i16> %25805, %25795
  %25839 = add <16 x i16> %25838, %25815
  %25840 = add <16 x i16> %25839, %25824
  %25841 = add <16 x i16> %25840, %25834
  %25842 = add <16 x i16> %25808, %25798
  %25843 = add <16 x i16> %25842, %25818
  %25844 = add <16 x i16> %25843, %25827
  %25845 = add <16 x i16> %25844, %25837
  %25846 = shufflevector <16 x i16> %25841, <16 x i16> %25845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25847 = udiv <32 x i16> %25846, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25848 = shufflevector <32 x i16> %25847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25849 = sext i32 %a379 to i64
  %25850 = add nsw i64 %25849, 25
  %25851 = mul nsw i64 %25850, %334
  %25852 = add nsw i64 %336, %25851
  %25853 = getelementptr inbounds i16, i16* %263, i64 %25852
  %25854 = getelementptr inbounds i16, i16* %25853, i64 -32
  %25855 = bitcast i16* %25854 to <16 x i16>*
  store <16 x i16> %25848, <16 x i16>* %25855, align 2, !tbaa !401
  %25856 = shufflevector <32 x i16> %25847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25857 = getelementptr inbounds i16, i16* %25853, i64 -16
  %25858 = bitcast i16* %25857 to <16 x i16>*
  store <16 x i16> %25856, <16 x i16>* %25858, align 2, !tbaa !401
  br label %after_bb2074

"for blur_y.s0.x.x.rebased2089":                  ; preds = %"for blur_y.s0.x.x.rebased2089.preheader", %"consume blur_x2097"
  %indvars.iv3424 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2089.preheader" ], [ %indvars.iv.next3425, %"consume blur_x2097" ]
  %25859 = add nsw i64 %indvars.iv3424, %303
  %25860 = icmp slt i64 %25859, 1
  %25861 = trunc i64 %25859 to i32
  %25862 = shl nsw i32 %25861, 5
  %25863 = icmp sgt i32 %198, %25862
  %25864 = or i1 %25860, %25863
  br i1 %25864, label %"produce blur_x2095", label %"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge"

"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2089"
  %.pre3614 = shl nsw i64 %25859, 5
  br label %"consume blur_x2097"

"end for blur_y.s0.x.x.rebased2090":              ; preds = %"consume blur_x2097", %after_bb2074
  br i1 %304, label %"for blur_y.s0.x.x.rebased2105.preheader", label %"end for blur_y.s0.x.x.rebased2106", !prof !386

"for blur_y.s0.x.x.rebased2105.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2090"
  %25865 = sext i32 %t17221053 to i64
  %25866 = zext i32 %.pre-phi3543 to i64
  %25867 = mul nsw i64 %25866, %337
  %25868 = sub nsw i64 %25867, %298
  %25869 = zext i32 %.pre-phi3539 to i64
  %25870 = mul nsw i64 %25869, %337
  %25871 = sub nsw i64 %25870, %298
  %25872 = zext i32 %.pre-phi3547 to i64
  %25873 = mul nsw i64 %25872, %337
  %25874 = sub nsw i64 %25873, %298
  %25875 = zext i32 %.pre-phi3557 to i64
  %25876 = mul nsw i64 %25875, %337
  %25877 = sub nsw i64 %25876, %298
  %25878 = zext i32 %.pre-phi3551 to i64
  %25879 = mul nsw i64 %25878, %337
  %25880 = sub nsw i64 %25879, %298
  %25881 = sext i32 %a379 to i64
  %25882 = add nsw i64 %25881, 25
  %25883 = mul nsw i64 %25882, %334
  %25884 = add nsw i64 %25883, %338
  br label %"for blur_y.s0.x.x.rebased2105"

"produce blur_x2095":                             ; preds = %"for blur_y.s0.x.x.rebased2089"
  %t11122096 = add nsw i32 %487, %25862
  %25885 = sext i32 %t11122096 to i64
  %25886 = getelementptr inbounds i16, i16* %read_input822, i64 %25885
  %25887 = getelementptr inbounds i16, i16* %25886, i64 1
  %25888 = bitcast i16* %25887 to <16 x i16>*
  %25889 = load <16 x i16>, <16 x i16>* %25888, align 2, !tbaa !396
  %25890 = getelementptr inbounds i16, i16* %25886, i64 17
  %25891 = bitcast i16* %25890 to <16 x i16>*
  %25892 = load <16 x i16>, <16 x i16>* %25891, align 2, !tbaa !396
  %25893 = bitcast i16* %25886 to <16 x i16>*
  %25894 = load <16 x i16>, <16 x i16>* %25893, align 2, !tbaa !396
  %25895 = getelementptr inbounds i16, i16* %25886, i64 16
  %25896 = bitcast i16* %25895 to <16 x i16>*
  %25897 = load <16 x i16>, <16 x i16>* %25896, align 2, !tbaa !396
  %25898 = getelementptr inbounds i16, i16* %25886, i64 2
  %25899 = bitcast i16* %25898 to <16 x i16>*
  %25900 = load <16 x i16>, <16 x i16>* %25899, align 2, !tbaa !396
  %25901 = getelementptr inbounds i16, i16* %25886, i64 18
  %25902 = bitcast i16* %25901 to <16 x i16>*
  %25903 = load <16 x i16>, <16 x i16>* %25902, align 2, !tbaa !396
  %25904 = getelementptr inbounds i16, i16* %25886, i64 4
  %25905 = bitcast i16* %25904 to <16 x i16>*
  %25906 = load <16 x i16>, <16 x i16>* %25905, align 2, !tbaa !396
  %25907 = getelementptr inbounds i16, i16* %25886, i64 20
  %25908 = bitcast i16* %25907 to <16 x i16>*
  %25909 = load <16 x i16>, <16 x i16>* %25908, align 2, !tbaa !396
  %25910 = getelementptr inbounds i16, i16* %25886, i64 3
  %25911 = bitcast i16* %25910 to <16 x i16>*
  %25912 = load <16 x i16>, <16 x i16>* %25911, align 2, !tbaa !396
  %25913 = getelementptr inbounds i16, i16* %25886, i64 19
  %25914 = bitcast i16* %25913 to <16 x i16>*
  %25915 = load <16 x i16>, <16 x i16>* %25914, align 2, !tbaa !396
  %25916 = add <16 x i16> %25894, %25889
  %25917 = add <16 x i16> %25916, %25900
  %25918 = add <16 x i16> %25917, %25906
  %25919 = add <16 x i16> %25918, %25912
  %25920 = add <16 x i16> %25897, %25892
  %25921 = add <16 x i16> %25920, %25903
  %25922 = add <16 x i16> %25921, %25909
  %25923 = add <16 x i16> %25922, %25915
  %25924 = shufflevector <16 x i16> %25919, <16 x i16> %25923, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25925 = udiv <32 x i16> %25924, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25926 = shufflevector <32 x i16> %25925, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25927 = shl nsw i64 %25859, 5
  %25928 = add nsw i64 %25927, %25718
  %25929 = getelementptr inbounds i16, i16* %blur_x879, i64 %25928
  %25930 = bitcast i16* %25929 to <16 x i16>*
  store <16 x i16> %25926, <16 x i16>* %25930, align 2, !tbaa !399
  %25931 = shufflevector <32 x i16> %25925, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25932 = getelementptr inbounds i16, i16* %25929, i64 16
  %25933 = bitcast i16* %25932 to <16 x i16>*
  store <16 x i16> %25931, <16 x i16>* %25933, align 2, !tbaa !399
  br label %"consume blur_x2097"

"consume blur_x2097":                             ; preds = %"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge", %"produce blur_x2095"
  %.pre-phi3615 = phi i64 [ %.pre3614, %"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge" ], [ %25927, %"produce blur_x2095" ]
  %25934 = add nsw i64 %25721, %.pre-phi3615
  %25935 = getelementptr inbounds i16, i16* %blur_x879, i64 %25934
  %25936 = bitcast i16* %25935 to <16 x i16>*
  %25937 = load <16 x i16>, <16 x i16>* %25936, align 2, !tbaa !399
  %25938 = getelementptr inbounds i16, i16* %25935, i64 16
  %25939 = bitcast i16* %25938 to <16 x i16>*
  %25940 = load <16 x i16>, <16 x i16>* %25939, align 2, !tbaa !399
  %25941 = add nsw i64 %25724, %.pre-phi3615
  %25942 = getelementptr inbounds i16, i16* %blur_x879, i64 %25941
  %25943 = bitcast i16* %25942 to <16 x i16>*
  %25944 = load <16 x i16>, <16 x i16>* %25943, align 2, !tbaa !399
  %25945 = getelementptr inbounds i16, i16* %25942, i64 16
  %25946 = bitcast i16* %25945 to <16 x i16>*
  %25947 = load <16 x i16>, <16 x i16>* %25946, align 2, !tbaa !399
  %25948 = add nsw i64 %25727, %.pre-phi3615
  %25949 = getelementptr inbounds i16, i16* %blur_x879, i64 %25948
  %25950 = bitcast i16* %25949 to <16 x i16>*
  %25951 = load <16 x i16>, <16 x i16>* %25950, align 2, !tbaa !399
  %25952 = getelementptr inbounds i16, i16* %25949, i64 16
  %25953 = bitcast i16* %25952 to <16 x i16>*
  %25954 = load <16 x i16>, <16 x i16>* %25953, align 2, !tbaa !399
  %25955 = add nsw i64 %25730, %.pre-phi3615
  %25956 = getelementptr inbounds i16, i16* %blur_x879, i64 %25955
  %25957 = bitcast i16* %25956 to <16 x i16>*
  %25958 = load <16 x i16>, <16 x i16>* %25957, align 2, !tbaa !399
  %25959 = getelementptr inbounds i16, i16* %25956, i64 16
  %25960 = bitcast i16* %25959 to <16 x i16>*
  %25961 = load <16 x i16>, <16 x i16>* %25960, align 2, !tbaa !399
  %25962 = add nsw i64 %25733, %.pre-phi3615
  %25963 = getelementptr inbounds i16, i16* %blur_x879, i64 %25962
  %25964 = bitcast i16* %25963 to <16 x i16>*
  %25965 = load <16 x i16>, <16 x i16>* %25964, align 2, !tbaa !399
  %25966 = getelementptr inbounds i16, i16* %25963, i64 16
  %25967 = bitcast i16* %25966 to <16 x i16>*
  %25968 = load <16 x i16>, <16 x i16>* %25967, align 2, !tbaa !399
  %25969 = add <16 x i16> %25944, %25937
  %25970 = add <16 x i16> %25969, %25951
  %25971 = add <16 x i16> %25970, %25958
  %25972 = add <16 x i16> %25971, %25965
  %25973 = add <16 x i16> %25947, %25940
  %25974 = add <16 x i16> %25973, %25954
  %25975 = add <16 x i16> %25974, %25961
  %25976 = add <16 x i16> %25975, %25968
  %25977 = shufflevector <16 x i16> %25972, <16 x i16> %25976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25978 = udiv <32 x i16> %25977, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %25979 = shufflevector <32 x i16> %25978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25980 = add nsw i64 %25737, %.pre-phi3615
  %25981 = getelementptr inbounds i16, i16* %263, i64 %25980
  %25982 = bitcast i16* %25981 to <16 x i16>*
  store <16 x i16> %25979, <16 x i16>* %25982, align 2, !tbaa !401
  %25983 = shufflevector <32 x i16> %25978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25984 = getelementptr inbounds i16, i16* %25981, i64 16
  %25985 = bitcast i16* %25984 to <16 x i16>*
  store <16 x i16> %25983, <16 x i16>* %25985, align 2, !tbaa !401
  %indvars.iv.next3425 = add nuw nsw i64 %indvars.iv3424, 1
  %.not2563 = icmp eq i64 %indvars.iv.next3425, %530
  br i1 %.not2563, label %"end for blur_y.s0.x.x.rebased2090", label %"for blur_y.s0.x.x.rebased2089"

"for blur_y.s0.x.x.rebased2105":                  ; preds = %"for blur_y.s0.x.x.rebased2105.preheader", %"consume blur_x2116"
  %blur_y.s0.x.x.rebased2107 = phi i32 [ %26094, %"consume blur_x2116" ], [ 0, %"for blur_y.s0.x.x.rebased2105.preheader" ]
  %25986 = add nsw i32 %blur_y.s0.x.x.rebased2107, %t1626814
  %a5234 = shl nsw i32 %25986, 5
  %25987 = icmp sgt i32 %t1647, %a5234
  %blur_y.s0.x.v0.base.s2108 = select i1 %25987, i32 %a5234, i32 %t1647
  %25988 = icmp slt i32 %25986, 1
  %25989 = icmp sgt i32 %198, %a5234
  %25990 = or i1 %25988, %25989
  br i1 %25990, label %"produce blur_x2113", label %"consume blur_x2116"

"end for blur_y.s0.x.x.rebased2106":              ; preds = %"consume blur_x2116", %"end for blur_y.s0.x.x.rebased2090"
  br i1 %229, label %"produce blur_x2120", label %after_bb2117

"produce blur_x2113":                             ; preds = %"for blur_y.s0.x.x.rebased2105"
  %25991 = icmp slt i32 %blur_y.s0.x.v0.base.s2108, %198
  %blur_x.s0.x.v1.base.s2114 = select i1 %25991, i32 %blur_y.s0.x.v0.base.s2108, i32 %198
  %t11172115 = add nsw i32 %487, %blur_x.s0.x.v1.base.s2114
  %25992 = sext i32 %t11172115 to i64
  %25993 = getelementptr inbounds i16, i16* %read_input822, i64 %25992
  %25994 = getelementptr inbounds i16, i16* %25993, i64 1
  %25995 = bitcast i16* %25994 to <16 x i16>*
  %25996 = load <16 x i16>, <16 x i16>* %25995, align 2, !tbaa !396
  %25997 = getelementptr inbounds i16, i16* %25993, i64 17
  %25998 = bitcast i16* %25997 to <16 x i16>*
  %25999 = load <16 x i16>, <16 x i16>* %25998, align 2, !tbaa !396
  %26000 = bitcast i16* %25993 to <16 x i16>*
  %26001 = load <16 x i16>, <16 x i16>* %26000, align 2, !tbaa !396
  %26002 = getelementptr inbounds i16, i16* %25993, i64 16
  %26003 = bitcast i16* %26002 to <16 x i16>*
  %26004 = load <16 x i16>, <16 x i16>* %26003, align 2, !tbaa !396
  %26005 = getelementptr inbounds i16, i16* %25993, i64 2
  %26006 = bitcast i16* %26005 to <16 x i16>*
  %26007 = load <16 x i16>, <16 x i16>* %26006, align 2, !tbaa !396
  %26008 = getelementptr inbounds i16, i16* %25993, i64 18
  %26009 = bitcast i16* %26008 to <16 x i16>*
  %26010 = load <16 x i16>, <16 x i16>* %26009, align 2, !tbaa !396
  %26011 = getelementptr inbounds i16, i16* %25993, i64 4
  %26012 = bitcast i16* %26011 to <16 x i16>*
  %26013 = load <16 x i16>, <16 x i16>* %26012, align 2, !tbaa !396
  %26014 = getelementptr inbounds i16, i16* %25993, i64 20
  %26015 = bitcast i16* %26014 to <16 x i16>*
  %26016 = load <16 x i16>, <16 x i16>* %26015, align 2, !tbaa !396
  %26017 = getelementptr inbounds i16, i16* %25993, i64 3
  %26018 = bitcast i16* %26017 to <16 x i16>*
  %26019 = load <16 x i16>, <16 x i16>* %26018, align 2, !tbaa !396
  %26020 = getelementptr inbounds i16, i16* %25993, i64 19
  %26021 = bitcast i16* %26020 to <16 x i16>*
  %26022 = load <16 x i16>, <16 x i16>* %26021, align 2, !tbaa !396
  %26023 = add <16 x i16> %26001, %25996
  %26024 = add <16 x i16> %26023, %26007
  %26025 = add <16 x i16> %26024, %26013
  %26026 = add <16 x i16> %26025, %26019
  %26027 = add <16 x i16> %26004, %25999
  %26028 = add <16 x i16> %26027, %26010
  %26029 = add <16 x i16> %26028, %26016
  %26030 = add <16 x i16> %26029, %26022
  %26031 = shufflevector <16 x i16> %26026, <16 x i16> %26030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26032 = udiv <32 x i16> %26031, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26033 = shufflevector <32 x i16> %26032, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26034 = sext i32 %blur_x.s0.x.v1.base.s2114 to i64
  %26035 = add nsw i64 %26034, %25865
  %26036 = getelementptr inbounds i16, i16* %blur_x879, i64 %26035
  %26037 = bitcast i16* %26036 to <16 x i16>*
  store <16 x i16> %26033, <16 x i16>* %26037, align 2, !tbaa !399
  %26038 = shufflevector <32 x i16> %26032, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26039 = getelementptr inbounds i16, i16* %26036, i64 16
  %26040 = bitcast i16* %26039 to <16 x i16>*
  store <16 x i16> %26038, <16 x i16>* %26040, align 2, !tbaa !399
  br label %"consume blur_x2116"

"consume blur_x2116":                             ; preds = %"for blur_y.s0.x.x.rebased2105", %"produce blur_x2113"
  %26041 = sext i32 %blur_y.s0.x.v0.base.s2108 to i64
  %26042 = add nsw i64 %25868, %26041
  %26043 = getelementptr inbounds i16, i16* %blur_x879, i64 %26042
  %26044 = bitcast i16* %26043 to <16 x i16>*
  %26045 = load <16 x i16>, <16 x i16>* %26044, align 2, !tbaa !399
  %26046 = getelementptr inbounds i16, i16* %26043, i64 16
  %26047 = bitcast i16* %26046 to <16 x i16>*
  %26048 = load <16 x i16>, <16 x i16>* %26047, align 2, !tbaa !399
  %26049 = add nsw i64 %25871, %26041
  %26050 = getelementptr inbounds i16, i16* %blur_x879, i64 %26049
  %26051 = bitcast i16* %26050 to <16 x i16>*
  %26052 = load <16 x i16>, <16 x i16>* %26051, align 2, !tbaa !399
  %26053 = getelementptr inbounds i16, i16* %26050, i64 16
  %26054 = bitcast i16* %26053 to <16 x i16>*
  %26055 = load <16 x i16>, <16 x i16>* %26054, align 2, !tbaa !399
  %26056 = add nsw i64 %25874, %26041
  %26057 = getelementptr inbounds i16, i16* %blur_x879, i64 %26056
  %26058 = bitcast i16* %26057 to <16 x i16>*
  %26059 = load <16 x i16>, <16 x i16>* %26058, align 2, !tbaa !399
  %26060 = getelementptr inbounds i16, i16* %26057, i64 16
  %26061 = bitcast i16* %26060 to <16 x i16>*
  %26062 = load <16 x i16>, <16 x i16>* %26061, align 2, !tbaa !399
  %26063 = add nsw i64 %25877, %26041
  %26064 = getelementptr inbounds i16, i16* %blur_x879, i64 %26063
  %26065 = bitcast i16* %26064 to <16 x i16>*
  %26066 = load <16 x i16>, <16 x i16>* %26065, align 2, !tbaa !399
  %26067 = getelementptr inbounds i16, i16* %26064, i64 16
  %26068 = bitcast i16* %26067 to <16 x i16>*
  %26069 = load <16 x i16>, <16 x i16>* %26068, align 2, !tbaa !399
  %26070 = add nsw i64 %25880, %26041
  %26071 = getelementptr inbounds i16, i16* %blur_x879, i64 %26070
  %26072 = bitcast i16* %26071 to <16 x i16>*
  %26073 = load <16 x i16>, <16 x i16>* %26072, align 2, !tbaa !399
  %26074 = getelementptr inbounds i16, i16* %26071, i64 16
  %26075 = bitcast i16* %26074 to <16 x i16>*
  %26076 = load <16 x i16>, <16 x i16>* %26075, align 2, !tbaa !399
  %26077 = add <16 x i16> %26052, %26045
  %26078 = add <16 x i16> %26077, %26059
  %26079 = add <16 x i16> %26078, %26066
  %26080 = add <16 x i16> %26079, %26073
  %26081 = add <16 x i16> %26055, %26048
  %26082 = add <16 x i16> %26081, %26062
  %26083 = add <16 x i16> %26082, %26069
  %26084 = add <16 x i16> %26083, %26076
  %26085 = shufflevector <16 x i16> %26080, <16 x i16> %26084, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26086 = udiv <32 x i16> %26085, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26087 = shufflevector <32 x i16> %26086, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26088 = add nsw i64 %25884, %26041
  %26089 = getelementptr inbounds i16, i16* %263, i64 %26088
  %26090 = bitcast i16* %26089 to <16 x i16>*
  store <16 x i16> %26087, <16 x i16>* %26090, align 2, !tbaa !401
  %26091 = shufflevector <32 x i16> %26086, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26092 = getelementptr inbounds i16, i16* %26089, i64 16
  %26093 = bitcast i16* %26092 to <16 x i16>*
  store <16 x i16> %26091, <16 x i16>* %26093, align 2, !tbaa !401
  %26094 = add nuw nsw i32 %blur_y.s0.x.x.rebased2107, 1
  %.not2562 = icmp eq i32 %26094, %t1683898
  br i1 %.not2562, label %"end for blur_y.s0.x.x.rebased2106", label %"for blur_y.s0.x.x.rebased2105"

after_bb2117:                                     ; preds = %"end for blur_y.s0.x.x.rebased2106", %"produce blur_x2120"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2132.preheader", label %"end for blur_y.s0.x.x.rebased2133", !prof !386

"for blur_y.s0.x.x.rebased2132.preheader":        ; preds = %after_bb2117
  %26095 = sext i32 %t17381096 to i64
  %26096 = zext i32 %.pre-phi3547 to i64
  %26097 = mul nsw i64 %26096, %337
  %26098 = sub nsw i64 %26097, %298
  %26099 = zext i32 %.pre-phi3543 to i64
  %26100 = mul nsw i64 %26099, %337
  %26101 = sub nsw i64 %26100, %298
  %26102 = zext i32 %.pre-phi3551 to i64
  %26103 = mul nsw i64 %26102, %337
  %26104 = sub nsw i64 %26103, %298
  %26105 = zext i32 %.pre-phi3563 to i64
  %26106 = mul nsw i64 %26105, %337
  %26107 = sub nsw i64 %26106, %298
  %26108 = zext i32 %.pre-phi3557 to i64
  %26109 = mul nsw i64 %26108, %337
  %26110 = sub nsw i64 %26109, %298
  %26111 = sext i32 %a379 to i64
  %26112 = add nsw i64 %26111, 26
  %26113 = mul nsw i64 %26112, %334
  %26114 = add nsw i64 %26113, %338
  br label %"for blur_y.s0.x.x.rebased2132"

"produce blur_x2120":                             ; preds = %"end for blur_y.s0.x.x.rebased2106"
  %26115 = getelementptr inbounds i16, i16* %read_input822, i64 %491
  %26116 = getelementptr inbounds i16, i16* %26115, i64 -31
  %26117 = bitcast i16* %26116 to <16 x i16>*
  %26118 = load <16 x i16>, <16 x i16>* %26117, align 2, !tbaa !396
  %26119 = getelementptr inbounds i16, i16* %26115, i64 -15
  %26120 = bitcast i16* %26119 to <16 x i16>*
  %26121 = load <16 x i16>, <16 x i16>* %26120, align 2, !tbaa !396
  %26122 = getelementptr inbounds i16, i16* %26115, i64 -32
  %26123 = bitcast i16* %26122 to <16 x i16>*
  %26124 = load <16 x i16>, <16 x i16>* %26123, align 2, !tbaa !396
  %26125 = getelementptr inbounds i16, i16* %26115, i64 -16
  %26126 = bitcast i16* %26125 to <16 x i16>*
  %26127 = load <16 x i16>, <16 x i16>* %26126, align 2, !tbaa !396
  %26128 = getelementptr inbounds i16, i16* %26115, i64 -30
  %26129 = bitcast i16* %26128 to <16 x i16>*
  %26130 = load <16 x i16>, <16 x i16>* %26129, align 2, !tbaa !396
  %26131 = getelementptr inbounds i16, i16* %26115, i64 -14
  %26132 = bitcast i16* %26131 to <16 x i16>*
  %26133 = load <16 x i16>, <16 x i16>* %26132, align 2, !tbaa !396
  %26134 = getelementptr inbounds i16, i16* %26115, i64 -28
  %26135 = bitcast i16* %26134 to <16 x i16>*
  %26136 = load <16 x i16>, <16 x i16>* %26135, align 2, !tbaa !396
  %26137 = getelementptr inbounds i16, i16* %26115, i64 -12
  %26138 = bitcast i16* %26137 to <16 x i16>*
  %26139 = load <16 x i16>, <16 x i16>* %26138, align 2, !tbaa !396
  %26140 = getelementptr inbounds i16, i16* %26115, i64 -29
  %26141 = bitcast i16* %26140 to <16 x i16>*
  %26142 = load <16 x i16>, <16 x i16>* %26141, align 2, !tbaa !396
  %26143 = getelementptr inbounds i16, i16* %26115, i64 -13
  %26144 = bitcast i16* %26143 to <16 x i16>*
  %26145 = load <16 x i16>, <16 x i16>* %26144, align 2, !tbaa !396
  %26146 = add <16 x i16> %26124, %26118
  %26147 = add <16 x i16> %26146, %26130
  %26148 = add <16 x i16> %26147, %26136
  %26149 = add <16 x i16> %26148, %26142
  %26150 = add <16 x i16> %26127, %26121
  %26151 = add <16 x i16> %26150, %26133
  %26152 = add <16 x i16> %26151, %26139
  %26153 = add <16 x i16> %26152, %26145
  %26154 = shufflevector <16 x i16> %26149, <16 x i16> %26153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26155 = udiv <32 x i16> %26154, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26156 = shufflevector <32 x i16> %26155, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26157 = zext i32 %.pre-phi3563 to i64
  %26158 = mul nsw i64 %299, %26157
  %26159 = add nsw i64 %301, %26158
  %26160 = getelementptr inbounds i16, i16* %blur_x879, i64 %26159
  %26161 = getelementptr inbounds i16, i16* %26160, i64 -32
  %26162 = bitcast i16* %26161 to <16 x i16>*
  store <16 x i16> %26156, <16 x i16>* %26162, align 2, !tbaa !399
  %26163 = shufflevector <32 x i16> %26155, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26164 = getelementptr inbounds i16, i16* %26160, i64 -16
  %26165 = bitcast i16* %26164 to <16 x i16>*
  store <16 x i16> %26163, <16 x i16>* %26165, align 2, !tbaa !399
  %26166 = zext i32 %.pre-phi3547 to i64
  %26167 = mul nsw i64 %26166, %333
  %26168 = add nsw i64 %26167, %296
  %26169 = getelementptr inbounds i16, i16* %blur_x879, i64 %26168
  %26170 = getelementptr inbounds i16, i16* %26169, i64 -32
  %26171 = bitcast i16* %26170 to <16 x i16>*
  %26172 = load <16 x i16>, <16 x i16>* %26171, align 2, !tbaa !399
  %26173 = getelementptr inbounds i16, i16* %26169, i64 -16
  %26174 = bitcast i16* %26173 to <16 x i16>*
  %26175 = load <16 x i16>, <16 x i16>* %26174, align 2, !tbaa !399
  %26176 = zext i32 %.pre-phi3543 to i64
  %26177 = mul nsw i64 %26176, %333
  %26178 = add nsw i64 %26177, %296
  %26179 = getelementptr inbounds i16, i16* %blur_x879, i64 %26178
  %26180 = getelementptr inbounds i16, i16* %26179, i64 -32
  %26181 = bitcast i16* %26180 to <16 x i16>*
  %26182 = load <16 x i16>, <16 x i16>* %26181, align 2, !tbaa !399
  %26183 = getelementptr inbounds i16, i16* %26179, i64 -16
  %26184 = bitcast i16* %26183 to <16 x i16>*
  %26185 = load <16 x i16>, <16 x i16>* %26184, align 2, !tbaa !399
  %26186 = zext i32 %.pre-phi3551 to i64
  %26187 = mul nsw i64 %26186, %333
  %26188 = add nsw i64 %26187, %296
  %26189 = getelementptr inbounds i16, i16* %blur_x879, i64 %26188
  %26190 = getelementptr inbounds i16, i16* %26189, i64 -32
  %26191 = bitcast i16* %26190 to <16 x i16>*
  %26192 = load <16 x i16>, <16 x i16>* %26191, align 2, !tbaa !399
  %26193 = getelementptr inbounds i16, i16* %26189, i64 -16
  %26194 = bitcast i16* %26193 to <16 x i16>*
  %26195 = load <16 x i16>, <16 x i16>* %26194, align 2, !tbaa !399
  %26196 = mul nsw i64 %26157, %333
  %26197 = add nsw i64 %26196, %296
  %26198 = getelementptr inbounds i16, i16* %blur_x879, i64 %26197
  %26199 = getelementptr inbounds i16, i16* %26198, i64 -32
  %26200 = bitcast i16* %26199 to <16 x i16>*
  %26201 = load <16 x i16>, <16 x i16>* %26200, align 2, !tbaa !399
  %26202 = getelementptr inbounds i16, i16* %26198, i64 -16
  %26203 = bitcast i16* %26202 to <16 x i16>*
  %26204 = load <16 x i16>, <16 x i16>* %26203, align 2, !tbaa !399
  %26205 = zext i32 %.pre-phi3557 to i64
  %26206 = mul nsw i64 %26205, %333
  %26207 = add nsw i64 %26206, %296
  %26208 = getelementptr inbounds i16, i16* %blur_x879, i64 %26207
  %26209 = getelementptr inbounds i16, i16* %26208, i64 -32
  %26210 = bitcast i16* %26209 to <16 x i16>*
  %26211 = load <16 x i16>, <16 x i16>* %26210, align 2, !tbaa !399
  %26212 = getelementptr inbounds i16, i16* %26208, i64 -16
  %26213 = bitcast i16* %26212 to <16 x i16>*
  %26214 = load <16 x i16>, <16 x i16>* %26213, align 2, !tbaa !399
  %26215 = add <16 x i16> %26182, %26172
  %26216 = add <16 x i16> %26215, %26192
  %26217 = add <16 x i16> %26216, %26201
  %26218 = add <16 x i16> %26217, %26211
  %26219 = add <16 x i16> %26185, %26175
  %26220 = add <16 x i16> %26219, %26195
  %26221 = add <16 x i16> %26220, %26204
  %26222 = add <16 x i16> %26221, %26214
  %26223 = shufflevector <16 x i16> %26218, <16 x i16> %26222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26224 = udiv <32 x i16> %26223, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26225 = shufflevector <32 x i16> %26224, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26226 = sext i32 %a379 to i64
  %26227 = add nsw i64 %26226, 26
  %26228 = mul nsw i64 %26227, %334
  %26229 = add nsw i64 %336, %26228
  %26230 = getelementptr inbounds i16, i16* %263, i64 %26229
  %26231 = getelementptr inbounds i16, i16* %26230, i64 -32
  %26232 = bitcast i16* %26231 to <16 x i16>*
  store <16 x i16> %26225, <16 x i16>* %26232, align 2, !tbaa !401
  %26233 = shufflevector <32 x i16> %26224, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26234 = getelementptr inbounds i16, i16* %26230, i64 -16
  %26235 = bitcast i16* %26234 to <16 x i16>*
  store <16 x i16> %26233, <16 x i16>* %26235, align 2, !tbaa !401
  br label %after_bb2117

"for blur_y.s0.x.x.rebased2132":                  ; preds = %"for blur_y.s0.x.x.rebased2132.preheader", %"consume blur_x2140"
  %indvars.iv3426 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2132.preheader" ], [ %indvars.iv.next3427, %"consume blur_x2140" ]
  %26236 = add nsw i64 %indvars.iv3426, %303
  %26237 = icmp slt i64 %26236, 1
  %26238 = trunc i64 %26236 to i32
  %26239 = shl nsw i32 %26238, 5
  %26240 = icmp sgt i32 %198, %26239
  %26241 = or i1 %26237, %26240
  br i1 %26241, label %"produce blur_x2138", label %"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge"

"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2132"
  %.pre3616 = shl nsw i64 %26236, 5
  br label %"consume blur_x2140"

"end for blur_y.s0.x.x.rebased2133":              ; preds = %"consume blur_x2140", %after_bb2117
  br i1 %304, label %"for blur_y.s0.x.x.rebased2148.preheader", label %"end for blur_y.s0.x.x.rebased2149", !prof !386

"for blur_y.s0.x.x.rebased2148.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2133"
  %26242 = sext i32 %t17381096 to i64
  %26243 = zext i32 %.pre-phi3547 to i64
  %26244 = mul nsw i64 %26243, %337
  %26245 = sub nsw i64 %26244, %298
  %26246 = zext i32 %.pre-phi3543 to i64
  %26247 = mul nsw i64 %26246, %337
  %26248 = sub nsw i64 %26247, %298
  %26249 = zext i32 %.pre-phi3551 to i64
  %26250 = mul nsw i64 %26249, %337
  %26251 = sub nsw i64 %26250, %298
  %26252 = zext i32 %.pre-phi3563 to i64
  %26253 = mul nsw i64 %26252, %337
  %26254 = sub nsw i64 %26253, %298
  %26255 = zext i32 %.pre-phi3557 to i64
  %26256 = mul nsw i64 %26255, %337
  %26257 = sub nsw i64 %26256, %298
  %26258 = sext i32 %a379 to i64
  %26259 = add nsw i64 %26258, 26
  %26260 = mul nsw i64 %26259, %334
  %26261 = add nsw i64 %26260, %338
  br label %"for blur_y.s0.x.x.rebased2148"

"produce blur_x2138":                             ; preds = %"for blur_y.s0.x.x.rebased2132"
  %t11282139 = add nsw i32 %493, %26239
  %26262 = sext i32 %t11282139 to i64
  %26263 = getelementptr inbounds i16, i16* %read_input822, i64 %26262
  %26264 = getelementptr inbounds i16, i16* %26263, i64 1
  %26265 = bitcast i16* %26264 to <16 x i16>*
  %26266 = load <16 x i16>, <16 x i16>* %26265, align 2, !tbaa !396
  %26267 = getelementptr inbounds i16, i16* %26263, i64 17
  %26268 = bitcast i16* %26267 to <16 x i16>*
  %26269 = load <16 x i16>, <16 x i16>* %26268, align 2, !tbaa !396
  %26270 = bitcast i16* %26263 to <16 x i16>*
  %26271 = load <16 x i16>, <16 x i16>* %26270, align 2, !tbaa !396
  %26272 = getelementptr inbounds i16, i16* %26263, i64 16
  %26273 = bitcast i16* %26272 to <16 x i16>*
  %26274 = load <16 x i16>, <16 x i16>* %26273, align 2, !tbaa !396
  %26275 = getelementptr inbounds i16, i16* %26263, i64 2
  %26276 = bitcast i16* %26275 to <16 x i16>*
  %26277 = load <16 x i16>, <16 x i16>* %26276, align 2, !tbaa !396
  %26278 = getelementptr inbounds i16, i16* %26263, i64 18
  %26279 = bitcast i16* %26278 to <16 x i16>*
  %26280 = load <16 x i16>, <16 x i16>* %26279, align 2, !tbaa !396
  %26281 = getelementptr inbounds i16, i16* %26263, i64 4
  %26282 = bitcast i16* %26281 to <16 x i16>*
  %26283 = load <16 x i16>, <16 x i16>* %26282, align 2, !tbaa !396
  %26284 = getelementptr inbounds i16, i16* %26263, i64 20
  %26285 = bitcast i16* %26284 to <16 x i16>*
  %26286 = load <16 x i16>, <16 x i16>* %26285, align 2, !tbaa !396
  %26287 = getelementptr inbounds i16, i16* %26263, i64 3
  %26288 = bitcast i16* %26287 to <16 x i16>*
  %26289 = load <16 x i16>, <16 x i16>* %26288, align 2, !tbaa !396
  %26290 = getelementptr inbounds i16, i16* %26263, i64 19
  %26291 = bitcast i16* %26290 to <16 x i16>*
  %26292 = load <16 x i16>, <16 x i16>* %26291, align 2, !tbaa !396
  %26293 = add <16 x i16> %26271, %26266
  %26294 = add <16 x i16> %26293, %26277
  %26295 = add <16 x i16> %26294, %26283
  %26296 = add <16 x i16> %26295, %26289
  %26297 = add <16 x i16> %26274, %26269
  %26298 = add <16 x i16> %26297, %26280
  %26299 = add <16 x i16> %26298, %26286
  %26300 = add <16 x i16> %26299, %26292
  %26301 = shufflevector <16 x i16> %26296, <16 x i16> %26300, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26302 = udiv <32 x i16> %26301, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26303 = shufflevector <32 x i16> %26302, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26304 = shl nsw i64 %26236, 5
  %26305 = add nsw i64 %26304, %26095
  %26306 = getelementptr inbounds i16, i16* %blur_x879, i64 %26305
  %26307 = bitcast i16* %26306 to <16 x i16>*
  store <16 x i16> %26303, <16 x i16>* %26307, align 2, !tbaa !399
  %26308 = shufflevector <32 x i16> %26302, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26309 = getelementptr inbounds i16, i16* %26306, i64 16
  %26310 = bitcast i16* %26309 to <16 x i16>*
  store <16 x i16> %26308, <16 x i16>* %26310, align 2, !tbaa !399
  br label %"consume blur_x2140"

"consume blur_x2140":                             ; preds = %"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge", %"produce blur_x2138"
  %.pre-phi3617 = phi i64 [ %.pre3616, %"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge" ], [ %26304, %"produce blur_x2138" ]
  %26311 = add nsw i64 %26098, %.pre-phi3617
  %26312 = getelementptr inbounds i16, i16* %blur_x879, i64 %26311
  %26313 = bitcast i16* %26312 to <16 x i16>*
  %26314 = load <16 x i16>, <16 x i16>* %26313, align 2, !tbaa !399
  %26315 = getelementptr inbounds i16, i16* %26312, i64 16
  %26316 = bitcast i16* %26315 to <16 x i16>*
  %26317 = load <16 x i16>, <16 x i16>* %26316, align 2, !tbaa !399
  %26318 = add nsw i64 %26101, %.pre-phi3617
  %26319 = getelementptr inbounds i16, i16* %blur_x879, i64 %26318
  %26320 = bitcast i16* %26319 to <16 x i16>*
  %26321 = load <16 x i16>, <16 x i16>* %26320, align 2, !tbaa !399
  %26322 = getelementptr inbounds i16, i16* %26319, i64 16
  %26323 = bitcast i16* %26322 to <16 x i16>*
  %26324 = load <16 x i16>, <16 x i16>* %26323, align 2, !tbaa !399
  %26325 = add nsw i64 %26104, %.pre-phi3617
  %26326 = getelementptr inbounds i16, i16* %blur_x879, i64 %26325
  %26327 = bitcast i16* %26326 to <16 x i16>*
  %26328 = load <16 x i16>, <16 x i16>* %26327, align 2, !tbaa !399
  %26329 = getelementptr inbounds i16, i16* %26326, i64 16
  %26330 = bitcast i16* %26329 to <16 x i16>*
  %26331 = load <16 x i16>, <16 x i16>* %26330, align 2, !tbaa !399
  %26332 = add nsw i64 %26107, %.pre-phi3617
  %26333 = getelementptr inbounds i16, i16* %blur_x879, i64 %26332
  %26334 = bitcast i16* %26333 to <16 x i16>*
  %26335 = load <16 x i16>, <16 x i16>* %26334, align 2, !tbaa !399
  %26336 = getelementptr inbounds i16, i16* %26333, i64 16
  %26337 = bitcast i16* %26336 to <16 x i16>*
  %26338 = load <16 x i16>, <16 x i16>* %26337, align 2, !tbaa !399
  %26339 = add nsw i64 %26110, %.pre-phi3617
  %26340 = getelementptr inbounds i16, i16* %blur_x879, i64 %26339
  %26341 = bitcast i16* %26340 to <16 x i16>*
  %26342 = load <16 x i16>, <16 x i16>* %26341, align 2, !tbaa !399
  %26343 = getelementptr inbounds i16, i16* %26340, i64 16
  %26344 = bitcast i16* %26343 to <16 x i16>*
  %26345 = load <16 x i16>, <16 x i16>* %26344, align 2, !tbaa !399
  %26346 = add <16 x i16> %26321, %26314
  %26347 = add <16 x i16> %26346, %26328
  %26348 = add <16 x i16> %26347, %26335
  %26349 = add <16 x i16> %26348, %26342
  %26350 = add <16 x i16> %26324, %26317
  %26351 = add <16 x i16> %26350, %26331
  %26352 = add <16 x i16> %26351, %26338
  %26353 = add <16 x i16> %26352, %26345
  %26354 = shufflevector <16 x i16> %26349, <16 x i16> %26353, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26355 = udiv <32 x i16> %26354, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26356 = shufflevector <32 x i16> %26355, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26357 = add nsw i64 %26114, %.pre-phi3617
  %26358 = getelementptr inbounds i16, i16* %263, i64 %26357
  %26359 = bitcast i16* %26358 to <16 x i16>*
  store <16 x i16> %26356, <16 x i16>* %26359, align 2, !tbaa !401
  %26360 = shufflevector <32 x i16> %26355, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26361 = getelementptr inbounds i16, i16* %26358, i64 16
  %26362 = bitcast i16* %26361 to <16 x i16>*
  store <16 x i16> %26360, <16 x i16>* %26362, align 2, !tbaa !401
  %indvars.iv.next3427 = add nuw nsw i64 %indvars.iv3426, 1
  %.not2559 = icmp eq i64 %indvars.iv.next3427, %530
  br i1 %.not2559, label %"end for blur_y.s0.x.x.rebased2133", label %"for blur_y.s0.x.x.rebased2132"

"for blur_y.s0.x.x.rebased2148":                  ; preds = %"for blur_y.s0.x.x.rebased2148.preheader", %"consume blur_x2159"
  %blur_y.s0.x.x.rebased2150 = phi i32 [ %26471, %"consume blur_x2159" ], [ 0, %"for blur_y.s0.x.x.rebased2148.preheader" ]
  %26363 = add nsw i32 %blur_y.s0.x.x.rebased2150, %t1626814
  %a5391 = shl nsw i32 %26363, 5
  %26364 = icmp sgt i32 %t1647, %a5391
  %blur_y.s0.x.v0.base.s2151 = select i1 %26364, i32 %a5391, i32 %t1647
  %26365 = icmp slt i32 %26363, 1
  %26366 = icmp sgt i32 %198, %a5391
  %26367 = or i1 %26365, %26366
  br i1 %26367, label %"produce blur_x2156", label %"consume blur_x2159"

"end for blur_y.s0.x.x.rebased2149":              ; preds = %"consume blur_x2159", %"end for blur_y.s0.x.x.rebased2133"
  br i1 %229, label %"produce blur_x2163", label %after_bb2160

"produce blur_x2156":                             ; preds = %"for blur_y.s0.x.x.rebased2148"
  %26368 = icmp slt i32 %blur_y.s0.x.v0.base.s2151, %198
  %blur_x.s0.x.v1.base.s2157 = select i1 %26368, i32 %blur_y.s0.x.v0.base.s2151, i32 %198
  %t11332158 = add nsw i32 %493, %blur_x.s0.x.v1.base.s2157
  %26369 = sext i32 %t11332158 to i64
  %26370 = getelementptr inbounds i16, i16* %read_input822, i64 %26369
  %26371 = getelementptr inbounds i16, i16* %26370, i64 1
  %26372 = bitcast i16* %26371 to <16 x i16>*
  %26373 = load <16 x i16>, <16 x i16>* %26372, align 2, !tbaa !396
  %26374 = getelementptr inbounds i16, i16* %26370, i64 17
  %26375 = bitcast i16* %26374 to <16 x i16>*
  %26376 = load <16 x i16>, <16 x i16>* %26375, align 2, !tbaa !396
  %26377 = bitcast i16* %26370 to <16 x i16>*
  %26378 = load <16 x i16>, <16 x i16>* %26377, align 2, !tbaa !396
  %26379 = getelementptr inbounds i16, i16* %26370, i64 16
  %26380 = bitcast i16* %26379 to <16 x i16>*
  %26381 = load <16 x i16>, <16 x i16>* %26380, align 2, !tbaa !396
  %26382 = getelementptr inbounds i16, i16* %26370, i64 2
  %26383 = bitcast i16* %26382 to <16 x i16>*
  %26384 = load <16 x i16>, <16 x i16>* %26383, align 2, !tbaa !396
  %26385 = getelementptr inbounds i16, i16* %26370, i64 18
  %26386 = bitcast i16* %26385 to <16 x i16>*
  %26387 = load <16 x i16>, <16 x i16>* %26386, align 2, !tbaa !396
  %26388 = getelementptr inbounds i16, i16* %26370, i64 4
  %26389 = bitcast i16* %26388 to <16 x i16>*
  %26390 = load <16 x i16>, <16 x i16>* %26389, align 2, !tbaa !396
  %26391 = getelementptr inbounds i16, i16* %26370, i64 20
  %26392 = bitcast i16* %26391 to <16 x i16>*
  %26393 = load <16 x i16>, <16 x i16>* %26392, align 2, !tbaa !396
  %26394 = getelementptr inbounds i16, i16* %26370, i64 3
  %26395 = bitcast i16* %26394 to <16 x i16>*
  %26396 = load <16 x i16>, <16 x i16>* %26395, align 2, !tbaa !396
  %26397 = getelementptr inbounds i16, i16* %26370, i64 19
  %26398 = bitcast i16* %26397 to <16 x i16>*
  %26399 = load <16 x i16>, <16 x i16>* %26398, align 2, !tbaa !396
  %26400 = add <16 x i16> %26378, %26373
  %26401 = add <16 x i16> %26400, %26384
  %26402 = add <16 x i16> %26401, %26390
  %26403 = add <16 x i16> %26402, %26396
  %26404 = add <16 x i16> %26381, %26376
  %26405 = add <16 x i16> %26404, %26387
  %26406 = add <16 x i16> %26405, %26393
  %26407 = add <16 x i16> %26406, %26399
  %26408 = shufflevector <16 x i16> %26403, <16 x i16> %26407, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26409 = udiv <32 x i16> %26408, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26410 = shufflevector <32 x i16> %26409, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26411 = sext i32 %blur_x.s0.x.v1.base.s2157 to i64
  %26412 = add nsw i64 %26411, %26242
  %26413 = getelementptr inbounds i16, i16* %blur_x879, i64 %26412
  %26414 = bitcast i16* %26413 to <16 x i16>*
  store <16 x i16> %26410, <16 x i16>* %26414, align 2, !tbaa !399
  %26415 = shufflevector <32 x i16> %26409, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26416 = getelementptr inbounds i16, i16* %26413, i64 16
  %26417 = bitcast i16* %26416 to <16 x i16>*
  store <16 x i16> %26415, <16 x i16>* %26417, align 2, !tbaa !399
  br label %"consume blur_x2159"

"consume blur_x2159":                             ; preds = %"for blur_y.s0.x.x.rebased2148", %"produce blur_x2156"
  %26418 = sext i32 %blur_y.s0.x.v0.base.s2151 to i64
  %26419 = add nsw i64 %26245, %26418
  %26420 = getelementptr inbounds i16, i16* %blur_x879, i64 %26419
  %26421 = bitcast i16* %26420 to <16 x i16>*
  %26422 = load <16 x i16>, <16 x i16>* %26421, align 2, !tbaa !399
  %26423 = getelementptr inbounds i16, i16* %26420, i64 16
  %26424 = bitcast i16* %26423 to <16 x i16>*
  %26425 = load <16 x i16>, <16 x i16>* %26424, align 2, !tbaa !399
  %26426 = add nsw i64 %26248, %26418
  %26427 = getelementptr inbounds i16, i16* %blur_x879, i64 %26426
  %26428 = bitcast i16* %26427 to <16 x i16>*
  %26429 = load <16 x i16>, <16 x i16>* %26428, align 2, !tbaa !399
  %26430 = getelementptr inbounds i16, i16* %26427, i64 16
  %26431 = bitcast i16* %26430 to <16 x i16>*
  %26432 = load <16 x i16>, <16 x i16>* %26431, align 2, !tbaa !399
  %26433 = add nsw i64 %26251, %26418
  %26434 = getelementptr inbounds i16, i16* %blur_x879, i64 %26433
  %26435 = bitcast i16* %26434 to <16 x i16>*
  %26436 = load <16 x i16>, <16 x i16>* %26435, align 2, !tbaa !399
  %26437 = getelementptr inbounds i16, i16* %26434, i64 16
  %26438 = bitcast i16* %26437 to <16 x i16>*
  %26439 = load <16 x i16>, <16 x i16>* %26438, align 2, !tbaa !399
  %26440 = add nsw i64 %26254, %26418
  %26441 = getelementptr inbounds i16, i16* %blur_x879, i64 %26440
  %26442 = bitcast i16* %26441 to <16 x i16>*
  %26443 = load <16 x i16>, <16 x i16>* %26442, align 2, !tbaa !399
  %26444 = getelementptr inbounds i16, i16* %26441, i64 16
  %26445 = bitcast i16* %26444 to <16 x i16>*
  %26446 = load <16 x i16>, <16 x i16>* %26445, align 2, !tbaa !399
  %26447 = add nsw i64 %26257, %26418
  %26448 = getelementptr inbounds i16, i16* %blur_x879, i64 %26447
  %26449 = bitcast i16* %26448 to <16 x i16>*
  %26450 = load <16 x i16>, <16 x i16>* %26449, align 2, !tbaa !399
  %26451 = getelementptr inbounds i16, i16* %26448, i64 16
  %26452 = bitcast i16* %26451 to <16 x i16>*
  %26453 = load <16 x i16>, <16 x i16>* %26452, align 2, !tbaa !399
  %26454 = add <16 x i16> %26429, %26422
  %26455 = add <16 x i16> %26454, %26436
  %26456 = add <16 x i16> %26455, %26443
  %26457 = add <16 x i16> %26456, %26450
  %26458 = add <16 x i16> %26432, %26425
  %26459 = add <16 x i16> %26458, %26439
  %26460 = add <16 x i16> %26459, %26446
  %26461 = add <16 x i16> %26460, %26453
  %26462 = shufflevector <16 x i16> %26457, <16 x i16> %26461, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26463 = udiv <32 x i16> %26462, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26464 = shufflevector <32 x i16> %26463, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26465 = add nsw i64 %26261, %26418
  %26466 = getelementptr inbounds i16, i16* %263, i64 %26465
  %26467 = bitcast i16* %26466 to <16 x i16>*
  store <16 x i16> %26464, <16 x i16>* %26467, align 2, !tbaa !401
  %26468 = shufflevector <32 x i16> %26463, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26469 = getelementptr inbounds i16, i16* %26466, i64 16
  %26470 = bitcast i16* %26469 to <16 x i16>*
  store <16 x i16> %26468, <16 x i16>* %26470, align 2, !tbaa !401
  %26471 = add nuw nsw i32 %blur_y.s0.x.x.rebased2150, 1
  %.not2558 = icmp eq i32 %26471, %t1683898
  br i1 %.not2558, label %"end for blur_y.s0.x.x.rebased2149", label %"for blur_y.s0.x.x.rebased2148"

after_bb2160:                                     ; preds = %"end for blur_y.s0.x.x.rebased2149", %"produce blur_x2163"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2175.preheader", label %"end for blur_y.s0.x.x.rebased2176", !prof !386

"for blur_y.s0.x.x.rebased2175.preheader":        ; preds = %after_bb2160
  %26472 = sext i32 %t17541139 to i64
  %26473 = zext i32 %.pre-phi3551 to i64
  %26474 = mul nsw i64 %26473, %337
  %26475 = sub nsw i64 %26474, %298
  %26476 = zext i32 %.pre-phi3547 to i64
  %26477 = mul nsw i64 %26476, %337
  %26478 = sub nsw i64 %26477, %298
  %26479 = zext i32 %.pre-phi3557 to i64
  %26480 = mul nsw i64 %26479, %337
  %26481 = sub nsw i64 %26480, %298
  %26482 = zext i32 %.pre-phi3569 to i64
  %26483 = mul nsw i64 %26482, %337
  %26484 = sub nsw i64 %26483, %298
  %26485 = zext i32 %.pre-phi3563 to i64
  %26486 = mul nsw i64 %26485, %337
  %26487 = sub nsw i64 %26486, %298
  %26488 = sext i32 %a379 to i64
  %26489 = add nsw i64 %26488, 27
  %26490 = mul nsw i64 %26489, %334
  %26491 = add nsw i64 %26490, %338
  br label %"for blur_y.s0.x.x.rebased2175"

"produce blur_x2163":                             ; preds = %"end for blur_y.s0.x.x.rebased2149"
  %26492 = getelementptr inbounds i16, i16* %read_input822, i64 %497
  %26493 = getelementptr inbounds i16, i16* %26492, i64 -31
  %26494 = bitcast i16* %26493 to <16 x i16>*
  %26495 = load <16 x i16>, <16 x i16>* %26494, align 2, !tbaa !396
  %26496 = getelementptr inbounds i16, i16* %26492, i64 -15
  %26497 = bitcast i16* %26496 to <16 x i16>*
  %26498 = load <16 x i16>, <16 x i16>* %26497, align 2, !tbaa !396
  %26499 = getelementptr inbounds i16, i16* %26492, i64 -32
  %26500 = bitcast i16* %26499 to <16 x i16>*
  %26501 = load <16 x i16>, <16 x i16>* %26500, align 2, !tbaa !396
  %26502 = getelementptr inbounds i16, i16* %26492, i64 -16
  %26503 = bitcast i16* %26502 to <16 x i16>*
  %26504 = load <16 x i16>, <16 x i16>* %26503, align 2, !tbaa !396
  %26505 = getelementptr inbounds i16, i16* %26492, i64 -30
  %26506 = bitcast i16* %26505 to <16 x i16>*
  %26507 = load <16 x i16>, <16 x i16>* %26506, align 2, !tbaa !396
  %26508 = getelementptr inbounds i16, i16* %26492, i64 -14
  %26509 = bitcast i16* %26508 to <16 x i16>*
  %26510 = load <16 x i16>, <16 x i16>* %26509, align 2, !tbaa !396
  %26511 = getelementptr inbounds i16, i16* %26492, i64 -28
  %26512 = bitcast i16* %26511 to <16 x i16>*
  %26513 = load <16 x i16>, <16 x i16>* %26512, align 2, !tbaa !396
  %26514 = getelementptr inbounds i16, i16* %26492, i64 -12
  %26515 = bitcast i16* %26514 to <16 x i16>*
  %26516 = load <16 x i16>, <16 x i16>* %26515, align 2, !tbaa !396
  %26517 = getelementptr inbounds i16, i16* %26492, i64 -29
  %26518 = bitcast i16* %26517 to <16 x i16>*
  %26519 = load <16 x i16>, <16 x i16>* %26518, align 2, !tbaa !396
  %26520 = getelementptr inbounds i16, i16* %26492, i64 -13
  %26521 = bitcast i16* %26520 to <16 x i16>*
  %26522 = load <16 x i16>, <16 x i16>* %26521, align 2, !tbaa !396
  %26523 = add <16 x i16> %26501, %26495
  %26524 = add <16 x i16> %26523, %26507
  %26525 = add <16 x i16> %26524, %26513
  %26526 = add <16 x i16> %26525, %26519
  %26527 = add <16 x i16> %26504, %26498
  %26528 = add <16 x i16> %26527, %26510
  %26529 = add <16 x i16> %26528, %26516
  %26530 = add <16 x i16> %26529, %26522
  %26531 = shufflevector <16 x i16> %26526, <16 x i16> %26530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26532 = udiv <32 x i16> %26531, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26533 = shufflevector <32 x i16> %26532, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26534 = zext i32 %.pre-phi3569 to i64
  %26535 = mul nsw i64 %299, %26534
  %26536 = add nsw i64 %301, %26535
  %26537 = getelementptr inbounds i16, i16* %blur_x879, i64 %26536
  %26538 = getelementptr inbounds i16, i16* %26537, i64 -32
  %26539 = bitcast i16* %26538 to <16 x i16>*
  store <16 x i16> %26533, <16 x i16>* %26539, align 2, !tbaa !399
  %26540 = shufflevector <32 x i16> %26532, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26541 = getelementptr inbounds i16, i16* %26537, i64 -16
  %26542 = bitcast i16* %26541 to <16 x i16>*
  store <16 x i16> %26540, <16 x i16>* %26542, align 2, !tbaa !399
  %26543 = zext i32 %.pre-phi3551 to i64
  %26544 = mul nsw i64 %26543, %333
  %26545 = add nsw i64 %26544, %296
  %26546 = getelementptr inbounds i16, i16* %blur_x879, i64 %26545
  %26547 = getelementptr inbounds i16, i16* %26546, i64 -32
  %26548 = bitcast i16* %26547 to <16 x i16>*
  %26549 = load <16 x i16>, <16 x i16>* %26548, align 2, !tbaa !399
  %26550 = getelementptr inbounds i16, i16* %26546, i64 -16
  %26551 = bitcast i16* %26550 to <16 x i16>*
  %26552 = load <16 x i16>, <16 x i16>* %26551, align 2, !tbaa !399
  %26553 = zext i32 %.pre-phi3547 to i64
  %26554 = mul nsw i64 %26553, %333
  %26555 = add nsw i64 %26554, %296
  %26556 = getelementptr inbounds i16, i16* %blur_x879, i64 %26555
  %26557 = getelementptr inbounds i16, i16* %26556, i64 -32
  %26558 = bitcast i16* %26557 to <16 x i16>*
  %26559 = load <16 x i16>, <16 x i16>* %26558, align 2, !tbaa !399
  %26560 = getelementptr inbounds i16, i16* %26556, i64 -16
  %26561 = bitcast i16* %26560 to <16 x i16>*
  %26562 = load <16 x i16>, <16 x i16>* %26561, align 2, !tbaa !399
  %26563 = zext i32 %.pre-phi3557 to i64
  %26564 = mul nsw i64 %26563, %333
  %26565 = add nsw i64 %26564, %296
  %26566 = getelementptr inbounds i16, i16* %blur_x879, i64 %26565
  %26567 = getelementptr inbounds i16, i16* %26566, i64 -32
  %26568 = bitcast i16* %26567 to <16 x i16>*
  %26569 = load <16 x i16>, <16 x i16>* %26568, align 2, !tbaa !399
  %26570 = getelementptr inbounds i16, i16* %26566, i64 -16
  %26571 = bitcast i16* %26570 to <16 x i16>*
  %26572 = load <16 x i16>, <16 x i16>* %26571, align 2, !tbaa !399
  %26573 = mul nsw i64 %26534, %333
  %26574 = add nsw i64 %26573, %296
  %26575 = getelementptr inbounds i16, i16* %blur_x879, i64 %26574
  %26576 = getelementptr inbounds i16, i16* %26575, i64 -32
  %26577 = bitcast i16* %26576 to <16 x i16>*
  %26578 = load <16 x i16>, <16 x i16>* %26577, align 2, !tbaa !399
  %26579 = getelementptr inbounds i16, i16* %26575, i64 -16
  %26580 = bitcast i16* %26579 to <16 x i16>*
  %26581 = load <16 x i16>, <16 x i16>* %26580, align 2, !tbaa !399
  %26582 = zext i32 %.pre-phi3563 to i64
  %26583 = mul nsw i64 %26582, %333
  %26584 = add nsw i64 %26583, %296
  %26585 = getelementptr inbounds i16, i16* %blur_x879, i64 %26584
  %26586 = getelementptr inbounds i16, i16* %26585, i64 -32
  %26587 = bitcast i16* %26586 to <16 x i16>*
  %26588 = load <16 x i16>, <16 x i16>* %26587, align 2, !tbaa !399
  %26589 = getelementptr inbounds i16, i16* %26585, i64 -16
  %26590 = bitcast i16* %26589 to <16 x i16>*
  %26591 = load <16 x i16>, <16 x i16>* %26590, align 2, !tbaa !399
  %26592 = add <16 x i16> %26559, %26549
  %26593 = add <16 x i16> %26592, %26569
  %26594 = add <16 x i16> %26593, %26578
  %26595 = add <16 x i16> %26594, %26588
  %26596 = add <16 x i16> %26562, %26552
  %26597 = add <16 x i16> %26596, %26572
  %26598 = add <16 x i16> %26597, %26581
  %26599 = add <16 x i16> %26598, %26591
  %26600 = shufflevector <16 x i16> %26595, <16 x i16> %26599, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26601 = udiv <32 x i16> %26600, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26602 = shufflevector <32 x i16> %26601, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26603 = sext i32 %a379 to i64
  %26604 = add nsw i64 %26603, 27
  %26605 = mul nsw i64 %26604, %334
  %26606 = add nsw i64 %336, %26605
  %26607 = getelementptr inbounds i16, i16* %263, i64 %26606
  %26608 = getelementptr inbounds i16, i16* %26607, i64 -32
  %26609 = bitcast i16* %26608 to <16 x i16>*
  store <16 x i16> %26602, <16 x i16>* %26609, align 2, !tbaa !401
  %26610 = shufflevector <32 x i16> %26601, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26611 = getelementptr inbounds i16, i16* %26607, i64 -16
  %26612 = bitcast i16* %26611 to <16 x i16>*
  store <16 x i16> %26610, <16 x i16>* %26612, align 2, !tbaa !401
  br label %after_bb2160

"for blur_y.s0.x.x.rebased2175":                  ; preds = %"for blur_y.s0.x.x.rebased2175.preheader", %"consume blur_x2183"
  %indvars.iv3428 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2175.preheader" ], [ %indvars.iv.next3429, %"consume blur_x2183" ]
  %26613 = add nsw i64 %indvars.iv3428, %303
  %26614 = icmp slt i64 %26613, 1
  %26615 = trunc i64 %26613 to i32
  %26616 = shl nsw i32 %26615, 5
  %26617 = icmp sgt i32 %198, %26616
  %26618 = or i1 %26614, %26617
  br i1 %26618, label %"produce blur_x2181", label %"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge"

"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2175"
  %.pre3618 = shl nsw i64 %26613, 5
  br label %"consume blur_x2183"

"end for blur_y.s0.x.x.rebased2176":              ; preds = %"consume blur_x2183", %after_bb2160
  br i1 %304, label %"for blur_y.s0.x.x.rebased2191.preheader", label %"end for blur_y.s0.x.x.rebased2192", !prof !386

"for blur_y.s0.x.x.rebased2191.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2176"
  %26619 = sext i32 %t17541139 to i64
  %26620 = zext i32 %.pre-phi3551 to i64
  %26621 = mul nsw i64 %26620, %337
  %26622 = sub nsw i64 %26621, %298
  %26623 = zext i32 %.pre-phi3547 to i64
  %26624 = mul nsw i64 %26623, %337
  %26625 = sub nsw i64 %26624, %298
  %26626 = zext i32 %.pre-phi3557 to i64
  %26627 = mul nsw i64 %26626, %337
  %26628 = sub nsw i64 %26627, %298
  %26629 = zext i32 %.pre-phi3569 to i64
  %26630 = mul nsw i64 %26629, %337
  %26631 = sub nsw i64 %26630, %298
  %26632 = zext i32 %.pre-phi3563 to i64
  %26633 = mul nsw i64 %26632, %337
  %26634 = sub nsw i64 %26633, %298
  %26635 = sext i32 %a379 to i64
  %26636 = add nsw i64 %26635, 27
  %26637 = mul nsw i64 %26636, %334
  %26638 = add nsw i64 %26637, %338
  br label %"for blur_y.s0.x.x.rebased2191"

"produce blur_x2181":                             ; preds = %"for blur_y.s0.x.x.rebased2175"
  %t11442182 = add nsw i32 %499, %26616
  %26639 = sext i32 %t11442182 to i64
  %26640 = getelementptr inbounds i16, i16* %read_input822, i64 %26639
  %26641 = getelementptr inbounds i16, i16* %26640, i64 1
  %26642 = bitcast i16* %26641 to <16 x i16>*
  %26643 = load <16 x i16>, <16 x i16>* %26642, align 2, !tbaa !396
  %26644 = getelementptr inbounds i16, i16* %26640, i64 17
  %26645 = bitcast i16* %26644 to <16 x i16>*
  %26646 = load <16 x i16>, <16 x i16>* %26645, align 2, !tbaa !396
  %26647 = bitcast i16* %26640 to <16 x i16>*
  %26648 = load <16 x i16>, <16 x i16>* %26647, align 2, !tbaa !396
  %26649 = getelementptr inbounds i16, i16* %26640, i64 16
  %26650 = bitcast i16* %26649 to <16 x i16>*
  %26651 = load <16 x i16>, <16 x i16>* %26650, align 2, !tbaa !396
  %26652 = getelementptr inbounds i16, i16* %26640, i64 2
  %26653 = bitcast i16* %26652 to <16 x i16>*
  %26654 = load <16 x i16>, <16 x i16>* %26653, align 2, !tbaa !396
  %26655 = getelementptr inbounds i16, i16* %26640, i64 18
  %26656 = bitcast i16* %26655 to <16 x i16>*
  %26657 = load <16 x i16>, <16 x i16>* %26656, align 2, !tbaa !396
  %26658 = getelementptr inbounds i16, i16* %26640, i64 4
  %26659 = bitcast i16* %26658 to <16 x i16>*
  %26660 = load <16 x i16>, <16 x i16>* %26659, align 2, !tbaa !396
  %26661 = getelementptr inbounds i16, i16* %26640, i64 20
  %26662 = bitcast i16* %26661 to <16 x i16>*
  %26663 = load <16 x i16>, <16 x i16>* %26662, align 2, !tbaa !396
  %26664 = getelementptr inbounds i16, i16* %26640, i64 3
  %26665 = bitcast i16* %26664 to <16 x i16>*
  %26666 = load <16 x i16>, <16 x i16>* %26665, align 2, !tbaa !396
  %26667 = getelementptr inbounds i16, i16* %26640, i64 19
  %26668 = bitcast i16* %26667 to <16 x i16>*
  %26669 = load <16 x i16>, <16 x i16>* %26668, align 2, !tbaa !396
  %26670 = add <16 x i16> %26648, %26643
  %26671 = add <16 x i16> %26670, %26654
  %26672 = add <16 x i16> %26671, %26660
  %26673 = add <16 x i16> %26672, %26666
  %26674 = add <16 x i16> %26651, %26646
  %26675 = add <16 x i16> %26674, %26657
  %26676 = add <16 x i16> %26675, %26663
  %26677 = add <16 x i16> %26676, %26669
  %26678 = shufflevector <16 x i16> %26673, <16 x i16> %26677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26679 = udiv <32 x i16> %26678, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26680 = shufflevector <32 x i16> %26679, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26681 = shl nsw i64 %26613, 5
  %26682 = add nsw i64 %26681, %26472
  %26683 = getelementptr inbounds i16, i16* %blur_x879, i64 %26682
  %26684 = bitcast i16* %26683 to <16 x i16>*
  store <16 x i16> %26680, <16 x i16>* %26684, align 2, !tbaa !399
  %26685 = shufflevector <32 x i16> %26679, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26686 = getelementptr inbounds i16, i16* %26683, i64 16
  %26687 = bitcast i16* %26686 to <16 x i16>*
  store <16 x i16> %26685, <16 x i16>* %26687, align 2, !tbaa !399
  br label %"consume blur_x2183"

"consume blur_x2183":                             ; preds = %"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge", %"produce blur_x2181"
  %.pre-phi3619 = phi i64 [ %.pre3618, %"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge" ], [ %26681, %"produce blur_x2181" ]
  %26688 = add nsw i64 %26475, %.pre-phi3619
  %26689 = getelementptr inbounds i16, i16* %blur_x879, i64 %26688
  %26690 = bitcast i16* %26689 to <16 x i16>*
  %26691 = load <16 x i16>, <16 x i16>* %26690, align 2, !tbaa !399
  %26692 = getelementptr inbounds i16, i16* %26689, i64 16
  %26693 = bitcast i16* %26692 to <16 x i16>*
  %26694 = load <16 x i16>, <16 x i16>* %26693, align 2, !tbaa !399
  %26695 = add nsw i64 %26478, %.pre-phi3619
  %26696 = getelementptr inbounds i16, i16* %blur_x879, i64 %26695
  %26697 = bitcast i16* %26696 to <16 x i16>*
  %26698 = load <16 x i16>, <16 x i16>* %26697, align 2, !tbaa !399
  %26699 = getelementptr inbounds i16, i16* %26696, i64 16
  %26700 = bitcast i16* %26699 to <16 x i16>*
  %26701 = load <16 x i16>, <16 x i16>* %26700, align 2, !tbaa !399
  %26702 = add nsw i64 %26481, %.pre-phi3619
  %26703 = getelementptr inbounds i16, i16* %blur_x879, i64 %26702
  %26704 = bitcast i16* %26703 to <16 x i16>*
  %26705 = load <16 x i16>, <16 x i16>* %26704, align 2, !tbaa !399
  %26706 = getelementptr inbounds i16, i16* %26703, i64 16
  %26707 = bitcast i16* %26706 to <16 x i16>*
  %26708 = load <16 x i16>, <16 x i16>* %26707, align 2, !tbaa !399
  %26709 = add nsw i64 %26484, %.pre-phi3619
  %26710 = getelementptr inbounds i16, i16* %blur_x879, i64 %26709
  %26711 = bitcast i16* %26710 to <16 x i16>*
  %26712 = load <16 x i16>, <16 x i16>* %26711, align 2, !tbaa !399
  %26713 = getelementptr inbounds i16, i16* %26710, i64 16
  %26714 = bitcast i16* %26713 to <16 x i16>*
  %26715 = load <16 x i16>, <16 x i16>* %26714, align 2, !tbaa !399
  %26716 = add nsw i64 %26487, %.pre-phi3619
  %26717 = getelementptr inbounds i16, i16* %blur_x879, i64 %26716
  %26718 = bitcast i16* %26717 to <16 x i16>*
  %26719 = load <16 x i16>, <16 x i16>* %26718, align 2, !tbaa !399
  %26720 = getelementptr inbounds i16, i16* %26717, i64 16
  %26721 = bitcast i16* %26720 to <16 x i16>*
  %26722 = load <16 x i16>, <16 x i16>* %26721, align 2, !tbaa !399
  %26723 = add <16 x i16> %26698, %26691
  %26724 = add <16 x i16> %26723, %26705
  %26725 = add <16 x i16> %26724, %26712
  %26726 = add <16 x i16> %26725, %26719
  %26727 = add <16 x i16> %26701, %26694
  %26728 = add <16 x i16> %26727, %26708
  %26729 = add <16 x i16> %26728, %26715
  %26730 = add <16 x i16> %26729, %26722
  %26731 = shufflevector <16 x i16> %26726, <16 x i16> %26730, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26732 = udiv <32 x i16> %26731, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26733 = shufflevector <32 x i16> %26732, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26734 = add nsw i64 %26491, %.pre-phi3619
  %26735 = getelementptr inbounds i16, i16* %263, i64 %26734
  %26736 = bitcast i16* %26735 to <16 x i16>*
  store <16 x i16> %26733, <16 x i16>* %26736, align 2, !tbaa !401
  %26737 = shufflevector <32 x i16> %26732, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26738 = getelementptr inbounds i16, i16* %26735, i64 16
  %26739 = bitcast i16* %26738 to <16 x i16>*
  store <16 x i16> %26737, <16 x i16>* %26739, align 2, !tbaa !401
  %indvars.iv.next3429 = add nuw nsw i64 %indvars.iv3428, 1
  %.not2555 = icmp eq i64 %indvars.iv.next3429, %530
  br i1 %.not2555, label %"end for blur_y.s0.x.x.rebased2176", label %"for blur_y.s0.x.x.rebased2175"

"for blur_y.s0.x.x.rebased2191":                  ; preds = %"for blur_y.s0.x.x.rebased2191.preheader", %"consume blur_x2202"
  %blur_y.s0.x.x.rebased2193 = phi i32 [ %26848, %"consume blur_x2202" ], [ 0, %"for blur_y.s0.x.x.rebased2191.preheader" ]
  %26740 = add nsw i32 %blur_y.s0.x.x.rebased2193, %t1626814
  %a5548 = shl nsw i32 %26740, 5
  %26741 = icmp sgt i32 %t1647, %a5548
  %blur_y.s0.x.v0.base.s2194 = select i1 %26741, i32 %a5548, i32 %t1647
  %26742 = icmp slt i32 %26740, 1
  %26743 = icmp sgt i32 %198, %a5548
  %26744 = or i1 %26742, %26743
  br i1 %26744, label %"produce blur_x2199", label %"consume blur_x2202"

"end for blur_y.s0.x.x.rebased2192":              ; preds = %"consume blur_x2202", %"end for blur_y.s0.x.x.rebased2176"
  br i1 %229, label %"produce blur_x2206", label %after_bb2203

"produce blur_x2199":                             ; preds = %"for blur_y.s0.x.x.rebased2191"
  %26745 = icmp slt i32 %blur_y.s0.x.v0.base.s2194, %198
  %blur_x.s0.x.v1.base.s2200 = select i1 %26745, i32 %blur_y.s0.x.v0.base.s2194, i32 %198
  %t11492201 = add nsw i32 %499, %blur_x.s0.x.v1.base.s2200
  %26746 = sext i32 %t11492201 to i64
  %26747 = getelementptr inbounds i16, i16* %read_input822, i64 %26746
  %26748 = getelementptr inbounds i16, i16* %26747, i64 1
  %26749 = bitcast i16* %26748 to <16 x i16>*
  %26750 = load <16 x i16>, <16 x i16>* %26749, align 2, !tbaa !396
  %26751 = getelementptr inbounds i16, i16* %26747, i64 17
  %26752 = bitcast i16* %26751 to <16 x i16>*
  %26753 = load <16 x i16>, <16 x i16>* %26752, align 2, !tbaa !396
  %26754 = bitcast i16* %26747 to <16 x i16>*
  %26755 = load <16 x i16>, <16 x i16>* %26754, align 2, !tbaa !396
  %26756 = getelementptr inbounds i16, i16* %26747, i64 16
  %26757 = bitcast i16* %26756 to <16 x i16>*
  %26758 = load <16 x i16>, <16 x i16>* %26757, align 2, !tbaa !396
  %26759 = getelementptr inbounds i16, i16* %26747, i64 2
  %26760 = bitcast i16* %26759 to <16 x i16>*
  %26761 = load <16 x i16>, <16 x i16>* %26760, align 2, !tbaa !396
  %26762 = getelementptr inbounds i16, i16* %26747, i64 18
  %26763 = bitcast i16* %26762 to <16 x i16>*
  %26764 = load <16 x i16>, <16 x i16>* %26763, align 2, !tbaa !396
  %26765 = getelementptr inbounds i16, i16* %26747, i64 4
  %26766 = bitcast i16* %26765 to <16 x i16>*
  %26767 = load <16 x i16>, <16 x i16>* %26766, align 2, !tbaa !396
  %26768 = getelementptr inbounds i16, i16* %26747, i64 20
  %26769 = bitcast i16* %26768 to <16 x i16>*
  %26770 = load <16 x i16>, <16 x i16>* %26769, align 2, !tbaa !396
  %26771 = getelementptr inbounds i16, i16* %26747, i64 3
  %26772 = bitcast i16* %26771 to <16 x i16>*
  %26773 = load <16 x i16>, <16 x i16>* %26772, align 2, !tbaa !396
  %26774 = getelementptr inbounds i16, i16* %26747, i64 19
  %26775 = bitcast i16* %26774 to <16 x i16>*
  %26776 = load <16 x i16>, <16 x i16>* %26775, align 2, !tbaa !396
  %26777 = add <16 x i16> %26755, %26750
  %26778 = add <16 x i16> %26777, %26761
  %26779 = add <16 x i16> %26778, %26767
  %26780 = add <16 x i16> %26779, %26773
  %26781 = add <16 x i16> %26758, %26753
  %26782 = add <16 x i16> %26781, %26764
  %26783 = add <16 x i16> %26782, %26770
  %26784 = add <16 x i16> %26783, %26776
  %26785 = shufflevector <16 x i16> %26780, <16 x i16> %26784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26786 = udiv <32 x i16> %26785, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26787 = shufflevector <32 x i16> %26786, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26788 = sext i32 %blur_x.s0.x.v1.base.s2200 to i64
  %26789 = add nsw i64 %26788, %26619
  %26790 = getelementptr inbounds i16, i16* %blur_x879, i64 %26789
  %26791 = bitcast i16* %26790 to <16 x i16>*
  store <16 x i16> %26787, <16 x i16>* %26791, align 2, !tbaa !399
  %26792 = shufflevector <32 x i16> %26786, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26793 = getelementptr inbounds i16, i16* %26790, i64 16
  %26794 = bitcast i16* %26793 to <16 x i16>*
  store <16 x i16> %26792, <16 x i16>* %26794, align 2, !tbaa !399
  br label %"consume blur_x2202"

"consume blur_x2202":                             ; preds = %"for blur_y.s0.x.x.rebased2191", %"produce blur_x2199"
  %26795 = sext i32 %blur_y.s0.x.v0.base.s2194 to i64
  %26796 = add nsw i64 %26622, %26795
  %26797 = getelementptr inbounds i16, i16* %blur_x879, i64 %26796
  %26798 = bitcast i16* %26797 to <16 x i16>*
  %26799 = load <16 x i16>, <16 x i16>* %26798, align 2, !tbaa !399
  %26800 = getelementptr inbounds i16, i16* %26797, i64 16
  %26801 = bitcast i16* %26800 to <16 x i16>*
  %26802 = load <16 x i16>, <16 x i16>* %26801, align 2, !tbaa !399
  %26803 = add nsw i64 %26625, %26795
  %26804 = getelementptr inbounds i16, i16* %blur_x879, i64 %26803
  %26805 = bitcast i16* %26804 to <16 x i16>*
  %26806 = load <16 x i16>, <16 x i16>* %26805, align 2, !tbaa !399
  %26807 = getelementptr inbounds i16, i16* %26804, i64 16
  %26808 = bitcast i16* %26807 to <16 x i16>*
  %26809 = load <16 x i16>, <16 x i16>* %26808, align 2, !tbaa !399
  %26810 = add nsw i64 %26628, %26795
  %26811 = getelementptr inbounds i16, i16* %blur_x879, i64 %26810
  %26812 = bitcast i16* %26811 to <16 x i16>*
  %26813 = load <16 x i16>, <16 x i16>* %26812, align 2, !tbaa !399
  %26814 = getelementptr inbounds i16, i16* %26811, i64 16
  %26815 = bitcast i16* %26814 to <16 x i16>*
  %26816 = load <16 x i16>, <16 x i16>* %26815, align 2, !tbaa !399
  %26817 = add nsw i64 %26631, %26795
  %26818 = getelementptr inbounds i16, i16* %blur_x879, i64 %26817
  %26819 = bitcast i16* %26818 to <16 x i16>*
  %26820 = load <16 x i16>, <16 x i16>* %26819, align 2, !tbaa !399
  %26821 = getelementptr inbounds i16, i16* %26818, i64 16
  %26822 = bitcast i16* %26821 to <16 x i16>*
  %26823 = load <16 x i16>, <16 x i16>* %26822, align 2, !tbaa !399
  %26824 = add nsw i64 %26634, %26795
  %26825 = getelementptr inbounds i16, i16* %blur_x879, i64 %26824
  %26826 = bitcast i16* %26825 to <16 x i16>*
  %26827 = load <16 x i16>, <16 x i16>* %26826, align 2, !tbaa !399
  %26828 = getelementptr inbounds i16, i16* %26825, i64 16
  %26829 = bitcast i16* %26828 to <16 x i16>*
  %26830 = load <16 x i16>, <16 x i16>* %26829, align 2, !tbaa !399
  %26831 = add <16 x i16> %26806, %26799
  %26832 = add <16 x i16> %26831, %26813
  %26833 = add <16 x i16> %26832, %26820
  %26834 = add <16 x i16> %26833, %26827
  %26835 = add <16 x i16> %26809, %26802
  %26836 = add <16 x i16> %26835, %26816
  %26837 = add <16 x i16> %26836, %26823
  %26838 = add <16 x i16> %26837, %26830
  %26839 = shufflevector <16 x i16> %26834, <16 x i16> %26838, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26840 = udiv <32 x i16> %26839, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26841 = shufflevector <32 x i16> %26840, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26842 = add nsw i64 %26638, %26795
  %26843 = getelementptr inbounds i16, i16* %263, i64 %26842
  %26844 = bitcast i16* %26843 to <16 x i16>*
  store <16 x i16> %26841, <16 x i16>* %26844, align 2, !tbaa !401
  %26845 = shufflevector <32 x i16> %26840, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26846 = getelementptr inbounds i16, i16* %26843, i64 16
  %26847 = bitcast i16* %26846 to <16 x i16>*
  store <16 x i16> %26845, <16 x i16>* %26847, align 2, !tbaa !401
  %26848 = add nuw nsw i32 %blur_y.s0.x.x.rebased2193, 1
  %.not2554 = icmp eq i32 %26848, %t1683898
  br i1 %.not2554, label %"end for blur_y.s0.x.x.rebased2192", label %"for blur_y.s0.x.x.rebased2191"

after_bb2203:                                     ; preds = %"end for blur_y.s0.x.x.rebased2192", %"produce blur_x2206"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2218.preheader", label %"end for blur_y.s0.x.x.rebased2219", !prof !386

"for blur_y.s0.x.x.rebased2218.preheader":        ; preds = %after_bb2203
  %26849 = sext i32 %t1682886 to i64
  %26850 = zext i32 %.pre-phi3557 to i64
  %26851 = mul nsw i64 %26850, %337
  %26852 = sub nsw i64 %26851, %298
  %26853 = zext i32 %.pre-phi3551 to i64
  %26854 = mul nsw i64 %26853, %337
  %26855 = sub nsw i64 %26854, %298
  %26856 = zext i32 %.pre-phi3563 to i64
  %26857 = mul nsw i64 %26856, %337
  %26858 = sub nsw i64 %26857, %298
  %26859 = zext i32 %.pre-phi3535 to i64
  %26860 = mul nsw i64 %26859, %337
  %26861 = sub nsw i64 %26860, %298
  %26862 = zext i32 %.pre-phi3569 to i64
  %26863 = mul nsw i64 %26862, %337
  %26864 = sub nsw i64 %26863, %298
  %26865 = sext i32 %a379 to i64
  %26866 = add nsw i64 %26865, 28
  %26867 = mul nsw i64 %26866, %334
  %26868 = add nsw i64 %26867, %338
  br label %"for blur_y.s0.x.x.rebased2218"

"produce blur_x2206":                             ; preds = %"end for blur_y.s0.x.x.rebased2192"
  %26869 = getelementptr inbounds i16, i16* %read_input822, i64 %503
  %26870 = getelementptr inbounds i16, i16* %26869, i64 -31
  %26871 = bitcast i16* %26870 to <16 x i16>*
  %26872 = load <16 x i16>, <16 x i16>* %26871, align 2, !tbaa !396
  %26873 = getelementptr inbounds i16, i16* %26869, i64 -15
  %26874 = bitcast i16* %26873 to <16 x i16>*
  %26875 = load <16 x i16>, <16 x i16>* %26874, align 2, !tbaa !396
  %26876 = getelementptr inbounds i16, i16* %26869, i64 -32
  %26877 = bitcast i16* %26876 to <16 x i16>*
  %26878 = load <16 x i16>, <16 x i16>* %26877, align 2, !tbaa !396
  %26879 = getelementptr inbounds i16, i16* %26869, i64 -16
  %26880 = bitcast i16* %26879 to <16 x i16>*
  %26881 = load <16 x i16>, <16 x i16>* %26880, align 2, !tbaa !396
  %26882 = getelementptr inbounds i16, i16* %26869, i64 -30
  %26883 = bitcast i16* %26882 to <16 x i16>*
  %26884 = load <16 x i16>, <16 x i16>* %26883, align 2, !tbaa !396
  %26885 = getelementptr inbounds i16, i16* %26869, i64 -14
  %26886 = bitcast i16* %26885 to <16 x i16>*
  %26887 = load <16 x i16>, <16 x i16>* %26886, align 2, !tbaa !396
  %26888 = getelementptr inbounds i16, i16* %26869, i64 -28
  %26889 = bitcast i16* %26888 to <16 x i16>*
  %26890 = load <16 x i16>, <16 x i16>* %26889, align 2, !tbaa !396
  %26891 = getelementptr inbounds i16, i16* %26869, i64 -12
  %26892 = bitcast i16* %26891 to <16 x i16>*
  %26893 = load <16 x i16>, <16 x i16>* %26892, align 2, !tbaa !396
  %26894 = getelementptr inbounds i16, i16* %26869, i64 -29
  %26895 = bitcast i16* %26894 to <16 x i16>*
  %26896 = load <16 x i16>, <16 x i16>* %26895, align 2, !tbaa !396
  %26897 = getelementptr inbounds i16, i16* %26869, i64 -13
  %26898 = bitcast i16* %26897 to <16 x i16>*
  %26899 = load <16 x i16>, <16 x i16>* %26898, align 2, !tbaa !396
  %26900 = add <16 x i16> %26878, %26872
  %26901 = add <16 x i16> %26900, %26884
  %26902 = add <16 x i16> %26901, %26890
  %26903 = add <16 x i16> %26902, %26896
  %26904 = add <16 x i16> %26881, %26875
  %26905 = add <16 x i16> %26904, %26887
  %26906 = add <16 x i16> %26905, %26893
  %26907 = add <16 x i16> %26906, %26899
  %26908 = shufflevector <16 x i16> %26903, <16 x i16> %26907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26909 = udiv <32 x i16> %26908, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26910 = shufflevector <32 x i16> %26909, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26911 = zext i32 %.pre-phi3535 to i64
  %26912 = mul nsw i64 %299, %26911
  %26913 = add nsw i64 %301, %26912
  %26914 = getelementptr inbounds i16, i16* %blur_x879, i64 %26913
  %26915 = getelementptr inbounds i16, i16* %26914, i64 -32
  %26916 = bitcast i16* %26915 to <16 x i16>*
  store <16 x i16> %26910, <16 x i16>* %26916, align 2, !tbaa !399
  %26917 = shufflevector <32 x i16> %26909, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26918 = getelementptr inbounds i16, i16* %26914, i64 -16
  %26919 = bitcast i16* %26918 to <16 x i16>*
  store <16 x i16> %26917, <16 x i16>* %26919, align 2, !tbaa !399
  %26920 = zext i32 %.pre-phi3557 to i64
  %26921 = mul nsw i64 %26920, %333
  %26922 = add nsw i64 %26921, %296
  %26923 = getelementptr inbounds i16, i16* %blur_x879, i64 %26922
  %26924 = getelementptr inbounds i16, i16* %26923, i64 -32
  %26925 = bitcast i16* %26924 to <16 x i16>*
  %26926 = load <16 x i16>, <16 x i16>* %26925, align 2, !tbaa !399
  %26927 = getelementptr inbounds i16, i16* %26923, i64 -16
  %26928 = bitcast i16* %26927 to <16 x i16>*
  %26929 = load <16 x i16>, <16 x i16>* %26928, align 2, !tbaa !399
  %26930 = zext i32 %.pre-phi3551 to i64
  %26931 = mul nsw i64 %26930, %333
  %26932 = add nsw i64 %26931, %296
  %26933 = getelementptr inbounds i16, i16* %blur_x879, i64 %26932
  %26934 = getelementptr inbounds i16, i16* %26933, i64 -32
  %26935 = bitcast i16* %26934 to <16 x i16>*
  %26936 = load <16 x i16>, <16 x i16>* %26935, align 2, !tbaa !399
  %26937 = getelementptr inbounds i16, i16* %26933, i64 -16
  %26938 = bitcast i16* %26937 to <16 x i16>*
  %26939 = load <16 x i16>, <16 x i16>* %26938, align 2, !tbaa !399
  %26940 = zext i32 %.pre-phi3563 to i64
  %26941 = mul nsw i64 %26940, %333
  %26942 = add nsw i64 %26941, %296
  %26943 = getelementptr inbounds i16, i16* %blur_x879, i64 %26942
  %26944 = getelementptr inbounds i16, i16* %26943, i64 -32
  %26945 = bitcast i16* %26944 to <16 x i16>*
  %26946 = load <16 x i16>, <16 x i16>* %26945, align 2, !tbaa !399
  %26947 = getelementptr inbounds i16, i16* %26943, i64 -16
  %26948 = bitcast i16* %26947 to <16 x i16>*
  %26949 = load <16 x i16>, <16 x i16>* %26948, align 2, !tbaa !399
  %26950 = mul nsw i64 %26911, %333
  %26951 = add nsw i64 %26950, %296
  %26952 = getelementptr inbounds i16, i16* %blur_x879, i64 %26951
  %26953 = getelementptr inbounds i16, i16* %26952, i64 -32
  %26954 = bitcast i16* %26953 to <16 x i16>*
  %26955 = load <16 x i16>, <16 x i16>* %26954, align 2, !tbaa !399
  %26956 = getelementptr inbounds i16, i16* %26952, i64 -16
  %26957 = bitcast i16* %26956 to <16 x i16>*
  %26958 = load <16 x i16>, <16 x i16>* %26957, align 2, !tbaa !399
  %26959 = zext i32 %.pre-phi3569 to i64
  %26960 = mul nsw i64 %26959, %333
  %26961 = add nsw i64 %26960, %296
  %26962 = getelementptr inbounds i16, i16* %blur_x879, i64 %26961
  %26963 = getelementptr inbounds i16, i16* %26962, i64 -32
  %26964 = bitcast i16* %26963 to <16 x i16>*
  %26965 = load <16 x i16>, <16 x i16>* %26964, align 2, !tbaa !399
  %26966 = getelementptr inbounds i16, i16* %26962, i64 -16
  %26967 = bitcast i16* %26966 to <16 x i16>*
  %26968 = load <16 x i16>, <16 x i16>* %26967, align 2, !tbaa !399
  %26969 = add <16 x i16> %26936, %26926
  %26970 = add <16 x i16> %26969, %26946
  %26971 = add <16 x i16> %26970, %26955
  %26972 = add <16 x i16> %26971, %26965
  %26973 = add <16 x i16> %26939, %26929
  %26974 = add <16 x i16> %26973, %26949
  %26975 = add <16 x i16> %26974, %26958
  %26976 = add <16 x i16> %26975, %26968
  %26977 = shufflevector <16 x i16> %26972, <16 x i16> %26976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26978 = udiv <32 x i16> %26977, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %26979 = shufflevector <32 x i16> %26978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26980 = sext i32 %a379 to i64
  %26981 = add nsw i64 %26980, 28
  %26982 = mul nsw i64 %26981, %334
  %26983 = add nsw i64 %336, %26982
  %26984 = getelementptr inbounds i16, i16* %263, i64 %26983
  %26985 = getelementptr inbounds i16, i16* %26984, i64 -32
  %26986 = bitcast i16* %26985 to <16 x i16>*
  store <16 x i16> %26979, <16 x i16>* %26986, align 2, !tbaa !401
  %26987 = shufflevector <32 x i16> %26978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26988 = getelementptr inbounds i16, i16* %26984, i64 -16
  %26989 = bitcast i16* %26988 to <16 x i16>*
  store <16 x i16> %26987, <16 x i16>* %26989, align 2, !tbaa !401
  br label %after_bb2203

"for blur_y.s0.x.x.rebased2218":                  ; preds = %"for blur_y.s0.x.x.rebased2218.preheader", %"consume blur_x2226"
  %indvars.iv3430 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2218.preheader" ], [ %indvars.iv.next3431, %"consume blur_x2226" ]
  %26990 = add nsw i64 %indvars.iv3430, %303
  %26991 = icmp slt i64 %26990, 1
  %26992 = trunc i64 %26990 to i32
  %26993 = shl nsw i32 %26992, 5
  %26994 = icmp sgt i32 %198, %26993
  %26995 = or i1 %26991, %26994
  br i1 %26995, label %"produce blur_x2224", label %"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge"

"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2218"
  %.pre3620 = shl nsw i64 %26990, 5
  br label %"consume blur_x2226"

"end for blur_y.s0.x.x.rebased2219":              ; preds = %"consume blur_x2226", %after_bb2203
  br i1 %304, label %"for blur_y.s0.x.x.rebased2234.preheader", label %"end for blur_y.s0.x.x.rebased2235", !prof !386

"for blur_y.s0.x.x.rebased2234.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2219"
  %26996 = sext i32 %t1682886 to i64
  %26997 = zext i32 %.pre-phi3557 to i64
  %26998 = mul nsw i64 %26997, %337
  %26999 = sub nsw i64 %26998, %298
  %27000 = zext i32 %.pre-phi3551 to i64
  %27001 = mul nsw i64 %27000, %337
  %27002 = sub nsw i64 %27001, %298
  %27003 = zext i32 %.pre-phi3563 to i64
  %27004 = mul nsw i64 %27003, %337
  %27005 = sub nsw i64 %27004, %298
  %27006 = zext i32 %.pre-phi3535 to i64
  %27007 = mul nsw i64 %27006, %337
  %27008 = sub nsw i64 %27007, %298
  %27009 = zext i32 %.pre-phi3569 to i64
  %27010 = mul nsw i64 %27009, %337
  %27011 = sub nsw i64 %27010, %298
  %27012 = sext i32 %a379 to i64
  %27013 = add nsw i64 %27012, 28
  %27014 = mul nsw i64 %27013, %334
  %27015 = add nsw i64 %27014, %338
  br label %"for blur_y.s0.x.x.rebased2234"

"produce blur_x2224":                             ; preds = %"for blur_y.s0.x.x.rebased2218"
  %t11602225 = add nsw i32 %505, %26993
  %27016 = sext i32 %t11602225 to i64
  %27017 = getelementptr inbounds i16, i16* %read_input822, i64 %27016
  %27018 = getelementptr inbounds i16, i16* %27017, i64 1
  %27019 = bitcast i16* %27018 to <16 x i16>*
  %27020 = load <16 x i16>, <16 x i16>* %27019, align 2, !tbaa !396
  %27021 = getelementptr inbounds i16, i16* %27017, i64 17
  %27022 = bitcast i16* %27021 to <16 x i16>*
  %27023 = load <16 x i16>, <16 x i16>* %27022, align 2, !tbaa !396
  %27024 = bitcast i16* %27017 to <16 x i16>*
  %27025 = load <16 x i16>, <16 x i16>* %27024, align 2, !tbaa !396
  %27026 = getelementptr inbounds i16, i16* %27017, i64 16
  %27027 = bitcast i16* %27026 to <16 x i16>*
  %27028 = load <16 x i16>, <16 x i16>* %27027, align 2, !tbaa !396
  %27029 = getelementptr inbounds i16, i16* %27017, i64 2
  %27030 = bitcast i16* %27029 to <16 x i16>*
  %27031 = load <16 x i16>, <16 x i16>* %27030, align 2, !tbaa !396
  %27032 = getelementptr inbounds i16, i16* %27017, i64 18
  %27033 = bitcast i16* %27032 to <16 x i16>*
  %27034 = load <16 x i16>, <16 x i16>* %27033, align 2, !tbaa !396
  %27035 = getelementptr inbounds i16, i16* %27017, i64 4
  %27036 = bitcast i16* %27035 to <16 x i16>*
  %27037 = load <16 x i16>, <16 x i16>* %27036, align 2, !tbaa !396
  %27038 = getelementptr inbounds i16, i16* %27017, i64 20
  %27039 = bitcast i16* %27038 to <16 x i16>*
  %27040 = load <16 x i16>, <16 x i16>* %27039, align 2, !tbaa !396
  %27041 = getelementptr inbounds i16, i16* %27017, i64 3
  %27042 = bitcast i16* %27041 to <16 x i16>*
  %27043 = load <16 x i16>, <16 x i16>* %27042, align 2, !tbaa !396
  %27044 = getelementptr inbounds i16, i16* %27017, i64 19
  %27045 = bitcast i16* %27044 to <16 x i16>*
  %27046 = load <16 x i16>, <16 x i16>* %27045, align 2, !tbaa !396
  %27047 = add <16 x i16> %27025, %27020
  %27048 = add <16 x i16> %27047, %27031
  %27049 = add <16 x i16> %27048, %27037
  %27050 = add <16 x i16> %27049, %27043
  %27051 = add <16 x i16> %27028, %27023
  %27052 = add <16 x i16> %27051, %27034
  %27053 = add <16 x i16> %27052, %27040
  %27054 = add <16 x i16> %27053, %27046
  %27055 = shufflevector <16 x i16> %27050, <16 x i16> %27054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27056 = udiv <32 x i16> %27055, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27057 = shufflevector <32 x i16> %27056, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27058 = shl nsw i64 %26990, 5
  %27059 = add nsw i64 %27058, %26849
  %27060 = getelementptr inbounds i16, i16* %blur_x879, i64 %27059
  %27061 = bitcast i16* %27060 to <16 x i16>*
  store <16 x i16> %27057, <16 x i16>* %27061, align 2, !tbaa !399
  %27062 = shufflevector <32 x i16> %27056, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27063 = getelementptr inbounds i16, i16* %27060, i64 16
  %27064 = bitcast i16* %27063 to <16 x i16>*
  store <16 x i16> %27062, <16 x i16>* %27064, align 2, !tbaa !399
  br label %"consume blur_x2226"

"consume blur_x2226":                             ; preds = %"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge", %"produce blur_x2224"
  %.pre-phi3621 = phi i64 [ %.pre3620, %"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge" ], [ %27058, %"produce blur_x2224" ]
  %27065 = add nsw i64 %26852, %.pre-phi3621
  %27066 = getelementptr inbounds i16, i16* %blur_x879, i64 %27065
  %27067 = bitcast i16* %27066 to <16 x i16>*
  %27068 = load <16 x i16>, <16 x i16>* %27067, align 2, !tbaa !399
  %27069 = getelementptr inbounds i16, i16* %27066, i64 16
  %27070 = bitcast i16* %27069 to <16 x i16>*
  %27071 = load <16 x i16>, <16 x i16>* %27070, align 2, !tbaa !399
  %27072 = add nsw i64 %26855, %.pre-phi3621
  %27073 = getelementptr inbounds i16, i16* %blur_x879, i64 %27072
  %27074 = bitcast i16* %27073 to <16 x i16>*
  %27075 = load <16 x i16>, <16 x i16>* %27074, align 2, !tbaa !399
  %27076 = getelementptr inbounds i16, i16* %27073, i64 16
  %27077 = bitcast i16* %27076 to <16 x i16>*
  %27078 = load <16 x i16>, <16 x i16>* %27077, align 2, !tbaa !399
  %27079 = add nsw i64 %26858, %.pre-phi3621
  %27080 = getelementptr inbounds i16, i16* %blur_x879, i64 %27079
  %27081 = bitcast i16* %27080 to <16 x i16>*
  %27082 = load <16 x i16>, <16 x i16>* %27081, align 2, !tbaa !399
  %27083 = getelementptr inbounds i16, i16* %27080, i64 16
  %27084 = bitcast i16* %27083 to <16 x i16>*
  %27085 = load <16 x i16>, <16 x i16>* %27084, align 2, !tbaa !399
  %27086 = add nsw i64 %26861, %.pre-phi3621
  %27087 = getelementptr inbounds i16, i16* %blur_x879, i64 %27086
  %27088 = bitcast i16* %27087 to <16 x i16>*
  %27089 = load <16 x i16>, <16 x i16>* %27088, align 2, !tbaa !399
  %27090 = getelementptr inbounds i16, i16* %27087, i64 16
  %27091 = bitcast i16* %27090 to <16 x i16>*
  %27092 = load <16 x i16>, <16 x i16>* %27091, align 2, !tbaa !399
  %27093 = add nsw i64 %26864, %.pre-phi3621
  %27094 = getelementptr inbounds i16, i16* %blur_x879, i64 %27093
  %27095 = bitcast i16* %27094 to <16 x i16>*
  %27096 = load <16 x i16>, <16 x i16>* %27095, align 2, !tbaa !399
  %27097 = getelementptr inbounds i16, i16* %27094, i64 16
  %27098 = bitcast i16* %27097 to <16 x i16>*
  %27099 = load <16 x i16>, <16 x i16>* %27098, align 2, !tbaa !399
  %27100 = add <16 x i16> %27075, %27068
  %27101 = add <16 x i16> %27100, %27082
  %27102 = add <16 x i16> %27101, %27089
  %27103 = add <16 x i16> %27102, %27096
  %27104 = add <16 x i16> %27078, %27071
  %27105 = add <16 x i16> %27104, %27085
  %27106 = add <16 x i16> %27105, %27092
  %27107 = add <16 x i16> %27106, %27099
  %27108 = shufflevector <16 x i16> %27103, <16 x i16> %27107, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27109 = udiv <32 x i16> %27108, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27110 = shufflevector <32 x i16> %27109, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27111 = add nsw i64 %26868, %.pre-phi3621
  %27112 = getelementptr inbounds i16, i16* %263, i64 %27111
  %27113 = bitcast i16* %27112 to <16 x i16>*
  store <16 x i16> %27110, <16 x i16>* %27113, align 2, !tbaa !401
  %27114 = shufflevector <32 x i16> %27109, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27115 = getelementptr inbounds i16, i16* %27112, i64 16
  %27116 = bitcast i16* %27115 to <16 x i16>*
  store <16 x i16> %27114, <16 x i16>* %27116, align 2, !tbaa !401
  %indvars.iv.next3431 = add nuw nsw i64 %indvars.iv3430, 1
  %.not2551 = icmp eq i64 %indvars.iv.next3431, %530
  br i1 %.not2551, label %"end for blur_y.s0.x.x.rebased2219", label %"for blur_y.s0.x.x.rebased2218"

"for blur_y.s0.x.x.rebased2234":                  ; preds = %"for blur_y.s0.x.x.rebased2234.preheader", %"consume blur_x2245"
  %blur_y.s0.x.x.rebased2236 = phi i32 [ %27225, %"consume blur_x2245" ], [ 0, %"for blur_y.s0.x.x.rebased2234.preheader" ]
  %27117 = add nsw i32 %blur_y.s0.x.x.rebased2236, %t1626814
  %a5705 = shl nsw i32 %27117, 5
  %27118 = icmp sgt i32 %t1647, %a5705
  %blur_y.s0.x.v0.base.s2237 = select i1 %27118, i32 %a5705, i32 %t1647
  %27119 = icmp slt i32 %27117, 1
  %27120 = icmp sgt i32 %198, %a5705
  %27121 = or i1 %27119, %27120
  br i1 %27121, label %"produce blur_x2242", label %"consume blur_x2245"

"end for blur_y.s0.x.x.rebased2235":              ; preds = %"consume blur_x2245", %"end for blur_y.s0.x.x.rebased2219"
  br i1 %229, label %"produce blur_x2249", label %after_bb2246

"produce blur_x2242":                             ; preds = %"for blur_y.s0.x.x.rebased2234"
  %27122 = icmp slt i32 %blur_y.s0.x.v0.base.s2237, %198
  %blur_x.s0.x.v1.base.s2243 = select i1 %27122, i32 %blur_y.s0.x.v0.base.s2237, i32 %198
  %t11652244 = add nsw i32 %505, %blur_x.s0.x.v1.base.s2243
  %27123 = sext i32 %t11652244 to i64
  %27124 = getelementptr inbounds i16, i16* %read_input822, i64 %27123
  %27125 = getelementptr inbounds i16, i16* %27124, i64 1
  %27126 = bitcast i16* %27125 to <16 x i16>*
  %27127 = load <16 x i16>, <16 x i16>* %27126, align 2, !tbaa !396
  %27128 = getelementptr inbounds i16, i16* %27124, i64 17
  %27129 = bitcast i16* %27128 to <16 x i16>*
  %27130 = load <16 x i16>, <16 x i16>* %27129, align 2, !tbaa !396
  %27131 = bitcast i16* %27124 to <16 x i16>*
  %27132 = load <16 x i16>, <16 x i16>* %27131, align 2, !tbaa !396
  %27133 = getelementptr inbounds i16, i16* %27124, i64 16
  %27134 = bitcast i16* %27133 to <16 x i16>*
  %27135 = load <16 x i16>, <16 x i16>* %27134, align 2, !tbaa !396
  %27136 = getelementptr inbounds i16, i16* %27124, i64 2
  %27137 = bitcast i16* %27136 to <16 x i16>*
  %27138 = load <16 x i16>, <16 x i16>* %27137, align 2, !tbaa !396
  %27139 = getelementptr inbounds i16, i16* %27124, i64 18
  %27140 = bitcast i16* %27139 to <16 x i16>*
  %27141 = load <16 x i16>, <16 x i16>* %27140, align 2, !tbaa !396
  %27142 = getelementptr inbounds i16, i16* %27124, i64 4
  %27143 = bitcast i16* %27142 to <16 x i16>*
  %27144 = load <16 x i16>, <16 x i16>* %27143, align 2, !tbaa !396
  %27145 = getelementptr inbounds i16, i16* %27124, i64 20
  %27146 = bitcast i16* %27145 to <16 x i16>*
  %27147 = load <16 x i16>, <16 x i16>* %27146, align 2, !tbaa !396
  %27148 = getelementptr inbounds i16, i16* %27124, i64 3
  %27149 = bitcast i16* %27148 to <16 x i16>*
  %27150 = load <16 x i16>, <16 x i16>* %27149, align 2, !tbaa !396
  %27151 = getelementptr inbounds i16, i16* %27124, i64 19
  %27152 = bitcast i16* %27151 to <16 x i16>*
  %27153 = load <16 x i16>, <16 x i16>* %27152, align 2, !tbaa !396
  %27154 = add <16 x i16> %27132, %27127
  %27155 = add <16 x i16> %27154, %27138
  %27156 = add <16 x i16> %27155, %27144
  %27157 = add <16 x i16> %27156, %27150
  %27158 = add <16 x i16> %27135, %27130
  %27159 = add <16 x i16> %27158, %27141
  %27160 = add <16 x i16> %27159, %27147
  %27161 = add <16 x i16> %27160, %27153
  %27162 = shufflevector <16 x i16> %27157, <16 x i16> %27161, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27163 = udiv <32 x i16> %27162, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27164 = shufflevector <32 x i16> %27163, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27165 = sext i32 %blur_x.s0.x.v1.base.s2243 to i64
  %27166 = add nsw i64 %27165, %26996
  %27167 = getelementptr inbounds i16, i16* %blur_x879, i64 %27166
  %27168 = bitcast i16* %27167 to <16 x i16>*
  store <16 x i16> %27164, <16 x i16>* %27168, align 2, !tbaa !399
  %27169 = shufflevector <32 x i16> %27163, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27170 = getelementptr inbounds i16, i16* %27167, i64 16
  %27171 = bitcast i16* %27170 to <16 x i16>*
  store <16 x i16> %27169, <16 x i16>* %27171, align 2, !tbaa !399
  br label %"consume blur_x2245"

"consume blur_x2245":                             ; preds = %"for blur_y.s0.x.x.rebased2234", %"produce blur_x2242"
  %27172 = sext i32 %blur_y.s0.x.v0.base.s2237 to i64
  %27173 = add nsw i64 %26999, %27172
  %27174 = getelementptr inbounds i16, i16* %blur_x879, i64 %27173
  %27175 = bitcast i16* %27174 to <16 x i16>*
  %27176 = load <16 x i16>, <16 x i16>* %27175, align 2, !tbaa !399
  %27177 = getelementptr inbounds i16, i16* %27174, i64 16
  %27178 = bitcast i16* %27177 to <16 x i16>*
  %27179 = load <16 x i16>, <16 x i16>* %27178, align 2, !tbaa !399
  %27180 = add nsw i64 %27002, %27172
  %27181 = getelementptr inbounds i16, i16* %blur_x879, i64 %27180
  %27182 = bitcast i16* %27181 to <16 x i16>*
  %27183 = load <16 x i16>, <16 x i16>* %27182, align 2, !tbaa !399
  %27184 = getelementptr inbounds i16, i16* %27181, i64 16
  %27185 = bitcast i16* %27184 to <16 x i16>*
  %27186 = load <16 x i16>, <16 x i16>* %27185, align 2, !tbaa !399
  %27187 = add nsw i64 %27005, %27172
  %27188 = getelementptr inbounds i16, i16* %blur_x879, i64 %27187
  %27189 = bitcast i16* %27188 to <16 x i16>*
  %27190 = load <16 x i16>, <16 x i16>* %27189, align 2, !tbaa !399
  %27191 = getelementptr inbounds i16, i16* %27188, i64 16
  %27192 = bitcast i16* %27191 to <16 x i16>*
  %27193 = load <16 x i16>, <16 x i16>* %27192, align 2, !tbaa !399
  %27194 = add nsw i64 %27008, %27172
  %27195 = getelementptr inbounds i16, i16* %blur_x879, i64 %27194
  %27196 = bitcast i16* %27195 to <16 x i16>*
  %27197 = load <16 x i16>, <16 x i16>* %27196, align 2, !tbaa !399
  %27198 = getelementptr inbounds i16, i16* %27195, i64 16
  %27199 = bitcast i16* %27198 to <16 x i16>*
  %27200 = load <16 x i16>, <16 x i16>* %27199, align 2, !tbaa !399
  %27201 = add nsw i64 %27011, %27172
  %27202 = getelementptr inbounds i16, i16* %blur_x879, i64 %27201
  %27203 = bitcast i16* %27202 to <16 x i16>*
  %27204 = load <16 x i16>, <16 x i16>* %27203, align 2, !tbaa !399
  %27205 = getelementptr inbounds i16, i16* %27202, i64 16
  %27206 = bitcast i16* %27205 to <16 x i16>*
  %27207 = load <16 x i16>, <16 x i16>* %27206, align 2, !tbaa !399
  %27208 = add <16 x i16> %27183, %27176
  %27209 = add <16 x i16> %27208, %27190
  %27210 = add <16 x i16> %27209, %27197
  %27211 = add <16 x i16> %27210, %27204
  %27212 = add <16 x i16> %27186, %27179
  %27213 = add <16 x i16> %27212, %27193
  %27214 = add <16 x i16> %27213, %27200
  %27215 = add <16 x i16> %27214, %27207
  %27216 = shufflevector <16 x i16> %27211, <16 x i16> %27215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27217 = udiv <32 x i16> %27216, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27218 = shufflevector <32 x i16> %27217, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27219 = add nsw i64 %27015, %27172
  %27220 = getelementptr inbounds i16, i16* %263, i64 %27219
  %27221 = bitcast i16* %27220 to <16 x i16>*
  store <16 x i16> %27218, <16 x i16>* %27221, align 2, !tbaa !401
  %27222 = shufflevector <32 x i16> %27217, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27223 = getelementptr inbounds i16, i16* %27220, i64 16
  %27224 = bitcast i16* %27223 to <16 x i16>*
  store <16 x i16> %27222, <16 x i16>* %27224, align 2, !tbaa !401
  %27225 = add nuw nsw i32 %blur_y.s0.x.x.rebased2236, 1
  %.not2550 = icmp eq i32 %27225, %t1683898
  br i1 %.not2550, label %"end for blur_y.s0.x.x.rebased2235", label %"for blur_y.s0.x.x.rebased2234"

after_bb2246:                                     ; preds = %"end for blur_y.s0.x.x.rebased2235", %"produce blur_x2249"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2261.preheader", label %"end for blur_y.s0.x.x.rebased2262", !prof !386

"for blur_y.s0.x.x.rebased2261.preheader":        ; preds = %after_bb2246
  %27226 = sext i32 %t1688914 to i64
  %27227 = zext i32 %.pre-phi3563 to i64
  %27228 = mul nsw i64 %27227, %337
  %27229 = sub nsw i64 %27228, %298
  %27230 = zext i32 %.pre-phi3557 to i64
  %27231 = mul nsw i64 %27230, %337
  %27232 = sub nsw i64 %27231, %298
  %27233 = zext i32 %.pre-phi3569 to i64
  %27234 = mul nsw i64 %27233, %337
  %27235 = sub nsw i64 %27234, %298
  %27236 = zext i32 %.pre-phi3539 to i64
  %27237 = mul nsw i64 %27236, %337
  %27238 = sub nsw i64 %27237, %298
  %27239 = zext i32 %.pre-phi3535 to i64
  %27240 = mul nsw i64 %27239, %337
  %27241 = sub nsw i64 %27240, %298
  %27242 = sext i32 %a379 to i64
  %27243 = add nsw i64 %27242, 29
  %27244 = mul nsw i64 %27243, %334
  %27245 = add nsw i64 %27244, %338
  br label %"for blur_y.s0.x.x.rebased2261"

"produce blur_x2249":                             ; preds = %"end for blur_y.s0.x.x.rebased2235"
  %27246 = getelementptr inbounds i16, i16* %read_input822, i64 %509
  %27247 = getelementptr inbounds i16, i16* %27246, i64 -31
  %27248 = bitcast i16* %27247 to <16 x i16>*
  %27249 = load <16 x i16>, <16 x i16>* %27248, align 2, !tbaa !396
  %27250 = getelementptr inbounds i16, i16* %27246, i64 -15
  %27251 = bitcast i16* %27250 to <16 x i16>*
  %27252 = load <16 x i16>, <16 x i16>* %27251, align 2, !tbaa !396
  %27253 = getelementptr inbounds i16, i16* %27246, i64 -32
  %27254 = bitcast i16* %27253 to <16 x i16>*
  %27255 = load <16 x i16>, <16 x i16>* %27254, align 2, !tbaa !396
  %27256 = getelementptr inbounds i16, i16* %27246, i64 -16
  %27257 = bitcast i16* %27256 to <16 x i16>*
  %27258 = load <16 x i16>, <16 x i16>* %27257, align 2, !tbaa !396
  %27259 = getelementptr inbounds i16, i16* %27246, i64 -30
  %27260 = bitcast i16* %27259 to <16 x i16>*
  %27261 = load <16 x i16>, <16 x i16>* %27260, align 2, !tbaa !396
  %27262 = getelementptr inbounds i16, i16* %27246, i64 -14
  %27263 = bitcast i16* %27262 to <16 x i16>*
  %27264 = load <16 x i16>, <16 x i16>* %27263, align 2, !tbaa !396
  %27265 = getelementptr inbounds i16, i16* %27246, i64 -28
  %27266 = bitcast i16* %27265 to <16 x i16>*
  %27267 = load <16 x i16>, <16 x i16>* %27266, align 2, !tbaa !396
  %27268 = getelementptr inbounds i16, i16* %27246, i64 -12
  %27269 = bitcast i16* %27268 to <16 x i16>*
  %27270 = load <16 x i16>, <16 x i16>* %27269, align 2, !tbaa !396
  %27271 = getelementptr inbounds i16, i16* %27246, i64 -29
  %27272 = bitcast i16* %27271 to <16 x i16>*
  %27273 = load <16 x i16>, <16 x i16>* %27272, align 2, !tbaa !396
  %27274 = getelementptr inbounds i16, i16* %27246, i64 -13
  %27275 = bitcast i16* %27274 to <16 x i16>*
  %27276 = load <16 x i16>, <16 x i16>* %27275, align 2, !tbaa !396
  %27277 = add <16 x i16> %27255, %27249
  %27278 = add <16 x i16> %27277, %27261
  %27279 = add <16 x i16> %27278, %27267
  %27280 = add <16 x i16> %27279, %27273
  %27281 = add <16 x i16> %27258, %27252
  %27282 = add <16 x i16> %27281, %27264
  %27283 = add <16 x i16> %27282, %27270
  %27284 = add <16 x i16> %27283, %27276
  %27285 = shufflevector <16 x i16> %27280, <16 x i16> %27284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27286 = udiv <32 x i16> %27285, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27287 = shufflevector <32 x i16> %27286, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27288 = zext i32 %.pre-phi3539 to i64
  %27289 = mul nsw i64 %299, %27288
  %27290 = add nsw i64 %301, %27289
  %27291 = getelementptr inbounds i16, i16* %blur_x879, i64 %27290
  %27292 = getelementptr inbounds i16, i16* %27291, i64 -32
  %27293 = bitcast i16* %27292 to <16 x i16>*
  store <16 x i16> %27287, <16 x i16>* %27293, align 2, !tbaa !399
  %27294 = shufflevector <32 x i16> %27286, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27295 = getelementptr inbounds i16, i16* %27291, i64 -16
  %27296 = bitcast i16* %27295 to <16 x i16>*
  store <16 x i16> %27294, <16 x i16>* %27296, align 2, !tbaa !399
  %27297 = zext i32 %.pre-phi3563 to i64
  %27298 = mul nsw i64 %27297, %333
  %27299 = add nsw i64 %27298, %296
  %27300 = getelementptr inbounds i16, i16* %blur_x879, i64 %27299
  %27301 = getelementptr inbounds i16, i16* %27300, i64 -32
  %27302 = bitcast i16* %27301 to <16 x i16>*
  %27303 = load <16 x i16>, <16 x i16>* %27302, align 2, !tbaa !399
  %27304 = getelementptr inbounds i16, i16* %27300, i64 -16
  %27305 = bitcast i16* %27304 to <16 x i16>*
  %27306 = load <16 x i16>, <16 x i16>* %27305, align 2, !tbaa !399
  %27307 = zext i32 %.pre-phi3557 to i64
  %27308 = mul nsw i64 %27307, %333
  %27309 = add nsw i64 %27308, %296
  %27310 = getelementptr inbounds i16, i16* %blur_x879, i64 %27309
  %27311 = getelementptr inbounds i16, i16* %27310, i64 -32
  %27312 = bitcast i16* %27311 to <16 x i16>*
  %27313 = load <16 x i16>, <16 x i16>* %27312, align 2, !tbaa !399
  %27314 = getelementptr inbounds i16, i16* %27310, i64 -16
  %27315 = bitcast i16* %27314 to <16 x i16>*
  %27316 = load <16 x i16>, <16 x i16>* %27315, align 2, !tbaa !399
  %27317 = zext i32 %.pre-phi3569 to i64
  %27318 = mul nsw i64 %27317, %333
  %27319 = add nsw i64 %27318, %296
  %27320 = getelementptr inbounds i16, i16* %blur_x879, i64 %27319
  %27321 = getelementptr inbounds i16, i16* %27320, i64 -32
  %27322 = bitcast i16* %27321 to <16 x i16>*
  %27323 = load <16 x i16>, <16 x i16>* %27322, align 2, !tbaa !399
  %27324 = getelementptr inbounds i16, i16* %27320, i64 -16
  %27325 = bitcast i16* %27324 to <16 x i16>*
  %27326 = load <16 x i16>, <16 x i16>* %27325, align 2, !tbaa !399
  %27327 = mul nsw i64 %27288, %333
  %27328 = add nsw i64 %27327, %296
  %27329 = getelementptr inbounds i16, i16* %blur_x879, i64 %27328
  %27330 = getelementptr inbounds i16, i16* %27329, i64 -32
  %27331 = bitcast i16* %27330 to <16 x i16>*
  %27332 = load <16 x i16>, <16 x i16>* %27331, align 2, !tbaa !399
  %27333 = getelementptr inbounds i16, i16* %27329, i64 -16
  %27334 = bitcast i16* %27333 to <16 x i16>*
  %27335 = load <16 x i16>, <16 x i16>* %27334, align 2, !tbaa !399
  %27336 = zext i32 %.pre-phi3535 to i64
  %27337 = mul nsw i64 %27336, %333
  %27338 = add nsw i64 %27337, %296
  %27339 = getelementptr inbounds i16, i16* %blur_x879, i64 %27338
  %27340 = getelementptr inbounds i16, i16* %27339, i64 -32
  %27341 = bitcast i16* %27340 to <16 x i16>*
  %27342 = load <16 x i16>, <16 x i16>* %27341, align 2, !tbaa !399
  %27343 = getelementptr inbounds i16, i16* %27339, i64 -16
  %27344 = bitcast i16* %27343 to <16 x i16>*
  %27345 = load <16 x i16>, <16 x i16>* %27344, align 2, !tbaa !399
  %27346 = add <16 x i16> %27313, %27303
  %27347 = add <16 x i16> %27346, %27323
  %27348 = add <16 x i16> %27347, %27332
  %27349 = add <16 x i16> %27348, %27342
  %27350 = add <16 x i16> %27316, %27306
  %27351 = add <16 x i16> %27350, %27326
  %27352 = add <16 x i16> %27351, %27335
  %27353 = add <16 x i16> %27352, %27345
  %27354 = shufflevector <16 x i16> %27349, <16 x i16> %27353, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27355 = udiv <32 x i16> %27354, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27356 = shufflevector <32 x i16> %27355, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27357 = sext i32 %a379 to i64
  %27358 = add nsw i64 %27357, 29
  %27359 = mul nsw i64 %27358, %334
  %27360 = add nsw i64 %336, %27359
  %27361 = getelementptr inbounds i16, i16* %263, i64 %27360
  %27362 = getelementptr inbounds i16, i16* %27361, i64 -32
  %27363 = bitcast i16* %27362 to <16 x i16>*
  store <16 x i16> %27356, <16 x i16>* %27363, align 2, !tbaa !401
  %27364 = shufflevector <32 x i16> %27355, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27365 = getelementptr inbounds i16, i16* %27361, i64 -16
  %27366 = bitcast i16* %27365 to <16 x i16>*
  store <16 x i16> %27364, <16 x i16>* %27366, align 2, !tbaa !401
  br label %after_bb2246

"for blur_y.s0.x.x.rebased2261":                  ; preds = %"for blur_y.s0.x.x.rebased2261.preheader", %"consume blur_x2269"
  %indvars.iv3432 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2261.preheader" ], [ %indvars.iv.next3433, %"consume blur_x2269" ]
  %27367 = add nsw i64 %indvars.iv3432, %303
  %27368 = icmp slt i64 %27367, 1
  %27369 = trunc i64 %27367 to i32
  %27370 = shl nsw i32 %27369, 5
  %27371 = icmp sgt i32 %198, %27370
  %27372 = or i1 %27368, %27371
  br i1 %27372, label %"produce blur_x2267", label %"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge"

"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2261"
  %.pre3622 = shl nsw i64 %27367, 5
  br label %"consume blur_x2269"

"end for blur_y.s0.x.x.rebased2262":              ; preds = %"consume blur_x2269", %after_bb2246
  br i1 %304, label %"for blur_y.s0.x.x.rebased2277.preheader", label %"end for blur_y.s0.x.x.rebased2278", !prof !386

"for blur_y.s0.x.x.rebased2277.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2262"
  %27373 = sext i32 %t1688914 to i64
  %27374 = zext i32 %.pre-phi3563 to i64
  %27375 = mul nsw i64 %27374, %337
  %27376 = sub nsw i64 %27375, %298
  %27377 = zext i32 %.pre-phi3557 to i64
  %27378 = mul nsw i64 %27377, %337
  %27379 = sub nsw i64 %27378, %298
  %27380 = zext i32 %.pre-phi3569 to i64
  %27381 = mul nsw i64 %27380, %337
  %27382 = sub nsw i64 %27381, %298
  %27383 = zext i32 %.pre-phi3539 to i64
  %27384 = mul nsw i64 %27383, %337
  %27385 = sub nsw i64 %27384, %298
  %27386 = zext i32 %.pre-phi3535 to i64
  %27387 = mul nsw i64 %27386, %337
  %27388 = sub nsw i64 %27387, %298
  %27389 = sext i32 %a379 to i64
  %27390 = add nsw i64 %27389, 29
  %27391 = mul nsw i64 %27390, %334
  %27392 = add nsw i64 %27391, %338
  br label %"for blur_y.s0.x.x.rebased2277"

"produce blur_x2267":                             ; preds = %"for blur_y.s0.x.x.rebased2261"
  %t11762268 = add nsw i32 %511, %27370
  %27393 = sext i32 %t11762268 to i64
  %27394 = getelementptr inbounds i16, i16* %read_input822, i64 %27393
  %27395 = getelementptr inbounds i16, i16* %27394, i64 1
  %27396 = bitcast i16* %27395 to <16 x i16>*
  %27397 = load <16 x i16>, <16 x i16>* %27396, align 2, !tbaa !396
  %27398 = getelementptr inbounds i16, i16* %27394, i64 17
  %27399 = bitcast i16* %27398 to <16 x i16>*
  %27400 = load <16 x i16>, <16 x i16>* %27399, align 2, !tbaa !396
  %27401 = bitcast i16* %27394 to <16 x i16>*
  %27402 = load <16 x i16>, <16 x i16>* %27401, align 2, !tbaa !396
  %27403 = getelementptr inbounds i16, i16* %27394, i64 16
  %27404 = bitcast i16* %27403 to <16 x i16>*
  %27405 = load <16 x i16>, <16 x i16>* %27404, align 2, !tbaa !396
  %27406 = getelementptr inbounds i16, i16* %27394, i64 2
  %27407 = bitcast i16* %27406 to <16 x i16>*
  %27408 = load <16 x i16>, <16 x i16>* %27407, align 2, !tbaa !396
  %27409 = getelementptr inbounds i16, i16* %27394, i64 18
  %27410 = bitcast i16* %27409 to <16 x i16>*
  %27411 = load <16 x i16>, <16 x i16>* %27410, align 2, !tbaa !396
  %27412 = getelementptr inbounds i16, i16* %27394, i64 4
  %27413 = bitcast i16* %27412 to <16 x i16>*
  %27414 = load <16 x i16>, <16 x i16>* %27413, align 2, !tbaa !396
  %27415 = getelementptr inbounds i16, i16* %27394, i64 20
  %27416 = bitcast i16* %27415 to <16 x i16>*
  %27417 = load <16 x i16>, <16 x i16>* %27416, align 2, !tbaa !396
  %27418 = getelementptr inbounds i16, i16* %27394, i64 3
  %27419 = bitcast i16* %27418 to <16 x i16>*
  %27420 = load <16 x i16>, <16 x i16>* %27419, align 2, !tbaa !396
  %27421 = getelementptr inbounds i16, i16* %27394, i64 19
  %27422 = bitcast i16* %27421 to <16 x i16>*
  %27423 = load <16 x i16>, <16 x i16>* %27422, align 2, !tbaa !396
  %27424 = add <16 x i16> %27402, %27397
  %27425 = add <16 x i16> %27424, %27408
  %27426 = add <16 x i16> %27425, %27414
  %27427 = add <16 x i16> %27426, %27420
  %27428 = add <16 x i16> %27405, %27400
  %27429 = add <16 x i16> %27428, %27411
  %27430 = add <16 x i16> %27429, %27417
  %27431 = add <16 x i16> %27430, %27423
  %27432 = shufflevector <16 x i16> %27427, <16 x i16> %27431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27433 = udiv <32 x i16> %27432, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27434 = shufflevector <32 x i16> %27433, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27435 = shl nsw i64 %27367, 5
  %27436 = add nsw i64 %27435, %27226
  %27437 = getelementptr inbounds i16, i16* %blur_x879, i64 %27436
  %27438 = bitcast i16* %27437 to <16 x i16>*
  store <16 x i16> %27434, <16 x i16>* %27438, align 2, !tbaa !399
  %27439 = shufflevector <32 x i16> %27433, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27440 = getelementptr inbounds i16, i16* %27437, i64 16
  %27441 = bitcast i16* %27440 to <16 x i16>*
  store <16 x i16> %27439, <16 x i16>* %27441, align 2, !tbaa !399
  br label %"consume blur_x2269"

"consume blur_x2269":                             ; preds = %"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge", %"produce blur_x2267"
  %.pre-phi3623 = phi i64 [ %.pre3622, %"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge" ], [ %27435, %"produce blur_x2267" ]
  %27442 = add nsw i64 %27229, %.pre-phi3623
  %27443 = getelementptr inbounds i16, i16* %blur_x879, i64 %27442
  %27444 = bitcast i16* %27443 to <16 x i16>*
  %27445 = load <16 x i16>, <16 x i16>* %27444, align 2, !tbaa !399
  %27446 = getelementptr inbounds i16, i16* %27443, i64 16
  %27447 = bitcast i16* %27446 to <16 x i16>*
  %27448 = load <16 x i16>, <16 x i16>* %27447, align 2, !tbaa !399
  %27449 = add nsw i64 %27232, %.pre-phi3623
  %27450 = getelementptr inbounds i16, i16* %blur_x879, i64 %27449
  %27451 = bitcast i16* %27450 to <16 x i16>*
  %27452 = load <16 x i16>, <16 x i16>* %27451, align 2, !tbaa !399
  %27453 = getelementptr inbounds i16, i16* %27450, i64 16
  %27454 = bitcast i16* %27453 to <16 x i16>*
  %27455 = load <16 x i16>, <16 x i16>* %27454, align 2, !tbaa !399
  %27456 = add nsw i64 %27235, %.pre-phi3623
  %27457 = getelementptr inbounds i16, i16* %blur_x879, i64 %27456
  %27458 = bitcast i16* %27457 to <16 x i16>*
  %27459 = load <16 x i16>, <16 x i16>* %27458, align 2, !tbaa !399
  %27460 = getelementptr inbounds i16, i16* %27457, i64 16
  %27461 = bitcast i16* %27460 to <16 x i16>*
  %27462 = load <16 x i16>, <16 x i16>* %27461, align 2, !tbaa !399
  %27463 = add nsw i64 %27238, %.pre-phi3623
  %27464 = getelementptr inbounds i16, i16* %blur_x879, i64 %27463
  %27465 = bitcast i16* %27464 to <16 x i16>*
  %27466 = load <16 x i16>, <16 x i16>* %27465, align 2, !tbaa !399
  %27467 = getelementptr inbounds i16, i16* %27464, i64 16
  %27468 = bitcast i16* %27467 to <16 x i16>*
  %27469 = load <16 x i16>, <16 x i16>* %27468, align 2, !tbaa !399
  %27470 = add nsw i64 %27241, %.pre-phi3623
  %27471 = getelementptr inbounds i16, i16* %blur_x879, i64 %27470
  %27472 = bitcast i16* %27471 to <16 x i16>*
  %27473 = load <16 x i16>, <16 x i16>* %27472, align 2, !tbaa !399
  %27474 = getelementptr inbounds i16, i16* %27471, i64 16
  %27475 = bitcast i16* %27474 to <16 x i16>*
  %27476 = load <16 x i16>, <16 x i16>* %27475, align 2, !tbaa !399
  %27477 = add <16 x i16> %27452, %27445
  %27478 = add <16 x i16> %27477, %27459
  %27479 = add <16 x i16> %27478, %27466
  %27480 = add <16 x i16> %27479, %27473
  %27481 = add <16 x i16> %27455, %27448
  %27482 = add <16 x i16> %27481, %27462
  %27483 = add <16 x i16> %27482, %27469
  %27484 = add <16 x i16> %27483, %27476
  %27485 = shufflevector <16 x i16> %27480, <16 x i16> %27484, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27486 = udiv <32 x i16> %27485, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27487 = shufflevector <32 x i16> %27486, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27488 = add nsw i64 %27245, %.pre-phi3623
  %27489 = getelementptr inbounds i16, i16* %263, i64 %27488
  %27490 = bitcast i16* %27489 to <16 x i16>*
  store <16 x i16> %27487, <16 x i16>* %27490, align 2, !tbaa !401
  %27491 = shufflevector <32 x i16> %27486, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27492 = getelementptr inbounds i16, i16* %27489, i64 16
  %27493 = bitcast i16* %27492 to <16 x i16>*
  store <16 x i16> %27491, <16 x i16>* %27493, align 2, !tbaa !401
  %indvars.iv.next3433 = add nuw nsw i64 %indvars.iv3432, 1
  %.not2547 = icmp eq i64 %indvars.iv.next3433, %530
  br i1 %.not2547, label %"end for blur_y.s0.x.x.rebased2262", label %"for blur_y.s0.x.x.rebased2261"

"for blur_y.s0.x.x.rebased2277":                  ; preds = %"for blur_y.s0.x.x.rebased2277.preheader", %"consume blur_x2288"
  %blur_y.s0.x.x.rebased2279 = phi i32 [ %27602, %"consume blur_x2288" ], [ 0, %"for blur_y.s0.x.x.rebased2277.preheader" ]
  %27494 = add nsw i32 %blur_y.s0.x.x.rebased2279, %t1626814
  %a5862 = shl nsw i32 %27494, 5
  %27495 = icmp sgt i32 %t1647, %a5862
  %blur_y.s0.x.v0.base.s2280 = select i1 %27495, i32 %a5862, i32 %t1647
  %27496 = icmp slt i32 %27494, 1
  %27497 = icmp sgt i32 %198, %a5862
  %27498 = or i1 %27496, %27497
  br i1 %27498, label %"produce blur_x2285", label %"consume blur_x2288"

"end for blur_y.s0.x.x.rebased2278":              ; preds = %"consume blur_x2288", %"end for blur_y.s0.x.x.rebased2262"
  br i1 %229, label %"produce blur_x2292", label %after_bb2289

"produce blur_x2285":                             ; preds = %"for blur_y.s0.x.x.rebased2277"
  %27499 = icmp slt i32 %blur_y.s0.x.v0.base.s2280, %198
  %blur_x.s0.x.v1.base.s2286 = select i1 %27499, i32 %blur_y.s0.x.v0.base.s2280, i32 %198
  %t11812287 = add nsw i32 %511, %blur_x.s0.x.v1.base.s2286
  %27500 = sext i32 %t11812287 to i64
  %27501 = getelementptr inbounds i16, i16* %read_input822, i64 %27500
  %27502 = getelementptr inbounds i16, i16* %27501, i64 1
  %27503 = bitcast i16* %27502 to <16 x i16>*
  %27504 = load <16 x i16>, <16 x i16>* %27503, align 2, !tbaa !396
  %27505 = getelementptr inbounds i16, i16* %27501, i64 17
  %27506 = bitcast i16* %27505 to <16 x i16>*
  %27507 = load <16 x i16>, <16 x i16>* %27506, align 2, !tbaa !396
  %27508 = bitcast i16* %27501 to <16 x i16>*
  %27509 = load <16 x i16>, <16 x i16>* %27508, align 2, !tbaa !396
  %27510 = getelementptr inbounds i16, i16* %27501, i64 16
  %27511 = bitcast i16* %27510 to <16 x i16>*
  %27512 = load <16 x i16>, <16 x i16>* %27511, align 2, !tbaa !396
  %27513 = getelementptr inbounds i16, i16* %27501, i64 2
  %27514 = bitcast i16* %27513 to <16 x i16>*
  %27515 = load <16 x i16>, <16 x i16>* %27514, align 2, !tbaa !396
  %27516 = getelementptr inbounds i16, i16* %27501, i64 18
  %27517 = bitcast i16* %27516 to <16 x i16>*
  %27518 = load <16 x i16>, <16 x i16>* %27517, align 2, !tbaa !396
  %27519 = getelementptr inbounds i16, i16* %27501, i64 4
  %27520 = bitcast i16* %27519 to <16 x i16>*
  %27521 = load <16 x i16>, <16 x i16>* %27520, align 2, !tbaa !396
  %27522 = getelementptr inbounds i16, i16* %27501, i64 20
  %27523 = bitcast i16* %27522 to <16 x i16>*
  %27524 = load <16 x i16>, <16 x i16>* %27523, align 2, !tbaa !396
  %27525 = getelementptr inbounds i16, i16* %27501, i64 3
  %27526 = bitcast i16* %27525 to <16 x i16>*
  %27527 = load <16 x i16>, <16 x i16>* %27526, align 2, !tbaa !396
  %27528 = getelementptr inbounds i16, i16* %27501, i64 19
  %27529 = bitcast i16* %27528 to <16 x i16>*
  %27530 = load <16 x i16>, <16 x i16>* %27529, align 2, !tbaa !396
  %27531 = add <16 x i16> %27509, %27504
  %27532 = add <16 x i16> %27531, %27515
  %27533 = add <16 x i16> %27532, %27521
  %27534 = add <16 x i16> %27533, %27527
  %27535 = add <16 x i16> %27512, %27507
  %27536 = add <16 x i16> %27535, %27518
  %27537 = add <16 x i16> %27536, %27524
  %27538 = add <16 x i16> %27537, %27530
  %27539 = shufflevector <16 x i16> %27534, <16 x i16> %27538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27540 = udiv <32 x i16> %27539, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27541 = shufflevector <32 x i16> %27540, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27542 = sext i32 %blur_x.s0.x.v1.base.s2286 to i64
  %27543 = add nsw i64 %27542, %27373
  %27544 = getelementptr inbounds i16, i16* %blur_x879, i64 %27543
  %27545 = bitcast i16* %27544 to <16 x i16>*
  store <16 x i16> %27541, <16 x i16>* %27545, align 2, !tbaa !399
  %27546 = shufflevector <32 x i16> %27540, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27547 = getelementptr inbounds i16, i16* %27544, i64 16
  %27548 = bitcast i16* %27547 to <16 x i16>*
  store <16 x i16> %27546, <16 x i16>* %27548, align 2, !tbaa !399
  br label %"consume blur_x2288"

"consume blur_x2288":                             ; preds = %"for blur_y.s0.x.x.rebased2277", %"produce blur_x2285"
  %27549 = sext i32 %blur_y.s0.x.v0.base.s2280 to i64
  %27550 = add nsw i64 %27376, %27549
  %27551 = getelementptr inbounds i16, i16* %blur_x879, i64 %27550
  %27552 = bitcast i16* %27551 to <16 x i16>*
  %27553 = load <16 x i16>, <16 x i16>* %27552, align 2, !tbaa !399
  %27554 = getelementptr inbounds i16, i16* %27551, i64 16
  %27555 = bitcast i16* %27554 to <16 x i16>*
  %27556 = load <16 x i16>, <16 x i16>* %27555, align 2, !tbaa !399
  %27557 = add nsw i64 %27379, %27549
  %27558 = getelementptr inbounds i16, i16* %blur_x879, i64 %27557
  %27559 = bitcast i16* %27558 to <16 x i16>*
  %27560 = load <16 x i16>, <16 x i16>* %27559, align 2, !tbaa !399
  %27561 = getelementptr inbounds i16, i16* %27558, i64 16
  %27562 = bitcast i16* %27561 to <16 x i16>*
  %27563 = load <16 x i16>, <16 x i16>* %27562, align 2, !tbaa !399
  %27564 = add nsw i64 %27382, %27549
  %27565 = getelementptr inbounds i16, i16* %blur_x879, i64 %27564
  %27566 = bitcast i16* %27565 to <16 x i16>*
  %27567 = load <16 x i16>, <16 x i16>* %27566, align 2, !tbaa !399
  %27568 = getelementptr inbounds i16, i16* %27565, i64 16
  %27569 = bitcast i16* %27568 to <16 x i16>*
  %27570 = load <16 x i16>, <16 x i16>* %27569, align 2, !tbaa !399
  %27571 = add nsw i64 %27385, %27549
  %27572 = getelementptr inbounds i16, i16* %blur_x879, i64 %27571
  %27573 = bitcast i16* %27572 to <16 x i16>*
  %27574 = load <16 x i16>, <16 x i16>* %27573, align 2, !tbaa !399
  %27575 = getelementptr inbounds i16, i16* %27572, i64 16
  %27576 = bitcast i16* %27575 to <16 x i16>*
  %27577 = load <16 x i16>, <16 x i16>* %27576, align 2, !tbaa !399
  %27578 = add nsw i64 %27388, %27549
  %27579 = getelementptr inbounds i16, i16* %blur_x879, i64 %27578
  %27580 = bitcast i16* %27579 to <16 x i16>*
  %27581 = load <16 x i16>, <16 x i16>* %27580, align 2, !tbaa !399
  %27582 = getelementptr inbounds i16, i16* %27579, i64 16
  %27583 = bitcast i16* %27582 to <16 x i16>*
  %27584 = load <16 x i16>, <16 x i16>* %27583, align 2, !tbaa !399
  %27585 = add <16 x i16> %27560, %27553
  %27586 = add <16 x i16> %27585, %27567
  %27587 = add <16 x i16> %27586, %27574
  %27588 = add <16 x i16> %27587, %27581
  %27589 = add <16 x i16> %27563, %27556
  %27590 = add <16 x i16> %27589, %27570
  %27591 = add <16 x i16> %27590, %27577
  %27592 = add <16 x i16> %27591, %27584
  %27593 = shufflevector <16 x i16> %27588, <16 x i16> %27592, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27594 = udiv <32 x i16> %27593, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27595 = shufflevector <32 x i16> %27594, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27596 = add nsw i64 %27392, %27549
  %27597 = getelementptr inbounds i16, i16* %263, i64 %27596
  %27598 = bitcast i16* %27597 to <16 x i16>*
  store <16 x i16> %27595, <16 x i16>* %27598, align 2, !tbaa !401
  %27599 = shufflevector <32 x i16> %27594, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27600 = getelementptr inbounds i16, i16* %27597, i64 16
  %27601 = bitcast i16* %27600 to <16 x i16>*
  store <16 x i16> %27599, <16 x i16>* %27601, align 2, !tbaa !401
  %27602 = add nuw nsw i32 %blur_y.s0.x.x.rebased2279, 1
  %.not2546 = icmp eq i32 %27602, %t1683898
  br i1 %.not2546, label %"end for blur_y.s0.x.x.rebased2278", label %"for blur_y.s0.x.x.rebased2277"

after_bb2289:                                     ; preds = %"end for blur_y.s0.x.x.rebased2278", %"produce blur_x2292"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2304.preheader", label %"end for blur_y.s0.x.x.rebased2305", !prof !386

"for blur_y.s0.x.x.rebased2304.preheader":        ; preds = %after_bb2289
  %27603 = sext i32 %t1694944 to i64
  %27604 = zext i32 %.pre-phi3569 to i64
  %27605 = mul nsw i64 %27604, %337
  %27606 = sub nsw i64 %27605, %298
  %27607 = zext i32 %.pre-phi3563 to i64
  %27608 = mul nsw i64 %27607, %337
  %27609 = sub nsw i64 %27608, %298
  %27610 = zext i32 %.pre-phi3535 to i64
  %27611 = mul nsw i64 %27610, %337
  %27612 = sub nsw i64 %27611, %298
  %27613 = zext i32 %.pre-phi3543 to i64
  %27614 = mul nsw i64 %27613, %337
  %27615 = sub nsw i64 %27614, %298
  %27616 = zext i32 %.pre-phi3539 to i64
  %27617 = mul nsw i64 %27616, %337
  %27618 = sub nsw i64 %27617, %298
  %27619 = sext i32 %a379 to i64
  %27620 = add nsw i64 %27619, 30
  %27621 = mul nsw i64 %27620, %334
  %27622 = add nsw i64 %27621, %338
  br label %"for blur_y.s0.x.x.rebased2304"

"produce blur_x2292":                             ; preds = %"end for blur_y.s0.x.x.rebased2278"
  %27623 = getelementptr inbounds i16, i16* %read_input822, i64 %515
  %27624 = getelementptr inbounds i16, i16* %27623, i64 -31
  %27625 = bitcast i16* %27624 to <16 x i16>*
  %27626 = load <16 x i16>, <16 x i16>* %27625, align 2, !tbaa !396
  %27627 = getelementptr inbounds i16, i16* %27623, i64 -15
  %27628 = bitcast i16* %27627 to <16 x i16>*
  %27629 = load <16 x i16>, <16 x i16>* %27628, align 2, !tbaa !396
  %27630 = getelementptr inbounds i16, i16* %27623, i64 -32
  %27631 = bitcast i16* %27630 to <16 x i16>*
  %27632 = load <16 x i16>, <16 x i16>* %27631, align 2, !tbaa !396
  %27633 = getelementptr inbounds i16, i16* %27623, i64 -16
  %27634 = bitcast i16* %27633 to <16 x i16>*
  %27635 = load <16 x i16>, <16 x i16>* %27634, align 2, !tbaa !396
  %27636 = getelementptr inbounds i16, i16* %27623, i64 -30
  %27637 = bitcast i16* %27636 to <16 x i16>*
  %27638 = load <16 x i16>, <16 x i16>* %27637, align 2, !tbaa !396
  %27639 = getelementptr inbounds i16, i16* %27623, i64 -14
  %27640 = bitcast i16* %27639 to <16 x i16>*
  %27641 = load <16 x i16>, <16 x i16>* %27640, align 2, !tbaa !396
  %27642 = getelementptr inbounds i16, i16* %27623, i64 -28
  %27643 = bitcast i16* %27642 to <16 x i16>*
  %27644 = load <16 x i16>, <16 x i16>* %27643, align 2, !tbaa !396
  %27645 = getelementptr inbounds i16, i16* %27623, i64 -12
  %27646 = bitcast i16* %27645 to <16 x i16>*
  %27647 = load <16 x i16>, <16 x i16>* %27646, align 2, !tbaa !396
  %27648 = getelementptr inbounds i16, i16* %27623, i64 -29
  %27649 = bitcast i16* %27648 to <16 x i16>*
  %27650 = load <16 x i16>, <16 x i16>* %27649, align 2, !tbaa !396
  %27651 = getelementptr inbounds i16, i16* %27623, i64 -13
  %27652 = bitcast i16* %27651 to <16 x i16>*
  %27653 = load <16 x i16>, <16 x i16>* %27652, align 2, !tbaa !396
  %27654 = add <16 x i16> %27632, %27626
  %27655 = add <16 x i16> %27654, %27638
  %27656 = add <16 x i16> %27655, %27644
  %27657 = add <16 x i16> %27656, %27650
  %27658 = add <16 x i16> %27635, %27629
  %27659 = add <16 x i16> %27658, %27641
  %27660 = add <16 x i16> %27659, %27647
  %27661 = add <16 x i16> %27660, %27653
  %27662 = shufflevector <16 x i16> %27657, <16 x i16> %27661, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27663 = udiv <32 x i16> %27662, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27664 = shufflevector <32 x i16> %27663, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27665 = zext i32 %.pre-phi3543 to i64
  %27666 = mul nsw i64 %299, %27665
  %27667 = add nsw i64 %301, %27666
  %27668 = getelementptr inbounds i16, i16* %blur_x879, i64 %27667
  %27669 = getelementptr inbounds i16, i16* %27668, i64 -32
  %27670 = bitcast i16* %27669 to <16 x i16>*
  store <16 x i16> %27664, <16 x i16>* %27670, align 2, !tbaa !399
  %27671 = shufflevector <32 x i16> %27663, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27672 = getelementptr inbounds i16, i16* %27668, i64 -16
  %27673 = bitcast i16* %27672 to <16 x i16>*
  store <16 x i16> %27671, <16 x i16>* %27673, align 2, !tbaa !399
  %27674 = zext i32 %.pre-phi3569 to i64
  %27675 = mul nsw i64 %27674, %333
  %27676 = add nsw i64 %27675, %296
  %27677 = getelementptr inbounds i16, i16* %blur_x879, i64 %27676
  %27678 = getelementptr inbounds i16, i16* %27677, i64 -32
  %27679 = bitcast i16* %27678 to <16 x i16>*
  %27680 = load <16 x i16>, <16 x i16>* %27679, align 2, !tbaa !399
  %27681 = getelementptr inbounds i16, i16* %27677, i64 -16
  %27682 = bitcast i16* %27681 to <16 x i16>*
  %27683 = load <16 x i16>, <16 x i16>* %27682, align 2, !tbaa !399
  %27684 = zext i32 %.pre-phi3563 to i64
  %27685 = mul nsw i64 %27684, %333
  %27686 = add nsw i64 %27685, %296
  %27687 = getelementptr inbounds i16, i16* %blur_x879, i64 %27686
  %27688 = getelementptr inbounds i16, i16* %27687, i64 -32
  %27689 = bitcast i16* %27688 to <16 x i16>*
  %27690 = load <16 x i16>, <16 x i16>* %27689, align 2, !tbaa !399
  %27691 = getelementptr inbounds i16, i16* %27687, i64 -16
  %27692 = bitcast i16* %27691 to <16 x i16>*
  %27693 = load <16 x i16>, <16 x i16>* %27692, align 2, !tbaa !399
  %27694 = zext i32 %.pre-phi3535 to i64
  %27695 = mul nsw i64 %27694, %333
  %27696 = add nsw i64 %27695, %296
  %27697 = getelementptr inbounds i16, i16* %blur_x879, i64 %27696
  %27698 = getelementptr inbounds i16, i16* %27697, i64 -32
  %27699 = bitcast i16* %27698 to <16 x i16>*
  %27700 = load <16 x i16>, <16 x i16>* %27699, align 2, !tbaa !399
  %27701 = getelementptr inbounds i16, i16* %27697, i64 -16
  %27702 = bitcast i16* %27701 to <16 x i16>*
  %27703 = load <16 x i16>, <16 x i16>* %27702, align 2, !tbaa !399
  %27704 = mul nsw i64 %27665, %333
  %27705 = add nsw i64 %27704, %296
  %27706 = getelementptr inbounds i16, i16* %blur_x879, i64 %27705
  %27707 = getelementptr inbounds i16, i16* %27706, i64 -32
  %27708 = bitcast i16* %27707 to <16 x i16>*
  %27709 = load <16 x i16>, <16 x i16>* %27708, align 2, !tbaa !399
  %27710 = getelementptr inbounds i16, i16* %27706, i64 -16
  %27711 = bitcast i16* %27710 to <16 x i16>*
  %27712 = load <16 x i16>, <16 x i16>* %27711, align 2, !tbaa !399
  %27713 = zext i32 %.pre-phi3539 to i64
  %27714 = mul nsw i64 %27713, %333
  %27715 = add nsw i64 %27714, %296
  %27716 = getelementptr inbounds i16, i16* %blur_x879, i64 %27715
  %27717 = getelementptr inbounds i16, i16* %27716, i64 -32
  %27718 = bitcast i16* %27717 to <16 x i16>*
  %27719 = load <16 x i16>, <16 x i16>* %27718, align 2, !tbaa !399
  %27720 = getelementptr inbounds i16, i16* %27716, i64 -16
  %27721 = bitcast i16* %27720 to <16 x i16>*
  %27722 = load <16 x i16>, <16 x i16>* %27721, align 2, !tbaa !399
  %27723 = add <16 x i16> %27690, %27680
  %27724 = add <16 x i16> %27723, %27700
  %27725 = add <16 x i16> %27724, %27709
  %27726 = add <16 x i16> %27725, %27719
  %27727 = add <16 x i16> %27693, %27683
  %27728 = add <16 x i16> %27727, %27703
  %27729 = add <16 x i16> %27728, %27712
  %27730 = add <16 x i16> %27729, %27722
  %27731 = shufflevector <16 x i16> %27726, <16 x i16> %27730, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27732 = udiv <32 x i16> %27731, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27733 = shufflevector <32 x i16> %27732, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27734 = sext i32 %a379 to i64
  %27735 = add nsw i64 %27734, 30
  %27736 = mul nsw i64 %27735, %334
  %27737 = add nsw i64 %336, %27736
  %27738 = getelementptr inbounds i16, i16* %263, i64 %27737
  %27739 = getelementptr inbounds i16, i16* %27738, i64 -32
  %27740 = bitcast i16* %27739 to <16 x i16>*
  store <16 x i16> %27733, <16 x i16>* %27740, align 2, !tbaa !401
  %27741 = shufflevector <32 x i16> %27732, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27742 = getelementptr inbounds i16, i16* %27738, i64 -16
  %27743 = bitcast i16* %27742 to <16 x i16>*
  store <16 x i16> %27741, <16 x i16>* %27743, align 2, !tbaa !401
  br label %after_bb2289

"for blur_y.s0.x.x.rebased2304":                  ; preds = %"for blur_y.s0.x.x.rebased2304.preheader", %"consume blur_x2312"
  %indvars.iv3434 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2304.preheader" ], [ %indvars.iv.next3435, %"consume blur_x2312" ]
  %27744 = add nsw i64 %indvars.iv3434, %303
  %27745 = icmp slt i64 %27744, 1
  %27746 = trunc i64 %27744 to i32
  %27747 = shl nsw i32 %27746, 5
  %27748 = icmp sgt i32 %198, %27747
  %27749 = or i1 %27745, %27748
  br i1 %27749, label %"produce blur_x2310", label %"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge"

"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2304"
  %.pre3624 = shl nsw i64 %27744, 5
  br label %"consume blur_x2312"

"end for blur_y.s0.x.x.rebased2305":              ; preds = %"consume blur_x2312", %after_bb2289
  br i1 %304, label %"for blur_y.s0.x.x.rebased2320.preheader", label %"end for blur_y.s0.x.x.rebased2321", !prof !386

"for blur_y.s0.x.x.rebased2320.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2305"
  %27750 = sext i32 %t1694944 to i64
  %27751 = zext i32 %.pre-phi3569 to i64
  %27752 = mul nsw i64 %27751, %337
  %27753 = sub nsw i64 %27752, %298
  %27754 = zext i32 %.pre-phi3563 to i64
  %27755 = mul nsw i64 %27754, %337
  %27756 = sub nsw i64 %27755, %298
  %27757 = zext i32 %.pre-phi3535 to i64
  %27758 = mul nsw i64 %27757, %337
  %27759 = sub nsw i64 %27758, %298
  %27760 = zext i32 %.pre-phi3543 to i64
  %27761 = mul nsw i64 %27760, %337
  %27762 = sub nsw i64 %27761, %298
  %27763 = zext i32 %.pre-phi3539 to i64
  %27764 = mul nsw i64 %27763, %337
  %27765 = sub nsw i64 %27764, %298
  %27766 = sext i32 %a379 to i64
  %27767 = add nsw i64 %27766, 30
  %27768 = mul nsw i64 %27767, %334
  %27769 = add nsw i64 %27768, %338
  br label %"for blur_y.s0.x.x.rebased2320"

"produce blur_x2310":                             ; preds = %"for blur_y.s0.x.x.rebased2304"
  %t11922311 = add nsw i32 %517, %27747
  %27770 = sext i32 %t11922311 to i64
  %27771 = getelementptr inbounds i16, i16* %read_input822, i64 %27770
  %27772 = getelementptr inbounds i16, i16* %27771, i64 1
  %27773 = bitcast i16* %27772 to <16 x i16>*
  %27774 = load <16 x i16>, <16 x i16>* %27773, align 2, !tbaa !396
  %27775 = getelementptr inbounds i16, i16* %27771, i64 17
  %27776 = bitcast i16* %27775 to <16 x i16>*
  %27777 = load <16 x i16>, <16 x i16>* %27776, align 2, !tbaa !396
  %27778 = bitcast i16* %27771 to <16 x i16>*
  %27779 = load <16 x i16>, <16 x i16>* %27778, align 2, !tbaa !396
  %27780 = getelementptr inbounds i16, i16* %27771, i64 16
  %27781 = bitcast i16* %27780 to <16 x i16>*
  %27782 = load <16 x i16>, <16 x i16>* %27781, align 2, !tbaa !396
  %27783 = getelementptr inbounds i16, i16* %27771, i64 2
  %27784 = bitcast i16* %27783 to <16 x i16>*
  %27785 = load <16 x i16>, <16 x i16>* %27784, align 2, !tbaa !396
  %27786 = getelementptr inbounds i16, i16* %27771, i64 18
  %27787 = bitcast i16* %27786 to <16 x i16>*
  %27788 = load <16 x i16>, <16 x i16>* %27787, align 2, !tbaa !396
  %27789 = getelementptr inbounds i16, i16* %27771, i64 4
  %27790 = bitcast i16* %27789 to <16 x i16>*
  %27791 = load <16 x i16>, <16 x i16>* %27790, align 2, !tbaa !396
  %27792 = getelementptr inbounds i16, i16* %27771, i64 20
  %27793 = bitcast i16* %27792 to <16 x i16>*
  %27794 = load <16 x i16>, <16 x i16>* %27793, align 2, !tbaa !396
  %27795 = getelementptr inbounds i16, i16* %27771, i64 3
  %27796 = bitcast i16* %27795 to <16 x i16>*
  %27797 = load <16 x i16>, <16 x i16>* %27796, align 2, !tbaa !396
  %27798 = getelementptr inbounds i16, i16* %27771, i64 19
  %27799 = bitcast i16* %27798 to <16 x i16>*
  %27800 = load <16 x i16>, <16 x i16>* %27799, align 2, !tbaa !396
  %27801 = add <16 x i16> %27779, %27774
  %27802 = add <16 x i16> %27801, %27785
  %27803 = add <16 x i16> %27802, %27791
  %27804 = add <16 x i16> %27803, %27797
  %27805 = add <16 x i16> %27782, %27777
  %27806 = add <16 x i16> %27805, %27788
  %27807 = add <16 x i16> %27806, %27794
  %27808 = add <16 x i16> %27807, %27800
  %27809 = shufflevector <16 x i16> %27804, <16 x i16> %27808, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27810 = udiv <32 x i16> %27809, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27811 = shufflevector <32 x i16> %27810, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27812 = shl nsw i64 %27744, 5
  %27813 = add nsw i64 %27812, %27603
  %27814 = getelementptr inbounds i16, i16* %blur_x879, i64 %27813
  %27815 = bitcast i16* %27814 to <16 x i16>*
  store <16 x i16> %27811, <16 x i16>* %27815, align 2, !tbaa !399
  %27816 = shufflevector <32 x i16> %27810, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27817 = getelementptr inbounds i16, i16* %27814, i64 16
  %27818 = bitcast i16* %27817 to <16 x i16>*
  store <16 x i16> %27816, <16 x i16>* %27818, align 2, !tbaa !399
  br label %"consume blur_x2312"

"consume blur_x2312":                             ; preds = %"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge", %"produce blur_x2310"
  %.pre-phi3625 = phi i64 [ %.pre3624, %"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge" ], [ %27812, %"produce blur_x2310" ]
  %27819 = add nsw i64 %27606, %.pre-phi3625
  %27820 = getelementptr inbounds i16, i16* %blur_x879, i64 %27819
  %27821 = bitcast i16* %27820 to <16 x i16>*
  %27822 = load <16 x i16>, <16 x i16>* %27821, align 2, !tbaa !399
  %27823 = getelementptr inbounds i16, i16* %27820, i64 16
  %27824 = bitcast i16* %27823 to <16 x i16>*
  %27825 = load <16 x i16>, <16 x i16>* %27824, align 2, !tbaa !399
  %27826 = add nsw i64 %27609, %.pre-phi3625
  %27827 = getelementptr inbounds i16, i16* %blur_x879, i64 %27826
  %27828 = bitcast i16* %27827 to <16 x i16>*
  %27829 = load <16 x i16>, <16 x i16>* %27828, align 2, !tbaa !399
  %27830 = getelementptr inbounds i16, i16* %27827, i64 16
  %27831 = bitcast i16* %27830 to <16 x i16>*
  %27832 = load <16 x i16>, <16 x i16>* %27831, align 2, !tbaa !399
  %27833 = add nsw i64 %27612, %.pre-phi3625
  %27834 = getelementptr inbounds i16, i16* %blur_x879, i64 %27833
  %27835 = bitcast i16* %27834 to <16 x i16>*
  %27836 = load <16 x i16>, <16 x i16>* %27835, align 2, !tbaa !399
  %27837 = getelementptr inbounds i16, i16* %27834, i64 16
  %27838 = bitcast i16* %27837 to <16 x i16>*
  %27839 = load <16 x i16>, <16 x i16>* %27838, align 2, !tbaa !399
  %27840 = add nsw i64 %27615, %.pre-phi3625
  %27841 = getelementptr inbounds i16, i16* %blur_x879, i64 %27840
  %27842 = bitcast i16* %27841 to <16 x i16>*
  %27843 = load <16 x i16>, <16 x i16>* %27842, align 2, !tbaa !399
  %27844 = getelementptr inbounds i16, i16* %27841, i64 16
  %27845 = bitcast i16* %27844 to <16 x i16>*
  %27846 = load <16 x i16>, <16 x i16>* %27845, align 2, !tbaa !399
  %27847 = add nsw i64 %27618, %.pre-phi3625
  %27848 = getelementptr inbounds i16, i16* %blur_x879, i64 %27847
  %27849 = bitcast i16* %27848 to <16 x i16>*
  %27850 = load <16 x i16>, <16 x i16>* %27849, align 2, !tbaa !399
  %27851 = getelementptr inbounds i16, i16* %27848, i64 16
  %27852 = bitcast i16* %27851 to <16 x i16>*
  %27853 = load <16 x i16>, <16 x i16>* %27852, align 2, !tbaa !399
  %27854 = add <16 x i16> %27829, %27822
  %27855 = add <16 x i16> %27854, %27836
  %27856 = add <16 x i16> %27855, %27843
  %27857 = add <16 x i16> %27856, %27850
  %27858 = add <16 x i16> %27832, %27825
  %27859 = add <16 x i16> %27858, %27839
  %27860 = add <16 x i16> %27859, %27846
  %27861 = add <16 x i16> %27860, %27853
  %27862 = shufflevector <16 x i16> %27857, <16 x i16> %27861, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27863 = udiv <32 x i16> %27862, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27864 = shufflevector <32 x i16> %27863, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27865 = add nsw i64 %27622, %.pre-phi3625
  %27866 = getelementptr inbounds i16, i16* %263, i64 %27865
  %27867 = bitcast i16* %27866 to <16 x i16>*
  store <16 x i16> %27864, <16 x i16>* %27867, align 2, !tbaa !401
  %27868 = shufflevector <32 x i16> %27863, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27869 = getelementptr inbounds i16, i16* %27866, i64 16
  %27870 = bitcast i16* %27869 to <16 x i16>*
  store <16 x i16> %27868, <16 x i16>* %27870, align 2, !tbaa !401
  %indvars.iv.next3435 = add nuw nsw i64 %indvars.iv3434, 1
  %.not2543 = icmp eq i64 %indvars.iv.next3435, %530
  br i1 %.not2543, label %"end for blur_y.s0.x.x.rebased2305", label %"for blur_y.s0.x.x.rebased2304"

"for blur_y.s0.x.x.rebased2320":                  ; preds = %"for blur_y.s0.x.x.rebased2320.preheader", %"consume blur_x2331"
  %blur_y.s0.x.x.rebased2322 = phi i32 [ %27979, %"consume blur_x2331" ], [ 0, %"for blur_y.s0.x.x.rebased2320.preheader" ]
  %27871 = add nsw i32 %blur_y.s0.x.x.rebased2322, %t1626814
  %a6019 = shl nsw i32 %27871, 5
  %27872 = icmp sgt i32 %t1647, %a6019
  %blur_y.s0.x.v0.base.s2323 = select i1 %27872, i32 %a6019, i32 %t1647
  %27873 = icmp slt i32 %27871, 1
  %27874 = icmp sgt i32 %198, %a6019
  %27875 = or i1 %27873, %27874
  br i1 %27875, label %"produce blur_x2328", label %"consume blur_x2331"

"end for blur_y.s0.x.x.rebased2321":              ; preds = %"consume blur_x2331", %"end for blur_y.s0.x.x.rebased2305"
  br i1 %229, label %"produce blur_x2335", label %after_bb2332

"produce blur_x2328":                             ; preds = %"for blur_y.s0.x.x.rebased2320"
  %27876 = icmp slt i32 %blur_y.s0.x.v0.base.s2323, %198
  %blur_x.s0.x.v1.base.s2329 = select i1 %27876, i32 %blur_y.s0.x.v0.base.s2323, i32 %198
  %t11972330 = add nsw i32 %517, %blur_x.s0.x.v1.base.s2329
  %27877 = sext i32 %t11972330 to i64
  %27878 = getelementptr inbounds i16, i16* %read_input822, i64 %27877
  %27879 = getelementptr inbounds i16, i16* %27878, i64 1
  %27880 = bitcast i16* %27879 to <16 x i16>*
  %27881 = load <16 x i16>, <16 x i16>* %27880, align 2, !tbaa !396
  %27882 = getelementptr inbounds i16, i16* %27878, i64 17
  %27883 = bitcast i16* %27882 to <16 x i16>*
  %27884 = load <16 x i16>, <16 x i16>* %27883, align 2, !tbaa !396
  %27885 = bitcast i16* %27878 to <16 x i16>*
  %27886 = load <16 x i16>, <16 x i16>* %27885, align 2, !tbaa !396
  %27887 = getelementptr inbounds i16, i16* %27878, i64 16
  %27888 = bitcast i16* %27887 to <16 x i16>*
  %27889 = load <16 x i16>, <16 x i16>* %27888, align 2, !tbaa !396
  %27890 = getelementptr inbounds i16, i16* %27878, i64 2
  %27891 = bitcast i16* %27890 to <16 x i16>*
  %27892 = load <16 x i16>, <16 x i16>* %27891, align 2, !tbaa !396
  %27893 = getelementptr inbounds i16, i16* %27878, i64 18
  %27894 = bitcast i16* %27893 to <16 x i16>*
  %27895 = load <16 x i16>, <16 x i16>* %27894, align 2, !tbaa !396
  %27896 = getelementptr inbounds i16, i16* %27878, i64 4
  %27897 = bitcast i16* %27896 to <16 x i16>*
  %27898 = load <16 x i16>, <16 x i16>* %27897, align 2, !tbaa !396
  %27899 = getelementptr inbounds i16, i16* %27878, i64 20
  %27900 = bitcast i16* %27899 to <16 x i16>*
  %27901 = load <16 x i16>, <16 x i16>* %27900, align 2, !tbaa !396
  %27902 = getelementptr inbounds i16, i16* %27878, i64 3
  %27903 = bitcast i16* %27902 to <16 x i16>*
  %27904 = load <16 x i16>, <16 x i16>* %27903, align 2, !tbaa !396
  %27905 = getelementptr inbounds i16, i16* %27878, i64 19
  %27906 = bitcast i16* %27905 to <16 x i16>*
  %27907 = load <16 x i16>, <16 x i16>* %27906, align 2, !tbaa !396
  %27908 = add <16 x i16> %27886, %27881
  %27909 = add <16 x i16> %27908, %27892
  %27910 = add <16 x i16> %27909, %27898
  %27911 = add <16 x i16> %27910, %27904
  %27912 = add <16 x i16> %27889, %27884
  %27913 = add <16 x i16> %27912, %27895
  %27914 = add <16 x i16> %27913, %27901
  %27915 = add <16 x i16> %27914, %27907
  %27916 = shufflevector <16 x i16> %27911, <16 x i16> %27915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27917 = udiv <32 x i16> %27916, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27918 = shufflevector <32 x i16> %27917, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27919 = sext i32 %blur_x.s0.x.v1.base.s2329 to i64
  %27920 = add nsw i64 %27919, %27750
  %27921 = getelementptr inbounds i16, i16* %blur_x879, i64 %27920
  %27922 = bitcast i16* %27921 to <16 x i16>*
  store <16 x i16> %27918, <16 x i16>* %27922, align 2, !tbaa !399
  %27923 = shufflevector <32 x i16> %27917, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27924 = getelementptr inbounds i16, i16* %27921, i64 16
  %27925 = bitcast i16* %27924 to <16 x i16>*
  store <16 x i16> %27923, <16 x i16>* %27925, align 2, !tbaa !399
  br label %"consume blur_x2331"

"consume blur_x2331":                             ; preds = %"for blur_y.s0.x.x.rebased2320", %"produce blur_x2328"
  %27926 = sext i32 %blur_y.s0.x.v0.base.s2323 to i64
  %27927 = add nsw i64 %27753, %27926
  %27928 = getelementptr inbounds i16, i16* %blur_x879, i64 %27927
  %27929 = bitcast i16* %27928 to <16 x i16>*
  %27930 = load <16 x i16>, <16 x i16>* %27929, align 2, !tbaa !399
  %27931 = getelementptr inbounds i16, i16* %27928, i64 16
  %27932 = bitcast i16* %27931 to <16 x i16>*
  %27933 = load <16 x i16>, <16 x i16>* %27932, align 2, !tbaa !399
  %27934 = add nsw i64 %27756, %27926
  %27935 = getelementptr inbounds i16, i16* %blur_x879, i64 %27934
  %27936 = bitcast i16* %27935 to <16 x i16>*
  %27937 = load <16 x i16>, <16 x i16>* %27936, align 2, !tbaa !399
  %27938 = getelementptr inbounds i16, i16* %27935, i64 16
  %27939 = bitcast i16* %27938 to <16 x i16>*
  %27940 = load <16 x i16>, <16 x i16>* %27939, align 2, !tbaa !399
  %27941 = add nsw i64 %27759, %27926
  %27942 = getelementptr inbounds i16, i16* %blur_x879, i64 %27941
  %27943 = bitcast i16* %27942 to <16 x i16>*
  %27944 = load <16 x i16>, <16 x i16>* %27943, align 2, !tbaa !399
  %27945 = getelementptr inbounds i16, i16* %27942, i64 16
  %27946 = bitcast i16* %27945 to <16 x i16>*
  %27947 = load <16 x i16>, <16 x i16>* %27946, align 2, !tbaa !399
  %27948 = add nsw i64 %27762, %27926
  %27949 = getelementptr inbounds i16, i16* %blur_x879, i64 %27948
  %27950 = bitcast i16* %27949 to <16 x i16>*
  %27951 = load <16 x i16>, <16 x i16>* %27950, align 2, !tbaa !399
  %27952 = getelementptr inbounds i16, i16* %27949, i64 16
  %27953 = bitcast i16* %27952 to <16 x i16>*
  %27954 = load <16 x i16>, <16 x i16>* %27953, align 2, !tbaa !399
  %27955 = add nsw i64 %27765, %27926
  %27956 = getelementptr inbounds i16, i16* %blur_x879, i64 %27955
  %27957 = bitcast i16* %27956 to <16 x i16>*
  %27958 = load <16 x i16>, <16 x i16>* %27957, align 2, !tbaa !399
  %27959 = getelementptr inbounds i16, i16* %27956, i64 16
  %27960 = bitcast i16* %27959 to <16 x i16>*
  %27961 = load <16 x i16>, <16 x i16>* %27960, align 2, !tbaa !399
  %27962 = add <16 x i16> %27937, %27930
  %27963 = add <16 x i16> %27962, %27944
  %27964 = add <16 x i16> %27963, %27951
  %27965 = add <16 x i16> %27964, %27958
  %27966 = add <16 x i16> %27940, %27933
  %27967 = add <16 x i16> %27966, %27947
  %27968 = add <16 x i16> %27967, %27954
  %27969 = add <16 x i16> %27968, %27961
  %27970 = shufflevector <16 x i16> %27965, <16 x i16> %27969, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27971 = udiv <32 x i16> %27970, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27972 = shufflevector <32 x i16> %27971, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27973 = add nsw i64 %27769, %27926
  %27974 = getelementptr inbounds i16, i16* %263, i64 %27973
  %27975 = bitcast i16* %27974 to <16 x i16>*
  store <16 x i16> %27972, <16 x i16>* %27975, align 2, !tbaa !401
  %27976 = shufflevector <32 x i16> %27971, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27977 = getelementptr inbounds i16, i16* %27974, i64 16
  %27978 = bitcast i16* %27977 to <16 x i16>*
  store <16 x i16> %27976, <16 x i16>* %27978, align 2, !tbaa !401
  %27979 = add nuw nsw i32 %blur_y.s0.x.x.rebased2322, 1
  %.not2542 = icmp eq i32 %27979, %t1683898
  br i1 %.not2542, label %"end for blur_y.s0.x.x.rebased2321", label %"for blur_y.s0.x.x.rebased2320"

after_bb2332:                                     ; preds = %"end for blur_y.s0.x.x.rebased2321", %"produce blur_x2335"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2347.preheader", label %"end for blur_y.s0.x.x.rebased2348", !prof !386

"for blur_y.s0.x.x.rebased2347.preheader":        ; preds = %after_bb2332
  %27980 = sext i32 %t1700974 to i64
  %27981 = zext i32 %.pre-phi3535 to i64
  %27982 = mul nsw i64 %27981, %337
  %27983 = sub nsw i64 %27982, %298
  %27984 = zext i32 %.pre-phi3569 to i64
  %27985 = mul nsw i64 %27984, %337
  %27986 = sub nsw i64 %27985, %298
  %27987 = zext i32 %.pre-phi3539 to i64
  %27988 = mul nsw i64 %27987, %337
  %27989 = sub nsw i64 %27988, %298
  %27990 = zext i32 %.pre-phi3547 to i64
  %27991 = mul nsw i64 %27990, %337
  %27992 = sub nsw i64 %27991, %298
  %27993 = zext i32 %.pre-phi3543 to i64
  %27994 = mul nsw i64 %27993, %337
  %27995 = sub nsw i64 %27994, %298
  %27996 = sext i32 %a379 to i64
  %27997 = add nsw i64 %27996, 31
  %27998 = mul nsw i64 %27997, %334
  %27999 = add nsw i64 %27998, %338
  br label %"for blur_y.s0.x.x.rebased2347"

"produce blur_x2335":                             ; preds = %"end for blur_y.s0.x.x.rebased2321"
  %28000 = getelementptr inbounds i16, i16* %read_input822, i64 %521
  %28001 = getelementptr inbounds i16, i16* %28000, i64 -31
  %28002 = bitcast i16* %28001 to <16 x i16>*
  %28003 = load <16 x i16>, <16 x i16>* %28002, align 2, !tbaa !396
  %28004 = getelementptr inbounds i16, i16* %28000, i64 -15
  %28005 = bitcast i16* %28004 to <16 x i16>*
  %28006 = load <16 x i16>, <16 x i16>* %28005, align 2, !tbaa !396
  %28007 = getelementptr inbounds i16, i16* %28000, i64 -32
  %28008 = bitcast i16* %28007 to <16 x i16>*
  %28009 = load <16 x i16>, <16 x i16>* %28008, align 2, !tbaa !396
  %28010 = getelementptr inbounds i16, i16* %28000, i64 -16
  %28011 = bitcast i16* %28010 to <16 x i16>*
  %28012 = load <16 x i16>, <16 x i16>* %28011, align 2, !tbaa !396
  %28013 = getelementptr inbounds i16, i16* %28000, i64 -30
  %28014 = bitcast i16* %28013 to <16 x i16>*
  %28015 = load <16 x i16>, <16 x i16>* %28014, align 2, !tbaa !396
  %28016 = getelementptr inbounds i16, i16* %28000, i64 -14
  %28017 = bitcast i16* %28016 to <16 x i16>*
  %28018 = load <16 x i16>, <16 x i16>* %28017, align 2, !tbaa !396
  %28019 = getelementptr inbounds i16, i16* %28000, i64 -28
  %28020 = bitcast i16* %28019 to <16 x i16>*
  %28021 = load <16 x i16>, <16 x i16>* %28020, align 2, !tbaa !396
  %28022 = getelementptr inbounds i16, i16* %28000, i64 -12
  %28023 = bitcast i16* %28022 to <16 x i16>*
  %28024 = load <16 x i16>, <16 x i16>* %28023, align 2, !tbaa !396
  %28025 = getelementptr inbounds i16, i16* %28000, i64 -29
  %28026 = bitcast i16* %28025 to <16 x i16>*
  %28027 = load <16 x i16>, <16 x i16>* %28026, align 2, !tbaa !396
  %28028 = getelementptr inbounds i16, i16* %28000, i64 -13
  %28029 = bitcast i16* %28028 to <16 x i16>*
  %28030 = load <16 x i16>, <16 x i16>* %28029, align 2, !tbaa !396
  %28031 = add <16 x i16> %28009, %28003
  %28032 = add <16 x i16> %28031, %28015
  %28033 = add <16 x i16> %28032, %28021
  %28034 = add <16 x i16> %28033, %28027
  %28035 = add <16 x i16> %28012, %28006
  %28036 = add <16 x i16> %28035, %28018
  %28037 = add <16 x i16> %28036, %28024
  %28038 = add <16 x i16> %28037, %28030
  %28039 = shufflevector <16 x i16> %28034, <16 x i16> %28038, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28040 = udiv <32 x i16> %28039, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28041 = shufflevector <32 x i16> %28040, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28042 = zext i32 %.pre-phi3547 to i64
  %28043 = mul nsw i64 %299, %28042
  %28044 = add nsw i64 %301, %28043
  %28045 = getelementptr inbounds i16, i16* %blur_x879, i64 %28044
  %28046 = getelementptr inbounds i16, i16* %28045, i64 -32
  %28047 = bitcast i16* %28046 to <16 x i16>*
  store <16 x i16> %28041, <16 x i16>* %28047, align 2, !tbaa !399
  %28048 = shufflevector <32 x i16> %28040, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28049 = getelementptr inbounds i16, i16* %28045, i64 -16
  %28050 = bitcast i16* %28049 to <16 x i16>*
  store <16 x i16> %28048, <16 x i16>* %28050, align 2, !tbaa !399
  %28051 = zext i32 %.pre-phi3535 to i64
  %28052 = mul nsw i64 %28051, %333
  %28053 = add nsw i64 %28052, %296
  %28054 = getelementptr inbounds i16, i16* %blur_x879, i64 %28053
  %28055 = getelementptr inbounds i16, i16* %28054, i64 -32
  %28056 = bitcast i16* %28055 to <16 x i16>*
  %28057 = load <16 x i16>, <16 x i16>* %28056, align 2, !tbaa !399
  %28058 = getelementptr inbounds i16, i16* %28054, i64 -16
  %28059 = bitcast i16* %28058 to <16 x i16>*
  %28060 = load <16 x i16>, <16 x i16>* %28059, align 2, !tbaa !399
  %28061 = zext i32 %.pre-phi3569 to i64
  %28062 = mul nsw i64 %28061, %333
  %28063 = add nsw i64 %28062, %296
  %28064 = getelementptr inbounds i16, i16* %blur_x879, i64 %28063
  %28065 = getelementptr inbounds i16, i16* %28064, i64 -32
  %28066 = bitcast i16* %28065 to <16 x i16>*
  %28067 = load <16 x i16>, <16 x i16>* %28066, align 2, !tbaa !399
  %28068 = getelementptr inbounds i16, i16* %28064, i64 -16
  %28069 = bitcast i16* %28068 to <16 x i16>*
  %28070 = load <16 x i16>, <16 x i16>* %28069, align 2, !tbaa !399
  %28071 = zext i32 %.pre-phi3539 to i64
  %28072 = mul nsw i64 %28071, %333
  %28073 = add nsw i64 %28072, %296
  %28074 = getelementptr inbounds i16, i16* %blur_x879, i64 %28073
  %28075 = getelementptr inbounds i16, i16* %28074, i64 -32
  %28076 = bitcast i16* %28075 to <16 x i16>*
  %28077 = load <16 x i16>, <16 x i16>* %28076, align 2, !tbaa !399
  %28078 = getelementptr inbounds i16, i16* %28074, i64 -16
  %28079 = bitcast i16* %28078 to <16 x i16>*
  %28080 = load <16 x i16>, <16 x i16>* %28079, align 2, !tbaa !399
  %28081 = mul nsw i64 %28042, %333
  %28082 = add nsw i64 %28081, %296
  %28083 = getelementptr inbounds i16, i16* %blur_x879, i64 %28082
  %28084 = getelementptr inbounds i16, i16* %28083, i64 -32
  %28085 = bitcast i16* %28084 to <16 x i16>*
  %28086 = load <16 x i16>, <16 x i16>* %28085, align 2, !tbaa !399
  %28087 = getelementptr inbounds i16, i16* %28083, i64 -16
  %28088 = bitcast i16* %28087 to <16 x i16>*
  %28089 = load <16 x i16>, <16 x i16>* %28088, align 2, !tbaa !399
  %28090 = zext i32 %.pre-phi3543 to i64
  %28091 = mul nsw i64 %28090, %333
  %28092 = add nsw i64 %28091, %296
  %28093 = getelementptr inbounds i16, i16* %blur_x879, i64 %28092
  %28094 = getelementptr inbounds i16, i16* %28093, i64 -32
  %28095 = bitcast i16* %28094 to <16 x i16>*
  %28096 = load <16 x i16>, <16 x i16>* %28095, align 2, !tbaa !399
  %28097 = getelementptr inbounds i16, i16* %28093, i64 -16
  %28098 = bitcast i16* %28097 to <16 x i16>*
  %28099 = load <16 x i16>, <16 x i16>* %28098, align 2, !tbaa !399
  %28100 = add <16 x i16> %28067, %28057
  %28101 = add <16 x i16> %28100, %28077
  %28102 = add <16 x i16> %28101, %28086
  %28103 = add <16 x i16> %28102, %28096
  %28104 = add <16 x i16> %28070, %28060
  %28105 = add <16 x i16> %28104, %28080
  %28106 = add <16 x i16> %28105, %28089
  %28107 = add <16 x i16> %28106, %28099
  %28108 = shufflevector <16 x i16> %28103, <16 x i16> %28107, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28109 = udiv <32 x i16> %28108, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28110 = shufflevector <32 x i16> %28109, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28111 = sext i32 %a379 to i64
  %28112 = add nsw i64 %28111, 31
  %28113 = mul nsw i64 %28112, %334
  %28114 = add nsw i64 %336, %28113
  %28115 = getelementptr inbounds i16, i16* %263, i64 %28114
  %28116 = getelementptr inbounds i16, i16* %28115, i64 -32
  %28117 = bitcast i16* %28116 to <16 x i16>*
  store <16 x i16> %28110, <16 x i16>* %28117, align 2, !tbaa !401
  %28118 = shufflevector <32 x i16> %28109, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28119 = getelementptr inbounds i16, i16* %28115, i64 -16
  %28120 = bitcast i16* %28119 to <16 x i16>*
  store <16 x i16> %28118, <16 x i16>* %28120, align 2, !tbaa !401
  br label %after_bb2332

"for blur_y.s0.x.x.rebased2347":                  ; preds = %"for blur_y.s0.x.x.rebased2347.preheader", %"consume blur_x2355"
  %indvars.iv3436 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2347.preheader" ], [ %indvars.iv.next3437, %"consume blur_x2355" ]
  %28121 = add nsw i64 %indvars.iv3436, %303
  %28122 = icmp slt i64 %28121, 1
  %28123 = trunc i64 %28121 to i32
  %28124 = shl nsw i32 %28123, 5
  %28125 = icmp sgt i32 %198, %28124
  %28126 = or i1 %28122, %28125
  br i1 %28126, label %"produce blur_x2353", label %"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge"

"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2347"
  %.pre3626 = shl nsw i64 %28121, 5
  br label %"consume blur_x2355"

"end for blur_y.s0.x.x.rebased2348":              ; preds = %"consume blur_x2355", %after_bb2332
  br i1 %304, label %"for blur_y.s0.x.x.rebased2363.preheader", label %"end for blur_y.s0.x.x.rebased2364", !prof !386

"for blur_y.s0.x.x.rebased2363.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2348"
  %28127 = sext i32 %t1700974 to i64
  %28128 = zext i32 %.pre-phi3535 to i64
  %28129 = mul nsw i64 %28128, %337
  %28130 = sub nsw i64 %28129, %298
  %28131 = zext i32 %.pre-phi3569 to i64
  %28132 = mul nsw i64 %28131, %337
  %28133 = sub nsw i64 %28132, %298
  %28134 = zext i32 %.pre-phi3539 to i64
  %28135 = mul nsw i64 %28134, %337
  %28136 = sub nsw i64 %28135, %298
  %28137 = zext i32 %.pre-phi3547 to i64
  %28138 = mul nsw i64 %28137, %337
  %28139 = sub nsw i64 %28138, %298
  %28140 = zext i32 %.pre-phi3543 to i64
  %28141 = mul nsw i64 %28140, %337
  %28142 = sub nsw i64 %28141, %298
  %28143 = sext i32 %a379 to i64
  %28144 = add nsw i64 %28143, 31
  %28145 = mul nsw i64 %28144, %334
  %28146 = add nsw i64 %28145, %338
  br label %"for blur_y.s0.x.x.rebased2363"

"produce blur_x2353":                             ; preds = %"for blur_y.s0.x.x.rebased2347"
  %t12082354 = add nsw i32 %523, %28124
  %28147 = sext i32 %t12082354 to i64
  %28148 = getelementptr inbounds i16, i16* %read_input822, i64 %28147
  %28149 = getelementptr inbounds i16, i16* %28148, i64 1
  %28150 = bitcast i16* %28149 to <16 x i16>*
  %28151 = load <16 x i16>, <16 x i16>* %28150, align 2, !tbaa !396
  %28152 = getelementptr inbounds i16, i16* %28148, i64 17
  %28153 = bitcast i16* %28152 to <16 x i16>*
  %28154 = load <16 x i16>, <16 x i16>* %28153, align 2, !tbaa !396
  %28155 = bitcast i16* %28148 to <16 x i16>*
  %28156 = load <16 x i16>, <16 x i16>* %28155, align 2, !tbaa !396
  %28157 = getelementptr inbounds i16, i16* %28148, i64 16
  %28158 = bitcast i16* %28157 to <16 x i16>*
  %28159 = load <16 x i16>, <16 x i16>* %28158, align 2, !tbaa !396
  %28160 = getelementptr inbounds i16, i16* %28148, i64 2
  %28161 = bitcast i16* %28160 to <16 x i16>*
  %28162 = load <16 x i16>, <16 x i16>* %28161, align 2, !tbaa !396
  %28163 = getelementptr inbounds i16, i16* %28148, i64 18
  %28164 = bitcast i16* %28163 to <16 x i16>*
  %28165 = load <16 x i16>, <16 x i16>* %28164, align 2, !tbaa !396
  %28166 = getelementptr inbounds i16, i16* %28148, i64 4
  %28167 = bitcast i16* %28166 to <16 x i16>*
  %28168 = load <16 x i16>, <16 x i16>* %28167, align 2, !tbaa !396
  %28169 = getelementptr inbounds i16, i16* %28148, i64 20
  %28170 = bitcast i16* %28169 to <16 x i16>*
  %28171 = load <16 x i16>, <16 x i16>* %28170, align 2, !tbaa !396
  %28172 = getelementptr inbounds i16, i16* %28148, i64 3
  %28173 = bitcast i16* %28172 to <16 x i16>*
  %28174 = load <16 x i16>, <16 x i16>* %28173, align 2, !tbaa !396
  %28175 = getelementptr inbounds i16, i16* %28148, i64 19
  %28176 = bitcast i16* %28175 to <16 x i16>*
  %28177 = load <16 x i16>, <16 x i16>* %28176, align 2, !tbaa !396
  %28178 = add <16 x i16> %28156, %28151
  %28179 = add <16 x i16> %28178, %28162
  %28180 = add <16 x i16> %28179, %28168
  %28181 = add <16 x i16> %28180, %28174
  %28182 = add <16 x i16> %28159, %28154
  %28183 = add <16 x i16> %28182, %28165
  %28184 = add <16 x i16> %28183, %28171
  %28185 = add <16 x i16> %28184, %28177
  %28186 = shufflevector <16 x i16> %28181, <16 x i16> %28185, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28187 = udiv <32 x i16> %28186, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28188 = shufflevector <32 x i16> %28187, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28189 = shl nsw i64 %28121, 5
  %28190 = add nsw i64 %28189, %27980
  %28191 = getelementptr inbounds i16, i16* %blur_x879, i64 %28190
  %28192 = bitcast i16* %28191 to <16 x i16>*
  store <16 x i16> %28188, <16 x i16>* %28192, align 2, !tbaa !399
  %28193 = shufflevector <32 x i16> %28187, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28194 = getelementptr inbounds i16, i16* %28191, i64 16
  %28195 = bitcast i16* %28194 to <16 x i16>*
  store <16 x i16> %28193, <16 x i16>* %28195, align 2, !tbaa !399
  br label %"consume blur_x2355"

"consume blur_x2355":                             ; preds = %"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge", %"produce blur_x2353"
  %.pre-phi3627 = phi i64 [ %.pre3626, %"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge" ], [ %28189, %"produce blur_x2353" ]
  %28196 = add nsw i64 %27983, %.pre-phi3627
  %28197 = getelementptr inbounds i16, i16* %blur_x879, i64 %28196
  %28198 = bitcast i16* %28197 to <16 x i16>*
  %28199 = load <16 x i16>, <16 x i16>* %28198, align 2, !tbaa !399
  %28200 = getelementptr inbounds i16, i16* %28197, i64 16
  %28201 = bitcast i16* %28200 to <16 x i16>*
  %28202 = load <16 x i16>, <16 x i16>* %28201, align 2, !tbaa !399
  %28203 = add nsw i64 %27986, %.pre-phi3627
  %28204 = getelementptr inbounds i16, i16* %blur_x879, i64 %28203
  %28205 = bitcast i16* %28204 to <16 x i16>*
  %28206 = load <16 x i16>, <16 x i16>* %28205, align 2, !tbaa !399
  %28207 = getelementptr inbounds i16, i16* %28204, i64 16
  %28208 = bitcast i16* %28207 to <16 x i16>*
  %28209 = load <16 x i16>, <16 x i16>* %28208, align 2, !tbaa !399
  %28210 = add nsw i64 %27989, %.pre-phi3627
  %28211 = getelementptr inbounds i16, i16* %blur_x879, i64 %28210
  %28212 = bitcast i16* %28211 to <16 x i16>*
  %28213 = load <16 x i16>, <16 x i16>* %28212, align 2, !tbaa !399
  %28214 = getelementptr inbounds i16, i16* %28211, i64 16
  %28215 = bitcast i16* %28214 to <16 x i16>*
  %28216 = load <16 x i16>, <16 x i16>* %28215, align 2, !tbaa !399
  %28217 = add nsw i64 %27992, %.pre-phi3627
  %28218 = getelementptr inbounds i16, i16* %blur_x879, i64 %28217
  %28219 = bitcast i16* %28218 to <16 x i16>*
  %28220 = load <16 x i16>, <16 x i16>* %28219, align 2, !tbaa !399
  %28221 = getelementptr inbounds i16, i16* %28218, i64 16
  %28222 = bitcast i16* %28221 to <16 x i16>*
  %28223 = load <16 x i16>, <16 x i16>* %28222, align 2, !tbaa !399
  %28224 = add nsw i64 %27995, %.pre-phi3627
  %28225 = getelementptr inbounds i16, i16* %blur_x879, i64 %28224
  %28226 = bitcast i16* %28225 to <16 x i16>*
  %28227 = load <16 x i16>, <16 x i16>* %28226, align 2, !tbaa !399
  %28228 = getelementptr inbounds i16, i16* %28225, i64 16
  %28229 = bitcast i16* %28228 to <16 x i16>*
  %28230 = load <16 x i16>, <16 x i16>* %28229, align 2, !tbaa !399
  %28231 = add <16 x i16> %28206, %28199
  %28232 = add <16 x i16> %28231, %28213
  %28233 = add <16 x i16> %28232, %28220
  %28234 = add <16 x i16> %28233, %28227
  %28235 = add <16 x i16> %28209, %28202
  %28236 = add <16 x i16> %28235, %28216
  %28237 = add <16 x i16> %28236, %28223
  %28238 = add <16 x i16> %28237, %28230
  %28239 = shufflevector <16 x i16> %28234, <16 x i16> %28238, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28240 = udiv <32 x i16> %28239, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28241 = shufflevector <32 x i16> %28240, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28242 = add nsw i64 %27999, %.pre-phi3627
  %28243 = getelementptr inbounds i16, i16* %263, i64 %28242
  %28244 = bitcast i16* %28243 to <16 x i16>*
  store <16 x i16> %28241, <16 x i16>* %28244, align 2, !tbaa !401
  %28245 = shufflevector <32 x i16> %28240, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28246 = getelementptr inbounds i16, i16* %28243, i64 16
  %28247 = bitcast i16* %28246 to <16 x i16>*
  store <16 x i16> %28245, <16 x i16>* %28247, align 2, !tbaa !401
  %indvars.iv.next3437 = add nuw nsw i64 %indvars.iv3436, 1
  %.not2540 = icmp eq i64 %indvars.iv.next3437, %530
  br i1 %.not2540, label %"end for blur_y.s0.x.x.rebased2348", label %"for blur_y.s0.x.x.rebased2347"

"for blur_y.s0.x.x.rebased2363":                  ; preds = %"for blur_y.s0.x.x.rebased2363.preheader", %"consume blur_x2374"
  %blur_y.s0.x.x.rebased2365 = phi i32 [ %28357, %"consume blur_x2374" ], [ 0, %"for blur_y.s0.x.x.rebased2363.preheader" ]
  %28248 = add nsw i32 %blur_y.s0.x.x.rebased2365, %t1626814
  %a6176 = shl nsw i32 %28248, 5
  %28249 = icmp sgt i32 %t1647, %a6176
  %blur_y.s0.x.v0.base.s2366 = select i1 %28249, i32 %a6176, i32 %t1647
  %28250 = icmp slt i32 %28248, 1
  %28251 = icmp sgt i32 %198, %a6176
  %28252 = or i1 %28250, %28251
  br i1 %28252, label %"produce blur_x2371", label %"consume blur_x2374"

"end for blur_y.s0.x.x.rebased2364":              ; preds = %"consume blur_x2374", %"end for blur_y.s0.x.x.rebased2348"
  %28253 = add nuw nsw i32 %blur_y.s0.y.y818, 1
  %.not2538 = icmp eq i32 %28253, %t1612815
  br i1 %.not2538, label %if.then.i2859.loopexit, label %"for blur_y.s0.y.y816"

"produce blur_x2371":                             ; preds = %"for blur_y.s0.x.x.rebased2363"
  %28254 = icmp slt i32 %blur_y.s0.x.v0.base.s2366, %198
  %blur_x.s0.x.v1.base.s2372 = select i1 %28254, i32 %blur_y.s0.x.v0.base.s2366, i32 %198
  %t12132373 = add nsw i32 %523, %blur_x.s0.x.v1.base.s2372
  %28255 = sext i32 %t12132373 to i64
  %28256 = getelementptr inbounds i16, i16* %read_input822, i64 %28255
  %28257 = getelementptr inbounds i16, i16* %28256, i64 1
  %28258 = bitcast i16* %28257 to <16 x i16>*
  %28259 = load <16 x i16>, <16 x i16>* %28258, align 2, !tbaa !396
  %28260 = getelementptr inbounds i16, i16* %28256, i64 17
  %28261 = bitcast i16* %28260 to <16 x i16>*
  %28262 = load <16 x i16>, <16 x i16>* %28261, align 2, !tbaa !396
  %28263 = bitcast i16* %28256 to <16 x i16>*
  %28264 = load <16 x i16>, <16 x i16>* %28263, align 2, !tbaa !396
  %28265 = getelementptr inbounds i16, i16* %28256, i64 16
  %28266 = bitcast i16* %28265 to <16 x i16>*
  %28267 = load <16 x i16>, <16 x i16>* %28266, align 2, !tbaa !396
  %28268 = getelementptr inbounds i16, i16* %28256, i64 2
  %28269 = bitcast i16* %28268 to <16 x i16>*
  %28270 = load <16 x i16>, <16 x i16>* %28269, align 2, !tbaa !396
  %28271 = getelementptr inbounds i16, i16* %28256, i64 18
  %28272 = bitcast i16* %28271 to <16 x i16>*
  %28273 = load <16 x i16>, <16 x i16>* %28272, align 2, !tbaa !396
  %28274 = getelementptr inbounds i16, i16* %28256, i64 4
  %28275 = bitcast i16* %28274 to <16 x i16>*
  %28276 = load <16 x i16>, <16 x i16>* %28275, align 2, !tbaa !396
  %28277 = getelementptr inbounds i16, i16* %28256, i64 20
  %28278 = bitcast i16* %28277 to <16 x i16>*
  %28279 = load <16 x i16>, <16 x i16>* %28278, align 2, !tbaa !396
  %28280 = getelementptr inbounds i16, i16* %28256, i64 3
  %28281 = bitcast i16* %28280 to <16 x i16>*
  %28282 = load <16 x i16>, <16 x i16>* %28281, align 2, !tbaa !396
  %28283 = getelementptr inbounds i16, i16* %28256, i64 19
  %28284 = bitcast i16* %28283 to <16 x i16>*
  %28285 = load <16 x i16>, <16 x i16>* %28284, align 2, !tbaa !396
  %28286 = add <16 x i16> %28264, %28259
  %28287 = add <16 x i16> %28286, %28270
  %28288 = add <16 x i16> %28287, %28276
  %28289 = add <16 x i16> %28288, %28282
  %28290 = add <16 x i16> %28267, %28262
  %28291 = add <16 x i16> %28290, %28273
  %28292 = add <16 x i16> %28291, %28279
  %28293 = add <16 x i16> %28292, %28285
  %28294 = shufflevector <16 x i16> %28289, <16 x i16> %28293, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28295 = udiv <32 x i16> %28294, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28296 = shufflevector <32 x i16> %28295, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28297 = sext i32 %blur_x.s0.x.v1.base.s2372 to i64
  %28298 = add nsw i64 %28297, %28127
  %28299 = getelementptr inbounds i16, i16* %blur_x879, i64 %28298
  %28300 = bitcast i16* %28299 to <16 x i16>*
  store <16 x i16> %28296, <16 x i16>* %28300, align 2, !tbaa !399
  %28301 = shufflevector <32 x i16> %28295, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28302 = getelementptr inbounds i16, i16* %28299, i64 16
  %28303 = bitcast i16* %28302 to <16 x i16>*
  store <16 x i16> %28301, <16 x i16>* %28303, align 2, !tbaa !399
  br label %"consume blur_x2374"

"consume blur_x2374":                             ; preds = %"for blur_y.s0.x.x.rebased2363", %"produce blur_x2371"
  %28304 = sext i32 %blur_y.s0.x.v0.base.s2366 to i64
  %28305 = add nsw i64 %28130, %28304
  %28306 = getelementptr inbounds i16, i16* %blur_x879, i64 %28305
  %28307 = bitcast i16* %28306 to <16 x i16>*
  %28308 = load <16 x i16>, <16 x i16>* %28307, align 2, !tbaa !399
  %28309 = getelementptr inbounds i16, i16* %28306, i64 16
  %28310 = bitcast i16* %28309 to <16 x i16>*
  %28311 = load <16 x i16>, <16 x i16>* %28310, align 2, !tbaa !399
  %28312 = add nsw i64 %28133, %28304
  %28313 = getelementptr inbounds i16, i16* %blur_x879, i64 %28312
  %28314 = bitcast i16* %28313 to <16 x i16>*
  %28315 = load <16 x i16>, <16 x i16>* %28314, align 2, !tbaa !399
  %28316 = getelementptr inbounds i16, i16* %28313, i64 16
  %28317 = bitcast i16* %28316 to <16 x i16>*
  %28318 = load <16 x i16>, <16 x i16>* %28317, align 2, !tbaa !399
  %28319 = add nsw i64 %28136, %28304
  %28320 = getelementptr inbounds i16, i16* %blur_x879, i64 %28319
  %28321 = bitcast i16* %28320 to <16 x i16>*
  %28322 = load <16 x i16>, <16 x i16>* %28321, align 2, !tbaa !399
  %28323 = getelementptr inbounds i16, i16* %28320, i64 16
  %28324 = bitcast i16* %28323 to <16 x i16>*
  %28325 = load <16 x i16>, <16 x i16>* %28324, align 2, !tbaa !399
  %28326 = add nsw i64 %28139, %28304
  %28327 = getelementptr inbounds i16, i16* %blur_x879, i64 %28326
  %28328 = bitcast i16* %28327 to <16 x i16>*
  %28329 = load <16 x i16>, <16 x i16>* %28328, align 2, !tbaa !399
  %28330 = getelementptr inbounds i16, i16* %28327, i64 16
  %28331 = bitcast i16* %28330 to <16 x i16>*
  %28332 = load <16 x i16>, <16 x i16>* %28331, align 2, !tbaa !399
  %28333 = add nsw i64 %28142, %28304
  %28334 = getelementptr inbounds i16, i16* %blur_x879, i64 %28333
  %28335 = bitcast i16* %28334 to <16 x i16>*
  %28336 = load <16 x i16>, <16 x i16>* %28335, align 2, !tbaa !399
  %28337 = getelementptr inbounds i16, i16* %28334, i64 16
  %28338 = bitcast i16* %28337 to <16 x i16>*
  %28339 = load <16 x i16>, <16 x i16>* %28338, align 2, !tbaa !399
  %28340 = add <16 x i16> %28315, %28308
  %28341 = add <16 x i16> %28340, %28322
  %28342 = add <16 x i16> %28341, %28329
  %28343 = add <16 x i16> %28342, %28336
  %28344 = add <16 x i16> %28318, %28311
  %28345 = add <16 x i16> %28344, %28325
  %28346 = add <16 x i16> %28345, %28332
  %28347 = add <16 x i16> %28346, %28339
  %28348 = shufflevector <16 x i16> %28343, <16 x i16> %28347, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28349 = udiv <32 x i16> %28348, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %28350 = shufflevector <32 x i16> %28349, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28351 = add nsw i64 %28146, %28304
  %28352 = getelementptr inbounds i16, i16* %263, i64 %28351
  %28353 = bitcast i16* %28352 to <16 x i16>*
  store <16 x i16> %28350, <16 x i16>* %28353, align 2, !tbaa !401
  %28354 = shufflevector <32 x i16> %28349, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28355 = getelementptr inbounds i16, i16* %28352, i64 16
  %28356 = bitcast i16* %28355 to <16 x i16>*
  store <16 x i16> %28354, <16 x i16>* %28356, align 2, !tbaa !401
  %28357 = add nuw nsw i32 %blur_y.s0.x.x.rebased2365, 1
  %.not2539 = icmp eq i32 %28357, %t1683898
  br i1 %.not2539, label %"end for blur_y.s0.x.x.rebased2364", label %"for blur_y.s0.x.x.rebased2363"
}

; Function Attrs: nounwind
define i32 @blur5x5_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur5x5(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur5x5_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur5x5_metadata_storage
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.0(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.1(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.2(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.3(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.4(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.5(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.6(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.7(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.8(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.9(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.10(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.11(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.12(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.13(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.14(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.15(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.16(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.17(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.18(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.19(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.20(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.21(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.22(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.23(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.24(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.25(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.26(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.27(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.28(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.29(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.30(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.31(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.32(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.33(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.34(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.35(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.36(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.37(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.38(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.39(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.40(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.41(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.42(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.43(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.44(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.45(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.46(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.47(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.48(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.49(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.50(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.51(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.52(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.53(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.54(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.55(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.56(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.57(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.58(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.59(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.60(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.61(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.62(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.63(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.64(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.65(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.66(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.67(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.68(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.69(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.70(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.71(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.72(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.73(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.74(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.75(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.76(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.77(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.78(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.79(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.80(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.81(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.82(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.83(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.84(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.85(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.86(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.87(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.88(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.89(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.90(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.91(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.92(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.93(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.94(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.95(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.96(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.97(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.98(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.99(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.100(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.101(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.102(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.103(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.104(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.105(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.106(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.107(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.108(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.109(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.110(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.111(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.112(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.113(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.114(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.115(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.116(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.117(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.118(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.119(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.120(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.121(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.122(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.123(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.124(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.125(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.126(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.127(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.128(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.129(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.130(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.131(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.132(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.133(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.134(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.135(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.136(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.137(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.138(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.139(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.140(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.141(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.142(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.143(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.144(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.145(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.146(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.147(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.148(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.149(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.150(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.151(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.152(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.153(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.154(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.155(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.156(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.157(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.158(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.159(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.160(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.161(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.162(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.163(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.164(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.165(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.166(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.167(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.168(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.169(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.170(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.171(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.172(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.173(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.174(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.175(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.176(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.177(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.178(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.179(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.180(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.181(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.182(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.183(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.184(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.185(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.186(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.187(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.188(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.189(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.190(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.191(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.192(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.193(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.194(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.195(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.196(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.197(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.198(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.199(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.200(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.201(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.202(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen.203(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = udiv <32 x i16> %3, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  ret <32 x i16> %4
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
